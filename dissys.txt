
packages/system/32/0001/system.dll:     file format elf32-i386


Disassembly of section .text:

10000000 <beginx(void*)>:
10000000:	55                   	push   ebp
10000001:	89 e5                	mov    ebp,esp
10000003:	83 ec 08             	sub    esp,0x8
10000006:	83 ec 0c             	sub    esp,0xc
10000009:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000000c:	e8 fc ff ff ff       	call   1000000d <beginx(void*)+0xd>	1000000d: R_386_PC32	begin(void*)
10000011:	83 c4 10             	add    esp,0x10
10000014:	90                   	nop
10000015:	c9                   	leave  
10000016:	c3                   	ret    

10000017 <memcmp(void*, void*, unsigned long)>:
10000017:	55                   	push   ebp
10000018:	89 e5                	mov    ebp,esp
1000001a:	83 ec 10             	sub    esp,0x10
1000001d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000020:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
10000023:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000026:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
10000029:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
1000002c:	8d 50 ff             	lea    edx,[eax-0x1]
1000002f:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
10000032:	85 c0                	test   eax,eax
10000034:	74 12                	je     10000048 <memcmp(void*, void*, unsigned long)+0x31>
10000036:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000039:	8a 10                	mov    dl,BYTE PTR [eax]
1000003b:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
1000003e:	8a 00                	mov    al,BYTE PTR [eax]
10000040:	38 c2                	cmp    dl,al
10000042:	75 04                	jne    10000048 <memcmp(void*, void*, unsigned long)+0x31>
10000044:	b0 01                	mov    al,0x1
10000046:	eb 02                	jmp    1000004a <memcmp(void*, void*, unsigned long)+0x33>
10000048:	b0 00                	mov    al,0x0
1000004a:	84 c0                	test   al,al
1000004c:	74 08                	je     10000056 <memcmp(void*, void*, unsigned long)+0x3f>
1000004e:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
10000051:	ff 45 f8             	inc    DWORD PTR [ebp-0x8]
10000054:	eb d3                	jmp    10000029 <memcmp(void*, void*, unsigned long)+0x12>
10000056:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000059:	8a 00                	mov    al,BYTE PTR [eax]
1000005b:	0f b6 d0             	movzx  edx,al
1000005e:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
10000061:	8a 00                	mov    al,BYTE PTR [eax]
10000063:	0f b6 c0             	movzx  eax,al
10000066:	29 c2                	sub    edx,eax
10000068:	89 d0                	mov    eax,edx
1000006a:	c9                   	leave  
1000006b:	c3                   	ret    

1000006c <memmove>:
1000006c:	55                   	push   ebp
1000006d:	89 e5                	mov    ebp,esp
1000006f:	83 ec 10             	sub    esp,0x10
10000072:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000075:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
10000078:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
1000007b:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
1000007e:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
10000081:	3b 45 fc             	cmp    eax,DWORD PTR [ebp-0x4]
10000084:	76 1b                	jbe    100000a1 <memmove+0x35>
10000086:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
1000008a:	74 46                	je     100000d2 <memmove+0x66>
1000008c:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
1000008f:	8a 10                	mov    dl,BYTE PTR [eax]
10000091:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000094:	88 10                	mov    BYTE PTR [eax],dl
10000096:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
10000099:	ff 45 f8             	inc    DWORD PTR [ebp-0x8]
1000009c:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
1000009f:	eb e5                	jmp    10000086 <memmove+0x1a>
100000a1:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
100000a4:	3b 45 fc             	cmp    eax,DWORD PTR [ebp-0x4]
100000a7:	73 29                	jae    100000d2 <memmove+0x66>
100000a9:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
100000ac:	48                   	dec    eax
100000ad:	01 45 fc             	add    DWORD PTR [ebp-0x4],eax
100000b0:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
100000b3:	48                   	dec    eax
100000b4:	01 45 f8             	add    DWORD PTR [ebp-0x8],eax
100000b7:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
100000bb:	74 15                	je     100000d2 <memmove+0x66>
100000bd:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
100000c0:	8a 10                	mov    dl,BYTE PTR [eax]
100000c2:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100000c5:	88 10                	mov    BYTE PTR [eax],dl
100000c7:	ff 4d fc             	dec    DWORD PTR [ebp-0x4]
100000ca:	ff 4d f8             	dec    DWORD PTR [ebp-0x8]
100000cd:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
100000d0:	eb e5                	jmp    100000b7 <memmove+0x4b>
100000d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100000d5:	c9                   	leave  
100000d6:	c3                   	ret    

100000d7 <memset>:
100000d7:	55                   	push   ebp
100000d8:	89 e5                	mov    ebp,esp
100000da:	83 ec 10             	sub    esp,0x10
100000dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100000e0:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
100000e3:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
100000e7:	74 12                	je     100000fb <memset+0x24>
100000e9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100000ec:	88 c2                	mov    dl,al
100000ee:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100000f1:	88 10                	mov    BYTE PTR [eax],dl
100000f3:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
100000f6:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
100000f9:	eb e8                	jmp    100000e3 <memset+0xc>
100000fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100000fe:	c9                   	leave  
100000ff:	c3                   	ret    

10000100 <strlen>:
10000100:	55                   	push   ebp
10000101:	89 e5                	mov    ebp,esp
10000103:	83 ec 10             	sub    esp,0x10
10000106:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
1000010d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000110:	8a 00                	mov    al,BYTE PTR [eax]
10000112:	84 c0                	test   al,al
10000114:	74 0c                	je     10000122 <strlen+0x22>
10000116:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000119:	40                   	inc    eax
1000011a:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
1000011d:	ff 45 08             	inc    DWORD PTR [ebp+0x8]
10000120:	eb eb                	jmp    1000010d <strlen+0xd>
10000122:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000125:	c9                   	leave  
10000126:	c3                   	ret    

10000127 <strpbrk(char const*, char const*)>:
10000127:	55                   	push   ebp
10000128:	89 e5                	mov    ebp,esp
1000012a:	83 ec 10             	sub    esp,0x10
1000012d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000130:	8a 00                	mov    al,BYTE PTR [eax]
10000132:	84 c0                	test   al,al
10000134:	74 30                	je     10000166 <strpbrk(char const*, char const*)+0x3f>
10000136:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000139:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
1000013c:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000013f:	8a 00                	mov    al,BYTE PTR [eax]
10000141:	84 c0                	test   al,al
10000143:	74 18                	je     1000015d <strpbrk(char const*, char const*)+0x36>
10000145:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000148:	8a 10                	mov    dl,BYTE PTR [eax]
1000014a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000014d:	8a 00                	mov    al,BYTE PTR [eax]
1000014f:	38 c2                	cmp    dl,al
10000151:	75 05                	jne    10000158 <strpbrk(char const*, char const*)+0x31>
10000153:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000156:	eb 13                	jmp    1000016b <strpbrk(char const*, char const*)+0x44>
10000158:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
1000015b:	eb df                	jmp    1000013c <strpbrk(char const*, char const*)+0x15>
1000015d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000160:	40                   	inc    eax
10000161:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
10000164:	eb c7                	jmp    1000012d <strpbrk(char const*, char const*)+0x6>
10000166:	b8 00 00 00 00       	mov    eax,0x0
1000016b:	c9                   	leave  
1000016c:	c3                   	ret    

1000016d <strtok>:
1000016d:	55                   	push   ebp
1000016e:	89 e5                	mov    ebp,esp
10000170:	83 ec 10             	sub    esp,0x10
10000173:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000176:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
10000179:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000017c:	85 c0                	test   eax,eax
1000017e:	75 18                	jne    10000198 <strtok+0x2b>
10000180:	a1 00 00 00 00       	mov    eax,ds:0x0	10000181: R_386_32	SavedPtr
10000185:	85 c0                	test   eax,eax
10000187:	75 07                	jne    10000190 <strtok+0x23>
10000189:	b8 00 00 00 00       	mov    eax,0x0
1000018e:	eb 6f                	jmp    100001ff <strtok+0x92>
10000190:	a1 00 00 00 00       	mov    eax,ds:0x0	10000191: R_386_32	SavedPtr
10000195:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
10000198:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000019b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
1000019e:	50                   	push   eax
1000019f:	e8 fc ff ff ff       	call   100001a0 <strtok+0x33>	100001a0: R_386_PC32	strpbrk(char const*, char const*)
100001a4:	83 c4 08             	add    esp,0x8
100001a7:	a3 00 00 00 00       	mov    ds:0x0,eax	100001a8: R_386_32	SavedPtr
100001ac:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	100001ae: R_386_32	SavedPtr
100001b2:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100001b5:	39 c2                	cmp    edx,eax
100001b7:	75 22                	jne    100001db <strtok+0x6e>
100001b9:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100001bc:	8d 50 01             	lea    edx,[eax+0x1]
100001bf:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
100001c2:	c6 00 00             	mov    BYTE PTR [eax],0x0
100001c5:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100001c8:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
100001cb:	50                   	push   eax
100001cc:	e8 fc ff ff ff       	call   100001cd <strtok+0x60>	100001cd: R_386_PC32	strpbrk(char const*, char const*)
100001d1:	83 c4 08             	add    esp,0x8
100001d4:	a3 00 00 00 00       	mov    ds:0x0,eax	100001d5: R_386_32	SavedPtr
100001d9:	eb d1                	jmp    100001ac <strtok+0x3f>
100001db:	a1 00 00 00 00       	mov    eax,ds:0x0	100001dc: R_386_32	SavedPtr
100001e0:	85 c0                	test   eax,eax
100001e2:	74 16                	je     100001fa <strtok+0x8d>
100001e4:	a1 00 00 00 00       	mov    eax,ds:0x0	100001e5: R_386_32	SavedPtr
100001e9:	8d 50 01             	lea    edx,[eax+0x1]
100001ec:	89 15 00 00 00 00    	mov    DWORD PTR ds:0x0,edx	100001ee: R_386_32	SavedPtr
100001f2:	c6 00 00             	mov    BYTE PTR [eax],0x0
100001f5:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100001f8:	eb 05                	jmp    100001ff <strtok+0x92>
100001fa:	b8 00 00 00 00       	mov    eax,0x0
100001ff:	c9                   	leave  
10000200:	c3                   	ret    

10000201 <strcpy>:
10000201:	55                   	push   ebp
10000202:	89 e5                	mov    ebp,esp
10000204:	83 ec 10             	sub    esp,0x10
10000207:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000020a:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
1000020d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000210:	8a 00                	mov    al,BYTE PTR [eax]
10000212:	84 c0                	test   al,al
10000214:	74 12                	je     10000228 <strcpy+0x27>
10000216:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000219:	8a 10                	mov    dl,BYTE PTR [eax]
1000021b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000021e:	88 10                	mov    BYTE PTR [eax],dl
10000220:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
10000223:	ff 45 0c             	inc    DWORD PTR [ebp+0xc]
10000226:	eb e5                	jmp    1000020d <strcpy+0xc>
10000228:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000022b:	c6 00 00             	mov    BYTE PTR [eax],0x0
1000022e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000231:	c9                   	leave  
10000232:	c3                   	ret    

10000233 <strncpyxx(char*, char const*, unsigned long)>:
10000233:	55                   	push   ebp
10000234:	89 e5                	mov    ebp,esp
10000236:	83 ec 10             	sub    esp,0x10
10000239:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000023c:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
1000023f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000242:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
10000245:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
10000249:	74 23                	je     1000026e <strncpyxx(char*, char const*, unsigned long)+0x3b>
1000024b:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
1000024e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10000251:	8d 42 01             	lea    eax,[edx+0x1]
10000254:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
10000257:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000025a:	8d 48 01             	lea    ecx,[eax+0x1]
1000025d:	89 4d fc             	mov    DWORD PTR [ebp-0x4],ecx
10000260:	8a 12                	mov    dl,BYTE PTR [edx]
10000262:	88 10                	mov    BYTE PTR [eax],dl
10000264:	8a 00                	mov    al,BYTE PTR [eax]
10000266:	84 c0                	test   al,al
10000268:	74 04                	je     1000026e <strncpyxx(char*, char const*, unsigned long)+0x3b>
1000026a:	b0 01                	mov    al,0x1
1000026c:	eb 02                	jmp    10000270 <strncpyxx(char*, char const*, unsigned long)+0x3d>
1000026e:	b0 00                	mov    al,0x0
10000270:	84 c0                	test   al,al
10000272:	74 02                	je     10000276 <strncpyxx(char*, char const*, unsigned long)+0x43>
10000274:	eb cf                	jmp    10000245 <strncpyxx(char*, char const*, unsigned long)+0x12>
10000276:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
10000279:	8d 50 ff             	lea    edx,[eax-0x1]
1000027c:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
1000027f:	85 c0                	test   eax,eax
10000281:	0f 95 c0             	setne  al
10000284:	84 c0                	test   al,al
10000286:	74 0b                	je     10000293 <strncpyxx(char*, char const*, unsigned long)+0x60>
10000288:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000028b:	c6 00 00             	mov    BYTE PTR [eax],0x0
1000028e:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
10000291:	eb e3                	jmp    10000276 <strncpyxx(char*, char const*, unsigned long)+0x43>
10000293:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000296:	c9                   	leave  
10000297:	c3                   	ret    

10000298 <strcmp>:
10000298:	55                   	push   ebp
10000299:	89 e5                	mov    ebp,esp
1000029b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000029e:	8a 10                	mov    dl,BYTE PTR [eax]
100002a0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100002a3:	8a 00                	mov    al,BYTE PTR [eax]
100002a5:	38 c2                	cmp    dl,al
100002a7:	75 20                	jne    100002c9 <strcmp+0x31>
100002a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002ac:	8d 50 01             	lea    edx,[eax+0x1]
100002af:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
100002b2:	8a 00                	mov    al,BYTE PTR [eax]
100002b4:	84 c0                	test   al,al
100002b6:	0f 94 c0             	sete   al
100002b9:	84 c0                	test   al,al
100002bb:	74 07                	je     100002c4 <strcmp+0x2c>
100002bd:	b8 00 00 00 00       	mov    eax,0x0
100002c2:	eb 19                	jmp    100002dd <strcmp+0x45>
100002c4:	ff 45 0c             	inc    DWORD PTR [ebp+0xc]
100002c7:	eb d2                	jmp    1000029b <strcmp+0x3>
100002c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002cc:	8a 00                	mov    al,BYTE PTR [eax]
100002ce:	0f b6 d0             	movzx  edx,al
100002d1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100002d4:	8a 00                	mov    al,BYTE PTR [eax]
100002d6:	0f b6 c0             	movzx  eax,al
100002d9:	29 c2                	sub    edx,eax
100002db:	89 d0                	mov    eax,edx
100002dd:	5d                   	pop    ebp
100002de:	c3                   	ret    

100002df <strchr(char const*, int)>:
100002df:	55                   	push   ebp
100002e0:	89 e5                	mov    ebp,esp
100002e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002e5:	8a 00                	mov    al,BYTE PTR [eax]
100002e7:	84 c0                	test   al,al
100002e9:	74 16                	je     10000301 <strchr(char const*, int)+0x22>
100002eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002ee:	8a 00                	mov    al,BYTE PTR [eax]
100002f0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
100002f3:	38 d0                	cmp    al,dl
100002f5:	75 05                	jne    100002fc <strchr(char const*, int)+0x1d>
100002f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002fa:	eb 0a                	jmp    10000306 <strchr(char const*, int)+0x27>
100002fc:	ff 45 08             	inc    DWORD PTR [ebp+0x8]
100002ff:	eb e1                	jmp    100002e2 <strchr(char const*, int)+0x3>
10000301:	b8 00 00 00 00       	mov    eax,0x0
10000306:	5d                   	pop    ebp
10000307:	c3                   	ret    

10000308 <strncmp>:
10000308:	55                   	push   ebp
10000309:	89 e5                	mov    ebp,esp
1000030b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
1000030e:	8d 50 ff             	lea    edx,[eax-0x1]
10000311:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
10000314:	85 c0                	test   eax,eax
10000316:	74 12                	je     1000032a <strncmp+0x22>
10000318:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000031b:	8a 10                	mov    dl,BYTE PTR [eax]
1000031d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000320:	8a 00                	mov    al,BYTE PTR [eax]
10000322:	38 c2                	cmp    dl,al
10000324:	75 04                	jne    1000032a <strncmp+0x22>
10000326:	b0 01                	mov    al,0x1
10000328:	eb 02                	jmp    1000032c <strncmp+0x24>
1000032a:	b0 00                	mov    al,0x0
1000032c:	84 c0                	test   al,al
1000032e:	74 20                	je     10000350 <strncmp+0x48>
10000330:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000333:	8d 50 01             	lea    edx,[eax+0x1]
10000336:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
10000339:	8a 00                	mov    al,BYTE PTR [eax]
1000033b:	84 c0                	test   al,al
1000033d:	0f 94 c0             	sete   al
10000340:	84 c0                	test   al,al
10000342:	74 07                	je     1000034b <strncmp+0x43>
10000344:	b8 00 00 00 00       	mov    eax,0x0
10000349:	eb 19                	jmp    10000364 <strncmp+0x5c>
1000034b:	ff 45 0c             	inc    DWORD PTR [ebp+0xc]
1000034e:	eb bb                	jmp    1000030b <strncmp+0x3>
10000350:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000353:	8a 00                	mov    al,BYTE PTR [eax]
10000355:	0f b6 d0             	movzx  edx,al
10000358:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
1000035b:	8a 00                	mov    al,BYTE PTR [eax]
1000035d:	0f b6 c0             	movzx  eax,al
10000360:	29 c2                	sub    edx,eax
10000362:	89 d0                	mov    eax,edx
10000364:	5d                   	pop    ebp
10000365:	c3                   	ret    

10000366 <strcat>:
10000366:	55                   	push   ebp
10000367:	89 e5                	mov    ebp,esp
10000369:	83 ec 10             	sub    esp,0x10
1000036c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000036f:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
10000372:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000375:	8d 50 01             	lea    edx,[eax+0x1]
10000378:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
1000037b:	8a 00                	mov    al,BYTE PTR [eax]
1000037d:	84 c0                	test   al,al
1000037f:	0f 95 c0             	setne  al
10000382:	84 c0                	test   al,al
10000384:	74 02                	je     10000388 <strcat+0x22>
10000386:	eb ea                	jmp    10000372 <strcat+0xc>
10000388:	ff 4d fc             	dec    DWORD PTR [ebp-0x4]
1000038b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
1000038e:	8d 42 01             	lea    eax,[edx+0x1]
10000391:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
10000394:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000397:	8d 48 01             	lea    ecx,[eax+0x1]
1000039a:	89 4d fc             	mov    DWORD PTR [ebp-0x4],ecx
1000039d:	8a 12                	mov    dl,BYTE PTR [edx]
1000039f:	88 10                	mov    BYTE PTR [eax],dl
100003a1:	8a 00                	mov    al,BYTE PTR [eax]
100003a3:	84 c0                	test   al,al
100003a5:	0f 95 c0             	setne  al
100003a8:	84 c0                	test   al,al
100003aa:	74 02                	je     100003ae <strcat+0x48>
100003ac:	eb dd                	jmp    1000038b <strcat+0x25>
100003ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100003b1:	c9                   	leave  
100003b2:	c3                   	ret    

100003b3 <strncat(char*, char const*, unsigned long)>:
100003b3:	55                   	push   ebp
100003b4:	89 e5                	mov    ebp,esp
100003b6:	83 ec 10             	sub    esp,0x10
100003b9:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
100003bd:	74 5c                	je     1000041b <strncat(char*, char const*, unsigned long)+0x68>
100003bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100003c2:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
100003c5:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100003c8:	8d 50 01             	lea    edx,[eax+0x1]
100003cb:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
100003ce:	8a 00                	mov    al,BYTE PTR [eax]
100003d0:	84 c0                	test   al,al
100003d2:	0f 95 c0             	setne  al
100003d5:	84 c0                	test   al,al
100003d7:	74 02                	je     100003db <strncat(char*, char const*, unsigned long)+0x28>
100003d9:	eb ea                	jmp    100003c5 <strncat(char*, char const*, unsigned long)+0x12>
100003db:	ff 4d fc             	dec    DWORD PTR [ebp-0x4]
100003de:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
100003e1:	8d 42 01             	lea    eax,[edx+0x1]
100003e4:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
100003e7:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100003ea:	8d 48 01             	lea    ecx,[eax+0x1]
100003ed:	89 4d fc             	mov    DWORD PTR [ebp-0x4],ecx
100003f0:	8a 12                	mov    dl,BYTE PTR [edx]
100003f2:	88 10                	mov    BYTE PTR [eax],dl
100003f4:	8a 00                	mov    al,BYTE PTR [eax]
100003f6:	84 c0                	test   al,al
100003f8:	74 0d                	je     10000407 <strncat(char*, char const*, unsigned long)+0x54>
100003fa:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
100003fd:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
10000401:	74 04                	je     10000407 <strncat(char*, char const*, unsigned long)+0x54>
10000403:	b0 01                	mov    al,0x1
10000405:	eb 02                	jmp    10000409 <strncat(char*, char const*, unsigned long)+0x56>
10000407:	b0 00                	mov    al,0x0
10000409:	84 c0                	test   al,al
1000040b:	74 02                	je     1000040f <strncat(char*, char const*, unsigned long)+0x5c>
1000040d:	eb cf                	jmp    100003de <strncat(char*, char const*, unsigned long)+0x2b>
1000040f:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
10000413:	75 06                	jne    1000041b <strncat(char*, char const*, unsigned long)+0x68>
10000415:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000418:	c6 00 00             	mov    BYTE PTR [eax],0x0
1000041b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000041e:	c9                   	leave  
1000041f:	c3                   	ret    

10000420 <strstr(char*, char*)>:
10000420:	55                   	push   ebp
10000421:	89 e5                	mov    ebp,esp
10000423:	83 ec 10             	sub    esp,0x10
10000426:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10000429:	e8 fc ff ff ff       	call   1000042a <strstr(char*, char*)+0xa>	1000042a: R_386_PC32	strlen
1000042e:	83 c4 04             	add    esp,0x4
10000431:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
10000434:	83 7d fc 00          	cmp    DWORD PTR [ebp-0x4],0x0
10000438:	75 05                	jne    1000043f <strstr(char*, char*)+0x1f>
1000043a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000043d:	eb 3f                	jmp    1000047e <strstr(char*, char*)+0x5e>
1000043f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000442:	50                   	push   eax
10000443:	e8 fc ff ff ff       	call   10000444 <strstr(char*, char*)+0x24>	10000444: R_386_PC32	strlen
10000448:	83 c4 04             	add    esp,0x4
1000044b:	39 45 fc             	cmp    DWORD PTR [ebp-0x4],eax
1000044e:	77 29                	ja     10000479 <strstr(char*, char*)+0x59>
10000450:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000453:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
10000456:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10000459:	50                   	push   eax
1000045a:	e8 fc ff ff ff       	call   1000045b <strstr(char*, char*)+0x3b>	1000045b: R_386_PC32	memcmp(void*, void*, unsigned long)
1000045f:	83 c4 0c             	add    esp,0xc
10000462:	85 c0                	test   eax,eax
10000464:	0f 94 c0             	sete   al
10000467:	84 c0                	test   al,al
10000469:	74 05                	je     10000470 <strstr(char*, char*)+0x50>
1000046b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000046e:	eb 0e                	jmp    1000047e <strstr(char*, char*)+0x5e>
10000470:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000473:	40                   	inc    eax
10000474:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
10000477:	eb c6                	jmp    1000043f <strstr(char*, char*)+0x1f>
10000479:	b8 00 00 00 00       	mov    eax,0x0
1000047e:	c9                   	leave  
1000047f:	c3                   	ret    

10000480 <rmtree(char*)>:
10000480:	55                   	push   ebp
10000481:	89 e5                	mov    ebp,esp
10000483:	53                   	push   ebx
10000484:	81 ec 64 02 00 00    	sub    esp,0x264
1000048a:	68 2c 01 00 00       	push   0x12c
1000048f:	6a 00                	push   0x0
10000491:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
10000497:	50                   	push   eax
10000498:	e8 fc ff ff ff       	call   10000499 <rmtree(char*)+0x19>	10000499: R_386_PC32	memset
1000049d:	83 c4 0c             	add    esp,0xc
100004a0:	8d 85 a8 fd ff ff    	lea    eax,[ebp-0x258]
100004a6:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
100004a9:	83 ec 0c             	sub    esp,0xc
100004ac:	68 14 01 00 00       	push   0x114
100004b1:	e8 fc ff ff ff       	call   100004b2 <rmtree(char*)+0x32>	100004b2: R_386_PC32	operator new(unsigned long)
100004b6:	83 c4 10             	add    esp,0x10
100004b9:	89 c3                	mov    ebx,eax
100004bb:	b8 00 20 00 c2       	mov    eax,0xc2002000
100004c0:	8b 00                	mov    eax,DWORD PTR [eax]
100004c2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
100004c5:	83 ec 04             	sub    esp,0x4
100004c8:	50                   	push   eax
100004c9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100004cc:	53                   	push   ebx
100004cd:	e8 fc ff ff ff       	call   100004ce <rmtree(char*)+0x4e>	100004ce: R_386_PC32	Directory::Directory(char const*, Process*)
100004d2:	83 c4 10             	add    esp,0x10
100004d5:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
100004d8:	83 ec 0c             	sub    esp,0xc
100004db:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
100004de:	e8 fc ff ff ff       	call   100004df <rmtree(char*)+0x5f>	100004df: R_386_PC32	Directory::open()
100004e3:	83 c4 10             	add    esp,0x10
100004e6:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
100004e9:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
100004ed:	74 24                	je     10000513 <rmtree(char*)+0x93>
100004ef:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
100004f3:	0f 84 8b 01 00 00    	je     10000684 <rmtree(char*)+0x204>
100004f9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100004fc:	8b 00                	mov    eax,DWORD PTR [eax]
100004fe:	83 c0 08             	add    eax,0x8
10000501:	8b 00                	mov    eax,DWORD PTR [eax]
10000503:	83 ec 0c             	sub    esp,0xc
10000506:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000509:	ff d0                	call   eax
1000050b:	83 c4 10             	add    esp,0x10
1000050e:	e9 72 01 00 00       	jmp    10000685 <rmtree(char*)+0x205>
10000513:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10000516:	8b 00                	mov    eax,DWORD PTR [eax]
10000518:	83 c0 0c             	add    eax,0xc
1000051b:	8b 00                	mov    eax,DWORD PTR [eax]
1000051d:	83 ec 0c             	sub    esp,0xc
10000520:	8d 95 a4 fd ff ff    	lea    edx,[ebp-0x25c]
10000526:	52                   	push   edx
10000527:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
1000052a:	6a 00                	push   0x0
1000052c:	68 10 01 00 00       	push   0x110
10000531:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000534:	ff d0                	call   eax
10000536:	83 c4 20             	add    esp,0x20
10000539:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
1000053c:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
10000540:	0f 85 04 01 00 00    	jne    1000064a <rmtree(char*)+0x1ca>
10000546:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10000549:	83 c0 10             	add    eax,0x10
1000054c:	83 ec 08             	sub    esp,0x8
1000054f:	68 90 87 00 10       	push   0x10008790	10000550: R_386_32	.text
10000554:	50                   	push   eax
10000555:	e8 fc ff ff ff       	call   10000556 <rmtree(char*)+0xd6>	10000556: R_386_PC32	strcmp
1000055a:	83 c4 10             	add    esp,0x10
1000055d:	85 c0                	test   eax,eax
1000055f:	74 b2                	je     10000513 <rmtree(char*)+0x93>
10000561:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10000564:	83 c0 10             	add    eax,0x10
10000567:	83 ec 08             	sub    esp,0x8
1000056a:	68 92 87 00 10       	push   0x10008792	1000056b: R_386_32	.text
1000056f:	50                   	push   eax
10000570:	e8 fc ff ff ff       	call   10000571 <rmtree(char*)+0xf1>	10000571: R_386_PC32	strcmp
10000575:	83 c4 10             	add    esp,0x10
10000578:	85 c0                	test   eax,eax
1000057a:	74 97                	je     10000513 <rmtree(char*)+0x93>
1000057c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
1000057f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
10000582:	83 e0 02             	and    eax,0x2
10000585:	85 c0                	test   eax,eax
10000587:	74 17                	je     100005a0 <rmtree(char*)+0x120>
10000589:	83 ec 0c             	sub    esp,0xc
1000058c:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
10000592:	50                   	push   eax
10000593:	e8 fc ff ff ff       	call   10000594 <rmtree(char*)+0x114>	10000594: R_386_PC32	rmtree(char*)
10000598:	83 c4 10             	add    esp,0x10
1000059b:	e9 73 ff ff ff       	jmp    10000513 <rmtree(char*)+0x93>
100005a0:	83 ec 08             	sub    esp,0x8
100005a3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100005a6:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
100005ac:	50                   	push   eax
100005ad:	e8 fc ff ff ff       	call   100005ae <rmtree(char*)+0x12e>	100005ae: R_386_PC32	strcpy
100005b2:	83 c4 10             	add    esp,0x10
100005b5:	83 ec 08             	sub    esp,0x8
100005b8:	68 95 87 00 10       	push   0x10008795	100005b9: R_386_32	.text
100005bd:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
100005c3:	50                   	push   eax
100005c4:	e8 fc ff ff ff       	call   100005c5 <rmtree(char*)+0x145>	100005c5: R_386_PC32	strcat
100005c9:	83 c4 10             	add    esp,0x10
100005cc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
100005cf:	83 c0 10             	add    eax,0x10
100005d2:	83 ec 08             	sub    esp,0x8
100005d5:	50                   	push   eax
100005d6:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
100005dc:	50                   	push   eax
100005dd:	e8 fc ff ff ff       	call   100005de <rmtree(char*)+0x15e>	100005de: R_386_PC32	strcat
100005e2:	83 c4 10             	add    esp,0x10
100005e5:	83 ec 0c             	sub    esp,0xc
100005e8:	68 14 01 00 00       	push   0x114
100005ed:	e8 fc ff ff ff       	call   100005ee <rmtree(char*)+0x16e>	100005ee: R_386_PC32	operator new(unsigned long)
100005f2:	83 c4 10             	add    esp,0x10
100005f5:	89 c3                	mov    ebx,eax
100005f7:	b8 00 20 00 c2       	mov    eax,0xc2002000
100005fc:	8b 00                	mov    eax,DWORD PTR [eax]
100005fe:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
10000601:	83 ec 04             	sub    esp,0x4
10000604:	50                   	push   eax
10000605:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
1000060b:	50                   	push   eax
1000060c:	53                   	push   ebx
1000060d:	e8 fc ff ff ff       	call   1000060e <rmtree(char*)+0x18e>	1000060e: R_386_PC32	File::File(char const*, Process*)
10000612:	83 c4 10             	add    esp,0x10
10000615:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
10000618:	83 ec 0c             	sub    esp,0xc
1000061b:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
1000061e:	e8 fc ff ff ff       	call   1000061f <rmtree(char*)+0x19f>	1000061f: R_386_PC32	File::unlink()
10000623:	83 c4 10             	add    esp,0x10
10000626:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
1000062a:	0f 84 e3 fe ff ff    	je     10000513 <rmtree(char*)+0x93>
10000630:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10000633:	8b 00                	mov    eax,DWORD PTR [eax]
10000635:	83 c0 08             	add    eax,0x8
10000638:	8b 00                	mov    eax,DWORD PTR [eax]
1000063a:	83 ec 0c             	sub    esp,0xc
1000063d:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
10000640:	ff d0                	call   eax
10000642:	83 c4 10             	add    esp,0x10
10000645:	e9 c9 fe ff ff       	jmp    10000513 <rmtree(char*)+0x93>
1000064a:	90                   	nop
1000064b:	83 ec 0c             	sub    esp,0xc
1000064e:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000651:	e8 fc ff ff ff       	call   10000652 <rmtree(char*)+0x1d2>	10000652: R_386_PC32	Directory::close()
10000656:	83 c4 10             	add    esp,0x10
10000659:	83 ec 0c             	sub    esp,0xc
1000065c:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
1000065f:	e8 fc ff ff ff       	call   10000660 <rmtree(char*)+0x1e0>	10000660: R_386_PC32	Directory::unlink()
10000664:	83 c4 10             	add    esp,0x10
10000667:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
1000066b:	74 18                	je     10000685 <rmtree(char*)+0x205>
1000066d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10000670:	8b 00                	mov    eax,DWORD PTR [eax]
10000672:	83 c0 08             	add    eax,0x8
10000675:	8b 00                	mov    eax,DWORD PTR [eax]
10000677:	83 ec 0c             	sub    esp,0xc
1000067a:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
1000067d:	ff d0                	call   eax
1000067f:	83 c4 10             	add    esp,0x10
10000682:	eb 01                	jmp    10000685 <rmtree(char*)+0x205>
10000684:	90                   	nop
10000685:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
10000688:	c9                   	leave  
10000689:	c3                   	ret    

1000068a <mkdir(char const*, int)>:
1000068a:	55                   	push   ebp
1000068b:	89 e5                	mov    ebp,esp
1000068d:	53                   	push   ebx
1000068e:	83 ec 14             	sub    esp,0x14
10000691:	83 ec 0c             	sub    esp,0xc
10000694:	68 14 01 00 00       	push   0x114
10000699:	e8 fc ff ff ff       	call   1000069a <mkdir(char const*, int)+0x10>	1000069a: R_386_PC32	operator new(unsigned long)
1000069e:	83 c4 10             	add    esp,0x10
100006a1:	89 c3                	mov    ebx,eax
100006a3:	a1 00 00 00 00       	mov    eax,ds:0x0	100006a4: R_386_32	kernelProcess
100006a8:	83 ec 04             	sub    esp,0x4
100006ab:	50                   	push   eax
100006ac:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100006af:	53                   	push   ebx
100006b0:	e8 fc ff ff ff       	call   100006b1 <mkdir(char const*, int)+0x27>	100006b1: R_386_PC32	Directory::Directory(char const*, Process*)
100006b5:	83 c4 10             	add    esp,0x10
100006b8:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
100006bb:	83 ec 0c             	sub    esp,0xc
100006be:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
100006c1:	e8 fc ff ff ff       	call   100006c2 <mkdir(char const*, int)+0x38>	100006c2: R_386_PC32	Directory::create()
100006c6:	83 c4 10             	add    esp,0x10
100006c9:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
100006cd:	74 15                	je     100006e4 <mkdir(char const*, int)+0x5a>
100006cf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
100006d2:	8b 00                	mov    eax,DWORD PTR [eax]
100006d4:	83 c0 08             	add    eax,0x8
100006d7:	8b 00                	mov    eax,DWORD PTR [eax]
100006d9:	83 ec 0c             	sub    esp,0xc
100006dc:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
100006df:	ff d0                	call   eax
100006e1:	83 c4 10             	add    esp,0x10
100006e4:	b8 00 00 00 00       	mov    eax,0x0
100006e9:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
100006ec:	c9                   	leave  
100006ed:	c3                   	ret    

100006ee <copytree(char*, char*)>:
100006ee:	55                   	push   ebp
100006ef:	89 e5                	mov    ebp,esp
100006f1:	53                   	push   ebx
100006f2:	81 ec 54 01 00 00    	sub    esp,0x154
100006f8:	83 ec 0c             	sub    esp,0xc
100006fb:	68 90 01 00 00       	push   0x190
10000700:	e8 fc ff ff ff       	call   10000701 <copytree(char*, char*)+0x13>	10000701: R_386_PC32	malloc
10000705:	83 c4 10             	add    esp,0x10
10000708:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
1000070b:	83 ec 0c             	sub    esp,0xc
1000070e:	68 90 01 00 00       	push   0x190
10000713:	e8 fc ff ff ff       	call   10000714 <copytree(char*, char*)+0x26>	10000714: R_386_PC32	malloc
10000718:	83 c4 10             	add    esp,0x10
1000071b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
1000071e:	83 ec 04             	sub    esp,0x4
10000721:	68 90 01 00 00       	push   0x190
10000726:	6a 00                	push   0x0
10000728:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
1000072b:	e8 fc ff ff ff       	call   1000072c <copytree(char*, char*)+0x3e>	1000072c: R_386_PC32	memset
10000730:	83 c4 10             	add    esp,0x10
10000733:	83 ec 04             	sub    esp,0x4
10000736:	68 90 01 00 00       	push   0x190
1000073b:	6a 00                	push   0x0
1000073d:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000740:	e8 fc ff ff ff       	call   10000741 <copytree(char*, char*)+0x53>	10000741: R_386_PC32	memset
10000745:	83 c4 10             	add    esp,0x10
10000748:	8d 85 bc fe ff ff    	lea    eax,[ebp-0x144]
1000074e:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
10000751:	83 ec 0c             	sub    esp,0xc
10000754:	68 14 01 00 00       	push   0x114
10000759:	e8 fc ff ff ff       	call   1000075a <copytree(char*, char*)+0x6c>	1000075a: R_386_PC32	operator new(unsigned long)
1000075e:	83 c4 10             	add    esp,0x10
10000761:	89 c3                	mov    ebx,eax
10000763:	b8 00 20 00 c2       	mov    eax,0xc2002000
10000768:	8b 00                	mov    eax,DWORD PTR [eax]
1000076a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
1000076d:	83 ec 04             	sub    esp,0x4
10000770:	50                   	push   eax
10000771:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000774:	53                   	push   ebx
10000775:	e8 fc ff ff ff       	call   10000776 <copytree(char*, char*)+0x88>	10000776: R_386_PC32	Directory::Directory(char const*, Process*)
1000077a:	83 c4 10             	add    esp,0x10
1000077d:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
10000780:	83 ec 0c             	sub    esp,0xc
10000783:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
10000786:	e8 fc ff ff ff       	call   10000787 <copytree(char*, char*)+0x99>	10000787: R_386_PC32	Directory::open()
1000078b:	83 c4 10             	add    esp,0x10
1000078e:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10000791:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
10000795:	74 34                	je     100007cb <copytree(char*, char*)+0xdd>
10000797:	83 ec 0c             	sub    esp,0xc
1000079a:	68 97 87 00 10       	push   0x10008797	1000079b: R_386_32	.text
1000079f:	e8 fc ff ff ff       	call   100007a0 <copytree(char*, char*)+0xb2>	100007a0: R_386_PC32	Dbg::kprintf(char const*, ...)
100007a4:	83 c4 10             	add    esp,0x10
100007a7:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
100007ab:	0f 84 90 03 00 00    	je     10000b41 <copytree(char*, char*)+0x453>
100007b1:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
100007b4:	8b 00                	mov    eax,DWORD PTR [eax]
100007b6:	83 c0 08             	add    eax,0x8
100007b9:	8b 00                	mov    eax,DWORD PTR [eax]
100007bb:	83 ec 0c             	sub    esp,0xc
100007be:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
100007c1:	ff d0                	call   eax
100007c3:	83 c4 10             	add    esp,0x10
100007c6:	e9 76 03 00 00       	jmp    10000b41 <copytree(char*, char*)+0x453>
100007cb:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
100007ce:	8b 00                	mov    eax,DWORD PTR [eax]
100007d0:	83 c0 0c             	add    eax,0xc
100007d3:	8b 00                	mov    eax,DWORD PTR [eax]
100007d5:	83 ec 0c             	sub    esp,0xc
100007d8:	8d 95 b8 fe ff ff    	lea    edx,[ebp-0x148]
100007de:	52                   	push   edx
100007df:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
100007e2:	6a 00                	push   0x0
100007e4:	68 10 01 00 00       	push   0x110
100007e9:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
100007ec:	ff d0                	call   eax
100007ee:	83 c4 20             	add    esp,0x20
100007f1:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
100007f4:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
100007f8:	0f 85 fb 02 00 00    	jne    10000af9 <copytree(char*, char*)+0x40b>
100007fe:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
10000801:	83 c0 10             	add    eax,0x10
10000804:	83 ec 08             	sub    esp,0x8
10000807:	68 90 87 00 10       	push   0x10008790	10000808: R_386_32	.text
1000080c:	50                   	push   eax
1000080d:	e8 fc ff ff ff       	call   1000080e <copytree(char*, char*)+0x120>	1000080e: R_386_PC32	strcmp
10000812:	83 c4 10             	add    esp,0x10
10000815:	85 c0                	test   eax,eax
10000817:	74 b2                	je     100007cb <copytree(char*, char*)+0xdd>
10000819:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
1000081c:	83 c0 10             	add    eax,0x10
1000081f:	83 ec 08             	sub    esp,0x8
10000822:	68 92 87 00 10       	push   0x10008792	10000823: R_386_32	.text
10000827:	50                   	push   eax
10000828:	e8 fc ff ff ff       	call   10000829 <copytree(char*, char*)+0x13b>	10000829: R_386_PC32	strcmp
1000082d:	83 c4 10             	add    esp,0x10
10000830:	85 c0                	test   eax,eax
10000832:	74 97                	je     100007cb <copytree(char*, char*)+0xdd>
10000834:	83 ec 08             	sub    esp,0x8
10000837:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000083a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
1000083d:	e8 fc ff ff ff       	call   1000083e <copytree(char*, char*)+0x150>	1000083e: R_386_PC32	strcpy
10000842:	83 c4 10             	add    esp,0x10
10000845:	83 ec 08             	sub    esp,0x8
10000848:	68 95 87 00 10       	push   0x10008795	10000849: R_386_32	.text
1000084d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10000850:	e8 fc ff ff ff       	call   10000851 <copytree(char*, char*)+0x163>	10000851: R_386_PC32	strcat
10000855:	83 c4 10             	add    esp,0x10
10000858:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
1000085b:	83 c0 10             	add    eax,0x10
1000085e:	83 ec 08             	sub    esp,0x8
10000861:	50                   	push   eax
10000862:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10000865:	e8 fc ff ff ff       	call   10000866 <copytree(char*, char*)+0x178>	10000866: R_386_PC32	strcat
1000086a:	83 c4 10             	add    esp,0x10
1000086d:	83 ec 08             	sub    esp,0x8
10000870:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10000873:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000876:	e8 fc ff ff ff       	call   10000877 <copytree(char*, char*)+0x189>	10000877: R_386_PC32	strcpy
1000087b:	83 c4 10             	add    esp,0x10
1000087e:	83 ec 08             	sub    esp,0x8
10000881:	68 95 87 00 10       	push   0x10008795	10000882: R_386_32	.text
10000886:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000889:	e8 fc ff ff ff       	call   1000088a <copytree(char*, char*)+0x19c>	1000088a: R_386_PC32	strcat
1000088e:	83 c4 10             	add    esp,0x10
10000891:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
10000894:	83 c0 10             	add    eax,0x10
10000897:	83 ec 08             	sub    esp,0x8
1000089a:	50                   	push   eax
1000089b:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
1000089e:	e8 fc ff ff ff       	call   1000089f <copytree(char*, char*)+0x1b1>	1000089f: R_386_PC32	strcat
100008a3:	83 c4 10             	add    esp,0x10
100008a6:	83 ec 04             	sub    esp,0x4
100008a9:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
100008ac:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
100008af:	68 b1 87 00 10       	push   0x100087b1	100008b0: R_386_32	.text
100008b4:	e8 fc ff ff ff       	call   100008b5 <copytree(char*, char*)+0x1c7>	100008b5: R_386_PC32	Dbg::kprintf(char const*, ...)
100008b9:	83 c4 10             	add    esp,0x10
100008bc:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
100008bf:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
100008c2:	83 e0 02             	and    eax,0x2
100008c5:	85 c0                	test   eax,eax
100008c7:	74 47                	je     10000910 <copytree(char*, char*)+0x222>
100008c9:	83 ec 08             	sub    esp,0x8
100008cc:	68 c0 01 00 00       	push   0x1c0
100008d1:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
100008d4:	e8 fc ff ff ff       	call   100008d5 <copytree(char*, char*)+0x1e7>	100008d5: R_386_PC32	mkdir(char const*, int)
100008d9:	83 c4 10             	add    esp,0x10
100008dc:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
100008df:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
100008e3:	74 15                	je     100008fa <copytree(char*, char*)+0x20c>
100008e5:	83 ec 0c             	sub    esp,0xc
100008e8:	68 bb 87 00 10       	push   0x100087bb	100008e9: R_386_32	.text
100008ed:	e8 fc ff ff ff       	call   100008ee <copytree(char*, char*)+0x200>	100008ee: R_386_PC32	KePanic(char const*)
100008f2:	83 c4 10             	add    esp,0x10
100008f5:	e9 d1 fe ff ff       	jmp    100007cb <copytree(char*, char*)+0xdd>
100008fa:	83 ec 08             	sub    esp,0x8
100008fd:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000900:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10000903:	e8 fc ff ff ff       	call   10000904 <copytree(char*, char*)+0x216>	10000904: R_386_PC32	copytree(char*, char*)
10000908:	83 c4 10             	add    esp,0x10
1000090b:	e9 bb fe ff ff       	jmp    100007cb <copytree(char*, char*)+0xdd>
10000910:	83 ec 0c             	sub    esp,0xc
10000913:	68 14 01 00 00       	push   0x114
10000918:	e8 fc ff ff ff       	call   10000919 <copytree(char*, char*)+0x22b>	10000919: R_386_PC32	operator new(unsigned long)
1000091d:	83 c4 10             	add    esp,0x10
10000920:	89 c3                	mov    ebx,eax
10000922:	b8 00 20 00 c2       	mov    eax,0xc2002000
10000927:	8b 00                	mov    eax,DWORD PTR [eax]
10000929:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
1000092c:	83 ec 04             	sub    esp,0x4
1000092f:	50                   	push   eax
10000930:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10000933:	53                   	push   ebx
10000934:	e8 fc ff ff ff       	call   10000935 <copytree(char*, char*)+0x247>	10000935: R_386_PC32	File::File(char const*, Process*)
10000939:	83 c4 10             	add    esp,0x10
1000093c:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
1000093f:	83 ec 08             	sub    esp,0x8
10000942:	6a 01                	push   0x1
10000944:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000947:	e8 fc ff ff ff       	call   10000948 <copytree(char*, char*)+0x25a>	10000948: R_386_PC32	File::open(FileOpenMode)
1000094c:	83 c4 10             	add    esp,0x10
1000094f:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
10000953:	75 15                	jne    1000096a <copytree(char*, char*)+0x27c>
10000955:	83 ec 0c             	sub    esp,0xc
10000958:	68 cc 87 00 10       	push   0x100087cc	10000959: R_386_32	.text
1000095d:	e8 fc ff ff ff       	call   1000095e <copytree(char*, char*)+0x270>	1000095e: R_386_PC32	KePanic(char const*)
10000962:	83 c4 10             	add    esp,0x10
10000965:	e9 8a 01 00 00       	jmp    10000af4 <copytree(char*, char*)+0x406>
1000096a:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
1000096e:	0f 84 57 fe ff ff    	je     100007cb <copytree(char*, char*)+0xdd>
10000974:	83 ec 0c             	sub    esp,0xc
10000977:	68 14 01 00 00       	push   0x114
1000097c:	e8 fc ff ff ff       	call   1000097d <copytree(char*, char*)+0x28f>	1000097d: R_386_PC32	operator new(unsigned long)
10000981:	83 c4 10             	add    esp,0x10
10000984:	89 c3                	mov    ebx,eax
10000986:	b8 00 20 00 c2       	mov    eax,0xc2002000
1000098b:	8b 00                	mov    eax,DWORD PTR [eax]
1000098d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
10000990:	83 ec 04             	sub    esp,0x4
10000993:	50                   	push   eax
10000994:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000997:	53                   	push   ebx
10000998:	e8 fc ff ff ff       	call   10000999 <copytree(char*, char*)+0x2ab>	10000999: R_386_PC32	File::File(char const*, Process*)
1000099d:	83 c4 10             	add    esp,0x10
100009a0:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
100009a3:	83 ec 08             	sub    esp,0x8
100009a6:	6a 12                	push   0x12
100009a8:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
100009ab:	e8 fc ff ff ff       	call   100009ac <copytree(char*, char*)+0x2be>	100009ac: R_386_PC32	File::open(FileOpenMode)
100009b0:	83 c4 10             	add    esp,0x10
100009b3:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
100009b7:	75 23                	jne    100009dc <copytree(char*, char*)+0x2ee>
100009b9:	83 ec 0c             	sub    esp,0xc
100009bc:	68 cc 87 00 10       	push   0x100087cc	100009bd: R_386_32	.text
100009c1:	e8 fc ff ff ff       	call   100009c2 <copytree(char*, char*)+0x2d4>	100009c2: R_386_PC32	KePanic(char const*)
100009c6:	83 c4 10             	add    esp,0x10
100009c9:	83 ec 0c             	sub    esp,0xc
100009cc:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
100009cf:	e8 fc ff ff ff       	call   100009d0 <copytree(char*, char*)+0x2e2>	100009d0: R_386_PC32	File::close()
100009d4:	83 c4 10             	add    esp,0x10
100009d7:	e9 18 01 00 00       	jmp    10000af4 <copytree(char*, char*)+0x406>
100009dc:	83 ec 0c             	sub    esp,0xc
100009df:	68 00 10 00 00       	push   0x1000
100009e4:	e8 fc ff ff ff       	call   100009e5 <copytree(char*, char*)+0x2f7>	100009e5: R_386_PC32	malloc
100009e9:	83 c4 10             	add    esp,0x10
100009ec:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
100009ef:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
100009f3:	75 31                	jne    10000a26 <copytree(char*, char*)+0x338>
100009f5:	83 ec 0c             	sub    esp,0xc
100009f8:	68 db 87 00 10       	push   0x100087db	100009f9: R_386_32	.text
100009fd:	e8 fc ff ff ff       	call   100009fe <copytree(char*, char*)+0x310>	100009fe: R_386_PC32	KePanic(char const*)
10000a02:	83 c4 10             	add    esp,0x10
10000a05:	83 ec 0c             	sub    esp,0xc
10000a08:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10000a0b:	e8 fc ff ff ff       	call   10000a0c <copytree(char*, char*)+0x31e>	10000a0c: R_386_PC32	free
10000a10:	83 c4 10             	add    esp,0x10
10000a13:	83 ec 0c             	sub    esp,0xc
10000a16:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000a19:	e8 fc ff ff ff       	call   10000a1a <copytree(char*, char*)+0x32c>	10000a1a: R_386_PC32	free
10000a1e:	83 c4 10             	add    esp,0x10
10000a21:	e9 1c 01 00 00       	jmp    10000b42 <copytree(char*, char*)+0x454>
10000a26:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10000a29:	8b 00                	mov    eax,DWORD PTR [eax]
10000a2b:	83 c0 0c             	add    eax,0xc
10000a2e:	8b 00                	mov    eax,DWORD PTR [eax]
10000a30:	83 ec 0c             	sub    esp,0xc
10000a33:	8d 95 b4 fe ff ff    	lea    edx,[ebp-0x14c]
10000a39:	52                   	push   edx
10000a3a:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10000a3d:	6a 00                	push   0x0
10000a3f:	68 00 10 00 00       	push   0x1000
10000a44:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000a47:	ff d0                	call   eax
10000a49:	83 c4 20             	add    esp,0x20
10000a4c:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
10000a4f:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
10000a53:	75 37                	jne    10000a8c <copytree(char*, char*)+0x39e>
10000a55:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000a58:	8b 00                	mov    eax,DWORD PTR [eax]
10000a5a:	83 c0 10             	add    eax,0x10
10000a5d:	8b 08                	mov    ecx,DWORD PTR [eax]
10000a5f:	8b 85 b4 fe ff ff    	mov    eax,DWORD PTR [ebp-0x14c]
10000a65:	99                   	cdq    
10000a66:	83 ec 0c             	sub    esp,0xc
10000a69:	8d 9d b0 fe ff ff    	lea    ebx,[ebp-0x150]
10000a6f:	53                   	push   ebx
10000a70:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10000a73:	52                   	push   edx
10000a74:	50                   	push   eax
10000a75:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
10000a78:	ff d1                	call   ecx
10000a7a:	83 c4 20             	add    esp,0x20
10000a7d:	8b 85 b4 fe ff ff    	mov    eax,DWORD PTR [ebp-0x14c]
10000a83:	3d 00 10 00 00       	cmp    eax,0x1000
10000a88:	75 05                	jne    10000a8f <copytree(char*, char*)+0x3a1>
10000a8a:	eb 9a                	jmp    10000a26 <copytree(char*, char*)+0x338>
10000a8c:	90                   	nop
10000a8d:	eb 01                	jmp    10000a90 <copytree(char*, char*)+0x3a2>
10000a8f:	90                   	nop
10000a90:	83 ec 0c             	sub    esp,0xc
10000a93:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10000a96:	e8 fc ff ff ff       	call   10000a97 <copytree(char*, char*)+0x3a9>	10000a97: R_386_PC32	free
10000a9b:	83 c4 10             	add    esp,0x10
10000a9e:	83 ec 0c             	sub    esp,0xc
10000aa1:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000aa4:	e8 fc ff ff ff       	call   10000aa5 <copytree(char*, char*)+0x3b7>	10000aa5: R_386_PC32	File::close()
10000aa9:	83 c4 10             	add    esp,0x10
10000aac:	83 ec 0c             	sub    esp,0xc
10000aaf:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
10000ab2:	e8 fc ff ff ff       	call   10000ab3 <copytree(char*, char*)+0x3c5>	10000ab3: R_386_PC32	File::close()
10000ab7:	83 c4 10             	add    esp,0x10
10000aba:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
10000abe:	74 15                	je     10000ad5 <copytree(char*, char*)+0x3e7>
10000ac0:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10000ac3:	8b 00                	mov    eax,DWORD PTR [eax]
10000ac5:	83 c0 08             	add    eax,0x8
10000ac8:	8b 00                	mov    eax,DWORD PTR [eax]
10000aca:	83 ec 0c             	sub    esp,0xc
10000acd:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000ad0:	ff d0                	call   eax
10000ad2:	83 c4 10             	add    esp,0x10
10000ad5:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
10000ad9:	0f 84 ec fc ff ff    	je     100007cb <copytree(char*, char*)+0xdd>
10000adf:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000ae2:	8b 00                	mov    eax,DWORD PTR [eax]
10000ae4:	83 c0 08             	add    eax,0x8
10000ae7:	8b 00                	mov    eax,DWORD PTR [eax]
10000ae9:	83 ec 0c             	sub    esp,0xc
10000aec:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
10000aef:	ff d0                	call   eax
10000af1:	83 c4 10             	add    esp,0x10
10000af4:	e9 d2 fc ff ff       	jmp    100007cb <copytree(char*, char*)+0xdd>
10000af9:	90                   	nop
10000afa:	83 ec 0c             	sub    esp,0xc
10000afd:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10000b00:	e8 fc ff ff ff       	call   10000b01 <copytree(char*, char*)+0x413>	10000b01: R_386_PC32	free
10000b05:	83 c4 10             	add    esp,0x10
10000b08:	83 ec 0c             	sub    esp,0xc
10000b0b:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000b0e:	e8 fc ff ff ff       	call   10000b0f <copytree(char*, char*)+0x421>	10000b0f: R_386_PC32	free
10000b13:	83 c4 10             	add    esp,0x10
10000b16:	83 ec 0c             	sub    esp,0xc
10000b19:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
10000b1c:	e8 fc ff ff ff       	call   10000b1d <copytree(char*, char*)+0x42f>	10000b1d: R_386_PC32	Directory::close()
10000b21:	83 c4 10             	add    esp,0x10
10000b24:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
10000b28:	74 18                	je     10000b42 <copytree(char*, char*)+0x454>
10000b2a:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
10000b2d:	8b 00                	mov    eax,DWORD PTR [eax]
10000b2f:	83 c0 08             	add    eax,0x8
10000b32:	8b 00                	mov    eax,DWORD PTR [eax]
10000b34:	83 ec 0c             	sub    esp,0xc
10000b37:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
10000b3a:	ff d0                	call   eax
10000b3c:	83 c4 10             	add    esp,0x10
10000b3f:	eb 01                	jmp    10000b42 <copytree(char*, char*)+0x454>
10000b41:	90                   	nop
10000b42:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
10000b45:	c9                   	leave  
10000b46:	c3                   	ret    

10000b47 <backupTree(char*, unsigned short)>:
10000b47:	55                   	push   ebp
10000b48:	89 e5                	mov    ebp,esp
10000b4a:	57                   	push   edi
10000b4b:	56                   	push   esi
10000b4c:	53                   	push   ebx
10000b4d:	81 ec 8c 12 00 00    	sub    esp,0x128c
10000b53:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000b56:	66 89 85 74 ed ff ff 	mov    WORD PTR [ebp-0x128c],ax
10000b5d:	83 ec 0c             	sub    esp,0xc
10000b60:	68 90 01 00 00       	push   0x190
10000b65:	e8 fc ff ff ff       	call   10000b66 <backupTree(char*, unsigned short)+0x1f>	10000b66: R_386_PC32	malloc
10000b6a:	83 c4 10             	add    esp,0x10
10000b6d:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
10000b70:	83 ec 04             	sub    esp,0x4
10000b73:	68 90 01 00 00       	push   0x190
10000b78:	6a 00                	push   0x0
10000b7a:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000b7d:	e8 fc ff ff ff       	call   10000b7e <backupTree(char*, unsigned short)+0x37>	10000b7e: R_386_PC32	memset
10000b82:	83 c4 10             	add    esp,0x10
10000b85:	8d 85 a8 fe ff ff    	lea    eax,[ebp-0x158]
10000b8b:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
10000b8e:	83 ec 0c             	sub    esp,0xc
10000b91:	68 14 01 00 00       	push   0x114
10000b96:	e8 fc ff ff ff       	call   10000b97 <backupTree(char*, unsigned short)+0x50>	10000b97: R_386_PC32	operator new(unsigned long)
10000b9b:	83 c4 10             	add    esp,0x10
10000b9e:	89 c3                	mov    ebx,eax
10000ba0:	b8 00 20 00 c2       	mov    eax,0xc2002000
10000ba5:	8b 00                	mov    eax,DWORD PTR [eax]
10000ba7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
10000baa:	83 ec 04             	sub    esp,0x4
10000bad:	50                   	push   eax
10000bae:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000bb1:	53                   	push   ebx
10000bb2:	e8 fc ff ff ff       	call   10000bb3 <backupTree(char*, unsigned short)+0x6c>	10000bb3: R_386_PC32	Directory::Directory(char const*, Process*)
10000bb7:	83 c4 10             	add    esp,0x10
10000bba:	89 5d d0             	mov    DWORD PTR [ebp-0x30],ebx
10000bbd:	83 ec 0c             	sub    esp,0xc
10000bc0:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10000bc3:	e8 fc ff ff ff       	call   10000bc4 <backupTree(char*, unsigned short)+0x7d>	10000bc4: R_386_PC32	Directory::open()
10000bc8:	83 c4 10             	add    esp,0x10
10000bcb:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
10000bce:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
10000bd2:	74 34                	je     10000c08 <backupTree(char*, unsigned short)+0xc1>
10000bd4:	83 ec 0c             	sub    esp,0xc
10000bd7:	68 97 87 00 10       	push   0x10008797	10000bd8: R_386_32	.text
10000bdc:	e8 fc ff ff ff       	call   10000bdd <backupTree(char*, unsigned short)+0x96>	10000bdd: R_386_PC32	Dbg::kprintf(char const*, ...)
10000be1:	83 c4 10             	add    esp,0x10
10000be4:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
10000be8:	0f 84 c8 05 00 00    	je     100011b6 <backupTree(char*, unsigned short)+0x66f>
10000bee:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
10000bf1:	8b 00                	mov    eax,DWORD PTR [eax]
10000bf3:	83 c0 08             	add    eax,0x8
10000bf6:	8b 00                	mov    eax,DWORD PTR [eax]
10000bf8:	83 ec 0c             	sub    esp,0xc
10000bfb:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10000bfe:	ff d0                	call   eax
10000c00:	83 c4 10             	add    esp,0x10
10000c03:	e9 af 05 00 00       	jmp    100011b7 <backupTree(char*, unsigned short)+0x670>
10000c08:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
10000c0b:	8b 00                	mov    eax,DWORD PTR [eax]
10000c0d:	83 c0 0c             	add    eax,0xc
10000c10:	8b 00                	mov    eax,DWORD PTR [eax]
10000c12:	83 ec 0c             	sub    esp,0xc
10000c15:	8d 95 a4 fe ff ff    	lea    edx,[ebp-0x15c]
10000c1b:	52                   	push   edx
10000c1c:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
10000c1f:	6a 00                	push   0x0
10000c21:	68 10 01 00 00       	push   0x110
10000c26:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10000c29:	ff d0                	call   eax
10000c2b:	83 c4 20             	add    esp,0x20
10000c2e:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
10000c31:	83 7d c8 00          	cmp    DWORD PTR [ebp-0x38],0x0
10000c35:	0f 85 41 05 00 00    	jne    1000117c <backupTree(char*, unsigned short)+0x635>
10000c3b:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000c3e:	83 c0 10             	add    eax,0x10
10000c41:	83 ec 08             	sub    esp,0x8
10000c44:	68 90 87 00 10       	push   0x10008790	10000c45: R_386_32	.text
10000c49:	50                   	push   eax
10000c4a:	e8 fc ff ff ff       	call   10000c4b <backupTree(char*, unsigned short)+0x104>	10000c4b: R_386_PC32	strcmp
10000c4f:	83 c4 10             	add    esp,0x10
10000c52:	85 c0                	test   eax,eax
10000c54:	74 b2                	je     10000c08 <backupTree(char*, unsigned short)+0xc1>
10000c56:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000c59:	83 c0 10             	add    eax,0x10
10000c5c:	83 ec 08             	sub    esp,0x8
10000c5f:	68 92 87 00 10       	push   0x10008792	10000c60: R_386_32	.text
10000c64:	50                   	push   eax
10000c65:	e8 fc ff ff ff       	call   10000c66 <backupTree(char*, unsigned short)+0x11f>	10000c66: R_386_PC32	strcmp
10000c6a:	83 c4 10             	add    esp,0x10
10000c6d:	85 c0                	test   eax,eax
10000c6f:	74 97                	je     10000c08 <backupTree(char*, unsigned short)+0xc1>
10000c71:	83 ec 08             	sub    esp,0x8
10000c74:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000c77:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000c7a:	e8 fc ff ff ff       	call   10000c7b <backupTree(char*, unsigned short)+0x134>	10000c7b: R_386_PC32	strcpy
10000c7f:	83 c4 10             	add    esp,0x10
10000c82:	83 ec 08             	sub    esp,0x8
10000c85:	68 95 87 00 10       	push   0x10008795	10000c86: R_386_32	.text
10000c8a:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000c8d:	e8 fc ff ff ff       	call   10000c8e <backupTree(char*, unsigned short)+0x147>	10000c8e: R_386_PC32	strcat
10000c92:	83 c4 10             	add    esp,0x10
10000c95:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000c98:	83 c0 10             	add    eax,0x10
10000c9b:	83 ec 08             	sub    esp,0x8
10000c9e:	50                   	push   eax
10000c9f:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000ca2:	e8 fc ff ff ff       	call   10000ca3 <backupTree(char*, unsigned short)+0x15c>	10000ca3: R_386_PC32	strcat
10000ca7:	83 c4 10             	add    esp,0x10
10000caa:	66 c7 45 e6 bc ad    	mov    WORD PTR [ebp-0x1a],0xadbc
10000cb0:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
10000cb7:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
10000cba:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10000cbd:	01 d0                	add    eax,edx
10000cbf:	83 c0 10             	add    eax,0x10
10000cc2:	8a 00                	mov    al,BYTE PTR [eax]
10000cc4:	84 c0                	test   al,al
10000cc6:	74 3c                	je     10000d04 <backupTree(char*, unsigned short)+0x1bd>
10000cc8:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
10000ccb:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10000cce:	01 d0                	add    eax,edx
10000cd0:	83 c0 10             	add    eax,0x10
10000cd3:	8a 00                	mov    al,BYTE PTR [eax]
10000cd5:	66 0f be d0          	movsx  dx,al
10000cd9:	66 8b 45 e6          	mov    ax,WORD PTR [ebp-0x1a]
10000cdd:	31 d0                	xor    eax,edx
10000cdf:	66 89 45 e6          	mov    WORD PTR [ebp-0x1a],ax
10000ce3:	0f b7 45 e6          	movzx  eax,WORD PTR [ebp-0x1a]
10000ce7:	c1 e0 03             	shl    eax,0x3
10000cea:	89 c2                	mov    edx,eax
10000cec:	0f b7 45 e6          	movzx  eax,WORD PTR [ebp-0x1a]
10000cf0:	c1 f8 0d             	sar    eax,0xd
10000cf3:	09 d0                	or     eax,edx
10000cf5:	66 89 45 e6          	mov    WORD PTR [ebp-0x1a],ax
10000cf9:	66 81 6d e6 f1 06    	sub    WORD PTR [ebp-0x1a],0x6f1
10000cff:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
10000d02:	eb b3                	jmp    10000cb7 <backupTree(char*, unsigned short)+0x170>
10000d04:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000d07:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
10000d0a:	83 e0 02             	and    eax,0x2
10000d0d:	85 c0                	test   eax,eax
10000d0f:	74 37                	je     10000d48 <backupTree(char*, unsigned short)+0x201>
10000d11:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000d14:	83 c0 10             	add    eax,0x10
10000d17:	83 ec 08             	sub    esp,0x8
10000d1a:	68 e5 87 00 10       	push   0x100087e5	10000d1b: R_386_32	.text
10000d1f:	50                   	push   eax
10000d20:	e8 fc ff ff ff       	call   10000d21 <backupTree(char*, unsigned short)+0x1da>	10000d21: R_386_PC32	strcmp
10000d25:	83 c4 10             	add    esp,0x10
10000d28:	85 c0                	test   eax,eax
10000d2a:	0f 84 d8 fe ff ff    	je     10000c08 <backupTree(char*, unsigned short)+0xc1>
10000d30:	0f b7 45 e6          	movzx  eax,WORD PTR [ebp-0x1a]
10000d34:	83 ec 08             	sub    esp,0x8
10000d37:	50                   	push   eax
10000d38:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000d3b:	e8 fc ff ff ff       	call   10000d3c <backupTree(char*, unsigned short)+0x1f5>	10000d3c: R_386_PC32	backupTree(char*, unsigned short)
10000d40:	83 c4 10             	add    esp,0x10
10000d43:	e9 c0 fe ff ff       	jmp    10000c08 <backupTree(char*, unsigned short)+0xc1>
10000d48:	c6 85 a3 fe ff ff 00 	mov    BYTE PTR [ebp-0x15d],0x0
10000d4f:	83 ec 08             	sub    esp,0x8
10000d52:	68 ec 87 00 10       	push   0x100087ec	10000d53: R_386_32	.text
10000d57:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000d5d:	50                   	push   eax
10000d5e:	e8 fc ff ff ff       	call   10000d5f <backupTree(char*, unsigned short)+0x218>	10000d5f: R_386_PC32	strcpy
10000d63:	83 c4 10             	add    esp,0x10
10000d66:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000d69:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
10000d6c:	88 85 a2 fe ff ff    	mov    BYTE PTR [ebp-0x15e],al
10000d72:	83 ec 08             	sub    esp,0x8
10000d75:	8d 85 a2 fe ff ff    	lea    eax,[ebp-0x15e]
10000d7b:	50                   	push   eax
10000d7c:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000d82:	50                   	push   eax
10000d83:	e8 fc ff ff ff       	call   10000d84 <backupTree(char*, unsigned short)+0x23d>	10000d84: R_386_PC32	strcat
10000d88:	83 c4 10             	add    esp,0x10
10000d8b:	83 ec 04             	sub    esp,0x4
10000d8e:	6a 09                	push   0x9
10000d90:	6a 00                	push   0x0
10000d92:	8d 85 99 fe ff ff    	lea    eax,[ebp-0x167]
10000d98:	50                   	push   eax
10000d99:	e8 fc ff ff ff       	call   10000d9a <backupTree(char*, unsigned short)+0x253>	10000d9a: R_386_PC32	memset
10000d9e:	83 c4 10             	add    esp,0x10
10000da1:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000da4:	83 c0 10             	add    eax,0x10
10000da7:	83 ec 04             	sub    esp,0x4
10000daa:	6a 08                	push   0x8
10000dac:	50                   	push   eax
10000dad:	8d 85 99 fe ff ff    	lea    eax,[ebp-0x167]
10000db3:	50                   	push   eax
10000db4:	e8 fc ff ff ff       	call   10000db5 <backupTree(char*, unsigned short)+0x26e>	10000db5: R_386_PC32	strncpyxx(char*, char const*, unsigned long)
10000db9:	83 c4 10             	add    esp,0x10
10000dbc:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
10000dc3:	83 7d dc 07          	cmp    DWORD PTR [ebp-0x24],0x7
10000dc7:	0f 8f c5 00 00 00    	jg     10000e92 <backupTree(char*, unsigned short)+0x34b>
10000dcd:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000dd3:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000dd6:	01 d0                	add    eax,edx
10000dd8:	8a 00                	mov    al,BYTE PTR [eax]
10000dda:	3c 60                	cmp    al,0x60
10000ddc:	7e 30                	jle    10000e0e <backupTree(char*, unsigned short)+0x2c7>
10000dde:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000de4:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000de7:	01 d0                	add    eax,edx
10000de9:	8a 00                	mov    al,BYTE PTR [eax]
10000deb:	3c 7a                	cmp    al,0x7a
10000ded:	7f 1f                	jg     10000e0e <backupTree(char*, unsigned short)+0x2c7>
10000def:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000df5:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000df8:	01 d0                	add    eax,edx
10000dfa:	8a 00                	mov    al,BYTE PTR [eax]
10000dfc:	83 e8 20             	sub    eax,0x20
10000dff:	88 c2                	mov    dl,al
10000e01:	8d 8d 99 fe ff ff    	lea    ecx,[ebp-0x167]
10000e07:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e0a:	01 c8                	add    eax,ecx
10000e0c:	88 10                	mov    BYTE PTR [eax],dl
10000e0e:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000e14:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e17:	01 d0                	add    eax,edx
10000e19:	8a 00                	mov    al,BYTE PTR [eax]
10000e1b:	3c 59                	cmp    al,0x59
10000e1d:	75 0e                	jne    10000e2d <backupTree(char*, unsigned short)+0x2e6>
10000e1f:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000e25:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e28:	01 d0                	add    eax,edx
10000e2a:	c6 00 51             	mov    BYTE PTR [eax],0x51
10000e2d:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000e33:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e36:	01 d0                	add    eax,edx
10000e38:	8a 00                	mov    al,BYTE PTR [eax]
10000e3a:	3c 5a                	cmp    al,0x5a
10000e3c:	75 0e                	jne    10000e4c <backupTree(char*, unsigned short)+0x305>
10000e3e:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000e44:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e47:	01 d0                	add    eax,edx
10000e49:	c6 00 51             	mov    BYTE PTR [eax],0x51
10000e4c:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000e52:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e55:	01 d0                	add    eax,edx
10000e57:	8a 00                	mov    al,BYTE PTR [eax]
10000e59:	3c 20                	cmp    al,0x20
10000e5b:	75 0e                	jne    10000e6b <backupTree(char*, unsigned short)+0x324>
10000e5d:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000e63:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e66:	01 d0                	add    eax,edx
10000e68:	c6 00 59             	mov    BYTE PTR [eax],0x59
10000e6b:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000e71:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e74:	01 d0                	add    eax,edx
10000e76:	8a 00                	mov    al,BYTE PTR [eax]
10000e78:	3c 2e                	cmp    al,0x2e
10000e7a:	75 0e                	jne    10000e8a <backupTree(char*, unsigned short)+0x343>
10000e7c:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000e82:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e85:	01 d0                	add    eax,edx
10000e87:	c6 00 5a             	mov    BYTE PTR [eax],0x5a
10000e8a:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
10000e8d:	e9 31 ff ff ff       	jmp    10000dc3 <backupTree(char*, unsigned short)+0x27c>
10000e92:	83 ec 08             	sub    esp,0x8
10000e95:	8d 85 99 fe ff ff    	lea    eax,[ebp-0x167]
10000e9b:	50                   	push   eax
10000e9c:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000ea2:	50                   	push   eax
10000ea3:	e8 fc ff ff ff       	call   10000ea4 <backupTree(char*, unsigned short)+0x35d>	10000ea4: R_386_PC32	strcat
10000ea8:	83 c4 10             	add    esp,0x10
10000eab:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000eae:	83 c0 10             	add    eax,0x10
10000eb1:	83 ec 0c             	sub    esp,0xc
10000eb4:	50                   	push   eax
10000eb5:	e8 fc ff ff ff       	call   10000eb6 <backupTree(char*, unsigned short)+0x36f>	10000eb6: R_386_PC32	strlen
10000eba:	83 c4 10             	add    esp,0x10
10000ebd:	83 c0 41             	add    eax,0x41
10000ec0:	88 85 a2 fe ff ff    	mov    BYTE PTR [ebp-0x15e],al
10000ec6:	83 ec 08             	sub    esp,0x8
10000ec9:	8d 85 a2 fe ff ff    	lea    eax,[ebp-0x15e]
10000ecf:	50                   	push   eax
10000ed0:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000ed6:	50                   	push   eax
10000ed7:	e8 fc ff ff ff       	call   10000ed8 <backupTree(char*, unsigned short)+0x391>	10000ed8: R_386_PC32	strcat
10000edc:	83 c4 10             	add    esp,0x10
10000edf:	83 ec 08             	sub    esp,0x8
10000ee2:	68 90 87 00 10       	push   0x10008790	10000ee3: R_386_32	.text
10000ee7:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000eed:	50                   	push   eax
10000eee:	e8 fc ff ff ff       	call   10000eef <backupTree(char*, unsigned short)+0x3a8>	10000eef: R_386_PC32	strcat
10000ef3:	83 c4 10             	add    esp,0x10
10000ef6:	66 8b 45 e6          	mov    ax,WORD PTR [ebp-0x1a]
10000efa:	25 65 07 00 00       	and    eax,0x765
10000eff:	33 85 74 ed ff ff    	xor    eax,DWORD PTR [ebp-0x128c]
10000f05:	66 89 45 c6          	mov    WORD PTR [ebp-0x3a],ax
10000f09:	8d 85 88 fe ff ff    	lea    eax,[ebp-0x178]
10000f0f:	bb 05 88 00 10       	mov    ebx,0x10008805	10000f10: R_386_32	.text
10000f14:	ba 11 00 00 00       	mov    edx,0x11
10000f19:	89 c7                	mov    edi,eax
10000f1b:	89 de                	mov    esi,ebx
10000f1d:	89 d1                	mov    ecx,edx
10000f1f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
10000f21:	0f b7 45 c6          	movzx  eax,WORD PTR [ebp-0x3a]
10000f25:	83 e0 0f             	and    eax,0xf
10000f28:	8a 84 05 88 fe ff ff 	mov    al,BYTE PTR [ebp+eax*1-0x178]
10000f2f:	88 85 a2 fe ff ff    	mov    BYTE PTR [ebp-0x15e],al
10000f35:	83 ec 08             	sub    esp,0x8
10000f38:	8d 85 a2 fe ff ff    	lea    eax,[ebp-0x15e]
10000f3e:	50                   	push   eax
10000f3f:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000f45:	50                   	push   eax
10000f46:	e8 fc ff ff ff       	call   10000f47 <backupTree(char*, unsigned short)+0x400>	10000f47: R_386_PC32	strcat
10000f4b:	83 c4 10             	add    esp,0x10
10000f4e:	0f b7 45 c6          	movzx  eax,WORD PTR [ebp-0x3a]
10000f52:	c1 f8 04             	sar    eax,0x4
10000f55:	83 e0 0f             	and    eax,0xf
10000f58:	8a 84 05 88 fe ff ff 	mov    al,BYTE PTR [ebp+eax*1-0x178]
10000f5f:	88 85 a2 fe ff ff    	mov    BYTE PTR [ebp-0x15e],al
10000f65:	83 ec 08             	sub    esp,0x8
10000f68:	8d 85 a2 fe ff ff    	lea    eax,[ebp-0x15e]
10000f6e:	50                   	push   eax
10000f6f:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000f75:	50                   	push   eax
10000f76:	e8 fc ff ff ff       	call   10000f77 <backupTree(char*, unsigned short)+0x430>	10000f77: R_386_PC32	strcat
10000f7b:	83 c4 10             	add    esp,0x10
10000f7e:	0f b7 45 c6          	movzx  eax,WORD PTR [ebp-0x3a]
10000f82:	c1 f8 08             	sar    eax,0x8
10000f85:	83 e0 0f             	and    eax,0xf
10000f88:	8a 84 05 88 fe ff ff 	mov    al,BYTE PTR [ebp+eax*1-0x178]
10000f8f:	88 85 a2 fe ff ff    	mov    BYTE PTR [ebp-0x15e],al
10000f95:	83 ec 08             	sub    esp,0x8
10000f98:	8d 85 a2 fe ff ff    	lea    eax,[ebp-0x15e]
10000f9e:	50                   	push   eax
10000f9f:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000fa5:	50                   	push   eax
10000fa6:	e8 fc ff ff ff       	call   10000fa7 <backupTree(char*, unsigned short)+0x460>	10000fa7: R_386_PC32	strcat
10000fab:	83 c4 10             	add    esp,0x10
10000fae:	66 8b 45 c6          	mov    ax,WORD PTR [ebp-0x3a]
10000fb2:	66 c1 e8 0c          	shr    ax,0xc
10000fb6:	0f b7 c0             	movzx  eax,ax
10000fb9:	8a 84 05 88 fe ff ff 	mov    al,BYTE PTR [ebp+eax*1-0x178]
10000fc0:	88 85 a2 fe ff ff    	mov    BYTE PTR [ebp-0x15e],al
10000fc6:	83 ec 08             	sub    esp,0x8
10000fc9:	8d 85 a2 fe ff ff    	lea    eax,[ebp-0x15e]
10000fcf:	50                   	push   eax
10000fd0:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000fd6:	50                   	push   eax
10000fd7:	e8 fc ff ff ff       	call   10000fd8 <backupTree(char*, unsigned short)+0x491>	10000fd8: R_386_PC32	strcat
10000fdc:	83 c4 10             	add    esp,0x10
10000fdf:	83 ec 0c             	sub    esp,0xc
10000fe2:	68 14 01 00 00       	push   0x114
10000fe7:	e8 fc ff ff ff       	call   10000fe8 <backupTree(char*, unsigned short)+0x4a1>	10000fe8: R_386_PC32	operator new(unsigned long)
10000fec:	83 c4 10             	add    esp,0x10
10000fef:	89 c3                	mov    ebx,eax
10000ff1:	b8 00 20 00 c2       	mov    eax,0xc2002000
10000ff6:	8b 00                	mov    eax,DWORD PTR [eax]
10000ff8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
10000ffb:	83 ec 04             	sub    esp,0x4
10000ffe:	50                   	push   eax
10000fff:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10001002:	53                   	push   ebx
10001003:	e8 fc ff ff ff       	call   10001004 <backupTree(char*, unsigned short)+0x4bd>	10001004: R_386_PC32	File::File(char const*, Process*)
10001008:	83 c4 10             	add    esp,0x10
1000100b:	89 5d c0             	mov    DWORD PTR [ebp-0x40],ebx
1000100e:	83 ec 08             	sub    esp,0x8
10001011:	6a 01                	push   0x1
10001013:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
10001016:	e8 fc ff ff ff       	call   10001017 <backupTree(char*, unsigned short)+0x4d0>	10001017: R_386_PC32	File::open(FileOpenMode)
1000101b:	83 c4 10             	add    esp,0x10
1000101e:	83 7d c0 00          	cmp    DWORD PTR [ebp-0x40],0x0
10001022:	75 15                	jne    10001039 <backupTree(char*, unsigned short)+0x4f2>
10001024:	83 ec 0c             	sub    esp,0xc
10001027:	68 cc 87 00 10       	push   0x100087cc	10001028: R_386_32	.text
1000102c:	e8 fc ff ff ff       	call   1000102d <backupTree(char*, unsigned short)+0x4e6>	1000102d: R_386_PC32	KePanic(char const*)
10001031:	83 c4 10             	add    esp,0x10
10001034:	e9 3e 01 00 00       	jmp    10001177 <backupTree(char*, unsigned short)+0x630>
10001039:	83 7d c0 00          	cmp    DWORD PTR [ebp-0x40],0x0
1000103d:	0f 84 c5 fb ff ff    	je     10000c08 <backupTree(char*, unsigned short)+0xc1>
10001043:	83 ec 0c             	sub    esp,0xc
10001046:	68 14 01 00 00       	push   0x114
1000104b:	e8 fc ff ff ff       	call   1000104c <backupTree(char*, unsigned short)+0x505>	1000104c: R_386_PC32	operator new(unsigned long)
10001050:	83 c4 10             	add    esp,0x10
10001053:	89 c3                	mov    ebx,eax
10001055:	b8 00 20 00 c2       	mov    eax,0xc2002000
1000105a:	8b 00                	mov    eax,DWORD PTR [eax]
1000105c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
1000105f:	83 ec 04             	sub    esp,0x4
10001062:	50                   	push   eax
10001063:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10001069:	50                   	push   eax
1000106a:	53                   	push   ebx
1000106b:	e8 fc ff ff ff       	call   1000106c <backupTree(char*, unsigned short)+0x525>	1000106c: R_386_PC32	File::File(char const*, Process*)
10001070:	83 c4 10             	add    esp,0x10
10001073:	89 5d bc             	mov    DWORD PTR [ebp-0x44],ebx
10001076:	83 ec 08             	sub    esp,0x8
10001079:	6a 12                	push   0x12
1000107b:	ff 75 bc             	push   DWORD PTR [ebp-0x44]
1000107e:	e8 fc ff ff ff       	call   1000107f <backupTree(char*, unsigned short)+0x538>	1000107f: R_386_PC32	File::open(FileOpenMode)
10001083:	83 c4 10             	add    esp,0x10
10001086:	83 7d bc 00          	cmp    DWORD PTR [ebp-0x44],0x0
1000108a:	75 23                	jne    100010af <backupTree(char*, unsigned short)+0x568>
1000108c:	83 ec 0c             	sub    esp,0xc
1000108f:	68 cc 87 00 10       	push   0x100087cc	10001090: R_386_32	.text
10001094:	e8 fc ff ff ff       	call   10001095 <backupTree(char*, unsigned short)+0x54e>	10001095: R_386_PC32	KePanic(char const*)
10001099:	83 c4 10             	add    esp,0x10
1000109c:	83 ec 0c             	sub    esp,0xc
1000109f:	ff 75 bc             	push   DWORD PTR [ebp-0x44]
100010a2:	e8 fc ff ff ff       	call   100010a3 <backupTree(char*, unsigned short)+0x55c>	100010a3: R_386_PC32	File::close()
100010a7:	83 c4 10             	add    esp,0x10
100010aa:	e9 c8 00 00 00       	jmp    10001177 <backupTree(char*, unsigned short)+0x630>
100010af:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
100010b2:	8b 00                	mov    eax,DWORD PTR [eax]
100010b4:	83 c0 0c             	add    eax,0xc
100010b7:	8b 00                	mov    eax,DWORD PTR [eax]
100010b9:	83 ec 0c             	sub    esp,0xc
100010bc:	8d 95 84 fe ff ff    	lea    edx,[ebp-0x17c]
100010c2:	52                   	push   edx
100010c3:	8d 95 80 ee ff ff    	lea    edx,[ebp-0x1180]
100010c9:	52                   	push   edx
100010ca:	6a 00                	push   0x0
100010cc:	68 00 10 00 00       	push   0x1000
100010d1:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
100010d4:	ff d0                	call   eax
100010d6:	83 c4 20             	add    esp,0x20
100010d9:	89 45 b8             	mov    DWORD PTR [ebp-0x48],eax
100010dc:	83 7d b8 00          	cmp    DWORD PTR [ebp-0x48],0x0
100010e0:	75 3b                	jne    1000111d <backupTree(char*, unsigned short)+0x5d6>
100010e2:	8b 45 bc             	mov    eax,DWORD PTR [ebp-0x44]
100010e5:	8b 00                	mov    eax,DWORD PTR [eax]
100010e7:	83 c0 10             	add    eax,0x10
100010ea:	8b 08                	mov    ecx,DWORD PTR [eax]
100010ec:	8b 85 84 fe ff ff    	mov    eax,DWORD PTR [ebp-0x17c]
100010f2:	99                   	cdq    
100010f3:	83 ec 0c             	sub    esp,0xc
100010f6:	8d 9d 80 fe ff ff    	lea    ebx,[ebp-0x180]
100010fc:	53                   	push   ebx
100010fd:	8d 9d 80 ee ff ff    	lea    ebx,[ebp-0x1180]
10001103:	53                   	push   ebx
10001104:	52                   	push   edx
10001105:	50                   	push   eax
10001106:	ff 75 bc             	push   DWORD PTR [ebp-0x44]
10001109:	ff d1                	call   ecx
1000110b:	83 c4 20             	add    esp,0x20
1000110e:	8b 85 84 fe ff ff    	mov    eax,DWORD PTR [ebp-0x17c]
10001114:	3d 00 10 00 00       	cmp    eax,0x1000
10001119:	75 05                	jne    10001120 <backupTree(char*, unsigned short)+0x5d9>
1000111b:	eb 92                	jmp    100010af <backupTree(char*, unsigned short)+0x568>
1000111d:	90                   	nop
1000111e:	eb 01                	jmp    10001121 <backupTree(char*, unsigned short)+0x5da>
10001120:	90                   	nop
10001121:	83 ec 0c             	sub    esp,0xc
10001124:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
10001127:	e8 fc ff ff ff       	call   10001128 <backupTree(char*, unsigned short)+0x5e1>	10001128: R_386_PC32	File::close()
1000112c:	83 c4 10             	add    esp,0x10
1000112f:	83 ec 0c             	sub    esp,0xc
10001132:	ff 75 bc             	push   DWORD PTR [ebp-0x44]
10001135:	e8 fc ff ff ff       	call   10001136 <backupTree(char*, unsigned short)+0x5ef>	10001136: R_386_PC32	File::close()
1000113a:	83 c4 10             	add    esp,0x10
1000113d:	83 7d c0 00          	cmp    DWORD PTR [ebp-0x40],0x0
10001141:	74 15                	je     10001158 <backupTree(char*, unsigned short)+0x611>
10001143:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
10001146:	8b 00                	mov    eax,DWORD PTR [eax]
10001148:	83 c0 08             	add    eax,0x8
1000114b:	8b 00                	mov    eax,DWORD PTR [eax]
1000114d:	83 ec 0c             	sub    esp,0xc
10001150:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
10001153:	ff d0                	call   eax
10001155:	83 c4 10             	add    esp,0x10
10001158:	83 7d bc 00          	cmp    DWORD PTR [ebp-0x44],0x0
1000115c:	0f 84 a6 fa ff ff    	je     10000c08 <backupTree(char*, unsigned short)+0xc1>
10001162:	8b 45 bc             	mov    eax,DWORD PTR [ebp-0x44]
10001165:	8b 00                	mov    eax,DWORD PTR [eax]
10001167:	83 c0 08             	add    eax,0x8
1000116a:	8b 00                	mov    eax,DWORD PTR [eax]
1000116c:	83 ec 0c             	sub    esp,0xc
1000116f:	ff 75 bc             	push   DWORD PTR [ebp-0x44]
10001172:	ff d0                	call   eax
10001174:	83 c4 10             	add    esp,0x10
10001177:	e9 8c fa ff ff       	jmp    10000c08 <backupTree(char*, unsigned short)+0xc1>
1000117c:	90                   	nop
1000117d:	83 ec 0c             	sub    esp,0xc
10001180:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10001183:	e8 fc ff ff ff       	call   10001184 <backupTree(char*, unsigned short)+0x63d>	10001184: R_386_PC32	free
10001188:	83 c4 10             	add    esp,0x10
1000118b:	83 ec 0c             	sub    esp,0xc
1000118e:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10001191:	e8 fc ff ff ff       	call   10001192 <backupTree(char*, unsigned short)+0x64b>	10001192: R_386_PC32	Directory::close()
10001196:	83 c4 10             	add    esp,0x10
10001199:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
1000119d:	74 18                	je     100011b7 <backupTree(char*, unsigned short)+0x670>
1000119f:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
100011a2:	8b 00                	mov    eax,DWORD PTR [eax]
100011a4:	83 c0 08             	add    eax,0x8
100011a7:	8b 00                	mov    eax,DWORD PTR [eax]
100011a9:	83 ec 0c             	sub    esp,0xc
100011ac:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
100011af:	ff d0                	call   eax
100011b1:	83 c4 10             	add    esp,0x10
100011b4:	eb 01                	jmp    100011b7 <backupTree(char*, unsigned short)+0x670>
100011b6:	90                   	nop
100011b7:	8d 65 f4             	lea    esp,[ebp-0xc]
100011ba:	5b                   	pop    ebx
100011bb:	5e                   	pop    esi
100011bc:	5f                   	pop    edi
100011bd:	5d                   	pop    ebp
100011be:	c3                   	ret    

100011bf <createUser(char const*)>:
100011bf:	55                   	push   ebp
100011c0:	89 e5                	mov    ebp,esp
100011c2:	81 ec 08 01 00 00    	sub    esp,0x108
100011c8:	68 16 88 00 10       	push   0x10008816	100011c9: R_386_32	.text
100011cd:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100011d3:	50                   	push   eax
100011d4:	e8 fc ff ff ff       	call   100011d5 <createUser(char const*)+0x16>	100011d5: R_386_PC32	strcpy
100011d9:	83 c4 08             	add    esp,0x8
100011dc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100011df:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100011e5:	50                   	push   eax
100011e6:	e8 fc ff ff ff       	call   100011e7 <createUser(char const*)+0x28>	100011e7: R_386_PC32	strcat
100011eb:	83 c4 08             	add    esp,0x8
100011ee:	83 ec 08             	sub    esp,0x8
100011f1:	68 c0 01 00 00       	push   0x1c0
100011f6:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100011fc:	50                   	push   eax
100011fd:	e8 fc ff ff ff       	call   100011fe <createUser(char const*)+0x3f>	100011fe: R_386_PC32	mkdir(char const*, int)
10001202:	83 c4 10             	add    esp,0x10
10001205:	83 ec 08             	sub    esp,0x8
10001208:	68 20 88 00 10       	push   0x10008820	10001209: R_386_32	.text
1000120d:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001213:	50                   	push   eax
10001214:	e8 fc ff ff ff       	call   10001215 <createUser(char const*)+0x56>	10001215: R_386_PC32	strcat
10001219:	83 c4 10             	add    esp,0x10
1000121c:	83 ec 08             	sub    esp,0x8
1000121f:	68 c0 01 00 00       	push   0x1c0
10001224:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000122a:	50                   	push   eax
1000122b:	e8 fc ff ff ff       	call   1000122c <createUser(char const*)+0x6d>	1000122c: R_386_PC32	mkdir(char const*, int)
10001230:	83 c4 10             	add    esp,0x10
10001233:	83 ec 08             	sub    esp,0x8
10001236:	68 16 88 00 10       	push   0x10008816	10001237: R_386_32	.text
1000123b:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001241:	50                   	push   eax
10001242:	e8 fc ff ff ff       	call   10001243 <createUser(char const*)+0x84>	10001243: R_386_PC32	strcpy
10001247:	83 c4 10             	add    esp,0x10
1000124a:	83 ec 08             	sub    esp,0x8
1000124d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001250:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001256:	50                   	push   eax
10001257:	e8 fc ff ff ff       	call   10001258 <createUser(char const*)+0x99>	10001258: R_386_PC32	strcat
1000125c:	83 c4 10             	add    esp,0x10
1000125f:	83 ec 08             	sub    esp,0x8
10001262:	68 29 88 00 10       	push   0x10008829	10001263: R_386_32	.text
10001267:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000126d:	50                   	push   eax
1000126e:	e8 fc ff ff ff       	call   1000126f <createUser(char const*)+0xb0>	1000126f: R_386_PC32	strcat
10001273:	83 c4 10             	add    esp,0x10
10001276:	83 ec 08             	sub    esp,0x8
10001279:	68 c0 01 00 00       	push   0x1c0
1000127e:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001284:	50                   	push   eax
10001285:	e8 fc ff ff ff       	call   10001286 <createUser(char const*)+0xc7>	10001286: R_386_PC32	mkdir(char const*, int)
1000128a:	83 c4 10             	add    esp,0x10
1000128d:	83 ec 08             	sub    esp,0x8
10001290:	68 16 88 00 10       	push   0x10008816	10001291: R_386_32	.text
10001295:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000129b:	50                   	push   eax
1000129c:	e8 fc ff ff ff       	call   1000129d <createUser(char const*)+0xde>	1000129d: R_386_PC32	strcpy
100012a1:	83 c4 10             	add    esp,0x10
100012a4:	83 ec 08             	sub    esp,0x8
100012a7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100012aa:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100012b0:	50                   	push   eax
100012b1:	e8 fc ff ff ff       	call   100012b2 <createUser(char const*)+0xf3>	100012b2: R_386_PC32	strcat
100012b6:	83 c4 10             	add    esp,0x10
100012b9:	83 ec 08             	sub    esp,0x8
100012bc:	68 34 88 00 10       	push   0x10008834	100012bd: R_386_32	.text
100012c1:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100012c7:	50                   	push   eax
100012c8:	e8 fc ff ff ff       	call   100012c9 <createUser(char const*)+0x10a>	100012c9: R_386_PC32	strcat
100012cd:	83 c4 10             	add    esp,0x10
100012d0:	83 ec 08             	sub    esp,0x8
100012d3:	68 c0 01 00 00       	push   0x1c0
100012d8:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100012de:	50                   	push   eax
100012df:	e8 fc ff ff ff       	call   100012e0 <createUser(char const*)+0x121>	100012e0: R_386_PC32	mkdir(char const*, int)
100012e4:	83 c4 10             	add    esp,0x10
100012e7:	83 ec 08             	sub    esp,0x8
100012ea:	68 16 88 00 10       	push   0x10008816	100012eb: R_386_32	.text
100012ef:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100012f5:	50                   	push   eax
100012f6:	e8 fc ff ff ff       	call   100012f7 <createUser(char const*)+0x138>	100012f7: R_386_PC32	strcpy
100012fb:	83 c4 10             	add    esp,0x10
100012fe:	83 ec 08             	sub    esp,0x8
10001301:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001304:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000130a:	50                   	push   eax
1000130b:	e8 fc ff ff ff       	call   1000130c <createUser(char const*)+0x14d>	1000130c: R_386_PC32	strcat
10001310:	83 c4 10             	add    esp,0x10
10001313:	83 ec 08             	sub    esp,0x8
10001316:	68 3f 88 00 10       	push   0x1000883f	10001317: R_386_32	.text
1000131b:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001321:	50                   	push   eax
10001322:	e8 fc ff ff ff       	call   10001323 <createUser(char const*)+0x164>	10001323: R_386_PC32	strcat
10001327:	83 c4 10             	add    esp,0x10
1000132a:	83 ec 08             	sub    esp,0x8
1000132d:	68 c0 01 00 00       	push   0x1c0
10001332:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001338:	50                   	push   eax
10001339:	e8 fc ff ff ff       	call   1000133a <createUser(char const*)+0x17b>	1000133a: R_386_PC32	mkdir(char const*, int)
1000133e:	83 c4 10             	add    esp,0x10
10001341:	83 ec 08             	sub    esp,0x8
10001344:	68 16 88 00 10       	push   0x10008816	10001345: R_386_32	.text
10001349:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000134f:	50                   	push   eax
10001350:	e8 fc ff ff ff       	call   10001351 <createUser(char const*)+0x192>	10001351: R_386_PC32	strcpy
10001355:	83 c4 10             	add    esp,0x10
10001358:	83 ec 08             	sub    esp,0x8
1000135b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000135e:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001364:	50                   	push   eax
10001365:	e8 fc ff ff ff       	call   10001366 <createUser(char const*)+0x1a7>	10001366: R_386_PC32	strcat
1000136a:	83 c4 10             	add    esp,0x10
1000136d:	83 ec 08             	sub    esp,0x8
10001370:	68 47 88 00 10       	push   0x10008847	10001371: R_386_32	.text
10001375:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000137b:	50                   	push   eax
1000137c:	e8 fc ff ff ff       	call   1000137d <createUser(char const*)+0x1be>	1000137d: R_386_PC32	strcat
10001381:	83 c4 10             	add    esp,0x10
10001384:	83 ec 08             	sub    esp,0x8
10001387:	68 c0 01 00 00       	push   0x1c0
1000138c:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001392:	50                   	push   eax
10001393:	e8 fc ff ff ff       	call   10001394 <createUser(char const*)+0x1d5>	10001394: R_386_PC32	mkdir(char const*, int)
10001398:	83 c4 10             	add    esp,0x10
1000139b:	83 ec 08             	sub    esp,0x8
1000139e:	68 16 88 00 10       	push   0x10008816	1000139f: R_386_32	.text
100013a3:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100013a9:	50                   	push   eax
100013aa:	e8 fc ff ff ff       	call   100013ab <createUser(char const*)+0x1ec>	100013ab: R_386_PC32	strcpy
100013af:	83 c4 10             	add    esp,0x10
100013b2:	83 ec 08             	sub    esp,0x8
100013b5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100013b8:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100013be:	50                   	push   eax
100013bf:	e8 fc ff ff ff       	call   100013c0 <createUser(char const*)+0x201>	100013c0: R_386_PC32	strcat
100013c4:	83 c4 10             	add    esp,0x10
100013c7:	83 ec 08             	sub    esp,0x8
100013ca:	68 52 88 00 10       	push   0x10008852	100013cb: R_386_32	.text
100013cf:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100013d5:	50                   	push   eax
100013d6:	e8 fc ff ff ff       	call   100013d7 <createUser(char const*)+0x218>	100013d7: R_386_PC32	strcat
100013db:	83 c4 10             	add    esp,0x10
100013de:	83 ec 08             	sub    esp,0x8
100013e1:	68 c0 01 00 00       	push   0x1c0
100013e6:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100013ec:	50                   	push   eax
100013ed:	e8 fc ff ff ff       	call   100013ee <createUser(char const*)+0x22f>	100013ee: R_386_PC32	mkdir(char const*, int)
100013f2:	83 c4 10             	add    esp,0x10
100013f5:	83 ec 08             	sub    esp,0x8
100013f8:	68 16 88 00 10       	push   0x10008816	100013f9: R_386_32	.text
100013fd:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001403:	50                   	push   eax
10001404:	e8 fc ff ff ff       	call   10001405 <createUser(char const*)+0x246>	10001405: R_386_PC32	strcpy
10001409:	83 c4 10             	add    esp,0x10
1000140c:	83 ec 08             	sub    esp,0x8
1000140f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001412:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001418:	50                   	push   eax
10001419:	e8 fc ff ff ff       	call   1000141a <createUser(char const*)+0x25b>	1000141a: R_386_PC32	strcat
1000141e:	83 c4 10             	add    esp,0x10
10001421:	83 ec 08             	sub    esp,0x8
10001424:	68 59 88 00 10       	push   0x10008859	10001425: R_386_32	.text
10001429:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000142f:	50                   	push   eax
10001430:	e8 fc ff ff ff       	call   10001431 <createUser(char const*)+0x272>	10001431: R_386_PC32	strcat
10001435:	83 c4 10             	add    esp,0x10
10001438:	83 ec 08             	sub    esp,0x8
1000143b:	68 c0 01 00 00       	push   0x1c0
10001440:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001446:	50                   	push   eax
10001447:	e8 fc ff ff ff       	call   10001448 <createUser(char const*)+0x289>	10001448: R_386_PC32	mkdir(char const*, int)
1000144c:	83 c4 10             	add    esp,0x10
1000144f:	83 ec 08             	sub    esp,0x8
10001452:	68 61 88 00 10       	push   0x10008861	10001453: R_386_32	.text
10001457:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000145d:	50                   	push   eax
1000145e:	e8 fc ff ff ff       	call   1000145f <createUser(char const*)+0x2a0>	1000145f: R_386_PC32	strcpy
10001463:	83 c4 10             	add    esp,0x10
10001466:	83 ec 08             	sub    esp,0x8
10001469:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000146c:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001472:	50                   	push   eax
10001473:	e8 fc ff ff ff       	call   10001474 <createUser(char const*)+0x2b5>	10001474: R_386_PC32	strcat
10001478:	83 c4 10             	add    esp,0x10
1000147b:	83 ec 08             	sub    esp,0x8
1000147e:	68 c0 01 00 00       	push   0x1c0
10001483:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001489:	50                   	push   eax
1000148a:	e8 fc ff ff ff       	call   1000148b <createUser(char const*)+0x2cc>	1000148b: R_386_PC32	mkdir(char const*, int)
1000148f:	83 c4 10             	add    esp,0x10
10001492:	83 ec 08             	sub    esp,0x8
10001495:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000149b:	50                   	push   eax
1000149c:	68 7c 88 00 10       	push   0x1000887c	1000149d: R_386_32	.text
100014a1:	e8 fc ff ff ff       	call   100014a2 <createUser(char const*)+0x2e3>	100014a2: R_386_PC32	copytree(char*, char*)
100014a6:	83 c4 10             	add    esp,0x10
100014a9:	90                   	nop
100014aa:	c9                   	leave  
100014ab:	c3                   	ret    

100014ac <drawBootScreen()>:
100014ac:	55                   	push   ebp
100014ad:	89 e5                	mov    ebp,esp
100014af:	83 ec 18             	sub    esp,0x18
100014b2:	a1 00 00 00 00       	mov    eax,ds:0x0	100014b3: R_386_32	term
100014b7:	83 ec 08             	sub    esp,0x8
100014ba:	6a 0b                	push   0xb
100014bc:	50                   	push   eax
100014bd:	e8 fc ff ff ff       	call   100014be <drawBootScreen()+0x12>	100014be: R_386_PC32	VgaText::setDefaultBgColour(VgaColour)
100014c2:	83 c4 10             	add    esp,0x10
100014c5:	a1 00 00 00 00       	mov    eax,ds:0x0	100014c6: R_386_32	term
100014ca:	83 ec 08             	sub    esp,0x8
100014cd:	6a 00                	push   0x0
100014cf:	50                   	push   eax
100014d0:	e8 fc ff ff ff       	call   100014d1 <drawBootScreen()+0x25>	100014d1: R_386_PC32	VgaText::setDefaultFgColour(VgaColour)
100014d5:	83 c4 10             	add    esp,0x10
100014d8:	a1 00 00 00 00       	mov    eax,ds:0x0	100014d9: R_386_32	term
100014dd:	83 ec 0c             	sub    esp,0xc
100014e0:	50                   	push   eax
100014e1:	e8 fc ff ff ff       	call   100014e2 <drawBootScreen()+0x36>	100014e2: R_386_PC32	VgaText::clearScreen()
100014e6:	83 c4 10             	add    esp,0x10
100014e9:	a1 00 00 00 00       	mov    eax,ds:0x0	100014ea: R_386_32	term
100014ee:	83 ec 08             	sub    esp,0x8
100014f1:	68 9b 88 00 10       	push   0x1000889b	100014f2: R_386_32	.text
100014f6:	50                   	push   eax
100014f7:	e8 fc ff ff ff       	call   100014f8 <drawBootScreen()+0x4c>	100014f8: R_386_PC32	VgaText::setTitle(char*)
100014fc:	83 c4 10             	add    esp,0x10
100014ff:	a1 00 00 00 00       	mov    eax,ds:0x0	10001500: R_386_32	term
10001504:	83 ec 08             	sub    esp,0x8
10001507:	6a 00                	push   0x0
10001509:	50                   	push   eax
1000150a:	e8 fc ff ff ff       	call   1000150b <drawBootScreen()+0x5f>	1000150b: R_386_PC32	VgaText::setTitleColour(VgaColour)
1000150f:	83 c4 10             	add    esp,0x10
10001512:	a1 00 00 00 00       	mov    eax,ds:0x0	10001513: R_386_32	term
10001517:	83 ec 08             	sub    esp,0x8
1000151a:	6a 00                	push   0x0
1000151c:	50                   	push   eax
1000151d:	e8 fc ff ff ff       	call   1000151e <drawBootScreen()+0x72>	1000151e: R_386_PC32	VgaText::setTitleTextColour(VgaColour)
10001522:	83 c4 10             	add    esp,0x10
10001525:	a1 00 00 00 00       	mov    eax,ds:0x0	10001526: R_386_32	term
1000152a:	83 ec 04             	sub    esp,0x4
1000152d:	6a 00                	push   0x0
1000152f:	6a 00                	push   0x0
10001531:	50                   	push   eax
10001532:	e8 fc ff ff ff       	call   10001533 <drawBootScreen()+0x87>	10001533: R_386_PC32	VgaText::setCursor(int, int)
10001537:	83 c4 10             	add    esp,0x10
1000153a:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
10001541:	83 7d f4 4f          	cmp    DWORD PTR [ebp-0xc],0x4f
10001545:	7f 19                	jg     10001560 <drawBootScreen()+0xb4>
10001547:	a1 00 00 00 00       	mov    eax,ds:0x0	10001548: R_386_32	term
1000154c:	6a 00                	push   0x0
1000154e:	6a 00                	push   0x0
10001550:	6a 20                	push   0x20
10001552:	50                   	push   eax
10001553:	e8 fc ff ff ff       	call   10001554 <drawBootScreen()+0xa8>	10001554: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
10001558:	83 c4 10             	add    esp,0x10
1000155b:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
1000155e:	eb e1                	jmp    10001541 <drawBootScreen()+0x95>
10001560:	a0 00 00 00 00       	mov    al,ds:0x0	10001561: R_386_32	showSidebar
10001565:	84 c0                	test   al,al
10001567:	0f 84 91 00 00 00    	je     100015fe <drawBootScreen()+0x152>
1000156d:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
10001574:	83 7d f0 18          	cmp    DWORD PTR [ebp-0x10],0x18
10001578:	7f 41                	jg     100015bb <drawBootScreen()+0x10f>
1000157a:	a1 00 00 00 00       	mov    eax,ds:0x0	1000157b: R_386_32	term
1000157f:	83 ec 04             	sub    esp,0x4
10001582:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10001585:	6a 00                	push   0x0
10001587:	50                   	push   eax
10001588:	e8 fc ff ff ff       	call   10001589 <drawBootScreen()+0xdd>	10001589: R_386_PC32	VgaText::setCursor(int, int)
1000158d:	83 c4 10             	add    esp,0x10
10001590:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
10001597:	83 7d ec 0f          	cmp    DWORD PTR [ebp-0x14],0xf
1000159b:	7f 19                	jg     100015b6 <drawBootScreen()+0x10a>
1000159d:	a1 00 00 00 00       	mov    eax,ds:0x0	1000159e: R_386_32	term
100015a2:	6a 00                	push   0x0
100015a4:	6a 00                	push   0x0
100015a6:	6a 20                	push   0x20
100015a8:	50                   	push   eax
100015a9:	e8 fc ff ff ff       	call   100015aa <drawBootScreen()+0xfe>	100015aa: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
100015ae:	83 c4 10             	add    esp,0x10
100015b1:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
100015b4:	eb e1                	jmp    10001597 <drawBootScreen()+0xeb>
100015b6:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
100015b9:	eb b9                	jmp    10001574 <drawBootScreen()+0xc8>
100015bb:	a1 00 00 00 00       	mov    eax,ds:0x0	100015bc: R_386_32	term
100015c0:	83 ec 04             	sub    esp,0x4
100015c3:	6a 01                	push   0x1
100015c5:	6a 01                	push   0x1
100015c7:	50                   	push   eax
100015c8:	e8 fc ff ff ff       	call   100015c9 <drawBootScreen()+0x11d>	100015c9: R_386_PC32	VgaText::setCursor(int, int)
100015cd:	83 c4 10             	add    esp,0x10
100015d0:	a1 00 00 00 00       	mov    eax,ds:0x0	100015d1: R_386_32	term
100015d5:	6a 00                	push   0x0
100015d7:	6a 0f                	push   0xf
100015d9:	68 9c 88 00 10       	push   0x1000889c	100015da: R_386_32	.text
100015de:	50                   	push   eax
100015df:	e8 fc ff ff ff       	call   100015e0 <drawBootScreen()+0x134>	100015e0: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
100015e4:	83 c4 10             	add    esp,0x10
100015e7:	a1 00 00 00 00       	mov    eax,ds:0x0	100015e8: R_386_32	term
100015ec:	6a 00                	push   0x0
100015ee:	6a 0e                	push   0xe
100015f0:	68 1f 89 00 10       	push   0x1000891f	100015f1: R_386_32	.text
100015f5:	50                   	push   eax
100015f6:	e8 fc ff ff ff       	call   100015f7 <drawBootScreen()+0x14b>	100015f7: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
100015fb:	83 c4 10             	add    esp,0x10
100015fe:	a1 00 00 00 00       	mov    eax,ds:0x0	100015ff: R_386_32	term
10001603:	83 ec 08             	sub    esp,0x8
10001606:	6a 0f                	push   0xf
10001608:	50                   	push   eax
10001609:	e8 fc ff ff ff       	call   1000160a <drawBootScreen()+0x15e>	1000160a: R_386_PC32	VgaText::setDefaultBgColour(VgaColour)
1000160e:	83 c4 10             	add    esp,0x10
10001611:	a1 00 00 00 00       	mov    eax,ds:0x0	10001612: R_386_32	term
10001616:	83 ec 08             	sub    esp,0x8
10001619:	6a 00                	push   0x0
1000161b:	50                   	push   eax
1000161c:	e8 fc ff ff ff       	call   1000161d <drawBootScreen()+0x171>	1000161d: R_386_PC32	VgaText::setDefaultFgColour(VgaColour)
10001621:	83 c4 10             	add    esp,0x10
10001624:	90                   	nop
10001625:	c9                   	leave  
10001626:	c3                   	ret    

10001627 <drawBasicWindowX(int, int, int, int, char const*, bool)>:
10001627:	55                   	push   ebp
10001628:	89 e5                	mov    ebp,esp
1000162a:	53                   	push   ebx
1000162b:	83 ec 34             	sub    esp,0x34
1000162e:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
10001631:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
10001634:	ff 45 0c             	inc    DWORD PTR [ebp+0xc]
10001637:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
1000163e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10001641:	3b 45 14             	cmp    eax,DWORD PTR [ebp+0x14]
10001644:	7d 6c                	jge    100016b2 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x8b>
10001646:	a1 00 00 00 00       	mov    eax,ds:0x0	10001647: R_386_32	term
1000164b:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
1000164e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001651:	01 ca                	add    edx,ecx
10001653:	83 ec 04             	sub    esp,0x4
10001656:	52                   	push   edx
10001657:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000165a:	50                   	push   eax
1000165b:	e8 fc ff ff ff       	call   1000165c <drawBasicWindowX(int, int, int, int, char const*, bool)+0x35>	1000165c: R_386_PC32	VgaText::setCursor(int, int)
10001660:	83 c4 10             	add    esp,0x10
10001663:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
1000166a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
1000166d:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
10001670:	7d 3b                	jge    100016ad <drawBasicWindowX(int, int, int, int, char const*, bool)+0x86>
10001672:	a1 00 00 00 00       	mov    eax,ds:0x0	10001673: R_386_32	term
10001677:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
1000167b:	74 07                	je     10001684 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x5d>
1000167d:	b9 07 00 00 00       	mov    ecx,0x7
10001682:	eb 05                	jmp    10001689 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x62>
10001684:	b9 0f 00 00 00       	mov    ecx,0xf
10001689:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
1000168d:	74 07                	je     10001696 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x6f>
1000168f:	ba 07 00 00 00       	mov    edx,0x7
10001694:	eb 05                	jmp    1000169b <drawBasicWindowX(int, int, int, int, char const*, bool)+0x74>
10001696:	ba 0f 00 00 00       	mov    edx,0xf
1000169b:	51                   	push   ecx
1000169c:	52                   	push   edx
1000169d:	6a 20                	push   0x20
1000169f:	50                   	push   eax
100016a0:	e8 fc ff ff ff       	call   100016a1 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x7a>	100016a1: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
100016a5:	83 c4 10             	add    esp,0x10
100016a8:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
100016ab:	eb bd                	jmp    1000166a <drawBasicWindowX(int, int, int, int, char const*, bool)+0x43>
100016ad:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
100016b0:	eb 8c                	jmp    1000163e <drawBasicWindowX(int, int, int, int, char const*, bool)+0x17>
100016b2:	a1 00 00 00 00       	mov    eax,ds:0x0	100016b3: R_386_32	term
100016b7:	83 ec 04             	sub    esp,0x4
100016ba:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
100016bd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100016c0:	50                   	push   eax
100016c1:	e8 fc ff ff ff       	call   100016c2 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x9b>	100016c2: R_386_PC32	VgaText::setCursor(int, int)
100016c6:	83 c4 10             	add    esp,0x10
100016c9:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
100016d0:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
100016d3:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
100016d6:	7d 19                	jge    100016f1 <drawBasicWindowX(int, int, int, int, char const*, bool)+0xca>
100016d8:	a1 00 00 00 00       	mov    eax,ds:0x0	100016d9: R_386_32	term
100016dd:	6a 01                	push   0x1
100016df:	6a 01                	push   0x1
100016e1:	6a 20                	push   0x20
100016e3:	50                   	push   eax
100016e4:	e8 fc ff ff ff       	call   100016e5 <drawBasicWindowX(int, int, int, int, char const*, bool)+0xbe>	100016e5: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
100016e9:	83 c4 10             	add    esp,0x10
100016ec:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
100016ef:	eb df                	jmp    100016d0 <drawBasicWindowX(int, int, int, int, char const*, bool)+0xa9>
100016f1:	a1 00 00 00 00       	mov    eax,ds:0x0	100016f2: R_386_32	term
100016f6:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
100016f9:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
100016fc:	01 d1                	add    ecx,edx
100016fe:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10001701:	42                   	inc    edx
10001702:	83 ec 04             	sub    esp,0x4
10001705:	51                   	push   ecx
10001706:	52                   	push   edx
10001707:	50                   	push   eax
10001708:	e8 fc ff ff ff       	call   10001709 <drawBasicWindowX(int, int, int, int, char const*, bool)+0xe2>	10001709: R_386_PC32	VgaText::setCursor(int, int)
1000170d:	83 c4 10             	add    esp,0x10
10001710:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
10001717:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
1000171a:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
1000171d:	7d 19                	jge    10001738 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x111>
1000171f:	a1 00 00 00 00       	mov    eax,ds:0x0	10001720: R_386_32	term
10001724:	6a 03                	push   0x3
10001726:	6a 03                	push   0x3
10001728:	6a 20                	push   0x20
1000172a:	50                   	push   eax
1000172b:	e8 fc ff ff ff       	call   1000172c <drawBasicWindowX(int, int, int, int, char const*, bool)+0x105>	1000172c: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
10001730:	83 c4 10             	add    esp,0x10
10001733:	ff 45 e8             	inc    DWORD PTR [ebp-0x18]
10001736:	eb df                	jmp    10001717 <drawBasicWindowX(int, int, int, int, char const*, bool)+0xf0>
10001738:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
1000173b:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
1000173e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10001741:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
10001744:	01 d0                	add    eax,edx
10001746:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
10001749:	0f 8d 89 00 00 00    	jge    100017d8 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x1b1>
1000174f:	a1 00 00 00 00       	mov    eax,ds:0x0	10001750: R_386_32	term
10001754:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10001757:	8d 4a 01             	lea    ecx,[edx+0x1]
1000175a:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
1000175d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10001760:	01 da                	add    edx,ebx
10001762:	83 ec 04             	sub    esp,0x4
10001765:	51                   	push   ecx
10001766:	52                   	push   edx
10001767:	50                   	push   eax
10001768:	e8 fc ff ff ff       	call   10001769 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x142>	10001769: R_386_PC32	VgaText::setCursor(int, int)
1000176d:	83 c4 10             	add    esp,0x10
10001770:	a1 00 00 00 00       	mov    eax,ds:0x0	10001771: R_386_32	term
10001775:	6a 03                	push   0x3
10001777:	6a 03                	push   0x3
10001779:	6a 20                	push   0x20
1000177b:	50                   	push   eax
1000177c:	e8 fc ff ff ff       	call   1000177d <drawBasicWindowX(int, int, int, int, char const*, bool)+0x156>	1000177d: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
10001781:	83 c4 10             	add    esp,0x10
10001784:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10001787:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
1000178a:	01 d0                	add    eax,edx
1000178c:	48                   	dec    eax
1000178d:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
10001790:	74 3e                	je     100017d0 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x1a9>
10001792:	a1 00 00 00 00       	mov    eax,ds:0x0	10001793: R_386_32	term
10001797:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
1000179a:	42                   	inc    edx
1000179b:	83 ec 04             	sub    esp,0x4
1000179e:	52                   	push   edx
1000179f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100017a2:	50                   	push   eax
100017a3:	e8 fc ff ff ff       	call   100017a4 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x17d>	100017a4: R_386_PC32	VgaText::setCursor(int, int)
100017a8:	83 c4 10             	add    esp,0x10
100017ab:	a1 00 00 00 00       	mov    eax,ds:0x0	100017ac: R_386_32	term
100017b0:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
100017b4:	74 07                	je     100017bd <drawBasicWindowX(int, int, int, int, char const*, bool)+0x196>
100017b6:	ba 07 00 00 00       	mov    edx,0x7
100017bb:	eb 05                	jmp    100017c2 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x19b>
100017bd:	ba 0f 00 00 00       	mov    edx,0xf
100017c2:	52                   	push   edx
100017c3:	6a 00                	push   0x0
100017c5:	6a dd                	push   0xffffffdd
100017c7:	50                   	push   eax
100017c8:	e8 fc ff ff ff       	call   100017c9 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x1a2>	100017c9: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
100017cd:	83 c4 10             	add    esp,0x10
100017d0:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
100017d3:	e9 66 ff ff ff       	jmp    1000173e <drawBasicWindowX(int, int, int, int, char const*, bool)+0x117>
100017d8:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
100017db:	83 ec 0c             	sub    esp,0xc
100017de:	ff 75 18             	push   DWORD PTR [ebp+0x18]
100017e1:	e8 fc ff ff ff       	call   100017e2 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x1bb>	100017e2: R_386_PC32	strlen
100017e6:	83 c4 10             	add    esp,0x10
100017e9:	29 c3                	sub    ebx,eax
100017eb:	89 d8                	mov    eax,ebx
100017ed:	d1 e8                	shr    eax,1
100017ef:	48                   	dec    eax
100017f0:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
100017f3:	a1 00 00 00 00       	mov    eax,ds:0x0	100017f4: R_386_32	term
100017f8:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
100017fb:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
100017fe:	01 ca                	add    edx,ecx
10001800:	83 ec 04             	sub    esp,0x4
10001803:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10001806:	52                   	push   edx
10001807:	50                   	push   eax
10001808:	e8 fc ff ff ff       	call   10001809 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x1e2>	10001809: R_386_PC32	VgaText::setCursor(int, int)
1000180d:	83 c4 10             	add    esp,0x10
10001810:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
10001817:	83 ec 0c             	sub    esp,0xc
1000181a:	ff 75 18             	push   DWORD PTR [ebp+0x18]
1000181d:	e8 fc ff ff ff       	call   1000181e <drawBasicWindowX(int, int, int, int, char const*, bool)+0x1f7>	1000181e: R_386_PC32	strlen
10001822:	83 c4 10             	add    esp,0x10
10001825:	89 c2                	mov    edx,eax
10001827:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
1000182a:	39 c2                	cmp    edx,eax
1000182c:	76 25                	jbe    10001853 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x22c>
1000182e:	a1 00 00 00 00       	mov    eax,ds:0x0	1000182f: R_386_32	term
10001833:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
10001836:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
10001839:	01 ca                	add    edx,ecx
1000183b:	8a 12                	mov    dl,BYTE PTR [edx]
1000183d:	0f be d2             	movsx  edx,dl
10001840:	6a 01                	push   0x1
10001842:	6a 0f                	push   0xf
10001844:	52                   	push   edx
10001845:	50                   	push   eax
10001846:	e8 fc ff ff ff       	call   10001847 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x220>	10001847: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
1000184b:	83 c4 10             	add    esp,0x10
1000184e:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
10001851:	eb c4                	jmp    10001817 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x1f0>
10001853:	90                   	nop
10001854:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
10001857:	c9                   	leave  
10001858:	c3                   	ret    

10001859 <drawBasicWindow(int, int, int, int, char const*)>:
10001859:	55                   	push   ebp
1000185a:	89 e5                	mov    ebp,esp
1000185c:	83 ec 08             	sub    esp,0x8
1000185f:	83 ec 08             	sub    esp,0x8
10001862:	6a 00                	push   0x0
10001864:	ff 75 18             	push   DWORD PTR [ebp+0x18]
10001867:	ff 75 14             	push   DWORD PTR [ebp+0x14]
1000186a:	ff 75 10             	push   DWORD PTR [ebp+0x10]
1000186d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10001870:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001873:	e8 fc ff ff ff       	call   10001874 <drawBasicWindow(int, int, int, int, char const*)+0x1b>	10001874: R_386_PC32	drawBasicWindowX(int, int, int, int, char const*, bool)
10001878:	83 c4 20             	add    esp,0x20
1000187b:	90                   	nop
1000187c:	c9                   	leave  
1000187d:	c3                   	ret    

1000187e <bootInstallKeybrd(KeyboardToken, bool*)>:
1000187e:	55                   	push   ebp
1000187f:	89 e5                	mov    ebp,esp
10001881:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
10001884:	05 04 01 00 00       	add    eax,0x104
10001889:	8a 00                	mov    al,BYTE PTR [eax]
1000188b:	84 c0                	test   al,al
1000188d:	74 15                	je     100018a4 <bootInstallKeybrd(KeyboardToken, bool*)+0x26>
1000188f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001892:	66 83 f8 09          	cmp    ax,0x9
10001896:	75 0c                	jne    100018a4 <bootInstallKeybrd(KeyboardToken, bool*)+0x26>
10001898:	c6 05 00 00 00 00 7f 	mov    BYTE PTR ds:0x0,0x7f	1000189a: R_386_32	installKey
1000189f:	e9 94 00 00 00       	jmp    10001938 <bootInstallKeybrd(KeyboardToken, bool*)+0xba>
100018a4:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
100018a7:	84 c0                	test   al,al
100018a9:	0f 85 88 00 00 00    	jne    10001937 <bootInstallKeybrd(KeyboardToken, bool*)+0xb9>
100018af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100018b2:	66 3d 0a 02          	cmp    ax,0x20a
100018b6:	75 09                	jne    100018c1 <bootInstallKeybrd(KeyboardToken, bool*)+0x43>
100018b8:	c6 05 00 00 00 00 1b 	mov    BYTE PTR ds:0x0,0x1b	100018ba: R_386_32	installKey
100018bf:	eb 77                	jmp    10001938 <bootInstallKeybrd(KeyboardToken, bool*)+0xba>
100018c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100018c4:	66 3d 0d 02          	cmp    ax,0x20d
100018c8:	75 09                	jne    100018d3 <bootInstallKeybrd(KeyboardToken, bool*)+0x55>
100018ca:	c6 05 00 00 00 00 03 	mov    BYTE PTR ds:0x0,0x3	100018cc: R_386_32	installKey
100018d1:	eb 65                	jmp    10001938 <bootInstallKeybrd(KeyboardToken, bool*)+0xba>
100018d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100018d6:	66 3d 0e 02          	cmp    ax,0x20e
100018da:	75 09                	jne    100018e5 <bootInstallKeybrd(KeyboardToken, bool*)+0x67>
100018dc:	c6 05 00 00 00 00 04 	mov    BYTE PTR ds:0x0,0x4	100018de: R_386_32	installKey
100018e3:	eb 53                	jmp    10001938 <bootInstallKeybrd(KeyboardToken, bool*)+0xba>
100018e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100018e8:	66 3d 0b 02          	cmp    ax,0x20b
100018ec:	75 09                	jne    100018f7 <bootInstallKeybrd(KeyboardToken, bool*)+0x79>
100018ee:	c6 05 00 00 00 00 01 	mov    BYTE PTR ds:0x0,0x1	100018f0: R_386_32	installKey
100018f5:	eb 41                	jmp    10001938 <bootInstallKeybrd(KeyboardToken, bool*)+0xba>
100018f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100018fa:	66 3d 0c 02          	cmp    ax,0x20c
100018fe:	75 09                	jne    10001909 <bootInstallKeybrd(KeyboardToken, bool*)+0x8b>
10001900:	c6 05 00 00 00 00 02 	mov    BYTE PTR ds:0x0,0x2	10001902: R_386_32	installKey
10001907:	eb 2f                	jmp    10001938 <bootInstallKeybrd(KeyboardToken, bool*)+0xba>
10001909:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000190c:	66 3d 05 02          	cmp    ax,0x205
10001910:	75 09                	jne    1000191b <bootInstallKeybrd(KeyboardToken, bool*)+0x9d>
10001912:	c6 05 00 00 00 00 7d 	mov    BYTE PTR ds:0x0,0x7d	10001914: R_386_32	installKey
10001919:	eb 1d                	jmp    10001938 <bootInstallKeybrd(KeyboardToken, bool*)+0xba>
1000191b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000191e:	66 3d 05 02          	cmp    ax,0x205
10001922:	75 09                	jne    1000192d <bootInstallKeybrd(KeyboardToken, bool*)+0xaf>
10001924:	c6 05 00 00 00 00 7e 	mov    BYTE PTR ds:0x0,0x7e	10001926: R_386_32	installKey
1000192b:	eb 0b                	jmp    10001938 <bootInstallKeybrd(KeyboardToken, bool*)+0xba>
1000192d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001930:	a2 00 00 00 00       	mov    ds:0x0,al	10001931: R_386_32	installKey
10001935:	eb 01                	jmp    10001938 <bootInstallKeybrd(KeyboardToken, bool*)+0xba>
10001937:	90                   	nop
10001938:	5d                   	pop    ebp
10001939:	c3                   	ret    

1000193a <bootInstallTasks(int)>:
1000193a:	55                   	push   ebp
1000193b:	89 e5                	mov    ebp,esp
1000193d:	83 ec 08             	sub    esp,0x8
10001940:	a1 00 00 00 00       	mov    eax,ds:0x0	10001941: R_386_32	term
10001945:	83 ec 04             	sub    esp,0x4
10001948:	6a 08                	push   0x8
1000194a:	6a 18                	push   0x18
1000194c:	50                   	push   eax
1000194d:	e8 fc ff ff ff       	call   1000194e <bootInstallTasks(int)+0x14>	1000194e: R_386_PC32	VgaText::setCursor(int, int)
10001952:	83 c4 10             	add    esp,0x10
10001955:	a1 00 00 00 00       	mov    eax,ds:0x0	10001956: R_386_32	term
1000195a:	83 ec 08             	sub    esp,0x8
1000195d:	68 40 89 00 10       	push   0x10008940	1000195e: R_386_32	.text
10001962:	50                   	push   eax
10001963:	e8 fc ff ff ff       	call   10001964 <bootInstallTasks(int)+0x2a>	10001964: R_386_PC32	VgaText::puts(char const*)
10001968:	83 c4 10             	add    esp,0x10
1000196b:	a1 00 00 00 00       	mov    eax,ds:0x0	1000196c: R_386_32	term
10001970:	83 ec 04             	sub    esp,0x4
10001973:	6a 0a                	push   0xa
10001975:	6a 1a                	push   0x1a
10001977:	50                   	push   eax
10001978:	e8 fc ff ff ff       	call   10001979 <bootInstallTasks(int)+0x3f>	10001979: R_386_PC32	VgaText::setCursor(int, int)
1000197d:	83 c4 10             	add    esp,0x10
10001980:	a1 00 00 00 00       	mov    eax,ds:0x0	10001981: R_386_32	term
10001985:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
10001989:	75 07                	jne    10001992 <bootInstallTasks(int)+0x58>
1000198b:	ba 68 89 00 10       	mov    edx,0x10008968	1000198c: R_386_32	.text
10001990:	eb 05                	jmp    10001997 <bootInstallTasks(int)+0x5d>
10001992:	ba 6b 89 00 10       	mov    edx,0x1000896b	10001993: R_386_32	.text
10001997:	83 ec 08             	sub    esp,0x8
1000199a:	52                   	push   edx
1000199b:	50                   	push   eax
1000199c:	e8 fc ff ff ff       	call   1000199d <bootInstallTasks(int)+0x63>	1000199d: R_386_PC32	VgaText::puts(char const*)
100019a1:	83 c4 10             	add    esp,0x10
100019a4:	a1 00 00 00 00       	mov    eax,ds:0x0	100019a5: R_386_32	term
100019a9:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
100019ad:	78 07                	js     100019b6 <bootInstallTasks(int)+0x7c>
100019af:	ba 00 00 00 00       	mov    edx,0x0
100019b4:	eb 05                	jmp    100019bb <bootInstallTasks(int)+0x81>
100019b6:	ba 07 00 00 00       	mov    edx,0x7
100019bb:	6a 0f                	push   0xf
100019bd:	52                   	push   edx
100019be:	68 6e 89 00 10       	push   0x1000896e	100019bf: R_386_32	.text
100019c3:	50                   	push   eax
100019c4:	e8 fc ff ff ff       	call   100019c5 <bootInstallTasks(int)+0x8b>	100019c5: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
100019c9:	83 c4 10             	add    esp,0x10
100019cc:	a1 00 00 00 00       	mov    eax,ds:0x0	100019cd: R_386_32	term
100019d1:	83 ec 04             	sub    esp,0x4
100019d4:	6a 0b                	push   0xb
100019d6:	6a 1a                	push   0x1a
100019d8:	50                   	push   eax
100019d9:	e8 fc ff ff ff       	call   100019da <bootInstallTasks(int)+0xa0>	100019da: R_386_PC32	VgaText::setCursor(int, int)
100019de:	83 c4 10             	add    esp,0x10
100019e1:	a1 00 00 00 00       	mov    eax,ds:0x0	100019e2: R_386_32	term
100019e6:	83 7d 08 01          	cmp    DWORD PTR [ebp+0x8],0x1
100019ea:	75 07                	jne    100019f3 <bootInstallTasks(int)+0xb9>
100019ec:	ba 68 89 00 10       	mov    edx,0x10008968	100019ed: R_386_32	.text
100019f1:	eb 05                	jmp    100019f8 <bootInstallTasks(int)+0xbe>
100019f3:	ba 6b 89 00 10       	mov    edx,0x1000896b	100019f4: R_386_32	.text
100019f8:	83 ec 08             	sub    esp,0x8
100019fb:	52                   	push   edx
100019fc:	50                   	push   eax
100019fd:	e8 fc ff ff ff       	call   100019fe <bootInstallTasks(int)+0xc4>	100019fe: R_386_PC32	VgaText::puts(char const*)
10001a02:	83 c4 10             	add    esp,0x10
10001a05:	a1 00 00 00 00       	mov    eax,ds:0x0	10001a06: R_386_32	term
10001a0a:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
10001a0e:	7e 07                	jle    10001a17 <bootInstallTasks(int)+0xdd>
10001a10:	ba 00 00 00 00       	mov    edx,0x0
10001a15:	eb 05                	jmp    10001a1c <bootInstallTasks(int)+0xe2>
10001a17:	ba 07 00 00 00       	mov    edx,0x7
10001a1c:	6a 0f                	push   0xf
10001a1e:	52                   	push   edx
10001a1f:	68 86 89 00 10       	push   0x10008986	10001a20: R_386_32	.text
10001a24:	50                   	push   eax
10001a25:	e8 fc ff ff ff       	call   10001a26 <bootInstallTasks(int)+0xec>	10001a26: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10001a2a:	83 c4 10             	add    esp,0x10
10001a2d:	a1 00 00 00 00       	mov    eax,ds:0x0	10001a2e: R_386_32	term
10001a32:	83 ec 04             	sub    esp,0x4
10001a35:	6a 0c                	push   0xc
10001a37:	6a 1a                	push   0x1a
10001a39:	50                   	push   eax
10001a3a:	e8 fc ff ff ff       	call   10001a3b <bootInstallTasks(int)+0x101>	10001a3b: R_386_PC32	VgaText::setCursor(int, int)
10001a3f:	83 c4 10             	add    esp,0x10
10001a42:	a1 00 00 00 00       	mov    eax,ds:0x0	10001a43: R_386_32	term
10001a47:	83 7d 08 02          	cmp    DWORD PTR [ebp+0x8],0x2
10001a4b:	75 07                	jne    10001a54 <bootInstallTasks(int)+0x11a>
10001a4d:	ba 68 89 00 10       	mov    edx,0x10008968	10001a4e: R_386_32	.text
10001a52:	eb 05                	jmp    10001a59 <bootInstallTasks(int)+0x11f>
10001a54:	ba 6b 89 00 10       	mov    edx,0x1000896b	10001a55: R_386_32	.text
10001a59:	83 ec 08             	sub    esp,0x8
10001a5c:	52                   	push   edx
10001a5d:	50                   	push   eax
10001a5e:	e8 fc ff ff ff       	call   10001a5f <bootInstallTasks(int)+0x125>	10001a5f: R_386_PC32	VgaText::puts(char const*)
10001a63:	83 c4 10             	add    esp,0x10
10001a66:	a1 00 00 00 00       	mov    eax,ds:0x0	10001a67: R_386_32	term
10001a6b:	83 7d 08 01          	cmp    DWORD PTR [ebp+0x8],0x1
10001a6f:	7e 07                	jle    10001a78 <bootInstallTasks(int)+0x13e>
10001a71:	ba 00 00 00 00       	mov    edx,0x0
10001a76:	eb 05                	jmp    10001a7d <bootInstallTasks(int)+0x143>
10001a78:	ba 07 00 00 00       	mov    edx,0x7
10001a7d:	6a 0f                	push   0xf
10001a7f:	52                   	push   edx
10001a80:	68 9c 89 00 10       	push   0x1000899c	10001a81: R_386_32	.text
10001a85:	50                   	push   eax
10001a86:	e8 fc ff ff ff       	call   10001a87 <bootInstallTasks(int)+0x14d>	10001a87: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10001a8b:	83 c4 10             	add    esp,0x10
10001a8e:	a1 00 00 00 00       	mov    eax,ds:0x0	10001a8f: R_386_32	term
10001a93:	83 ec 04             	sub    esp,0x4
10001a96:	6a 0d                	push   0xd
10001a98:	6a 1a                	push   0x1a
10001a9a:	50                   	push   eax
10001a9b:	e8 fc ff ff ff       	call   10001a9c <bootInstallTasks(int)+0x162>	10001a9c: R_386_PC32	VgaText::setCursor(int, int)
10001aa0:	83 c4 10             	add    esp,0x10
10001aa3:	a1 00 00 00 00       	mov    eax,ds:0x0	10001aa4: R_386_32	term
10001aa8:	83 7d 08 03          	cmp    DWORD PTR [ebp+0x8],0x3
10001aac:	75 07                	jne    10001ab5 <bootInstallTasks(int)+0x17b>
10001aae:	ba 68 89 00 10       	mov    edx,0x10008968	10001aaf: R_386_32	.text
10001ab3:	eb 05                	jmp    10001aba <bootInstallTasks(int)+0x180>
10001ab5:	ba 6b 89 00 10       	mov    edx,0x1000896b	10001ab6: R_386_32	.text
10001aba:	83 ec 08             	sub    esp,0x8
10001abd:	52                   	push   edx
10001abe:	50                   	push   eax
10001abf:	e8 fc ff ff ff       	call   10001ac0 <bootInstallTasks(int)+0x186>	10001ac0: R_386_PC32	VgaText::puts(char const*)
10001ac4:	83 c4 10             	add    esp,0x10
10001ac7:	a1 00 00 00 00       	mov    eax,ds:0x0	10001ac8: R_386_32	term
10001acc:	83 7d 08 02          	cmp    DWORD PTR [ebp+0x8],0x2
10001ad0:	7e 07                	jle    10001ad9 <bootInstallTasks(int)+0x19f>
10001ad2:	ba 00 00 00 00       	mov    edx,0x0
10001ad7:	eb 05                	jmp    10001ade <bootInstallTasks(int)+0x1a4>
10001ad9:	ba 07 00 00 00       	mov    edx,0x7
10001ade:	6a 0f                	push   0xf
10001ae0:	52                   	push   edx
10001ae1:	68 b2 89 00 10       	push   0x100089b2	10001ae2: R_386_32	.text
10001ae6:	50                   	push   eax
10001ae7:	e8 fc ff ff ff       	call   10001ae8 <bootInstallTasks(int)+0x1ae>	10001ae8: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10001aec:	83 c4 10             	add    esp,0x10
10001aef:	a1 00 00 00 00       	mov    eax,ds:0x0	10001af0: R_386_32	term
10001af4:	83 ec 04             	sub    esp,0x4
10001af7:	6a 0e                	push   0xe
10001af9:	6a 1a                	push   0x1a
10001afb:	50                   	push   eax
10001afc:	e8 fc ff ff ff       	call   10001afd <bootInstallTasks(int)+0x1c3>	10001afd: R_386_PC32	VgaText::setCursor(int, int)
10001b01:	83 c4 10             	add    esp,0x10
10001b04:	a1 00 00 00 00       	mov    eax,ds:0x0	10001b05: R_386_32	term
10001b09:	83 7d 08 04          	cmp    DWORD PTR [ebp+0x8],0x4
10001b0d:	75 07                	jne    10001b16 <bootInstallTasks(int)+0x1dc>
10001b0f:	ba 68 89 00 10       	mov    edx,0x10008968	10001b10: R_386_32	.text
10001b14:	eb 05                	jmp    10001b1b <bootInstallTasks(int)+0x1e1>
10001b16:	ba 6b 89 00 10       	mov    edx,0x1000896b	10001b17: R_386_32	.text
10001b1b:	83 ec 08             	sub    esp,0x8
10001b1e:	52                   	push   edx
10001b1f:	50                   	push   eax
10001b20:	e8 fc ff ff ff       	call   10001b21 <bootInstallTasks(int)+0x1e7>	10001b21: R_386_PC32	VgaText::puts(char const*)
10001b25:	83 c4 10             	add    esp,0x10
10001b28:	a1 00 00 00 00       	mov    eax,ds:0x0	10001b29: R_386_32	term
10001b2d:	83 7d 08 03          	cmp    DWORD PTR [ebp+0x8],0x3
10001b31:	7e 07                	jle    10001b3a <bootInstallTasks(int)+0x200>
10001b33:	ba 00 00 00 00       	mov    edx,0x0
10001b38:	eb 05                	jmp    10001b3f <bootInstallTasks(int)+0x205>
10001b3a:	ba 07 00 00 00       	mov    edx,0x7
10001b3f:	6a 0f                	push   0xf
10001b41:	52                   	push   edx
10001b42:	68 c6 89 00 10       	push   0x100089c6	10001b43: R_386_32	.text
10001b47:	50                   	push   eax
10001b48:	e8 fc ff ff ff       	call   10001b49 <bootInstallTasks(int)+0x20f>	10001b49: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10001b4d:	83 c4 10             	add    esp,0x10
10001b50:	a1 00 00 00 00       	mov    eax,ds:0x0	10001b51: R_386_32	term
10001b55:	83 ec 04             	sub    esp,0x4
10001b58:	6a 0f                	push   0xf
10001b5a:	6a 1a                	push   0x1a
10001b5c:	50                   	push   eax
10001b5d:	e8 fc ff ff ff       	call   10001b5e <bootInstallTasks(int)+0x224>	10001b5e: R_386_PC32	VgaText::setCursor(int, int)
10001b62:	83 c4 10             	add    esp,0x10
10001b65:	a1 00 00 00 00       	mov    eax,ds:0x0	10001b66: R_386_32	term
10001b6a:	83 7d 08 05          	cmp    DWORD PTR [ebp+0x8],0x5
10001b6e:	75 07                	jne    10001b77 <bootInstallTasks(int)+0x23d>
10001b70:	ba 68 89 00 10       	mov    edx,0x10008968	10001b71: R_386_32	.text
10001b75:	eb 05                	jmp    10001b7c <bootInstallTasks(int)+0x242>
10001b77:	ba 6b 89 00 10       	mov    edx,0x1000896b	10001b78: R_386_32	.text
10001b7c:	83 ec 08             	sub    esp,0x8
10001b7f:	52                   	push   edx
10001b80:	50                   	push   eax
10001b81:	e8 fc ff ff ff       	call   10001b82 <bootInstallTasks(int)+0x248>	10001b82: R_386_PC32	VgaText::puts(char const*)
10001b86:	83 c4 10             	add    esp,0x10
10001b89:	a1 00 00 00 00       	mov    eax,ds:0x0	10001b8a: R_386_32	term
10001b8e:	83 7d 08 04          	cmp    DWORD PTR [ebp+0x8],0x4
10001b92:	7e 07                	jle    10001b9b <bootInstallTasks(int)+0x261>
10001b94:	ba 00 00 00 00       	mov    edx,0x0
10001b99:	eb 05                	jmp    10001ba0 <bootInstallTasks(int)+0x266>
10001b9b:	ba 07 00 00 00       	mov    edx,0x7
10001ba0:	6a 0f                	push   0xf
10001ba2:	52                   	push   edx
10001ba3:	68 de 89 00 10       	push   0x100089de	10001ba4: R_386_32	.text
10001ba8:	50                   	push   eax
10001ba9:	e8 fc ff ff ff       	call   10001baa <bootInstallTasks(int)+0x270>	10001baa: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10001bae:	83 c4 10             	add    esp,0x10
10001bb1:	90                   	nop
10001bb2:	c9                   	leave  
10001bb3:	c3                   	ret    

10001bb4 <ror(unsigned long long, int, int)>:
10001bb4:	55                   	push   ebp
10001bb5:	89 e5                	mov    ebp,esp
10001bb7:	56                   	push   esi
10001bb8:	53                   	push   ebx
10001bb9:	83 ec 20             	sub    esp,0x20
10001bbc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001bbf:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
10001bc2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10001bc5:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10001bc8:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
10001bcb:	ba 01 00 00 00       	mov    edx,0x1
10001bd0:	88 c1                	mov    cl,al
10001bd2:	d3 e2                	shl    edx,cl
10001bd4:	89 d0                	mov    eax,edx
10001bd6:	48                   	dec    eax
10001bd7:	99                   	cdq    
10001bd8:	89 c1                	mov    ecx,eax
10001bda:	23 4d e0             	and    ecx,DWORD PTR [ebp-0x20]
10001bdd:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
10001be0:	89 d0                	mov    eax,edx
10001be2:	23 45 e4             	and    eax,DWORD PTR [ebp-0x1c]
10001be5:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
10001be8:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
10001beb:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10001bee:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10001bf1:	0f ad d0             	shrd   eax,edx,cl
10001bf4:	d3 ea                	shr    edx,cl
10001bf6:	f6 c1 20             	test   cl,0x20
10001bf9:	74 04                	je     10001bff <ror(unsigned long long, int, int)+0x4b>
10001bfb:	89 d0                	mov    eax,edx
10001bfd:	31 d2                	xor    edx,edx
10001bff:	89 c3                	mov    ebx,eax
10001c01:	89 d6                	mov    esi,edx
10001c03:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
10001c06:	2b 45 10             	sub    eax,DWORD PTR [ebp+0x10]
10001c09:	89 c1                	mov    ecx,eax
10001c0b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001c0e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001c11:	0f a5 c2             	shld   edx,eax,cl
10001c14:	d3 e0                	shl    eax,cl
10001c16:	f6 c1 20             	test   cl,0x20
10001c19:	74 04                	je     10001c1f <ror(unsigned long long, int, int)+0x6b>
10001c1b:	89 c2                	mov    edx,eax
10001c1d:	31 c0                	xor    eax,eax
10001c1f:	89 d1                	mov    ecx,edx
10001c21:	89 c2                	mov    edx,eax
10001c23:	89 d8                	mov    eax,ebx
10001c25:	09 d0                	or     eax,edx
10001c27:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
10001c2a:	89 f0                	mov    eax,esi
10001c2c:	09 c8                	or     eax,ecx
10001c2e:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
10001c31:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10001c34:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
10001c37:	83 c4 20             	add    esp,0x20
10001c3a:	5b                   	pop    ebx
10001c3b:	5e                   	pop    esi
10001c3c:	5d                   	pop    ebp
10001c3d:	c3                   	ret    

10001c3e <swapBits(unsigned long long, unsigned long long, unsigned long long)>:
10001c3e:	55                   	push   ebp
10001c3f:	89 e5                	mov    ebp,esp
10001c41:	56                   	push   esi
10001c42:	53                   	push   ebx
10001c43:	83 ec 40             	sub    esp,0x40
10001c46:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001c49:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10001c4c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10001c4f:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
10001c52:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
10001c55:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
10001c58:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
10001c5b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
10001c5e:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
10001c61:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
10001c64:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
10001c67:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10001c6a:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
10001c6d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001c70:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001c73:	0f ad d0             	shrd   eax,edx,cl
10001c76:	d3 ea                	shr    edx,cl
10001c78:	f6 c1 20             	test   cl,0x20
10001c7b:	74 04                	je     10001c81 <swapBits(unsigned long long, unsigned long long, unsigned long long)+0x43>
10001c7d:	89 d0                	mov    eax,edx
10001c7f:	31 d2                	xor    edx,edx
10001c81:	89 c3                	mov    ebx,eax
10001c83:	89 d6                	mov    esi,edx
10001c85:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
10001c88:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001c8b:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001c8e:	0f ad d0             	shrd   eax,edx,cl
10001c91:	d3 ea                	shr    edx,cl
10001c93:	f6 c1 20             	test   cl,0x20
10001c96:	74 04                	je     10001c9c <swapBits(unsigned long long, unsigned long long, unsigned long long)+0x5e>
10001c98:	89 d0                	mov    eax,edx
10001c9a:	31 d2                	xor    edx,edx
10001c9c:	89 d1                	mov    ecx,edx
10001c9e:	89 c2                	mov    edx,eax
10001ca0:	89 d8                	mov    eax,ebx
10001ca2:	31 d0                	xor    eax,edx
10001ca4:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
10001ca7:	89 f0                	mov    eax,esi
10001ca9:	31 c8                	xor    eax,ecx
10001cab:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
10001cae:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
10001cb1:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
10001cb4:	89 c6                	mov    esi,eax
10001cb6:	83 e6 01             	and    esi,0x1
10001cb9:	89 75 c8             	mov    DWORD PTR [ebp-0x38],esi
10001cbc:	89 d0                	mov    eax,edx
10001cbe:	83 e0 00             	and    eax,0x0
10001cc1:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
10001cc4:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
10001cc7:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
10001cca:	89 c3                	mov    ebx,eax
10001ccc:	80 f7 00             	xor    bh,0x0
10001ccf:	89 5d b8             	mov    DWORD PTR [ebp-0x48],ebx
10001cd2:	89 d0                	mov    eax,edx
10001cd4:	80 f4 00             	xor    ah,0x0
10001cd7:	89 45 bc             	mov    DWORD PTR [ebp-0x44],eax
10001cda:	8b 55 b8             	mov    edx,DWORD PTR [ebp-0x48]
10001cdd:	8b 4d bc             	mov    ecx,DWORD PTR [ebp-0x44]
10001ce0:	89 c8                	mov    eax,ecx
10001ce2:	09 d0                	or     eax,edx
10001ce4:	85 c0                	test   eax,eax
10001ce6:	74 62                	je     10001d4a <swapBits(unsigned long long, unsigned long long, unsigned long long)+0x10c>
10001ce8:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
10001ceb:	b8 01 00 00 00       	mov    eax,0x1
10001cf0:	ba 00 00 00 00       	mov    edx,0x0
10001cf5:	0f a5 c2             	shld   edx,eax,cl
10001cf8:	d3 e0                	shl    eax,cl
10001cfa:	f6 c1 20             	test   cl,0x20
10001cfd:	74 04                	je     10001d03 <swapBits(unsigned long long, unsigned long long, unsigned long long)+0xc5>
10001cff:	89 c2                	mov    edx,eax
10001d01:	31 c0                	xor    eax,eax
10001d03:	89 c3                	mov    ebx,eax
10001d05:	89 d6                	mov    esi,edx
10001d07:	89 d8                	mov    eax,ebx
10001d09:	33 45 f0             	xor    eax,DWORD PTR [ebp-0x10]
10001d0c:	89 45 c0             	mov    DWORD PTR [ebp-0x40],eax
10001d0f:	89 f0                	mov    eax,esi
10001d11:	33 45 f4             	xor    eax,DWORD PTR [ebp-0xc]
10001d14:	89 45 c4             	mov    DWORD PTR [ebp-0x3c],eax
10001d17:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
10001d1a:	b8 01 00 00 00       	mov    eax,0x1
10001d1f:	ba 00 00 00 00       	mov    edx,0x0
10001d24:	0f a5 c2             	shld   edx,eax,cl
10001d27:	d3 e0                	shl    eax,cl
10001d29:	f6 c1 20             	test   cl,0x20
10001d2c:	74 04                	je     10001d32 <swapBits(unsigned long long, unsigned long long, unsigned long long)+0xf4>
10001d2e:	89 c2                	mov    edx,eax
10001d30:	31 c0                	xor    eax,eax
10001d32:	89 c1                	mov    ecx,eax
10001d34:	89 d3                	mov    ebx,edx
10001d36:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
10001d39:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
10001d3c:	89 c6                	mov    esi,eax
10001d3e:	31 ce                	xor    esi,ecx
10001d40:	89 75 d8             	mov    DWORD PTR [ebp-0x28],esi
10001d43:	31 d3                	xor    ebx,edx
10001d45:	89 5d dc             	mov    DWORD PTR [ebp-0x24],ebx
10001d48:	eb 0c                	jmp    10001d56 <swapBits(unsigned long long, unsigned long long, unsigned long long)+0x118>
10001d4a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001d4d:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001d50:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
10001d53:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
10001d56:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10001d59:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
10001d5c:	83 c4 40             	add    esp,0x40
10001d5f:	5b                   	pop    ebx
10001d60:	5e                   	pop    esi
10001d61:	5d                   	pop    ebp
10001d62:	c3                   	ret    

10001d63 <getChecksum(unsigned int)>:
10001d63:	55                   	push   ebp
10001d64:	89 e5                	mov    ebp,esp
10001d66:	56                   	push   esi
10001d67:	53                   	push   ebx
10001d68:	83 ec 20             	sub    esp,0x20
10001d6b:	66 c7 45 f6 49 4e    	mov    WORD PTR [ebp-0xa],0x4e49
10001d71:	66 c7 45 f4 79 6e    	mov    WORD PTR [ebp-0xc],0x6e79
10001d77:	66 c7 45 f2 67 61    	mov    WORD PTR [ebp-0xe],0x6167
10001d7d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001d80:	c1 e8 10             	shr    eax,0x10
10001d83:	89 c1                	mov    ecx,eax
10001d85:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001d88:	89 c2                	mov    edx,eax
10001d8a:	89 d0                	mov    eax,edx
10001d8c:	c1 e0 06             	shl    eax,0x6
10001d8f:	29 d0                	sub    eax,edx
10001d91:	c1 e0 04             	shl    eax,0x4
10001d94:	01 d0                	add    eax,edx
10001d96:	31 c8                	xor    eax,ecx
10001d98:	66 89 45 f0          	mov    WORD PTR [ebp-0x10],ax
10001d9c:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
10001da0:	0f 84 b1 00 00 00    	je     10001e57 <getChecksum(unsigned int)+0xf4>
10001da6:	b8 f4 02 00 00       	mov    eax,0x2f4
10001dab:	ba 00 00 00 00       	mov    edx,0x0
10001db0:	f7 75 08             	div    DWORD PTR [ebp+0x8]
10001db3:	89 c3                	mov    ebx,eax
10001db5:	be 00 00 00 00       	mov    esi,0x0
10001dba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001dbd:	ba 00 00 00 00       	mov    edx,0x0
10001dc2:	6a 1d                	push   0x1d
10001dc4:	6a 05                	push   0x5
10001dc6:	52                   	push   edx
10001dc7:	50                   	push   eax
10001dc8:	e8 fc ff ff ff       	call   10001dc9 <getChecksum(unsigned int)+0x66>	10001dc9: R_386_PC32	ror(unsigned long long, int, int)
10001dcd:	83 c4 10             	add    esp,0x10
10001dd0:	05 52 3f 04 00       	add    eax,0x43f52
10001dd5:	83 d2 00             	adc    edx,0x0
10001dd8:	89 d9                	mov    ecx,ebx
10001dda:	31 c1                	xor    ecx,eax
10001ddc:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
10001ddf:	31 d6                	xor    esi,edx
10001de1:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
10001de4:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
10001de7:	66 8b 45 f6          	mov    ax,WORD PTR [ebp-0xa]
10001deb:	66 0f af c2          	imul   ax,dx
10001def:	66 89 45 f6          	mov    WORD PTR [ebp-0xa],ax
10001df3:	b8 ea 00 00 00       	mov    eax,0xea
10001df8:	ba 00 00 00 00       	mov    edx,0x0
10001dfd:	f7 75 08             	div    DWORD PTR [ebp+0x8]
10001e00:	89 c3                	mov    ebx,eax
10001e02:	be 00 00 00 00       	mov    esi,0x0
10001e07:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001e0a:	ba 00 00 00 00       	mov    edx,0x0
10001e0f:	6a 1f                	push   0x1f
10001e11:	6a 03                	push   0x3
10001e13:	52                   	push   edx
10001e14:	50                   	push   eax
10001e15:	e8 fc ff ff ff       	call   10001e16 <getChecksum(unsigned int)+0xb3>	10001e16: R_386_PC32	ror(unsigned long long, int, int)
10001e1a:	83 c4 10             	add    esp,0x10
10001e1d:	05 05 db 09 00       	add    eax,0x9db05
10001e22:	83 d2 00             	adc    edx,0x0
10001e25:	89 d9                	mov    ecx,ebx
10001e27:	31 c1                	xor    ecx,eax
10001e29:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
10001e2c:	31 d6                	xor    esi,edx
10001e2e:	89 75 dc             	mov    DWORD PTR [ebp-0x24],esi
10001e31:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10001e34:	66 29 45 f4          	sub    WORD PTR [ebp-0xc],ax
10001e38:	66 8b 45 f6          	mov    ax,WORD PTR [ebp-0xa]
10001e3c:	33 45 f4             	xor    eax,DWORD PTR [ebp-0xc]
10001e3f:	25 d2 04 00 00       	and    eax,0x4d2
10001e44:	66 01 45 f2          	add    WORD PTR [ebp-0xe],ax
10001e48:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001e4b:	66 01 45 f2          	add    WORD PTR [ebp-0xe],ax
10001e4f:	d1 6d 08             	shr    DWORD PTR [ebp+0x8],1
10001e52:	e9 45 ff ff ff       	jmp    10001d9c <getChecksum(unsigned int)+0x39>
10001e57:	66 8b 45 f6          	mov    ax,WORD PTR [ebp-0xa]
10001e5b:	33 45 f4             	xor    eax,DWORD PTR [ebp-0xc]
10001e5e:	66 33 45 f2          	xor    ax,WORD PTR [ebp-0xe]
10001e62:	33 45 f0             	xor    eax,DWORD PTR [ebp-0x10]
10001e65:	0f b7 c0             	movzx  eax,ax
10001e68:	25 ff 7f 00 00       	and    eax,0x7fff
10001e6d:	8d 65 f8             	lea    esp,[ebp-0x8]
10001e70:	5b                   	pop    ebx
10001e71:	5e                   	pop    esi
10001e72:	5d                   	pop    ebp
10001e73:	c3                   	ret    

10001e74 <createKey(char*, unsigned int)>:
10001e74:	55                   	push   ebp
10001e75:	89 e5                	mov    ebp,esp
10001e77:	53                   	push   ebx
10001e78:	83 ec 34             	sub    esp,0x34
10001e7b:	68 f0 89 00 10       	push   0x100089f0	10001e7c: R_386_32	.text
10001e80:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001e83:	e8 fc ff ff ff       	call   10001e84 <createKey(char*, unsigned int)+0x10>	10001e84: R_386_PC32	strcpy
10001e88:	83 c4 08             	add    esp,0x8
10001e8b:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
10001e8e:	bb 00 00 00 00       	mov    ebx,0x0
10001e93:	89 c8                	mov    eax,ecx
10001e95:	89 da                	mov    edx,ebx
10001e97:	0f a4 c2 0f          	shld   edx,eax,0xf
10001e9b:	c1 e0 0f             	shl    eax,0xf
10001e9e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10001ea1:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
10001ea4:	83 ec 04             	sub    esp,0x4
10001ea7:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10001eaa:	e8 fc ff ff ff       	call   10001eab <createKey(char*, unsigned int)+0x37>	10001eab: R_386_PC32	getChecksum(unsigned int)
10001eaf:	83 c4 08             	add    esp,0x8
10001eb2:	ba 00 00 00 00       	mov    edx,0x0
10001eb7:	09 45 f0             	or     DWORD PTR [ebp-0x10],eax
10001eba:	09 55 f4             	or     DWORD PTR [ebp-0xc],edx
10001ebd:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
10001ec4:	81 7d ec db 24 00 00 	cmp    DWORD PTR [ebp-0x14],0x24db
10001ecb:	7f 7f                	jg     10001f4c <createKey(char*, unsigned int)+0xd8>
10001ecd:	81 75 f0 95 38 e4 b5 	xor    DWORD PTR [ebp-0x10],0xb5e43895
10001ed4:	83 75 f4 37          	xor    DWORD PTR [ebp-0xc],0x37
10001ed8:	6a 00                	push   0x0
10001eda:	6a 08                	push   0x8
10001edc:	6a 00                	push   0x0
10001ede:	6a 03                	push   0x3
10001ee0:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10001ee3:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10001ee6:	e8 fc ff ff ff       	call   10001ee7 <createKey(char*, unsigned int)+0x73>	10001ee7: R_386_PC32	swapBits(unsigned long long, unsigned long long, unsigned long long)
10001eeb:	83 c4 18             	add    esp,0x18
10001eee:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10001ef1:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
10001ef4:	6a 00                	push   0x0
10001ef6:	6a 0c                	push   0xc
10001ef8:	6a 00                	push   0x0
10001efa:	6a 0d                	push   0xd
10001efc:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10001eff:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10001f02:	e8 fc ff ff ff       	call   10001f03 <createKey(char*, unsigned int)+0x8f>	10001f03: R_386_PC32	swapBits(unsigned long long, unsigned long long, unsigned long long)
10001f07:	83 c4 18             	add    esp,0x18
10001f0a:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10001f0d:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
10001f10:	6a 00                	push   0x0
10001f12:	6a 16                	push   0x16
10001f14:	6a 00                	push   0x0
10001f16:	6a 25                	push   0x25
10001f18:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10001f1b:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10001f1e:	e8 fc ff ff ff       	call   10001f1f <createKey(char*, unsigned int)+0xab>	10001f1f: R_386_PC32	swapBits(unsigned long long, unsigned long long, unsigned long long)
10001f23:	83 c4 18             	add    esp,0x18
10001f26:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10001f29:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
10001f2c:	6a 2a                	push   0x2a
10001f2e:	6a 13                	push   0x13
10001f30:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10001f33:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10001f36:	e8 fc ff ff ff       	call   10001f37 <createKey(char*, unsigned int)+0xc3>	10001f37: R_386_PC32	ror(unsigned long long, int, int)
10001f3b:	83 c4 10             	add    esp,0x10
10001f3e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10001f41:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
10001f44:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
10001f47:	e9 78 ff ff ff       	jmp    10001ec4 <createKey(char*, unsigned int)+0x50>
10001f4c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001f4f:	83 e0 0f             	and    eax,0xf
10001f52:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
10001f55:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001f58:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001f5b:	0f ac d0 04          	shrd   eax,edx,0x4
10001f5f:	c1 ea 04             	shr    edx,0x4
10001f62:	89 c1                	mov    ecx,eax
10001f64:	89 d3                	mov    ebx,edx
10001f66:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
10001f69:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
10001f6c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001f6f:	83 e0 0f             	and    eax,0xf
10001f72:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10001f75:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001f78:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001f7b:	0f ac d0 04          	shrd   eax,edx,0x4
10001f7f:	c1 ea 04             	shr    edx,0x4
10001f82:	89 c1                	mov    ecx,eax
10001f84:	89 d3                	mov    ebx,edx
10001f86:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
10001f89:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
10001f8c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001f8f:	83 e0 0f             	and    eax,0xf
10001f92:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
10001f95:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001f98:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001f9b:	0f ac d0 04          	shrd   eax,edx,0x4
10001f9f:	c1 ea 04             	shr    edx,0x4
10001fa2:	89 c1                	mov    ecx,eax
10001fa4:	89 d3                	mov    ebx,edx
10001fa6:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
10001fa9:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
10001fac:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001faf:	25 ff 03 00 00       	and    eax,0x3ff
10001fb4:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
10001fb7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001fba:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001fbd:	0f ac d0 0a          	shrd   eax,edx,0xa
10001fc1:	c1 ea 0a             	shr    edx,0xa
10001fc4:	89 c1                	mov    ecx,eax
10001fc6:	89 d3                	mov    ebx,edx
10001fc8:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
10001fcb:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
10001fce:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001fd1:	25 ff 03 00 00       	and    eax,0x3ff
10001fd6:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
10001fd9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001fdc:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001fdf:	0f ac d0 0a          	shrd   eax,edx,0xa
10001fe3:	c1 ea 0a             	shr    edx,0xa
10001fe6:	89 c1                	mov    ecx,eax
10001fe8:	89 d3                	mov    ebx,edx
10001fea:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
10001fed:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
10001ff0:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001ff3:	25 ff 03 00 00       	and    eax,0x3ff
10001ff8:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
10001ffb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001ffe:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10002001:	0f ac d0 0a          	shrd   eax,edx,0xa
10002005:	c1 ea 0a             	shr    edx,0xa
10002008:	89 c1                	mov    ecx,eax
1000200a:	89 d3                	mov    ebx,edx
1000200c:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
1000200f:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
10002012:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
10002015:	05 00 00 00 00       	add    eax,0x0	10002016: R_386_32	lookupA
1000201a:	8a 10                	mov    dl,BYTE PTR [eax]
1000201c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000201f:	88 10                	mov    BYTE PTR [eax],dl
10002021:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002024:	8d 50 01             	lea    edx,[eax+0x1]
10002027:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
1000202a:	05 00 00 00 00       	add    eax,0x0	1000202b: R_386_32	lookupA
1000202f:	8a 00                	mov    al,BYTE PTR [eax]
10002031:	88 02                	mov    BYTE PTR [edx],al
10002033:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002036:	8d 50 0f             	lea    edx,[eax+0xf]
10002039:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
1000203c:	05 00 00 00 00       	add    eax,0x0	1000203d: R_386_32	lookupA
10002041:	8a 00                	mov    al,BYTE PTR [eax]
10002043:	88 02                	mov    BYTE PTR [edx],al
10002045:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
10002048:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
1000204d:	f7 e9                	imul   ecx
1000204f:	c1 fa 05             	sar    edx,0x5
10002052:	89 c8                	mov    eax,ecx
10002054:	c1 f8 1f             	sar    eax,0x1f
10002057:	29 c2                	sub    edx,eax
10002059:	89 d0                	mov    eax,edx
1000205b:	b9 0a 00 00 00       	mov    ecx,0xa
10002060:	99                   	cdq    
10002061:	f7 f9                	idiv   ecx
10002063:	89 d0                	mov    eax,edx
10002065:	8d 50 30             	lea    edx,[eax+0x30]
10002068:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000206b:	83 c0 03             	add    eax,0x3
1000206e:	88 10                	mov    BYTE PTR [eax],dl
10002070:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
10002073:	b8 67 66 66 66       	mov    eax,0x66666667
10002078:	f7 e9                	imul   ecx
1000207a:	c1 fa 02             	sar    edx,0x2
1000207d:	89 c8                	mov    eax,ecx
1000207f:	c1 f8 1f             	sar    eax,0x1f
10002082:	89 d1                	mov    ecx,edx
10002084:	29 c1                	sub    ecx,eax
10002086:	b8 67 66 66 66       	mov    eax,0x66666667
1000208b:	f7 e9                	imul   ecx
1000208d:	c1 fa 02             	sar    edx,0x2
10002090:	89 c8                	mov    eax,ecx
10002092:	c1 f8 1f             	sar    eax,0x1f
10002095:	29 c2                	sub    edx,eax
10002097:	89 d0                	mov    eax,edx
10002099:	c1 e0 02             	shl    eax,0x2
1000209c:	01 d0                	add    eax,edx
1000209e:	01 c0                	add    eax,eax
100020a0:	29 c1                	sub    ecx,eax
100020a2:	89 ca                	mov    edx,ecx
100020a4:	88 d0                	mov    al,dl
100020a6:	8d 50 30             	lea    edx,[eax+0x30]
100020a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100020ac:	83 c0 04             	add    eax,0x4
100020af:	88 10                	mov    BYTE PTR [eax],dl
100020b1:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
100020b4:	b9 0a 00 00 00       	mov    ecx,0xa
100020b9:	99                   	cdq    
100020ba:	f7 f9                	idiv   ecx
100020bc:	89 d0                	mov    eax,edx
100020be:	8d 50 30             	lea    edx,[eax+0x30]
100020c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100020c4:	83 c0 05             	add    eax,0x5
100020c7:	88 10                	mov    BYTE PTR [eax],dl
100020c9:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
100020cc:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
100020d1:	f7 e9                	imul   ecx
100020d3:	c1 fa 05             	sar    edx,0x5
100020d6:	89 c8                	mov    eax,ecx
100020d8:	c1 f8 1f             	sar    eax,0x1f
100020db:	29 c2                	sub    edx,eax
100020dd:	89 d0                	mov    eax,edx
100020df:	b9 0a 00 00 00       	mov    ecx,0xa
100020e4:	99                   	cdq    
100020e5:	f7 f9                	idiv   ecx
100020e7:	89 d0                	mov    eax,edx
100020e9:	8d 50 30             	lea    edx,[eax+0x30]
100020ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100020ef:	83 c0 07             	add    eax,0x7
100020f2:	88 10                	mov    BYTE PTR [eax],dl
100020f4:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
100020f7:	b8 67 66 66 66       	mov    eax,0x66666667
100020fc:	f7 e9                	imul   ecx
100020fe:	c1 fa 02             	sar    edx,0x2
10002101:	89 c8                	mov    eax,ecx
10002103:	c1 f8 1f             	sar    eax,0x1f
10002106:	89 d1                	mov    ecx,edx
10002108:	29 c1                	sub    ecx,eax
1000210a:	b8 67 66 66 66       	mov    eax,0x66666667
1000210f:	f7 e9                	imul   ecx
10002111:	c1 fa 02             	sar    edx,0x2
10002114:	89 c8                	mov    eax,ecx
10002116:	c1 f8 1f             	sar    eax,0x1f
10002119:	29 c2                	sub    edx,eax
1000211b:	89 d0                	mov    eax,edx
1000211d:	c1 e0 02             	shl    eax,0x2
10002120:	01 d0                	add    eax,edx
10002122:	01 c0                	add    eax,eax
10002124:	29 c1                	sub    ecx,eax
10002126:	89 ca                	mov    edx,ecx
10002128:	88 d0                	mov    al,dl
1000212a:	8d 50 30             	lea    edx,[eax+0x30]
1000212d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002130:	83 c0 08             	add    eax,0x8
10002133:	88 10                	mov    BYTE PTR [eax],dl
10002135:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10002138:	b9 0a 00 00 00       	mov    ecx,0xa
1000213d:	99                   	cdq    
1000213e:	f7 f9                	idiv   ecx
10002140:	89 d0                	mov    eax,edx
10002142:	8d 50 30             	lea    edx,[eax+0x30]
10002145:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002148:	83 c0 09             	add    eax,0x9
1000214b:	88 10                	mov    BYTE PTR [eax],dl
1000214d:	8b 4d d4             	mov    ecx,DWORD PTR [ebp-0x2c]
10002150:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
10002155:	f7 e9                	imul   ecx
10002157:	c1 fa 05             	sar    edx,0x5
1000215a:	89 c8                	mov    eax,ecx
1000215c:	c1 f8 1f             	sar    eax,0x1f
1000215f:	29 c2                	sub    edx,eax
10002161:	89 d0                	mov    eax,edx
10002163:	b9 0a 00 00 00       	mov    ecx,0xa
10002168:	99                   	cdq    
10002169:	f7 f9                	idiv   ecx
1000216b:	89 d0                	mov    eax,edx
1000216d:	8d 50 30             	lea    edx,[eax+0x30]
10002170:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002173:	83 c0 0b             	add    eax,0xb
10002176:	88 10                	mov    BYTE PTR [eax],dl
10002178:	8b 4d d4             	mov    ecx,DWORD PTR [ebp-0x2c]
1000217b:	b8 67 66 66 66       	mov    eax,0x66666667
10002180:	f7 e9                	imul   ecx
10002182:	c1 fa 02             	sar    edx,0x2
10002185:	89 c8                	mov    eax,ecx
10002187:	c1 f8 1f             	sar    eax,0x1f
1000218a:	89 d1                	mov    ecx,edx
1000218c:	29 c1                	sub    ecx,eax
1000218e:	b8 67 66 66 66       	mov    eax,0x66666667
10002193:	f7 e9                	imul   ecx
10002195:	c1 fa 02             	sar    edx,0x2
10002198:	89 c8                	mov    eax,ecx
1000219a:	c1 f8 1f             	sar    eax,0x1f
1000219d:	29 c2                	sub    edx,eax
1000219f:	89 d0                	mov    eax,edx
100021a1:	c1 e0 02             	shl    eax,0x2
100021a4:	01 d0                	add    eax,edx
100021a6:	01 c0                	add    eax,eax
100021a8:	29 c1                	sub    ecx,eax
100021aa:	89 ca                	mov    edx,ecx
100021ac:	88 d0                	mov    al,dl
100021ae:	8d 50 30             	lea    edx,[eax+0x30]
100021b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100021b4:	83 c0 0c             	add    eax,0xc
100021b7:	88 10                	mov    BYTE PTR [eax],dl
100021b9:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
100021bc:	b9 0a 00 00 00       	mov    ecx,0xa
100021c1:	99                   	cdq    
100021c2:	f7 f9                	idiv   ecx
100021c4:	89 d0                	mov    eax,edx
100021c6:	8d 50 30             	lea    edx,[eax+0x30]
100021c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100021cc:	83 c0 0d             	add    eax,0xd
100021cf:	88 10                	mov    BYTE PTR [eax],dl
100021d1:	90                   	nop
100021d2:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
100021d5:	c9                   	leave  
100021d6:	c3                   	ret    

100021d7 <retrieveBits(char*)>:
100021d7:	55                   	push   ebp
100021d8:	89 e5                	mov    ebp,esp
100021da:	57                   	push   edi
100021db:	56                   	push   esi
100021dc:	53                   	push   ebx
100021dd:	83 ec 4c             	sub    esp,0x4c
100021e0:	c7 45 ec ff ff ff ff 	mov    DWORD PTR [ebp-0x14],0xffffffff
100021e7:	c7 45 e8 ff ff ff ff 	mov    DWORD PTR [ebp-0x18],0xffffffff
100021ee:	c7 45 e4 ff ff ff ff 	mov    DWORD PTR [ebp-0x1c],0xffffffff
100021f5:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
100021fc:	83 7d e0 0f          	cmp    DWORD PTR [ebp-0x20],0xf
10002200:	7f 54                	jg     10002256 <retrieveBits(char*)+0x7f>
10002202:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10002205:	05 00 00 00 00       	add    eax,0x0	10002206: R_386_32	lookupA
1000220a:	8a 10                	mov    dl,BYTE PTR [eax]
1000220c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000220f:	8a 00                	mov    al,BYTE PTR [eax]
10002211:	38 c2                	cmp    dl,al
10002213:	75 06                	jne    1000221b <retrieveBits(char*)+0x44>
10002215:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10002218:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
1000221b:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
1000221e:	05 00 00 00 00       	add    eax,0x0	1000221f: R_386_32	lookupB
10002223:	8a 10                	mov    dl,BYTE PTR [eax]
10002225:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002228:	40                   	inc    eax
10002229:	8a 00                	mov    al,BYTE PTR [eax]
1000222b:	38 c2                	cmp    dl,al
1000222d:	75 06                	jne    10002235 <retrieveBits(char*)+0x5e>
1000222f:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10002232:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
10002235:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10002238:	05 00 00 00 00       	add    eax,0x0	10002239: R_386_32	lookupC
1000223d:	8a 10                	mov    dl,BYTE PTR [eax]
1000223f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002242:	83 c0 0f             	add    eax,0xf
10002245:	8a 00                	mov    al,BYTE PTR [eax]
10002247:	38 c2                	cmp    dl,al
10002249:	75 06                	jne    10002251 <retrieveBits(char*)+0x7a>
1000224b:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
1000224e:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10002251:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
10002254:	eb a6                	jmp    100021fc <retrieveBits(char*)+0x25>
10002256:	83 7d ec ff          	cmp    DWORD PTR [ebp-0x14],0xffffffff
1000225a:	74 0c                	je     10002268 <retrieveBits(char*)+0x91>
1000225c:	83 7d e8 ff          	cmp    DWORD PTR [ebp-0x18],0xffffffff
10002260:	74 06                	je     10002268 <retrieveBits(char*)+0x91>
10002262:	83 7d e4 ff          	cmp    DWORD PTR [ebp-0x1c],0xffffffff
10002266:	75 0f                	jne    10002277 <retrieveBits(char*)+0xa0>
10002268:	b8 00 00 00 00       	mov    eax,0x0
1000226d:	ba 00 00 00 00       	mov    edx,0x0
10002272:	e9 02 02 00 00       	jmp    10002479 <retrieveBits(char*)+0x2a2>
10002277:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000227a:	83 c0 03             	add    eax,0x3
1000227d:	8a 00                	mov    al,BYTE PTR [eax]
1000227f:	0f be c0             	movsx  eax,al
10002282:	8d 50 d0             	lea    edx,[eax-0x30]
10002285:	89 d0                	mov    eax,edx
10002287:	c1 e0 02             	shl    eax,0x2
1000228a:	01 d0                	add    eax,edx
1000228c:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10002293:	01 d0                	add    eax,edx
10002295:	c1 e0 02             	shl    eax,0x2
10002298:	89 c6                	mov    esi,eax
1000229a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000229d:	83 c0 04             	add    eax,0x4
100022a0:	8a 00                	mov    al,BYTE PTR [eax]
100022a2:	0f be c0             	movsx  eax,al
100022a5:	8d 50 d0             	lea    edx,[eax-0x30]
100022a8:	89 d0                	mov    eax,edx
100022aa:	c1 e0 02             	shl    eax,0x2
100022ad:	01 d0                	add    eax,edx
100022af:	01 c0                	add    eax,eax
100022b1:	8d 14 06             	lea    edx,[esi+eax*1]
100022b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100022b7:	83 c0 05             	add    eax,0x5
100022ba:	8a 00                	mov    al,BYTE PTR [eax]
100022bc:	0f be c0             	movsx  eax,al
100022bf:	83 e8 30             	sub    eax,0x30
100022c2:	01 d0                	add    eax,edx
100022c4:	99                   	cdq    
100022c5:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
100022c8:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
100022cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100022ce:	83 c0 07             	add    eax,0x7
100022d1:	8a 00                	mov    al,BYTE PTR [eax]
100022d3:	0f be c0             	movsx  eax,al
100022d6:	8d 50 d0             	lea    edx,[eax-0x30]
100022d9:	89 d0                	mov    eax,edx
100022db:	c1 e0 02             	shl    eax,0x2
100022de:	01 d0                	add    eax,edx
100022e0:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
100022e7:	01 d0                	add    eax,edx
100022e9:	c1 e0 02             	shl    eax,0x2
100022ec:	89 c6                	mov    esi,eax
100022ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100022f1:	83 c0 08             	add    eax,0x8
100022f4:	8a 00                	mov    al,BYTE PTR [eax]
100022f6:	0f be c0             	movsx  eax,al
100022f9:	8d 50 d0             	lea    edx,[eax-0x30]
100022fc:	89 d0                	mov    eax,edx
100022fe:	c1 e0 02             	shl    eax,0x2
10002301:	01 d0                	add    eax,edx
10002303:	01 c0                	add    eax,eax
10002305:	8d 14 06             	lea    edx,[esi+eax*1]
10002308:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000230b:	83 c0 09             	add    eax,0x9
1000230e:	8a 00                	mov    al,BYTE PTR [eax]
10002310:	0f be c0             	movsx  eax,al
10002313:	83 e8 30             	sub    eax,0x30
10002316:	01 d0                	add    eax,edx
10002318:	99                   	cdq    
10002319:	89 45 c0             	mov    DWORD PTR [ebp-0x40],eax
1000231c:	89 55 c4             	mov    DWORD PTR [ebp-0x3c],edx
1000231f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002322:	83 c0 0b             	add    eax,0xb
10002325:	8a 00                	mov    al,BYTE PTR [eax]
10002327:	0f be c0             	movsx  eax,al
1000232a:	8d 50 d0             	lea    edx,[eax-0x30]
1000232d:	89 d0                	mov    eax,edx
1000232f:	c1 e0 02             	shl    eax,0x2
10002332:	01 d0                	add    eax,edx
10002334:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
1000233b:	01 d0                	add    eax,edx
1000233d:	c1 e0 02             	shl    eax,0x2
10002340:	89 c6                	mov    esi,eax
10002342:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002345:	83 c0 0c             	add    eax,0xc
10002348:	8a 00                	mov    al,BYTE PTR [eax]
1000234a:	0f be c0             	movsx  eax,al
1000234d:	8d 50 d0             	lea    edx,[eax-0x30]
10002350:	89 d0                	mov    eax,edx
10002352:	c1 e0 02             	shl    eax,0x2
10002355:	01 d0                	add    eax,edx
10002357:	01 c0                	add    eax,eax
10002359:	8d 14 06             	lea    edx,[esi+eax*1]
1000235c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000235f:	83 c0 0d             	add    eax,0xd
10002362:	8a 00                	mov    al,BYTE PTR [eax]
10002364:	0f be c0             	movsx  eax,al
10002367:	83 e8 30             	sub    eax,0x30
1000236a:	01 d0                	add    eax,edx
1000236c:	99                   	cdq    
1000236d:	89 45 b8             	mov    DWORD PTR [ebp-0x48],eax
10002370:	89 55 bc             	mov    DWORD PTR [ebp-0x44],edx
10002373:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
10002376:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
10002379:	0f a4 c2 0a          	shld   edx,eax,0xa
1000237d:	c1 e0 0a             	shl    eax,0xa
10002380:	89 c6                	mov    esi,eax
10002382:	89 d7                	mov    edi,edx
10002384:	89 f0                	mov    eax,esi
10002386:	0b 45 c8             	or     eax,DWORD PTR [ebp-0x38]
10002389:	89 c1                	mov    ecx,eax
1000238b:	89 f8                	mov    eax,edi
1000238d:	0b 45 cc             	or     eax,DWORD PTR [ebp-0x34]
10002390:	89 c3                	mov    ebx,eax
10002392:	8b 45 b8             	mov    eax,DWORD PTR [ebp-0x48]
10002395:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
10002398:	0f a4 c2 14          	shld   edx,eax,0x14
1000239c:	c1 e0 14             	shl    eax,0x14
1000239f:	89 ce                	mov    esi,ecx
100023a1:	89 45 a8             	mov    DWORD PTR [ebp-0x58],eax
100023a4:	89 55 ac             	mov    DWORD PTR [ebp-0x54],edx
100023a7:	0b 75 a8             	or     esi,DWORD PTR [ebp-0x58]
100023aa:	89 75 d8             	mov    DWORD PTR [ebp-0x28],esi
100023ad:	89 d8                	mov    eax,ebx
100023af:	0b 45 ac             	or     eax,DWORD PTR [ebp-0x54]
100023b2:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
100023b5:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
100023b8:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
100023bb:	0f a4 c2 0c          	shld   edx,eax,0xc
100023bf:	c1 e0 0c             	shl    eax,0xc
100023c2:	89 c3                	mov    ebx,eax
100023c4:	89 d6                	mov    esi,edx
100023c6:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
100023c9:	89 75 dc             	mov    DWORD PTR [ebp-0x24],esi
100023cc:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
100023cf:	c1 e0 04             	shl    eax,0x4
100023d2:	0b 45 ec             	or     eax,DWORD PTR [ebp-0x14]
100023d5:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
100023d8:	c1 e2 08             	shl    edx,0x8
100023db:	09 d0                	or     eax,edx
100023dd:	99                   	cdq    
100023de:	09 45 d8             	or     DWORD PTR [ebp-0x28],eax
100023e1:	09 55 dc             	or     DWORD PTR [ebp-0x24],edx
100023e4:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
100023eb:	81 7d d4 db 24 00 00 	cmp    DWORD PTR [ebp-0x2c],0x24db
100023f2:	7f 7f                	jg     10002473 <retrieveBits(char*)+0x29c>
100023f4:	6a 2a                	push   0x2a
100023f6:	6a 13                	push   0x13
100023f8:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
100023fb:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
100023fe:	e8 fc ff ff ff       	call   100023ff <retrieveBits(char*)+0x228>	100023ff: R_386_PC32	ror(unsigned long long, int, int)
10002403:	83 c4 10             	add    esp,0x10
10002406:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
10002409:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
1000240c:	6a 00                	push   0x0
1000240e:	6a 08                	push   0x8
10002410:	6a 00                	push   0x0
10002412:	6a 03                	push   0x3
10002414:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
10002417:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
1000241a:	e8 fc ff ff ff       	call   1000241b <retrieveBits(char*)+0x244>	1000241b: R_386_PC32	swapBits(unsigned long long, unsigned long long, unsigned long long)
1000241f:	83 c4 18             	add    esp,0x18
10002422:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
10002425:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
10002428:	6a 00                	push   0x0
1000242a:	6a 0c                	push   0xc
1000242c:	6a 00                	push   0x0
1000242e:	6a 0d                	push   0xd
10002430:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
10002433:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10002436:	e8 fc ff ff ff       	call   10002437 <retrieveBits(char*)+0x260>	10002437: R_386_PC32	swapBits(unsigned long long, unsigned long long, unsigned long long)
1000243b:	83 c4 18             	add    esp,0x18
1000243e:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
10002441:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
10002444:	6a 00                	push   0x0
10002446:	6a 16                	push   0x16
10002448:	6a 00                	push   0x0
1000244a:	6a 25                	push   0x25
1000244c:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
1000244f:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10002452:	e8 fc ff ff ff       	call   10002453 <retrieveBits(char*)+0x27c>	10002453: R_386_PC32	swapBits(unsigned long long, unsigned long long, unsigned long long)
10002457:	83 c4 18             	add    esp,0x18
1000245a:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
1000245d:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
10002460:	81 75 d8 95 38 e4 b5 	xor    DWORD PTR [ebp-0x28],0xb5e43895
10002467:	83 75 dc 37          	xor    DWORD PTR [ebp-0x24],0x37
1000246b:	ff 45 d4             	inc    DWORD PTR [ebp-0x2c]
1000246e:	e9 78 ff ff ff       	jmp    100023eb <retrieveBits(char*)+0x214>
10002473:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10002476:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
10002479:	8d 65 f4             	lea    esp,[ebp-0xc]
1000247c:	5b                   	pop    ebx
1000247d:	5e                   	pop    esi
1000247e:	5f                   	pop    edi
1000247f:	5d                   	pop    ebp
10002480:	c3                   	ret    

10002481 <checkKey(char*)>:
10002481:	55                   	push   ebp
10002482:	89 e5                	mov    ebp,esp
10002484:	53                   	push   ebx
10002485:	83 ec 14             	sub    esp,0x14
10002488:	83 ec 04             	sub    esp,0x4
1000248b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000248e:	e8 fc ff ff ff       	call   1000248f <checkKey(char*)+0xe>	1000248f: R_386_PC32	retrieveBits(char*)
10002493:	83 c4 08             	add    esp,0x8
10002496:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10002499:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
1000249c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
1000249f:	25 ff 7f 00 00       	and    eax,0x7fff
100024a4:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
100024a7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100024aa:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
100024ad:	0f ac d0 0f          	shrd   eax,edx,0xf
100024b1:	c1 ea 0f             	shr    edx,0xf
100024b4:	89 c1                	mov    ecx,eax
100024b6:	89 d3                	mov    ebx,edx
100024b8:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
100024bb:	83 ec 04             	sub    esp,0x4
100024be:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
100024c1:	e8 fc ff ff ff       	call   100024c2 <checkKey(char*)+0x41>	100024c2: R_386_PC32	getChecksum(unsigned int)
100024c6:	83 c4 08             	add    esp,0x8
100024c9:	39 45 ec             	cmp    DWORD PTR [ebp-0x14],eax
100024cc:	0f 95 c0             	setne  al
100024cf:	84 c0                	test   al,al
100024d1:	74 07                	je     100024da <checkKey(char*)+0x59>
100024d3:	b8 00 00 00 00       	mov    eax,0x0
100024d8:	eb 06                	jmp    100024e0 <checkKey(char*)+0x5f>
100024da:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100024dd:	83 e0 07             	and    eax,0x7
100024e0:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
100024e3:	c9                   	leave  
100024e4:	c3                   	ret    

100024e5 <changeKeyType(char*, int)>:
100024e5:	55                   	push   ebp
100024e6:	89 e5                	mov    ebp,esp
100024e8:	83 ec 10             	sub    esp,0x10
100024eb:	83 ec 04             	sub    esp,0x4
100024ee:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100024f1:	e8 fc ff ff ff       	call   100024f2 <changeKeyType(char*, int)+0xd>	100024f2: R_386_PC32	retrieveBits(char*)
100024f6:	83 c4 08             	add    esp,0x8
100024f9:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
100024fc:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
100024ff:	83 65 f8 f8          	and    DWORD PTR [ebp-0x8],0xfffffff8
10002503:	83 65 fc ff          	and    DWORD PTR [ebp-0x4],0xffffffff
10002507:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
1000250a:	99                   	cdq    
1000250b:	09 45 f8             	or     DWORD PTR [ebp-0x8],eax
1000250e:	09 55 fc             	or     DWORD PTR [ebp-0x4],edx
10002511:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
10002514:	50                   	push   eax
10002515:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002518:	e8 fc ff ff ff       	call   10002519 <changeKeyType(char*, int)+0x34>	10002519: R_386_PC32	createKey(char*, unsigned int)
1000251d:	83 c4 08             	add    esp,0x8
10002520:	83 ec 04             	sub    esp,0x4
10002523:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002526:	e8 fc ff ff ff       	call   10002527 <changeKeyType(char*, int)+0x42>	10002527: R_386_PC32	checkKey(char*)
1000252b:	83 c4 08             	add    esp,0x8
1000252e:	85 c0                	test   eax,eax
10002530:	0f 95 c0             	setne  al
10002533:	c9                   	leave  
10002534:	c3                   	ret    

10002535 <checkExtendedKey(char*)>:
10002535:	55                   	push   ebp
10002536:	89 e5                	mov    ebp,esp
10002538:	83 ec 20             	sub    esp,0x20
1000253b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000253e:	8a 00                	mov    al,BYTE PTR [eax]
10002540:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
10002543:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002546:	8a 40 01             	mov    al,BYTE PTR [eax+0x1]
10002549:	88 45 ed             	mov    BYTE PTR [ebp-0x13],al
1000254c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000254f:	8a 40 02             	mov    al,BYTE PTR [eax+0x2]
10002552:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
10002555:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002558:	8a 40 03             	mov    al,BYTE PTR [eax+0x3]
1000255b:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
1000255e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002561:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
10002564:	88 45 f0             	mov    BYTE PTR [ebp-0x10],al
10002567:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000256a:	8a 40 05             	mov    al,BYTE PTR [eax+0x5]
1000256d:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
10002570:	c6 45 f2 2d          	mov    BYTE PTR [ebp-0xe],0x2d
10002574:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002577:	8a 40 06             	mov    al,BYTE PTR [eax+0x6]
1000257a:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
1000257d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002580:	8a 40 07             	mov    al,BYTE PTR [eax+0x7]
10002583:	88 45 f4             	mov    BYTE PTR [ebp-0xc],al
10002586:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002589:	8a 40 09             	mov    al,BYTE PTR [eax+0x9]
1000258c:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
1000258f:	c6 45 f6 2d          	mov    BYTE PTR [ebp-0xa],0x2d
10002593:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002596:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
10002599:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
1000259c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000259f:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
100025a2:	88 45 f8             	mov    BYTE PTR [ebp-0x8],al
100025a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100025a8:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
100025ab:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
100025ae:	c6 45 fa 2d          	mov    BYTE PTR [ebp-0x6],0x2d
100025b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100025b5:	8a 40 0f             	mov    al,BYTE PTR [eax+0xf]
100025b8:	88 45 fb             	mov    BYTE PTR [ebp-0x5],al
100025bb:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
100025be:	48                   	dec    eax
100025bf:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
100025c2:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
100025c5:	3c 2f                	cmp    al,0x2f
100025c7:	75 04                	jne    100025cd <checkExtendedKey(char*)+0x98>
100025c9:	c6 45 ef 39          	mov    BYTE PTR [ebp-0x11],0x39
100025cd:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
100025d0:	48                   	dec    eax
100025d1:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
100025d4:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
100025d7:	3c 2f                	cmp    al,0x2f
100025d9:	75 04                	jne    100025df <checkExtendedKey(char*)+0xaa>
100025db:	c6 45 f5 39          	mov    BYTE PTR [ebp-0xb],0x39
100025df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100025e2:	83 c0 0d             	add    eax,0xd
100025e5:	8a 10                	mov    dl,BYTE PTR [eax]
100025e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100025ea:	83 c0 0c             	add    eax,0xc
100025ed:	8a 00                	mov    al,BYTE PTR [eax]
100025ef:	38 c2                	cmp    dl,al
100025f1:	74 0a                	je     100025fd <checkExtendedKey(char*)+0xc8>
100025f3:	b8 00 00 00 00       	mov    eax,0x0
100025f8:	e9 d6 00 00 00       	jmp    100026d3 <checkExtendedKey(char*)+0x19e>
100025fd:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
10002600:	3c 2f                	cmp    al,0x2f
10002602:	7e 07                	jle    1000260b <checkExtendedKey(char*)+0xd6>
10002604:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
10002607:	3c 39                	cmp    al,0x39
10002609:	7e 0a                	jle    10002615 <checkExtendedKey(char*)+0xe0>
1000260b:	b8 00 00 00 00       	mov    eax,0x0
10002610:	e9 be 00 00 00       	jmp    100026d3 <checkExtendedKey(char*)+0x19e>
10002615:	8a 45 f0             	mov    al,BYTE PTR [ebp-0x10]
10002618:	3c 2f                	cmp    al,0x2f
1000261a:	7e 07                	jle    10002623 <checkExtendedKey(char*)+0xee>
1000261c:	8a 45 f0             	mov    al,BYTE PTR [ebp-0x10]
1000261f:	3c 39                	cmp    al,0x39
10002621:	7e 0a                	jle    1000262d <checkExtendedKey(char*)+0xf8>
10002623:	b8 00 00 00 00       	mov    eax,0x0
10002628:	e9 a6 00 00 00       	jmp    100026d3 <checkExtendedKey(char*)+0x19e>
1000262d:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
10002630:	3c 2f                	cmp    al,0x2f
10002632:	7e 07                	jle    1000263b <checkExtendedKey(char*)+0x106>
10002634:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
10002637:	3c 39                	cmp    al,0x39
10002639:	7e 0a                	jle    10002645 <checkExtendedKey(char*)+0x110>
1000263b:	b8 00 00 00 00       	mov    eax,0x0
10002640:	e9 8e 00 00 00       	jmp    100026d3 <checkExtendedKey(char*)+0x19e>
10002645:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
10002648:	3c 2f                	cmp    al,0x2f
1000264a:	7e 07                	jle    10002653 <checkExtendedKey(char*)+0x11e>
1000264c:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
1000264f:	3c 39                	cmp    al,0x39
10002651:	7e 07                	jle    1000265a <checkExtendedKey(char*)+0x125>
10002653:	b8 00 00 00 00       	mov    eax,0x0
10002658:	eb 79                	jmp    100026d3 <checkExtendedKey(char*)+0x19e>
1000265a:	8a 45 f4             	mov    al,BYTE PTR [ebp-0xc]
1000265d:	3c 2f                	cmp    al,0x2f
1000265f:	7e 07                	jle    10002668 <checkExtendedKey(char*)+0x133>
10002661:	8a 45 f4             	mov    al,BYTE PTR [ebp-0xc]
10002664:	3c 39                	cmp    al,0x39
10002666:	7e 07                	jle    1000266f <checkExtendedKey(char*)+0x13a>
10002668:	b8 00 00 00 00       	mov    eax,0x0
1000266d:	eb 64                	jmp    100026d3 <checkExtendedKey(char*)+0x19e>
1000266f:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
10002672:	3c 2f                	cmp    al,0x2f
10002674:	7e 07                	jle    1000267d <checkExtendedKey(char*)+0x148>
10002676:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
10002679:	3c 39                	cmp    al,0x39
1000267b:	7e 07                	jle    10002684 <checkExtendedKey(char*)+0x14f>
1000267d:	b8 00 00 00 00       	mov    eax,0x0
10002682:	eb 4f                	jmp    100026d3 <checkExtendedKey(char*)+0x19e>
10002684:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
10002687:	3c 2f                	cmp    al,0x2f
10002689:	7e 07                	jle    10002692 <checkExtendedKey(char*)+0x15d>
1000268b:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
1000268e:	3c 39                	cmp    al,0x39
10002690:	7e 07                	jle    10002699 <checkExtendedKey(char*)+0x164>
10002692:	b8 00 00 00 00       	mov    eax,0x0
10002697:	eb 3a                	jmp    100026d3 <checkExtendedKey(char*)+0x19e>
10002699:	8a 45 f8             	mov    al,BYTE PTR [ebp-0x8]
1000269c:	3c 2f                	cmp    al,0x2f
1000269e:	7e 07                	jle    100026a7 <checkExtendedKey(char*)+0x172>
100026a0:	8a 45 f8             	mov    al,BYTE PTR [ebp-0x8]
100026a3:	3c 39                	cmp    al,0x39
100026a5:	7e 07                	jle    100026ae <checkExtendedKey(char*)+0x179>
100026a7:	b8 00 00 00 00       	mov    eax,0x0
100026ac:	eb 25                	jmp    100026d3 <checkExtendedKey(char*)+0x19e>
100026ae:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
100026b1:	3c 2f                	cmp    al,0x2f
100026b3:	7e 07                	jle    100026bc <checkExtendedKey(char*)+0x187>
100026b5:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
100026b8:	3c 39                	cmp    al,0x39
100026ba:	7e 07                	jle    100026c3 <checkExtendedKey(char*)+0x18e>
100026bc:	b8 00 00 00 00       	mov    eax,0x0
100026c1:	eb 10                	jmp    100026d3 <checkExtendedKey(char*)+0x19e>
100026c3:	83 ec 04             	sub    esp,0x4
100026c6:	8d 45 ec             	lea    eax,[ebp-0x14]
100026c9:	50                   	push   eax
100026ca:	e8 fc ff ff ff       	call   100026cb <checkExtendedKey(char*)+0x196>	100026cb: R_386_PC32	checkKey(char*)
100026cf:	83 c4 08             	add    esp,0x8
100026d2:	90                   	nop
100026d3:	c9                   	leave  
100026d4:	c3                   	ret    

100026d5 <loadTimezoneStrings()>:
100026d5:	55                   	push   ebp
100026d6:	89 e5                	mov    ebp,esp
100026d8:	53                   	push   ebx
100026d9:	83 ec 34             	sub    esp,0x34
100026dc:	83 ec 0c             	sub    esp,0xc
100026df:	68 14 01 00 00       	push   0x114
100026e4:	e8 fc ff ff ff       	call   100026e5 <loadTimezoneStrings()+0x10>	100026e5: R_386_PC32	operator new(unsigned long)
100026e9:	83 c4 10             	add    esp,0x10
100026ec:	89 c3                	mov    ebx,eax
100026ee:	a1 00 00 00 00       	mov    eax,ds:0x0	100026ef: R_386_32	kernelProcess
100026f3:	83 ec 04             	sub    esp,0x4
100026f6:	50                   	push   eax
100026f7:	68 04 8a 00 10       	push   0x10008a04	100026f8: R_386_32	.text
100026fc:	53                   	push   ebx
100026fd:	e8 fc ff ff ff       	call   100026fe <loadTimezoneStrings()+0x29>	100026fe: R_386_PC32	File::File(char const*, Process*)
10002702:	83 c4 10             	add    esp,0x10
10002705:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
10002708:	83 ec 08             	sub    esp,0x8
1000270b:	6a 01                	push   0x1
1000270d:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
10002710:	e8 fc ff ff ff       	call   10002711 <loadTimezoneStrings()+0x3c>	10002711: R_386_PC32	File::open(FileOpenMode)
10002715:	83 c4 10             	add    esp,0x10
10002718:	83 ec 04             	sub    esp,0x4
1000271b:	8d 45 d7             	lea    eax,[ebp-0x29]
1000271e:	50                   	push   eax
1000271f:	8d 45 d8             	lea    eax,[ebp-0x28]
10002722:	50                   	push   eax
10002723:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
10002726:	e8 fc ff ff ff       	call   10002727 <loadTimezoneStrings()+0x52>	10002727: R_386_PC32	File::stat(unsigned long long*, bool*)
1000272b:	83 c4 10             	add    esp,0x10
1000272e:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10002731:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
10002734:	83 ec 0c             	sub    esp,0xc
10002737:	50                   	push   eax
10002738:	e8 fc ff ff ff       	call   10002739 <loadTimezoneStrings()+0x64>	10002739: R_386_PC32	malloc
1000273d:	83 c4 10             	add    esp,0x10
10002740:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
10002743:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10002746:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
10002749:	83 ec 04             	sub    esp,0x4
1000274c:	50                   	push   eax
1000274d:	6a 00                	push   0x0
1000274f:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
10002752:	e8 fc ff ff ff       	call   10002753 <loadTimezoneStrings()+0x7e>	10002753: R_386_PC32	memset
10002757:	83 c4 10             	add    esp,0x10
1000275a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
1000275d:	8b 00                	mov    eax,DWORD PTR [eax]
1000275f:	83 c0 0c             	add    eax,0xc
10002762:	8b 08                	mov    ecx,DWORD PTR [eax]
10002764:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10002767:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
1000276a:	83 ec 0c             	sub    esp,0xc
1000276d:	8d 5d d0             	lea    ebx,[ebp-0x30]
10002770:	53                   	push   ebx
10002771:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
10002774:	52                   	push   edx
10002775:	50                   	push   eax
10002776:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
10002779:	ff d1                	call   ecx
1000277b:	83 c4 20             	add    esp,0x20
1000277e:	83 ec 0c             	sub    esp,0xc
10002781:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
10002784:	e8 fc ff ff ff       	call   10002785 <loadTimezoneStrings()+0xb0>	10002785: R_386_PC32	File::close()
10002789:	83 c4 10             	add    esp,0x10
1000278c:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
1000278f:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
10002792:	83 ec 08             	sub    esp,0x8
10002795:	50                   	push   eax
10002796:	68 23 8a 00 10       	push   0x10008a23	10002797: R_386_32	.text
1000279b:	e8 fc ff ff ff       	call   1000279c <loadTimezoneStrings()+0xc7>	1000279c: R_386_PC32	Dbg::kprintf(char const*, ...)
100027a0:	83 c4 10             	add    esp,0x10
100027a3:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
100027aa:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
100027b1:	81 7d f0 c7 00 00 00 	cmp    DWORD PTR [ebp-0x10],0xc7
100027b8:	7f 39                	jg     100027f3 <loadTimezoneStrings()+0x11e>
100027ba:	83 ec 0c             	sub    esp,0xc
100027bd:	6a 78                	push   0x78
100027bf:	e8 fc ff ff ff       	call   100027c0 <loadTimezoneStrings()+0xeb>	100027c0: R_386_PC32	malloc
100027c4:	83 c4 10             	add    esp,0x10
100027c7:	89 c2                	mov    edx,eax
100027c9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100027cc:	89 14 85 00 00 00 00 	mov    DWORD PTR [eax*4+0x0],edx	100027cf: R_386_32	timezoneStrings
100027d3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100027d6:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	100027d9: R_386_32	timezoneStrings
100027dd:	83 ec 08             	sub    esp,0x8
100027e0:	68 2d 8a 00 10       	push   0x10008a2d	100027e1: R_386_32	.text
100027e5:	50                   	push   eax
100027e6:	e8 fc ff ff ff       	call   100027e7 <loadTimezoneStrings()+0x112>	100027e7: R_386_PC32	strcpy
100027eb:	83 c4 10             	add    esp,0x10
100027ee:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
100027f1:	eb be                	jmp    100027b1 <loadTimezoneStrings()+0xdc>
100027f3:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
100027fa:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
100027fd:	8d 50 01             	lea    edx,[eax+0x1]
10002800:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
10002803:	89 c2                	mov    edx,eax
10002805:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10002808:	01 d0                	add    eax,edx
1000280a:	8a 00                	mov    al,BYTE PTR [eax]
1000280c:	88 45 ce             	mov    BYTE PTR [ebp-0x32],al
1000280f:	c6 45 cf 00          	mov    BYTE PTR [ebp-0x31],0x0
10002813:	8a 45 ce             	mov    al,BYTE PTR [ebp-0x32]
10002816:	3c 0d                	cmp    al,0xd
10002818:	0f 84 2e 01 00 00    	je     1000294c <loadTimezoneStrings()+0x277>
1000281e:	8a 45 ce             	mov    al,BYTE PTR [ebp-0x32]
10002821:	3c 09                	cmp    al,0x9
10002823:	75 3c                	jne    10002861 <loadTimezoneStrings()+0x18c>
10002825:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10002828:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	1000282b: R_386_32	timezoneStrings
1000282f:	83 ec 0c             	sub    esp,0xc
10002832:	50                   	push   eax
10002833:	e8 fc ff ff ff       	call   10002834 <loadTimezoneStrings()+0x15f>	10002834: R_386_PC32	strlen
10002838:	83 c4 10             	add    esp,0x10
1000283b:	83 f8 08             	cmp    eax,0x8
1000283e:	0f 87 0e 01 00 00    	ja     10002952 <loadTimezoneStrings()+0x27d>
10002844:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10002847:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	1000284a: R_386_32	timezoneStrings
1000284e:	83 ec 08             	sub    esp,0x8
10002851:	68 2d 8a 00 10       	push   0x10008a2d	10002852: R_386_32	.text
10002856:	50                   	push   eax
10002857:	e8 fc ff ff ff       	call   10002858 <loadTimezoneStrings()+0x183>	10002858: R_386_PC32	strcat
1000285c:	83 c4 10             	add    esp,0x10
1000285f:	eb c4                	jmp    10002825 <loadTimezoneStrings()+0x150>
10002861:	8a 45 ce             	mov    al,BYTE PTR [ebp-0x32]
10002864:	3c 0a                	cmp    al,0xa
10002866:	75 6b                	jne    100028d3 <loadTimezoneStrings()+0x1fe>
10002868:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
1000286b:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	1000286e: R_386_32	timezoneStrings
10002872:	83 ec 0c             	sub    esp,0xc
10002875:	50                   	push   eax
10002876:	e8 fc ff ff ff       	call   10002877 <loadTimezoneStrings()+0x1a2>	10002877: R_386_PC32	strlen
1000287b:	83 c4 10             	add    esp,0x10
1000287e:	83 f8 35             	cmp    eax,0x35
10002881:	77 1d                	ja     100028a0 <loadTimezoneStrings()+0x1cb>
10002883:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10002886:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	10002889: R_386_32	timezoneStrings
1000288d:	83 ec 08             	sub    esp,0x8
10002890:	68 2d 8a 00 10       	push   0x10008a2d	10002891: R_386_32	.text
10002895:	50                   	push   eax
10002896:	e8 fc ff ff ff       	call   10002897 <loadTimezoneStrings()+0x1c2>	10002897: R_386_PC32	strcat
1000289b:	83 c4 10             	add    esp,0x10
1000289e:	eb c8                	jmp    10002868 <loadTimezoneStrings()+0x193>
100028a0:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
100028a3:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
100028a6:	99                   	cdq    
100028a7:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
100028aa:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
100028ad:	39 c8                	cmp    eax,ecx
100028af:	89 d0                	mov    eax,edx
100028b1:	19 d8                	sbb    eax,ebx
100028b3:	0f 82 9f 00 00 00    	jb     10002958 <loadTimezoneStrings()+0x283>
100028b9:	83 ec 0c             	sub    esp,0xc
100028bc:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
100028bf:	e8 fc ff ff ff       	call   100028c0 <loadTimezoneStrings()+0x1eb>	100028c0: R_386_PC32	free
100028c4:	83 c4 10             	add    esp,0x10
100028c7:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
100028ce:	e9 8b 00 00 00       	jmp    1000295e <loadTimezoneStrings()+0x289>
100028d3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
100028d6:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	100028d9: R_386_32	timezoneStrings
100028dd:	83 ec 0c             	sub    esp,0xc
100028e0:	50                   	push   eax
100028e1:	e8 fc ff ff ff       	call   100028e2 <loadTimezoneStrings()+0x20d>	100028e2: R_386_PC32	strlen
100028e6:	83 c4 10             	add    esp,0x10
100028e9:	83 f8 31             	cmp    eax,0x31
100028ec:	77 1f                	ja     1000290d <loadTimezoneStrings()+0x238>
100028ee:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
100028f1:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	100028f4: R_386_32	timezoneStrings
100028f8:	83 ec 08             	sub    esp,0x8
100028fb:	8d 55 ce             	lea    edx,[ebp-0x32]
100028fe:	52                   	push   edx
100028ff:	50                   	push   eax
10002900:	e8 fc ff ff ff       	call   10002901 <loadTimezoneStrings()+0x22c>	10002901: R_386_PC32	strcat
10002905:	83 c4 10             	add    esp,0x10
10002908:	e9 ed fe ff ff       	jmp    100027fa <loadTimezoneStrings()+0x125>
1000290d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10002910:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	10002913: R_386_32	timezoneStrings
10002917:	83 ec 0c             	sub    esp,0xc
1000291a:	50                   	push   eax
1000291b:	e8 fc ff ff ff       	call   1000291c <loadTimezoneStrings()+0x247>	1000291c: R_386_PC32	strlen
10002920:	83 c4 10             	add    esp,0x10
10002923:	83 f8 32             	cmp    eax,0x32
10002926:	0f 85 ce fe ff ff    	jne    100027fa <loadTimezoneStrings()+0x125>
1000292c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
1000292f:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	10002932: R_386_32	timezoneStrings
10002936:	83 ec 08             	sub    esp,0x8
10002939:	68 2f 8a 00 10       	push   0x10008a2f	1000293a: R_386_32	.text
1000293e:	50                   	push   eax
1000293f:	e8 fc ff ff ff       	call   10002940 <loadTimezoneStrings()+0x26b>	10002940: R_386_PC32	strcat
10002944:	83 c4 10             	add    esp,0x10
10002947:	e9 ae fe ff ff       	jmp    100027fa <loadTimezoneStrings()+0x125>
1000294c:	90                   	nop
1000294d:	e9 a8 fe ff ff       	jmp    100027fa <loadTimezoneStrings()+0x125>
10002952:	90                   	nop
10002953:	e9 a2 fe ff ff       	jmp    100027fa <loadTimezoneStrings()+0x125>
10002958:	90                   	nop
10002959:	e9 9c fe ff ff       	jmp    100027fa <loadTimezoneStrings()+0x125>
1000295e:	81 7d e8 c7 00 00 00 	cmp    DWORD PTR [ebp-0x18],0xc7
10002965:	7f 23                	jg     1000298a <loadTimezoneStrings()+0x2b5>
10002967:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
1000296a:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	1000296d: R_386_32	timezoneStrings
10002971:	83 ec 04             	sub    esp,0x4
10002974:	50                   	push   eax
10002975:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
10002978:	68 34 8a 00 10       	push   0x10008a34	10002979: R_386_32	.text
1000297d:	e8 fc ff ff ff       	call   1000297e <loadTimezoneStrings()+0x2a9>	1000297e: R_386_PC32	Dbg::kprintf(char const*, ...)
10002982:	83 c4 10             	add    esp,0x10
10002985:	ff 45 e8             	inc    DWORD PTR [ebp-0x18]
10002988:	eb d4                	jmp    1000295e <loadTimezoneStrings()+0x289>
1000298a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
1000298d:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
10002990:	c9                   	leave  
10002991:	c3                   	ret    

10002992 <_bcrypt_rand>:
10002992:	55                   	push   ebp
10002993:	89 e5                	mov    ebp,esp
10002995:	83 ec 08             	sub    esp,0x8
10002998:	e8 fc ff ff ff       	call   10002999 <_bcrypt_rand+0x7>	10002999: R_386_PC32	KeRand()
1000299d:	c9                   	leave  
1000299e:	c3                   	ret    

1000299f <firstRun(bool)>:
1000299f:	55                   	push   ebp
100029a0:	89 e5                	mov    ebp,esp
100029a2:	57                   	push   edi
100029a3:	56                   	push   esi
100029a4:	53                   	push   ebx
100029a5:	81 ec ec 00 00 00    	sub    esp,0xec
100029ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100029ae:	88 85 14 ff ff ff    	mov    BYTE PTR [ebp-0xec],al
100029b4:	8a 85 14 ff ff ff    	mov    al,BYTE PTR [ebp-0xec]
100029ba:	83 f0 01             	xor    eax,0x1
100029bd:	a2 00 00 00 00       	mov    ds:0x0,al	100029be: R_386_32	showSidebar
100029c2:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	100029c4: R_386_32	guiKeyboardHandler
	100029c8: R_386_32	bootInstallKeybrd(KeyboardToken, bool*)
100029cc:	83 ec 0c             	sub    esp,0xc
100029cf:	68 3c 8a 00 10       	push   0x10008a3c	100029d0: R_386_32	.text
100029d4:	e8 fc ff ff ff       	call   100029d5 <firstRun(bool)+0x36>	100029d5: R_386_PC32	KeSetBootMessage(char const*)
100029d9:	83 c4 10             	add    esp,0x10
100029dc:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100029de: R_386_32	VgaText::hiddenOut
100029e3:	a1 00 00 00 00       	mov    eax,ds:0x0	100029e4: R_386_32	activeTerminal
100029e8:	83 ec 08             	sub    esp,0x8
100029eb:	68 65 8a 00 10       	push   0x10008a65	100029ec: R_386_32	.text
100029f0:	50                   	push   eax
100029f1:	e8 fc ff ff ff       	call   100029f2 <firstRun(bool)+0x53>	100029f2: R_386_PC32	VgaText::puts(char const*)
100029f6:	83 c4 10             	add    esp,0x10
100029f9:	a1 00 00 00 00       	mov    eax,ds:0x0	100029fa: R_386_32	kernelProcess
100029fe:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
10002a04:	83 ec 08             	sub    esp,0x8
10002a07:	68 65 8a 00 10       	push   0x10008a65	10002a08: R_386_32	.text
10002a0c:	50                   	push   eax
10002a0d:	e8 fc ff ff ff       	call   10002a0e <firstRun(bool)+0x6f>	10002a0e: R_386_PC32	VgaText::puts(char const*)
10002a12:	83 c4 10             	add    esp,0x10
10002a15:	83 ec 0c             	sub    esp,0xc
10002a18:	68 84 01 00 00       	push   0x184
10002a1d:	e8 fc ff ff ff       	call   10002a1e <firstRun(bool)+0x7f>	10002a1e: R_386_PC32	operator new(unsigned long)
10002a22:	83 c4 10             	add    esp,0x10
10002a25:	89 c3                	mov    ebx,eax
10002a27:	83 ec 08             	sub    esp,0x8
10002a2a:	68 6c 8a 00 10       	push   0x10008a6c	10002a2b: R_386_32	.text
10002a2f:	53                   	push   ebx
10002a30:	e8 fc ff ff ff       	call   10002a31 <firstRun(bool)+0x92>	10002a31: R_386_PC32	VgaText::VgaText(char const*)
10002a35:	83 c4 10             	add    esp,0x10
10002a38:	89 1d 00 00 00 00    	mov    DWORD PTR ds:0x0,ebx	10002a3a: R_386_32	term
10002a3e:	a1 00 00 00 00       	mov    eax,ds:0x0	10002a3f: R_386_32	term
10002a43:	83 ec 0c             	sub    esp,0xc
10002a46:	50                   	push   eax
10002a47:	e8 fc ff ff ff       	call   10002a48 <firstRun(bool)+0xa9>	10002a48: R_386_PC32	setActiveTerminal(VgaText*)
10002a4c:	83 c4 10             	add    esp,0x10
10002a4f:	e8 fc ff ff ff       	call   10002a50 <firstRun(bool)+0xb1>	10002a50: R_386_PC32	drawBootScreen()
10002a54:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
10002a5b:	80 bd 14 ff ff ff 00 	cmp    BYTE PTR [ebp-0xec],0x0
10002a62:	74 17                	je     10002a7b <firstRun(bool)+0xdc>
10002a64:	83 ec 08             	sub    esp,0x8
10002a67:	68 71 8a 00 10       	push   0x10008a71	10002a68: R_386_32	.text
10002a6c:	68 00 00 00 00       	push   0x0	10002a6d: R_386_32	pkeybuf
10002a71:	e8 fc ff ff ff       	call   10002a72 <firstRun(bool)+0xd3>	10002a72: R_386_PC32	strcpy
10002a76:	83 c4 10             	add    esp,0x10
10002a79:	eb 15                	jmp    10002a90 <firstRun(bool)+0xf1>
10002a7b:	83 ec 08             	sub    esp,0x8
10002a7e:	68 82 8a 00 10       	push   0x10008a82	10002a7f: R_386_32	.text
10002a83:	68 00 00 00 00       	push   0x0	10002a84: R_386_32	pkeybuf
10002a88:	e8 fc ff ff ff       	call   10002a89 <firstRun(bool)+0xea>	10002a89: R_386_PC32	strcpy
10002a8d:	83 c4 10             	add    esp,0x10
10002a90:	8a 85 14 ff ff ff    	mov    al,BYTE PTR [ebp-0xec]
10002a96:	83 f0 01             	xor    eax,0x1
10002a99:	84 c0                	test   al,al
10002a9b:	0f 84 45 19 00 00    	je     100043e6 <firstRun(bool)+0x1a47>
10002aa1:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
10002aa8:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10002aaa: R_386_32	tzsel
10002ab2:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10002ab4: R_386_32	modesel
10002abc:	eb 01                	jmp    10002abf <firstRun(bool)+0x120>
10002abe:	90                   	nop
10002abf:	e8 fc ff ff ff       	call   10002ac0 <firstRun(bool)+0x121>	10002ac0: R_386_PC32	drawBootScreen()
10002ac4:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
10002acb:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10002acd: R_386_32	installKey
10002ad2:	83 ec 0c             	sub    esp,0xc
10002ad5:	68 93 8a 00 10       	push   0x10008a93	10002ad6: R_386_32	.text
10002ada:	6a 12                	push   0x12
10002adc:	6a 32                	push   0x32
10002ade:	6a 03                	push   0x3
10002ae0:	6a 16                	push   0x16
10002ae2:	e8 fc ff ff ff       	call   10002ae3 <firstRun(bool)+0x144>	10002ae3: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
10002ae7:	83 c4 20             	add    esp,0x20
10002aea:	a1 00 00 00 00       	mov    eax,ds:0x0	10002aeb: R_386_32	term
10002aef:	83 ec 04             	sub    esp,0x4
10002af2:	6a 06                	push   0x6
10002af4:	6a 18                	push   0x18
10002af6:	50                   	push   eax
10002af7:	e8 fc ff ff ff       	call   10002af8 <firstRun(bool)+0x159>	10002af8: R_386_PC32	VgaText::setCursor(int, int)
10002afc:	83 c4 10             	add    esp,0x10
10002aff:	a1 00 00 00 00       	mov    eax,ds:0x0	10002b00: R_386_32	term
10002b04:	83 ec 08             	sub    esp,0x8
10002b07:	68 a0 8a 00 10       	push   0x10008aa0	10002b08: R_386_32	.text
10002b0c:	50                   	push   eax
10002b0d:	e8 fc ff ff ff       	call   10002b0e <firstRun(bool)+0x16f>	10002b0e: R_386_PC32	VgaText::puts(char const*)
10002b12:	83 c4 10             	add    esp,0x10
10002b15:	a1 00 00 00 00       	mov    eax,ds:0x0	10002b16: R_386_32	term
10002b1a:	83 ec 04             	sub    esp,0x4
10002b1d:	6a 07                	push   0x7
10002b1f:	6a 18                	push   0x18
10002b21:	50                   	push   eax
10002b22:	e8 fc ff ff ff       	call   10002b23 <firstRun(bool)+0x184>	10002b23: R_386_PC32	VgaText::setCursor(int, int)
10002b27:	83 c4 10             	add    esp,0x10
10002b2a:	a1 00 00 00 00       	mov    eax,ds:0x0	10002b2b: R_386_32	term
10002b2f:	83 ec 08             	sub    esp,0x8
10002b32:	68 cf 8a 00 10       	push   0x10008acf	10002b33: R_386_32	.text
10002b37:	50                   	push   eax
10002b38:	e8 fc ff ff ff       	call   10002b39 <firstRun(bool)+0x19a>	10002b39: R_386_PC32	VgaText::puts(char const*)
10002b3d:	83 c4 10             	add    esp,0x10
10002b40:	a1 00 00 00 00       	mov    eax,ds:0x0	10002b41: R_386_32	term
10002b45:	83 ec 04             	sub    esp,0x4
10002b48:	6a 09                	push   0x9
10002b4a:	6a 18                	push   0x18
10002b4c:	50                   	push   eax
10002b4d:	e8 fc ff ff ff       	call   10002b4e <firstRun(bool)+0x1af>	10002b4e: R_386_PC32	VgaText::setCursor(int, int)
10002b52:	83 c4 10             	add    esp,0x10
10002b55:	a1 00 00 00 00       	mov    eax,ds:0x0	10002b56: R_386_32	term
10002b5a:	83 ec 08             	sub    esp,0x8
10002b5d:	68 df 8a 00 10       	push   0x10008adf	10002b5e: R_386_32	.text
10002b62:	50                   	push   eax
10002b63:	e8 fc ff ff ff       	call   10002b64 <firstRun(bool)+0x1c5>	10002b64: R_386_PC32	VgaText::puts(char const*)
10002b68:	83 c4 10             	add    esp,0x10
10002b6b:	a1 00 00 00 00       	mov    eax,ds:0x0	10002b6c: R_386_32	term
10002b70:	83 ec 04             	sub    esp,0x4
10002b73:	6a 0b                	push   0xb
10002b75:	6a 18                	push   0x18
10002b77:	50                   	push   eax
10002b78:	e8 fc ff ff ff       	call   10002b79 <firstRun(bool)+0x1da>	10002b79: R_386_PC32	VgaText::setCursor(int, int)
10002b7d:	83 c4 10             	add    esp,0x10
10002b80:	a1 00 00 00 00       	mov    eax,ds:0x0	10002b81: R_386_32	term
10002b85:	83 ec 08             	sub    esp,0x8
10002b88:	68 e4 8a 00 10       	push   0x10008ae4	10002b89: R_386_32	.text
10002b8d:	50                   	push   eax
10002b8e:	e8 fc ff ff ff       	call   10002b8f <firstRun(bool)+0x1f0>	10002b8f: R_386_PC32	VgaText::puts(char const*)
10002b93:	83 c4 10             	add    esp,0x10
10002b96:	a1 00 00 00 00       	mov    eax,ds:0x0	10002b97: R_386_32	term
10002b9b:	83 ec 04             	sub    esp,0x4
10002b9e:	6a 0d                	push   0xd
10002ba0:	6a 18                	push   0x18
10002ba2:	50                   	push   eax
10002ba3:	e8 fc ff ff ff       	call   10002ba4 <firstRun(bool)+0x205>	10002ba4: R_386_PC32	VgaText::setCursor(int, int)
10002ba8:	83 c4 10             	add    esp,0x10
10002bab:	a1 00 00 00 00       	mov    eax,ds:0x0	10002bac: R_386_32	term
10002bb0:	83 ec 08             	sub    esp,0x8
10002bb3:	68 ec 8a 00 10       	push   0x10008aec	10002bb4: R_386_32	.text
10002bb8:	50                   	push   eax
10002bb9:	e8 fc ff ff ff       	call   10002bba <firstRun(bool)+0x21b>	10002bba: R_386_PC32	VgaText::puts(char const*)
10002bbe:	83 c4 10             	add    esp,0x10
10002bc1:	a1 00 00 00 00       	mov    eax,ds:0x0	10002bc2: R_386_32	term
10002bc6:	83 ec 04             	sub    esp,0x4
10002bc9:	6a 0f                	push   0xf
10002bcb:	6a 18                	push   0x18
10002bcd:	50                   	push   eax
10002bce:	e8 fc ff ff ff       	call   10002bcf <firstRun(bool)+0x230>	10002bcf: R_386_PC32	VgaText::setCursor(int, int)
10002bd3:	83 c4 10             	add    esp,0x10
10002bd6:	a1 00 00 00 00       	mov    eax,ds:0x0	10002bd7: R_386_32	term
10002bdb:	83 ec 08             	sub    esp,0x8
10002bde:	68 f5 8a 00 10       	push   0x10008af5	10002bdf: R_386_32	.text
10002be3:	50                   	push   eax
10002be4:	e8 fc ff ff ff       	call   10002be5 <firstRun(bool)+0x246>	10002be5: R_386_PC32	VgaText::puts(char const*)
10002be9:	83 c4 10             	add    esp,0x10
10002bec:	a1 00 00 00 00       	mov    eax,ds:0x0	10002bed: R_386_32	term
10002bf1:	83 ec 04             	sub    esp,0x4
10002bf4:	6a 10                	push   0x10
10002bf6:	6a 18                	push   0x18
10002bf8:	50                   	push   eax
10002bf9:	e8 fc ff ff ff       	call   10002bfa <firstRun(bool)+0x25b>	10002bfa: R_386_PC32	VgaText::setCursor(int, int)
10002bfe:	83 c4 10             	add    esp,0x10
10002c01:	a1 00 00 00 00       	mov    eax,ds:0x0	10002c02: R_386_32	term
10002c06:	83 ec 08             	sub    esp,0x8
10002c09:	68 fd 8a 00 10       	push   0x10008afd	10002c0a: R_386_32	.text
10002c0e:	50                   	push   eax
10002c0f:	e8 fc ff ff ff       	call   10002c10 <firstRun(bool)+0x271>	10002c10: R_386_PC32	VgaText::puts(char const*)
10002c14:	83 c4 10             	add    esp,0x10
10002c17:	a1 00 00 00 00       	mov    eax,ds:0x0	10002c18: R_386_32	term
10002c1c:	83 ec 04             	sub    esp,0x4
10002c1f:	6a 09                	push   0x9
10002c21:	6a 21                	push   0x21
10002c23:	50                   	push   eax
10002c24:	e8 fc ff ff ff       	call   10002c25 <firstRun(bool)+0x286>	10002c25: R_386_PC32	VgaText::setCursor(int, int)
10002c29:	83 c4 10             	add    esp,0x10
10002c2c:	a1 00 00 00 00       	mov    eax,ds:0x0	10002c2d: R_386_32	term
10002c31:	6a 07                	push   0x7
10002c33:	6a 00                	push   0x0
10002c35:	68 08 8b 00 10       	push   0x10008b08	10002c36: R_386_32	.text
10002c3a:	50                   	push   eax
10002c3b:	e8 fc ff ff ff       	call   10002c3c <firstRun(bool)+0x29d>	10002c3c: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002c40:	83 c4 10             	add    esp,0x10
10002c43:	a1 00 00 00 00       	mov    eax,ds:0x0	10002c44: R_386_32	term
10002c48:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
10002c4c:	75 07                	jne    10002c55 <firstRun(bool)+0x2b6>
10002c4e:	ba 2d 8b 00 10       	mov    edx,0x10008b2d	10002c4f: R_386_32	.text
10002c53:	eb 05                	jmp    10002c5a <firstRun(bool)+0x2bb>
10002c55:	ba 31 8b 00 10       	mov    edx,0x10008b31	10002c56: R_386_32	.text
10002c5a:	6a 0f                	push   0xf
10002c5c:	6a 00                	push   0x0
10002c5e:	52                   	push   edx
10002c5f:	50                   	push   eax
10002c60:	e8 fc ff ff ff       	call   10002c61 <firstRun(bool)+0x2c2>	10002c61: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002c65:	83 c4 10             	add    esp,0x10
10002c68:	a1 00 00 00 00       	mov    eax,ds:0x0	10002c69: R_386_32	term
10002c6d:	83 ec 08             	sub    esp,0x8
10002c70:	6a 21                	push   0x21
10002c72:	50                   	push   eax
10002c73:	e8 fc ff ff ff       	call   10002c74 <firstRun(bool)+0x2d5>	10002c74: R_386_PC32	VgaText::setCursorX(int)
10002c78:	83 c4 10             	add    esp,0x10
10002c7b:	a1 00 00 00 00       	mov    eax,ds:0x0	10002c7c: R_386_32	term
10002c80:	6a 07                	push   0x7
10002c82:	6a 00                	push   0x0
10002c84:	68 00 00 00 00       	push   0x0	10002c85: R_386_32	currName
10002c89:	50                   	push   eax
10002c8a:	e8 fc ff ff ff       	call   10002c8b <firstRun(bool)+0x2ec>	10002c8b: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002c8f:	83 c4 10             	add    esp,0x10
10002c92:	a1 00 00 00 00       	mov    eax,ds:0x0	10002c93: R_386_32	term
10002c97:	83 ec 04             	sub    esp,0x4
10002c9a:	6a 0b                	push   0xb
10002c9c:	6a 21                	push   0x21
10002c9e:	50                   	push   eax
10002c9f:	e8 fc ff ff ff       	call   10002ca0 <firstRun(bool)+0x301>	10002ca0: R_386_PC32	VgaText::setCursor(int, int)
10002ca4:	83 c4 10             	add    esp,0x10
10002ca7:	a1 00 00 00 00       	mov    eax,ds:0x0	10002ca8: R_386_32	term
10002cac:	6a 07                	push   0x7
10002cae:	6a 00                	push   0x0
10002cb0:	68 08 8b 00 10       	push   0x10008b08	10002cb1: R_386_32	.text
10002cb5:	50                   	push   eax
10002cb6:	e8 fc ff ff ff       	call   10002cb7 <firstRun(bool)+0x318>	10002cb7: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002cbb:	83 c4 10             	add    esp,0x10
10002cbe:	a1 00 00 00 00       	mov    eax,ds:0x0	10002cbf: R_386_32	term
10002cc3:	83 7d e0 01          	cmp    DWORD PTR [ebp-0x20],0x1
10002cc7:	75 07                	jne    10002cd0 <firstRun(bool)+0x331>
10002cc9:	ba 2d 8b 00 10       	mov    edx,0x10008b2d	10002cca: R_386_32	.text
10002cce:	eb 05                	jmp    10002cd5 <firstRun(bool)+0x336>
10002cd0:	ba 31 8b 00 10       	mov    edx,0x10008b31	10002cd1: R_386_32	.text
10002cd5:	6a 0f                	push   0xf
10002cd7:	6a 00                	push   0x0
10002cd9:	52                   	push   edx
10002cda:	50                   	push   eax
10002cdb:	e8 fc ff ff ff       	call   10002cdc <firstRun(bool)+0x33d>	10002cdc: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002ce0:	83 c4 10             	add    esp,0x10
10002ce3:	a1 00 00 00 00       	mov    eax,ds:0x0	10002ce4: R_386_32	term
10002ce8:	83 ec 08             	sub    esp,0x8
10002ceb:	6a 21                	push   0x21
10002ced:	50                   	push   eax
10002cee:	e8 fc ff ff ff       	call   10002cef <firstRun(bool)+0x350>	10002cef: R_386_PC32	VgaText::setCursorX(int)
10002cf3:	83 c4 10             	add    esp,0x10
10002cf6:	a1 00 00 00 00       	mov    eax,ds:0x0	10002cf7: R_386_32	term
10002cfb:	6a 07                	push   0x7
10002cfd:	6a 00                	push   0x0
10002cff:	68 00 00 00 00       	push   0x0	10002d00: R_386_32	currComp
10002d04:	50                   	push   eax
10002d05:	e8 fc ff ff ff       	call   10002d06 <firstRun(bool)+0x367>	10002d06: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002d0a:	83 c4 10             	add    esp,0x10
10002d0d:	a1 00 00 00 00       	mov    eax,ds:0x0	10002d0e: R_386_32	term
10002d12:	83 ec 04             	sub    esp,0x4
10002d15:	6a 0d                	push   0xd
10002d17:	6a 21                	push   0x21
10002d19:	50                   	push   eax
10002d1a:	e8 fc ff ff ff       	call   10002d1b <firstRun(bool)+0x37c>	10002d1b: R_386_PC32	VgaText::setCursor(int, int)
10002d1f:	83 c4 10             	add    esp,0x10
10002d22:	a1 00 00 00 00       	mov    eax,ds:0x0	10002d23: R_386_32	term
10002d27:	6a 07                	push   0x7
10002d29:	6a 00                	push   0x0
10002d2b:	68 08 8b 00 10       	push   0x10008b08	10002d2c: R_386_32	.text
10002d30:	50                   	push   eax
10002d31:	e8 fc ff ff ff       	call   10002d32 <firstRun(bool)+0x393>	10002d32: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002d36:	83 c4 10             	add    esp,0x10
10002d39:	a1 00 00 00 00       	mov    eax,ds:0x0	10002d3a: R_386_32	term
10002d3e:	83 7d e0 02          	cmp    DWORD PTR [ebp-0x20],0x2
10002d42:	75 07                	jne    10002d4b <firstRun(bool)+0x3ac>
10002d44:	ba 2d 8b 00 10       	mov    edx,0x10008b2d	10002d45: R_386_32	.text
10002d49:	eb 05                	jmp    10002d50 <firstRun(bool)+0x3b1>
10002d4b:	ba 31 8b 00 10       	mov    edx,0x10008b31	10002d4c: R_386_32	.text
10002d50:	6a 0f                	push   0xf
10002d52:	6a 00                	push   0x0
10002d54:	52                   	push   edx
10002d55:	50                   	push   eax
10002d56:	e8 fc ff ff ff       	call   10002d57 <firstRun(bool)+0x3b8>	10002d57: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002d5b:	83 c4 10             	add    esp,0x10
10002d5e:	a1 00 00 00 00       	mov    eax,ds:0x0	10002d5f: R_386_32	term
10002d63:	83 ec 08             	sub    esp,0x8
10002d66:	6a 21                	push   0x21
10002d68:	50                   	push   eax
10002d69:	e8 fc ff ff ff       	call   10002d6a <firstRun(bool)+0x3cb>	10002d6a: R_386_PC32	VgaText::setCursorX(int)
10002d6e:	83 c4 10             	add    esp,0x10
10002d71:	c7 45 d8 00 00 00 00 	mov    DWORD PTR [ebp-0x28],0x0
10002d78:	83 ec 0c             	sub    esp,0xc
10002d7b:	68 00 00 00 00       	push   0x0	10002d7c: R_386_32	passwbufA
10002d80:	e8 fc ff ff ff       	call   10002d81 <firstRun(bool)+0x3e2>	10002d81: R_386_PC32	strlen
10002d85:	83 c4 10             	add    esp,0x10
10002d88:	89 c2                	mov    edx,eax
10002d8a:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10002d8d:	39 c2                	cmp    edx,eax
10002d8f:	76 1c                	jbe    10002dad <firstRun(bool)+0x40e>
10002d91:	a1 00 00 00 00       	mov    eax,ds:0x0	10002d92: R_386_32	term
10002d96:	6a 07                	push   0x7
10002d98:	6a 00                	push   0x0
10002d9a:	68 35 8b 00 10       	push   0x10008b35	10002d9b: R_386_32	.text
10002d9f:	50                   	push   eax
10002da0:	e8 fc ff ff ff       	call   10002da1 <firstRun(bool)+0x402>	10002da1: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002da5:	83 c4 10             	add    esp,0x10
10002da8:	ff 45 d8             	inc    DWORD PTR [ebp-0x28]
10002dab:	eb cb                	jmp    10002d78 <firstRun(bool)+0x3d9>
10002dad:	a1 00 00 00 00       	mov    eax,ds:0x0	10002dae: R_386_32	term
10002db2:	83 ec 04             	sub    esp,0x4
10002db5:	6a 0f                	push   0xf
10002db7:	6a 21                	push   0x21
10002db9:	50                   	push   eax
10002dba:	e8 fc ff ff ff       	call   10002dbb <firstRun(bool)+0x41c>	10002dbb: R_386_PC32	VgaText::setCursor(int, int)
10002dbf:	83 c4 10             	add    esp,0x10
10002dc2:	a1 00 00 00 00       	mov    eax,ds:0x0	10002dc3: R_386_32	term
10002dc7:	6a 07                	push   0x7
10002dc9:	6a 00                	push   0x0
10002dcb:	68 08 8b 00 10       	push   0x10008b08	10002dcc: R_386_32	.text
10002dd0:	50                   	push   eax
10002dd1:	e8 fc ff ff ff       	call   10002dd2 <firstRun(bool)+0x433>	10002dd2: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002dd6:	83 c4 10             	add    esp,0x10
10002dd9:	a1 00 00 00 00       	mov    eax,ds:0x0	10002dda: R_386_32	term
10002dde:	83 7d e0 03          	cmp    DWORD PTR [ebp-0x20],0x3
10002de2:	75 07                	jne    10002deb <firstRun(bool)+0x44c>
10002de4:	ba 2d 8b 00 10       	mov    edx,0x10008b2d	10002de5: R_386_32	.text
10002de9:	eb 05                	jmp    10002df0 <firstRun(bool)+0x451>
10002deb:	ba 31 8b 00 10       	mov    edx,0x10008b31	10002dec: R_386_32	.text
10002df0:	6a 0f                	push   0xf
10002df2:	6a 00                	push   0x0
10002df4:	52                   	push   edx
10002df5:	50                   	push   eax
10002df6:	e8 fc ff ff ff       	call   10002df7 <firstRun(bool)+0x458>	10002df7: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002dfb:	83 c4 10             	add    esp,0x10
10002dfe:	a1 00 00 00 00       	mov    eax,ds:0x0	10002dff: R_386_32	term
10002e03:	83 ec 08             	sub    esp,0x8
10002e06:	6a 21                	push   0x21
10002e08:	50                   	push   eax
10002e09:	e8 fc ff ff ff       	call   10002e0a <firstRun(bool)+0x46b>	10002e0a: R_386_PC32	VgaText::setCursorX(int)
10002e0e:	83 c4 10             	add    esp,0x10
10002e11:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
10002e18:	83 ec 0c             	sub    esp,0xc
10002e1b:	68 00 00 00 00       	push   0x0	10002e1c: R_386_32	passwbufB
10002e20:	e8 fc ff ff ff       	call   10002e21 <firstRun(bool)+0x482>	10002e21: R_386_PC32	strlen
10002e25:	83 c4 10             	add    esp,0x10
10002e28:	89 c2                	mov    edx,eax
10002e2a:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10002e2d:	39 c2                	cmp    edx,eax
10002e2f:	76 1c                	jbe    10002e4d <firstRun(bool)+0x4ae>
10002e31:	a1 00 00 00 00       	mov    eax,ds:0x0	10002e32: R_386_32	term
10002e36:	6a 07                	push   0x7
10002e38:	6a 00                	push   0x0
10002e3a:	68 35 8b 00 10       	push   0x10008b35	10002e3b: R_386_32	.text
10002e3f:	50                   	push   eax
10002e40:	e8 fc ff ff ff       	call   10002e41 <firstRun(bool)+0x4a2>	10002e41: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002e45:	83 c4 10             	add    esp,0x10
10002e48:	ff 45 d4             	inc    DWORD PTR [ebp-0x2c]
10002e4b:	eb cb                	jmp    10002e18 <firstRun(bool)+0x479>
10002e4d:	a1 00 00 00 00       	mov    eax,ds:0x0	10002e4e: R_386_32	term
10002e52:	83 ec 04             	sub    esp,0x4
10002e55:	6a 12                	push   0x12
10002e57:	6a 18                	push   0x18
10002e59:	50                   	push   eax
10002e5a:	e8 fc ff ff ff       	call   10002e5b <firstRun(bool)+0x4bc>	10002e5b: R_386_PC32	VgaText::setCursor(int, int)
10002e5f:	83 c4 10             	add    esp,0x10
10002e62:	a1 00 00 00 00       	mov    eax,ds:0x0	10002e63: R_386_32	term
10002e67:	83 7d e0 04          	cmp    DWORD PTR [ebp-0x20],0x4
10002e6b:	75 07                	jne    10002e74 <firstRun(bool)+0x4d5>
10002e6d:	ba 37 8b 00 10       	mov    edx,0x10008b37	10002e6e: R_386_32	.text
10002e72:	eb 05                	jmp    10002e79 <firstRun(bool)+0x4da>
10002e74:	ba 4d 8b 00 10       	mov    edx,0x10008b4d	10002e75: R_386_32	.text
10002e79:	6a 0f                	push   0xf
10002e7b:	6a 08                	push   0x8
10002e7d:	52                   	push   edx
10002e7e:	50                   	push   eax
10002e7f:	e8 fc ff ff ff       	call   10002e80 <firstRun(bool)+0x4e1>	10002e80: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002e84:	83 c4 10             	add    esp,0x10
10002e87:	a1 00 00 00 00       	mov    eax,ds:0x0	10002e88: R_386_32	term
10002e8c:	83 ec 04             	sub    esp,0x4
10002e8f:	6a 12                	push   0x12
10002e91:	6a 3c                	push   0x3c
10002e93:	50                   	push   eax
10002e94:	e8 fc ff ff ff       	call   10002e95 <firstRun(bool)+0x4f6>	10002e95: R_386_PC32	VgaText::setCursor(int, int)
10002e99:	83 c4 10             	add    esp,0x10
10002e9c:	83 7d e0 04          	cmp    DWORD PTR [ebp-0x20],0x4
10002ea0:	74 19                	je     10002ebb <firstRun(bool)+0x51c>
10002ea2:	a1 00 00 00 00       	mov    eax,ds:0x0	10002ea3: R_386_32	term
10002ea7:	6a 08                	push   0x8
10002ea9:	6a 0f                	push   0xf
10002eab:	68 59 8b 00 10       	push   0x10008b59	10002eac: R_386_32	.text
10002eb0:	50                   	push   eax
10002eb1:	e8 fc ff ff ff       	call   10002eb2 <firstRun(bool)+0x513>	10002eb2: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002eb6:	83 c4 10             	add    esp,0x10
10002eb9:	eb 17                	jmp    10002ed2 <firstRun(bool)+0x533>
10002ebb:	a1 00 00 00 00       	mov    eax,ds:0x0	10002ebc: R_386_32	term
10002ec0:	6a 01                	push   0x1
10002ec2:	6a 0f                	push   0xf
10002ec4:	68 59 8b 00 10       	push   0x10008b59	10002ec5: R_386_32	.text
10002ec9:	50                   	push   eax
10002eca:	e8 fc ff ff ff       	call   10002ecb <firstRun(bool)+0x52c>	10002ecb: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002ecf:	83 c4 10             	add    esp,0x10
10002ed2:	a1 00 00 00 00       	mov    eax,ds:0x0	10002ed3: R_386_32	term
10002ed7:	83 7d e0 04          	cmp    DWORD PTR [ebp-0x20],0x4
10002edb:	75 07                	jne    10002ee4 <firstRun(bool)+0x545>
10002edd:	ba 2d 8b 00 10       	mov    edx,0x10008b2d	10002ede: R_386_32	.text
10002ee2:	eb 05                	jmp    10002ee9 <firstRun(bool)+0x54a>
10002ee4:	ba 31 8b 00 10       	mov    edx,0x10008b31	10002ee5: R_386_32	.text
10002ee9:	6a 0f                	push   0xf
10002eeb:	6a 00                	push   0x0
10002eed:	52                   	push   edx
10002eee:	50                   	push   eax
10002eef:	e8 fc ff ff ff       	call   10002ef0 <firstRun(bool)+0x551>	10002ef0: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002ef4:	83 c4 10             	add    esp,0x10
10002ef7:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
10002efb:	75 28                	jne    10002f25 <firstRun(bool)+0x586>
10002efd:	8b 1d 00 00 00 00    	mov    ebx,DWORD PTR ds:0x0	10002eff: R_386_32	term
10002f03:	83 ec 0c             	sub    esp,0xc
10002f06:	68 00 00 00 00       	push   0x0	10002f07: R_386_32	currName
10002f0b:	e8 fc ff ff ff       	call   10002f0c <firstRun(bool)+0x56d>	10002f0c: R_386_PC32	strlen
10002f10:	83 c4 10             	add    esp,0x10
10002f13:	83 c0 21             	add    eax,0x21
10002f16:	83 ec 04             	sub    esp,0x4
10002f19:	6a 09                	push   0x9
10002f1b:	50                   	push   eax
10002f1c:	53                   	push   ebx
10002f1d:	e8 fc ff ff ff       	call   10002f1e <firstRun(bool)+0x57f>	10002f1e: R_386_PC32	VgaText::setCursor(int, int)
10002f22:	83 c4 10             	add    esp,0x10
10002f25:	83 7d e0 01          	cmp    DWORD PTR [ebp-0x20],0x1
10002f29:	75 28                	jne    10002f53 <firstRun(bool)+0x5b4>
10002f2b:	8b 1d 00 00 00 00    	mov    ebx,DWORD PTR ds:0x0	10002f2d: R_386_32	term
10002f31:	83 ec 0c             	sub    esp,0xc
10002f34:	68 00 00 00 00       	push   0x0	10002f35: R_386_32	currComp
10002f39:	e8 fc ff ff ff       	call   10002f3a <firstRun(bool)+0x59b>	10002f3a: R_386_PC32	strlen
10002f3e:	83 c4 10             	add    esp,0x10
10002f41:	83 c0 21             	add    eax,0x21
10002f44:	83 ec 04             	sub    esp,0x4
10002f47:	6a 0b                	push   0xb
10002f49:	50                   	push   eax
10002f4a:	53                   	push   ebx
10002f4b:	e8 fc ff ff ff       	call   10002f4c <firstRun(bool)+0x5ad>	10002f4c: R_386_PC32	VgaText::setCursor(int, int)
10002f50:	83 c4 10             	add    esp,0x10
10002f53:	83 7d e0 02          	cmp    DWORD PTR [ebp-0x20],0x2
10002f57:	75 28                	jne    10002f81 <firstRun(bool)+0x5e2>
10002f59:	8b 1d 00 00 00 00    	mov    ebx,DWORD PTR ds:0x0	10002f5b: R_386_32	term
10002f5f:	83 ec 0c             	sub    esp,0xc
10002f62:	68 00 00 00 00       	push   0x0	10002f63: R_386_32	passwbufA
10002f67:	e8 fc ff ff ff       	call   10002f68 <firstRun(bool)+0x5c9>	10002f68: R_386_PC32	strlen
10002f6c:	83 c4 10             	add    esp,0x10
10002f6f:	83 c0 21             	add    eax,0x21
10002f72:	83 ec 04             	sub    esp,0x4
10002f75:	6a 0d                	push   0xd
10002f77:	50                   	push   eax
10002f78:	53                   	push   ebx
10002f79:	e8 fc ff ff ff       	call   10002f7a <firstRun(bool)+0x5db>	10002f7a: R_386_PC32	VgaText::setCursor(int, int)
10002f7e:	83 c4 10             	add    esp,0x10
10002f81:	83 7d e0 03          	cmp    DWORD PTR [ebp-0x20],0x3
10002f85:	75 28                	jne    10002faf <firstRun(bool)+0x610>
10002f87:	8b 1d 00 00 00 00    	mov    ebx,DWORD PTR ds:0x0	10002f89: R_386_32	term
10002f8d:	83 ec 0c             	sub    esp,0xc
10002f90:	68 00 00 00 00       	push   0x0	10002f91: R_386_32	passwbufB
10002f95:	e8 fc ff ff ff       	call   10002f96 <firstRun(bool)+0x5f7>	10002f96: R_386_PC32	strlen
10002f9a:	83 c4 10             	add    esp,0x10
10002f9d:	83 c0 21             	add    eax,0x21
10002fa0:	83 ec 04             	sub    esp,0x4
10002fa3:	6a 0f                	push   0xf
10002fa5:	50                   	push   eax
10002fa6:	53                   	push   ebx
10002fa7:	e8 fc ff ff ff       	call   10002fa8 <firstRun(bool)+0x609>	10002fa8: R_386_PC32	VgaText::setCursor(int, int)
10002fac:	83 c4 10             	add    esp,0x10
10002faf:	83 7d e0 04          	cmp    DWORD PTR [ebp-0x20],0x4
10002fb3:	75 15                	jne    10002fca <firstRun(bool)+0x62b>
10002fb5:	a1 00 00 00 00       	mov    eax,ds:0x0	10002fb6: R_386_32	term
10002fba:	83 ec 04             	sub    esp,0x4
10002fbd:	6a 02                	push   0x2
10002fbf:	6a 00                	push   0x0
10002fc1:	50                   	push   eax
10002fc2:	e8 fc ff ff ff       	call   10002fc3 <firstRun(bool)+0x624>	10002fc3: R_386_PC32	VgaText::setCursor(int, int)
10002fc7:	83 c4 10             	add    esp,0x10
10002fca:	a0 00 00 00 00       	mov    al,ds:0x0	10002fcb: R_386_32	installKey
10002fcf:	84 c0                	test   al,al
10002fd1:	0f 94 c0             	sete   al
10002fd4:	84 c0                	test   al,al
10002fd6:	74 02                	je     10002fda <firstRun(bool)+0x63b>
10002fd8:	eb f0                	jmp    10002fca <firstRun(bool)+0x62b>
10002fda:	a1 00 00 00 00       	mov    eax,ds:0x0	10002fdb: R_386_32	term
10002fdf:	05 82 00 00 00       	add    eax,0x82
10002fe4:	83 ec 04             	sub    esp,0x4
10002fe7:	6a 10                	push   0x10
10002fe9:	6a 00                	push   0x0
10002feb:	50                   	push   eax
10002fec:	e8 fc ff ff ff       	call   10002fed <firstRun(bool)+0x64e>	10002fed: R_386_PC32	memset
10002ff1:	83 c4 10             	add    esp,0x10
10002ff4:	a1 00 00 00 00       	mov    eax,ds:0x0	10002ff5: R_386_32	term
10002ff9:	05 02 01 00 00       	add    eax,0x102
10002ffe:	83 ec 04             	sub    esp,0x4
10003001:	6a 10                	push   0x10
10003003:	6a 00                	push   0x0
10003005:	50                   	push   eax
10003006:	e8 fc ff ff ff       	call   10003007 <firstRun(bool)+0x668>	10003007: R_386_PC32	memset
1000300b:	83 c4 10             	add    esp,0x10
1000300e:	a0 00 00 00 00       	mov    al,ds:0x0	1000300f: R_386_32	installKey
10003013:	3c 09                	cmp    al,0x9
10003015:	74 09                	je     10003020 <firstRun(bool)+0x681>
10003017:	a0 00 00 00 00       	mov    al,ds:0x0	10003018: R_386_32	installKey
1000301c:	3c 0a                	cmp    al,0xa
1000301e:	75 04                	jne    10003024 <firstRun(bool)+0x685>
10003020:	b0 01                	mov    al,0x1
10003022:	eb 02                	jmp    10003026 <firstRun(bool)+0x687>
10003024:	b0 00                	mov    al,0x0
10003026:	84 c0                	test   al,al
10003028:	74 62                	je     1000308c <firstRun(bool)+0x6ed>
1000302a:	83 7d e0 04          	cmp    DWORD PTR [ebp-0x20],0x4
1000302e:	75 0d                	jne    1000303d <firstRun(bool)+0x69e>
10003030:	a0 00 00 00 00       	mov    al,ds:0x0	10003031: R_386_32	installKey
10003035:	3c 0a                	cmp    al,0xa
10003037:	75 04                	jne    1000303d <firstRun(bool)+0x69e>
10003039:	b0 01                	mov    al,0x1
1000303b:	eb 02                	jmp    1000303f <firstRun(bool)+0x6a0>
1000303d:	b0 00                	mov    al,0x0
1000303f:	84 c0                	test   al,al
10003041:	74 24                	je     10003067 <firstRun(bool)+0x6c8>
10003043:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10003045: R_386_32	installKey
1000304a:	90                   	nop
1000304b:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	1000304d: R_386_32	installKey
10003052:	83 ec 0c             	sub    esp,0xc
10003055:	68 a0 0f 00 00       	push   0xfa0
1000305a:	e8 fc ff ff ff       	call   1000305b <firstRun(bool)+0x6bc>	1000305b: R_386_PC32	milliTenthSleep(unsigned int)
1000305f:	83 c4 10             	add    esp,0x10
10003062:	e9 43 02 00 00       	jmp    100032aa <firstRun(bool)+0x90b>
10003067:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
1000306a:	83 7d e0 05          	cmp    DWORD PTR [ebp-0x20],0x5
1000306e:	75 07                	jne    10003077 <firstRun(bool)+0x6d8>
10003070:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
10003077:	83 ec 0c             	sub    esp,0xc
1000307a:	68 2c 01 00 00       	push   0x12c
1000307f:	e8 fc ff ff ff       	call   10003080 <firstRun(bool)+0x6e1>	10003080: R_386_PC32	milliTenthSleep(unsigned int)
10003084:	83 c4 10             	add    esp,0x10
10003087:	e9 11 02 00 00       	jmp    1000329d <firstRun(bool)+0x8fe>
1000308c:	a0 00 00 00 00       	mov    al,ds:0x0	1000308d: R_386_32	installKey
10003091:	3c 1f                	cmp    al,0x1f
10003093:	7e 0d                	jle    100030a2 <firstRun(bool)+0x703>
10003095:	a0 00 00 00 00       	mov    al,ds:0x0	10003096: R_386_32	installKey
1000309a:	3c 7f                	cmp    al,0x7f
1000309c:	74 04                	je     100030a2 <firstRun(bool)+0x703>
1000309e:	b0 01                	mov    al,0x1
100030a0:	eb 02                	jmp    100030a4 <firstRun(bool)+0x705>
100030a2:	b0 00                	mov    al,0x0
100030a4:	84 c0                	test   al,al
100030a6:	0f 84 e7 00 00 00    	je     10003193 <firstRun(bool)+0x7f4>
100030ac:	a0 00 00 00 00       	mov    al,ds:0x0	100030ad: R_386_32	installKey
100030b1:	88 85 32 ff ff ff    	mov    BYTE PTR [ebp-0xce],al
100030b7:	c6 85 33 ff ff ff 00 	mov    BYTE PTR [ebp-0xcd],0x0
100030be:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
100030c2:	75 2c                	jne    100030f0 <firstRun(bool)+0x751>
100030c4:	83 ec 0c             	sub    esp,0xc
100030c7:	68 00 00 00 00       	push   0x0	100030c8: R_386_32	currName
100030cc:	e8 fc ff ff ff       	call   100030cd <firstRun(bool)+0x72e>	100030cd: R_386_PC32	strlen
100030d1:	83 c4 10             	add    esp,0x10
100030d4:	83 f8 22             	cmp    eax,0x22
100030d7:	77 17                	ja     100030f0 <firstRun(bool)+0x751>
100030d9:	83 ec 08             	sub    esp,0x8
100030dc:	8d 85 32 ff ff ff    	lea    eax,[ebp-0xce]
100030e2:	50                   	push   eax
100030e3:	68 00 00 00 00       	push   0x0	100030e4: R_386_32	currName
100030e8:	e8 fc ff ff ff       	call   100030e9 <firstRun(bool)+0x74a>	100030e9: R_386_PC32	strcat
100030ed:	83 c4 10             	add    esp,0x10
100030f0:	83 7d e0 01          	cmp    DWORD PTR [ebp-0x20],0x1
100030f4:	75 2c                	jne    10003122 <firstRun(bool)+0x783>
100030f6:	83 ec 0c             	sub    esp,0xc
100030f9:	68 00 00 00 00       	push   0x0	100030fa: R_386_32	currComp
100030fe:	e8 fc ff ff ff       	call   100030ff <firstRun(bool)+0x760>	100030ff: R_386_PC32	strlen
10003103:	83 c4 10             	add    esp,0x10
10003106:	83 f8 22             	cmp    eax,0x22
10003109:	77 17                	ja     10003122 <firstRun(bool)+0x783>
1000310b:	83 ec 08             	sub    esp,0x8
1000310e:	8d 85 32 ff ff ff    	lea    eax,[ebp-0xce]
10003114:	50                   	push   eax
10003115:	68 00 00 00 00       	push   0x0	10003116: R_386_32	currComp
1000311a:	e8 fc ff ff ff       	call   1000311b <firstRun(bool)+0x77c>	1000311b: R_386_PC32	strcat
1000311f:	83 c4 10             	add    esp,0x10
10003122:	83 7d e0 02          	cmp    DWORD PTR [ebp-0x20],0x2
10003126:	75 2c                	jne    10003154 <firstRun(bool)+0x7b5>
10003128:	83 ec 0c             	sub    esp,0xc
1000312b:	68 00 00 00 00       	push   0x0	1000312c: R_386_32	passwbufA
10003130:	e8 fc ff ff ff       	call   10003131 <firstRun(bool)+0x792>	10003131: R_386_PC32	strlen
10003135:	83 c4 10             	add    esp,0x10
10003138:	83 f8 22             	cmp    eax,0x22
1000313b:	77 17                	ja     10003154 <firstRun(bool)+0x7b5>
1000313d:	83 ec 08             	sub    esp,0x8
10003140:	8d 85 32 ff ff ff    	lea    eax,[ebp-0xce]
10003146:	50                   	push   eax
10003147:	68 00 00 00 00       	push   0x0	10003148: R_386_32	passwbufA
1000314c:	e8 fc ff ff ff       	call   1000314d <firstRun(bool)+0x7ae>	1000314d: R_386_PC32	strcat
10003151:	83 c4 10             	add    esp,0x10
10003154:	83 7d e0 03          	cmp    DWORD PTR [ebp-0x20],0x3
10003158:	0f 85 3f 01 00 00    	jne    1000329d <firstRun(bool)+0x8fe>
1000315e:	83 ec 0c             	sub    esp,0xc
10003161:	68 00 00 00 00       	push   0x0	10003162: R_386_32	passwbufB
10003166:	e8 fc ff ff ff       	call   10003167 <firstRun(bool)+0x7c8>	10003167: R_386_PC32	strlen
1000316b:	83 c4 10             	add    esp,0x10
1000316e:	83 f8 22             	cmp    eax,0x22
10003171:	0f 87 26 01 00 00    	ja     1000329d <firstRun(bool)+0x8fe>
10003177:	83 ec 08             	sub    esp,0x8
1000317a:	8d 85 32 ff ff ff    	lea    eax,[ebp-0xce]
10003180:	50                   	push   eax
10003181:	68 00 00 00 00       	push   0x0	10003182: R_386_32	passwbufB
10003186:	e8 fc ff ff ff       	call   10003187 <firstRun(bool)+0x7e8>	10003187: R_386_PC32	strcat
1000318b:	83 c4 10             	add    esp,0x10
1000318e:	e9 0a 01 00 00       	jmp    1000329d <firstRun(bool)+0x8fe>
10003193:	a0 00 00 00 00       	mov    al,ds:0x0	10003194: R_386_32	installKey
10003198:	3c 08                	cmp    al,0x8
1000319a:	0f 94 c0             	sete   al
1000319d:	84 c0                	test   al,al
1000319f:	0f 84 ca 00 00 00    	je     1000326f <firstRun(bool)+0x8d0>
100031a5:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
100031a9:	75 2c                	jne    100031d7 <firstRun(bool)+0x838>
100031ab:	83 ec 0c             	sub    esp,0xc
100031ae:	68 00 00 00 00       	push   0x0	100031af: R_386_32	currName
100031b3:	e8 fc ff ff ff       	call   100031b4 <firstRun(bool)+0x815>	100031b4: R_386_PC32	strlen
100031b8:	83 c4 10             	add    esp,0x10
100031bb:	85 c0                	test   eax,eax
100031bd:	74 18                	je     100031d7 <firstRun(bool)+0x838>
100031bf:	83 ec 0c             	sub    esp,0xc
100031c2:	68 00 00 00 00       	push   0x0	100031c3: R_386_32	currName
100031c7:	e8 fc ff ff ff       	call   100031c8 <firstRun(bool)+0x829>	100031c8: R_386_PC32	strlen
100031cc:	83 c4 10             	add    esp,0x10
100031cf:	48                   	dec    eax
100031d0:	c6 80 00 00 00 00 00 	mov    BYTE PTR [eax+0x0],0x0	100031d2: R_386_32	currName
100031d7:	83 7d e0 01          	cmp    DWORD PTR [ebp-0x20],0x1
100031db:	75 2c                	jne    10003209 <firstRun(bool)+0x86a>
100031dd:	83 ec 0c             	sub    esp,0xc
100031e0:	68 00 00 00 00       	push   0x0	100031e1: R_386_32	currComp
100031e5:	e8 fc ff ff ff       	call   100031e6 <firstRun(bool)+0x847>	100031e6: R_386_PC32	strlen
100031ea:	83 c4 10             	add    esp,0x10
100031ed:	85 c0                	test   eax,eax
100031ef:	74 18                	je     10003209 <firstRun(bool)+0x86a>
100031f1:	83 ec 0c             	sub    esp,0xc
100031f4:	68 00 00 00 00       	push   0x0	100031f5: R_386_32	currComp
100031f9:	e8 fc ff ff ff       	call   100031fa <firstRun(bool)+0x85b>	100031fa: R_386_PC32	strlen
100031fe:	83 c4 10             	add    esp,0x10
10003201:	48                   	dec    eax
10003202:	c6 80 00 00 00 00 00 	mov    BYTE PTR [eax+0x0],0x0	10003204: R_386_32	currComp
10003209:	83 7d e0 02          	cmp    DWORD PTR [ebp-0x20],0x2
1000320d:	75 2c                	jne    1000323b <firstRun(bool)+0x89c>
1000320f:	83 ec 0c             	sub    esp,0xc
10003212:	68 00 00 00 00       	push   0x0	10003213: R_386_32	passwbufA
10003217:	e8 fc ff ff ff       	call   10003218 <firstRun(bool)+0x879>	10003218: R_386_PC32	strlen
1000321c:	83 c4 10             	add    esp,0x10
1000321f:	85 c0                	test   eax,eax
10003221:	74 18                	je     1000323b <firstRun(bool)+0x89c>
10003223:	83 ec 0c             	sub    esp,0xc
10003226:	68 00 00 00 00       	push   0x0	10003227: R_386_32	passwbufA
1000322b:	e8 fc ff ff ff       	call   1000322c <firstRun(bool)+0x88d>	1000322c: R_386_PC32	strlen
10003230:	83 c4 10             	add    esp,0x10
10003233:	48                   	dec    eax
10003234:	c6 80 00 00 00 00 00 	mov    BYTE PTR [eax+0x0],0x0	10003236: R_386_32	passwbufA
1000323b:	83 7d e0 03          	cmp    DWORD PTR [ebp-0x20],0x3
1000323f:	75 5c                	jne    1000329d <firstRun(bool)+0x8fe>
10003241:	83 ec 0c             	sub    esp,0xc
10003244:	68 00 00 00 00       	push   0x0	10003245: R_386_32	passwbufB
10003249:	e8 fc ff ff ff       	call   1000324a <firstRun(bool)+0x8ab>	1000324a: R_386_PC32	strlen
1000324e:	83 c4 10             	add    esp,0x10
10003251:	85 c0                	test   eax,eax
10003253:	74 48                	je     1000329d <firstRun(bool)+0x8fe>
10003255:	83 ec 0c             	sub    esp,0xc
10003258:	68 00 00 00 00       	push   0x0	10003259: R_386_32	passwbufB
1000325d:	e8 fc ff ff ff       	call   1000325e <firstRun(bool)+0x8bf>	1000325e: R_386_PC32	strlen
10003262:	83 c4 10             	add    esp,0x10
10003265:	48                   	dec    eax
10003266:	c6 80 00 00 00 00 00 	mov    BYTE PTR [eax+0x0],0x0	10003268: R_386_32	passwbufB
1000326d:	eb 2e                	jmp    1000329d <firstRun(bool)+0x8fe>
1000326f:	a0 00 00 00 00       	mov    al,ds:0x0	10003270: R_386_32	installKey
10003274:	3c 7f                	cmp    al,0x7f
10003276:	0f 94 c0             	sete   al
10003279:	84 c0                	test   al,al
1000327b:	74 20                	je     1000329d <firstRun(bool)+0x8fe>
1000327d:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
10003280:	83 7d e0 ff          	cmp    DWORD PTR [ebp-0x20],0xffffffff
10003284:	75 07                	jne    1000328d <firstRun(bool)+0x8ee>
10003286:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
1000328d:	83 ec 0c             	sub    esp,0xc
10003290:	68 2c 01 00 00       	push   0x12c
10003295:	e8 fc ff ff ff       	call   10003296 <firstRun(bool)+0x8f7>	10003296: R_386_PC32	milliTenthSleep(unsigned int)
1000329a:	83 c4 10             	add    esp,0x10
1000329d:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	1000329f: R_386_32	installKey
100032a4:	e9 6e f9 ff ff       	jmp    10002c17 <firstRun(bool)+0x278>
100032a9:	90                   	nop
100032aa:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100032ac: R_386_32	installKey
100032b1:	e8 fc ff ff ff       	call   100032b2 <firstRun(bool)+0x913>	100032b2: R_386_PC32	drawBootScreen()
100032b6:	83 ec 0c             	sub    esp,0xc
100032b9:	68 62 8b 00 10       	push   0x10008b62	100032ba: R_386_32	.text
100032be:	6a 0d                	push   0xd
100032c0:	6a 32                	push   0x32
100032c2:	6a 02                	push   0x2
100032c4:	6a 16                	push   0x16
100032c6:	e8 fc ff ff ff       	call   100032c7 <firstRun(bool)+0x928>	100032c7: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
100032cb:	83 c4 20             	add    esp,0x20
100032ce:	a1 00 00 00 00       	mov    eax,ds:0x0	100032cf: R_386_32	Krnl::computer
100032d3:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
100032d9:	a1 00 00 00 00       	mov    eax,ds:0x0	100032da: R_386_32	Krnl::computer
100032de:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
100032e4:	8b 00                	mov    eax,DWORD PTR [eax]
100032e6:	83 c0 28             	add    eax,0x28
100032e9:	8b 00                	mov    eax,DWORD PTR [eax]
100032eb:	8d 95 08 ff ff ff    	lea    edx,[ebp-0xf8]
100032f1:	83 ec 08             	sub    esp,0x8
100032f4:	51                   	push   ecx
100032f5:	52                   	push   edx
100032f6:	ff d0                	call   eax
100032f8:	83 c4 0c             	add    esp,0xc
100032fb:	8b 85 08 ff ff ff    	mov    eax,DWORD PTR [ebp-0xf8]
10003301:	8b 95 0c ff ff ff    	mov    edx,DWORD PTR [ebp-0xf4]
10003307:	89 85 40 ff ff ff    	mov    DWORD PTR [ebp-0xc0],eax
1000330d:	89 95 44 ff ff ff    	mov    DWORD PTR [ebp-0xbc],edx
10003313:	83 ec 08             	sub    esp,0x8
10003316:	68 70 8b 00 10       	push   0x10008b70	10003317: R_386_32	.text
1000331b:	8d 85 48 ff ff ff    	lea    eax,[ebp-0xb8]
10003321:	50                   	push   eax
10003322:	e8 fc ff ff ff       	call   10003323 <firstRun(bool)+0x984>	10003323: R_386_PC32	strcpy
10003327:	83 c4 10             	add    esp,0x10
1000332a:	8a 85 40 ff ff ff    	mov    al,BYTE PTR [ebp-0xc0]
10003330:	0f b6 d0             	movzx  edx,al
10003333:	89 d0                	mov    eax,edx
10003335:	c1 e0 02             	shl    eax,0x2
10003338:	01 d0                	add    eax,edx
1000333a:	c1 e0 03             	shl    eax,0x3
1000333d:	01 d0                	add    eax,edx
1000333f:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10003346:	01 d0                	add    eax,edx
10003348:	66 c1 e8 08          	shr    ax,0x8
1000334c:	c0 e8 03             	shr    al,0x3
1000334f:	83 c0 30             	add    eax,0x30
10003352:	88 85 48 ff ff ff    	mov    BYTE PTR [ebp-0xb8],al
10003358:	8a 8d 40 ff ff ff    	mov    cl,BYTE PTR [ebp-0xc0]
1000335e:	0f b6 d1             	movzx  edx,cl
10003361:	89 d0                	mov    eax,edx
10003363:	c1 e0 02             	shl    eax,0x2
10003366:	01 d0                	add    eax,edx
10003368:	c1 e0 03             	shl    eax,0x3
1000336b:	01 d0                	add    eax,edx
1000336d:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10003374:	01 d0                	add    eax,edx
10003376:	66 c1 e8 08          	shr    ax,0x8
1000337a:	88 c2                	mov    dl,al
1000337c:	c0 ea 03             	shr    dl,0x3
1000337f:	88 d0                	mov    al,dl
10003381:	c1 e0 02             	shl    eax,0x2
10003384:	01 d0                	add    eax,edx
10003386:	d1 e0                	shl    eax,1
10003388:	29 c1                	sub    ecx,eax
1000338a:	88 ca                	mov    dl,cl
1000338c:	8d 42 30             	lea    eax,[edx+0x30]
1000338f:	88 85 49 ff ff ff    	mov    BYTE PTR [ebp-0xb7],al
10003395:	8a 85 41 ff ff ff    	mov    al,BYTE PTR [ebp-0xbf]
1000339b:	0f b6 c8             	movzx  ecx,al
1000339e:	b8 67 66 66 66       	mov    eax,0x66666667
100033a3:	f7 e9                	imul   ecx
100033a5:	c1 fa 02             	sar    edx,0x2
100033a8:	89 c8                	mov    eax,ecx
100033aa:	c1 f8 1f             	sar    eax,0x1f
100033ad:	29 c2                	sub    edx,eax
100033af:	89 d0                	mov    eax,edx
100033b1:	83 c0 30             	add    eax,0x30
100033b4:	88 85 4b ff ff ff    	mov    BYTE PTR [ebp-0xb5],al
100033ba:	8a 85 41 ff ff ff    	mov    al,BYTE PTR [ebp-0xbf]
100033c0:	0f b6 c8             	movzx  ecx,al
100033c3:	b8 67 66 66 66       	mov    eax,0x66666667
100033c8:	f7 e9                	imul   ecx
100033ca:	c1 fa 02             	sar    edx,0x2
100033cd:	89 c8                	mov    eax,ecx
100033cf:	c1 f8 1f             	sar    eax,0x1f
100033d2:	29 c2                	sub    edx,eax
100033d4:	89 d0                	mov    eax,edx
100033d6:	c1 e0 02             	shl    eax,0x2
100033d9:	01 d0                	add    eax,edx
100033db:	01 c0                	add    eax,eax
100033dd:	29 c1                	sub    ecx,eax
100033df:	89 ca                	mov    edx,ecx
100033e1:	88 d0                	mov    al,dl
100033e3:	83 c0 30             	add    eax,0x30
100033e6:	88 85 4c ff ff ff    	mov    BYTE PTR [ebp-0xb4],al
100033ec:	66 8b 85 42 ff ff ff 	mov    ax,WORD PTR [ebp-0xbe]
100033f3:	0f b7 c8             	movzx  ecx,ax
100033f6:	b8 d3 4d 62 10       	mov    eax,0x10624dd3
100033fb:	f7 e9                	imul   ecx
100033fd:	c1 fa 06             	sar    edx,0x6
10003400:	89 c8                	mov    eax,ecx
10003402:	c1 f8 1f             	sar    eax,0x1f
10003405:	29 c2                	sub    edx,eax
10003407:	89 d0                	mov    eax,edx
10003409:	b9 0a 00 00 00       	mov    ecx,0xa
1000340e:	99                   	cdq    
1000340f:	f7 f9                	idiv   ecx
10003411:	89 d0                	mov    eax,edx
10003413:	83 c0 30             	add    eax,0x30
10003416:	88 85 4e ff ff ff    	mov    BYTE PTR [ebp-0xb2],al
1000341c:	66 8b 85 42 ff ff ff 	mov    ax,WORD PTR [ebp-0xbe]
10003423:	0f b7 c8             	movzx  ecx,ax
10003426:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
1000342b:	f7 e9                	imul   ecx
1000342d:	c1 fa 05             	sar    edx,0x5
10003430:	89 c8                	mov    eax,ecx
10003432:	c1 f8 1f             	sar    eax,0x1f
10003435:	29 c2                	sub    edx,eax
10003437:	89 d0                	mov    eax,edx
10003439:	b9 0a 00 00 00       	mov    ecx,0xa
1000343e:	99                   	cdq    
1000343f:	f7 f9                	idiv   ecx
10003441:	89 d0                	mov    eax,edx
10003443:	83 c0 30             	add    eax,0x30
10003446:	88 85 4f ff ff ff    	mov    BYTE PTR [ebp-0xb1],al
1000344c:	66 8b 85 42 ff ff ff 	mov    ax,WORD PTR [ebp-0xbe]
10003453:	0f b7 c8             	movzx  ecx,ax
10003456:	b8 67 66 66 66       	mov    eax,0x66666667
1000345b:	f7 e9                	imul   ecx
1000345d:	c1 fa 02             	sar    edx,0x2
10003460:	89 c8                	mov    eax,ecx
10003462:	c1 f8 1f             	sar    eax,0x1f
10003465:	89 d1                	mov    ecx,edx
10003467:	29 c1                	sub    ecx,eax
10003469:	b8 67 66 66 66       	mov    eax,0x66666667
1000346e:	f7 e9                	imul   ecx
10003470:	c1 fa 02             	sar    edx,0x2
10003473:	89 c8                	mov    eax,ecx
10003475:	c1 f8 1f             	sar    eax,0x1f
10003478:	29 c2                	sub    edx,eax
1000347a:	89 d0                	mov    eax,edx
1000347c:	c1 e0 02             	shl    eax,0x2
1000347f:	01 d0                	add    eax,edx
10003481:	01 c0                	add    eax,eax
10003483:	29 c1                	sub    ecx,eax
10003485:	89 ca                	mov    edx,ecx
10003487:	88 d0                	mov    al,dl
10003489:	83 c0 30             	add    eax,0x30
1000348c:	88 85 50 ff ff ff    	mov    BYTE PTR [ebp-0xb0],al
10003492:	66 8b 85 42 ff ff ff 	mov    ax,WORD PTR [ebp-0xbe]
10003499:	0f b7 c0             	movzx  eax,ax
1000349c:	b9 0a 00 00 00       	mov    ecx,0xa
100034a1:	99                   	cdq    
100034a2:	f7 f9                	idiv   ecx
100034a4:	89 d0                	mov    eax,edx
100034a6:	83 c0 30             	add    eax,0x30
100034a9:	88 85 51 ff ff ff    	mov    BYTE PTR [ebp-0xaf],al
100034af:	8a 85 44 ff ff ff    	mov    al,BYTE PTR [ebp-0xbc]
100034b5:	0f b6 d0             	movzx  edx,al
100034b8:	89 d0                	mov    eax,edx
100034ba:	c1 e0 02             	shl    eax,0x2
100034bd:	01 d0                	add    eax,edx
100034bf:	c1 e0 03             	shl    eax,0x3
100034c2:	01 d0                	add    eax,edx
100034c4:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
100034cb:	01 d0                	add    eax,edx
100034cd:	66 c1 e8 08          	shr    ax,0x8
100034d1:	c0 e8 03             	shr    al,0x3
100034d4:	83 c0 30             	add    eax,0x30
100034d7:	88 85 53 ff ff ff    	mov    BYTE PTR [ebp-0xad],al
100034dd:	8a 8d 44 ff ff ff    	mov    cl,BYTE PTR [ebp-0xbc]
100034e3:	0f b6 d1             	movzx  edx,cl
100034e6:	89 d0                	mov    eax,edx
100034e8:	c1 e0 02             	shl    eax,0x2
100034eb:	01 d0                	add    eax,edx
100034ed:	c1 e0 03             	shl    eax,0x3
100034f0:	01 d0                	add    eax,edx
100034f2:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
100034f9:	01 d0                	add    eax,edx
100034fb:	66 c1 e8 08          	shr    ax,0x8
100034ff:	88 c2                	mov    dl,al
10003501:	c0 ea 03             	shr    dl,0x3
10003504:	88 d0                	mov    al,dl
10003506:	c1 e0 02             	shl    eax,0x2
10003509:	01 d0                	add    eax,edx
1000350b:	d1 e0                	shl    eax,1
1000350d:	29 c1                	sub    ecx,eax
1000350f:	88 ca                	mov    dl,cl
10003511:	8d 42 30             	lea    eax,[edx+0x30]
10003514:	88 85 54 ff ff ff    	mov    BYTE PTR [ebp-0xac],al
1000351a:	8a 85 45 ff ff ff    	mov    al,BYTE PTR [ebp-0xbb]
10003520:	0f b6 d0             	movzx  edx,al
10003523:	89 d0                	mov    eax,edx
10003525:	c1 e0 02             	shl    eax,0x2
10003528:	01 d0                	add    eax,edx
1000352a:	c1 e0 03             	shl    eax,0x3
1000352d:	01 d0                	add    eax,edx
1000352f:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10003536:	01 d0                	add    eax,edx
10003538:	66 c1 e8 08          	shr    ax,0x8
1000353c:	c0 e8 03             	shr    al,0x3
1000353f:	83 c0 30             	add    eax,0x30
10003542:	88 85 56 ff ff ff    	mov    BYTE PTR [ebp-0xaa],al
10003548:	8a 8d 45 ff ff ff    	mov    cl,BYTE PTR [ebp-0xbb]
1000354e:	0f b6 d1             	movzx  edx,cl
10003551:	89 d0                	mov    eax,edx
10003553:	c1 e0 02             	shl    eax,0x2
10003556:	01 d0                	add    eax,edx
10003558:	c1 e0 03             	shl    eax,0x3
1000355b:	01 d0                	add    eax,edx
1000355d:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10003564:	01 d0                	add    eax,edx
10003566:	66 c1 e8 08          	shr    ax,0x8
1000356a:	88 c2                	mov    dl,al
1000356c:	c0 ea 03             	shr    dl,0x3
1000356f:	88 d0                	mov    al,dl
10003571:	c1 e0 02             	shl    eax,0x2
10003574:	01 d0                	add    eax,edx
10003576:	d1 e0                	shl    eax,1
10003578:	29 c1                	sub    ecx,eax
1000357a:	88 ca                	mov    dl,cl
1000357c:	8d 42 30             	lea    eax,[edx+0x30]
1000357f:	88 85 57 ff ff ff    	mov    BYTE PTR [ebp-0xa9],al
10003585:	8a 85 46 ff ff ff    	mov    al,BYTE PTR [ebp-0xba]
1000358b:	0f b6 d0             	movzx  edx,al
1000358e:	89 d0                	mov    eax,edx
10003590:	c1 e0 02             	shl    eax,0x2
10003593:	01 d0                	add    eax,edx
10003595:	c1 e0 03             	shl    eax,0x3
10003598:	01 d0                	add    eax,edx
1000359a:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
100035a1:	01 d0                	add    eax,edx
100035a3:	66 c1 e8 08          	shr    ax,0x8
100035a7:	c0 e8 03             	shr    al,0x3
100035aa:	83 c0 30             	add    eax,0x30
100035ad:	88 85 59 ff ff ff    	mov    BYTE PTR [ebp-0xa7],al
100035b3:	8a 8d 46 ff ff ff    	mov    cl,BYTE PTR [ebp-0xba]
100035b9:	0f b6 d1             	movzx  edx,cl
100035bc:	89 d0                	mov    eax,edx
100035be:	c1 e0 02             	shl    eax,0x2
100035c1:	01 d0                	add    eax,edx
100035c3:	c1 e0 03             	shl    eax,0x3
100035c6:	01 d0                	add    eax,edx
100035c8:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
100035cf:	01 d0                	add    eax,edx
100035d1:	66 c1 e8 08          	shr    ax,0x8
100035d5:	88 c2                	mov    dl,al
100035d7:	c0 ea 03             	shr    dl,0x3
100035da:	88 d0                	mov    al,dl
100035dc:	c1 e0 02             	shl    eax,0x2
100035df:	01 d0                	add    eax,edx
100035e1:	d1 e0                	shl    eax,1
100035e3:	29 c1                	sub    ecx,eax
100035e5:	88 ca                	mov    dl,cl
100035e7:	8d 42 30             	lea    eax,[edx+0x30]
100035ea:	88 85 5a ff ff ff    	mov    BYTE PTR [ebp-0xa6],al
100035f0:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
100035f7:	a1 00 00 00 00       	mov    eax,ds:0x0	100035f8: R_386_32	term
100035fc:	83 ec 04             	sub    esp,0x4
100035ff:	6a 05                	push   0x5
10003601:	6a 18                	push   0x18
10003603:	50                   	push   eax
10003604:	e8 fc ff ff ff       	call   10003605 <firstRun(bool)+0xc66>	10003605: R_386_PC32	VgaText::setCursor(int, int)
10003609:	83 c4 10             	add    esp,0x10
1000360c:	a1 00 00 00 00       	mov    eax,ds:0x0	1000360d: R_386_32	term
10003611:	83 ec 08             	sub    esp,0x8
10003614:	68 84 8b 00 10       	push   0x10008b84	10003615: R_386_32	.text
10003619:	50                   	push   eax
1000361a:	e8 fc ff ff ff       	call   1000361b <firstRun(bool)+0xc7c>	1000361b: R_386_PC32	VgaText::puts(char const*)
1000361f:	83 c4 10             	add    esp,0x10
10003622:	a1 00 00 00 00       	mov    eax,ds:0x0	10003623: R_386_32	term
10003627:	83 ec 04             	sub    esp,0x4
1000362a:	6a 06                	push   0x6
1000362c:	6a 18                	push   0x18
1000362e:	50                   	push   eax
1000362f:	e8 fc ff ff ff       	call   10003630 <firstRun(bool)+0xc91>	10003630: R_386_PC32	VgaText::setCursor(int, int)
10003634:	83 c4 10             	add    esp,0x10
10003637:	a1 00 00 00 00       	mov    eax,ds:0x0	10003638: R_386_32	term
1000363c:	83 ec 08             	sub    esp,0x8
1000363f:	68 ac 8b 00 10       	push   0x10008bac	10003640: R_386_32	.text
10003644:	50                   	push   eax
10003645:	e8 fc ff ff ff       	call   10003646 <firstRun(bool)+0xca7>	10003646: R_386_PC32	VgaText::puts(char const*)
1000364a:	83 c4 10             	add    esp,0x10
1000364d:	a1 00 00 00 00       	mov    eax,ds:0x0	1000364e: R_386_32	term
10003652:	83 ec 04             	sub    esp,0x4
10003655:	6a 09                	push   0x9
10003657:	6a 1a                	push   0x1a
10003659:	50                   	push   eax
1000365a:	e8 fc ff ff ff       	call   1000365b <firstRun(bool)+0xcbc>	1000365b: R_386_PC32	VgaText::setCursor(int, int)
1000365f:	83 c4 10             	add    esp,0x10
10003662:	a1 00 00 00 00       	mov    eax,ds:0x0	10003663: R_386_32	term
10003667:	6a 0f                	push   0xf
10003669:	6a 07                	push   0x7
1000366b:	68 c2 8b 00 10       	push   0x10008bc2	1000366c: R_386_32	.text
10003670:	50                   	push   eax
10003671:	e8 fc ff ff ff       	call   10003672 <firstRun(bool)+0xcd3>	10003672: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10003676:	83 c4 10             	add    esp,0x10
10003679:	a1 00 00 00 00       	mov    eax,ds:0x0	1000367a: R_386_32	term
1000367e:	83 ec 04             	sub    esp,0x4
10003681:	6a 18                	push   0x18
10003683:	6a 11                	push   0x11
10003685:	50                   	push   eax
10003686:	e8 fc ff ff ff       	call   10003687 <firstRun(bool)+0xce8>	10003687: R_386_PC32	VgaText::setCursor(int, int)
1000368b:	83 c4 10             	add    esp,0x10
1000368e:	a1 00 00 00 00       	mov    eax,ds:0x0	1000368f: R_386_32	term
10003693:	6a 0b                	push   0xb
10003695:	6a 03                	push   0x3
10003697:	68 d6 8b 00 10       	push   0x10008bd6	10003698: R_386_32	.text
1000369c:	50                   	push   eax
1000369d:	e8 fc ff ff ff       	call   1000369e <firstRun(bool)+0xcff>	1000369e: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
100036a2:	83 c4 10             	add    esp,0x10
100036a5:	a1 00 00 00 00       	mov    eax,ds:0x0	100036a6: R_386_32	term
100036aa:	83 ec 04             	sub    esp,0x4
100036ad:	6a 08                	push   0x8
100036af:	6a 1a                	push   0x1a
100036b1:	50                   	push   eax
100036b2:	e8 fc ff ff ff       	call   100036b3 <firstRun(bool)+0xd14>	100036b3: R_386_PC32	VgaText::setCursor(int, int)
100036b7:	83 c4 10             	add    esp,0x10
100036ba:	a1 00 00 00 00       	mov    eax,ds:0x0	100036bb: R_386_32	term
100036bf:	83 ec 08             	sub    esp,0x8
100036c2:	8d 95 48 ff ff ff    	lea    edx,[ebp-0xb8]
100036c8:	52                   	push   edx
100036c9:	50                   	push   eax
100036ca:	e8 fc ff ff ff       	call   100036cb <firstRun(bool)+0xd2c>	100036cb: R_386_PC32	VgaText::puts(char const*)
100036cf:	83 c4 10             	add    esp,0x10
100036d2:	a1 00 00 00 00       	mov    eax,ds:0x0	100036d3: R_386_32	term
100036d7:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
100036da:	83 c2 1a             	add    edx,0x1a
100036dd:	83 ec 04             	sub    esp,0x4
100036e0:	6a 08                	push   0x8
100036e2:	52                   	push   edx
100036e3:	50                   	push   eax
100036e4:	e8 fc ff ff ff       	call   100036e5 <firstRun(bool)+0xd46>	100036e5: R_386_PC32	VgaText::setCursor(int, int)
100036e9:	83 c4 10             	add    esp,0x10
100036ec:	a1 00 00 00 00       	mov    eax,ds:0x0	100036ed: R_386_32	term
100036f1:	8d 8d 48 ff ff ff    	lea    ecx,[ebp-0xb8]
100036f7:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
100036fa:	01 ca                	add    edx,ecx
100036fc:	8a 12                	mov    dl,BYTE PTR [edx]
100036fe:	0f be d2             	movsx  edx,dl
10003701:	6a 00                	push   0x0
10003703:	6a 0f                	push   0xf
10003705:	52                   	push   edx
10003706:	50                   	push   eax
10003707:	e8 fc ff ff ff       	call   10003708 <firstRun(bool)+0xd69>	10003708: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
1000370c:	83 c4 10             	add    esp,0x10
1000370f:	8a 85 53 ff ff ff    	mov    al,BYTE PTR [ebp-0xad]
10003715:	0f be c0             	movsx  eax,al
10003718:	8d 50 d0             	lea    edx,[eax-0x30]
1000371b:	89 d0                	mov    eax,edx
1000371d:	c1 e0 02             	shl    eax,0x2
10003720:	01 d0                	add    eax,edx
10003722:	01 c0                	add    eax,eax
10003724:	89 c2                	mov    edx,eax
10003726:	8a 85 54 ff ff ff    	mov    al,BYTE PTR [ebp-0xac]
1000372c:	0f be c0             	movsx  eax,al
1000372f:	83 e8 30             	sub    eax,0x30
10003732:	01 d0                	add    eax,edx
10003734:	89 45 bc             	mov    DWORD PTR [ebp-0x44],eax
10003737:	8b 45 bc             	mov    eax,DWORD PTR [ebp-0x44]
1000373a:	b9 0c 00 00 00       	mov    ecx,0xc
1000373f:	99                   	cdq    
10003740:	f7 f9                	idiv   ecx
10003742:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
10003745:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
10003749:	75 07                	jne    10003752 <firstRun(bool)+0xdb3>
1000374b:	c7 45 d0 0c 00 00 00 	mov    DWORD PTR [ebp-0x30],0xc
10003752:	8a 85 56 ff ff ff    	mov    al,BYTE PTR [ebp-0xaa]
10003758:	0f be c0             	movsx  eax,al
1000375b:	8d 50 d0             	lea    edx,[eax-0x30]
1000375e:	89 d0                	mov    eax,edx
10003760:	c1 e0 02             	shl    eax,0x2
10003763:	01 d0                	add    eax,edx
10003765:	01 c0                	add    eax,eax
10003767:	89 c2                	mov    edx,eax
10003769:	8a 85 57 ff ff ff    	mov    al,BYTE PTR [ebp-0xa9]
1000376f:	0f be c0             	movsx  eax,al
10003772:	83 e8 30             	sub    eax,0x30
10003775:	01 d0                	add    eax,edx
10003777:	89 45 b8             	mov    DWORD PTR [ebp-0x48],eax
1000377a:	83 ec 04             	sub    esp,0x4
1000377d:	6a 10                	push   0x10
1000377f:	6a 00                	push   0x0
10003781:	8d 85 22 ff ff ff    	lea    eax,[ebp-0xde]
10003787:	50                   	push   eax
10003788:	e8 fc ff ff ff       	call   10003789 <firstRun(bool)+0xdea>	10003789: R_386_PC32	memset
1000378d:	83 c4 10             	add    esp,0x10
10003790:	c7 45 b4 00 00 00 00 	mov    DWORD PTR [ebp-0x4c],0x0
10003797:	8b 45 b4             	mov    eax,DWORD PTR [ebp-0x4c]
1000379a:	8d 50 01             	lea    edx,[eax+0x1]
1000379d:	89 55 b4             	mov    DWORD PTR [ebp-0x4c],edx
100037a0:	c6 84 05 22 ff ff ff 28 	mov    BYTE PTR [ebp+eax*1-0xde],0x28
100037a8:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
100037ab:	b8 67 66 66 66       	mov    eax,0x66666667
100037b0:	f7 e9                	imul   ecx
100037b2:	c1 fa 02             	sar    edx,0x2
100037b5:	89 c8                	mov    eax,ecx
100037b7:	c1 f8 1f             	sar    eax,0x1f
100037ba:	29 c2                	sub    edx,eax
100037bc:	89 d0                	mov    eax,edx
100037be:	8d 48 30             	lea    ecx,[eax+0x30]
100037c1:	8b 45 b4             	mov    eax,DWORD PTR [ebp-0x4c]
100037c4:	8d 50 01             	lea    edx,[eax+0x1]
100037c7:	89 55 b4             	mov    DWORD PTR [ebp-0x4c],edx
100037ca:	88 ca                	mov    dl,cl
100037cc:	88 94 05 22 ff ff ff 	mov    BYTE PTR [ebp+eax*1-0xde],dl
100037d3:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
100037d6:	b8 67 66 66 66       	mov    eax,0x66666667
100037db:	f7 e9                	imul   ecx
100037dd:	c1 fa 02             	sar    edx,0x2
100037e0:	89 c8                	mov    eax,ecx
100037e2:	c1 f8 1f             	sar    eax,0x1f
100037e5:	29 c2                	sub    edx,eax
100037e7:	89 d0                	mov    eax,edx
100037e9:	c1 e0 02             	shl    eax,0x2
100037ec:	01 d0                	add    eax,edx
100037ee:	01 c0                	add    eax,eax
100037f0:	29 c1                	sub    ecx,eax
100037f2:	89 ca                	mov    edx,ecx
100037f4:	88 d0                	mov    al,dl
100037f6:	8d 48 30             	lea    ecx,[eax+0x30]
100037f9:	8b 45 b4             	mov    eax,DWORD PTR [ebp-0x4c]
100037fc:	8d 50 01             	lea    edx,[eax+0x1]
100037ff:	89 55 b4             	mov    DWORD PTR [ebp-0x4c],edx
10003802:	88 ca                	mov    dl,cl
10003804:	88 94 05 22 ff ff ff 	mov    BYTE PTR [ebp+eax*1-0xde],dl
1000380b:	8b 45 b4             	mov    eax,DWORD PTR [ebp-0x4c]
1000380e:	8d 50 01             	lea    edx,[eax+0x1]
10003811:	89 55 b4             	mov    DWORD PTR [ebp-0x4c],edx
10003814:	c6 84 05 22 ff ff ff 3a 	mov    BYTE PTR [ebp+eax*1-0xde],0x3a
1000381c:	8b 4d b8             	mov    ecx,DWORD PTR [ebp-0x48]
1000381f:	b8 67 66 66 66       	mov    eax,0x66666667
10003824:	f7 e9                	imul   ecx
10003826:	c1 fa 02             	sar    edx,0x2
10003829:	89 c8                	mov    eax,ecx
1000382b:	c1 f8 1f             	sar    eax,0x1f
1000382e:	29 c2                	sub    edx,eax
10003830:	89 d0                	mov    eax,edx
10003832:	8d 48 30             	lea    ecx,[eax+0x30]
10003835:	8b 45 b4             	mov    eax,DWORD PTR [ebp-0x4c]
10003838:	8d 50 01             	lea    edx,[eax+0x1]
1000383b:	89 55 b4             	mov    DWORD PTR [ebp-0x4c],edx
1000383e:	88 ca                	mov    dl,cl
10003840:	88 94 05 22 ff ff ff 	mov    BYTE PTR [ebp+eax*1-0xde],dl
10003847:	8b 4d b8             	mov    ecx,DWORD PTR [ebp-0x48]
1000384a:	b8 67 66 66 66       	mov    eax,0x66666667
1000384f:	f7 e9                	imul   ecx
10003851:	c1 fa 02             	sar    edx,0x2
10003854:	89 c8                	mov    eax,ecx
10003856:	c1 f8 1f             	sar    eax,0x1f
10003859:	29 c2                	sub    edx,eax
1000385b:	89 d0                	mov    eax,edx
1000385d:	c1 e0 02             	shl    eax,0x2
10003860:	01 d0                	add    eax,edx
10003862:	01 c0                	add    eax,eax
10003864:	29 c1                	sub    ecx,eax
10003866:	89 ca                	mov    edx,ecx
10003868:	88 d0                	mov    al,dl
1000386a:	8d 48 30             	lea    ecx,[eax+0x30]
1000386d:	8b 45 b4             	mov    eax,DWORD PTR [ebp-0x4c]
10003870:	8d 50 01             	lea    edx,[eax+0x1]
10003873:	89 55 b4             	mov    DWORD PTR [ebp-0x4c],edx
10003876:	88 ca                	mov    dl,cl
10003878:	88 94 05 22 ff ff ff 	mov    BYTE PTR [ebp+eax*1-0xde],dl
1000387f:	8b 45 b4             	mov    eax,DWORD PTR [ebp-0x4c]
10003882:	8d 50 01             	lea    edx,[eax+0x1]
10003885:	89 55 b4             	mov    DWORD PTR [ebp-0x4c],edx
10003888:	c6 84 05 22 ff ff ff 20 	mov    BYTE PTR [ebp+eax*1-0xde],0x20
10003890:	83 7d bc 0b          	cmp    DWORD PTR [ebp-0x44],0xb
10003894:	7e 04                	jle    1000389a <firstRun(bool)+0xefb>
10003896:	b2 50                	mov    dl,0x50
10003898:	eb 02                	jmp    1000389c <firstRun(bool)+0xefd>
1000389a:	b2 41                	mov    dl,0x41
1000389c:	8b 45 b4             	mov    eax,DWORD PTR [ebp-0x4c]
1000389f:	8d 48 01             	lea    ecx,[eax+0x1]
100038a2:	89 4d b4             	mov    DWORD PTR [ebp-0x4c],ecx
100038a5:	88 94 05 22 ff ff ff 	mov    BYTE PTR [ebp+eax*1-0xde],dl
100038ac:	8b 45 b4             	mov    eax,DWORD PTR [ebp-0x4c]
100038af:	8d 50 01             	lea    edx,[eax+0x1]
100038b2:	89 55 b4             	mov    DWORD PTR [ebp-0x4c],edx
100038b5:	c6 84 05 22 ff ff ff 4d 	mov    BYTE PTR [ebp+eax*1-0xde],0x4d
100038bd:	8b 45 b4             	mov    eax,DWORD PTR [ebp-0x4c]
100038c0:	8d 50 01             	lea    edx,[eax+0x1]
100038c3:	89 55 b4             	mov    DWORD PTR [ebp-0x4c],edx
100038c6:	c6 84 05 22 ff ff ff 29 	mov    BYTE PTR [ebp+eax*1-0xde],0x29
100038ce:	8b 1d 00 00 00 00    	mov    ebx,DWORD PTR ds:0x0	100038d0: R_386_32	term
100038d4:	83 ec 0c             	sub    esp,0xc
100038d7:	8d 85 48 ff ff ff    	lea    eax,[ebp-0xb8]
100038dd:	50                   	push   eax
100038de:	e8 fc ff ff ff       	call   100038df <firstRun(bool)+0xf40>	100038df: R_386_PC32	strlen
100038e3:	83 c4 10             	add    esp,0x10
100038e6:	83 c0 1e             	add    eax,0x1e
100038e9:	83 ec 04             	sub    esp,0x4
100038ec:	6a 08                	push   0x8
100038ee:	50                   	push   eax
100038ef:	53                   	push   ebx
100038f0:	e8 fc ff ff ff       	call   100038f1 <firstRun(bool)+0xf52>	100038f1: R_386_PC32	VgaText::setCursor(int, int)
100038f5:	83 c4 10             	add    esp,0x10
100038f8:	a1 00 00 00 00       	mov    eax,ds:0x0	100038f9: R_386_32	term
100038fd:	83 ec 08             	sub    esp,0x8
10003900:	8d 95 22 ff ff ff    	lea    edx,[ebp-0xde]
10003906:	52                   	push   edx
10003907:	50                   	push   eax
10003908:	e8 fc ff ff ff       	call   10003909 <firstRun(bool)+0xf6a>	10003909: R_386_PC32	VgaText::puts(char const*)
1000390d:	83 c4 10             	add    esp,0x10
10003910:	a1 00 00 00 00       	mov    eax,ds:0x0	10003911: R_386_32	term
10003915:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10003918:	83 c2 1a             	add    edx,0x1a
1000391b:	83 ec 04             	sub    esp,0x4
1000391e:	6a 08                	push   0x8
10003920:	52                   	push   edx
10003921:	50                   	push   eax
10003922:	e8 fc ff ff ff       	call   10003923 <firstRun(bool)+0xf84>	10003923: R_386_PC32	VgaText::setCursor(int, int)
10003927:	83 c4 10             	add    esp,0x10
1000392a:	a0 00 00 00 00       	mov    al,ds:0x0	1000392b: R_386_32	installKey
1000392f:	84 c0                	test   al,al
10003931:	0f 94 c0             	sete   al
10003934:	84 c0                	test   al,al
10003936:	74 02                	je     1000393a <firstRun(bool)+0xf9b>
10003938:	eb f0                	jmp    1000392a <firstRun(bool)+0xf8b>
1000393a:	a1 00 00 00 00       	mov    eax,ds:0x0	1000393b: R_386_32	term
1000393f:	05 82 00 00 00       	add    eax,0x82
10003944:	83 ec 04             	sub    esp,0x4
10003947:	6a 10                	push   0x10
10003949:	6a 00                	push   0x0
1000394b:	50                   	push   eax
1000394c:	e8 fc ff ff ff       	call   1000394d <firstRun(bool)+0xfae>	1000394d: R_386_PC32	memset
10003951:	83 c4 10             	add    esp,0x10
10003954:	a1 00 00 00 00       	mov    eax,ds:0x0	10003955: R_386_32	term
10003959:	05 02 01 00 00       	add    eax,0x102
1000395e:	83 ec 04             	sub    esp,0x4
10003961:	6a 10                	push   0x10
10003963:	6a 00                	push   0x0
10003965:	50                   	push   eax
10003966:	e8 fc ff ff ff       	call   10003967 <firstRun(bool)+0xfc8>	10003967: R_386_PC32	memset
1000396b:	83 c4 10             	add    esp,0x10
1000396e:	a0 00 00 00 00       	mov    al,ds:0x0	1000396f: R_386_32	installKey
10003973:	3c 03                	cmp    al,0x3
10003975:	74 09                	je     10003980 <firstRun(bool)+0xfe1>
10003977:	a0 00 00 00 00       	mov    al,ds:0x0	10003978: R_386_32	installKey
1000397c:	3c 08                	cmp    al,0x8
1000397e:	75 04                	jne    10003984 <firstRun(bool)+0xfe5>
10003980:	b0 01                	mov    al,0x1
10003982:	eb 02                	jmp    10003986 <firstRun(bool)+0xfe7>
10003984:	b0 00                	mov    al,0x0
10003986:	84 c0                	test   al,al
10003988:	74 58                	je     100039e2 <firstRun(bool)+0x1043>
1000398a:	ff 4d e4             	dec    DWORD PTR [ebp-0x1c]
1000398d:	83 7d e4 ff          	cmp    DWORD PTR [ebp-0x1c],0xffffffff
10003991:	75 16                	jne    100039a9 <firstRun(bool)+0x100a>
10003993:	83 ec 0c             	sub    esp,0xc
10003996:	8d 85 48 ff ff ff    	lea    eax,[ebp-0xb8]
1000399c:	50                   	push   eax
1000399d:	e8 fc ff ff ff       	call   1000399e <firstRun(bool)+0xfff>	1000399e: R_386_PC32	strlen
100039a2:	83 c4 10             	add    esp,0x10
100039a5:	48                   	dec    eax
100039a6:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
100039a9:	8d 95 48 ff ff ff    	lea    edx,[ebp-0xb8]
100039af:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
100039b2:	01 d0                	add    eax,edx
100039b4:	8a 00                	mov    al,BYTE PTR [eax]
100039b6:	3c 20                	cmp    al,0x20
100039b8:	74 d0                	je     1000398a <firstRun(bool)+0xfeb>
100039ba:	8d 95 48 ff ff ff    	lea    edx,[ebp-0xb8]
100039c0:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
100039c3:	01 d0                	add    eax,edx
100039c5:	8a 00                	mov    al,BYTE PTR [eax]
100039c7:	3c 2f                	cmp    al,0x2f
100039c9:	74 bf                	je     1000398a <firstRun(bool)+0xfeb>
100039cb:	8d 95 48 ff ff ff    	lea    edx,[ebp-0xb8]
100039d1:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
100039d4:	01 d0                	add    eax,edx
100039d6:	8a 00                	mov    al,BYTE PTR [eax]
100039d8:	3c 3a                	cmp    al,0x3a
100039da:	0f 85 5e 04 00 00    	jne    10003e3e <firstRun(bool)+0x149f>
100039e0:	eb a8                	jmp    1000398a <firstRun(bool)+0xfeb>
100039e2:	a0 00 00 00 00       	mov    al,ds:0x0	100039e3: R_386_32	installKey
100039e7:	3c 2f                	cmp    al,0x2f
100039e9:	7e 09                	jle    100039f4 <firstRun(bool)+0x1055>
100039eb:	a0 00 00 00 00       	mov    al,ds:0x0	100039ec: R_386_32	installKey
100039f0:	3c 39                	cmp    al,0x39
100039f2:	7e 12                	jle    10003a06 <firstRun(bool)+0x1067>
100039f4:	a0 00 00 00 00       	mov    al,ds:0x0	100039f5: R_386_32	installKey
100039f9:	3c 20                	cmp    al,0x20
100039fb:	74 09                	je     10003a06 <firstRun(bool)+0x1067>
100039fd:	a0 00 00 00 00       	mov    al,ds:0x0	100039fe: R_386_32	installKey
10003a02:	3c 04                	cmp    al,0x4
10003a04:	75 04                	jne    10003a0a <firstRun(bool)+0x106b>
10003a06:	b0 01                	mov    al,0x1
10003a08:	eb 02                	jmp    10003a0c <firstRun(bool)+0x106d>
10003a0a:	b0 00                	mov    al,0x0
10003a0c:	84 c0                	test   al,al
10003a0e:	0f 84 cf 01 00 00    	je     10003be3 <firstRun(bool)+0x1244>
10003a14:	a0 00 00 00 00       	mov    al,ds:0x0	10003a15: R_386_32	installKey
10003a19:	3c 2f                	cmp    al,0x2f
10003a1b:	7e 0d                	jle    10003a2a <firstRun(bool)+0x108b>
10003a1d:	a0 00 00 00 00       	mov    al,ds:0x0	10003a1e: R_386_32	installKey
10003a22:	3c 39                	cmp    al,0x39
10003a24:	7f 04                	jg     10003a2a <firstRun(bool)+0x108b>
10003a26:	b0 01                	mov    al,0x1
10003a28:	eb 02                	jmp    10003a2c <firstRun(bool)+0x108d>
10003a2a:	b0 00                	mov    al,0x0
10003a2c:	84 c0                	test   al,al
10003a2e:	0f 84 51 01 00 00    	je     10003b85 <firstRun(bool)+0x11e6>
10003a34:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
10003a38:	75 0d                	jne    10003a47 <firstRun(bool)+0x10a8>
10003a3a:	a0 00 00 00 00       	mov    al,ds:0x0	10003a3b: R_386_32	installKey
10003a3f:	3c 33                	cmp    al,0x33
10003a41:	7e 04                	jle    10003a47 <firstRun(bool)+0x10a8>
10003a43:	b0 01                	mov    al,0x1
10003a45:	eb 02                	jmp    10003a49 <firstRun(bool)+0x10aa>
10003a47:	b0 00                	mov    al,0x0
10003a49:	84 c0                	test   al,al
10003a4b:	74 28                	je     10003a75 <firstRun(bool)+0x10d6>
10003a4d:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10003a50:	8d 50 01             	lea    edx,[eax+0x1]
10003a53:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
10003a56:	c6 84 05 48 ff ff ff 30 	mov    BYTE PTR [ebp+eax*1-0xb8],0x30
10003a5e:	a0 00 00 00 00       	mov    al,ds:0x0	10003a5f: R_386_32	installKey
10003a63:	8d 8d 48 ff ff ff    	lea    ecx,[ebp-0xb8]
10003a69:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10003a6c:	01 ca                	add    edx,ecx
10003a6e:	88 02                	mov    BYTE PTR [edx],al
10003a70:	e9 10 01 00 00       	jmp    10003b85 <firstRun(bool)+0x11e6>
10003a75:	83 7d e4 03          	cmp    DWORD PTR [ebp-0x1c],0x3
10003a79:	75 0d                	jne    10003a88 <firstRun(bool)+0x10e9>
10003a7b:	a0 00 00 00 00       	mov    al,ds:0x0	10003a7c: R_386_32	installKey
10003a80:	3c 31                	cmp    al,0x31
10003a82:	7e 04                	jle    10003a88 <firstRun(bool)+0x10e9>
10003a84:	b0 01                	mov    al,0x1
10003a86:	eb 02                	jmp    10003a8a <firstRun(bool)+0x10eb>
10003a88:	b0 00                	mov    al,0x0
10003a8a:	84 c0                	test   al,al
10003a8c:	74 28                	je     10003ab6 <firstRun(bool)+0x1117>
10003a8e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10003a91:	8d 50 01             	lea    edx,[eax+0x1]
10003a94:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
10003a97:	c6 84 05 48 ff ff ff 30 	mov    BYTE PTR [ebp+eax*1-0xb8],0x30
10003a9f:	a0 00 00 00 00       	mov    al,ds:0x0	10003aa0: R_386_32	installKey
10003aa4:	8d 8d 48 ff ff ff    	lea    ecx,[ebp-0xb8]
10003aaa:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10003aad:	01 ca                	add    edx,ecx
10003aaf:	88 02                	mov    BYTE PTR [edx],al
10003ab1:	e9 cf 00 00 00       	jmp    10003b85 <firstRun(bool)+0x11e6>
10003ab6:	83 7d e4 0b          	cmp    DWORD PTR [ebp-0x1c],0xb
10003aba:	75 0d                	jne    10003ac9 <firstRun(bool)+0x112a>
10003abc:	a0 00 00 00 00       	mov    al,ds:0x0	10003abd: R_386_32	installKey
10003ac1:	3c 32                	cmp    al,0x32
10003ac3:	7e 04                	jle    10003ac9 <firstRun(bool)+0x112a>
10003ac5:	b0 01                	mov    al,0x1
10003ac7:	eb 02                	jmp    10003acb <firstRun(bool)+0x112c>
10003ac9:	b0 00                	mov    al,0x0
10003acb:	84 c0                	test   al,al
10003acd:	74 28                	je     10003af7 <firstRun(bool)+0x1158>
10003acf:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10003ad2:	8d 50 01             	lea    edx,[eax+0x1]
10003ad5:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
10003ad8:	c6 84 05 48 ff ff ff 30 	mov    BYTE PTR [ebp+eax*1-0xb8],0x30
10003ae0:	a0 00 00 00 00       	mov    al,ds:0x0	10003ae1: R_386_32	installKey
10003ae5:	8d 8d 48 ff ff ff    	lea    ecx,[ebp-0xb8]
10003aeb:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10003aee:	01 ca                	add    edx,ecx
10003af0:	88 02                	mov    BYTE PTR [edx],al
10003af2:	e9 8e 00 00 00       	jmp    10003b85 <firstRun(bool)+0x11e6>
10003af7:	83 7d e4 0e          	cmp    DWORD PTR [ebp-0x1c],0xe
10003afb:	75 0d                	jne    10003b0a <firstRun(bool)+0x116b>
10003afd:	a0 00 00 00 00       	mov    al,ds:0x0	10003afe: R_386_32	installKey
10003b02:	3c 35                	cmp    al,0x35
10003b04:	7e 04                	jle    10003b0a <firstRun(bool)+0x116b>
10003b06:	b0 01                	mov    al,0x1
10003b08:	eb 02                	jmp    10003b0c <firstRun(bool)+0x116d>
10003b0a:	b0 00                	mov    al,0x0
10003b0c:	84 c0                	test   al,al
10003b0e:	74 25                	je     10003b35 <firstRun(bool)+0x1196>
10003b10:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10003b13:	8d 50 01             	lea    edx,[eax+0x1]
10003b16:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
10003b19:	c6 84 05 48 ff ff ff 30 	mov    BYTE PTR [ebp+eax*1-0xb8],0x30
10003b21:	a0 00 00 00 00       	mov    al,ds:0x0	10003b22: R_386_32	installKey
10003b26:	8d 8d 48 ff ff ff    	lea    ecx,[ebp-0xb8]
10003b2c:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10003b2f:	01 ca                	add    edx,ecx
10003b31:	88 02                	mov    BYTE PTR [edx],al
10003b33:	eb 50                	jmp    10003b85 <firstRun(bool)+0x11e6>
10003b35:	83 7d e4 11          	cmp    DWORD PTR [ebp-0x1c],0x11
10003b39:	75 0d                	jne    10003b48 <firstRun(bool)+0x11a9>
10003b3b:	a0 00 00 00 00       	mov    al,ds:0x0	10003b3c: R_386_32	installKey
10003b40:	3c 35                	cmp    al,0x35
10003b42:	7e 04                	jle    10003b48 <firstRun(bool)+0x11a9>
10003b44:	b0 01                	mov    al,0x1
10003b46:	eb 02                	jmp    10003b4a <firstRun(bool)+0x11ab>
10003b48:	b0 00                	mov    al,0x0
10003b4a:	84 c0                	test   al,al
10003b4c:	74 25                	je     10003b73 <firstRun(bool)+0x11d4>
10003b4e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10003b51:	8d 50 01             	lea    edx,[eax+0x1]
10003b54:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
10003b57:	c6 84 05 48 ff ff ff 30 	mov    BYTE PTR [ebp+eax*1-0xb8],0x30
10003b5f:	a0 00 00 00 00       	mov    al,ds:0x0	10003b60: R_386_32	installKey
10003b64:	8d 8d 48 ff ff ff    	lea    ecx,[ebp-0xb8]
10003b6a:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10003b6d:	01 ca                	add    edx,ecx
10003b6f:	88 02                	mov    BYTE PTR [edx],al
10003b71:	eb 12                	jmp    10003b85 <firstRun(bool)+0x11e6>
10003b73:	a0 00 00 00 00       	mov    al,ds:0x0	10003b74: R_386_32	installKey
10003b78:	8d 8d 48 ff ff ff    	lea    ecx,[ebp-0xb8]
10003b7e:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10003b81:	01 ca                	add    edx,ecx
10003b83:	88 02                	mov    BYTE PTR [edx],al
10003b85:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
10003b88:	83 ec 0c             	sub    esp,0xc
10003b8b:	8d 85 48 ff ff ff    	lea    eax,[ebp-0xb8]
10003b91:	50                   	push   eax
10003b92:	e8 fc ff ff ff       	call   10003b93 <firstRun(bool)+0x11f4>	10003b93: R_386_PC32	strlen
10003b97:	83 c4 10             	add    esp,0x10
10003b9a:	89 c2                	mov    edx,eax
10003b9c:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10003b9f:	39 c2                	cmp    edx,eax
10003ba1:	77 07                	ja     10003baa <firstRun(bool)+0x120b>
10003ba3:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
10003baa:	8d 95 48 ff ff ff    	lea    edx,[ebp-0xb8]
10003bb0:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10003bb3:	01 d0                	add    eax,edx
10003bb5:	8a 00                	mov    al,BYTE PTR [eax]
10003bb7:	3c 20                	cmp    al,0x20
10003bb9:	74 ca                	je     10003b85 <firstRun(bool)+0x11e6>
10003bbb:	8d 95 48 ff ff ff    	lea    edx,[ebp-0xb8]
10003bc1:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10003bc4:	01 d0                	add    eax,edx
10003bc6:	8a 00                	mov    al,BYTE PTR [eax]
10003bc8:	3c 2f                	cmp    al,0x2f
10003bca:	74 b9                	je     10003b85 <firstRun(bool)+0x11e6>
10003bcc:	8d 95 48 ff ff ff    	lea    edx,[ebp-0xb8]
10003bd2:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10003bd5:	01 d0                	add    eax,edx
10003bd7:	8a 00                	mov    al,BYTE PTR [eax]
10003bd9:	3c 3a                	cmp    al,0x3a
10003bdb:	0f 85 5d 02 00 00    	jne    10003e3e <firstRun(bool)+0x149f>
10003be1:	eb a2                	jmp    10003b85 <firstRun(bool)+0x11e6>
10003be3:	a0 00 00 00 00       	mov    al,ds:0x0	10003be4: R_386_32	installKey
10003be8:	3c 0a                	cmp    al,0xa
10003bea:	0f 94 c0             	sete   al
10003bed:	84 c0                	test   al,al
10003bef:	0f 84 37 02 00 00    	je     10003e2c <firstRun(bool)+0x148d>
10003bf5:	8a 85 48 ff ff ff    	mov    al,BYTE PTR [ebp-0xb8]
10003bfb:	0f be c0             	movsx  eax,al
10003bfe:	8d 50 d0             	lea    edx,[eax-0x30]
10003c01:	89 d0                	mov    eax,edx
10003c03:	c1 e0 02             	shl    eax,0x2
10003c06:	01 d0                	add    eax,edx
10003c08:	01 c0                	add    eax,eax
10003c0a:	89 c2                	mov    edx,eax
10003c0c:	8a 85 49 ff ff ff    	mov    al,BYTE PTR [ebp-0xb7]
10003c12:	0f be c0             	movsx  eax,al
10003c15:	83 e8 30             	sub    eax,0x30
10003c18:	01 d0                	add    eax,edx
10003c1a:	89 45 b0             	mov    DWORD PTR [ebp-0x50],eax
10003c1d:	8a 85 4b ff ff ff    	mov    al,BYTE PTR [ebp-0xb5]
10003c23:	0f be c0             	movsx  eax,al
10003c26:	8d 50 d0             	lea    edx,[eax-0x30]
10003c29:	89 d0                	mov    eax,edx
10003c2b:	c1 e0 02             	shl    eax,0x2
10003c2e:	01 d0                	add    eax,edx
10003c30:	01 c0                	add    eax,eax
10003c32:	89 c2                	mov    edx,eax
10003c34:	8a 85 4c ff ff ff    	mov    al,BYTE PTR [ebp-0xb4]
10003c3a:	0f be c0             	movsx  eax,al
10003c3d:	83 e8 30             	sub    eax,0x30
10003c40:	01 d0                	add    eax,edx
10003c42:	89 45 ac             	mov    DWORD PTR [ebp-0x54],eax
10003c45:	8a 85 4e ff ff ff    	mov    al,BYTE PTR [ebp-0xb2]
10003c4b:	0f be c0             	movsx  eax,al
10003c4e:	8d 50 d0             	lea    edx,[eax-0x30]
10003c51:	89 d0                	mov    eax,edx
10003c53:	c1 e0 02             	shl    eax,0x2
10003c56:	01 d0                	add    eax,edx
10003c58:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10003c5f:	01 d0                	add    eax,edx
10003c61:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10003c68:	01 d0                	add    eax,edx
10003c6a:	c1 e0 03             	shl    eax,0x3
10003c6d:	89 c1                	mov    ecx,eax
10003c6f:	8a 85 4f ff ff ff    	mov    al,BYTE PTR [ebp-0xb1]
10003c75:	0f be c0             	movsx  eax,al
10003c78:	8d 50 d0             	lea    edx,[eax-0x30]
10003c7b:	89 d0                	mov    eax,edx
10003c7d:	c1 e0 02             	shl    eax,0x2
10003c80:	01 d0                	add    eax,edx
10003c82:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10003c89:	01 d0                	add    eax,edx
10003c8b:	c1 e0 02             	shl    eax,0x2
10003c8e:	01 c1                	add    ecx,eax
10003c90:	8a 85 50 ff ff ff    	mov    al,BYTE PTR [ebp-0xb0]
10003c96:	0f be c0             	movsx  eax,al
10003c99:	8d 50 d0             	lea    edx,[eax-0x30]
10003c9c:	89 d0                	mov    eax,edx
10003c9e:	c1 e0 02             	shl    eax,0x2
10003ca1:	01 d0                	add    eax,edx
10003ca3:	01 c0                	add    eax,eax
10003ca5:	8d 14 01             	lea    edx,[ecx+eax*1]
10003ca8:	8a 85 51 ff ff ff    	mov    al,BYTE PTR [ebp-0xaf]
10003cae:	0f be c0             	movsx  eax,al
10003cb1:	83 e8 30             	sub    eax,0x30
10003cb4:	01 d0                	add    eax,edx
10003cb6:	89 45 a8             	mov    DWORD PTR [ebp-0x58],eax
10003cb9:	8a 85 53 ff ff ff    	mov    al,BYTE PTR [ebp-0xad]
10003cbf:	0f be c0             	movsx  eax,al
10003cc2:	8d 50 d0             	lea    edx,[eax-0x30]
10003cc5:	89 d0                	mov    eax,edx
10003cc7:	c1 e0 02             	shl    eax,0x2
10003cca:	01 d0                	add    eax,edx
10003ccc:	01 c0                	add    eax,eax
10003cce:	89 c2                	mov    edx,eax
10003cd0:	8a 85 54 ff ff ff    	mov    al,BYTE PTR [ebp-0xac]
10003cd6:	0f be c0             	movsx  eax,al
10003cd9:	83 e8 30             	sub    eax,0x30
10003cdc:	01 d0                	add    eax,edx
10003cde:	89 45 a4             	mov    DWORD PTR [ebp-0x5c],eax
10003ce1:	8a 85 56 ff ff ff    	mov    al,BYTE PTR [ebp-0xaa]
10003ce7:	0f be c0             	movsx  eax,al
10003cea:	8d 50 d0             	lea    edx,[eax-0x30]
10003ced:	89 d0                	mov    eax,edx
10003cef:	c1 e0 02             	shl    eax,0x2
10003cf2:	01 d0                	add    eax,edx
10003cf4:	01 c0                	add    eax,eax
10003cf6:	89 c2                	mov    edx,eax
10003cf8:	8a 85 57 ff ff ff    	mov    al,BYTE PTR [ebp-0xa9]
10003cfe:	0f be c0             	movsx  eax,al
10003d01:	83 e8 30             	sub    eax,0x30
10003d04:	01 d0                	add    eax,edx
10003d06:	89 45 a0             	mov    DWORD PTR [ebp-0x60],eax
10003d09:	8a 85 59 ff ff ff    	mov    al,BYTE PTR [ebp-0xa7]
10003d0f:	0f be c0             	movsx  eax,al
10003d12:	8d 50 d0             	lea    edx,[eax-0x30]
10003d15:	89 d0                	mov    eax,edx
10003d17:	c1 e0 02             	shl    eax,0x2
10003d1a:	01 d0                	add    eax,edx
10003d1c:	01 c0                	add    eax,eax
10003d1e:	89 c2                	mov    edx,eax
10003d20:	8a 85 5a ff ff ff    	mov    al,BYTE PTR [ebp-0xa6]
10003d26:	0f be c0             	movsx  eax,al
10003d29:	83 e8 30             	sub    eax,0x30
10003d2c:	01 d0                	add    eax,edx
10003d2e:	89 45 9c             	mov    DWORD PTR [ebp-0x64],eax
10003d31:	8b 45 a8             	mov    eax,DWORD PTR [ebp-0x58]
10003d34:	83 e0 03             	and    eax,0x3
10003d37:	85 c0                	test   eax,eax
10003d39:	75 1f                	jne    10003d5a <firstRun(bool)+0x13bb>
10003d3b:	8b 45 a8             	mov    eax,DWORD PTR [ebp-0x58]
10003d3e:	b9 19 00 00 00       	mov    ecx,0x19
10003d43:	99                   	cdq    
10003d44:	f7 f9                	idiv   ecx
10003d46:	89 d0                	mov    eax,edx
10003d48:	85 c0                	test   eax,eax
10003d4a:	75 0a                	jne    10003d56 <firstRun(bool)+0x13b7>
10003d4c:	8b 45 a8             	mov    eax,DWORD PTR [ebp-0x58]
10003d4f:	83 e0 0f             	and    eax,0xf
10003d52:	85 c0                	test   eax,eax
10003d54:	75 04                	jne    10003d5a <firstRun(bool)+0x13bb>
10003d56:	b0 01                	mov    al,0x1
10003d58:	eb 02                	jmp    10003d5c <firstRun(bool)+0x13bd>
10003d5a:	b0 00                	mov    al,0x0
10003d5c:	88 45 9b             	mov    BYTE PTR [ebp-0x65],al
10003d5f:	83 7d b0 1f          	cmp    DWORD PTR [ebp-0x50],0x1f
10003d63:	7e 0c                	jle    10003d71 <firstRun(bool)+0x13d2>
10003d65:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
10003d6c:	e9 cd 00 00 00       	jmp    10003e3e <firstRun(bool)+0x149f>
10003d71:	83 7d b0 1e          	cmp    DWORD PTR [ebp-0x50],0x1e
10003d75:	7e 2a                	jle    10003da1 <firstRun(bool)+0x1402>
10003d77:	83 7d ac 02          	cmp    DWORD PTR [ebp-0x54],0x2
10003d7b:	74 18                	je     10003d95 <firstRun(bool)+0x13f6>
10003d7d:	83 7d ac 04          	cmp    DWORD PTR [ebp-0x54],0x4
10003d81:	74 12                	je     10003d95 <firstRun(bool)+0x13f6>
10003d83:	83 7d ac 06          	cmp    DWORD PTR [ebp-0x54],0x6
10003d87:	74 0c                	je     10003d95 <firstRun(bool)+0x13f6>
10003d89:	83 7d ac 09          	cmp    DWORD PTR [ebp-0x54],0x9
10003d8d:	74 06                	je     10003d95 <firstRun(bool)+0x13f6>
10003d8f:	83 7d ac 0b          	cmp    DWORD PTR [ebp-0x54],0xb
10003d93:	75 0c                	jne    10003da1 <firstRun(bool)+0x1402>
10003d95:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
10003d9c:	e9 9d 00 00 00       	jmp    10003e3e <firstRun(bool)+0x149f>
10003da1:	83 7d b0 1d          	cmp    DWORD PTR [ebp-0x50],0x1d
10003da5:	75 19                	jne    10003dc0 <firstRun(bool)+0x1421>
10003da7:	83 7d ac 02          	cmp    DWORD PTR [ebp-0x54],0x2
10003dab:	75 13                	jne    10003dc0 <firstRun(bool)+0x1421>
10003dad:	8a 45 9b             	mov    al,BYTE PTR [ebp-0x65]
10003db0:	83 f0 01             	xor    eax,0x1
10003db3:	84 c0                	test   al,al
10003db5:	74 09                	je     10003dc0 <firstRun(bool)+0x1421>
10003db7:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
10003dbe:	eb 7e                	jmp    10003e3e <firstRun(bool)+0x149f>
10003dc0:	83 7d b0 00          	cmp    DWORD PTR [ebp-0x50],0x0
10003dc4:	75 09                	jne    10003dcf <firstRun(bool)+0x1430>
10003dc6:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
10003dcd:	eb 6f                	jmp    10003e3e <firstRun(bool)+0x149f>
10003dcf:	83 7d ac 0c          	cmp    DWORD PTR [ebp-0x54],0xc
10003dd3:	7f 06                	jg     10003ddb <firstRun(bool)+0x143c>
10003dd5:	83 7d ac 00          	cmp    DWORD PTR [ebp-0x54],0x0
10003dd9:	75 09                	jne    10003de4 <firstRun(bool)+0x1445>
10003ddb:	c7 45 e4 03 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x3
10003de2:	eb 5a                	jmp    10003e3e <firstRun(bool)+0x149f>
10003de4:	81 7d a8 b7 0b 00 00 	cmp    DWORD PTR [ebp-0x58],0xbb7
10003deb:	7f 09                	jg     10003df6 <firstRun(bool)+0x1457>
10003ded:	81 7d a8 b1 07 00 00 	cmp    DWORD PTR [ebp-0x58],0x7b1
10003df4:	7f 09                	jg     10003dff <firstRun(bool)+0x1460>
10003df6:	c7 45 e4 06 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x6
10003dfd:	eb 3f                	jmp    10003e3e <firstRun(bool)+0x149f>
10003dff:	83 7d a4 17          	cmp    DWORD PTR [ebp-0x5c],0x17
10003e03:	7e 09                	jle    10003e0e <firstRun(bool)+0x146f>
10003e05:	c7 45 e4 0b 00 00 00 	mov    DWORD PTR [ebp-0x1c],0xb
10003e0c:	eb 30                	jmp    10003e3e <firstRun(bool)+0x149f>
10003e0e:	83 7d a0 3b          	cmp    DWORD PTR [ebp-0x60],0x3b
10003e12:	7e 09                	jle    10003e1d <firstRun(bool)+0x147e>
10003e14:	c7 45 e4 0e 00 00 00 	mov    DWORD PTR [ebp-0x1c],0xe
10003e1b:	eb 21                	jmp    10003e3e <firstRun(bool)+0x149f>
10003e1d:	83 7d 9c 3b          	cmp    DWORD PTR [ebp-0x64],0x3b
10003e21:	7e 37                	jle    10003e5a <firstRun(bool)+0x14bb>
10003e23:	c7 45 e4 11 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x11
10003e2a:	eb 12                	jmp    10003e3e <firstRun(bool)+0x149f>
10003e2c:	a0 00 00 00 00       	mov    al,ds:0x0	10003e2d: R_386_32	installKey
10003e31:	3c 1b                	cmp    al,0x1b
10003e33:	0f 94 c0             	sete   al
10003e36:	84 c0                	test   al,al
10003e38:	0f 85 80 ec ff ff    	jne    10002abe <firstRun(bool)+0x11f>
10003e3e:	83 ec 0c             	sub    esp,0xc
10003e41:	68 4c 04 00 00       	push   0x44c
10003e46:	e8 fc ff ff ff       	call   10003e47 <firstRun(bool)+0x14a8>	10003e47: R_386_PC32	milliTenthSleep(unsigned int)
10003e4b:	83 c4 10             	add    esp,0x10
10003e4e:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10003e50: R_386_32	installKey
10003e55:	e9 4b f8 ff ff       	jmp    100036a5 <firstRun(bool)+0xd06>
10003e5a:	90                   	nop
10003e5b:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10003e5d: R_386_32	installKey
10003e62:	83 ec 0c             	sub    esp,0xc
10003e65:	68 a0 0f 00 00       	push   0xfa0
10003e6a:	e8 fc ff ff ff       	call   10003e6b <firstRun(bool)+0x14cc>	10003e6b: R_386_PC32	milliTenthSleep(unsigned int)
10003e6f:	83 c4 10             	add    esp,0x10
10003e72:	eb 01                	jmp    10003e75 <firstRun(bool)+0x14d6>
10003e74:	90                   	nop
10003e75:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10003e77: R_386_32	installKey
10003e7c:	e8 fc ff ff ff       	call   10003e7d <firstRun(bool)+0x14de>	10003e7d: R_386_PC32	drawBootScreen()
10003e81:	83 ec 0c             	sub    esp,0xc
10003e84:	68 62 8b 00 10       	push   0x10008b62	10003e85: R_386_32	.text
10003e89:	6a 14                	push   0x14
10003e8b:	6a 3c                	push   0x3c
10003e8d:	6a 01                	push   0x1
10003e8f:	6a 12                	push   0x12
10003e91:	e8 fc ff ff ff       	call   10003e92 <firstRun(bool)+0x14f3>	10003e92: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
10003e96:	83 c4 20             	add    esp,0x20
10003e99:	a1 00 00 00 00       	mov    eax,ds:0x0	10003e9a: R_386_32	term
10003e9e:	83 ec 04             	sub    esp,0x4
10003ea1:	6a 04                	push   0x4
10003ea3:	6a 14                	push   0x14
10003ea5:	50                   	push   eax
10003ea6:	e8 fc ff ff ff       	call   10003ea7 <firstRun(bool)+0x1508>	10003ea7: R_386_PC32	VgaText::setCursor(int, int)
10003eab:	83 c4 10             	add    esp,0x10
10003eae:	a1 00 00 00 00       	mov    eax,ds:0x0	10003eaf: R_386_32	term
10003eb3:	83 ec 08             	sub    esp,0x8
10003eb6:	68 ec 8b 00 10       	push   0x10008bec	10003eb7: R_386_32	.text
10003ebb:	50                   	push   eax
10003ebc:	e8 fc ff ff ff       	call   10003ebd <firstRun(bool)+0x151e>	10003ebd: R_386_PC32	VgaText::puts(char const*)
10003ec1:	83 c4 10             	add    esp,0x10
10003ec4:	a1 00 00 00 00       	mov    eax,ds:0x0	10003ec5: R_386_32	term
10003ec9:	83 ec 04             	sub    esp,0x4
10003ecc:	6a 18                	push   0x18
10003ece:	6a 11                	push   0x11
10003ed0:	50                   	push   eax
10003ed1:	e8 fc ff ff ff       	call   10003ed2 <firstRun(bool)+0x1533>	10003ed2: R_386_PC32	VgaText::setCursor(int, int)
10003ed6:	83 c4 10             	add    esp,0x10
10003ed9:	a1 00 00 00 00       	mov    eax,ds:0x0	10003eda: R_386_32	term
10003ede:	6a 0b                	push   0xb
10003ee0:	6a 03                	push   0x3
10003ee2:	68 d6 8b 00 10       	push   0x10008bd6	10003ee3: R_386_32	.text
10003ee7:	50                   	push   eax
10003ee8:	e8 fc ff ff ff       	call   10003ee9 <firstRun(bool)+0x154a>	10003ee9: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10003eed:	83 c4 10             	add    esp,0x10
10003ef0:	e8 fc ff ff ff       	call   10003ef1 <firstRun(bool)+0x1552>	10003ef1: R_386_PC32	loadTimezoneStrings()
10003ef5:	89 45 94             	mov    DWORD PTR [ebp-0x6c],eax
10003ef8:	b8 d2 00 00 00       	mov    eax,0xd2
10003efd:	99                   	cdq    
10003efe:	f7 7d 94             	idiv   DWORD PTR [ebp-0x6c]
10003f01:	89 45 90             	mov    DWORD PTR [ebp-0x70],eax
10003f04:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
10003f0b:	83 7d cc 0d          	cmp    DWORD PTR [ebp-0x34],0xd
10003f0f:	7f 32                	jg     10003f43 <firstRun(bool)+0x15a4>
10003f11:	a1 00 00 00 00       	mov    eax,ds:0x0	10003f12: R_386_32	term
10003f16:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
10003f19:	83 c2 07             	add    edx,0x7
10003f1c:	83 ec 04             	sub    esp,0x4
10003f1f:	52                   	push   edx
10003f20:	6a 4b                	push   0x4b
10003f22:	50                   	push   eax
10003f23:	e8 fc ff ff ff       	call   10003f24 <firstRun(bool)+0x1585>	10003f24: R_386_PC32	VgaText::setCursor(int, int)
10003f28:	83 c4 10             	add    esp,0x10
10003f2b:	a1 00 00 00 00       	mov    eax,ds:0x0	10003f2c: R_386_32	term
10003f30:	83 ec 08             	sub    esp,0x8
10003f33:	6a 20                	push   0x20
10003f35:	50                   	push   eax
10003f36:	e8 fc ff ff ff       	call   10003f37 <firstRun(bool)+0x1598>	10003f37: R_386_PC32	VgaText::putchar(char)
10003f3b:	83 c4 10             	add    esp,0x10
10003f3e:	ff 45 cc             	inc    DWORD PTR [ebp-0x34]
10003f41:	eb c8                	jmp    10003f0b <firstRun(bool)+0x156c>
10003f43:	c7 45 c8 00 00 00 00 	mov    DWORD PTR [ebp-0x38],0x0
10003f4a:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
10003f4d:	3b 45 90             	cmp    eax,DWORD PTR [ebp-0x70]
10003f50:	7d 48                	jge    10003f9a <firstRun(bool)+0x15fb>
10003f52:	8b 0d 00 00 00 00    	mov    ecx,DWORD PTR ds:0x0	10003f54: R_386_32	term
10003f58:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
10003f5b:	8d 58 07             	lea    ebx,[eax+0x7]
10003f5e:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
10003f61:	89 d0                	mov    eax,edx
10003f63:	01 c0                	add    eax,eax
10003f65:	01 d0                	add    eax,edx
10003f67:	01 c0                	add    eax,eax
10003f69:	01 d0                	add    eax,edx
10003f6b:	01 c0                	add    eax,eax
10003f6d:	99                   	cdq    
10003f6e:	f7 7d 94             	idiv   DWORD PTR [ebp-0x6c]
10003f71:	01 d8                	add    eax,ebx
10003f73:	83 ec 04             	sub    esp,0x4
10003f76:	50                   	push   eax
10003f77:	6a 4b                	push   0x4b
10003f79:	51                   	push   ecx
10003f7a:	e8 fc ff ff ff       	call   10003f7b <firstRun(bool)+0x15dc>	10003f7b: R_386_PC32	VgaText::setCursor(int, int)
10003f7f:	83 c4 10             	add    esp,0x10
10003f82:	a1 00 00 00 00       	mov    eax,ds:0x0	10003f83: R_386_32	term
10003f87:	83 ec 08             	sub    esp,0x8
10003f8a:	6a db                	push   0xffffffdb
10003f8c:	50                   	push   eax
10003f8d:	e8 fc ff ff ff       	call   10003f8e <firstRun(bool)+0x15ef>	10003f8e: R_386_PC32	VgaText::putchar(char)
10003f92:	83 c4 10             	add    esp,0x10
10003f95:	ff 45 c8             	inc    DWORD PTR [ebp-0x38]
10003f98:	eb b0                	jmp    10003f4a <firstRun(bool)+0x15ab>
10003f9a:	a1 00 00 00 00       	mov    eax,ds:0x0	10003f9b: R_386_32	term
10003f9f:	83 ec 04             	sub    esp,0x4
10003fa2:	6a 06                	push   0x6
10003fa4:	6a 4b                	push   0x4b
10003fa6:	50                   	push   eax
10003fa7:	e8 fc ff ff ff       	call   10003fa8 <firstRun(bool)+0x1609>	10003fa8: R_386_PC32	VgaText::setCursor(int, int)
10003fac:	83 c4 10             	add    esp,0x10
10003faf:	a1 00 00 00 00       	mov    eax,ds:0x0	10003fb0: R_386_32	term
10003fb4:	83 ec 08             	sub    esp,0x8
10003fb7:	6a 1e                	push   0x1e
10003fb9:	50                   	push   eax
10003fba:	e8 fc ff ff ff       	call   10003fbb <firstRun(bool)+0x161c>	10003fbb: R_386_PC32	VgaText::putchar(char)
10003fbf:	83 c4 10             	add    esp,0x10
10003fc2:	a1 00 00 00 00       	mov    eax,ds:0x0	10003fc3: R_386_32	term
10003fc7:	83 ec 04             	sub    esp,0x4
10003fca:	6a 14                	push   0x14
10003fcc:	6a 4b                	push   0x4b
10003fce:	50                   	push   eax
10003fcf:	e8 fc ff ff ff       	call   10003fd0 <firstRun(bool)+0x1631>	10003fd0: R_386_PC32	VgaText::setCursor(int, int)
10003fd4:	83 c4 10             	add    esp,0x10
10003fd7:	a1 00 00 00 00       	mov    eax,ds:0x0	10003fd8: R_386_32	term
10003fdc:	83 ec 08             	sub    esp,0x8
10003fdf:	6a 1f                	push   0x1f
10003fe1:	50                   	push   eax
10003fe2:	e8 fc ff ff ff       	call   10003fe3 <firstRun(bool)+0x1644>	10003fe3: R_386_PC32	VgaText::putchar(char)
10003fe7:	83 c4 10             	add    esp,0x10
10003fea:	c7 45 c4 00 00 00 00 	mov    DWORD PTR [ebp-0x3c],0x0
10003ff1:	83 7d c4 0e          	cmp    DWORD PTR [ebp-0x3c],0xe
10003ff5:	7f 7e                	jg     10004075 <firstRun(bool)+0x16d6>
10003ff7:	a1 00 00 00 00       	mov    eax,ds:0x0	10003ff8: R_386_32	term
10003ffc:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
10003fff:	83 c2 06             	add    edx,0x6
10004002:	83 ec 04             	sub    esp,0x4
10004005:	52                   	push   edx
10004006:	6a 14                	push   0x14
10004008:	50                   	push   eax
10004009:	e8 fc ff ff ff       	call   1000400a <firstRun(bool)+0x166b>	1000400a: R_386_PC32	VgaText::setCursor(int, int)
1000400e:	83 c4 10             	add    esp,0x10
10004011:	a1 00 00 00 00       	mov    eax,ds:0x0	10004012: R_386_32	term
10004016:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
10004019:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
1000401c:	01 d1                	add    ecx,edx
1000401e:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10004020: R_386_32	tzsel
10004024:	39 d1                	cmp    ecx,edx
10004026:	75 07                	jne    1000402f <firstRun(bool)+0x1690>
10004028:	bb 00 00 00 00       	mov    ebx,0x0
1000402d:	eb 05                	jmp    10004034 <firstRun(bool)+0x1695>
1000402f:	bb 0f 00 00 00       	mov    ebx,0xf
10004034:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
10004037:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
1000403a:	01 d1                	add    ecx,edx
1000403c:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	1000403e: R_386_32	tzsel
10004042:	39 d1                	cmp    ecx,edx
10004044:	75 07                	jne    1000404d <firstRun(bool)+0x16ae>
10004046:	b9 0f 00 00 00       	mov    ecx,0xf
1000404b:	eb 05                	jmp    10004052 <firstRun(bool)+0x16b3>
1000404d:	b9 00 00 00 00       	mov    ecx,0x0
10004052:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
10004055:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
10004058:	01 f2                	add    edx,esi
1000405a:	8b 14 95 00 00 00 00 	mov    edx,DWORD PTR [edx*4+0x0]	1000405d: R_386_32	timezoneStrings
10004061:	53                   	push   ebx
10004062:	51                   	push   ecx
10004063:	52                   	push   edx
10004064:	50                   	push   eax
10004065:	e8 fc ff ff ff       	call   10004066 <firstRun(bool)+0x16c7>	10004066: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
1000406a:	83 c4 10             	add    esp,0x10
1000406d:	ff 45 c4             	inc    DWORD PTR [ebp-0x3c]
10004070:	e9 7c ff ff ff       	jmp    10003ff1 <firstRun(bool)+0x1652>
10004075:	a0 00 00 00 00       	mov    al,ds:0x0	10004076: R_386_32	installKey
1000407a:	84 c0                	test   al,al
1000407c:	0f 94 c0             	sete   al
1000407f:	84 c0                	test   al,al
10004081:	74 02                	je     10004085 <firstRun(bool)+0x16e6>
10004083:	eb f0                	jmp    10004075 <firstRun(bool)+0x16d6>
10004085:	a1 00 00 00 00       	mov    eax,ds:0x0	10004086: R_386_32	term
1000408a:	05 82 00 00 00       	add    eax,0x82
1000408f:	83 ec 04             	sub    esp,0x4
10004092:	6a 04                	push   0x4
10004094:	6a 00                	push   0x0
10004096:	50                   	push   eax
10004097:	e8 fc ff ff ff       	call   10004098 <firstRun(bool)+0x16f9>	10004098: R_386_PC32	memset
1000409c:	83 c4 10             	add    esp,0x10
1000409f:	a1 00 00 00 00       	mov    eax,ds:0x0	100040a0: R_386_32	term
100040a4:	05 02 01 00 00       	add    eax,0x102
100040a9:	83 ec 04             	sub    esp,0x4
100040ac:	6a 04                	push   0x4
100040ae:	6a 00                	push   0x0
100040b0:	50                   	push   eax
100040b1:	e8 fc ff ff ff       	call   100040b2 <firstRun(bool)+0x1713>	100040b2: R_386_PC32	memset
100040b6:	83 c4 10             	add    esp,0x10
100040b9:	a0 00 00 00 00       	mov    al,ds:0x0	100040ba: R_386_32	installKey
100040be:	3c 01                	cmp    al,0x1
100040c0:	0f 94 c0             	sete   al
100040c3:	84 c0                	test   al,al
100040c5:	74 41                	je     10004108 <firstRun(bool)+0x1769>
100040c7:	a1 00 00 00 00       	mov    eax,ds:0x0	100040c8: R_386_32	tzsel
100040cc:	48                   	dec    eax
100040cd:	a3 00 00 00 00       	mov    ds:0x0,eax	100040ce: R_386_32	tzsel
100040d2:	a1 00 00 00 00       	mov    eax,ds:0x0	100040d3: R_386_32	tzsel
100040d7:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
100040da:	83 f8 04             	cmp    eax,0x4
100040dd:	7f 03                	jg     100040e2 <firstRun(bool)+0x1743>
100040df:	ff 4d dc             	dec    DWORD PTR [ebp-0x24]
100040e2:	a1 00 00 00 00       	mov    eax,ds:0x0	100040e3: R_386_32	tzsel
100040e7:	85 c0                	test   eax,eax
100040e9:	79 0a                	jns    100040f5 <firstRun(bool)+0x1756>
100040eb:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	100040ed: R_386_32	tzsel
100040f5:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
100040f9:	0f 89 82 00 00 00    	jns    10004181 <firstRun(bool)+0x17e2>
100040ff:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
10004106:	eb 79                	jmp    10004181 <firstRun(bool)+0x17e2>
10004108:	a0 00 00 00 00       	mov    al,ds:0x0	10004109: R_386_32	installKey
1000410d:	3c 02                	cmp    al,0x2
1000410f:	0f 94 c0             	sete   al
10004112:	84 c0                	test   al,al
10004114:	74 4b                	je     10004161 <firstRun(bool)+0x17c2>
10004116:	a1 00 00 00 00       	mov    eax,ds:0x0	10004117: R_386_32	tzsel
1000411b:	40                   	inc    eax
1000411c:	a3 00 00 00 00       	mov    ds:0x0,eax	1000411d: R_386_32	tzsel
10004121:	a1 00 00 00 00       	mov    eax,ds:0x0	10004122: R_386_32	tzsel
10004126:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
10004129:	83 f8 0a             	cmp    eax,0xa
1000412c:	7e 03                	jle    10004131 <firstRun(bool)+0x1792>
1000412e:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
10004131:	8b 45 94             	mov    eax,DWORD PTR [ebp-0x6c]
10004134:	8d 50 ff             	lea    edx,[eax-0x1]
10004137:	a1 00 00 00 00       	mov    eax,ds:0x0	10004138: R_386_32	tzsel
1000413c:	39 c2                	cmp    edx,eax
1000413e:	7f 0b                	jg     1000414b <firstRun(bool)+0x17ac>
10004140:	8b 45 94             	mov    eax,DWORD PTR [ebp-0x6c]
10004143:	83 e8 02             	sub    eax,0x2
10004146:	a3 00 00 00 00       	mov    ds:0x0,eax	10004147: R_386_32	tzsel
1000414b:	8b 45 94             	mov    eax,DWORD PTR [ebp-0x6c]
1000414e:	83 e8 0f             	sub    eax,0xf
10004151:	39 45 dc             	cmp    DWORD PTR [ebp-0x24],eax
10004154:	7c 2b                	jl     10004181 <firstRun(bool)+0x17e2>
10004156:	8b 45 94             	mov    eax,DWORD PTR [ebp-0x6c]
10004159:	83 e8 10             	sub    eax,0x10
1000415c:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
1000415f:	eb 20                	jmp    10004181 <firstRun(bool)+0x17e2>
10004161:	a0 00 00 00 00       	mov    al,ds:0x0	10004162: R_386_32	installKey
10004166:	3c 0a                	cmp    al,0xa
10004168:	0f 94 c0             	sete   al
1000416b:	84 c0                	test   al,al
1000416d:	75 2e                	jne    1000419d <firstRun(bool)+0x17fe>
1000416f:	a0 00 00 00 00       	mov    al,ds:0x0	10004170: R_386_32	installKey
10004174:	3c 1b                	cmp    al,0x1b
10004176:	0f 94 c0             	sete   al
10004179:	84 c0                	test   al,al
1000417b:	0f 85 28 f1 ff ff    	jne    100032a9 <firstRun(bool)+0x90a>
10004181:	83 ec 0c             	sub    esp,0xc
10004184:	68 f4 01 00 00       	push   0x1f4
10004189:	e8 fc ff ff ff       	call   1000418a <firstRun(bool)+0x17eb>	1000418a: R_386_PC32	milliTenthSleep(unsigned int)
1000418e:	83 c4 10             	add    esp,0x10
10004191:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10004193: R_386_32	installKey
10004198:	e9 67 fd ff ff       	jmp    10003f04 <firstRun(bool)+0x1565>
1000419d:	90                   	nop
1000419e:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100041a0: R_386_32	installKey
100041a5:	83 ec 0c             	sub    esp,0xc
100041a8:	68 a0 0f 00 00       	push   0xfa0
100041ad:	e8 fc ff ff ff       	call   100041ae <firstRun(bool)+0x180f>	100041ae: R_386_PC32	milliTenthSleep(unsigned int)
100041b2:	83 c4 10             	add    esp,0x10
100041b5:	eb 01                	jmp    100041b8 <firstRun(bool)+0x1819>
100041b7:	90                   	nop
100041b8:	e8 fc ff ff ff       	call   100041b9 <firstRun(bool)+0x181a>	100041b9: R_386_PC32	drawBootScreen()
100041bd:	83 ec 0c             	sub    esp,0xc
100041c0:	68 58 1b 00 00       	push   0x1b58
100041c5:	e8 fc ff ff ff       	call   100041c6 <firstRun(bool)+0x1827>	100041c6: R_386_PC32	milliTenthSleep(unsigned int)
100041ca:	83 c4 10             	add    esp,0x10
100041cd:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100041cf: R_386_32	installKey
100041d4:	e8 fc ff ff ff       	call   100041d5 <firstRun(bool)+0x1836>	100041d5: R_386_PC32	drawBootScreen()
100041d9:	83 ec 0c             	sub    esp,0xc
100041dc:	68 1e 8c 00 10       	push   0x10008c1e	100041dd: R_386_32	.text
100041e1:	6a 10                	push   0x10
100041e3:	6a 37                	push   0x37
100041e5:	6a 03                	push   0x3
100041e7:	6a 14                	push   0x14
100041e9:	e8 fc ff ff ff       	call   100041ea <firstRun(bool)+0x184b>	100041ea: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
100041ee:	83 c4 20             	add    esp,0x20
100041f1:	a1 00 00 00 00       	mov    eax,ds:0x0	100041f2: R_386_32	term
100041f6:	83 ec 04             	sub    esp,0x4
100041f9:	6a 06                	push   0x6
100041fb:	6a 16                	push   0x16
100041fd:	50                   	push   eax
100041fe:	e8 fc ff ff ff       	call   100041ff <firstRun(bool)+0x1860>	100041ff: R_386_PC32	VgaText::setCursor(int, int)
10004203:	83 c4 10             	add    esp,0x10
10004206:	a1 00 00 00 00       	mov    eax,ds:0x0	10004207: R_386_32	term
1000420b:	83 ec 08             	sub    esp,0x8
1000420e:	68 30 8c 00 10       	push   0x10008c30	1000420f: R_386_32	.text
10004213:	50                   	push   eax
10004214:	e8 fc ff ff ff       	call   10004215 <firstRun(bool)+0x1876>	10004215: R_386_PC32	VgaText::puts(char const*)
10004219:	83 c4 10             	add    esp,0x10
1000421c:	a1 00 00 00 00       	mov    eax,ds:0x0	1000421d: R_386_32	term
10004221:	83 ec 04             	sub    esp,0x4
10004224:	6a 07                	push   0x7
10004226:	6a 16                	push   0x16
10004228:	50                   	push   eax
10004229:	e8 fc ff ff ff       	call   1000422a <firstRun(bool)+0x188b>	1000422a: R_386_PC32	VgaText::setCursor(int, int)
1000422e:	83 c4 10             	add    esp,0x10
10004231:	a1 00 00 00 00       	mov    eax,ds:0x0	10004232: R_386_32	term
10004236:	83 ec 08             	sub    esp,0x8
10004239:	68 64 8c 00 10       	push   0x10008c64	1000423a: R_386_32	.text
1000423e:	50                   	push   eax
1000423f:	e8 fc ff ff ff       	call   10004240 <firstRun(bool)+0x18a1>	10004240: R_386_PC32	VgaText::puts(char const*)
10004244:	83 c4 10             	add    esp,0x10
10004247:	a1 00 00 00 00       	mov    eax,ds:0x0	10004248: R_386_32	term
1000424c:	83 ec 04             	sub    esp,0x4
1000424f:	6a 18                	push   0x18
10004251:	6a 11                	push   0x11
10004253:	50                   	push   eax
10004254:	e8 fc ff ff ff       	call   10004255 <firstRun(bool)+0x18b6>	10004255: R_386_PC32	VgaText::setCursor(int, int)
10004259:	83 c4 10             	add    esp,0x10
1000425c:	a1 00 00 00 00       	mov    eax,ds:0x0	1000425d: R_386_32	term
10004261:	6a 0b                	push   0xb
10004263:	6a 03                	push   0x3
10004265:	68 d6 8b 00 10       	push   0x10008bd6	10004266: R_386_32	.text
1000426a:	50                   	push   eax
1000426b:	e8 fc ff ff ff       	call   1000426c <firstRun(bool)+0x18cd>	1000426c: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10004270:	83 c4 10             	add    esp,0x10
10004273:	c7 45 94 03 00 00 00 	mov    DWORD PTR [ebp-0x6c],0x3
1000427a:	8d 85 34 ff ff ff    	lea    eax,[ebp-0xcc]
10004280:	bb dc 8e 00 10       	mov    ebx,0x10008edc	10004281: R_386_32	.text
10004285:	ba 03 00 00 00       	mov    edx,0x3
1000428a:	89 c7                	mov    edi,eax
1000428c:	89 de                	mov    esi,ebx
1000428e:	89 d1                	mov    ecx,edx
10004290:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10004292:	c7 45 c0 00 00 00 00 	mov    DWORD PTR [ebp-0x40],0x0
10004299:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
1000429c:	3b 45 94             	cmp    eax,DWORD PTR [ebp-0x6c]
1000429f:	7d 68                	jge    10004309 <firstRun(bool)+0x196a>
100042a1:	a1 00 00 00 00       	mov    eax,ds:0x0	100042a2: R_386_32	term
100042a6:	8b 55 c0             	mov    edx,DWORD PTR [ebp-0x40]
100042a9:	83 c2 09             	add    edx,0x9
100042ac:	83 ec 04             	sub    esp,0x4
100042af:	52                   	push   edx
100042b0:	6a 16                	push   0x16
100042b2:	50                   	push   eax
100042b3:	e8 fc ff ff ff       	call   100042b4 <firstRun(bool)+0x1915>	100042b4: R_386_PC32	VgaText::setCursor(int, int)
100042b8:	83 c4 10             	add    esp,0x10
100042bb:	a1 00 00 00 00       	mov    eax,ds:0x0	100042bc: R_386_32	term
100042c0:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	100042c2: R_386_32	modesel
100042c6:	39 55 c0             	cmp    DWORD PTR [ebp-0x40],edx
100042c9:	75 07                	jne    100042d2 <firstRun(bool)+0x1933>
100042cb:	bb 00 00 00 00       	mov    ebx,0x0
100042d0:	eb 05                	jmp    100042d7 <firstRun(bool)+0x1938>
100042d2:	bb 0f 00 00 00       	mov    ebx,0xf
100042d7:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	100042d9: R_386_32	modesel
100042dd:	39 55 c0             	cmp    DWORD PTR [ebp-0x40],edx
100042e0:	75 07                	jne    100042e9 <firstRun(bool)+0x194a>
100042e2:	b9 0f 00 00 00       	mov    ecx,0xf
100042e7:	eb 05                	jmp    100042ee <firstRun(bool)+0x194f>
100042e9:	b9 00 00 00 00       	mov    ecx,0x0
100042ee:	8b 55 c0             	mov    edx,DWORD PTR [ebp-0x40]
100042f1:	8b 94 95 34 ff ff ff 	mov    edx,DWORD PTR [ebp+edx*4-0xcc]
100042f8:	53                   	push   ebx
100042f9:	51                   	push   ecx
100042fa:	52                   	push   edx
100042fb:	50                   	push   eax
100042fc:	e8 fc ff ff ff       	call   100042fd <firstRun(bool)+0x195e>	100042fd: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10004301:	83 c4 10             	add    esp,0x10
10004304:	ff 45 c0             	inc    DWORD PTR [ebp-0x40]
10004307:	eb 90                	jmp    10004299 <firstRun(bool)+0x18fa>
10004309:	a0 00 00 00 00       	mov    al,ds:0x0	1000430a: R_386_32	installKey
1000430e:	84 c0                	test   al,al
10004310:	0f 94 c0             	sete   al
10004313:	84 c0                	test   al,al
10004315:	74 02                	je     10004319 <firstRun(bool)+0x197a>
10004317:	eb f0                	jmp    10004309 <firstRun(bool)+0x196a>
10004319:	a1 00 00 00 00       	mov    eax,ds:0x0	1000431a: R_386_32	term
1000431e:	05 82 00 00 00       	add    eax,0x82
10004323:	83 ec 04             	sub    esp,0x4
10004326:	6a 04                	push   0x4
10004328:	6a 00                	push   0x0
1000432a:	50                   	push   eax
1000432b:	e8 fc ff ff ff       	call   1000432c <firstRun(bool)+0x198d>	1000432c: R_386_PC32	memset
10004330:	83 c4 10             	add    esp,0x10
10004333:	a1 00 00 00 00       	mov    eax,ds:0x0	10004334: R_386_32	term
10004338:	05 02 01 00 00       	add    eax,0x102
1000433d:	83 ec 04             	sub    esp,0x4
10004340:	6a 04                	push   0x4
10004342:	6a 00                	push   0x0
10004344:	50                   	push   eax
10004345:	e8 fc ff ff ff       	call   10004346 <firstRun(bool)+0x19a7>	10004346: R_386_PC32	memset
1000434a:	83 c4 10             	add    esp,0x10
1000434d:	a0 00 00 00 00       	mov    al,ds:0x0	1000434e: R_386_32	installKey
10004352:	3c 01                	cmp    al,0x1
10004354:	0f 94 c0             	sete   al
10004357:	84 c0                	test   al,al
10004359:	74 20                	je     1000437b <firstRun(bool)+0x19dc>
1000435b:	a1 00 00 00 00       	mov    eax,ds:0x0	1000435c: R_386_32	modesel
10004360:	48                   	dec    eax
10004361:	a3 00 00 00 00       	mov    ds:0x0,eax	10004362: R_386_32	modesel
10004366:	a1 00 00 00 00       	mov    eax,ds:0x0	10004367: R_386_32	modesel
1000436b:	85 c0                	test   eax,eax
1000436d:	79 5a                	jns    100043c9 <firstRun(bool)+0x1a2a>
1000436f:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10004371: R_386_32	modesel
10004379:	eb 4e                	jmp    100043c9 <firstRun(bool)+0x1a2a>
1000437b:	a0 00 00 00 00       	mov    al,ds:0x0	1000437c: R_386_32	installKey
10004380:	3c 02                	cmp    al,0x2
10004382:	0f 94 c0             	sete   al
10004385:	84 c0                	test   al,al
10004387:	74 20                	je     100043a9 <firstRun(bool)+0x1a0a>
10004389:	a1 00 00 00 00       	mov    eax,ds:0x0	1000438a: R_386_32	modesel
1000438e:	40                   	inc    eax
1000438f:	a3 00 00 00 00       	mov    ds:0x0,eax	10004390: R_386_32	modesel
10004394:	a1 00 00 00 00       	mov    eax,ds:0x0	10004395: R_386_32	modesel
10004399:	39 45 94             	cmp    DWORD PTR [ebp-0x6c],eax
1000439c:	7f 2b                	jg     100043c9 <firstRun(bool)+0x1a2a>
1000439e:	8b 45 94             	mov    eax,DWORD PTR [ebp-0x6c]
100043a1:	48                   	dec    eax
100043a2:	a3 00 00 00 00       	mov    ds:0x0,eax	100043a3: R_386_32	modesel
100043a7:	eb 20                	jmp    100043c9 <firstRun(bool)+0x1a2a>
100043a9:	a0 00 00 00 00       	mov    al,ds:0x0	100043aa: R_386_32	installKey
100043ae:	3c 0a                	cmp    al,0xa
100043b0:	0f 94 c0             	sete   al
100043b3:	84 c0                	test   al,al
100043b5:	75 2e                	jne    100043e5 <firstRun(bool)+0x1a46>
100043b7:	a0 00 00 00 00       	mov    al,ds:0x0	100043b8: R_386_32	installKey
100043bc:	3c 1b                	cmp    al,0x1b
100043be:	0f 94 c0             	sete   al
100043c1:	84 c0                	test   al,al
100043c3:	0f 85 ab fa ff ff    	jne    10003e74 <firstRun(bool)+0x14d5>
100043c9:	83 ec 0c             	sub    esp,0xc
100043cc:	68 f4 01 00 00       	push   0x1f4
100043d1:	e8 fc ff ff ff       	call   100043d2 <firstRun(bool)+0x1a33>	100043d2: R_386_PC32	milliTenthSleep(unsigned int)
100043d6:	83 c4 10             	add    esp,0x10
100043d9:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100043db: R_386_32	installKey
100043e0:	e9 ad fe ff ff       	jmp    10004292 <firstRun(bool)+0x18f3>
100043e5:	90                   	nop
100043e6:	80 bd 14 ff ff ff 00 	cmp    BYTE PTR [ebp-0xec],0x0
100043ed:	0f 84 ff 00 00 00    	je     100044f2 <firstRun(bool)+0x1b53>
100043f3:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100043f5: R_386_32	showSidebar
100043fa:	a1 00 00 00 00       	mov    eax,ds:0x0	100043fb: R_386_32	term
100043ff:	83 ec 0c             	sub    esp,0xc
10004402:	50                   	push   eax
10004403:	e8 fc ff ff ff       	call   10004404 <firstRun(bool)+0x1a65>	10004404: R_386_PC32	setActiveTerminal(VgaText*)
10004408:	83 c4 10             	add    esp,0x10
1000440b:	e8 fc ff ff ff       	call   1000440c <firstRun(bool)+0x1a6d>	1000440c: R_386_PC32	drawBootScreen()
10004410:	83 ec 0c             	sub    esp,0xc
10004413:	68 99 8c 00 10       	push   0x10008c99	10004414: R_386_32	.text
10004418:	6a 0d                	push   0xd
1000441a:	6a 32                	push   0x32
1000441c:	6a 05                	push   0x5
1000441e:	6a 16                	push   0x16
10004420:	e8 fc ff ff ff       	call   10004421 <firstRun(bool)+0x1a82>	10004421: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
10004425:	83 c4 20             	add    esp,0x20
10004428:	a1 00 00 00 00       	mov    eax,ds:0x0	10004429: R_386_32	term
1000442d:	83 ec 04             	sub    esp,0x4
10004430:	6a 08                	push   0x8
10004432:	6a 18                	push   0x18
10004434:	50                   	push   eax
10004435:	e8 fc ff ff ff       	call   10004436 <firstRun(bool)+0x1a97>	10004436: R_386_PC32	VgaText::setCursor(int, int)
1000443a:	83 c4 10             	add    esp,0x10
1000443d:	a1 00 00 00 00       	mov    eax,ds:0x0	1000443e: R_386_32	term
10004442:	83 ec 08             	sub    esp,0x8
10004445:	68 b0 8c 00 10       	push   0x10008cb0	10004446: R_386_32	.text
1000444a:	50                   	push   eax
1000444b:	e8 fc ff ff ff       	call   1000444c <firstRun(bool)+0x1aad>	1000444c: R_386_PC32	VgaText::puts(char const*)
10004450:	83 c4 10             	add    esp,0x10
10004453:	a1 00 00 00 00       	mov    eax,ds:0x0	10004454: R_386_32	term
10004458:	83 ec 04             	sub    esp,0x4
1000445b:	6a 0a                	push   0xa
1000445d:	6a 18                	push   0x18
1000445f:	50                   	push   eax
10004460:	e8 fc ff ff ff       	call   10004461 <firstRun(bool)+0x1ac2>	10004461: R_386_PC32	VgaText::setCursor(int, int)
10004465:	83 c4 10             	add    esp,0x10
10004468:	a1 00 00 00 00       	mov    eax,ds:0x0	10004469: R_386_32	term
1000446d:	83 ec 08             	sub    esp,0x8
10004470:	68 d8 8c 00 10       	push   0x10008cd8	10004471: R_386_32	.text
10004475:	50                   	push   eax
10004476:	e8 fc ff ff ff       	call   10004477 <firstRun(bool)+0x1ad8>	10004477: R_386_PC32	VgaText::puts(char const*)
1000447b:	83 c4 10             	add    esp,0x10
1000447e:	a1 00 00 00 00       	mov    eax,ds:0x0	1000447f: R_386_32	term
10004483:	83 ec 04             	sub    esp,0x4
10004486:	6a 0b                	push   0xb
10004488:	6a 18                	push   0x18
1000448a:	50                   	push   eax
1000448b:	e8 fc ff ff ff       	call   1000448c <firstRun(bool)+0x1aed>	1000448c: R_386_PC32	VgaText::setCursor(int, int)
10004490:	83 c4 10             	add    esp,0x10
10004493:	a1 00 00 00 00       	mov    eax,ds:0x0	10004494: R_386_32	term
10004498:	83 ec 08             	sub    esp,0x8
1000449b:	68 01 8d 00 10       	push   0x10008d01	1000449c: R_386_32	.text
100044a0:	50                   	push   eax
100044a1:	e8 fc ff ff ff       	call   100044a2 <firstRun(bool)+0x1b03>	100044a2: R_386_PC32	VgaText::puts(char const*)
100044a6:	83 c4 10             	add    esp,0x10
100044a9:	a1 00 00 00 00       	mov    eax,ds:0x0	100044aa: R_386_32	term
100044ae:	83 ec 04             	sub    esp,0x4
100044b1:	6a 0e                	push   0xe
100044b3:	6a 18                	push   0x18
100044b5:	50                   	push   eax
100044b6:	e8 fc ff ff ff       	call   100044b7 <firstRun(bool)+0x1b18>	100044b7: R_386_PC32	VgaText::setCursor(int, int)
100044bb:	83 c4 10             	add    esp,0x10
100044be:	a1 00 00 00 00       	mov    eax,ds:0x0	100044bf: R_386_32	term
100044c3:	83 ec 08             	sub    esp,0x8
100044c6:	68 10 8d 00 10       	push   0x10008d10	100044c7: R_386_32	.text
100044cb:	50                   	push   eax
100044cc:	e8 fc ff ff ff       	call   100044cd <firstRun(bool)+0x1b2e>	100044cd: R_386_PC32	VgaText::puts(char const*)
100044d1:	83 c4 10             	add    esp,0x10
100044d4:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100044d6: R_386_32	installKey
100044db:	a0 00 00 00 00       	mov    al,ds:0x0	100044dc: R_386_32	installKey
100044e0:	84 c0                	test   al,al
100044e2:	0f 94 c0             	sete   al
100044e5:	84 c0                	test   al,al
100044e7:	74 02                	je     100044eb <firstRun(bool)+0x1b4c>
100044e9:	eb f0                	jmp    100044db <firstRun(bool)+0x1b3c>
100044eb:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100044ed: R_386_32	installKey
100044f2:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100044f4: R_386_32	installKey
100044f9:	83 ec 0c             	sub    esp,0xc
100044fc:	68 84 03 00 00       	push   0x384
10004501:	e8 fc ff ff ff       	call   10004502 <firstRun(bool)+0x1b63>	10004502: R_386_PC32	milliTenthSleep(unsigned int)
10004506:	83 c4 10             	add    esp,0x10
10004509:	e8 fc ff ff ff       	call   1000450a <firstRun(bool)+0x1b6b>	1000450a: R_386_PC32	drawBootScreen()
1000450e:	83 ec 0c             	sub    esp,0xc
10004511:	68 18 2e 00 00       	push   0x2e18
10004516:	e8 fc ff ff ff       	call   10004517 <firstRun(bool)+0x1b78>	10004517: R_386_PC32	milliTenthSleep(unsigned int)
1000451b:	83 c4 10             	add    esp,0x10
1000451e:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
10004525:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10004527: R_386_32	installKey
1000452c:	e8 fc ff ff ff       	call   1000452d <firstRun(bool)+0x1b8e>	1000452d: R_386_PC32	drawBootScreen()
10004531:	83 ec 0c             	sub    esp,0xc
10004534:	68 3a 8d 00 10       	push   0x10008d3a	10004535: R_386_32	.text
10004539:	6a 0e                	push   0xe
1000453b:	6a 32                	push   0x32
1000453d:	6a 02                	push   0x2
1000453f:	6a 16                	push   0x16
10004541:	e8 fc ff ff ff       	call   10004542 <firstRun(bool)+0x1ba3>	10004542: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
10004546:	83 c4 20             	add    esp,0x20
10004549:	a1 00 00 00 00       	mov    eax,ds:0x0	1000454a: R_386_32	term
1000454e:	83 ec 04             	sub    esp,0x4
10004551:	6a 18                	push   0x18
10004553:	6a 11                	push   0x11
10004555:	50                   	push   eax
10004556:	e8 fc ff ff ff       	call   10004557 <firstRun(bool)+0x1bb8>	10004557: R_386_PC32	VgaText::setCursor(int, int)
1000455b:	83 c4 10             	add    esp,0x10
1000455e:	a1 00 00 00 00       	mov    eax,ds:0x0	1000455f: R_386_32	term
10004563:	6a 0b                	push   0xb
10004565:	6a 03                	push   0x3
10004567:	68 d6 8b 00 10       	push   0x10008bd6	10004568: R_386_32	.text
1000456c:	50                   	push   eax
1000456d:	e8 fc ff ff ff       	call   1000456e <firstRun(bool)+0x1bcf>	1000456e: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10004572:	83 c4 10             	add    esp,0x10
10004575:	a1 00 00 00 00       	mov    eax,ds:0x0	10004576: R_386_32	term
1000457a:	83 ec 04             	sub    esp,0x4
1000457d:	6a 05                	push   0x5
1000457f:	6a 18                	push   0x18
10004581:	50                   	push   eax
10004582:	e8 fc ff ff ff       	call   10004583 <firstRun(bool)+0x1be4>	10004583: R_386_PC32	VgaText::setCursor(int, int)
10004587:	83 c4 10             	add    esp,0x10
1000458a:	a1 00 00 00 00       	mov    eax,ds:0x0	1000458b: R_386_32	term
1000458f:	83 ec 08             	sub    esp,0x8
10004592:	68 48 8d 00 10       	push   0x10008d48	10004593: R_386_32	.text
10004597:	50                   	push   eax
10004598:	e8 fc ff ff ff       	call   10004599 <firstRun(bool)+0x1bfa>	10004599: R_386_PC32	VgaText::puts(char const*)
1000459d:	83 c4 10             	add    esp,0x10
100045a0:	a1 00 00 00 00       	mov    eax,ds:0x0	100045a1: R_386_32	term
100045a5:	83 ec 04             	sub    esp,0x4
100045a8:	6a 06                	push   0x6
100045aa:	6a 18                	push   0x18
100045ac:	50                   	push   eax
100045ad:	e8 fc ff ff ff       	call   100045ae <firstRun(bool)+0x1c0f>	100045ae: R_386_PC32	VgaText::setCursor(int, int)
100045b2:	83 c4 10             	add    esp,0x10
100045b5:	a1 00 00 00 00       	mov    eax,ds:0x0	100045b6: R_386_32	term
100045ba:	83 ec 08             	sub    esp,0x8
100045bd:	68 ac 8b 00 10       	push   0x10008bac	100045be: R_386_32	.text
100045c2:	50                   	push   eax
100045c3:	e8 fc ff ff ff       	call   100045c4 <firstRun(bool)+0x1c25>	100045c4: R_386_PC32	VgaText::puts(char const*)
100045c8:	83 c4 10             	add    esp,0x10
100045cb:	c6 05 10 00 00 00 00 	mov    BYTE PTR ds:0x10,0x0	100045cd: R_386_32	pkeybuf
100045d2:	c6 05 11 00 00 00 00 	mov    BYTE PTR ds:0x11,0x0	100045d4: R_386_32	pkeybuf
100045d9:	a1 00 00 00 00       	mov    eax,ds:0x0	100045da: R_386_32	term
100045de:	83 ec 04             	sub    esp,0x4
100045e1:	6a 08                	push   0x8
100045e3:	6a 1c                	push   0x1c
100045e5:	50                   	push   eax
100045e6:	e8 fc ff ff ff       	call   100045e7 <firstRun(bool)+0x1c48>	100045e7: R_386_PC32	VgaText::setCursor(int, int)
100045eb:	83 c4 10             	add    esp,0x10
100045ee:	a1 00 00 00 00       	mov    eax,ds:0x0	100045ef: R_386_32	term
100045f3:	83 ec 08             	sub    esp,0x8
100045f6:	68 00 00 00 00       	push   0x0	100045f7: R_386_32	pkeybuf
100045fb:	50                   	push   eax
100045fc:	e8 fc ff ff ff       	call   100045fd <firstRun(bool)+0x1c5e>	100045fd: R_386_PC32	VgaText::puts(char const*)
10004601:	83 c4 10             	add    esp,0x10
10004604:	a1 00 00 00 00       	mov    eax,ds:0x0	10004605: R_386_32	term
10004609:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
1000460c:	83 c2 1c             	add    edx,0x1c
1000460f:	83 ec 04             	sub    esp,0x4
10004612:	6a 08                	push   0x8
10004614:	52                   	push   edx
10004615:	50                   	push   eax
10004616:	e8 fc ff ff ff       	call   10004617 <firstRun(bool)+0x1c78>	10004617: R_386_PC32	VgaText::setCursor(int, int)
1000461b:	83 c4 10             	add    esp,0x10
1000461e:	a1 00 00 00 00       	mov    eax,ds:0x0	1000461f: R_386_32	term
10004623:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10004626:	81 c2 00 00 00 00    	add    edx,0x0	10004628: R_386_32	pkeybuf
1000462c:	8a 12                	mov    dl,BYTE PTR [edx]
1000462e:	0f be d2             	movsx  edx,dl
10004631:	6a 00                	push   0x0
10004633:	6a 0f                	push   0xf
10004635:	52                   	push   edx
10004636:	50                   	push   eax
10004637:	e8 fc ff ff ff       	call   10004638 <firstRun(bool)+0x1c99>	10004638: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
1000463c:	83 c4 10             	add    esp,0x10
1000463f:	a1 00 00 00 00       	mov    eax,ds:0x0	10004640: R_386_32	term
10004644:	83 ec 04             	sub    esp,0x4
10004647:	6a 08                	push   0x8
10004649:	6a 2c                	push   0x2c
1000464b:	50                   	push   eax
1000464c:	e8 fc ff ff ff       	call   1000464d <firstRun(bool)+0x1cae>	1000464d: R_386_PC32	VgaText::setCursor(int, int)
10004651:	83 c4 10             	add    esp,0x10
10004654:	a1 00 00 00 00       	mov    eax,ds:0x0	10004655: R_386_32	term
10004659:	6a 0f                	push   0xf
1000465b:	6a 0f                	push   0xf
1000465d:	6a 20                	push   0x20
1000465f:	50                   	push   eax
10004660:	e8 fc ff ff ff       	call   10004661 <firstRun(bool)+0x1cc2>	10004661: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
10004665:	83 c4 10             	add    esp,0x10
10004668:	a1 00 00 00 00       	mov    eax,ds:0x0	10004669: R_386_32	term
1000466d:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10004670:	83 c2 1c             	add    edx,0x1c
10004673:	83 ec 04             	sub    esp,0x4
10004676:	6a 08                	push   0x8
10004678:	52                   	push   edx
10004679:	50                   	push   eax
1000467a:	e8 fc ff ff ff       	call   1000467b <firstRun(bool)+0x1cdc>	1000467b: R_386_PC32	VgaText::setCursor(int, int)
1000467f:	83 c4 10             	add    esp,0x10
10004682:	a0 00 00 00 00       	mov    al,ds:0x0	10004683: R_386_32	installKey
10004687:	84 c0                	test   al,al
10004689:	0f 94 c0             	sete   al
1000468c:	84 c0                	test   al,al
1000468e:	74 02                	je     10004692 <firstRun(bool)+0x1cf3>
10004690:	eb f0                	jmp    10004682 <firstRun(bool)+0x1ce3>
10004692:	a1 00 00 00 00       	mov    eax,ds:0x0	10004693: R_386_32	term
10004697:	05 82 00 00 00       	add    eax,0x82
1000469c:	83 ec 04             	sub    esp,0x4
1000469f:	6a 10                	push   0x10
100046a1:	6a 00                	push   0x0
100046a3:	50                   	push   eax
100046a4:	e8 fc ff ff ff       	call   100046a5 <firstRun(bool)+0x1d06>	100046a5: R_386_PC32	memset
100046a9:	83 c4 10             	add    esp,0x10
100046ac:	a1 00 00 00 00       	mov    eax,ds:0x0	100046ad: R_386_32	term
100046b1:	05 02 01 00 00       	add    eax,0x102
100046b6:	83 ec 04             	sub    esp,0x4
100046b9:	6a 10                	push   0x10
100046bb:	6a 00                	push   0x0
100046bd:	50                   	push   eax
100046be:	e8 fc ff ff ff       	call   100046bf <firstRun(bool)+0x1d20>	100046bf: R_386_PC32	memset
100046c3:	83 c4 10             	add    esp,0x10
100046c6:	a0 00 00 00 00       	mov    al,ds:0x0	100046c7: R_386_32	installKey
100046cb:	3c 03                	cmp    al,0x3
100046cd:	74 09                	je     100046d8 <firstRun(bool)+0x1d39>
100046cf:	a0 00 00 00 00       	mov    al,ds:0x0	100046d0: R_386_32	installKey
100046d4:	3c 08                	cmp    al,0x8
100046d6:	75 04                	jne    100046dc <firstRun(bool)+0x1d3d>
100046d8:	b0 01                	mov    al,0x1
100046da:	eb 02                	jmp    100046de <firstRun(bool)+0x1d3f>
100046dc:	b0 00                	mov    al,0x0
100046de:	84 c0                	test   al,al
100046e0:	74 31                	je     10004713 <firstRun(bool)+0x1d74>
100046e2:	ff 4d e4             	dec    DWORD PTR [ebp-0x1c]
100046e5:	83 7d e4 ff          	cmp    DWORD PTR [ebp-0x1c],0xffffffff
100046e9:	75 14                	jne    100046ff <firstRun(bool)+0x1d60>
100046eb:	83 ec 0c             	sub    esp,0xc
100046ee:	68 00 00 00 00       	push   0x0	100046ef: R_386_32	pkeybuf
100046f3:	e8 fc ff ff ff       	call   100046f4 <firstRun(bool)+0x1d55>	100046f4: R_386_PC32	strlen
100046f8:	83 c4 10             	add    esp,0x10
100046fb:	48                   	dec    eax
100046fc:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
100046ff:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10004702:	05 00 00 00 00       	add    eax,0x0	10004703: R_386_32	pkeybuf
10004707:	8a 00                	mov    al,BYTE PTR [eax]
10004709:	3c 2d                	cmp    al,0x2d
1000470b:	0f 85 6f 03 00 00    	jne    10004a80 <firstRun(bool)+0x20e1>
10004711:	eb cf                	jmp    100046e2 <firstRun(bool)+0x1d43>
10004713:	a0 00 00 00 00       	mov    al,ds:0x0	10004714: R_386_32	installKey
10004718:	3c 2f                	cmp    al,0x2f
1000471a:	7e 09                	jle    10004725 <firstRun(bool)+0x1d86>
1000471c:	a0 00 00 00 00       	mov    al,ds:0x0	1000471d: R_386_32	installKey
10004721:	3c 39                	cmp    al,0x39
10004723:	7e 36                	jle    1000475b <firstRun(bool)+0x1dbc>
10004725:	a0 00 00 00 00       	mov    al,ds:0x0	10004726: R_386_32	installKey
1000472a:	3c 40                	cmp    al,0x40
1000472c:	7e 09                	jle    10004737 <firstRun(bool)+0x1d98>
1000472e:	a0 00 00 00 00       	mov    al,ds:0x0	1000472f: R_386_32	installKey
10004733:	3c 5a                	cmp    al,0x5a
10004735:	7e 24                	jle    1000475b <firstRun(bool)+0x1dbc>
10004737:	a0 00 00 00 00       	mov    al,ds:0x0	10004738: R_386_32	installKey
1000473c:	3c 60                	cmp    al,0x60
1000473e:	7e 09                	jle    10004749 <firstRun(bool)+0x1daa>
10004740:	a0 00 00 00 00       	mov    al,ds:0x0	10004741: R_386_32	installKey
10004745:	3c 7a                	cmp    al,0x7a
10004747:	7e 12                	jle    1000475b <firstRun(bool)+0x1dbc>
10004749:	a0 00 00 00 00       	mov    al,ds:0x0	1000474a: R_386_32	installKey
1000474e:	3c 20                	cmp    al,0x20
10004750:	74 09                	je     1000475b <firstRun(bool)+0x1dbc>
10004752:	a0 00 00 00 00       	mov    al,ds:0x0	10004753: R_386_32	installKey
10004757:	3c 04                	cmp    al,0x4
10004759:	75 04                	jne    1000475f <firstRun(bool)+0x1dc0>
1000475b:	b0 01                	mov    al,0x1
1000475d:	eb 02                	jmp    10004761 <firstRun(bool)+0x1dc2>
1000475f:	b0 00                	mov    al,0x0
10004761:	84 c0                	test   al,al
10004763:	0f 84 a3 00 00 00    	je     1000480c <firstRun(bool)+0x1e6d>
10004769:	a0 00 00 00 00       	mov    al,ds:0x0	1000476a: R_386_32	installKey
1000476e:	3c 2f                	cmp    al,0x2f
10004770:	7e 09                	jle    1000477b <firstRun(bool)+0x1ddc>
10004772:	a0 00 00 00 00       	mov    al,ds:0x0	10004773: R_386_32	installKey
10004777:	3c 39                	cmp    al,0x39
10004779:	7e 24                	jle    1000479f <firstRun(bool)+0x1e00>
1000477b:	a0 00 00 00 00       	mov    al,ds:0x0	1000477c: R_386_32	installKey
10004780:	3c 40                	cmp    al,0x40
10004782:	7e 09                	jle    1000478d <firstRun(bool)+0x1dee>
10004784:	a0 00 00 00 00       	mov    al,ds:0x0	10004785: R_386_32	installKey
10004789:	3c 5a                	cmp    al,0x5a
1000478b:	7e 12                	jle    1000479f <firstRun(bool)+0x1e00>
1000478d:	a0 00 00 00 00       	mov    al,ds:0x0	1000478e: R_386_32	installKey
10004792:	3c 60                	cmp    al,0x60
10004794:	7e 0d                	jle    100047a3 <firstRun(bool)+0x1e04>
10004796:	a0 00 00 00 00       	mov    al,ds:0x0	10004797: R_386_32	installKey
1000479b:	3c 7a                	cmp    al,0x7a
1000479d:	7f 04                	jg     100047a3 <firstRun(bool)+0x1e04>
1000479f:	b0 01                	mov    al,0x1
100047a1:	eb 02                	jmp    100047a5 <firstRun(bool)+0x1e06>
100047a3:	b0 00                	mov    al,0x0
100047a5:	84 c0                	test   al,al
100047a7:	74 2c                	je     100047d5 <firstRun(bool)+0x1e36>
100047a9:	a0 00 00 00 00       	mov    al,ds:0x0	100047aa: R_386_32	installKey
100047ae:	3c 60                	cmp    al,0x60
100047b0:	7e 13                	jle    100047c5 <firstRun(bool)+0x1e26>
100047b2:	a0 00 00 00 00       	mov    al,ds:0x0	100047b3: R_386_32	installKey
100047b7:	3c 7a                	cmp    al,0x7a
100047b9:	7f 0a                	jg     100047c5 <firstRun(bool)+0x1e26>
100047bb:	a0 00 00 00 00       	mov    al,ds:0x0	100047bc: R_386_32	installKey
100047c0:	83 e8 20             	sub    eax,0x20
100047c3:	eb 05                	jmp    100047ca <firstRun(bool)+0x1e2b>
100047c5:	a0 00 00 00 00       	mov    al,ds:0x0	100047c6: R_386_32	installKey
100047ca:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
100047cd:	81 c2 00 00 00 00    	add    edx,0x0	100047cf: R_386_32	pkeybuf
100047d3:	88 02                	mov    BYTE PTR [edx],al
100047d5:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
100047d8:	83 ec 0c             	sub    esp,0xc
100047db:	68 00 00 00 00       	push   0x0	100047dc: R_386_32	pkeybuf
100047e0:	e8 fc ff ff ff       	call   100047e1 <firstRun(bool)+0x1e42>	100047e1: R_386_PC32	strlen
100047e5:	83 c4 10             	add    esp,0x10
100047e8:	89 c2                	mov    edx,eax
100047ea:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
100047ed:	39 c2                	cmp    edx,eax
100047ef:	77 07                	ja     100047f8 <firstRun(bool)+0x1e59>
100047f1:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
100047f8:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
100047fb:	05 00 00 00 00       	add    eax,0x0	100047fc: R_386_32	pkeybuf
10004800:	8a 00                	mov    al,BYTE PTR [eax]
10004802:	3c 2d                	cmp    al,0x2d
10004804:	0f 85 76 02 00 00    	jne    10004a80 <firstRun(bool)+0x20e1>
1000480a:	eb c9                	jmp    100047d5 <firstRun(bool)+0x1e36>
1000480c:	a0 00 00 00 00       	mov    al,ds:0x0	1000480d: R_386_32	installKey
10004811:	3c 1b                	cmp    al,0x1b
10004813:	0f 94 c0             	sete   al
10004816:	84 c0                	test   al,al
10004818:	0f 85 99 f9 ff ff    	jne    100041b7 <firstRun(bool)+0x1818>
1000481e:	a0 00 00 00 00       	mov    al,ds:0x0	1000481f: R_386_32	installKey
10004823:	3c 0a                	cmp    al,0xa
10004825:	0f 94 c0             	sete   al
10004828:	84 c0                	test   al,al
1000482a:	0f 84 50 02 00 00    	je     10004a80 <firstRun(bool)+0x20e1>
10004830:	83 ec 0c             	sub    esp,0xc
10004833:	68 00 00 00 00       	push   0x0	10004834: R_386_32	pkeybuf
10004838:	e8 fc ff ff ff       	call   10004839 <firstRun(bool)+0x1e9a>	10004839: R_386_PC32	checkExtendedKey(char*)
1000483d:	83 c4 10             	add    esp,0x10
10004840:	85 c0                	test   eax,eax
10004842:	0f 95 c0             	setne  al
10004845:	88 45 8f             	mov    BYTE PTR [ebp-0x71],al
10004848:	80 7d 8f 00          	cmp    BYTE PTR [ebp-0x71],0x0
1000484c:	74 5b                	je     100048a9 <firstRun(bool)+0x1f0a>
1000484e:	83 ec 0c             	sub    esp,0xc
10004851:	68 f0 0a 00 00       	push   0xaf0
10004856:	e8 fc ff ff ff       	call   10004857 <firstRun(bool)+0x1eb8>	10004857: R_386_PC32	milliTenthSleep(unsigned int)
1000485b:	83 c4 10             	add    esp,0x10
1000485e:	e8 fc ff ff ff       	call   1000485f <firstRun(bool)+0x1ec0>	1000485f: R_386_PC32	drawBootScreen()
10004863:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10004865: R_386_32	installKey
1000486a:	83 ec 0c             	sub    esp,0xc
1000486d:	68 84 03 00 00       	push   0x384
10004872:	e8 fc ff ff ff       	call   10004873 <firstRun(bool)+0x1ed4>	10004873: R_386_PC32	milliTenthSleep(unsigned int)
10004877:	83 c4 10             	add    esp,0x10
1000487a:	e8 fc ff ff ff       	call   1000487b <firstRun(bool)+0x1edc>	1000487b: R_386_PC32	drawBootScreen()
1000487f:	83 ec 0c             	sub    esp,0xc
10004882:	68 c0 12 00 00       	push   0x12c0
10004887:	e8 fc ff ff ff       	call   10004888 <firstRun(bool)+0x1ee9>	10004888: R_386_PC32	milliTenthSleep(unsigned int)
1000488c:	83 c4 10             	add    esp,0x10
1000488f:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10004891: R_386_32	installKey
10004896:	90                   	nop
10004897:	80 bd 14 ff ff ff 00 	cmp    BYTE PTR [ebp-0xec],0x0
1000489e:	0f 84 e8 01 00 00    	je     10004a8c <firstRun(bool)+0x20ed>
100048a4:	e9 d2 02 00 00       	jmp    10004b7b <firstRun(bool)+0x21dc>
100048a9:	83 ec 0c             	sub    esp,0xc
100048ac:	68 f0 0a 00 00       	push   0xaf0
100048b1:	e8 fc ff ff ff       	call   100048b2 <firstRun(bool)+0x1f13>	100048b2: R_386_PC32	milliTenthSleep(unsigned int)
100048b6:	83 c4 10             	add    esp,0x10
100048b9:	e8 fc ff ff ff       	call   100048ba <firstRun(bool)+0x1f1b>	100048ba: R_386_PC32	drawBootScreen()
100048be:	83 ec 08             	sub    esp,0x8
100048c1:	6a 01                	push   0x1
100048c3:	68 3a 8d 00 10       	push   0x10008d3a	100048c4: R_386_32	.text
100048c8:	6a 0e                	push   0xe
100048ca:	6a 32                	push   0x32
100048cc:	6a 02                	push   0x2
100048ce:	6a 16                	push   0x16
100048d0:	e8 fc ff ff ff       	call   100048d1 <firstRun(bool)+0x1f32>	100048d1: R_386_PC32	drawBasicWindowX(int, int, int, int, char const*, bool)
100048d5:	83 c4 20             	add    esp,0x20
100048d8:	a1 00 00 00 00       	mov    eax,ds:0x0	100048d9: R_386_32	term
100048dd:	83 ec 04             	sub    esp,0x4
100048e0:	6a 05                	push   0x5
100048e2:	6a 18                	push   0x18
100048e4:	50                   	push   eax
100048e5:	e8 fc ff ff ff       	call   100048e6 <firstRun(bool)+0x1f47>	100048e6: R_386_PC32	VgaText::setCursor(int, int)
100048ea:	83 c4 10             	add    esp,0x10
100048ed:	a1 00 00 00 00       	mov    eax,ds:0x0	100048ee: R_386_32	term
100048f2:	6a 07                	push   0x7
100048f4:	6a 00                	push   0x0
100048f6:	68 48 8d 00 10       	push   0x10008d48	100048f7: R_386_32	.text
100048fb:	50                   	push   eax
100048fc:	e8 fc ff ff ff       	call   100048fd <firstRun(bool)+0x1f5e>	100048fd: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10004901:	83 c4 10             	add    esp,0x10
10004904:	a1 00 00 00 00       	mov    eax,ds:0x0	10004905: R_386_32	term
10004909:	83 ec 04             	sub    esp,0x4
1000490c:	6a 06                	push   0x6
1000490e:	6a 18                	push   0x18
10004910:	50                   	push   eax
10004911:	e8 fc ff ff ff       	call   10004912 <firstRun(bool)+0x1f73>	10004912: R_386_PC32	VgaText::setCursor(int, int)
10004916:	83 c4 10             	add    esp,0x10
10004919:	a1 00 00 00 00       	mov    eax,ds:0x0	1000491a: R_386_32	term
1000491e:	6a 07                	push   0x7
10004920:	6a 00                	push   0x0
10004922:	68 ac 8b 00 10       	push   0x10008bac	10004923: R_386_32	.text
10004927:	50                   	push   eax
10004928:	e8 fc ff ff ff       	call   10004929 <firstRun(bool)+0x1f8a>	10004929: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
1000492d:	83 c4 10             	add    esp,0x10
10004930:	a1 00 00 00 00       	mov    eax,ds:0x0	10004931: R_386_32	term
10004935:	83 ec 04             	sub    esp,0x4
10004938:	6a 08                	push   0x8
1000493a:	6a 1c                	push   0x1c
1000493c:	50                   	push   eax
1000493d:	e8 fc ff ff ff       	call   1000493e <firstRun(bool)+0x1f9f>	1000493e: R_386_PC32	VgaText::setCursor(int, int)
10004942:	83 c4 10             	add    esp,0x10
10004945:	a1 00 00 00 00       	mov    eax,ds:0x0	10004946: R_386_32	term
1000494a:	6a 07                	push   0x7
1000494c:	6a 00                	push   0x0
1000494e:	68 00 00 00 00       	push   0x0	1000494f: R_386_32	pkeybuf
10004953:	50                   	push   eax
10004954:	e8 fc ff ff ff       	call   10004955 <firstRun(bool)+0x1fb6>	10004955: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10004959:	83 c4 10             	add    esp,0x10
1000495c:	a1 00 00 00 00       	mov    eax,ds:0x0	1000495d: R_386_32	term
10004961:	83 ec 04             	sub    esp,0x4
10004964:	6a 08                	push   0x8
10004966:	6a 2c                	push   0x2c
10004968:	50                   	push   eax
10004969:	e8 fc ff ff ff       	call   1000496a <firstRun(bool)+0x1fcb>	1000496a: R_386_PC32	VgaText::setCursor(int, int)
1000496e:	83 c4 10             	add    esp,0x10
10004971:	a1 00 00 00 00       	mov    eax,ds:0x0	10004972: R_386_32	term
10004976:	6a 07                	push   0x7
10004978:	6a 07                	push   0x7
1000497a:	6a 20                	push   0x20
1000497c:	50                   	push   eax
1000497d:	e8 fc ff ff ff       	call   1000497e <firstRun(bool)+0x1fdf>	1000497e: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
10004982:	83 c4 10             	add    esp,0x10
10004985:	a1 00 00 00 00       	mov    eax,ds:0x0	10004986: R_386_32	term
1000498a:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
1000498d:	83 c2 1c             	add    edx,0x1c
10004990:	83 ec 04             	sub    esp,0x4
10004993:	6a 08                	push   0x8
10004995:	52                   	push   edx
10004996:	50                   	push   eax
10004997:	e8 fc ff ff ff       	call   10004998 <firstRun(bool)+0x1ff9>	10004998: R_386_PC32	VgaText::setCursor(int, int)
1000499c:	83 c4 10             	add    esp,0x10
1000499f:	83 ec 0c             	sub    esp,0xc
100049a2:	68 99 8c 00 10       	push   0x10008c99	100049a3: R_386_32	.text
100049a7:	6a 0b                	push   0xb
100049a9:	6a 2b                	push   0x2b
100049ab:	6a 0a                	push   0xa
100049ad:	6a 22                	push   0x22
100049af:	e8 fc ff ff ff       	call   100049b0 <firstRun(bool)+0x2011>	100049b0: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
100049b4:	83 c4 20             	add    esp,0x20
100049b7:	a1 00 00 00 00       	mov    eax,ds:0x0	100049b8: R_386_32	term
100049bc:	83 ec 04             	sub    esp,0x4
100049bf:	6a 0d                	push   0xd
100049c1:	6a 24                	push   0x24
100049c3:	50                   	push   eax
100049c4:	e8 fc ff ff ff       	call   100049c5 <firstRun(bool)+0x2026>	100049c5: R_386_PC32	VgaText::setCursor(int, int)
100049c9:	83 c4 10             	add    esp,0x10
100049cc:	a1 00 00 00 00       	mov    eax,ds:0x0	100049cd: R_386_32	term
100049d1:	83 ec 08             	sub    esp,0x8
100049d4:	68 70 8d 00 10       	push   0x10008d70	100049d5: R_386_32	.text
100049d9:	50                   	push   eax
100049da:	e8 fc ff ff ff       	call   100049db <firstRun(bool)+0x203c>	100049db: R_386_PC32	VgaText::puts(char const*)
100049df:	83 c4 10             	add    esp,0x10
100049e2:	a1 00 00 00 00       	mov    eax,ds:0x0	100049e3: R_386_32	term
100049e7:	83 ec 04             	sub    esp,0x4
100049ea:	6a 0f                	push   0xf
100049ec:	6a 24                	push   0x24
100049ee:	50                   	push   eax
100049ef:	e8 fc ff ff ff       	call   100049f0 <firstRun(bool)+0x2051>	100049f0: R_386_PC32	VgaText::setCursor(int, int)
100049f4:	83 c4 10             	add    esp,0x10
100049f7:	a1 00 00 00 00       	mov    eax,ds:0x0	100049f8: R_386_32	term
100049fc:	83 ec 08             	sub    esp,0x8
100049ff:	68 98 8d 00 10       	push   0x10008d98	10004a00: R_386_32	.text
10004a04:	50                   	push   eax
10004a05:	e8 fc ff ff ff       	call   10004a06 <firstRun(bool)+0x2067>	10004a06: R_386_PC32	VgaText::puts(char const*)
10004a0a:	83 c4 10             	add    esp,0x10
10004a0d:	a1 00 00 00 00       	mov    eax,ds:0x0	10004a0e: R_386_32	term
10004a12:	83 ec 04             	sub    esp,0x4
10004a15:	6a 10                	push   0x10
10004a17:	6a 24                	push   0x24
10004a19:	50                   	push   eax
10004a1a:	e8 fc ff ff ff       	call   10004a1b <firstRun(bool)+0x207c>	10004a1b: R_386_PC32	VgaText::setCursor(int, int)
10004a1f:	83 c4 10             	add    esp,0x10
10004a22:	a1 00 00 00 00       	mov    eax,ds:0x0	10004a23: R_386_32	term
10004a27:	83 ec 08             	sub    esp,0x8
10004a2a:	68 bc 8d 00 10       	push   0x10008dbc	10004a2b: R_386_32	.text
10004a2f:	50                   	push   eax
10004a30:	e8 fc ff ff ff       	call   10004a31 <firstRun(bool)+0x2092>	10004a31: R_386_PC32	VgaText::puts(char const*)
10004a35:	83 c4 10             	add    esp,0x10
10004a38:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10004a3a: R_386_32	installKey
10004a3f:	83 ec 0c             	sub    esp,0xc
10004a42:	68 94 11 00 00       	push   0x1194
10004a47:	e8 fc ff ff ff       	call   10004a48 <firstRun(bool)+0x20a9>	10004a48: R_386_PC32	milliTenthSleep(unsigned int)
10004a4c:	83 c4 10             	add    esp,0x10
10004a4f:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10004a51: R_386_32	installKey
10004a56:	a0 00 00 00 00       	mov    al,ds:0x0	10004a57: R_386_32	installKey
10004a5b:	84 c0                	test   al,al
10004a5d:	0f 94 c0             	sete   al
10004a60:	84 c0                	test   al,al
10004a62:	74 02                	je     10004a66 <firstRun(bool)+0x20c7>
10004a64:	eb f0                	jmp    10004a56 <firstRun(bool)+0x20b7>
10004a66:	e8 fc ff ff ff       	call   10004a67 <firstRun(bool)+0x20c8>	10004a67: R_386_PC32	drawBootScreen()
10004a6b:	83 ec 0c             	sub    esp,0xc
10004a6e:	68 9c 18 00 00       	push   0x189c
10004a73:	e8 fc ff ff ff       	call   10004a74 <firstRun(bool)+0x20d5>	10004a74: R_386_PC32	milliTenthSleep(unsigned int)
10004a78:	83 c4 10             	add    esp,0x10
10004a7b:	e9 a5 fa ff ff       	jmp    10004525 <firstRun(bool)+0x1b86>
10004a80:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10004a82: R_386_32	installKey
10004a87:	e9 3f fb ff ff       	jmp    100045cb <firstRun(bool)+0x1c2c>
10004a8c:	e8 fc ff ff ff       	call   10004a8d <firstRun(bool)+0x20ee>	10004a8d: R_386_PC32	drawBootScreen()
10004a91:	83 ec 0c             	sub    esp,0xc
10004a94:	68 dd 8d 00 10       	push   0x10008ddd	10004a95: R_386_32	.text
10004a99:	6a 0d                	push   0xd
10004a9b:	6a 32                	push   0x32
10004a9d:	6a 05                	push   0x5
10004a9f:	6a 16                	push   0x16
10004aa1:	e8 fc ff ff ff       	call   10004aa2 <firstRun(bool)+0x2103>	10004aa2: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
10004aa6:	83 c4 20             	add    esp,0x20
10004aa9:	83 ec 0c             	sub    esp,0xc
10004aac:	6a 00                	push   0x0
10004aae:	e8 fc ff ff ff       	call   10004aaf <firstRun(bool)+0x2110>	10004aaf: R_386_PC32	bootInstallTasks(int)
10004ab3:	83 c4 10             	add    esp,0x10
10004ab6:	83 ec 04             	sub    esp,0x4
10004ab9:	6a 0c                	push   0xc
10004abb:	68 f5 8d 00 10       	push   0x10008df5	10004abc: R_386_32	.text
10004ac0:	68 06 8e 00 10       	push   0x10008e06	10004ac1: R_386_32	.text
10004ac5:	e8 fc ff ff ff       	call   10004ac6 <firstRun(bool)+0x2127>	10004ac6: R_386_PC32	Reg::readIntWithDefault(char*, char*, int)
10004aca:	83 c4 10             	add    esp,0x10
10004acd:	89 45 88             	mov    DWORD PTR [ebp-0x78],eax
10004ad0:	83 ec 0c             	sub    esp,0xc
10004ad3:	ff 75 88             	push   DWORD PTR [ebp-0x78]
10004ad6:	e8 fc ff ff ff       	call   10004ad7 <firstRun(bool)+0x2138>	10004ad7: R_386_PC32	Virt::setupPageSwapping(int)
10004adb:	83 c4 10             	add    esp,0x10
10004ade:	83 ec 0c             	sub    esp,0xc
10004ae1:	6a 01                	push   0x1
10004ae3:	e8 fc ff ff ff       	call   10004ae4 <firstRun(bool)+0x2145>	10004ae4: R_386_PC32	bootInstallTasks(int)
10004ae8:	83 c4 10             	add    esp,0x10
10004aeb:	83 ec 0c             	sub    esp,0xc
10004aee:	68 0d 8e 00 10       	push   0x10008e0d	10004aef: R_386_32	.text
10004af3:	e8 fc ff ff ff       	call   10004af4 <firstRun(bool)+0x2155>	10004af4: R_386_PC32	rmtree(char*)
10004af8:	83 c4 10             	add    esp,0x10
10004afb:	83 ec 0c             	sub    esp,0xc
10004afe:	68 27 8e 00 10       	push   0x10008e27	10004aff: R_386_32	.text
10004b03:	e8 fc ff ff ff       	call   10004b04 <firstRun(bool)+0x2165>	10004b04: R_386_PC32	rmtree(char*)
10004b08:	83 c4 10             	add    esp,0x10
10004b0b:	83 ec 08             	sub    esp,0x8
10004b0e:	68 c0 01 00 00       	push   0x1c0
10004b13:	68 0d 8e 00 10       	push   0x10008e0d	10004b14: R_386_32	.text
10004b18:	e8 fc ff ff ff       	call   10004b19 <firstRun(bool)+0x217a>	10004b19: R_386_PC32	mkdir(char const*, int)
10004b1d:	83 c4 10             	add    esp,0x10
10004b20:	83 ec 08             	sub    esp,0x8
10004b23:	68 c0 01 00 00       	push   0x1c0
10004b28:	68 27 8e 00 10       	push   0x10008e27	10004b29: R_386_32	.text
10004b2d:	e8 fc ff ff ff       	call   10004b2e <firstRun(bool)+0x218f>	10004b2e: R_386_PC32	mkdir(char const*, int)
10004b32:	83 c4 10             	add    esp,0x10
10004b35:	83 ec 08             	sub    esp,0x8
10004b38:	68 0d 8e 00 10       	push   0x10008e0d	10004b39: R_386_32	.text
10004b3d:	68 40 8e 00 10       	push   0x10008e40	10004b3e: R_386_32	.text
10004b42:	e8 fc ff ff ff       	call   10004b43 <firstRun(bool)+0x21a4>	10004b43: R_386_PC32	copytree(char*, char*)
10004b47:	83 c4 10             	add    esp,0x10
10004b4a:	83 ec 0c             	sub    esp,0xc
10004b4d:	6a 02                	push   0x2
10004b4f:	e8 fc ff ff ff       	call   10004b50 <firstRun(bool)+0x21b1>	10004b50: R_386_PC32	bootInstallTasks(int)
10004b54:	83 c4 10             	add    esp,0x10
10004b57:	83 ec 0c             	sub    esp,0xc
10004b5a:	68 00 00 00 00       	push   0x0	10004b5b: R_386_32	currName
10004b5f:	e8 fc ff ff ff       	call   10004b60 <firstRun(bool)+0x21c1>	10004b60: R_386_PC32	createUser(char const*)
10004b64:	83 c4 10             	add    esp,0x10
10004b67:	83 ec 0c             	sub    esp,0xc
10004b6a:	6a 03                	push   0x3
10004b6c:	e8 fc ff ff ff       	call   10004b6d <firstRun(bool)+0x21ce>	10004b6d: R_386_PC32	bootInstallTasks(int)
10004b71:	83 c4 10             	add    esp,0x10
10004b74:	c6 05 00 00 00 00 01 	mov    BYTE PTR ds:0x0,0x1	10004b76: R_386_32	VgaText::hiddenOut
10004b7b:	8d 65 f4             	lea    esp,[ebp-0xc]
10004b7e:	5b                   	pop    ebx
10004b7f:	5e                   	pop    esi
10004b80:	5f                   	pop    edi
10004b81:	5d                   	pop    ebp
10004b82:	c3                   	ret    

10004b83 <loadExtensions()>:
10004b83:	55                   	push   ebp
10004b84:	89 e5                	mov    ebp,esp
10004b86:	83 ec 08             	sub    esp,0x8
10004b89:	83 ec 0c             	sub    esp,0xc
10004b8c:	68 e8 8e 00 10       	push   0x10008ee8	10004b8d: R_386_32	.text
10004b91:	e8 fc ff ff ff       	call   10004b92 <loadExtensions()+0xf>	10004b92: R_386_PC32	KeSetBootMessage(char const*)
10004b96:	83 c4 10             	add    esp,0x10
10004b99:	90                   	nop
10004b9a:	c9                   	leave  
10004b9b:	c3                   	ret    

10004b9c <rgtree(Reghive_Tag*, int, int)>:
10004b9c:	55                   	push   ebp
10004b9d:	89 e5                	mov    ebp,esp
10004b9f:	53                   	push   ebx
10004ba0:	83 ec 44             	sub    esp,0x44
10004ba3:	83 7d 0c 01          	cmp    DWORD PTR [ebp+0xc],0x1
10004ba7:	75 16                	jne    10004bbf <rgtree(Reghive_Tag*, int, int)+0x23>
10004ba9:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
10004bad:	75 10                	jne    10004bbf <rgtree(Reghive_Tag*, int, int)+0x23>
10004baf:	83 ec 0c             	sub    esp,0xc
10004bb2:	68 fe 8e 00 10       	push   0x10008efe	10004bb3: R_386_32	.text
10004bb7:	e8 fc ff ff ff       	call   10004bb8 <rgtree(Reghive_Tag*, int, int)+0x1c>	10004bb8: R_386_PC32	Dbg::kprintf(char const*, ...)
10004bbc:	83 c4 10             	add    esp,0x10
10004bbf:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
10004bc3:	0f 8e a9 00 00 00    	jle    10004c72 <rgtree(Reghive_Tag*, int, int)+0xd6>
10004bc9:	83 ec 04             	sub    esp,0x4
10004bcc:	6a 32                	push   0x32
10004bce:	6a 00                	push   0x0
10004bd0:	8d 45 be             	lea    eax,[ebp-0x42]
10004bd3:	50                   	push   eax
10004bd4:	e8 fc ff ff ff       	call   10004bd5 <rgtree(Reghive_Tag*, int, int)+0x39>	10004bd5: R_386_PC32	memset
10004bd9:	83 c4 10             	add    esp,0x10
10004bdc:	83 ec 04             	sub    esp,0x4
10004bdf:	8d 45 be             	lea    eax,[ebp-0x42]
10004be2:	50                   	push   eax
10004be3:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10004be6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10004be9:	e8 fc ff ff ff       	call   10004bea <rgtree(Reghive_Tag*, int, int)+0x4e>	10004bea: R_386_PC32	CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)
10004bee:	83 c4 10             	add    esp,0x10
10004bf1:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10004bf4:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
10004bfb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10004bfe:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
10004c01:	7d 15                	jge    10004c18 <rgtree(Reghive_Tag*, int, int)+0x7c>
10004c03:	83 ec 0c             	sub    esp,0xc
10004c06:	68 2d 8a 00 10       	push   0x10008a2d	10004c07: R_386_32	.text
10004c0b:	e8 fc ff ff ff       	call   10004c0c <rgtree(Reghive_Tag*, int, int)+0x70>	10004c0c: R_386_PC32	Dbg::kprintf(char const*, ...)
10004c10:	83 c4 10             	add    esp,0x10
10004c13:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10004c16:	eb e3                	jmp    10004bfb <rgtree(Reghive_Tag*, int, int)+0x5f>
10004c18:	83 ec 08             	sub    esp,0x8
10004c1b:	8d 45 be             	lea    eax,[ebp-0x42]
10004c1e:	50                   	push   eax
10004c1f:	68 03 8f 00 10       	push   0x10008f03	10004c20: R_386_32	.text
10004c24:	e8 fc ff ff ff       	call   10004c25 <rgtree(Reghive_Tag*, int, int)+0x89>	10004c25: R_386_PC32	Dbg::kprintf(char const*, ...)
10004c29:	83 c4 10             	add    esp,0x10
10004c2c:	83 7d f0 4e          	cmp    DWORD PTR [ebp-0x10],0x4e
10004c30:	75 27                	jne    10004c59 <rgtree(Reghive_Tag*, int, int)+0xbd>
10004c32:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
10004c35:	8d 58 04             	lea    ebx,[eax+0x4]
10004c38:	83 ec 08             	sub    esp,0x8
10004c3b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10004c3e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10004c41:	e8 fc ff ff ff       	call   10004c42 <rgtree(Reghive_Tag*, int, int)+0xa6>	10004c42: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10004c46:	83 c4 10             	add    esp,0x10
10004c49:	83 ec 04             	sub    esp,0x4
10004c4c:	53                   	push   ebx
10004c4d:	50                   	push   eax
10004c4e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10004c51:	e8 fc ff ff ff       	call   10004c52 <rgtree(Reghive_Tag*, int, int)+0xb6>	10004c52: R_386_PC32	rgtree(Reghive_Tag*, int, int)
10004c56:	83 c4 10             	add    esp,0x10
10004c59:	83 ec 08             	sub    esp,0x8
10004c5c:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10004c5f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10004c62:	e8 fc ff ff ff       	call   10004c63 <rgtree(Reghive_Tag*, int, int)+0xc7>	10004c63: R_386_PC32	CmGetNext(Reghive_Tag*, int)
10004c67:	83 c4 10             	add    esp,0x10
10004c6a:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
10004c6d:	e9 4d ff ff ff       	jmp    10004bbf <rgtree(Reghive_Tag*, int, int)+0x23>
10004c72:	90                   	nop
10004c73:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
10004c76:	c9                   	leave  
10004c77:	c3                   	ret    

10004c78 <begin(void*)>:
10004c78:	55                   	push   ebp
10004c79:	89 e5                	mov    ebp,esp
10004c7b:	57                   	push   edi
10004c7c:	56                   	push   esi
10004c7d:	53                   	push   ebx
10004c7e:	81 ec 5c 02 00 00    	sub    esp,0x25c
10004c84:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
10004c88:	83 ec 0c             	sub    esp,0xc
10004c8b:	68 14 01 00 00       	push   0x114
10004c90:	e8 fc ff ff ff       	call   10004c91 <begin(void*)+0x19>	10004c91: R_386_PC32	operator new(unsigned long)
10004c95:	83 c4 10             	add    esp,0x10
10004c98:	89 c3                	mov    ebx,eax
10004c9a:	a1 00 00 00 00       	mov    eax,ds:0x0	10004c9b: R_386_32	kernelProcess
10004c9f:	83 ec 04             	sub    esp,0x4
10004ca2:	50                   	push   eax
10004ca3:	68 08 8f 00 10       	push   0x10008f08	10004ca4: R_386_32	.text
10004ca8:	53                   	push   ebx
10004ca9:	e8 fc ff ff ff       	call   10004caa <begin(void*)+0x32>	10004caa: R_386_PC32	File::File(char const*, Process*)
10004cae:	83 c4 10             	add    esp,0x10
10004cb1:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
10004cb4:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
10004cb8:	75 10                	jne    10004cca <begin(void*)+0x52>
10004cba:	83 ec 0c             	sub    esp,0xc
10004cbd:	68 26 8f 00 10       	push   0x10008f26	10004cbe: R_386_32	.text
10004cc2:	e8 fc ff ff ff       	call   10004cc3 <begin(void*)+0x4b>	10004cc3: R_386_PC32	KePanic(char const*)
10004cc7:	83 c4 10             	add    esp,0x10
10004cca:	83 ec 08             	sub    esp,0x8
10004ccd:	6a 01                	push   0x1
10004ccf:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10004cd2:	e8 fc ff ff ff       	call   10004cd3 <begin(void*)+0x5b>	10004cd3: R_386_PC32	File::open(FileOpenMode)
10004cd7:	83 c4 10             	add    esp,0x10
10004cda:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
10004cdd:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
10004ce1:	75 10                	jne    10004cf3 <begin(void*)+0x7b>
10004ce3:	83 ec 0c             	sub    esp,0xc
10004ce6:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10004ce9:	e8 fc ff ff ff       	call   10004cea <begin(void*)+0x72>	10004cea: R_386_PC32	File::close()
10004cee:	83 c4 10             	add    esp,0x10
10004cf1:	eb 04                	jmp    10004cf7 <begin(void*)+0x7f>
10004cf3:	c6 45 e7 01          	mov    BYTE PTR [ebp-0x19],0x1
10004cf7:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
10004cfb:	74 15                	je     10004d12 <begin(void*)+0x9a>
10004cfd:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10004d00:	8b 00                	mov    eax,DWORD PTR [eax]
10004d02:	83 c0 08             	add    eax,0x8
10004d05:	8b 00                	mov    eax,DWORD PTR [eax]
10004d07:	83 ec 0c             	sub    esp,0xc
10004d0a:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10004d0d:	ff d0                	call   eax
10004d0f:	83 c4 10             	add    esp,0x10
10004d12:	c6 05 00 00 00 00 01 	mov    BYTE PTR ds:0x0,0x1	10004d14: R_386_32	KeIsPreemptionOn
10004d19:	80 7d e7 00          	cmp    BYTE PTR [ebp-0x19],0x0
10004d1d:	74 0f                	je     10004d2e <begin(void*)+0xb6>
10004d1f:	83 ec 0c             	sub    esp,0xc
10004d22:	6a 00                	push   0x0
10004d24:	e8 fc ff ff ff       	call   10004d25 <begin(void*)+0xad>	10004d25: R_386_PC32	firstRun(bool)
10004d29:	83 c4 10             	add    esp,0x10
10004d2c:	eb 05                	jmp    10004d33 <begin(void*)+0xbb>
10004d2e:	e8 fc ff ff ff       	call   10004d2f <begin(void*)+0xb7>	10004d2f: R_386_PC32	loadExtensions()
10004d33:	8d 45 b0             	lea    eax,[ebp-0x50]
10004d36:	bb 64 91 00 10       	mov    ebx,0x10009164	10004d37: R_386_32	.text
10004d3b:	ba 04 00 00 00       	mov    edx,0x4
10004d40:	89 c7                	mov    edi,eax
10004d42:	89 de                	mov    esi,ebx
10004d44:	89 d1                	mov    ecx,edx
10004d46:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10004d48:	80 7d e7 00          	cmp    BYTE PTR [ebp-0x19],0x0
10004d4c:	0f 84 e2 04 00 00    	je     10005234 <begin(void*)+0x5bc>
10004d52:	83 ec 0c             	sub    esp,0xc
10004d55:	68 24 07 00 00       	push   0x724
10004d5a:	e8 fc ff ff ff       	call   10004d5b <begin(void*)+0xe3>	10004d5b: R_386_PC32	operator new(unsigned long)
10004d5f:	83 c4 10             	add    esp,0x10
10004d62:	89 c3                	mov    ebx,eax
10004d64:	8d 45 b0             	lea    eax,[ebp-0x50]
10004d67:	50                   	push   eax
10004d68:	6a 00                	push   0x0
10004d6a:	68 36 8f 00 10       	push   0x10008f36	10004d6b: R_386_32	.text
10004d6f:	53                   	push   ebx
10004d70:	e8 fc ff ff ff       	call   10004d71 <begin(void*)+0xf9>	10004d71: R_386_PC32	Process::Process(char const*, Process*, char**)
10004d75:	83 c4 10             	add    esp,0x10
10004d78:	89 5d d0             	mov    DWORD PTR [ebp-0x30],ebx
10004d7b:	83 ec 0c             	sub    esp,0xc
10004d7e:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10004d81:	e8 fc ff ff ff       	call   10004d82 <begin(void*)+0x10a>	10004d82: R_386_PC32	Process::createUserThread()
10004d86:	83 c4 10             	add    esp,0x10
10004d89:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10004d8b: R_386_32	VgaText::hiddenOut
10004d90:	a1 00 00 00 00       	mov    eax,ds:0x0	10004d91: R_386_32	term
10004d95:	83 ec 0c             	sub    esp,0xc
10004d98:	50                   	push   eax
10004d99:	e8 fc ff ff ff       	call   10004d9a <begin(void*)+0x122>	10004d9a: R_386_PC32	setActiveTerminal(VgaText*)
10004d9e:	83 c4 10             	add    esp,0x10
10004da1:	e8 fc ff ff ff       	call   10004da2 <begin(void*)+0x12a>	10004da2: R_386_PC32	drawBootScreen()
10004da6:	83 ec 0c             	sub    esp,0xc
10004da9:	68 dd 8d 00 10       	push   0x10008ddd	10004daa: R_386_32	.text
10004dae:	6a 0d                	push   0xd
10004db0:	6a 32                	push   0x32
10004db2:	6a 05                	push   0x5
10004db4:	6a 16                	push   0x16
10004db6:	e8 fc ff ff ff       	call   10004db7 <begin(void*)+0x13f>	10004db7: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
10004dbb:	83 c4 20             	add    esp,0x20
10004dbe:	83 ec 0c             	sub    esp,0xc
10004dc1:	6a 03                	push   0x3
10004dc3:	e8 fc ff ff ff       	call   10004dc4 <begin(void*)+0x14c>	10004dc4: R_386_PC32	bootInstallTasks(int)
10004dc8:	83 c4 10             	add    esp,0x10
10004dcb:	c6 05 00 00 00 00 01 	mov    BYTE PTR ds:0x0,0x1	10004dcd: R_386_32	VgaText::hiddenOut
10004dd2:	83 ec 0c             	sub    esp,0xc
10004dd5:	68 14 01 00 00       	push   0x114
10004dda:	e8 fc ff ff ff       	call   10004ddb <begin(void*)+0x163>	10004ddb: R_386_PC32	operator new(unsigned long)
10004ddf:	83 c4 10             	add    esp,0x10
10004de2:	89 c3                	mov    ebx,eax
10004de4:	a1 00 00 00 00       	mov    eax,ds:0x0	10004de5: R_386_32	kernelProcess
10004de9:	83 ec 04             	sub    esp,0x4
10004dec:	50                   	push   eax
10004ded:	68 53 8f 00 10       	push   0x10008f53	10004dee: R_386_32	.text
10004df2:	53                   	push   ebx
10004df3:	e8 fc ff ff ff       	call   10004df4 <begin(void*)+0x17c>	10004df4: R_386_PC32	File::File(char const*, Process*)
10004df8:	83 c4 10             	add    esp,0x10
10004dfb:	89 5d cc             	mov    DWORD PTR [ebp-0x34],ebx
10004dfe:	83 ec 08             	sub    esp,0x8
10004e01:	6a 01                	push   0x1
10004e03:	ff 75 cc             	push   DWORD PTR [ebp-0x34]
10004e06:	e8 fc ff ff ff       	call   10004e07 <begin(void*)+0x18f>	10004e07: R_386_PC32	File::open(FileOpenMode)
10004e0b:	83 c4 10             	add    esp,0x10
10004e0e:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
10004e11:	83 7d c8 00          	cmp    DWORD PTR [ebp-0x38],0x0
10004e15:	75 39                	jne    10004e50 <begin(void*)+0x1d8>
10004e17:	83 ec 0c             	sub    esp,0xc
10004e1a:	ff 75 cc             	push   DWORD PTR [ebp-0x34]
10004e1d:	e8 fc ff ff ff       	call   10004e1e <begin(void*)+0x1a6>	10004e1e: R_386_PC32	File::close()
10004e22:	83 c4 10             	add    esp,0x10
10004e25:	83 ec 0c             	sub    esp,0xc
10004e28:	ff 75 cc             	push   DWORD PTR [ebp-0x34]
10004e2b:	e8 fc ff ff ff       	call   10004e2c <begin(void*)+0x1b4>	10004e2c: R_386_PC32	File::unlink()
10004e30:	83 c4 10             	add    esp,0x10
10004e33:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
10004e37:	74 44                	je     10004e7d <begin(void*)+0x205>
10004e39:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
10004e3c:	8b 00                	mov    eax,DWORD PTR [eax]
10004e3e:	83 c0 08             	add    eax,0x8
10004e41:	8b 00                	mov    eax,DWORD PTR [eax]
10004e43:	83 ec 0c             	sub    esp,0xc
10004e46:	ff 75 cc             	push   DWORD PTR [ebp-0x34]
10004e49:	ff d0                	call   eax
10004e4b:	83 c4 10             	add    esp,0x10
10004e4e:	eb 2d                	jmp    10004e7d <begin(void*)+0x205>
10004e50:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
10004e54:	74 15                	je     10004e6b <begin(void*)+0x1f3>
10004e56:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
10004e59:	8b 00                	mov    eax,DWORD PTR [eax]
10004e5b:	83 c0 08             	add    eax,0x8
10004e5e:	8b 00                	mov    eax,DWORD PTR [eax]
10004e60:	83 ec 0c             	sub    esp,0xc
10004e63:	ff 75 cc             	push   DWORD PTR [ebp-0x34]
10004e66:	ff d0                	call   eax
10004e68:	83 c4 10             	add    esp,0x10
10004e6b:	83 ec 0c             	sub    esp,0xc
10004e6e:	6a 01                	push   0x1
10004e70:	e8 fc ff ff ff       	call   10004e71 <begin(void*)+0x1f9>	10004e71: R_386_PC32	sleep(unsigned int)
10004e75:	83 c4 10             	add    esp,0x10
10004e78:	e9 55 ff ff ff       	jmp    10004dd2 <begin(void*)+0x15a>
10004e7d:	90                   	nop
10004e7e:	83 ec 0c             	sub    esp,0xc
10004e81:	6a 02                	push   0x2
10004e83:	e8 fc ff ff ff       	call   10004e84 <begin(void*)+0x20c>	10004e84: R_386_PC32	sleep(unsigned int)
10004e88:	83 c4 10             	add    esp,0x10
10004e8b:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10004e8d: R_386_32	VgaText::hiddenOut
10004e92:	a1 00 00 00 00       	mov    eax,ds:0x0	10004e93: R_386_32	term
10004e97:	83 ec 0c             	sub    esp,0xc
10004e9a:	50                   	push   eax
10004e9b:	e8 fc ff ff ff       	call   10004e9c <begin(void*)+0x224>	10004e9c: R_386_PC32	setActiveTerminal(VgaText*)
10004ea0:	83 c4 10             	add    esp,0x10
10004ea3:	e8 fc ff ff ff       	call   10004ea4 <begin(void*)+0x22c>	10004ea4: R_386_PC32	drawBootScreen()
10004ea8:	83 ec 0c             	sub    esp,0xc
10004eab:	68 dd 8d 00 10       	push   0x10008ddd	10004eac: R_386_32	.text
10004eb0:	6a 0d                	push   0xd
10004eb2:	6a 32                	push   0x32
10004eb4:	6a 05                	push   0x5
10004eb6:	6a 16                	push   0x16
10004eb8:	e8 fc ff ff ff       	call   10004eb9 <begin(void*)+0x241>	10004eb9: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
10004ebd:	83 c4 20             	add    esp,0x20
10004ec0:	83 ec 0c             	sub    esp,0xc
10004ec3:	6a 04                	push   0x4
10004ec5:	e8 fc ff ff ff       	call   10004ec6 <begin(void*)+0x24e>	10004ec6: R_386_PC32	bootInstallTasks(int)
10004eca:	83 c4 10             	add    esp,0x10
10004ecd:	83 ec 08             	sub    esp,0x8
10004ed0:	68 dd dd 00 00       	push   0xdddd
10004ed5:	68 5d 8f 00 10       	push   0x10008f5d	10004ed6: R_386_32	.text
10004eda:	e8 fc ff ff ff       	call   10004edb <begin(void*)+0x263>	10004edb: R_386_PC32	backupTree(char*, unsigned short)
10004edf:	83 c4 10             	add    esp,0x10
10004ee2:	83 ec 08             	sub    esp,0x8
10004ee5:	68 ee ee 00 00       	push   0xeeee
10004eea:	68 70 8f 00 10       	push   0x10008f70	10004eeb: R_386_32	.text
10004eef:	e8 fc ff ff ff       	call   10004ef0 <begin(void*)+0x278>	10004ef0: R_386_PC32	backupTree(char*, unsigned short)
10004ef4:	83 c4 10             	add    esp,0x10
10004ef7:	83 ec 08             	sub    esp,0x8
10004efa:	68 ff ff 00 00       	push   0xffff
10004eff:	68 82 8f 00 10       	push   0x10008f82	10004f00: R_386_32	.text
10004f04:	e8 fc ff ff ff       	call   10004f05 <begin(void*)+0x28d>	10004f05: R_386_PC32	backupTree(char*, unsigned short)
10004f09:	83 c4 10             	add    esp,0x10
10004f0c:	83 ec 0c             	sub    esp,0xc
10004f0f:	6a 05                	push   0x5
10004f11:	e8 fc ff ff ff       	call   10004f12 <begin(void*)+0x29a>	10004f12: R_386_PC32	bootInstallTasks(int)
10004f16:	83 c4 10             	add    esp,0x10
10004f19:	83 ec 0c             	sub    esp,0xc
10004f1c:	68 98 8f 00 10       	push   0x10008f98	10004f1d: R_386_32	.text
10004f21:	e8 fc ff ff ff       	call   10004f22 <begin(void*)+0x2aa>	10004f22: R_386_PC32	CmOpen(char const*)
10004f26:	83 c4 10             	add    esp,0x10
10004f29:	89 45 c4             	mov    DWORD PTR [ebp-0x3c],eax
10004f2c:	83 ec 04             	sub    esp,0x4
10004f2f:	68 bd 8f 00 10       	push   0x10008fbd	10004f30: R_386_32	.text
10004f34:	6a 00                	push   0x0
10004f36:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
10004f39:	e8 fc ff ff ff       	call   10004f3a <begin(void*)+0x2c2>	10004f3a: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
10004f3e:	83 c4 10             	add    esp,0x10
10004f41:	83 ec 08             	sub    esp,0x8
10004f44:	68 bd 8f 00 10       	push   0x10008fbd	10004f45: R_386_32	.text
10004f49:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
10004f4c:	e8 fc ff ff ff       	call   10004f4d <begin(void*)+0x2d5>	10004f4d: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10004f51:	83 c4 10             	add    esp,0x10
10004f54:	83 ec 08             	sub    esp,0x8
10004f57:	50                   	push   eax
10004f58:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
10004f5b:	e8 fc ff ff ff       	call   10004f5c <begin(void*)+0x2e4>	10004f5c: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10004f60:	83 c4 10             	add    esp,0x10
10004f63:	83 ec 04             	sub    esp,0x4
10004f66:	68 c4 8f 00 10       	push   0x10008fc4	10004f67: R_386_32	.text
10004f6b:	50                   	push   eax
10004f6c:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
10004f6f:	e8 fc ff ff ff       	call   10004f70 <begin(void*)+0x2f8>	10004f70: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
10004f74:	83 c4 10             	add    esp,0x10
10004f77:	83 ec 08             	sub    esp,0x8
10004f7a:	68 bd 8f 00 10       	push   0x10008fbd	10004f7b: R_386_32	.text
10004f7f:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
10004f82:	e8 fc ff ff ff       	call   10004f83 <begin(void*)+0x30b>	10004f83: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10004f87:	83 c4 10             	add    esp,0x10
10004f8a:	83 ec 08             	sub    esp,0x8
10004f8d:	50                   	push   eax
10004f8e:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
10004f91:	e8 fc ff ff ff       	call   10004f92 <begin(void*)+0x31a>	10004f92: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10004f96:	83 c4 10             	add    esp,0x10
10004f99:	83 ec 04             	sub    esp,0x4
10004f9c:	68 ca 8f 00 10       	push   0x10008fca	10004f9d: R_386_32	.text
10004fa1:	50                   	push   eax
10004fa2:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
10004fa5:	e8 fc ff ff ff       	call   10004fa6 <begin(void*)+0x32e>	10004fa6: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
10004faa:	83 c4 10             	add    esp,0x10
10004fad:	83 ec 08             	sub    esp,0x8
10004fb0:	68 cf 8f 00 10       	push   0x10008fcf	10004fb1: R_386_32	.text
10004fb5:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
10004fb8:	e8 fc ff ff ff       	call   10004fb9 <begin(void*)+0x341>	10004fb9: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10004fbd:	83 c4 10             	add    esp,0x10
10004fc0:	83 ec 08             	sub    esp,0x8
10004fc3:	50                   	push   eax
10004fc4:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
10004fc7:	e8 fc ff ff ff       	call   10004fc8 <begin(void*)+0x350>	10004fc8: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10004fcc:	83 c4 10             	add    esp,0x10
10004fcf:	83 ec 04             	sub    esp,0x4
10004fd2:	68 dc 8f 00 10       	push   0x10008fdc	10004fd3: R_386_32	.text
10004fd7:	50                   	push   eax
10004fd8:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
10004fdb:	e8 fc ff ff ff       	call   10004fdc <begin(void*)+0x364>	10004fdc: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
10004fe0:	83 c4 10             	add    esp,0x10
10004fe3:	83 ec 08             	sub    esp,0x8
10004fe6:	68 cf 8f 00 10       	push   0x10008fcf	10004fe7: R_386_32	.text
10004feb:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
10004fee:	e8 fc ff ff ff       	call   10004fef <begin(void*)+0x377>	10004fef: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10004ff3:	83 c4 10             	add    esp,0x10
10004ff6:	83 ec 08             	sub    esp,0x8
10004ff9:	50                   	push   eax
10004ffa:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
10004ffd:	e8 fc ff ff ff       	call   10004ffe <begin(void*)+0x386>	10004ffe: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005002:	83 c4 10             	add    esp,0x10
10005005:	83 ec 04             	sub    esp,0x4
10005008:	68 e1 8f 00 10       	push   0x10008fe1	10005009: R_386_32	.text
1000500d:	50                   	push   eax
1000500e:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
10005011:	e8 fc ff ff ff       	call   10005012 <begin(void*)+0x39a>	10005012: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
10005016:	83 c4 10             	add    esp,0x10
10005019:	83 ec 08             	sub    esp,0x8
1000501c:	68 cf 8f 00 10       	push   0x10008fcf	1000501d: R_386_32	.text
10005021:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
10005024:	e8 fc ff ff ff       	call   10005025 <begin(void*)+0x3ad>	10005025: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005029:	83 c4 10             	add    esp,0x10
1000502c:	83 ec 08             	sub    esp,0x8
1000502f:	50                   	push   eax
10005030:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
10005033:	e8 fc ff ff ff       	call   10005034 <begin(void*)+0x3bc>	10005034: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005038:	83 c4 10             	add    esp,0x10
1000503b:	83 ec 04             	sub    esp,0x4
1000503e:	68 e9 8f 00 10       	push   0x10008fe9	1000503f: R_386_32	.text
10005043:	50                   	push   eax
10005044:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
10005047:	e8 fc ff ff ff       	call   10005048 <begin(void*)+0x3d0>	10005048: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
1000504c:	83 c4 10             	add    esp,0x10
1000504f:	a1 00 00 00 00       	mov    eax,ds:0x0	10005050: R_386_32	modesel
10005054:	89 c3                	mov    ebx,eax
10005056:	89 c6                	mov    esi,eax
10005058:	c1 fe 1f             	sar    esi,0x1f
1000505b:	83 ec 08             	sub    esp,0x8
1000505e:	68 f4 8f 00 10       	push   0x10008ff4	1000505f: R_386_32	.text
10005063:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
10005066:	e8 fc ff ff ff       	call   10005067 <begin(void*)+0x3ef>	10005067: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
1000506b:	83 c4 10             	add    esp,0x10
1000506e:	83 ec 08             	sub    esp,0x8
10005071:	50                   	push   eax
10005072:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
10005075:	e8 fc ff ff ff       	call   10005076 <begin(void*)+0x3fe>	10005076: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
1000507a:	83 c4 10             	add    esp,0x10
1000507d:	83 ec 08             	sub    esp,0x8
10005080:	6a 6a                	push   0x6a
10005082:	56                   	push   esi
10005083:	53                   	push   ebx
10005084:	68 00 90 00 10       	push   0x10009000	10005085: R_386_32	.text
10005089:	50                   	push   eax
1000508a:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
1000508d:	e8 fc ff ff ff       	call   1000508e <begin(void*)+0x416>	1000508e: R_386_PC32	CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)
10005092:	83 c4 20             	add    esp,0x20
10005095:	83 ec 08             	sub    esp,0x8
10005098:	68 08 90 00 10       	push   0x10009008	10005099: R_386_32	.text
1000509d:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
100050a0:	e8 fc ff ff ff       	call   100050a1 <begin(void*)+0x429>	100050a1: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100050a5:	83 c4 10             	add    esp,0x10
100050a8:	83 ec 04             	sub    esp,0x4
100050ab:	68 00 00 00 00       	push   0x0	100050ac: R_386_32	currName
100050b0:	50                   	push   eax
100050b1:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
100050b4:	e8 fc ff ff ff       	call   100050b5 <begin(void*)+0x43d>	100050b5: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
100050b9:	83 c4 10             	add    esp,0x10
100050bc:	83 ec 08             	sub    esp,0x8
100050bf:	68 1a 90 00 10       	push   0x1000901a	100050c0: R_386_32	.text
100050c4:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
100050c7:	e8 fc ff ff ff       	call   100050c8 <begin(void*)+0x450>	100050c8: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100050cc:	83 c4 10             	add    esp,0x10
100050cf:	83 ec 04             	sub    esp,0x4
100050d2:	68 00 00 00 00       	push   0x0	100050d3: R_386_32	currComp
100050d7:	50                   	push   eax
100050d8:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
100050db:	e8 fc ff ff ff       	call   100050dc <begin(void*)+0x464>	100050dc: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
100050e0:	83 c4 10             	add    esp,0x10
100050e3:	83 ec 08             	sub    esp,0x8
100050e6:	68 2f 90 00 10       	push   0x1000902f	100050e7: R_386_32	.text
100050eb:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
100050ee:	e8 fc ff ff ff       	call   100050ef <begin(void*)+0x477>	100050ef: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100050f3:	83 c4 10             	add    esp,0x10
100050f6:	83 ec 04             	sub    esp,0x4
100050f9:	68 00 00 00 00       	push   0x0	100050fa: R_386_32	pkeybuf
100050fe:	50                   	push   eax
100050ff:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
10005102:	e8 fc ff ff ff       	call   10005103 <begin(void*)+0x48b>	10005103: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10005107:	83 c4 10             	add    esp,0x10
1000510a:	83 ec 0c             	sub    esp,0xc
1000510d:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
10005110:	e8 fc ff ff ff       	call   10005111 <begin(void*)+0x499>	10005111: R_386_PC32	CmClose(Reghive_Tag*)
10005115:	83 c4 10             	add    esp,0x10
10005118:	a1 00 00 00 00       	mov    eax,ds:0x0	10005119: R_386_32	term
1000511d:	83 ec 0c             	sub    esp,0xc
10005120:	50                   	push   eax
10005121:	e8 fc ff ff ff       	call   10005122 <begin(void*)+0x4aa>	10005122: R_386_PC32	setActiveTerminal(VgaText*)
10005126:	83 c4 10             	add    esp,0x10
10005129:	e8 fc ff ff ff       	call   1000512a <begin(void*)+0x4b2>	1000512a: R_386_PC32	drawBootScreen()
1000512e:	83 ec 0c             	sub    esp,0xc
10005131:	68 dd 8d 00 10       	push   0x10008ddd	10005132: R_386_32	.text
10005136:	6a 0d                	push   0xd
10005138:	6a 32                	push   0x32
1000513a:	6a 05                	push   0x5
1000513c:	6a 16                	push   0x16
1000513e:	e8 fc ff ff ff       	call   1000513f <begin(void*)+0x4c7>	1000513f: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
10005143:	83 c4 20             	add    esp,0x20
10005146:	a1 00 00 00 00       	mov    eax,ds:0x0	10005147: R_386_32	term
1000514b:	83 ec 04             	sub    esp,0x4
1000514e:	6a 08                	push   0x8
10005150:	6a 18                	push   0x18
10005152:	50                   	push   eax
10005153:	e8 fc ff ff ff       	call   10005154 <begin(void*)+0x4dc>	10005154: R_386_PC32	VgaText::setCursor(int, int)
10005158:	83 c4 10             	add    esp,0x10
1000515b:	a1 00 00 00 00       	mov    eax,ds:0x0	1000515c: R_386_32	term
10005160:	83 ec 08             	sub    esp,0x8
10005163:	68 48 90 00 10       	push   0x10009048	10005164: R_386_32	.text
10005168:	50                   	push   eax
10005169:	e8 fc ff ff ff       	call   1000516a <begin(void*)+0x4f2>	1000516a: R_386_PC32	VgaText::puts(char const*)
1000516e:	83 c4 10             	add    esp,0x10
10005171:	a1 00 00 00 00       	mov    eax,ds:0x0	10005172: R_386_32	term
10005176:	83 ec 04             	sub    esp,0x4
10005179:	6a 0a                	push   0xa
1000517b:	6a 18                	push   0x18
1000517d:	50                   	push   eax
1000517e:	e8 fc ff ff ff       	call   1000517f <begin(void*)+0x507>	1000517f: R_386_PC32	VgaText::setCursor(int, int)
10005183:	83 c4 10             	add    esp,0x10
10005186:	a1 00 00 00 00       	mov    eax,ds:0x0	10005187: R_386_32	term
1000518b:	83 ec 08             	sub    esp,0x8
1000518e:	68 70 90 00 10       	push   0x10009070	1000518f: R_386_32	.text
10005193:	50                   	push   eax
10005194:	e8 fc ff ff ff       	call   10005195 <begin(void*)+0x51d>	10005195: R_386_PC32	VgaText::puts(char const*)
10005199:	83 c4 10             	add    esp,0x10
1000519c:	a1 00 00 00 00       	mov    eax,ds:0x0	1000519d: R_386_32	term
100051a1:	83 ec 04             	sub    esp,0x4
100051a4:	6a 0b                	push   0xb
100051a6:	6a 18                	push   0x18
100051a8:	50                   	push   eax
100051a9:	e8 fc ff ff ff       	call   100051aa <begin(void*)+0x532>	100051aa: R_386_PC32	VgaText::setCursor(int, int)
100051ae:	83 c4 10             	add    esp,0x10
100051b1:	a1 00 00 00 00       	mov    eax,ds:0x0	100051b2: R_386_32	term
100051b6:	83 ec 08             	sub    esp,0x8
100051b9:	68 9c 90 00 10       	push   0x1000909c	100051ba: R_386_32	.text
100051be:	50                   	push   eax
100051bf:	e8 fc ff ff ff       	call   100051c0 <begin(void*)+0x548>	100051c0: R_386_PC32	VgaText::puts(char const*)
100051c4:	83 c4 10             	add    esp,0x10
100051c7:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100051c9: R_386_32	installKey
100051ce:	a0 00 00 00 00       	mov    al,ds:0x0	100051cf: R_386_32	installKey
100051d3:	84 c0                	test   al,al
100051d5:	0f 94 c0             	sete   al
100051d8:	84 c0                	test   al,al
100051da:	74 02                	je     100051de <begin(void*)+0x566>
100051dc:	eb f0                	jmp    100051ce <begin(void*)+0x556>
100051de:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100051e0: R_386_32	installKey
100051e5:	a1 00 00 00 00       	mov    eax,ds:0x0	100051e6: R_386_32	term
100051ea:	83 ec 04             	sub    esp,0x4
100051ed:	6a 0c                	push   0xc
100051ef:	6a 18                	push   0x18
100051f1:	50                   	push   eax
100051f2:	e8 fc ff ff ff       	call   100051f3 <begin(void*)+0x57b>	100051f3: R_386_PC32	VgaText::setCursor(int, int)
100051f7:	83 c4 10             	add    esp,0x10
100051fa:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	100051fc: R_386_32	Krnl::computer
10005200:	a1 00 00 00 00       	mov    eax,ds:0x0	10005201: R_386_32	Krnl::computer
10005205:	8b 00                	mov    eax,DWORD PTR [eax]
10005207:	83 c0 0c             	add    eax,0xc
1000520a:	8b 00                	mov    eax,DWORD PTR [eax]
1000520c:	6a 00                	push   0x0
1000520e:	6a 00                	push   0x0
10005210:	6a 01                	push   0x1
10005212:	52                   	push   edx
10005213:	ff d0                	call   eax
10005215:	83 c4 10             	add    esp,0x10
10005218:	a1 00 00 00 00       	mov    eax,ds:0x0	10005219: R_386_32	term
1000521d:	6a 0f                	push   0xf
1000521f:	6a 0c                	push   0xc
10005221:	68 b0 90 00 10       	push   0x100090b0	10005222: R_386_32	.text
10005226:	50                   	push   eax
10005227:	e8 fc ff ff ff       	call   10005228 <begin(void*)+0x5b0>	10005228: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
1000522c:	83 c4 10             	add    esp,0x10
1000522f:	e9 ad 03 00 00       	jmp    100055e1 <begin(void*)+0x969>
10005234:	83 ec 0c             	sub    esp,0xc
10005237:	68 98 8f 00 10       	push   0x10008f98	10005238: R_386_32	.text
1000523c:	e8 fc ff ff ff       	call   1000523d <begin(void*)+0x5c5>	1000523d: R_386_PC32	CmOpen(char const*)
10005241:	83 c4 10             	add    esp,0x10
10005244:	89 45 c0             	mov    DWORD PTR [ebp-0x40],eax
10005247:	83 ec 08             	sub    esp,0x8
1000524a:	68 2f 90 00 10       	push   0x1000902f	1000524b: R_386_32	.text
1000524f:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
10005252:	e8 fc ff ff ff       	call   10005253 <begin(void*)+0x5db>	10005253: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005257:	83 c4 10             	add    esp,0x10
1000525a:	83 ec 04             	sub    esp,0x4
1000525d:	8d 95 b0 fd ff ff    	lea    edx,[ebp-0x250]
10005263:	52                   	push   edx
10005264:	50                   	push   eax
10005265:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
10005268:	e8 fc ff ff ff       	call   10005269 <begin(void*)+0x5f1>	10005269: R_386_PC32	CmGetString(Reghive_Tag*, int, char*)
1000526d:	83 c4 10             	add    esp,0x10
10005270:	83 ec 08             	sub    esp,0x8
10005273:	68 d6 90 00 10       	push   0x100090d6	10005274: R_386_32	.text
10005278:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
1000527b:	e8 fc ff ff ff       	call   1000527c <begin(void*)+0x604>	1000527c: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005280:	83 c4 10             	add    esp,0x10
10005283:	83 ec 04             	sub    esp,0x4
10005286:	8d 55 a8             	lea    edx,[ebp-0x58]
10005289:	52                   	push   edx
1000528a:	50                   	push   eax
1000528b:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
1000528e:	e8 fc ff ff ff       	call   1000528f <begin(void*)+0x617>	1000528f: R_386_PC32	CmGetInteger(Reghive_Tag*, int, unsigned long long*)
10005293:	83 c4 10             	add    esp,0x10
10005296:	83 ec 0c             	sub    esp,0xc
10005299:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
1000529c:	e8 fc ff ff ff       	call   1000529d <begin(void*)+0x625>	1000529d: R_386_PC32	CmClose(Reghive_Tag*)
100052a1:	83 c4 10             	add    esp,0x10
100052a4:	83 ec 0c             	sub    esp,0xc
100052a7:	8d 85 b0 fd ff ff    	lea    eax,[ebp-0x250]
100052ad:	50                   	push   eax
100052ae:	e8 fc ff ff ff       	call   100052af <begin(void*)+0x637>	100052af: R_386_PC32	checkExtendedKey(char*)
100052b3:	83 c4 10             	add    esp,0x10
100052b6:	85 c0                	test   eax,eax
100052b8:	0f 94 c0             	sete   al
100052bb:	84 c0                	test   al,al
100052bd:	0f 84 ed 01 00 00    	je     100054b0 <begin(void*)+0x838>
100052c3:	83 ec 0c             	sub    esp,0xc
100052c6:	6a 01                	push   0x1
100052c8:	e8 fc ff ff ff       	call   100052c9 <begin(void*)+0x651>	100052c9: R_386_PC32	firstRun(bool)
100052cd:	83 c4 10             	add    esp,0x10
100052d0:	83 ec 0c             	sub    esp,0xc
100052d3:	68 98 8f 00 10       	push   0x10008f98	100052d4: R_386_32	.text
100052d8:	e8 fc ff ff ff       	call   100052d9 <begin(void*)+0x661>	100052d9: R_386_PC32	CmOpen(char const*)
100052dd:	83 c4 10             	add    esp,0x10
100052e0:	89 45 c0             	mov    DWORD PTR [ebp-0x40],eax
100052e3:	83 ec 04             	sub    esp,0x4
100052e6:	68 bd 8f 00 10       	push   0x10008fbd	100052e7: R_386_32	.text
100052eb:	6a 00                	push   0x0
100052ed:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
100052f0:	e8 fc ff ff ff       	call   100052f1 <begin(void*)+0x679>	100052f1: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
100052f5:	83 c4 10             	add    esp,0x10
100052f8:	83 ec 08             	sub    esp,0x8
100052fb:	68 bd 8f 00 10       	push   0x10008fbd	100052fc: R_386_32	.text
10005300:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
10005303:	e8 fc ff ff ff       	call   10005304 <begin(void*)+0x68c>	10005304: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005308:	83 c4 10             	add    esp,0x10
1000530b:	83 ec 08             	sub    esp,0x8
1000530e:	50                   	push   eax
1000530f:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
10005312:	e8 fc ff ff ff       	call   10005313 <begin(void*)+0x69b>	10005313: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005317:	83 c4 10             	add    esp,0x10
1000531a:	83 ec 04             	sub    esp,0x4
1000531d:	68 c4 8f 00 10       	push   0x10008fc4	1000531e: R_386_32	.text
10005322:	50                   	push   eax
10005323:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
10005326:	e8 fc ff ff ff       	call   10005327 <begin(void*)+0x6af>	10005327: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
1000532b:	83 c4 10             	add    esp,0x10
1000532e:	83 ec 08             	sub    esp,0x8
10005331:	68 cf 8f 00 10       	push   0x10008fcf	10005332: R_386_32	.text
10005336:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
10005339:	e8 fc ff ff ff       	call   1000533a <begin(void*)+0x6c2>	1000533a: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
1000533e:	83 c4 10             	add    esp,0x10
10005341:	83 ec 08             	sub    esp,0x8
10005344:	50                   	push   eax
10005345:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
10005348:	e8 fc ff ff ff       	call   10005349 <begin(void*)+0x6d1>	10005349: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
1000534d:	83 c4 10             	add    esp,0x10
10005350:	83 ec 04             	sub    esp,0x4
10005353:	68 e9 8f 00 10       	push   0x10008fe9	10005354: R_386_32	.text
10005358:	50                   	push   eax
10005359:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
1000535c:	e8 fc ff ff ff       	call   1000535d <begin(void*)+0x6e5>	1000535d: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
10005361:	83 c4 10             	add    esp,0x10
10005364:	83 ec 08             	sub    esp,0x8
10005367:	68 2f 90 00 10       	push   0x1000902f	10005368: R_386_32	.text
1000536c:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
1000536f:	e8 fc ff ff ff       	call   10005370 <begin(void*)+0x6f8>	10005370: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005374:	83 c4 10             	add    esp,0x10
10005377:	83 ec 04             	sub    esp,0x4
1000537a:	68 00 00 00 00       	push   0x0	1000537b: R_386_32	pkeybuf
1000537f:	50                   	push   eax
10005380:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
10005383:	e8 fc ff ff ff       	call   10005384 <begin(void*)+0x70c>	10005384: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10005388:	83 c4 10             	add    esp,0x10
1000538b:	83 ec 0c             	sub    esp,0xc
1000538e:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
10005391:	e8 fc ff ff ff       	call   10005392 <begin(void*)+0x71a>	10005392: R_386_PC32	CmClose(Reghive_Tag*)
10005396:	83 c4 10             	add    esp,0x10
10005399:	a1 00 00 00 00       	mov    eax,ds:0x0	1000539a: R_386_32	term
1000539e:	83 ec 0c             	sub    esp,0xc
100053a1:	50                   	push   eax
100053a2:	e8 fc ff ff ff       	call   100053a3 <begin(void*)+0x72b>	100053a3: R_386_PC32	setActiveTerminal(VgaText*)
100053a7:	83 c4 10             	add    esp,0x10
100053aa:	e8 fc ff ff ff       	call   100053ab <begin(void*)+0x733>	100053ab: R_386_PC32	drawBootScreen()
100053af:	83 ec 0c             	sub    esp,0xc
100053b2:	68 ea 90 00 10       	push   0x100090ea	100053b3: R_386_32	.text
100053b7:	6a 0d                	push   0xd
100053b9:	6a 32                	push   0x32
100053bb:	6a 05                	push   0x5
100053bd:	6a 16                	push   0x16
100053bf:	e8 fc ff ff ff       	call   100053c0 <begin(void*)+0x748>	100053c0: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
100053c4:	83 c4 20             	add    esp,0x20
100053c7:	a1 00 00 00 00       	mov    eax,ds:0x0	100053c8: R_386_32	term
100053cc:	83 ec 04             	sub    esp,0x4
100053cf:	6a 08                	push   0x8
100053d1:	6a 18                	push   0x18
100053d3:	50                   	push   eax
100053d4:	e8 fc ff ff ff       	call   100053d5 <begin(void*)+0x75d>	100053d5: R_386_PC32	VgaText::setCursor(int, int)
100053d9:	83 c4 10             	add    esp,0x10
100053dc:	a1 00 00 00 00       	mov    eax,ds:0x0	100053dd: R_386_32	term
100053e1:	83 ec 08             	sub    esp,0x8
100053e4:	68 00 91 00 10       	push   0x10009100	100053e5: R_386_32	.text
100053e9:	50                   	push   eax
100053ea:	e8 fc ff ff ff       	call   100053eb <begin(void*)+0x773>	100053eb: R_386_PC32	VgaText::puts(char const*)
100053ef:	83 c4 10             	add    esp,0x10
100053f2:	a1 00 00 00 00       	mov    eax,ds:0x0	100053f3: R_386_32	term
100053f7:	83 ec 04             	sub    esp,0x4
100053fa:	6a 0a                	push   0xa
100053fc:	6a 18                	push   0x18
100053fe:	50                   	push   eax
100053ff:	e8 fc ff ff ff       	call   10005400 <begin(void*)+0x788>	10005400: R_386_PC32	VgaText::setCursor(int, int)
10005404:	83 c4 10             	add    esp,0x10
10005407:	a1 00 00 00 00       	mov    eax,ds:0x0	10005408: R_386_32	term
1000540c:	83 ec 08             	sub    esp,0x8
1000540f:	68 70 90 00 10       	push   0x10009070	10005410: R_386_32	.text
10005414:	50                   	push   eax
10005415:	e8 fc ff ff ff       	call   10005416 <begin(void*)+0x79e>	10005416: R_386_PC32	VgaText::puts(char const*)
1000541a:	83 c4 10             	add    esp,0x10
1000541d:	a1 00 00 00 00       	mov    eax,ds:0x0	1000541e: R_386_32	term
10005422:	83 ec 04             	sub    esp,0x4
10005425:	6a 0b                	push   0xb
10005427:	6a 18                	push   0x18
10005429:	50                   	push   eax
1000542a:	e8 fc ff ff ff       	call   1000542b <begin(void*)+0x7b3>	1000542b: R_386_PC32	VgaText::setCursor(int, int)
1000542f:	83 c4 10             	add    esp,0x10
10005432:	a1 00 00 00 00       	mov    eax,ds:0x0	10005433: R_386_32	term
10005437:	83 ec 08             	sub    esp,0x8
1000543a:	68 9c 90 00 10       	push   0x1000909c	1000543b: R_386_32	.text
1000543f:	50                   	push   eax
10005440:	e8 fc ff ff ff       	call   10005441 <begin(void*)+0x7c9>	10005441: R_386_PC32	VgaText::puts(char const*)
10005445:	83 c4 10             	add    esp,0x10
10005448:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	1000544a: R_386_32	installKey
1000544f:	a0 00 00 00 00       	mov    al,ds:0x0	10005450: R_386_32	installKey
10005454:	84 c0                	test   al,al
10005456:	0f 94 c0             	sete   al
10005459:	84 c0                	test   al,al
1000545b:	74 02                	je     1000545f <begin(void*)+0x7e7>
1000545d:	eb f0                	jmp    1000544f <begin(void*)+0x7d7>
1000545f:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10005461: R_386_32	installKey
10005466:	a1 00 00 00 00       	mov    eax,ds:0x0	10005467: R_386_32	term
1000546b:	83 ec 04             	sub    esp,0x4
1000546e:	6a 0c                	push   0xc
10005470:	6a 18                	push   0x18
10005472:	50                   	push   eax
10005473:	e8 fc ff ff ff       	call   10005474 <begin(void*)+0x7fc>	10005474: R_386_PC32	VgaText::setCursor(int, int)
10005478:	83 c4 10             	add    esp,0x10
1000547b:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	1000547d: R_386_32	Krnl::computer
10005481:	a1 00 00 00 00       	mov    eax,ds:0x0	10005482: R_386_32	Krnl::computer
10005486:	8b 00                	mov    eax,DWORD PTR [eax]
10005488:	83 c0 0c             	add    eax,0xc
1000548b:	8b 00                	mov    eax,DWORD PTR [eax]
1000548d:	6a 00                	push   0x0
1000548f:	6a 00                	push   0x0
10005491:	6a 01                	push   0x1
10005493:	52                   	push   edx
10005494:	ff d0                	call   eax
10005496:	83 c4 10             	add    esp,0x10
10005499:	a1 00 00 00 00       	mov    eax,ds:0x0	1000549a: R_386_32	term
1000549e:	6a 0f                	push   0xf
100054a0:	6a 0c                	push   0xc
100054a2:	68 b0 90 00 10       	push   0x100090b0	100054a3: R_386_32	.text
100054a7:	50                   	push   eax
100054a8:	e8 fc ff ff ff       	call   100054a9 <begin(void*)+0x831>	100054a9: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
100054ad:	83 c4 10             	add    esp,0x10
100054b0:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100054b2: R_386_32	VgaText::hiddenOut
100054b7:	83 ec 0c             	sub    esp,0xc
100054ba:	68 24 07 00 00       	push   0x724
100054bf:	e8 fc ff ff ff       	call   100054c0 <begin(void*)+0x848>	100054c0: R_386_PC32	operator new(unsigned long)
100054c4:	83 c4 10             	add    esp,0x10
100054c7:	89 c3                	mov    ebx,eax
100054c9:	6a 00                	push   0x0
100054cb:	6a 00                	push   0x0
100054cd:	68 36 8f 00 10       	push   0x10008f36	100054ce: R_386_32	.text
100054d2:	53                   	push   ebx
100054d3:	e8 fc ff ff ff       	call   100054d4 <begin(void*)+0x85c>	100054d4: R_386_PC32	Process::Process(char const*, Process*, char**)
100054d8:	83 c4 10             	add    esp,0x10
100054db:	89 5d d0             	mov    DWORD PTR [ebp-0x30],ebx
100054de:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
100054e1:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
100054e7:	83 ec 0c             	sub    esp,0xc
100054ea:	50                   	push   eax
100054eb:	e8 fc ff ff ff       	call   100054ec <begin(void*)+0x874>	100054ec: R_386_PC32	setActiveTerminal(VgaText*)
100054f0:	83 c4 10             	add    esp,0x10
100054f3:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
100054fa:	83 7d e0 18          	cmp    DWORD PTR [ebp-0x20],0x18
100054fe:	7f 2e                	jg     1000552e <begin(void*)+0x8b6>
10005500:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
10005507:	83 7d dc 4f          	cmp    DWORD PTR [ebp-0x24],0x4f
1000550b:	7f 1c                	jg     10005529 <begin(void*)+0x8b1>
1000550d:	83 ec 0c             	sub    esp,0xc
10005510:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
10005513:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
10005516:	6a 00                	push   0x0
10005518:	6a 07                	push   0x7
1000551a:	6a 20                	push   0x20
1000551c:	e8 fc ff ff ff       	call   1000551d <begin(void*)+0x8a5>	1000551d: R_386_PC32	HalConsoleWriteCharacter(char, int, int, int, int)
10005521:	83 c4 20             	add    esp,0x20
10005524:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
10005527:	eb de                	jmp    10005507 <begin(void*)+0x88f>
10005529:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
1000552c:	eb cc                	jmp    100054fa <begin(void*)+0x882>
1000552e:	83 ec 0c             	sub    esp,0xc
10005531:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10005534:	e8 fc ff ff ff       	call   10005535 <begin(void*)+0x8bd>	10005535: R_386_PC32	Process::createUserThread()
10005539:	83 c4 10             	add    esp,0x10
1000553c:	8b 45 a8             	mov    eax,DWORD PTR [ebp-0x58]
1000553f:	8b 55 ac             	mov    edx,DWORD PTR [ebp-0x54]
10005542:	89 c1                	mov    ecx,eax
10005544:	83 f1 01             	xor    ecx,0x1
10005547:	89 8d a0 fd ff ff    	mov    DWORD PTR [ebp-0x260],ecx
1000554d:	89 d0                	mov    eax,edx
1000554f:	80 f4 00             	xor    ah,0x0
10005552:	89 85 a4 fd ff ff    	mov    DWORD PTR [ebp-0x25c],eax
10005558:	8b 8d a0 fd ff ff    	mov    ecx,DWORD PTR [ebp-0x260]
1000555e:	8b 9d a4 fd ff ff    	mov    ebx,DWORD PTR [ebp-0x25c]
10005564:	89 d8                	mov    eax,ebx
10005566:	09 c8                	or     eax,ecx
10005568:	85 c0                	test   eax,eax
1000556a:	75 17                	jne    10005583 <begin(void*)+0x90b>
1000556c:	a1 00 00 00 00       	mov    eax,ds:0x0	1000556d: R_386_32	kernelProcess
10005571:	6a 01                	push   0x1
10005573:	6a 00                	push   0x0
10005575:	68 00 00 00 00       	push   0x0	10005576: R_386_32	startGUI(void*)
1000557a:	50                   	push   eax
1000557b:	e8 fc ff ff ff       	call   1000557c <begin(void*)+0x904>	1000557c: R_386_PC32	Process::createThread(void (*)(void*), void*, int)
10005580:	83 c4 10             	add    esp,0x10
10005583:	8b 45 a8             	mov    eax,DWORD PTR [ebp-0x58]
10005586:	8b 55 ac             	mov    edx,DWORD PTR [ebp-0x54]
10005589:	89 c6                	mov    esi,eax
1000558b:	83 f6 02             	xor    esi,0x2
1000558e:	89 b5 98 fd ff ff    	mov    DWORD PTR [ebp-0x268],esi
10005594:	89 d0                	mov    eax,edx
10005596:	80 f4 00             	xor    ah,0x0
10005599:	89 85 9c fd ff ff    	mov    DWORD PTR [ebp-0x264],eax
1000559f:	8b b5 98 fd ff ff    	mov    esi,DWORD PTR [ebp-0x268]
100055a5:	8b bd 9c fd ff ff    	mov    edi,DWORD PTR [ebp-0x264]
100055ab:	89 f8                	mov    eax,edi
100055ad:	09 f0                	or     eax,esi
100055af:	85 c0                	test   eax,eax
100055b1:	75 17                	jne    100055ca <begin(void*)+0x952>
100055b3:	a1 00 00 00 00       	mov    eax,ds:0x0	100055b4: R_386_32	kernelProcess
100055b8:	6a 01                	push   0x1
100055ba:	6a 00                	push   0x0
100055bc:	68 00 00 00 00       	push   0x0	100055bd: R_386_32	startGUIVESA(void*)
100055c1:	50                   	push   eax
100055c2:	e8 fc ff ff ff       	call   100055c3 <begin(void*)+0x94b>	100055c3: R_386_PC32	Process::createThread(void (*)(void*), void*, int)
100055c7:	83 c4 10             	add    esp,0x10
100055ca:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
100055cd:	8b 00                	mov    eax,DWORD PTR [eax]
100055cf:	83 ec 04             	sub    esp,0x4
100055d2:	6a 00                	push   0x0
100055d4:	8d 55 a4             	lea    edx,[ebp-0x5c]
100055d7:	52                   	push   edx
100055d8:	50                   	push   eax
100055d9:	e8 fc ff ff ff       	call   100055da <begin(void*)+0x962>	100055da: R_386_PC32	waitTask(int, int*, int)
100055de:	83 c4 10             	add    esp,0x10
100055e1:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	100055e3: R_386_32	Krnl::computer
100055e7:	a1 00 00 00 00       	mov    eax,ds:0x0	100055e8: R_386_32	Krnl::computer
100055ec:	8b 00                	mov    eax,DWORD PTR [eax]
100055ee:	83 c0 0c             	add    eax,0xc
100055f1:	8b 00                	mov    eax,DWORD PTR [eax]
100055f3:	6a 00                	push   0x0
100055f5:	6a 00                	push   0x0
100055f7:	6a 00                	push   0x0
100055f9:	52                   	push   edx
100055fa:	ff d0                	call   eax
100055fc:	83 c4 10             	add    esp,0x10
100055ff:	83 ec 0c             	sub    esp,0xc
10005602:	68 24 91 00 10       	push   0x10009124	10005603: R_386_32	.text
10005607:	e8 fc ff ff ff       	call   10005608 <begin(void*)+0x990>	10005608: R_386_PC32	KePanic(char const*)
1000560c:	83 c4 10             	add    esp,0x10
1000560f:	eb fe                	jmp    1000560f <begin(void*)+0x997>

10005611 <clean>:
10005611:	57                   	push   edi
10005612:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
10005616:	b0 00                	mov    al,0x0
10005618:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
1000561c:	f3 aa                	rep stos BYTE PTR es:[edi],al
1000561e:	5f                   	pop    edi
1000561f:	c3                   	ret    

10005620 <BF_decode>:
10005620:	55                   	push   ebp
10005621:	57                   	push   edi
10005622:	56                   	push   esi
10005623:	53                   	push   ebx
10005624:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
10005628:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
1000562c:	89 d6                	mov    esi,edx
1000562e:	03 74 24 1c          	add    esi,DWORD PTR [esp+0x1c]
10005632:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
10005635:	83 e8 20             	sub    eax,0x20
10005638:	83 f8 5f             	cmp    eax,0x5f
1000563b:	0f 87 a3 00 00 00    	ja     100056e4 <BF_decode+0xc4>
10005641:	8a 80 20 a3 00 10    	mov    al,BYTE PTR [eax+0x1000a320]	10005643: R_386_32	.data
10005647:	3c 3f                	cmp    al,0x3f
10005649:	0f 87 9f 00 00 00    	ja     100056ee <BF_decode+0xce>
1000564f:	0f b6 4b 01          	movzx  ecx,BYTE PTR [ebx+0x1]
10005653:	83 e9 20             	sub    ecx,0x20
10005656:	83 f9 5f             	cmp    ecx,0x5f
10005659:	0f 87 96 00 00 00    	ja     100056f5 <BF_decode+0xd5>
1000565f:	8a 89 20 a3 00 10    	mov    cl,BYTE PTR [ecx+0x1000a320]	10005661: R_386_32	.data
10005665:	0f b6 f9             	movzx  edi,cl
10005668:	83 ff 3f             	cmp    edi,0x3f
1000566b:	0f 87 8b 00 00 00    	ja     100056fc <BF_decode+0xdc>
10005671:	c1 e0 02             	shl    eax,0x2
10005674:	c1 ef 04             	shr    edi,0x4
10005677:	09 f8                	or     eax,edi
10005679:	88 02                	mov    BYTE PTR [edx],al
1000567b:	89 d7                	mov    edi,edx
1000567d:	8d 42 01             	lea    eax,[edx+0x1]
10005680:	39 c6                	cmp    esi,eax
10005682:	76 7f                	jbe    10005703 <BF_decode+0xe3>
10005684:	0f b6 43 02          	movzx  eax,BYTE PTR [ebx+0x2]
10005688:	83 e8 20             	sub    eax,0x20
1000568b:	83 f8 5f             	cmp    eax,0x5f
1000568e:	77 7a                	ja     1000570a <BF_decode+0xea>
10005690:	8a 80 20 a3 00 10    	mov    al,BYTE PTR [eax+0x1000a320]	10005692: R_386_32	.data
10005696:	0f b6 e8             	movzx  ebp,al
10005699:	83 fd 3f             	cmp    ebp,0x3f
1000569c:	77 73                	ja     10005711 <BF_decode+0xf1>
1000569e:	c1 e1 04             	shl    ecx,0x4
100056a1:	c1 ed 02             	shr    ebp,0x2
100056a4:	09 e9                	or     ecx,ebp
100056a6:	88 4a 01             	mov    BYTE PTR [edx+0x1],cl
100056a9:	8d 52 02             	lea    edx,[edx+0x2]
100056ac:	39 d6                	cmp    esi,edx
100056ae:	76 68                	jbe    10005718 <BF_decode+0xf8>
100056b0:	83 c3 04             	add    ebx,0x4
100056b3:	0f b6 53 ff          	movzx  edx,BYTE PTR [ebx-0x1]
100056b7:	83 ea 20             	sub    edx,0x20
100056ba:	83 fa 5f             	cmp    edx,0x5f
100056bd:	77 60                	ja     1000571f <BF_decode+0xff>
100056bf:	8a 8a 20 a3 00 10    	mov    cl,BYTE PTR [edx+0x1000a320]	100056c1: R_386_32	.data
100056c5:	80 f9 3f             	cmp    cl,0x3f
100056c8:	77 5c                	ja     10005726 <BF_decode+0x106>
100056ca:	8d 57 03             	lea    edx,[edi+0x3]
100056cd:	c1 e0 06             	shl    eax,0x6
100056d0:	09 c1                	or     ecx,eax
100056d2:	88 4a ff             	mov    BYTE PTR [edx-0x1],cl
100056d5:	39 d6                	cmp    esi,edx
100056d7:	0f 87 55 ff ff ff    	ja     10005632 <BF_decode+0x12>
100056dd:	b8 00 00 00 00       	mov    eax,0x0
100056e2:	eb 05                	jmp    100056e9 <BF_decode+0xc9>
100056e4:	b8 ff ff ff ff       	mov    eax,0xffffffff
100056e9:	5b                   	pop    ebx
100056ea:	5e                   	pop    esi
100056eb:	5f                   	pop    edi
100056ec:	5d                   	pop    ebp
100056ed:	c3                   	ret    
100056ee:	b8 ff ff ff ff       	mov    eax,0xffffffff
100056f3:	eb f4                	jmp    100056e9 <BF_decode+0xc9>
100056f5:	b8 ff ff ff ff       	mov    eax,0xffffffff
100056fa:	eb ed                	jmp    100056e9 <BF_decode+0xc9>
100056fc:	b8 ff ff ff ff       	mov    eax,0xffffffff
10005701:	eb e6                	jmp    100056e9 <BF_decode+0xc9>
10005703:	b8 00 00 00 00       	mov    eax,0x0
10005708:	eb df                	jmp    100056e9 <BF_decode+0xc9>
1000570a:	b8 ff ff ff ff       	mov    eax,0xffffffff
1000570f:	eb d8                	jmp    100056e9 <BF_decode+0xc9>
10005711:	b8 ff ff ff ff       	mov    eax,0xffffffff
10005716:	eb d1                	jmp    100056e9 <BF_decode+0xc9>
10005718:	b8 00 00 00 00       	mov    eax,0x0
1000571d:	eb ca                	jmp    100056e9 <BF_decode+0xc9>
1000571f:	b8 ff ff ff ff       	mov    eax,0xffffffff
10005724:	eb c3                	jmp    100056e9 <BF_decode+0xc9>
10005726:	b8 ff ff ff ff       	mov    eax,0xffffffff
1000572b:	eb bc                	jmp    100056e9 <BF_decode+0xc9>

1000572d <BF_encode>:
1000572d:	55                   	push   ebp
1000572e:	57                   	push   edi
1000572f:	56                   	push   esi
10005730:	53                   	push   ebx
10005731:	83 ec 04             	sub    esp,0x4
10005734:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
10005738:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
1000573c:	89 c7                	mov    edi,eax
1000573e:	03 7c 24 20          	add    edi,DWORD PTR [esp+0x20]
10005742:	89 3c 24             	mov    DWORD PTR [esp],edi
10005745:	0f b6 10             	movzx  edx,BYTE PTR [eax]
10005748:	89 d6                	mov    esi,edx
1000574a:	c1 ee 02             	shr    esi,0x2
1000574d:	8a 9e c0 a2 00 10    	mov    bl,BYTE PTR [esi+0x1000a2c0]	1000574f: R_386_32	.data
10005753:	88 19                	mov    BYTE PTR [ecx],bl
10005755:	c1 e2 04             	shl    edx,0x4
10005758:	83 e2 30             	and    edx,0x30
1000575b:	89 c7                	mov    edi,eax
1000575d:	8d 70 01             	lea    esi,[eax+0x1]
10005760:	39 34 24             	cmp    DWORD PTR [esp],esi
10005763:	76 51                	jbe    100057b6 <BF_encode+0x89>
10005765:	0f b6 70 01          	movzx  esi,BYTE PTR [eax+0x1]
10005769:	89 f5                	mov    ebp,esi
1000576b:	c1 ed 04             	shr    ebp,0x4
1000576e:	09 ea                	or     edx,ebp
10005770:	8a 9a c0 a2 00 10    	mov    bl,BYTE PTR [edx+0x1000a2c0]	10005772: R_386_32	.data
10005776:	88 59 01             	mov    BYTE PTR [ecx+0x1],bl
10005779:	c1 e6 02             	shl    esi,0x2
1000577c:	83 e6 3c             	and    esi,0x3c
1000577f:	83 c0 02             	add    eax,0x2
10005782:	39 04 24             	cmp    DWORD PTR [esp],eax
10005785:	76 40                	jbe    100057c7 <BF_encode+0x9a>
10005787:	8d 47 03             	lea    eax,[edi+0x3]
1000578a:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
1000578d:	0f b6 d3             	movzx  edx,bl
10005790:	c1 ea 06             	shr    edx,0x6
10005793:	09 f2                	or     edx,esi
10005795:	8a 92 c0 a2 00 10    	mov    dl,BYTE PTR [edx+0x1000a2c0]	10005797: R_386_32	.data
1000579b:	88 51 02             	mov    BYTE PTR [ecx+0x2],dl
1000579e:	83 c1 04             	add    ecx,0x4
100057a1:	89 da                	mov    edx,ebx
100057a3:	83 e2 3f             	and    edx,0x3f
100057a6:	8a 9a c0 a2 00 10    	mov    bl,BYTE PTR [edx+0x1000a2c0]	100057a8: R_386_32	.data
100057ac:	88 59 ff             	mov    BYTE PTR [ecx-0x1],bl
100057af:	39 04 24             	cmp    DWORD PTR [esp],eax
100057b2:	77 91                	ja     10005745 <BF_encode+0x18>
100057b4:	eb 09                	jmp    100057bf <BF_encode+0x92>
100057b6:	8a 82 c0 a2 00 10    	mov    al,BYTE PTR [edx+0x1000a2c0]	100057b8: R_386_32	.data
100057bc:	88 41 01             	mov    BYTE PTR [ecx+0x1],al
100057bf:	83 c4 04             	add    esp,0x4
100057c2:	5b                   	pop    ebx
100057c3:	5e                   	pop    esi
100057c4:	5f                   	pop    edi
100057c5:	5d                   	pop    ebp
100057c6:	c3                   	ret    
100057c7:	8a 86 c0 a2 00 10    	mov    al,BYTE PTR [esi+0x1000a2c0]	100057c9: R_386_32	.data
100057cd:	88 41 02             	mov    BYTE PTR [ecx+0x2],al
100057d0:	eb ed                	jmp    100057bf <BF_encode+0x92>

100057d2 <BF_swap>:
100057d2:	53                   	push   ebx
100057d3:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
100057d7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
100057db:	80 3d 80 a3 00 10 00 	cmp    BYTE PTR ds:0x1000a380,0x0	100057dd: R_386_32	.data
100057e2:	74 23                	je     10005807 <BF_swap+0x35>
100057e4:	8b 01                	mov    eax,DWORD PTR [ecx]
100057e6:	c1 c0 10             	rol    eax,0x10
100057e9:	83 c1 04             	add    ecx,0x4
100057ec:	89 c2                	mov    edx,eax
100057ee:	c1 e2 08             	shl    edx,0x8
100057f1:	81 e2 00 ff 00 ff    	and    edx,0xff00ff00
100057f7:	c1 e8 08             	shr    eax,0x8
100057fa:	25 ff 00 ff 00       	and    eax,0xff00ff
100057ff:	09 d0                	or     eax,edx
10005801:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
10005804:	4b                   	dec    ebx
10005805:	75 dd                	jne    100057e4 <BF_swap+0x12>
10005807:	5b                   	pop    ebx
10005808:	c3                   	ret    

10005809 <BF_set_key>:
10005809:	55                   	push   ebp
1000580a:	57                   	push   edi
1000580b:	56                   	push   esi
1000580c:	53                   	push   ebx
1000580d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
10005811:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
10005815:	89 f9                	mov    ecx,edi
10005817:	be 00 00 00 00       	mov    esi,0x0
1000581c:	eb 2d                	jmp    1000584b <BF_set_key+0x42>
1000581e:	89 f9                	mov    ecx,edi
10005820:	4a                   	dec    edx
10005821:	74 10                	je     10005833 <BF_set_key+0x2a>
10005823:	c1 e0 08             	shl    eax,0x8
10005826:	0f b6 19             	movzx  ebx,BYTE PTR [ecx]
10005829:	09 d8                	or     eax,ebx
1000582b:	80 39 00             	cmp    BYTE PTR [ecx],0x0
1000582e:	74 ee                	je     1000581e <BF_set_key+0x15>
10005830:	41                   	inc    ecx
10005831:	eb ed                	jmp    10005820 <BF_set_key+0x17>
10005833:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
10005837:	89 04 b2             	mov    DWORD PTR [edx+esi*4],eax
1000583a:	33 04 b5 60 a2 00 10 	xor    eax,DWORD PTR [esi*4+0x1000a260]	1000583d: R_386_32	.data
10005841:	89 44 b5 00          	mov    DWORD PTR [ebp+esi*4+0x0],eax
10005845:	46                   	inc    esi
10005846:	83 fe 12             	cmp    esi,0x12
10005849:	74 0c                	je     10005857 <BF_set_key+0x4e>
1000584b:	ba 04 00 00 00       	mov    edx,0x4
10005850:	b8 00 00 00 00       	mov    eax,0x0
10005855:	eb cc                	jmp    10005823 <BF_set_key+0x1a>
10005857:	5b                   	pop    ebx
10005858:	5e                   	pop    esi
10005859:	5f                   	pop    edi
1000585a:	5d                   	pop    ebp
1000585b:	c3                   	ret    

1000585c <_crypt_blowfish_rn>:
1000585c:	55                   	push   ebp
1000585d:	57                   	push   edi
1000585e:	56                   	push   esi
1000585f:	53                   	push   ebx
10005860:	81 ec 00 11 00 00    	sub    esp,0x1100
10005866:	83 bc 24 20 11 00 00 3c 	cmp    DWORD PTR [esp+0x1120],0x3c
1000586e:	0f 8e 9e 2d 00 00    	jle    10008612 <_crypt_blowfish_rn+0x2db6>
10005874:	8b 84 24 18 11 00 00 	mov    eax,DWORD PTR [esp+0x1118]
1000587b:	80 38 24             	cmp    BYTE PTR [eax],0x24
1000587e:	0f 85 a8 2d 00 00    	jne    1000862c <_crypt_blowfish_rn+0x2dd0>
10005884:	80 78 01 32          	cmp    BYTE PTR [eax+0x1],0x32
10005888:	0f 85 9e 2d 00 00    	jne    1000862c <_crypt_blowfish_rn+0x2dd0>
1000588e:	80 78 02 61          	cmp    BYTE PTR [eax+0x2],0x61
10005892:	0f 85 94 2d 00 00    	jne    1000862c <_crypt_blowfish_rn+0x2dd0>
10005898:	80 78 03 24          	cmp    BYTE PTR [eax+0x3],0x24
1000589c:	0f 85 8a 2d 00 00    	jne    1000862c <_crypt_blowfish_rn+0x2dd0>
100058a2:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
100058a5:	8d 50 d0             	lea    edx,[eax-0x30]
100058a8:	80 fa 03             	cmp    dl,0x3
100058ab:	0f 87 7b 2d 00 00    	ja     1000862c <_crypt_blowfish_rn+0x2dd0>
100058b1:	8b 9c 24 18 11 00 00 	mov    ebx,DWORD PTR [esp+0x1118]
100058b8:	8a 53 05             	mov    dl,BYTE PTR [ebx+0x5]
100058bb:	8d 4a d0             	lea    ecx,[edx-0x30]
100058be:	80 f9 09             	cmp    cl,0x9
100058c1:	0f 87 65 2d 00 00    	ja     1000862c <_crypt_blowfish_rn+0x2dd0>
100058c7:	3c 33                	cmp    al,0x33
100058c9:	0f 84 54 2d 00 00    	je     10008623 <_crypt_blowfish_rn+0x2dc7>
100058cf:	8b 9c 24 18 11 00 00 	mov    ebx,DWORD PTR [esp+0x1118]
100058d6:	80 7b 06 24          	cmp    BYTE PTR [ebx+0x6],0x24
100058da:	0f 85 4c 2d 00 00    	jne    1000862c <_crypt_blowfish_rn+0x2dd0>
100058e0:	0f be c0             	movsx  eax,al
100058e3:	8d 84 80 10 ff ff ff 	lea    eax,[eax+eax*4-0xf0]
100058ea:	01 c0                	add    eax,eax
100058ec:	0f be d2             	movsx  edx,dl
100058ef:	8d 4c 10 d0          	lea    ecx,[eax+edx*1-0x30]
100058f3:	b8 01 00 00 00       	mov    eax,0x1
100058f8:	d3 e0                	shl    eax,cl
100058fa:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
100058fe:	83 f8 0f             	cmp    eax,0xf
10005901:	0f 86 3f 2d 00 00    	jbe    10008646 <_crypt_blowfish_rn+0x2dea>
10005907:	6a 10                	push   0x10
10005909:	8b 84 24 1c 11 00 00 	mov    eax,DWORD PTR [esp+0x111c]
10005910:	83 c0 07             	add    eax,0x7
10005913:	50                   	push   eax
10005914:	8d 84 24 f0 10 00 00 	lea    eax,[esp+0x10f0]
1000591b:	50                   	push   eax
1000591c:	e8 ff fc ff ff       	call   10005620 <BF_decode>
10005921:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
10005925:	83 c4 0c             	add    esp,0xc
10005928:	85 c0                	test   eax,eax
1000592a:	0f 85 16 2d 00 00    	jne    10008646 <_crypt_blowfish_rn+0x2dea>
10005930:	6a 04                	push   0x4
10005932:	8d 5c 24 5c          	lea    ebx,[esp+0x5c]
10005936:	8d 84 24 ec 10 00 00 	lea    eax,[esp+0x10ec]
1000593d:	50                   	push   eax
1000593e:	e8 8f fe ff ff       	call   100057d2 <BF_swap>
10005943:	8d 84 24 60 10 00 00 	lea    eax,[esp+0x1060]
1000594a:	50                   	push   eax
1000594b:	8d 84 24 ac 10 00 00 	lea    eax,[esp+0x10ac]
10005952:	50                   	push   eax
10005953:	ff b4 24 24 11 00 00 	push   DWORD PTR [esp+0x1124]
1000595a:	e8 aa fe ff ff       	call   10005809 <BF_set_key>
1000595f:	be 60 92 00 10       	mov    esi,0x10009260	10005960: R_386_32	.data
10005964:	b9 00 04 00 00       	mov    ecx,0x400
10005969:	89 df                	mov    edi,ebx
1000596b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000596d:	83 c4 14             	add    esp,0x14
10005970:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
10005974:	89 04 24             	mov    DWORD PTR [esp],eax
10005977:	bb 00 00 00 00       	mov    ebx,0x0
1000597c:	b8 00 00 00 00       	mov    eax,0x0
10005981:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
10005984:	83 e1 02             	and    ecx,0x2
10005987:	8d 91 24 04 00 00    	lea    edx,[ecx+0x424]
1000598d:	8b 54 94 58          	mov    edx,DWORD PTR [esp+edx*4+0x58]
10005991:	33 94 24 58 10 00 00 	xor    edx,DWORD PTR [esp+0x1058]
10005998:	31 c2                	xor    edx,eax
1000599a:	89 d7                	mov    edi,edx
1000599c:	c1 ef 06             	shr    edi,0x6
1000599f:	89 d5                	mov    ebp,edx
100059a1:	c1 ed 0e             	shr    ebp,0xe
100059a4:	89 d0                	mov    eax,edx
100059a6:	c1 e8 16             	shr    eax,0x16
100059a9:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
100059b0:	81 e6 fc 03 00 00    	and    esi,0x3fc
100059b6:	81 e7 fc 03 00 00    	and    edi,0x3fc
100059bc:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100059c2:	25 fc 03 00 00       	and    eax,0x3fc
100059c7:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
100059cb:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
100059d2:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
100059d9:	81 c1 25 04 00 00    	add    ecx,0x425
100059df:	8b 4c 8c 58          	mov    ecx,DWORD PTR [esp+ecx*4+0x58]
100059e3:	33 8c 24 5c 10 00 00 	xor    ecx,DWORD PTR [esp+0x105c]
100059ea:	03 84 34 58 0c 00 00 	add    eax,DWORD PTR [esp+esi*1+0xc58]
100059f1:	31 c8                	xor    eax,ecx
100059f3:	31 c3                	xor    ebx,eax
100059f5:	89 d8                	mov    eax,ebx
100059f7:	c1 e8 06             	shr    eax,0x6
100059fa:	89 c1                	mov    ecx,eax
100059fc:	89 df                	mov    edi,ebx
100059fe:	c1 ef 0e             	shr    edi,0xe
10005a01:	89 d8                	mov    eax,ebx
10005a03:	c1 e8 16             	shr    eax,0x16
10005a06:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
10005a0d:	81 e6 fc 03 00 00    	and    esi,0x3fc
10005a13:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10005a19:	81 e7 fc 03 00 00    	and    edi,0x3fc
10005a1f:	25 fc 03 00 00       	and    eax,0x3fc
10005a24:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10005a28:	03 84 3c 58 04 00 00 	add    eax,DWORD PTR [esp+edi*1+0x458]
10005a2f:	33 84 0c 58 08 00 00 	xor    eax,DWORD PTR [esp+ecx*1+0x858]
10005a36:	33 94 24 60 10 00 00 	xor    edx,DWORD PTR [esp+0x1060]
10005a3d:	03 84 34 58 0c 00 00 	add    eax,DWORD PTR [esp+esi*1+0xc58]
10005a44:	89 c1                	mov    ecx,eax
10005a46:	31 d1                	xor    ecx,edx
10005a48:	89 ca                	mov    edx,ecx
10005a4a:	c1 ea 06             	shr    edx,0x6
10005a4d:	89 cf                	mov    edi,ecx
10005a4f:	c1 ef 0e             	shr    edi,0xe
10005a52:	89 c8                	mov    eax,ecx
10005a54:	c1 e8 16             	shr    eax,0x16
10005a57:	8d 34 8d 00 00 00 00 	lea    esi,[ecx*4+0x0]
10005a5e:	81 e6 fc 03 00 00    	and    esi,0x3fc
10005a64:	81 e2 fc 03 00 00    	and    edx,0x3fc
10005a6a:	81 e7 fc 03 00 00    	and    edi,0x3fc
10005a70:	25 fc 03 00 00       	and    eax,0x3fc
10005a75:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10005a79:	03 84 3c 58 04 00 00 	add    eax,DWORD PTR [esp+edi*1+0x458]
10005a80:	33 84 14 58 08 00 00 	xor    eax,DWORD PTR [esp+edx*1+0x858]
10005a87:	33 9c 24 64 10 00 00 	xor    ebx,DWORD PTR [esp+0x1064]
10005a8e:	03 84 34 58 0c 00 00 	add    eax,DWORD PTR [esp+esi*1+0xc58]
10005a95:	89 c2                	mov    edx,eax
10005a97:	31 da                	xor    edx,ebx
10005a99:	89 d6                	mov    esi,edx
10005a9b:	c1 ee 06             	shr    esi,0x6
10005a9e:	89 d7                	mov    edi,edx
10005aa0:	c1 ef 0e             	shr    edi,0xe
10005aa3:	89 d0                	mov    eax,edx
10005aa5:	c1 e8 16             	shr    eax,0x16
10005aa8:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
10005aaf:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10005ab5:	81 e6 fc 03 00 00    	and    esi,0x3fc
10005abb:	81 e7 fc 03 00 00    	and    edi,0x3fc
10005ac1:	25 fc 03 00 00       	and    eax,0x3fc
10005ac6:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10005aca:	03 84 3c 58 04 00 00 	add    eax,DWORD PTR [esp+edi*1+0x458]
10005ad1:	33 84 34 58 08 00 00 	xor    eax,DWORD PTR [esp+esi*1+0x858]
10005ad8:	33 8c 24 68 10 00 00 	xor    ecx,DWORD PTR [esp+0x1068]
10005adf:	03 84 1c 58 0c 00 00 	add    eax,DWORD PTR [esp+ebx*1+0xc58]
10005ae6:	31 c8                	xor    eax,ecx
10005ae8:	89 c3                	mov    ebx,eax
10005aea:	c1 eb 06             	shr    ebx,0x6
10005aed:	89 c7                	mov    edi,eax
10005aef:	c1 ef 0e             	shr    edi,0xe
10005af2:	89 c6                	mov    esi,eax
10005af4:	c1 ee 16             	shr    esi,0x16
10005af7:	89 f1                	mov    ecx,esi
10005af9:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10005b00:	81 e6 fc 03 00 00    	and    esi,0x3fc
10005b06:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10005b0c:	81 e7 fc 03 00 00    	and    edi,0x3fc
10005b12:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10005b18:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10005b1c:	03 8c 3c 58 04 00 00 	add    ecx,DWORD PTR [esp+edi*1+0x458]
10005b23:	33 8c 1c 58 08 00 00 	xor    ecx,DWORD PTR [esp+ebx*1+0x858]
10005b2a:	33 94 24 6c 10 00 00 	xor    edx,DWORD PTR [esp+0x106c]
10005b31:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10005b38:	31 ca                	xor    edx,ecx
10005b3a:	89 d6                	mov    esi,edx
10005b3c:	c1 ee 06             	shr    esi,0x6
10005b3f:	89 d7                	mov    edi,edx
10005b41:	c1 ef 0e             	shr    edi,0xe
10005b44:	89 d3                	mov    ebx,edx
10005b46:	c1 eb 16             	shr    ebx,0x16
10005b49:	89 d9                	mov    ecx,ebx
10005b4b:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
10005b52:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10005b58:	81 e6 fc 03 00 00    	and    esi,0x3fc
10005b5e:	81 e7 fc 03 00 00    	and    edi,0x3fc
10005b64:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10005b6a:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10005b6e:	03 8c 3c 58 04 00 00 	add    ecx,DWORD PTR [esp+edi*1+0x458]
10005b75:	33 8c 34 58 08 00 00 	xor    ecx,DWORD PTR [esp+esi*1+0x858]
10005b7c:	33 84 24 70 10 00 00 	xor    eax,DWORD PTR [esp+0x1070]
10005b83:	03 8c 1c 58 0c 00 00 	add    ecx,DWORD PTR [esp+ebx*1+0xc58]
10005b8a:	31 c8                	xor    eax,ecx
10005b8c:	89 c6                	mov    esi,eax
10005b8e:	c1 ee 06             	shr    esi,0x6
10005b91:	89 c7                	mov    edi,eax
10005b93:	c1 ef 0e             	shr    edi,0xe
10005b96:	89 c3                	mov    ebx,eax
10005b98:	c1 eb 16             	shr    ebx,0x16
10005b9b:	89 d9                	mov    ecx,ebx
10005b9d:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
10005ba4:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10005baa:	81 e6 fc 03 00 00    	and    esi,0x3fc
10005bb0:	81 e7 fc 03 00 00    	and    edi,0x3fc
10005bb6:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10005bbc:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10005bc0:	03 8c 3c 58 04 00 00 	add    ecx,DWORD PTR [esp+edi*1+0x458]
10005bc7:	33 8c 34 58 08 00 00 	xor    ecx,DWORD PTR [esp+esi*1+0x858]
10005bce:	33 94 24 74 10 00 00 	xor    edx,DWORD PTR [esp+0x1074]
10005bd5:	03 8c 1c 58 0c 00 00 	add    ecx,DWORD PTR [esp+ebx*1+0xc58]
10005bdc:	31 ca                	xor    edx,ecx
10005bde:	89 d6                	mov    esi,edx
10005be0:	c1 ee 06             	shr    esi,0x6
10005be3:	89 d7                	mov    edi,edx
10005be5:	c1 ef 0e             	shr    edi,0xe
10005be8:	89 d3                	mov    ebx,edx
10005bea:	c1 eb 16             	shr    ebx,0x16
10005bed:	89 d9                	mov    ecx,ebx
10005bef:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
10005bf6:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10005bfc:	81 e6 fc 03 00 00    	and    esi,0x3fc
10005c02:	81 e7 fc 03 00 00    	and    edi,0x3fc
10005c08:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10005c0e:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10005c12:	03 8c 3c 58 04 00 00 	add    ecx,DWORD PTR [esp+edi*1+0x458]
10005c19:	33 8c 34 58 08 00 00 	xor    ecx,DWORD PTR [esp+esi*1+0x858]
10005c20:	33 84 24 78 10 00 00 	xor    eax,DWORD PTR [esp+0x1078]
10005c27:	03 8c 1c 58 0c 00 00 	add    ecx,DWORD PTR [esp+ebx*1+0xc58]
10005c2e:	31 c8                	xor    eax,ecx
10005c30:	89 c6                	mov    esi,eax
10005c32:	c1 ee 06             	shr    esi,0x6
10005c35:	89 c7                	mov    edi,eax
10005c37:	c1 ef 0e             	shr    edi,0xe
10005c3a:	89 c3                	mov    ebx,eax
10005c3c:	c1 eb 16             	shr    ebx,0x16
10005c3f:	89 d9                	mov    ecx,ebx
10005c41:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
10005c48:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10005c4e:	81 e6 fc 03 00 00    	and    esi,0x3fc
10005c54:	81 e7 fc 03 00 00    	and    edi,0x3fc
10005c5a:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10005c60:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10005c64:	03 8c 3c 58 04 00 00 	add    ecx,DWORD PTR [esp+edi*1+0x458]
10005c6b:	33 8c 34 58 08 00 00 	xor    ecx,DWORD PTR [esp+esi*1+0x858]
10005c72:	33 94 24 7c 10 00 00 	xor    edx,DWORD PTR [esp+0x107c]
10005c79:	03 8c 1c 58 0c 00 00 	add    ecx,DWORD PTR [esp+ebx*1+0xc58]
10005c80:	31 ca                	xor    edx,ecx
10005c82:	89 d6                	mov    esi,edx
10005c84:	c1 ee 06             	shr    esi,0x6
10005c87:	89 d7                	mov    edi,edx
10005c89:	c1 ef 0e             	shr    edi,0xe
10005c8c:	89 d3                	mov    ebx,edx
10005c8e:	c1 eb 16             	shr    ebx,0x16
10005c91:	89 d9                	mov    ecx,ebx
10005c93:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
10005c9a:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10005ca0:	81 e6 fc 03 00 00    	and    esi,0x3fc
10005ca6:	81 e7 fc 03 00 00    	and    edi,0x3fc
10005cac:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10005cb2:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10005cb6:	03 8c 3c 58 04 00 00 	add    ecx,DWORD PTR [esp+edi*1+0x458]
10005cbd:	33 8c 34 58 08 00 00 	xor    ecx,DWORD PTR [esp+esi*1+0x858]
10005cc4:	33 84 24 80 10 00 00 	xor    eax,DWORD PTR [esp+0x1080]
10005ccb:	03 8c 1c 58 0c 00 00 	add    ecx,DWORD PTR [esp+ebx*1+0xc58]
10005cd2:	31 c8                	xor    eax,ecx
10005cd4:	89 c6                	mov    esi,eax
10005cd6:	c1 ee 06             	shr    esi,0x6
10005cd9:	89 c7                	mov    edi,eax
10005cdb:	c1 ef 0e             	shr    edi,0xe
10005cde:	89 c3                	mov    ebx,eax
10005ce0:	c1 eb 16             	shr    ebx,0x16
10005ce3:	89 d9                	mov    ecx,ebx
10005ce5:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
10005cec:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10005cf2:	81 e6 fc 03 00 00    	and    esi,0x3fc
10005cf8:	81 e7 fc 03 00 00    	and    edi,0x3fc
10005cfe:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10005d04:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10005d08:	03 8c 3c 58 04 00 00 	add    ecx,DWORD PTR [esp+edi*1+0x458]
10005d0f:	33 8c 34 58 08 00 00 	xor    ecx,DWORD PTR [esp+esi*1+0x858]
10005d16:	33 94 24 84 10 00 00 	xor    edx,DWORD PTR [esp+0x1084]
10005d1d:	03 8c 1c 58 0c 00 00 	add    ecx,DWORD PTR [esp+ebx*1+0xc58]
10005d24:	31 ca                	xor    edx,ecx
10005d26:	89 d6                	mov    esi,edx
10005d28:	c1 ee 06             	shr    esi,0x6
10005d2b:	89 d7                	mov    edi,edx
10005d2d:	c1 ef 0e             	shr    edi,0xe
10005d30:	89 d3                	mov    ebx,edx
10005d32:	c1 eb 16             	shr    ebx,0x16
10005d35:	89 d9                	mov    ecx,ebx
10005d37:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
10005d3e:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10005d44:	81 e6 fc 03 00 00    	and    esi,0x3fc
10005d4a:	81 e7 fc 03 00 00    	and    edi,0x3fc
10005d50:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10005d56:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10005d5a:	03 8c 3c 58 04 00 00 	add    ecx,DWORD PTR [esp+edi*1+0x458]
10005d61:	33 8c 34 58 08 00 00 	xor    ecx,DWORD PTR [esp+esi*1+0x858]
10005d68:	33 84 24 88 10 00 00 	xor    eax,DWORD PTR [esp+0x1088]
10005d6f:	03 8c 1c 58 0c 00 00 	add    ecx,DWORD PTR [esp+ebx*1+0xc58]
10005d76:	31 c8                	xor    eax,ecx
10005d78:	89 c6                	mov    esi,eax
10005d7a:	c1 ee 06             	shr    esi,0x6
10005d7d:	89 c7                	mov    edi,eax
10005d7f:	c1 ef 0e             	shr    edi,0xe
10005d82:	89 c3                	mov    ebx,eax
10005d84:	c1 eb 16             	shr    ebx,0x16
10005d87:	89 d9                	mov    ecx,ebx
10005d89:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
10005d90:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10005d96:	81 e6 fc 03 00 00    	and    esi,0x3fc
10005d9c:	81 e7 fc 03 00 00    	and    edi,0x3fc
10005da2:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10005da8:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10005dac:	03 8c 3c 58 04 00 00 	add    ecx,DWORD PTR [esp+edi*1+0x458]
10005db3:	33 8c 34 58 08 00 00 	xor    ecx,DWORD PTR [esp+esi*1+0x858]
10005dba:	33 94 24 8c 10 00 00 	xor    edx,DWORD PTR [esp+0x108c]
10005dc1:	03 8c 1c 58 0c 00 00 	add    ecx,DWORD PTR [esp+ebx*1+0xc58]
10005dc8:	31 ca                	xor    edx,ecx
10005dca:	89 d3                	mov    ebx,edx
10005dcc:	c1 eb 06             	shr    ebx,0x6
10005dcf:	89 d7                	mov    edi,edx
10005dd1:	c1 ef 0e             	shr    edi,0xe
10005dd4:	89 d6                	mov    esi,edx
10005dd6:	c1 ee 16             	shr    esi,0x16
10005dd9:	89 f1                	mov    ecx,esi
10005ddb:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10005de2:	81 e6 fc 03 00 00    	and    esi,0x3fc
10005de8:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10005dee:	81 e7 fc 03 00 00    	and    edi,0x3fc
10005df4:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10005dfa:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10005dfe:	03 8c 3c 58 04 00 00 	add    ecx,DWORD PTR [esp+edi*1+0x458]
10005e05:	33 8c 1c 58 08 00 00 	xor    ecx,DWORD PTR [esp+ebx*1+0x858]
10005e0c:	33 84 24 90 10 00 00 	xor    eax,DWORD PTR [esp+0x1090]
10005e13:	89 cb                	mov    ebx,ecx
10005e15:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
10005e1c:	31 d8                	xor    eax,ebx
10005e1e:	89 c6                	mov    esi,eax
10005e20:	c1 ee 06             	shr    esi,0x6
10005e23:	89 c7                	mov    edi,eax
10005e25:	c1 ef 0e             	shr    edi,0xe
10005e28:	89 c3                	mov    ebx,eax
10005e2a:	c1 eb 16             	shr    ebx,0x16
10005e2d:	89 d9                	mov    ecx,ebx
10005e2f:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
10005e36:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10005e3c:	81 e6 fc 03 00 00    	and    esi,0x3fc
10005e42:	81 e7 fc 03 00 00    	and    edi,0x3fc
10005e48:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10005e4e:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10005e52:	03 8c 3c 58 04 00 00 	add    ecx,DWORD PTR [esp+edi*1+0x458]
10005e59:	33 8c 34 58 08 00 00 	xor    ecx,DWORD PTR [esp+esi*1+0x858]
10005e60:	33 94 24 94 10 00 00 	xor    edx,DWORD PTR [esp+0x1094]
10005e67:	03 8c 1c 58 0c 00 00 	add    ecx,DWORD PTR [esp+ebx*1+0xc58]
10005e6e:	31 ca                	xor    edx,ecx
10005e70:	89 d3                	mov    ebx,edx
10005e72:	c1 eb 06             	shr    ebx,0x6
10005e75:	89 d7                	mov    edi,edx
10005e77:	c1 ef 0e             	shr    edi,0xe
10005e7a:	89 d6                	mov    esi,edx
10005e7c:	c1 ee 16             	shr    esi,0x16
10005e7f:	89 f1                	mov    ecx,esi
10005e81:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10005e88:	81 e6 fc 03 00 00    	and    esi,0x3fc
10005e8e:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10005e94:	81 e7 fc 03 00 00    	and    edi,0x3fc
10005e9a:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10005ea0:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10005ea4:	03 8c 3c 58 04 00 00 	add    ecx,DWORD PTR [esp+edi*1+0x458]
10005eab:	33 8c 1c 58 08 00 00 	xor    ecx,DWORD PTR [esp+ebx*1+0x858]
10005eb2:	33 84 24 98 10 00 00 	xor    eax,DWORD PTR [esp+0x1098]
10005eb9:	89 cb                	mov    ebx,ecx
10005ebb:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
10005ec2:	31 c3                	xor    ebx,eax
10005ec4:	89 d0                	mov    eax,edx
10005ec6:	33 84 24 9c 10 00 00 	xor    eax,DWORD PTR [esp+0x109c]
10005ecd:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
10005ed0:	89 84 8c 58 10 00 00 	mov    DWORD PTR [esp+ecx*4+0x1058],eax
10005ed7:	89 9c 8c 5c 10 00 00 	mov    DWORD PTR [esp+ecx*4+0x105c],ebx
10005ede:	83 c1 02             	add    ecx,0x2
10005ee1:	89 0c 24             	mov    DWORD PTR [esp],ecx
10005ee4:	83 f9 12             	cmp    ecx,0x12
10005ee7:	0f 85 94 fa ff ff    	jne    10005981 <_crypt_blowfish_rn+0x125>
10005eed:	8d 4c 24 58          	lea    ecx,[esp+0x58]
10005ef1:	83 c1 10             	add    ecx,0x10
10005ef4:	8b 94 24 f0 10 00 00 	mov    edx,DWORD PTR [esp+0x10f0]
10005efb:	33 94 24 58 10 00 00 	xor    edx,DWORD PTR [esp+0x1058]
10005f02:	31 c2                	xor    edx,eax
10005f04:	89 d7                	mov    edi,edx
10005f06:	c1 ef 06             	shr    edi,0x6
10005f09:	89 d5                	mov    ebp,edx
10005f0b:	c1 ed 0e             	shr    ebp,0xe
10005f0e:	89 d0                	mov    eax,edx
10005f10:	c1 e8 16             	shr    eax,0x16
10005f13:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10005f1a:	81 e6 fc 03 00 00    	and    esi,0x3fc
10005f20:	81 e7 fc 03 00 00    	and    edi,0x3fc
10005f26:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10005f2c:	25 fc 03 00 00       	and    eax,0x3fc
10005f31:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10005f35:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
10005f3c:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
10005f43:	89 c7                	mov    edi,eax
10005f45:	8b 84 24 f4 10 00 00 	mov    eax,DWORD PTR [esp+0x10f4]
10005f4c:	33 84 24 5c 10 00 00 	xor    eax,DWORD PTR [esp+0x105c]
10005f53:	03 bc 34 58 0c 00 00 	add    edi,DWORD PTR [esp+esi*1+0xc58]
10005f5a:	31 f8                	xor    eax,edi
10005f5c:	31 d8                	xor    eax,ebx
10005f5e:	89 c7                	mov    edi,eax
10005f60:	c1 ef 06             	shr    edi,0x6
10005f63:	89 c5                	mov    ebp,eax
10005f65:	c1 ed 0e             	shr    ebp,0xe
10005f68:	89 c3                	mov    ebx,eax
10005f6a:	c1 eb 16             	shr    ebx,0x16
10005f6d:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10005f74:	81 e6 fc 03 00 00    	and    esi,0x3fc
10005f7a:	81 e7 fc 03 00 00    	and    edi,0x3fc
10005f80:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10005f86:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10005f8c:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
10005f90:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
10005f97:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
10005f9e:	33 94 24 60 10 00 00 	xor    edx,DWORD PTR [esp+0x1060]
10005fa5:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
10005fac:	31 da                	xor    edx,ebx
10005fae:	89 d7                	mov    edi,edx
10005fb0:	c1 ef 06             	shr    edi,0x6
10005fb3:	89 d5                	mov    ebp,edx
10005fb5:	c1 ed 0e             	shr    ebp,0xe
10005fb8:	89 d3                	mov    ebx,edx
10005fba:	c1 eb 16             	shr    ebx,0x16
10005fbd:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10005fc4:	81 e6 fc 03 00 00    	and    esi,0x3fc
10005fca:	81 e7 fc 03 00 00    	and    edi,0x3fc
10005fd0:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10005fd6:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10005fdc:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
10005fe0:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
10005fe7:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
10005fee:	33 84 24 64 10 00 00 	xor    eax,DWORD PTR [esp+0x1064]
10005ff5:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
10005ffc:	31 d8                	xor    eax,ebx
10005ffe:	89 c7                	mov    edi,eax
10006000:	c1 ef 06             	shr    edi,0x6
10006003:	89 c5                	mov    ebp,eax
10006005:	c1 ed 0e             	shr    ebp,0xe
10006008:	89 c3                	mov    ebx,eax
1000600a:	c1 eb 16             	shr    ebx,0x16
1000600d:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10006014:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000601a:	81 e7 fc 03 00 00    	and    edi,0x3fc
10006020:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10006026:	81 e3 fc 03 00 00    	and    ebx,0x3fc
1000602c:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
10006030:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
10006037:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
1000603e:	33 94 24 68 10 00 00 	xor    edx,DWORD PTR [esp+0x1068]
10006045:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
1000604c:	31 da                	xor    edx,ebx
1000604e:	89 d7                	mov    edi,edx
10006050:	c1 ef 06             	shr    edi,0x6
10006053:	89 d5                	mov    ebp,edx
10006055:	c1 ed 0e             	shr    ebp,0xe
10006058:	89 d3                	mov    ebx,edx
1000605a:	c1 eb 16             	shr    ebx,0x16
1000605d:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10006064:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000606a:	81 e7 fc 03 00 00    	and    edi,0x3fc
10006070:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10006076:	81 e3 fc 03 00 00    	and    ebx,0x3fc
1000607c:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
10006080:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
10006087:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
1000608e:	33 84 24 6c 10 00 00 	xor    eax,DWORD PTR [esp+0x106c]
10006095:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
1000609c:	31 d8                	xor    eax,ebx
1000609e:	89 c7                	mov    edi,eax
100060a0:	c1 ef 06             	shr    edi,0x6
100060a3:	89 c5                	mov    ebp,eax
100060a5:	c1 ed 0e             	shr    ebp,0xe
100060a8:	89 c3                	mov    ebx,eax
100060aa:	c1 eb 16             	shr    ebx,0x16
100060ad:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
100060b4:	81 e6 fc 03 00 00    	and    esi,0x3fc
100060ba:	81 e7 fc 03 00 00    	and    edi,0x3fc
100060c0:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100060c6:	81 e3 fc 03 00 00    	and    ebx,0x3fc
100060cc:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
100060d0:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
100060d7:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
100060de:	33 94 24 70 10 00 00 	xor    edx,DWORD PTR [esp+0x1070]
100060e5:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
100060ec:	31 da                	xor    edx,ebx
100060ee:	89 d7                	mov    edi,edx
100060f0:	c1 ef 06             	shr    edi,0x6
100060f3:	89 d5                	mov    ebp,edx
100060f5:	c1 ed 0e             	shr    ebp,0xe
100060f8:	89 d3                	mov    ebx,edx
100060fa:	c1 eb 16             	shr    ebx,0x16
100060fd:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10006104:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000610a:	81 e7 fc 03 00 00    	and    edi,0x3fc
10006110:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10006116:	81 e3 fc 03 00 00    	and    ebx,0x3fc
1000611c:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
10006120:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
10006127:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
1000612e:	33 84 24 74 10 00 00 	xor    eax,DWORD PTR [esp+0x1074]
10006135:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
1000613c:	31 d8                	xor    eax,ebx
1000613e:	89 c7                	mov    edi,eax
10006140:	c1 ef 06             	shr    edi,0x6
10006143:	89 c5                	mov    ebp,eax
10006145:	c1 ed 0e             	shr    ebp,0xe
10006148:	89 c3                	mov    ebx,eax
1000614a:	c1 eb 16             	shr    ebx,0x16
1000614d:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10006154:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000615a:	81 e7 fc 03 00 00    	and    edi,0x3fc
10006160:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10006166:	81 e3 fc 03 00 00    	and    ebx,0x3fc
1000616c:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
10006170:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
10006177:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
1000617e:	33 94 24 78 10 00 00 	xor    edx,DWORD PTR [esp+0x1078]
10006185:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
1000618c:	31 da                	xor    edx,ebx
1000618e:	89 d7                	mov    edi,edx
10006190:	c1 ef 06             	shr    edi,0x6
10006193:	89 d5                	mov    ebp,edx
10006195:	c1 ed 0e             	shr    ebp,0xe
10006198:	89 d3                	mov    ebx,edx
1000619a:	c1 eb 16             	shr    ebx,0x16
1000619d:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
100061a4:	81 e6 fc 03 00 00    	and    esi,0x3fc
100061aa:	81 e7 fc 03 00 00    	and    edi,0x3fc
100061b0:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100061b6:	81 e3 fc 03 00 00    	and    ebx,0x3fc
100061bc:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
100061c0:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
100061c7:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
100061ce:	33 84 24 7c 10 00 00 	xor    eax,DWORD PTR [esp+0x107c]
100061d5:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
100061dc:	31 d8                	xor    eax,ebx
100061de:	89 c7                	mov    edi,eax
100061e0:	c1 ef 06             	shr    edi,0x6
100061e3:	89 c5                	mov    ebp,eax
100061e5:	c1 ed 0e             	shr    ebp,0xe
100061e8:	89 c3                	mov    ebx,eax
100061ea:	c1 eb 16             	shr    ebx,0x16
100061ed:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
100061f4:	81 e6 fc 03 00 00    	and    esi,0x3fc
100061fa:	81 e7 fc 03 00 00    	and    edi,0x3fc
10006200:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10006206:	81 e3 fc 03 00 00    	and    ebx,0x3fc
1000620c:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
10006210:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
10006217:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
1000621e:	33 94 24 80 10 00 00 	xor    edx,DWORD PTR [esp+0x1080]
10006225:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
1000622c:	31 da                	xor    edx,ebx
1000622e:	89 d7                	mov    edi,edx
10006230:	c1 ef 06             	shr    edi,0x6
10006233:	89 d5                	mov    ebp,edx
10006235:	c1 ed 0e             	shr    ebp,0xe
10006238:	89 d3                	mov    ebx,edx
1000623a:	c1 eb 16             	shr    ebx,0x16
1000623d:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10006244:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000624a:	81 e7 fc 03 00 00    	and    edi,0x3fc
10006250:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10006256:	81 e3 fc 03 00 00    	and    ebx,0x3fc
1000625c:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
10006260:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
10006267:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
1000626e:	33 84 24 84 10 00 00 	xor    eax,DWORD PTR [esp+0x1084]
10006275:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
1000627c:	31 d8                	xor    eax,ebx
1000627e:	89 c7                	mov    edi,eax
10006280:	c1 ef 06             	shr    edi,0x6
10006283:	89 c5                	mov    ebp,eax
10006285:	c1 ed 0e             	shr    ebp,0xe
10006288:	89 c3                	mov    ebx,eax
1000628a:	c1 eb 16             	shr    ebx,0x16
1000628d:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10006294:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000629a:	81 e7 fc 03 00 00    	and    edi,0x3fc
100062a0:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100062a6:	81 e3 fc 03 00 00    	and    ebx,0x3fc
100062ac:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
100062b0:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
100062b7:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
100062be:	33 94 24 88 10 00 00 	xor    edx,DWORD PTR [esp+0x1088]
100062c5:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
100062cc:	31 da                	xor    edx,ebx
100062ce:	89 d7                	mov    edi,edx
100062d0:	c1 ef 06             	shr    edi,0x6
100062d3:	89 d5                	mov    ebp,edx
100062d5:	c1 ed 0e             	shr    ebp,0xe
100062d8:	89 d3                	mov    ebx,edx
100062da:	c1 eb 16             	shr    ebx,0x16
100062dd:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
100062e4:	81 e6 fc 03 00 00    	and    esi,0x3fc
100062ea:	81 e7 fc 03 00 00    	and    edi,0x3fc
100062f0:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100062f6:	81 e3 fc 03 00 00    	and    ebx,0x3fc
100062fc:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
10006300:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
10006307:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
1000630e:	33 84 24 8c 10 00 00 	xor    eax,DWORD PTR [esp+0x108c]
10006315:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
1000631c:	31 d8                	xor    eax,ebx
1000631e:	89 c7                	mov    edi,eax
10006320:	c1 ef 06             	shr    edi,0x6
10006323:	89 c5                	mov    ebp,eax
10006325:	c1 ed 0e             	shr    ebp,0xe
10006328:	89 c3                	mov    ebx,eax
1000632a:	c1 eb 16             	shr    ebx,0x16
1000632d:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10006334:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000633a:	81 e7 fc 03 00 00    	and    edi,0x3fc
10006340:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10006346:	81 e3 fc 03 00 00    	and    ebx,0x3fc
1000634c:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
10006350:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
10006357:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
1000635e:	33 94 24 90 10 00 00 	xor    edx,DWORD PTR [esp+0x1090]
10006365:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
1000636c:	31 da                	xor    edx,ebx
1000636e:	89 d7                	mov    edi,edx
10006370:	c1 ef 06             	shr    edi,0x6
10006373:	89 d5                	mov    ebp,edx
10006375:	c1 ed 0e             	shr    ebp,0xe
10006378:	89 d3                	mov    ebx,edx
1000637a:	c1 eb 16             	shr    ebx,0x16
1000637d:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10006384:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000638a:	81 e7 fc 03 00 00    	and    edi,0x3fc
10006390:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10006396:	81 e3 fc 03 00 00    	and    ebx,0x3fc
1000639c:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
100063a0:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
100063a7:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
100063ae:	33 84 24 94 10 00 00 	xor    eax,DWORD PTR [esp+0x1094]
100063b5:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
100063bc:	31 d8                	xor    eax,ebx
100063be:	89 c6                	mov    esi,eax
100063c0:	c1 ee 06             	shr    esi,0x6
100063c3:	89 c5                	mov    ebp,eax
100063c5:	c1 ed 0e             	shr    ebp,0xe
100063c8:	89 c3                	mov    ebx,eax
100063ca:	c1 eb 16             	shr    ebx,0x16
100063cd:	8d 3c 85 00 00 00 00 	lea    edi,[eax*4+0x0]
100063d4:	81 e7 fc 03 00 00    	and    edi,0x3fc
100063da:	81 e6 fc 03 00 00    	and    esi,0x3fc
100063e0:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100063e6:	81 e3 fc 03 00 00    	and    ebx,0x3fc
100063ec:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
100063f0:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
100063f7:	33 9c 34 58 08 00 00 	xor    ebx,DWORD PTR [esp+esi*1+0x858]
100063fe:	33 94 24 98 10 00 00 	xor    edx,DWORD PTR [esp+0x1098]
10006405:	03 9c 3c 58 0c 00 00 	add    ebx,DWORD PTR [esp+edi*1+0xc58]
1000640c:	31 da                	xor    edx,ebx
1000640e:	33 84 24 9c 10 00 00 	xor    eax,DWORD PTR [esp+0x109c]
10006415:	89 41 f0             	mov    DWORD PTR [ecx-0x10],eax
10006418:	89 51 f4             	mov    DWORD PTR [ecx-0xc],edx
1000641b:	8b 9c 24 e8 10 00 00 	mov    ebx,DWORD PTR [esp+0x10e8]
10006422:	33 9c 24 58 10 00 00 	xor    ebx,DWORD PTR [esp+0x1058]
10006429:	31 d8                	xor    eax,ebx
1000642b:	89 c5                	mov    ebp,eax
1000642d:	c1 ed 06             	shr    ebp,0x6
10006430:	89 c6                	mov    esi,eax
10006432:	c1 ee 0e             	shr    esi,0xe
10006435:	89 c3                	mov    ebx,eax
10006437:	c1 eb 16             	shr    ebx,0x16
1000643a:	8d 3c 85 00 00 00 00 	lea    edi,[eax*4+0x0]
10006441:	81 e7 fc 03 00 00    	and    edi,0x3fc
10006447:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000644d:	81 e6 fc 03 00 00    	and    esi,0x3fc
10006453:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10006459:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
1000645d:	03 9c 34 58 04 00 00 	add    ebx,DWORD PTR [esp+esi*1+0x458]
10006464:	33 9c 2c 58 08 00 00 	xor    ebx,DWORD PTR [esp+ebp*1+0x858]
1000646b:	8b b4 24 ec 10 00 00 	mov    esi,DWORD PTR [esp+0x10ec]
10006472:	33 b4 24 5c 10 00 00 	xor    esi,DWORD PTR [esp+0x105c]
10006479:	31 f2                	xor    edx,esi
1000647b:	03 9c 3c 58 0c 00 00 	add    ebx,DWORD PTR [esp+edi*1+0xc58]
10006482:	89 de                	mov    esi,ebx
10006484:	31 d6                	xor    esi,edx
10006486:	89 f5                	mov    ebp,esi
10006488:	c1 ed 06             	shr    ebp,0x6
1000648b:	89 f3                	mov    ebx,esi
1000648d:	c1 eb 0e             	shr    ebx,0xe
10006490:	89 f2                	mov    edx,esi
10006492:	c1 ea 16             	shr    edx,0x16
10006495:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
1000649c:	81 e7 fc 03 00 00    	and    edi,0x3fc
100064a2:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100064a8:	81 e3 fc 03 00 00    	and    ebx,0x3fc
100064ae:	81 e2 fc 03 00 00    	and    edx,0x3fc
100064b4:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
100064b8:	03 94 1c 58 04 00 00 	add    edx,DWORD PTR [esp+ebx*1+0x458]
100064bf:	33 94 2c 58 08 00 00 	xor    edx,DWORD PTR [esp+ebp*1+0x858]
100064c6:	33 84 24 60 10 00 00 	xor    eax,DWORD PTR [esp+0x1060]
100064cd:	89 d3                	mov    ebx,edx
100064cf:	03 9c 3c 58 0c 00 00 	add    ebx,DWORD PTR [esp+edi*1+0xc58]
100064d6:	31 c3                	xor    ebx,eax
100064d8:	89 df                	mov    edi,ebx
100064da:	c1 ef 06             	shr    edi,0x6
100064dd:	89 dd                	mov    ebp,ebx
100064df:	c1 ed 0e             	shr    ebp,0xe
100064e2:	89 da                	mov    edx,ebx
100064e4:	c1 ea 16             	shr    edx,0x16
100064e7:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
100064ee:	25 fc 03 00 00       	and    eax,0x3fc
100064f3:	81 e7 fc 03 00 00    	and    edi,0x3fc
100064f9:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100064ff:	81 e2 fc 03 00 00    	and    edx,0x3fc
10006505:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10006509:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10006510:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10006517:	33 b4 24 64 10 00 00 	xor    esi,DWORD PTR [esp+0x1064]
1000651e:	03 94 04 58 0c 00 00 	add    edx,DWORD PTR [esp+eax*1+0xc58]
10006525:	31 d6                	xor    esi,edx
10006527:	89 f0                	mov    eax,esi
10006529:	c1 e8 06             	shr    eax,0x6
1000652c:	89 f5                	mov    ebp,esi
1000652e:	c1 ed 0e             	shr    ebp,0xe
10006531:	89 f2                	mov    edx,esi
10006533:	c1 ea 16             	shr    edx,0x16
10006536:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
1000653d:	81 e7 fc 03 00 00    	and    edi,0x3fc
10006543:	25 fc 03 00 00       	and    eax,0x3fc
10006548:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000654e:	81 e2 fc 03 00 00    	and    edx,0x3fc
10006554:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10006558:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
1000655f:	33 94 04 58 08 00 00 	xor    edx,DWORD PTR [esp+eax*1+0x858]
10006566:	33 9c 24 68 10 00 00 	xor    ebx,DWORD PTR [esp+0x1068]
1000656d:	03 94 3c 58 0c 00 00 	add    edx,DWORD PTR [esp+edi*1+0xc58]
10006574:	31 d3                	xor    ebx,edx
10006576:	89 dd                	mov    ebp,ebx
10006578:	c1 ed 06             	shr    ebp,0x6
1000657b:	89 da                	mov    edx,ebx
1000657d:	c1 ea 0e             	shr    edx,0xe
10006580:	89 d8                	mov    eax,ebx
10006582:	c1 e8 16             	shr    eax,0x16
10006585:	8d 3c 9d 00 00 00 00 	lea    edi,[ebx*4+0x0]
1000658c:	81 e7 fc 03 00 00    	and    edi,0x3fc
10006592:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10006598:	81 e2 fc 03 00 00    	and    edx,0x3fc
1000659e:	25 fc 03 00 00       	and    eax,0x3fc
100065a3:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
100065a7:	03 84 14 58 04 00 00 	add    eax,DWORD PTR [esp+edx*1+0x458]
100065ae:	33 84 2c 58 08 00 00 	xor    eax,DWORD PTR [esp+ebp*1+0x858]
100065b5:	33 b4 24 6c 10 00 00 	xor    esi,DWORD PTR [esp+0x106c]
100065bc:	03 84 3c 58 0c 00 00 	add    eax,DWORD PTR [esp+edi*1+0xc58]
100065c3:	89 c2                	mov    edx,eax
100065c5:	31 f2                	xor    edx,esi
100065c7:	89 d7                	mov    edi,edx
100065c9:	c1 ef 06             	shr    edi,0x6
100065cc:	89 d5                	mov    ebp,edx
100065ce:	c1 ed 0e             	shr    ebp,0xe
100065d1:	89 d0                	mov    eax,edx
100065d3:	c1 e8 16             	shr    eax,0x16
100065d6:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
100065dd:	81 e6 fc 03 00 00    	and    esi,0x3fc
100065e3:	81 e7 fc 03 00 00    	and    edi,0x3fc
100065e9:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100065ef:	25 fc 03 00 00       	and    eax,0x3fc
100065f4:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
100065f8:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
100065ff:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
10006606:	33 9c 24 70 10 00 00 	xor    ebx,DWORD PTR [esp+0x1070]
1000660d:	03 84 34 58 0c 00 00 	add    eax,DWORD PTR [esp+esi*1+0xc58]
10006614:	31 c3                	xor    ebx,eax
10006616:	89 df                	mov    edi,ebx
10006618:	c1 ef 06             	shr    edi,0x6
1000661b:	89 dd                	mov    ebp,ebx
1000661d:	c1 ed 0e             	shr    ebp,0xe
10006620:	89 d8                	mov    eax,ebx
10006622:	c1 e8 16             	shr    eax,0x16
10006625:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
1000662c:	81 e6 fc 03 00 00    	and    esi,0x3fc
10006632:	81 e7 fc 03 00 00    	and    edi,0x3fc
10006638:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000663e:	25 fc 03 00 00       	and    eax,0x3fc
10006643:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10006647:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
1000664e:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
10006655:	33 94 24 74 10 00 00 	xor    edx,DWORD PTR [esp+0x1074]
1000665c:	03 84 34 58 0c 00 00 	add    eax,DWORD PTR [esp+esi*1+0xc58]
10006663:	31 c2                	xor    edx,eax
10006665:	89 d7                	mov    edi,edx
10006667:	c1 ef 06             	shr    edi,0x6
1000666a:	89 d5                	mov    ebp,edx
1000666c:	c1 ed 0e             	shr    ebp,0xe
1000666f:	89 d0                	mov    eax,edx
10006671:	c1 e8 16             	shr    eax,0x16
10006674:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
1000667b:	81 e6 fc 03 00 00    	and    esi,0x3fc
10006681:	81 e7 fc 03 00 00    	and    edi,0x3fc
10006687:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000668d:	25 fc 03 00 00       	and    eax,0x3fc
10006692:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10006696:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
1000669d:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
100066a4:	33 9c 24 78 10 00 00 	xor    ebx,DWORD PTR [esp+0x1078]
100066ab:	03 84 34 58 0c 00 00 	add    eax,DWORD PTR [esp+esi*1+0xc58]
100066b2:	31 c3                	xor    ebx,eax
100066b4:	89 df                	mov    edi,ebx
100066b6:	c1 ef 06             	shr    edi,0x6
100066b9:	89 dd                	mov    ebp,ebx
100066bb:	c1 ed 0e             	shr    ebp,0xe
100066be:	89 d8                	mov    eax,ebx
100066c0:	c1 e8 16             	shr    eax,0x16
100066c3:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
100066ca:	81 e6 fc 03 00 00    	and    esi,0x3fc
100066d0:	81 e7 fc 03 00 00    	and    edi,0x3fc
100066d6:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100066dc:	25 fc 03 00 00       	and    eax,0x3fc
100066e1:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
100066e5:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
100066ec:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
100066f3:	33 94 24 7c 10 00 00 	xor    edx,DWORD PTR [esp+0x107c]
100066fa:	03 84 34 58 0c 00 00 	add    eax,DWORD PTR [esp+esi*1+0xc58]
10006701:	31 c2                	xor    edx,eax
10006703:	89 d7                	mov    edi,edx
10006705:	c1 ef 06             	shr    edi,0x6
10006708:	89 d5                	mov    ebp,edx
1000670a:	c1 ed 0e             	shr    ebp,0xe
1000670d:	89 d0                	mov    eax,edx
1000670f:	c1 e8 16             	shr    eax,0x16
10006712:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10006719:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000671f:	81 e7 fc 03 00 00    	and    edi,0x3fc
10006725:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000672b:	25 fc 03 00 00       	and    eax,0x3fc
10006730:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10006734:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
1000673b:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
10006742:	33 9c 24 80 10 00 00 	xor    ebx,DWORD PTR [esp+0x1080]
10006749:	03 84 34 58 0c 00 00 	add    eax,DWORD PTR [esp+esi*1+0xc58]
10006750:	31 c3                	xor    ebx,eax
10006752:	89 df                	mov    edi,ebx
10006754:	c1 ef 06             	shr    edi,0x6
10006757:	89 dd                	mov    ebp,ebx
10006759:	c1 ed 0e             	shr    ebp,0xe
1000675c:	89 d8                	mov    eax,ebx
1000675e:	c1 e8 16             	shr    eax,0x16
10006761:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
10006768:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000676e:	81 e7 fc 03 00 00    	and    edi,0x3fc
10006774:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000677a:	25 fc 03 00 00       	and    eax,0x3fc
1000677f:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10006783:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
1000678a:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
10006791:	33 94 24 84 10 00 00 	xor    edx,DWORD PTR [esp+0x1084]
10006798:	03 84 34 58 0c 00 00 	add    eax,DWORD PTR [esp+esi*1+0xc58]
1000679f:	31 d0                	xor    eax,edx
100067a1:	89 c7                	mov    edi,eax
100067a3:	c1 ef 06             	shr    edi,0x6
100067a6:	89 c5                	mov    ebp,eax
100067a8:	c1 ed 0e             	shr    ebp,0xe
100067ab:	89 c2                	mov    edx,eax
100067ad:	c1 ea 16             	shr    edx,0x16
100067b0:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
100067b7:	81 e6 fc 03 00 00    	and    esi,0x3fc
100067bd:	81 e7 fc 03 00 00    	and    edi,0x3fc
100067c3:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100067c9:	81 e2 fc 03 00 00    	and    edx,0x3fc
100067cf:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
100067d3:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
100067da:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
100067e1:	33 9c 24 88 10 00 00 	xor    ebx,DWORD PTR [esp+0x1088]
100067e8:	03 94 34 58 0c 00 00 	add    edx,DWORD PTR [esp+esi*1+0xc58]
100067ef:	31 d3                	xor    ebx,edx
100067f1:	89 df                	mov    edi,ebx
100067f3:	c1 ef 06             	shr    edi,0x6
100067f6:	89 dd                	mov    ebp,ebx
100067f8:	c1 ed 0e             	shr    ebp,0xe
100067fb:	89 da                	mov    edx,ebx
100067fd:	c1 ea 16             	shr    edx,0x16
10006800:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
10006807:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000680d:	81 e7 fc 03 00 00    	and    edi,0x3fc
10006813:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10006819:	81 e2 fc 03 00 00    	and    edx,0x3fc
1000681f:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10006823:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
1000682a:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10006831:	33 84 24 8c 10 00 00 	xor    eax,DWORD PTR [esp+0x108c]
10006838:	03 94 34 58 0c 00 00 	add    edx,DWORD PTR [esp+esi*1+0xc58]
1000683f:	31 d0                	xor    eax,edx
10006841:	89 c7                	mov    edi,eax
10006843:	c1 ef 06             	shr    edi,0x6
10006846:	89 c5                	mov    ebp,eax
10006848:	c1 ed 0e             	shr    ebp,0xe
1000684b:	89 c2                	mov    edx,eax
1000684d:	c1 ea 16             	shr    edx,0x16
10006850:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10006857:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000685d:	81 e7 fc 03 00 00    	and    edi,0x3fc
10006863:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10006869:	81 e2 fc 03 00 00    	and    edx,0x3fc
1000686f:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10006873:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
1000687a:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10006881:	33 9c 24 90 10 00 00 	xor    ebx,DWORD PTR [esp+0x1090]
10006888:	03 94 34 58 0c 00 00 	add    edx,DWORD PTR [esp+esi*1+0xc58]
1000688f:	31 d3                	xor    ebx,edx
10006891:	89 df                	mov    edi,ebx
10006893:	c1 ef 06             	shr    edi,0x6
10006896:	89 dd                	mov    ebp,ebx
10006898:	c1 ed 0e             	shr    ebp,0xe
1000689b:	89 da                	mov    edx,ebx
1000689d:	c1 ea 16             	shr    edx,0x16
100068a0:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
100068a7:	81 e6 fc 03 00 00    	and    esi,0x3fc
100068ad:	81 e7 fc 03 00 00    	and    edi,0x3fc
100068b3:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100068b9:	81 e2 fc 03 00 00    	and    edx,0x3fc
100068bf:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
100068c3:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
100068ca:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
100068d1:	33 84 24 94 10 00 00 	xor    eax,DWORD PTR [esp+0x1094]
100068d8:	03 94 34 58 0c 00 00 	add    edx,DWORD PTR [esp+esi*1+0xc58]
100068df:	31 d0                	xor    eax,edx
100068e1:	89 c7                	mov    edi,eax
100068e3:	c1 ef 06             	shr    edi,0x6
100068e6:	89 c5                	mov    ebp,eax
100068e8:	c1 ed 0e             	shr    ebp,0xe
100068eb:	89 c2                	mov    edx,eax
100068ed:	c1 ea 16             	shr    edx,0x16
100068f0:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
100068f7:	81 e6 fc 03 00 00    	and    esi,0x3fc
100068fd:	81 e7 fc 03 00 00    	and    edi,0x3fc
10006903:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10006909:	81 e2 fc 03 00 00    	and    edx,0x3fc
1000690f:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10006913:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
1000691a:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10006921:	33 9c 24 98 10 00 00 	xor    ebx,DWORD PTR [esp+0x1098]
10006928:	03 94 34 58 0c 00 00 	add    edx,DWORD PTR [esp+esi*1+0xc58]
1000692f:	31 d3                	xor    ebx,edx
10006931:	33 84 24 9c 10 00 00 	xor    eax,DWORD PTR [esp+0x109c]
10006938:	89 41 f8             	mov    DWORD PTR [ecx-0x8],eax
1000693b:	89 59 fc             	mov    DWORD PTR [ecx-0x4],ebx
1000693e:	8d 94 24 58 10 00 00 	lea    edx,[esp+0x1058]
10006945:	39 d1                	cmp    ecx,edx
10006947:	0f 85 a4 f5 ff ff    	jne    10005ef1 <_crypt_blowfish_rn+0x695>
1000694d:	8b 84 24 a0 10 00 00 	mov    eax,DWORD PTR [esp+0x10a0]
10006954:	31 84 24 58 10 00 00 	xor    DWORD PTR [esp+0x1058],eax
1000695b:	8b 84 24 a4 10 00 00 	mov    eax,DWORD PTR [esp+0x10a4]
10006962:	31 84 24 5c 10 00 00 	xor    DWORD PTR [esp+0x105c],eax
10006969:	8b 84 24 a8 10 00 00 	mov    eax,DWORD PTR [esp+0x10a8]
10006970:	31 84 24 60 10 00 00 	xor    DWORD PTR [esp+0x1060],eax
10006977:	8b 84 24 ac 10 00 00 	mov    eax,DWORD PTR [esp+0x10ac]
1000697e:	31 84 24 64 10 00 00 	xor    DWORD PTR [esp+0x1064],eax
10006985:	8b 84 24 b0 10 00 00 	mov    eax,DWORD PTR [esp+0x10b0]
1000698c:	31 84 24 68 10 00 00 	xor    DWORD PTR [esp+0x1068],eax
10006993:	8b 84 24 b4 10 00 00 	mov    eax,DWORD PTR [esp+0x10b4]
1000699a:	31 84 24 6c 10 00 00 	xor    DWORD PTR [esp+0x106c],eax
100069a1:	8b 84 24 b8 10 00 00 	mov    eax,DWORD PTR [esp+0x10b8]
100069a8:	31 84 24 70 10 00 00 	xor    DWORD PTR [esp+0x1070],eax
100069af:	8b 84 24 bc 10 00 00 	mov    eax,DWORD PTR [esp+0x10bc]
100069b6:	31 84 24 74 10 00 00 	xor    DWORD PTR [esp+0x1074],eax
100069bd:	8b 84 24 c0 10 00 00 	mov    eax,DWORD PTR [esp+0x10c0]
100069c4:	31 84 24 78 10 00 00 	xor    DWORD PTR [esp+0x1078],eax
100069cb:	8b 84 24 c4 10 00 00 	mov    eax,DWORD PTR [esp+0x10c4]
100069d2:	31 84 24 7c 10 00 00 	xor    DWORD PTR [esp+0x107c],eax
100069d9:	8b 84 24 c8 10 00 00 	mov    eax,DWORD PTR [esp+0x10c8]
100069e0:	31 84 24 80 10 00 00 	xor    DWORD PTR [esp+0x1080],eax
100069e7:	8b 84 24 cc 10 00 00 	mov    eax,DWORD PTR [esp+0x10cc]
100069ee:	31 84 24 84 10 00 00 	xor    DWORD PTR [esp+0x1084],eax
100069f5:	8b 84 24 d0 10 00 00 	mov    eax,DWORD PTR [esp+0x10d0]
100069fc:	31 84 24 88 10 00 00 	xor    DWORD PTR [esp+0x1088],eax
10006a03:	8b 84 24 d4 10 00 00 	mov    eax,DWORD PTR [esp+0x10d4]
10006a0a:	31 84 24 8c 10 00 00 	xor    DWORD PTR [esp+0x108c],eax
10006a11:	8b 84 24 d8 10 00 00 	mov    eax,DWORD PTR [esp+0x10d8]
10006a18:	31 84 24 90 10 00 00 	xor    DWORD PTR [esp+0x1090],eax
10006a1f:	8b 84 24 dc 10 00 00 	mov    eax,DWORD PTR [esp+0x10dc]
10006a26:	31 84 24 94 10 00 00 	xor    DWORD PTR [esp+0x1094],eax
10006a2d:	8b 84 24 e0 10 00 00 	mov    eax,DWORD PTR [esp+0x10e0]
10006a34:	31 84 24 98 10 00 00 	xor    DWORD PTR [esp+0x1098],eax
10006a3b:	8b 84 24 e4 10 00 00 	mov    eax,DWORD PTR [esp+0x10e4]
10006a42:	31 84 24 9c 10 00 00 	xor    DWORD PTR [esp+0x109c],eax
10006a49:	8d 9c 24 58 10 00 00 	lea    ebx,[esp+0x1058]
10006a50:	b9 00 00 00 00       	mov    ecx,0x0
10006a55:	b8 00 00 00 00       	mov    eax,0x0
10006a5a:	83 c3 08             	add    ebx,0x8
10006a5d:	33 84 24 58 10 00 00 	xor    eax,DWORD PTR [esp+0x1058]
10006a64:	89 c7                	mov    edi,eax
10006a66:	c1 ef 06             	shr    edi,0x6
10006a69:	89 c5                	mov    ebp,eax
10006a6b:	c1 ed 0e             	shr    ebp,0xe
10006a6e:	89 c2                	mov    edx,eax
10006a70:	c1 ea 16             	shr    edx,0x16
10006a73:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10006a7a:	81 e6 fc 03 00 00    	and    esi,0x3fc
10006a80:	81 e7 fc 03 00 00    	and    edi,0x3fc
10006a86:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10006a8c:	81 e2 fc 03 00 00    	and    edx,0x3fc
10006a92:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10006a96:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10006a9d:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10006aa4:	03 94 34 58 0c 00 00 	add    edx,DWORD PTR [esp+esi*1+0xc58]
10006aab:	33 94 24 5c 10 00 00 	xor    edx,DWORD PTR [esp+0x105c]
10006ab2:	31 ca                	xor    edx,ecx
10006ab4:	89 d5                	mov    ebp,edx
10006ab6:	c1 ed 06             	shr    ebp,0x6
10006ab9:	89 d6                	mov    esi,edx
10006abb:	c1 ee 0e             	shr    esi,0xe
10006abe:	89 d1                	mov    ecx,edx
10006ac0:	c1 e9 16             	shr    ecx,0x16
10006ac3:	8d 3c 95 00 00 00 00 	lea    edi,[edx*4+0x0]
10006aca:	81 e7 fc 03 00 00    	and    edi,0x3fc
10006ad0:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10006ad6:	81 e6 fc 03 00 00    	and    esi,0x3fc
10006adc:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10006ae2:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10006ae6:	03 8c 34 58 04 00 00 	add    ecx,DWORD PTR [esp+esi*1+0x458]
10006aed:	33 8c 2c 58 08 00 00 	xor    ecx,DWORD PTR [esp+ebp*1+0x858]
10006af4:	33 84 24 60 10 00 00 	xor    eax,DWORD PTR [esp+0x1060]
10006afb:	03 8c 3c 58 0c 00 00 	add    ecx,DWORD PTR [esp+edi*1+0xc58]
10006b02:	31 c8                	xor    eax,ecx
10006b04:	89 c7                	mov    edi,eax
10006b06:	c1 ef 06             	shr    edi,0x6
10006b09:	89 c5                	mov    ebp,eax
10006b0b:	c1 ed 0e             	shr    ebp,0xe
10006b0e:	89 c1                	mov    ecx,eax
10006b10:	c1 e9 16             	shr    ecx,0x16
10006b13:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10006b1a:	81 e6 fc 03 00 00    	and    esi,0x3fc
10006b20:	81 e7 fc 03 00 00    	and    edi,0x3fc
10006b26:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10006b2c:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10006b32:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10006b36:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10006b3d:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10006b44:	33 94 24 64 10 00 00 	xor    edx,DWORD PTR [esp+0x1064]
10006b4b:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10006b52:	31 d1                	xor    ecx,edx
10006b54:	89 cd                	mov    ebp,ecx
10006b56:	c1 ed 06             	shr    ebp,0x6
10006b59:	89 ce                	mov    esi,ecx
10006b5b:	c1 ee 0e             	shr    esi,0xe
10006b5e:	89 ca                	mov    edx,ecx
10006b60:	c1 ea 16             	shr    edx,0x16
10006b63:	8d 3c 8d 00 00 00 00 	lea    edi,[ecx*4+0x0]
10006b6a:	81 e7 fc 03 00 00    	and    edi,0x3fc
10006b70:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10006b76:	81 e6 fc 03 00 00    	and    esi,0x3fc
10006b7c:	81 e2 fc 03 00 00    	and    edx,0x3fc
10006b82:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10006b86:	03 94 34 58 04 00 00 	add    edx,DWORD PTR [esp+esi*1+0x458]
10006b8d:	33 94 2c 58 08 00 00 	xor    edx,DWORD PTR [esp+ebp*1+0x858]
10006b94:	33 84 24 68 10 00 00 	xor    eax,DWORD PTR [esp+0x1068]
10006b9b:	89 d6                	mov    esi,edx
10006b9d:	03 b4 3c 58 0c 00 00 	add    esi,DWORD PTR [esp+edi*1+0xc58]
10006ba4:	31 c6                	xor    esi,eax
10006ba6:	89 f2                	mov    edx,esi
10006ba8:	c1 ea 06             	shr    edx,0x6
10006bab:	89 f5                	mov    ebp,esi
10006bad:	c1 ed 0e             	shr    ebp,0xe
10006bb0:	89 f0                	mov    eax,esi
10006bb2:	c1 e8 16             	shr    eax,0x16
10006bb5:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
10006bbc:	81 e7 fc 03 00 00    	and    edi,0x3fc
10006bc2:	81 e2 fc 03 00 00    	and    edx,0x3fc
10006bc8:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10006bce:	25 fc 03 00 00       	and    eax,0x3fc
10006bd3:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10006bd7:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
10006bde:	33 84 14 58 08 00 00 	xor    eax,DWORD PTR [esp+edx*1+0x858]
10006be5:	33 8c 24 6c 10 00 00 	xor    ecx,DWORD PTR [esp+0x106c]
10006bec:	03 84 3c 58 0c 00 00 	add    eax,DWORD PTR [esp+edi*1+0xc58]
10006bf3:	31 c8                	xor    eax,ecx
10006bf5:	89 c7                	mov    edi,eax
10006bf7:	c1 ef 06             	shr    edi,0x6
10006bfa:	89 c5                	mov    ebp,eax
10006bfc:	c1 ed 0e             	shr    ebp,0xe
10006bff:	89 c2                	mov    edx,eax
10006c01:	c1 ea 16             	shr    edx,0x16
10006c04:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
10006c0b:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10006c11:	81 e7 fc 03 00 00    	and    edi,0x3fc
10006c17:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10006c1d:	81 e2 fc 03 00 00    	and    edx,0x3fc
10006c23:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10006c27:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10006c2e:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10006c35:	33 b4 24 70 10 00 00 	xor    esi,DWORD PTR [esp+0x1070]
10006c3c:	03 94 0c 58 0c 00 00 	add    edx,DWORD PTR [esp+ecx*1+0xc58]
10006c43:	31 f2                	xor    edx,esi
10006c45:	89 d7                	mov    edi,edx
10006c47:	c1 ef 06             	shr    edi,0x6
10006c4a:	89 d5                	mov    ebp,edx
10006c4c:	c1 ed 0e             	shr    ebp,0xe
10006c4f:	89 d1                	mov    ecx,edx
10006c51:	c1 e9 16             	shr    ecx,0x16
10006c54:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10006c5b:	81 e6 fc 03 00 00    	and    esi,0x3fc
10006c61:	81 e7 fc 03 00 00    	and    edi,0x3fc
10006c67:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10006c6d:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10006c73:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10006c77:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10006c7e:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10006c85:	33 84 24 74 10 00 00 	xor    eax,DWORD PTR [esp+0x1074]
10006c8c:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10006c93:	31 c8                	xor    eax,ecx
10006c95:	89 c7                	mov    edi,eax
10006c97:	c1 ef 06             	shr    edi,0x6
10006c9a:	89 c5                	mov    ebp,eax
10006c9c:	c1 ed 0e             	shr    ebp,0xe
10006c9f:	89 c1                	mov    ecx,eax
10006ca1:	c1 e9 16             	shr    ecx,0x16
10006ca4:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10006cab:	81 e6 fc 03 00 00    	and    esi,0x3fc
10006cb1:	81 e7 fc 03 00 00    	and    edi,0x3fc
10006cb7:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10006cbd:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10006cc3:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10006cc7:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10006cce:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10006cd5:	33 94 24 78 10 00 00 	xor    edx,DWORD PTR [esp+0x1078]
10006cdc:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10006ce3:	31 ca                	xor    edx,ecx
10006ce5:	89 d7                	mov    edi,edx
10006ce7:	c1 ef 06             	shr    edi,0x6
10006cea:	89 d5                	mov    ebp,edx
10006cec:	c1 ed 0e             	shr    ebp,0xe
10006cef:	89 d1                	mov    ecx,edx
10006cf1:	c1 e9 16             	shr    ecx,0x16
10006cf4:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10006cfb:	81 e6 fc 03 00 00    	and    esi,0x3fc
10006d01:	81 e7 fc 03 00 00    	and    edi,0x3fc
10006d07:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10006d0d:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10006d13:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10006d17:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10006d1e:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10006d25:	33 84 24 7c 10 00 00 	xor    eax,DWORD PTR [esp+0x107c]
10006d2c:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10006d33:	31 c8                	xor    eax,ecx
10006d35:	89 c7                	mov    edi,eax
10006d37:	c1 ef 06             	shr    edi,0x6
10006d3a:	89 c5                	mov    ebp,eax
10006d3c:	c1 ed 0e             	shr    ebp,0xe
10006d3f:	89 c1                	mov    ecx,eax
10006d41:	c1 e9 16             	shr    ecx,0x16
10006d44:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10006d4b:	81 e6 fc 03 00 00    	and    esi,0x3fc
10006d51:	81 e7 fc 03 00 00    	and    edi,0x3fc
10006d57:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10006d5d:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10006d63:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10006d67:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10006d6e:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10006d75:	33 94 24 80 10 00 00 	xor    edx,DWORD PTR [esp+0x1080]
10006d7c:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10006d83:	31 ca                	xor    edx,ecx
10006d85:	89 d7                	mov    edi,edx
10006d87:	c1 ef 06             	shr    edi,0x6
10006d8a:	89 d5                	mov    ebp,edx
10006d8c:	c1 ed 0e             	shr    ebp,0xe
10006d8f:	89 d1                	mov    ecx,edx
10006d91:	c1 e9 16             	shr    ecx,0x16
10006d94:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10006d9b:	81 e6 fc 03 00 00    	and    esi,0x3fc
10006da1:	81 e7 fc 03 00 00    	and    edi,0x3fc
10006da7:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10006dad:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10006db3:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10006db7:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10006dbe:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10006dc5:	33 84 24 84 10 00 00 	xor    eax,DWORD PTR [esp+0x1084]
10006dcc:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10006dd3:	31 c8                	xor    eax,ecx
10006dd5:	89 c7                	mov    edi,eax
10006dd7:	c1 ef 06             	shr    edi,0x6
10006dda:	89 c5                	mov    ebp,eax
10006ddc:	c1 ed 0e             	shr    ebp,0xe
10006ddf:	89 c1                	mov    ecx,eax
10006de1:	c1 e9 16             	shr    ecx,0x16
10006de4:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10006deb:	81 e6 fc 03 00 00    	and    esi,0x3fc
10006df1:	81 e7 fc 03 00 00    	and    edi,0x3fc
10006df7:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10006dfd:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10006e03:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10006e07:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10006e0e:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10006e15:	33 94 24 88 10 00 00 	xor    edx,DWORD PTR [esp+0x1088]
10006e1c:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10006e23:	31 ca                	xor    edx,ecx
10006e25:	89 d7                	mov    edi,edx
10006e27:	c1 ef 06             	shr    edi,0x6
10006e2a:	89 d5                	mov    ebp,edx
10006e2c:	c1 ed 0e             	shr    ebp,0xe
10006e2f:	89 d1                	mov    ecx,edx
10006e31:	c1 e9 16             	shr    ecx,0x16
10006e34:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10006e3b:	81 e6 fc 03 00 00    	and    esi,0x3fc
10006e41:	81 e7 fc 03 00 00    	and    edi,0x3fc
10006e47:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10006e4d:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10006e53:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10006e57:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10006e5e:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10006e65:	33 84 24 8c 10 00 00 	xor    eax,DWORD PTR [esp+0x108c]
10006e6c:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10006e73:	31 c8                	xor    eax,ecx
10006e75:	89 c7                	mov    edi,eax
10006e77:	c1 ef 06             	shr    edi,0x6
10006e7a:	89 c5                	mov    ebp,eax
10006e7c:	c1 ed 0e             	shr    ebp,0xe
10006e7f:	89 c1                	mov    ecx,eax
10006e81:	c1 e9 16             	shr    ecx,0x16
10006e84:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10006e8b:	81 e6 fc 03 00 00    	and    esi,0x3fc
10006e91:	81 e7 fc 03 00 00    	and    edi,0x3fc
10006e97:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10006e9d:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10006ea3:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10006ea7:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10006eae:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10006eb5:	33 94 24 90 10 00 00 	xor    edx,DWORD PTR [esp+0x1090]
10006ebc:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10006ec3:	31 ca                	xor    edx,ecx
10006ec5:	89 d7                	mov    edi,edx
10006ec7:	c1 ef 06             	shr    edi,0x6
10006eca:	89 d5                	mov    ebp,edx
10006ecc:	c1 ed 0e             	shr    ebp,0xe
10006ecf:	89 d6                	mov    esi,edx
10006ed1:	c1 ee 16             	shr    esi,0x16
10006ed4:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
10006edb:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10006ee1:	81 e7 fc 03 00 00    	and    edi,0x3fc
10006ee7:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10006eed:	81 e6 fc 03 00 00    	and    esi,0x3fc
10006ef3:	8b 74 34 58          	mov    esi,DWORD PTR [esp+esi*1+0x58]
10006ef7:	03 b4 2c 58 04 00 00 	add    esi,DWORD PTR [esp+ebp*1+0x458]
10006efe:	33 b4 3c 58 08 00 00 	xor    esi,DWORD PTR [esp+edi*1+0x858]
10006f05:	33 84 24 94 10 00 00 	xor    eax,DWORD PTR [esp+0x1094]
10006f0c:	03 b4 0c 58 0c 00 00 	add    esi,DWORD PTR [esp+ecx*1+0xc58]
10006f13:	31 f0                	xor    eax,esi
10006f15:	89 c5                	mov    ebp,eax
10006f17:	c1 ed 06             	shr    ebp,0x6
10006f1a:	89 c1                	mov    ecx,eax
10006f1c:	c1 e9 0e             	shr    ecx,0xe
10006f1f:	89 c6                	mov    esi,eax
10006f21:	c1 ee 16             	shr    esi,0x16
10006f24:	8d 3c 85 00 00 00 00 	lea    edi,[eax*4+0x0]
10006f2b:	81 e7 fc 03 00 00    	and    edi,0x3fc
10006f31:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10006f37:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10006f3d:	81 e6 fc 03 00 00    	and    esi,0x3fc
10006f43:	8b 74 34 58          	mov    esi,DWORD PTR [esp+esi*1+0x58]
10006f47:	03 b4 0c 58 04 00 00 	add    esi,DWORD PTR [esp+ecx*1+0x458]
10006f4e:	33 b4 2c 58 08 00 00 	xor    esi,DWORD PTR [esp+ebp*1+0x858]
10006f55:	33 94 24 98 10 00 00 	xor    edx,DWORD PTR [esp+0x1098]
10006f5c:	03 b4 3c 58 0c 00 00 	add    esi,DWORD PTR [esp+edi*1+0xc58]
10006f63:	89 f1                	mov    ecx,esi
10006f65:	31 d1                	xor    ecx,edx
10006f67:	33 84 24 9c 10 00 00 	xor    eax,DWORD PTR [esp+0x109c]
10006f6e:	89 43 f8             	mov    DWORD PTR [ebx-0x8],eax
10006f71:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
10006f74:	8d b4 24 a0 10 00 00 	lea    esi,[esp+0x10a0]
10006f7b:	39 f3                	cmp    ebx,esi
10006f7d:	0f 85 d7 fa ff ff    	jne    10006a5a <_crypt_blowfish_rn+0x11fe>
10006f83:	8d 5c 24 58          	lea    ebx,[esp+0x58]
10006f87:	83 c3 08             	add    ebx,0x8
10006f8a:	33 84 24 58 10 00 00 	xor    eax,DWORD PTR [esp+0x1058]
10006f91:	89 c7                	mov    edi,eax
10006f93:	c1 ef 06             	shr    edi,0x6
10006f96:	89 c5                	mov    ebp,eax
10006f98:	c1 ed 0e             	shr    ebp,0xe
10006f9b:	89 c2                	mov    edx,eax
10006f9d:	c1 ea 16             	shr    edx,0x16
10006fa0:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10006fa7:	81 e6 fc 03 00 00    	and    esi,0x3fc
10006fad:	81 e7 fc 03 00 00    	and    edi,0x3fc
10006fb3:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10006fb9:	81 e2 fc 03 00 00    	and    edx,0x3fc
10006fbf:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10006fc3:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10006fca:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10006fd1:	03 94 34 58 0c 00 00 	add    edx,DWORD PTR [esp+esi*1+0xc58]
10006fd8:	33 94 24 5c 10 00 00 	xor    edx,DWORD PTR [esp+0x105c]
10006fdf:	31 ca                	xor    edx,ecx
10006fe1:	89 d7                	mov    edi,edx
10006fe3:	c1 ef 06             	shr    edi,0x6
10006fe6:	89 d5                	mov    ebp,edx
10006fe8:	c1 ed 0e             	shr    ebp,0xe
10006feb:	89 d1                	mov    ecx,edx
10006fed:	c1 e9 16             	shr    ecx,0x16
10006ff0:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10006ff7:	81 e6 fc 03 00 00    	and    esi,0x3fc
10006ffd:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007003:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007009:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000700f:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10007013:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
1000701a:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10007021:	33 84 24 60 10 00 00 	xor    eax,DWORD PTR [esp+0x1060]
10007028:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
1000702f:	31 c1                	xor    ecx,eax
10007031:	89 cd                	mov    ebp,ecx
10007033:	c1 ed 06             	shr    ebp,0x6
10007036:	89 c8                	mov    eax,ecx
10007038:	c1 e8 0e             	shr    eax,0xe
1000703b:	89 ce                	mov    esi,ecx
1000703d:	c1 ee 16             	shr    esi,0x16
10007040:	8d 3c 8d 00 00 00 00 	lea    edi,[ecx*4+0x0]
10007047:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000704d:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007053:	25 fc 03 00 00       	and    eax,0x3fc
10007058:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000705e:	8b 74 34 58          	mov    esi,DWORD PTR [esp+esi*1+0x58]
10007062:	03 b4 04 58 04 00 00 	add    esi,DWORD PTR [esp+eax*1+0x458]
10007069:	33 b4 2c 58 08 00 00 	xor    esi,DWORD PTR [esp+ebp*1+0x858]
10007070:	33 94 24 64 10 00 00 	xor    edx,DWORD PTR [esp+0x1064]
10007077:	03 b4 3c 58 0c 00 00 	add    esi,DWORD PTR [esp+edi*1+0xc58]
1000707e:	31 d6                	xor    esi,edx
10007080:	89 f5                	mov    ebp,esi
10007082:	c1 ed 06             	shr    ebp,0x6
10007085:	89 f2                	mov    edx,esi
10007087:	c1 ea 0e             	shr    edx,0xe
1000708a:	89 f0                	mov    eax,esi
1000708c:	c1 e8 16             	shr    eax,0x16
1000708f:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
10007096:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000709c:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100070a2:	81 e2 fc 03 00 00    	and    edx,0x3fc
100070a8:	25 fc 03 00 00       	and    eax,0x3fc
100070ad:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
100070b1:	03 84 14 58 04 00 00 	add    eax,DWORD PTR [esp+edx*1+0x458]
100070b8:	33 84 2c 58 08 00 00 	xor    eax,DWORD PTR [esp+ebp*1+0x858]
100070bf:	33 8c 24 68 10 00 00 	xor    ecx,DWORD PTR [esp+0x1068]
100070c6:	03 84 3c 58 0c 00 00 	add    eax,DWORD PTR [esp+edi*1+0xc58]
100070cd:	31 c1                	xor    ecx,eax
100070cf:	89 ca                	mov    edx,ecx
100070d1:	c1 ea 06             	shr    edx,0x6
100070d4:	89 cd                	mov    ebp,ecx
100070d6:	c1 ed 0e             	shr    ebp,0xe
100070d9:	89 c8                	mov    eax,ecx
100070db:	c1 e8 16             	shr    eax,0x16
100070de:	8d 3c 8d 00 00 00 00 	lea    edi,[ecx*4+0x0]
100070e5:	81 e7 fc 03 00 00    	and    edi,0x3fc
100070eb:	81 e2 fc 03 00 00    	and    edx,0x3fc
100070f1:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100070f7:	25 fc 03 00 00       	and    eax,0x3fc
100070fc:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10007100:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
10007107:	33 84 14 58 08 00 00 	xor    eax,DWORD PTR [esp+edx*1+0x858]
1000710e:	33 b4 24 6c 10 00 00 	xor    esi,DWORD PTR [esp+0x106c]
10007115:	03 84 3c 58 0c 00 00 	add    eax,DWORD PTR [esp+edi*1+0xc58]
1000711c:	31 f0                	xor    eax,esi
1000711e:	89 c7                	mov    edi,eax
10007120:	c1 ef 06             	shr    edi,0x6
10007123:	89 c5                	mov    ebp,eax
10007125:	c1 ed 0e             	shr    ebp,0xe
10007128:	89 c2                	mov    edx,eax
1000712a:	c1 ea 16             	shr    edx,0x16
1000712d:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10007134:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000713a:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007140:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007146:	81 e2 fc 03 00 00    	and    edx,0x3fc
1000714c:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10007150:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10007157:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
1000715e:	33 8c 24 70 10 00 00 	xor    ecx,DWORD PTR [esp+0x1070]
10007165:	03 94 34 58 0c 00 00 	add    edx,DWORD PTR [esp+esi*1+0xc58]
1000716c:	31 ca                	xor    edx,ecx
1000716e:	89 d7                	mov    edi,edx
10007170:	c1 ef 06             	shr    edi,0x6
10007173:	89 d5                	mov    ebp,edx
10007175:	c1 ed 0e             	shr    ebp,0xe
10007178:	89 d1                	mov    ecx,edx
1000717a:	c1 e9 16             	shr    ecx,0x16
1000717d:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10007184:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000718a:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007190:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007196:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000719c:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
100071a0:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
100071a7:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
100071ae:	33 84 24 74 10 00 00 	xor    eax,DWORD PTR [esp+0x1074]
100071b5:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
100071bc:	31 c8                	xor    eax,ecx
100071be:	89 c7                	mov    edi,eax
100071c0:	c1 ef 06             	shr    edi,0x6
100071c3:	89 c5                	mov    ebp,eax
100071c5:	c1 ed 0e             	shr    ebp,0xe
100071c8:	89 c1                	mov    ecx,eax
100071ca:	c1 e9 16             	shr    ecx,0x16
100071cd:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
100071d4:	81 e6 fc 03 00 00    	and    esi,0x3fc
100071da:	81 e7 fc 03 00 00    	and    edi,0x3fc
100071e0:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100071e6:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100071ec:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
100071f0:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
100071f7:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
100071fe:	33 94 24 78 10 00 00 	xor    edx,DWORD PTR [esp+0x1078]
10007205:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
1000720c:	31 ca                	xor    edx,ecx
1000720e:	89 d7                	mov    edi,edx
10007210:	c1 ef 06             	shr    edi,0x6
10007213:	89 d5                	mov    ebp,edx
10007215:	c1 ed 0e             	shr    ebp,0xe
10007218:	89 d1                	mov    ecx,edx
1000721a:	c1 e9 16             	shr    ecx,0x16
1000721d:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10007224:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000722a:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007230:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007236:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000723c:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10007240:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10007247:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
1000724e:	33 84 24 7c 10 00 00 	xor    eax,DWORD PTR [esp+0x107c]
10007255:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
1000725c:	31 c8                	xor    eax,ecx
1000725e:	89 c7                	mov    edi,eax
10007260:	c1 ef 06             	shr    edi,0x6
10007263:	89 c5                	mov    ebp,eax
10007265:	c1 ed 0e             	shr    ebp,0xe
10007268:	89 c1                	mov    ecx,eax
1000726a:	c1 e9 16             	shr    ecx,0x16
1000726d:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10007274:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000727a:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007280:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007286:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000728c:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10007290:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10007297:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
1000729e:	33 94 24 80 10 00 00 	xor    edx,DWORD PTR [esp+0x1080]
100072a5:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
100072ac:	31 ca                	xor    edx,ecx
100072ae:	89 d7                	mov    edi,edx
100072b0:	c1 ef 06             	shr    edi,0x6
100072b3:	89 d5                	mov    ebp,edx
100072b5:	c1 ed 0e             	shr    ebp,0xe
100072b8:	89 d1                	mov    ecx,edx
100072ba:	c1 e9 16             	shr    ecx,0x16
100072bd:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
100072c4:	81 e6 fc 03 00 00    	and    esi,0x3fc
100072ca:	81 e7 fc 03 00 00    	and    edi,0x3fc
100072d0:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100072d6:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100072dc:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
100072e0:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
100072e7:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
100072ee:	33 84 24 84 10 00 00 	xor    eax,DWORD PTR [esp+0x1084]
100072f5:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
100072fc:	31 c8                	xor    eax,ecx
100072fe:	89 c7                	mov    edi,eax
10007300:	c1 ef 06             	shr    edi,0x6
10007303:	89 c5                	mov    ebp,eax
10007305:	c1 ed 0e             	shr    ebp,0xe
10007308:	89 c1                	mov    ecx,eax
1000730a:	c1 e9 16             	shr    ecx,0x16
1000730d:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10007314:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000731a:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007320:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007326:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000732c:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10007330:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10007337:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
1000733e:	33 94 24 88 10 00 00 	xor    edx,DWORD PTR [esp+0x1088]
10007345:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
1000734c:	31 ca                	xor    edx,ecx
1000734e:	89 d7                	mov    edi,edx
10007350:	c1 ef 06             	shr    edi,0x6
10007353:	89 d5                	mov    ebp,edx
10007355:	c1 ed 0e             	shr    ebp,0xe
10007358:	89 d1                	mov    ecx,edx
1000735a:	c1 e9 16             	shr    ecx,0x16
1000735d:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10007364:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000736a:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007370:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007376:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000737c:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10007380:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10007387:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
1000738e:	33 84 24 8c 10 00 00 	xor    eax,DWORD PTR [esp+0x108c]
10007395:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
1000739c:	31 c8                	xor    eax,ecx
1000739e:	89 c7                	mov    edi,eax
100073a0:	c1 ef 06             	shr    edi,0x6
100073a3:	89 c5                	mov    ebp,eax
100073a5:	c1 ed 0e             	shr    ebp,0xe
100073a8:	89 c1                	mov    ecx,eax
100073aa:	c1 e9 16             	shr    ecx,0x16
100073ad:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
100073b4:	81 e6 fc 03 00 00    	and    esi,0x3fc
100073ba:	81 e7 fc 03 00 00    	and    edi,0x3fc
100073c0:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100073c6:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100073cc:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
100073d0:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
100073d7:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
100073de:	33 94 24 90 10 00 00 	xor    edx,DWORD PTR [esp+0x1090]
100073e5:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
100073ec:	31 ca                	xor    edx,ecx
100073ee:	89 d7                	mov    edi,edx
100073f0:	c1 ef 06             	shr    edi,0x6
100073f3:	89 d5                	mov    ebp,edx
100073f5:	c1 ed 0e             	shr    ebp,0xe
100073f8:	89 d6                	mov    esi,edx
100073fa:	c1 ee 16             	shr    esi,0x16
100073fd:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
10007404:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000740a:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007410:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007416:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000741c:	8b 74 34 58          	mov    esi,DWORD PTR [esp+esi*1+0x58]
10007420:	03 b4 2c 58 04 00 00 	add    esi,DWORD PTR [esp+ebp*1+0x458]
10007427:	33 b4 3c 58 08 00 00 	xor    esi,DWORD PTR [esp+edi*1+0x858]
1000742e:	33 84 24 94 10 00 00 	xor    eax,DWORD PTR [esp+0x1094]
10007435:	03 b4 0c 58 0c 00 00 	add    esi,DWORD PTR [esp+ecx*1+0xc58]
1000743c:	31 f0                	xor    eax,esi
1000743e:	89 c5                	mov    ebp,eax
10007440:	c1 ed 06             	shr    ebp,0x6
10007443:	89 c1                	mov    ecx,eax
10007445:	c1 e9 0e             	shr    ecx,0xe
10007448:	89 c6                	mov    esi,eax
1000744a:	c1 ee 16             	shr    esi,0x16
1000744d:	8d 3c 85 00 00 00 00 	lea    edi,[eax*4+0x0]
10007454:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000745a:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007460:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10007466:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000746c:	8b 74 34 58          	mov    esi,DWORD PTR [esp+esi*1+0x58]
10007470:	03 b4 0c 58 04 00 00 	add    esi,DWORD PTR [esp+ecx*1+0x458]
10007477:	33 b4 2c 58 08 00 00 	xor    esi,DWORD PTR [esp+ebp*1+0x858]
1000747e:	33 94 24 98 10 00 00 	xor    edx,DWORD PTR [esp+0x1098]
10007485:	03 b4 3c 58 0c 00 00 	add    esi,DWORD PTR [esp+edi*1+0xc58]
1000748c:	89 f1                	mov    ecx,esi
1000748e:	31 d1                	xor    ecx,edx
10007490:	33 84 24 9c 10 00 00 	xor    eax,DWORD PTR [esp+0x109c]
10007497:	89 43 f8             	mov    DWORD PTR [ebx-0x8],eax
1000749a:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
1000749d:	8d 94 24 58 10 00 00 	lea    edx,[esp+0x1058]
100074a4:	39 d3                	cmp    ebx,edx
100074a6:	0f 85 db fa ff ff    	jne    10006f87 <_crypt_blowfish_rn+0x172b>
100074ac:	8b 94 24 e8 10 00 00 	mov    edx,DWORD PTR [esp+0x10e8]
100074b3:	8b 84 24 ec 10 00 00 	mov    eax,DWORD PTR [esp+0x10ec]
100074ba:	8b 9c 24 f0 10 00 00 	mov    ebx,DWORD PTR [esp+0x10f0]
100074c1:	8b 8c 24 f4 10 00 00 	mov    ecx,DWORD PTR [esp+0x10f4]
100074c8:	31 94 24 58 10 00 00 	xor    DWORD PTR [esp+0x1058],edx
100074cf:	31 84 24 5c 10 00 00 	xor    DWORD PTR [esp+0x105c],eax
100074d6:	31 9c 24 60 10 00 00 	xor    DWORD PTR [esp+0x1060],ebx
100074dd:	31 8c 24 64 10 00 00 	xor    DWORD PTR [esp+0x1064],ecx
100074e4:	31 94 24 68 10 00 00 	xor    DWORD PTR [esp+0x1068],edx
100074eb:	31 84 24 6c 10 00 00 	xor    DWORD PTR [esp+0x106c],eax
100074f2:	31 9c 24 70 10 00 00 	xor    DWORD PTR [esp+0x1070],ebx
100074f9:	31 8c 24 74 10 00 00 	xor    DWORD PTR [esp+0x1074],ecx
10007500:	31 94 24 78 10 00 00 	xor    DWORD PTR [esp+0x1078],edx
10007507:	31 84 24 7c 10 00 00 	xor    DWORD PTR [esp+0x107c],eax
1000750e:	31 9c 24 80 10 00 00 	xor    DWORD PTR [esp+0x1080],ebx
10007515:	31 8c 24 84 10 00 00 	xor    DWORD PTR [esp+0x1084],ecx
1000751c:	31 94 24 88 10 00 00 	xor    DWORD PTR [esp+0x1088],edx
10007523:	31 84 24 8c 10 00 00 	xor    DWORD PTR [esp+0x108c],eax
1000752a:	31 9c 24 90 10 00 00 	xor    DWORD PTR [esp+0x1090],ebx
10007531:	31 8c 24 94 10 00 00 	xor    DWORD PTR [esp+0x1094],ecx
10007538:	31 94 24 98 10 00 00 	xor    DWORD PTR [esp+0x1098],edx
1000753f:	31 84 24 9c 10 00 00 	xor    DWORD PTR [esp+0x109c],eax
10007546:	8d 9c 24 58 10 00 00 	lea    ebx,[esp+0x1058]
1000754d:	be 00 00 00 00       	mov    esi,0x0
10007552:	b8 00 00 00 00       	mov    eax,0x0
10007557:	83 c3 08             	add    ebx,0x8
1000755a:	33 84 24 58 10 00 00 	xor    eax,DWORD PTR [esp+0x1058]
10007561:	89 c7                	mov    edi,eax
10007563:	c1 ef 06             	shr    edi,0x6
10007566:	89 c5                	mov    ebp,eax
10007568:	c1 ed 0e             	shr    ebp,0xe
1000756b:	89 c2                	mov    edx,eax
1000756d:	c1 ea 16             	shr    edx,0x16
10007570:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
10007577:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000757d:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007583:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007589:	81 e2 fc 03 00 00    	and    edx,0x3fc
1000758f:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10007593:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
1000759a:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
100075a1:	03 94 0c 58 0c 00 00 	add    edx,DWORD PTR [esp+ecx*1+0xc58]
100075a8:	33 94 24 5c 10 00 00 	xor    edx,DWORD PTR [esp+0x105c]
100075af:	31 d6                	xor    esi,edx
100075b1:	89 f7                	mov    edi,esi
100075b3:	c1 ef 06             	shr    edi,0x6
100075b6:	89 f5                	mov    ebp,esi
100075b8:	c1 ed 0e             	shr    ebp,0xe
100075bb:	89 f1                	mov    ecx,esi
100075bd:	c1 e9 16             	shr    ecx,0x16
100075c0:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
100075c7:	81 e2 fc 03 00 00    	and    edx,0x3fc
100075cd:	81 e7 fc 03 00 00    	and    edi,0x3fc
100075d3:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100075d9:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100075df:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
100075e3:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
100075ea:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
100075f1:	33 84 24 60 10 00 00 	xor    eax,DWORD PTR [esp+0x1060]
100075f8:	03 8c 14 58 0c 00 00 	add    ecx,DWORD PTR [esp+edx*1+0xc58]
100075ff:	31 c8                	xor    eax,ecx
10007601:	89 c5                	mov    ebp,eax
10007603:	c1 ed 06             	shr    ebp,0x6
10007606:	89 c2                	mov    edx,eax
10007608:	c1 ea 0e             	shr    edx,0xe
1000760b:	89 c1                	mov    ecx,eax
1000760d:	c1 e9 16             	shr    ecx,0x16
10007610:	8d 3c 85 00 00 00 00 	lea    edi,[eax*4+0x0]
10007617:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000761d:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007623:	81 e2 fc 03 00 00    	and    edx,0x3fc
10007629:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000762f:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10007633:	03 8c 14 58 04 00 00 	add    ecx,DWORD PTR [esp+edx*1+0x458]
1000763a:	33 8c 2c 58 08 00 00 	xor    ecx,DWORD PTR [esp+ebp*1+0x858]
10007641:	33 b4 24 64 10 00 00 	xor    esi,DWORD PTR [esp+0x1064]
10007648:	89 ca                	mov    edx,ecx
1000764a:	03 94 3c 58 0c 00 00 	add    edx,DWORD PTR [esp+edi*1+0xc58]
10007651:	31 d6                	xor    esi,edx
10007653:	89 f7                	mov    edi,esi
10007655:	c1 ef 06             	shr    edi,0x6
10007658:	89 f5                	mov    ebp,esi
1000765a:	c1 ed 0e             	shr    ebp,0xe
1000765d:	89 f1                	mov    ecx,esi
1000765f:	c1 e9 16             	shr    ecx,0x16
10007662:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
10007669:	81 e2 fc 03 00 00    	and    edx,0x3fc
1000766f:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007675:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000767b:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10007681:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10007685:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
1000768c:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10007693:	33 84 24 68 10 00 00 	xor    eax,DWORD PTR [esp+0x1068]
1000769a:	03 8c 14 58 0c 00 00 	add    ecx,DWORD PTR [esp+edx*1+0xc58]
100076a1:	31 c1                	xor    ecx,eax
100076a3:	89 cd                	mov    ebp,ecx
100076a5:	c1 ed 06             	shr    ebp,0x6
100076a8:	89 ca                	mov    edx,ecx
100076aa:	c1 ea 0e             	shr    edx,0xe
100076ad:	89 c8                	mov    eax,ecx
100076af:	c1 e8 16             	shr    eax,0x16
100076b2:	8d 3c 8d 00 00 00 00 	lea    edi,[ecx*4+0x0]
100076b9:	81 e7 fc 03 00 00    	and    edi,0x3fc
100076bf:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100076c5:	81 e2 fc 03 00 00    	and    edx,0x3fc
100076cb:	25 fc 03 00 00       	and    eax,0x3fc
100076d0:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
100076d4:	03 84 14 58 04 00 00 	add    eax,DWORD PTR [esp+edx*1+0x458]
100076db:	33 84 2c 58 08 00 00 	xor    eax,DWORD PTR [esp+ebp*1+0x858]
100076e2:	33 b4 24 6c 10 00 00 	xor    esi,DWORD PTR [esp+0x106c]
100076e9:	03 84 3c 58 0c 00 00 	add    eax,DWORD PTR [esp+edi*1+0xc58]
100076f0:	89 c2                	mov    edx,eax
100076f2:	31 f2                	xor    edx,esi
100076f4:	89 d5                	mov    ebp,edx
100076f6:	c1 ed 06             	shr    ebp,0x6
100076f9:	89 d6                	mov    esi,edx
100076fb:	c1 ee 0e             	shr    esi,0xe
100076fe:	89 d0                	mov    eax,edx
10007700:	c1 e8 16             	shr    eax,0x16
10007703:	8d 3c 95 00 00 00 00 	lea    edi,[edx*4+0x0]
1000770a:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007710:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007716:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000771c:	25 fc 03 00 00       	and    eax,0x3fc
10007721:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10007725:	03 84 34 58 04 00 00 	add    eax,DWORD PTR [esp+esi*1+0x458]
1000772c:	33 84 2c 58 08 00 00 	xor    eax,DWORD PTR [esp+ebp*1+0x858]
10007733:	33 8c 24 70 10 00 00 	xor    ecx,DWORD PTR [esp+0x1070]
1000773a:	03 84 3c 58 0c 00 00 	add    eax,DWORD PTR [esp+edi*1+0xc58]
10007741:	89 c6                	mov    esi,eax
10007743:	31 ce                	xor    esi,ecx
10007745:	89 f7                	mov    edi,esi
10007747:	c1 ef 06             	shr    edi,0x6
1000774a:	89 f5                	mov    ebp,esi
1000774c:	c1 ed 0e             	shr    ebp,0xe
1000774f:	89 f0                	mov    eax,esi
10007751:	c1 e8 16             	shr    eax,0x16
10007754:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
1000775b:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10007761:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007767:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000776d:	25 fc 03 00 00       	and    eax,0x3fc
10007772:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10007776:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
1000777d:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
10007784:	33 94 24 74 10 00 00 	xor    edx,DWORD PTR [esp+0x1074]
1000778b:	03 84 0c 58 0c 00 00 	add    eax,DWORD PTR [esp+ecx*1+0xc58]
10007792:	31 c2                	xor    edx,eax
10007794:	89 d7                	mov    edi,edx
10007796:	c1 ef 06             	shr    edi,0x6
10007799:	89 d5                	mov    ebp,edx
1000779b:	c1 ed 0e             	shr    ebp,0xe
1000779e:	89 d0                	mov    eax,edx
100077a0:	c1 e8 16             	shr    eax,0x16
100077a3:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
100077aa:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100077b0:	81 e7 fc 03 00 00    	and    edi,0x3fc
100077b6:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100077bc:	25 fc 03 00 00       	and    eax,0x3fc
100077c1:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
100077c5:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
100077cc:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
100077d3:	33 b4 24 78 10 00 00 	xor    esi,DWORD PTR [esp+0x1078]
100077da:	03 84 0c 58 0c 00 00 	add    eax,DWORD PTR [esp+ecx*1+0xc58]
100077e1:	31 c6                	xor    esi,eax
100077e3:	89 f7                	mov    edi,esi
100077e5:	c1 ef 06             	shr    edi,0x6
100077e8:	89 f5                	mov    ebp,esi
100077ea:	c1 ed 0e             	shr    ebp,0xe
100077ed:	89 f0                	mov    eax,esi
100077ef:	c1 e8 16             	shr    eax,0x16
100077f2:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
100077f9:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100077ff:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007805:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000780b:	25 fc 03 00 00       	and    eax,0x3fc
10007810:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10007814:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
1000781b:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
10007822:	33 94 24 7c 10 00 00 	xor    edx,DWORD PTR [esp+0x107c]
10007829:	03 84 0c 58 0c 00 00 	add    eax,DWORD PTR [esp+ecx*1+0xc58]
10007830:	31 c2                	xor    edx,eax
10007832:	89 d7                	mov    edi,edx
10007834:	c1 ef 06             	shr    edi,0x6
10007837:	89 d5                	mov    ebp,edx
10007839:	c1 ed 0e             	shr    ebp,0xe
1000783c:	89 d0                	mov    eax,edx
1000783e:	c1 e8 16             	shr    eax,0x16
10007841:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
10007848:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000784e:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007854:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000785a:	25 fc 03 00 00       	and    eax,0x3fc
1000785f:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10007863:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
1000786a:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
10007871:	33 b4 24 80 10 00 00 	xor    esi,DWORD PTR [esp+0x1080]
10007878:	03 84 0c 58 0c 00 00 	add    eax,DWORD PTR [esp+ecx*1+0xc58]
1000787f:	31 c6                	xor    esi,eax
10007881:	89 f7                	mov    edi,esi
10007883:	c1 ef 06             	shr    edi,0x6
10007886:	89 f5                	mov    ebp,esi
10007888:	c1 ed 0e             	shr    ebp,0xe
1000788b:	89 f0                	mov    eax,esi
1000788d:	c1 e8 16             	shr    eax,0x16
10007890:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
10007897:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000789d:	81 e7 fc 03 00 00    	and    edi,0x3fc
100078a3:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100078a9:	25 fc 03 00 00       	and    eax,0x3fc
100078ae:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
100078b2:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
100078b9:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
100078c0:	33 94 24 84 10 00 00 	xor    edx,DWORD PTR [esp+0x1084]
100078c7:	03 84 0c 58 0c 00 00 	add    eax,DWORD PTR [esp+ecx*1+0xc58]
100078ce:	31 d0                	xor    eax,edx
100078d0:	89 c7                	mov    edi,eax
100078d2:	c1 ef 06             	shr    edi,0x6
100078d5:	89 c5                	mov    ebp,eax
100078d7:	c1 ed 0e             	shr    ebp,0xe
100078da:	89 c2                	mov    edx,eax
100078dc:	c1 ea 16             	shr    edx,0x16
100078df:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
100078e6:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100078ec:	81 e7 fc 03 00 00    	and    edi,0x3fc
100078f2:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100078f8:	81 e2 fc 03 00 00    	and    edx,0x3fc
100078fe:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10007902:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10007909:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10007910:	33 b4 24 88 10 00 00 	xor    esi,DWORD PTR [esp+0x1088]
10007917:	03 94 0c 58 0c 00 00 	add    edx,DWORD PTR [esp+ecx*1+0xc58]
1000791e:	31 d6                	xor    esi,edx
10007920:	89 f7                	mov    edi,esi
10007922:	c1 ef 06             	shr    edi,0x6
10007925:	89 f5                	mov    ebp,esi
10007927:	c1 ed 0e             	shr    ebp,0xe
1000792a:	89 f2                	mov    edx,esi
1000792c:	c1 ea 16             	shr    edx,0x16
1000792f:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
10007936:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000793c:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007942:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007948:	81 e2 fc 03 00 00    	and    edx,0x3fc
1000794e:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10007952:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10007959:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10007960:	33 84 24 8c 10 00 00 	xor    eax,DWORD PTR [esp+0x108c]
10007967:	03 94 0c 58 0c 00 00 	add    edx,DWORD PTR [esp+ecx*1+0xc58]
1000796e:	31 d0                	xor    eax,edx
10007970:	89 c7                	mov    edi,eax
10007972:	c1 ef 06             	shr    edi,0x6
10007975:	89 c5                	mov    ebp,eax
10007977:	c1 ed 0e             	shr    ebp,0xe
1000797a:	89 c2                	mov    edx,eax
1000797c:	c1 ea 16             	shr    edx,0x16
1000797f:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
10007986:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000798c:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007992:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007998:	81 e2 fc 03 00 00    	and    edx,0x3fc
1000799e:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
100079a2:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
100079a9:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
100079b0:	33 b4 24 90 10 00 00 	xor    esi,DWORD PTR [esp+0x1090]
100079b7:	03 94 0c 58 0c 00 00 	add    edx,DWORD PTR [esp+ecx*1+0xc58]
100079be:	31 d6                	xor    esi,edx
100079c0:	89 f2                	mov    edx,esi
100079c2:	c1 ea 06             	shr    edx,0x6
100079c5:	89 f5                	mov    ebp,esi
100079c7:	c1 ed 0e             	shr    ebp,0xe
100079ca:	89 f1                	mov    ecx,esi
100079cc:	c1 e9 16             	shr    ecx,0x16
100079cf:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
100079d6:	81 e7 fc 03 00 00    	and    edi,0x3fc
100079dc:	81 e2 fc 03 00 00    	and    edx,0x3fc
100079e2:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100079e8:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100079ee:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
100079f2:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
100079f9:	33 8c 14 58 08 00 00 	xor    ecx,DWORD PTR [esp+edx*1+0x858]
10007a00:	33 84 24 94 10 00 00 	xor    eax,DWORD PTR [esp+0x1094]
10007a07:	03 8c 3c 58 0c 00 00 	add    ecx,DWORD PTR [esp+edi*1+0xc58]
10007a0e:	31 c8                	xor    eax,ecx
10007a10:	89 c5                	mov    ebp,eax
10007a12:	c1 ed 06             	shr    ebp,0x6
10007a15:	89 c2                	mov    edx,eax
10007a17:	c1 ea 0e             	shr    edx,0xe
10007a1a:	89 c1                	mov    ecx,eax
10007a1c:	c1 e9 16             	shr    ecx,0x16
10007a1f:	8d 3c 85 00 00 00 00 	lea    edi,[eax*4+0x0]
10007a26:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007a2c:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007a32:	81 e2 fc 03 00 00    	and    edx,0x3fc
10007a38:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10007a3e:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10007a42:	03 8c 14 58 04 00 00 	add    ecx,DWORD PTR [esp+edx*1+0x458]
10007a49:	33 8c 2c 58 08 00 00 	xor    ecx,DWORD PTR [esp+ebp*1+0x858]
10007a50:	33 b4 24 98 10 00 00 	xor    esi,DWORD PTR [esp+0x1098]
10007a57:	89 ca                	mov    edx,ecx
10007a59:	03 94 3c 58 0c 00 00 	add    edx,DWORD PTR [esp+edi*1+0xc58]
10007a60:	31 d6                	xor    esi,edx
10007a62:	33 84 24 9c 10 00 00 	xor    eax,DWORD PTR [esp+0x109c]
10007a69:	89 43 f8             	mov    DWORD PTR [ebx-0x8],eax
10007a6c:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
10007a6f:	8d bc 24 a0 10 00 00 	lea    edi,[esp+0x10a0]
10007a76:	39 fb                	cmp    ebx,edi
10007a78:	0f 85 d9 fa ff ff    	jne    10007557 <_crypt_blowfish_rn+0x1cfb>
10007a7e:	8d 5c 24 58          	lea    ebx,[esp+0x58]
10007a82:	83 c3 08             	add    ebx,0x8
10007a85:	33 84 24 58 10 00 00 	xor    eax,DWORD PTR [esp+0x1058]
10007a8c:	89 c7                	mov    edi,eax
10007a8e:	c1 ef 06             	shr    edi,0x6
10007a91:	89 c5                	mov    ebp,eax
10007a93:	c1 ed 0e             	shr    ebp,0xe
10007a96:	89 c2                	mov    edx,eax
10007a98:	c1 ea 16             	shr    edx,0x16
10007a9b:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
10007aa2:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10007aa8:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007aae:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007ab4:	81 e2 fc 03 00 00    	and    edx,0x3fc
10007aba:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10007abe:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10007ac5:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10007acc:	03 94 0c 58 0c 00 00 	add    edx,DWORD PTR [esp+ecx*1+0xc58]
10007ad3:	33 94 24 5c 10 00 00 	xor    edx,DWORD PTR [esp+0x105c]
10007ada:	31 f2                	xor    edx,esi
10007adc:	89 d7                	mov    edi,edx
10007ade:	c1 ef 06             	shr    edi,0x6
10007ae1:	89 d5                	mov    ebp,edx
10007ae3:	c1 ed 0e             	shr    ebp,0xe
10007ae6:	89 d6                	mov    esi,edx
10007ae8:	c1 ee 16             	shr    esi,0x16
10007aeb:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
10007af2:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10007af8:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007afe:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007b04:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007b0a:	8b 74 34 58          	mov    esi,DWORD PTR [esp+esi*1+0x58]
10007b0e:	03 b4 2c 58 04 00 00 	add    esi,DWORD PTR [esp+ebp*1+0x458]
10007b15:	33 b4 3c 58 08 00 00 	xor    esi,DWORD PTR [esp+edi*1+0x858]
10007b1c:	33 84 24 60 10 00 00 	xor    eax,DWORD PTR [esp+0x1060]
10007b23:	03 b4 0c 58 0c 00 00 	add    esi,DWORD PTR [esp+ecx*1+0xc58]
10007b2a:	31 c6                	xor    esi,eax
10007b2c:	89 f7                	mov    edi,esi
10007b2e:	c1 ef 06             	shr    edi,0x6
10007b31:	89 f5                	mov    ebp,esi
10007b33:	c1 ed 0e             	shr    ebp,0xe
10007b36:	89 f1                	mov    ecx,esi
10007b38:	c1 e9 16             	shr    ecx,0x16
10007b3b:	8d 04 b5 00 00 00 00 	lea    eax,[esi*4+0x0]
10007b42:	25 fc 03 00 00       	and    eax,0x3fc
10007b47:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007b4d:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007b53:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10007b59:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10007b5d:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10007b64:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10007b6b:	33 94 24 64 10 00 00 	xor    edx,DWORD PTR [esp+0x1064]
10007b72:	03 8c 04 58 0c 00 00 	add    ecx,DWORD PTR [esp+eax*1+0xc58]
10007b79:	31 d1                	xor    ecx,edx
10007b7b:	89 c8                	mov    eax,ecx
10007b7d:	c1 e8 06             	shr    eax,0x6
10007b80:	89 cd                	mov    ebp,ecx
10007b82:	c1 ed 0e             	shr    ebp,0xe
10007b85:	89 ca                	mov    edx,ecx
10007b87:	c1 ea 16             	shr    edx,0x16
10007b8a:	8d 3c 8d 00 00 00 00 	lea    edi,[ecx*4+0x0]
10007b91:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007b97:	25 fc 03 00 00       	and    eax,0x3fc
10007b9c:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007ba2:	81 e2 fc 03 00 00    	and    edx,0x3fc
10007ba8:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10007bac:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10007bb3:	33 94 04 58 08 00 00 	xor    edx,DWORD PTR [esp+eax*1+0x858]
10007bba:	33 b4 24 68 10 00 00 	xor    esi,DWORD PTR [esp+0x1068]
10007bc1:	03 94 3c 58 0c 00 00 	add    edx,DWORD PTR [esp+edi*1+0xc58]
10007bc8:	31 d6                	xor    esi,edx
10007bca:	89 f2                	mov    edx,esi
10007bcc:	c1 ea 06             	shr    edx,0x6
10007bcf:	89 f5                	mov    ebp,esi
10007bd1:	c1 ed 0e             	shr    ebp,0xe
10007bd4:	89 f0                	mov    eax,esi
10007bd6:	c1 e8 16             	shr    eax,0x16
10007bd9:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
10007be0:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007be6:	81 e2 fc 03 00 00    	and    edx,0x3fc
10007bec:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007bf2:	25 fc 03 00 00       	and    eax,0x3fc
10007bf7:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10007bfb:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
10007c02:	33 84 14 58 08 00 00 	xor    eax,DWORD PTR [esp+edx*1+0x858]
10007c09:	33 8c 24 6c 10 00 00 	xor    ecx,DWORD PTR [esp+0x106c]
10007c10:	03 84 3c 58 0c 00 00 	add    eax,DWORD PTR [esp+edi*1+0xc58]
10007c17:	31 c1                	xor    ecx,eax
10007c19:	89 c8                	mov    eax,ecx
10007c1b:	c1 e8 06             	shr    eax,0x6
10007c1e:	89 cd                	mov    ebp,ecx
10007c20:	c1 ed 0e             	shr    ebp,0xe
10007c23:	89 ca                	mov    edx,ecx
10007c25:	c1 ea 16             	shr    edx,0x16
10007c28:	8d 3c 8d 00 00 00 00 	lea    edi,[ecx*4+0x0]
10007c2f:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007c35:	25 fc 03 00 00       	and    eax,0x3fc
10007c3a:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007c40:	81 e2 fc 03 00 00    	and    edx,0x3fc
10007c46:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10007c4a:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10007c51:	33 94 04 58 08 00 00 	xor    edx,DWORD PTR [esp+eax*1+0x858]
10007c58:	33 b4 24 70 10 00 00 	xor    esi,DWORD PTR [esp+0x1070]
10007c5f:	03 94 3c 58 0c 00 00 	add    edx,DWORD PTR [esp+edi*1+0xc58]
10007c66:	31 d6                	xor    esi,edx
10007c68:	89 f2                	mov    edx,esi
10007c6a:	c1 ea 06             	shr    edx,0x6
10007c6d:	89 f5                	mov    ebp,esi
10007c6f:	c1 ed 0e             	shr    ebp,0xe
10007c72:	89 f0                	mov    eax,esi
10007c74:	c1 e8 16             	shr    eax,0x16
10007c77:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
10007c7e:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007c84:	81 e2 fc 03 00 00    	and    edx,0x3fc
10007c8a:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007c90:	25 fc 03 00 00       	and    eax,0x3fc
10007c95:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10007c99:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
10007ca0:	33 84 14 58 08 00 00 	xor    eax,DWORD PTR [esp+edx*1+0x858]
10007ca7:	33 8c 24 74 10 00 00 	xor    ecx,DWORD PTR [esp+0x1074]
10007cae:	03 84 3c 58 0c 00 00 	add    eax,DWORD PTR [esp+edi*1+0xc58]
10007cb5:	31 c1                	xor    ecx,eax
10007cb7:	89 cf                	mov    edi,ecx
10007cb9:	c1 ef 06             	shr    edi,0x6
10007cbc:	89 cd                	mov    ebp,ecx
10007cbe:	c1 ed 0e             	shr    ebp,0xe
10007cc1:	89 ca                	mov    edx,ecx
10007cc3:	c1 ea 16             	shr    edx,0x16
10007cc6:	8d 04 8d 00 00 00 00 	lea    eax,[ecx*4+0x0]
10007ccd:	25 fc 03 00 00       	and    eax,0x3fc
10007cd2:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007cd8:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007cde:	81 e2 fc 03 00 00    	and    edx,0x3fc
10007ce4:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10007ce8:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10007cef:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10007cf6:	33 b4 24 78 10 00 00 	xor    esi,DWORD PTR [esp+0x1078]
10007cfd:	03 94 04 58 0c 00 00 	add    edx,DWORD PTR [esp+eax*1+0xc58]
10007d04:	31 d6                	xor    esi,edx
10007d06:	89 f2                	mov    edx,esi
10007d08:	c1 ea 06             	shr    edx,0x6
10007d0b:	89 f5                	mov    ebp,esi
10007d0d:	c1 ed 0e             	shr    ebp,0xe
10007d10:	89 f0                	mov    eax,esi
10007d12:	c1 e8 16             	shr    eax,0x16
10007d15:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
10007d1c:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007d22:	81 e2 fc 03 00 00    	and    edx,0x3fc
10007d28:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007d2e:	25 fc 03 00 00       	and    eax,0x3fc
10007d33:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10007d37:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
10007d3e:	33 84 14 58 08 00 00 	xor    eax,DWORD PTR [esp+edx*1+0x858]
10007d45:	33 8c 24 7c 10 00 00 	xor    ecx,DWORD PTR [esp+0x107c]
10007d4c:	03 84 3c 58 0c 00 00 	add    eax,DWORD PTR [esp+edi*1+0xc58]
10007d53:	31 c8                	xor    eax,ecx
10007d55:	89 c7                	mov    edi,eax
10007d57:	c1 ef 06             	shr    edi,0x6
10007d5a:	89 c5                	mov    ebp,eax
10007d5c:	c1 ed 0e             	shr    ebp,0xe
10007d5f:	89 c2                	mov    edx,eax
10007d61:	c1 ea 16             	shr    edx,0x16
10007d64:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
10007d6b:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10007d71:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007d77:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007d7d:	81 e2 fc 03 00 00    	and    edx,0x3fc
10007d83:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10007d87:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10007d8e:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10007d95:	33 b4 24 80 10 00 00 	xor    esi,DWORD PTR [esp+0x1080]
10007d9c:	03 94 0c 58 0c 00 00 	add    edx,DWORD PTR [esp+ecx*1+0xc58]
10007da3:	31 d6                	xor    esi,edx
10007da5:	89 f7                	mov    edi,esi
10007da7:	c1 ef 06             	shr    edi,0x6
10007daa:	89 f5                	mov    ebp,esi
10007dac:	c1 ed 0e             	shr    ebp,0xe
10007daf:	89 f1                	mov    ecx,esi
10007db1:	c1 e9 16             	shr    ecx,0x16
10007db4:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
10007dbb:	81 e2 fc 03 00 00    	and    edx,0x3fc
10007dc1:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007dc7:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007dcd:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10007dd3:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10007dd7:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10007dde:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10007de5:	33 84 24 84 10 00 00 	xor    eax,DWORD PTR [esp+0x1084]
10007dec:	03 8c 14 58 0c 00 00 	add    ecx,DWORD PTR [esp+edx*1+0xc58]
10007df3:	31 c8                	xor    eax,ecx
10007df5:	89 c7                	mov    edi,eax
10007df7:	c1 ef 06             	shr    edi,0x6
10007dfa:	89 c5                	mov    ebp,eax
10007dfc:	c1 ed 0e             	shr    ebp,0xe
10007dff:	89 c2                	mov    edx,eax
10007e01:	c1 ea 16             	shr    edx,0x16
10007e04:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
10007e0b:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10007e11:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007e17:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007e1d:	81 e2 fc 03 00 00    	and    edx,0x3fc
10007e23:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10007e27:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10007e2e:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10007e35:	33 b4 24 88 10 00 00 	xor    esi,DWORD PTR [esp+0x1088]
10007e3c:	03 94 0c 58 0c 00 00 	add    edx,DWORD PTR [esp+ecx*1+0xc58]
10007e43:	31 d6                	xor    esi,edx
10007e45:	89 f7                	mov    edi,esi
10007e47:	c1 ef 06             	shr    edi,0x6
10007e4a:	89 f5                	mov    ebp,esi
10007e4c:	c1 ed 0e             	shr    ebp,0xe
10007e4f:	89 f1                	mov    ecx,esi
10007e51:	c1 e9 16             	shr    ecx,0x16
10007e54:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
10007e5b:	81 e2 fc 03 00 00    	and    edx,0x3fc
10007e61:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007e67:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007e6d:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10007e73:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10007e77:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10007e7e:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10007e85:	33 84 24 8c 10 00 00 	xor    eax,DWORD PTR [esp+0x108c]
10007e8c:	03 8c 14 58 0c 00 00 	add    ecx,DWORD PTR [esp+edx*1+0xc58]
10007e93:	31 c8                	xor    eax,ecx
10007e95:	89 c7                	mov    edi,eax
10007e97:	c1 ef 06             	shr    edi,0x6
10007e9a:	89 c5                	mov    ebp,eax
10007e9c:	c1 ed 0e             	shr    ebp,0xe
10007e9f:	89 c2                	mov    edx,eax
10007ea1:	c1 ea 16             	shr    edx,0x16
10007ea4:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
10007eab:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10007eb1:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007eb7:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007ebd:	81 e2 fc 03 00 00    	and    edx,0x3fc
10007ec3:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10007ec7:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10007ece:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10007ed5:	33 b4 24 90 10 00 00 	xor    esi,DWORD PTR [esp+0x1090]
10007edc:	03 94 0c 58 0c 00 00 	add    edx,DWORD PTR [esp+ecx*1+0xc58]
10007ee3:	31 d6                	xor    esi,edx
10007ee5:	89 f7                	mov    edi,esi
10007ee7:	c1 ef 06             	shr    edi,0x6
10007eea:	89 f5                	mov    ebp,esi
10007eec:	c1 ed 0e             	shr    ebp,0xe
10007eef:	89 f1                	mov    ecx,esi
10007ef1:	c1 e9 16             	shr    ecx,0x16
10007ef4:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
10007efb:	81 e2 fc 03 00 00    	and    edx,0x3fc
10007f01:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007f07:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007f0d:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10007f13:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10007f17:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10007f1e:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10007f25:	33 84 24 94 10 00 00 	xor    eax,DWORD PTR [esp+0x1094]
10007f2c:	03 8c 14 58 0c 00 00 	add    ecx,DWORD PTR [esp+edx*1+0xc58]
10007f33:	31 c8                	xor    eax,ecx
10007f35:	89 c7                	mov    edi,eax
10007f37:	c1 ef 06             	shr    edi,0x6
10007f3a:	89 c5                	mov    ebp,eax
10007f3c:	c1 ed 0e             	shr    ebp,0xe
10007f3f:	89 c2                	mov    edx,eax
10007f41:	c1 ea 16             	shr    edx,0x16
10007f44:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
10007f4b:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10007f51:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007f57:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007f5d:	81 e2 fc 03 00 00    	and    edx,0x3fc
10007f63:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10007f67:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10007f6e:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10007f75:	33 b4 24 98 10 00 00 	xor    esi,DWORD PTR [esp+0x1098]
10007f7c:	03 94 0c 58 0c 00 00 	add    edx,DWORD PTR [esp+ecx*1+0xc58]
10007f83:	31 d6                	xor    esi,edx
10007f85:	33 84 24 9c 10 00 00 	xor    eax,DWORD PTR [esp+0x109c]
10007f8c:	89 43 f8             	mov    DWORD PTR [ebx-0x8],eax
10007f8f:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
10007f92:	8d 94 24 58 10 00 00 	lea    edx,[esp+0x1058]
10007f99:	39 d3                	cmp    ebx,edx
10007f9b:	0f 85 e1 fa ff ff    	jne    10007a82 <_crypt_blowfish_rn+0x2226>
10007fa1:	ff 4c 24 04          	dec    DWORD PTR [esp+0x4]
10007fa5:	0f 85 a2 e9 ff ff    	jne    1000694d <_crypt_blowfish_rn+0x10f1>
10007fab:	8b 84 24 58 10 00 00 	mov    eax,DWORD PTR [esp+0x1058]
10007fb2:	89 04 24             	mov    DWORD PTR [esp],eax
10007fb5:	8b 84 24 5c 10 00 00 	mov    eax,DWORD PTR [esp+0x105c]
10007fbc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
10007fc0:	8b 84 24 60 10 00 00 	mov    eax,DWORD PTR [esp+0x1060]
10007fc7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
10007fcb:	8b 84 24 64 10 00 00 	mov    eax,DWORD PTR [esp+0x1064]
10007fd2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10007fd6:	8b 84 24 68 10 00 00 	mov    eax,DWORD PTR [esp+0x1068]
10007fdd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
10007fe1:	8b 84 24 6c 10 00 00 	mov    eax,DWORD PTR [esp+0x106c]
10007fe8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
10007fec:	8b 84 24 70 10 00 00 	mov    eax,DWORD PTR [esp+0x1070]
10007ff3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
10007ff7:	8b 84 24 74 10 00 00 	mov    eax,DWORD PTR [esp+0x1074]
10007ffe:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
10008002:	8b 84 24 78 10 00 00 	mov    eax,DWORD PTR [esp+0x1078]
10008009:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
1000800d:	8b 84 24 7c 10 00 00 	mov    eax,DWORD PTR [esp+0x107c]
10008014:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
10008018:	8b 84 24 80 10 00 00 	mov    eax,DWORD PTR [esp+0x1080]
1000801f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
10008023:	8b 84 24 84 10 00 00 	mov    eax,DWORD PTR [esp+0x1084]
1000802a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
1000802e:	8b 84 24 88 10 00 00 	mov    eax,DWORD PTR [esp+0x1088]
10008035:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
10008039:	8b 84 24 8c 10 00 00 	mov    eax,DWORD PTR [esp+0x108c]
10008040:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
10008044:	8b 84 24 90 10 00 00 	mov    eax,DWORD PTR [esp+0x1090]
1000804b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
1000804f:	8b 84 24 94 10 00 00 	mov    eax,DWORD PTR [esp+0x1094]
10008056:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
1000805a:	8b 84 24 98 10 00 00 	mov    eax,DWORD PTR [esp+0x1098]
10008061:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
10008065:	8b 84 24 9c 10 00 00 	mov    eax,DWORD PTR [esp+0x109c]
1000806c:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
10008070:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
10008074:	89 5c 24 4c          	mov    DWORD PTR [esp+0x4c],ebx
10008078:	8b 04 9d 40 92 00 10 	mov    eax,DWORD PTR [ebx*4+0x10009240]	1000807b: R_386_32	.data
1000807f:	8b 0c 9d 44 92 00 10 	mov    ecx,DWORD PTR [ebx*4+0x10009244]	10008082: R_386_32	.data
10008086:	bb 40 00 00 00       	mov    ebx,0x40
1000808b:	33 04 24             	xor    eax,DWORD PTR [esp]
1000808e:	89 c7                	mov    edi,eax
10008090:	c1 ef 06             	shr    edi,0x6
10008093:	89 c5                	mov    ebp,eax
10008095:	c1 ed 0e             	shr    ebp,0xe
10008098:	89 c2                	mov    edx,eax
1000809a:	c1 ea 16             	shr    edx,0x16
1000809d:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
100080a4:	81 e6 fc 03 00 00    	and    esi,0x3fc
100080aa:	81 e7 fc 03 00 00    	and    edi,0x3fc
100080b0:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100080b6:	81 e2 fc 03 00 00    	and    edx,0x3fc
100080bc:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
100080c0:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
100080c7:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
100080ce:	03 94 34 58 0c 00 00 	add    edx,DWORD PTR [esp+esi*1+0xc58]
100080d5:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
100080d9:	31 ca                	xor    edx,ecx
100080db:	89 d7                	mov    edi,edx
100080dd:	c1 ef 06             	shr    edi,0x6
100080e0:	89 d5                	mov    ebp,edx
100080e2:	c1 ed 0e             	shr    ebp,0xe
100080e5:	89 d1                	mov    ecx,edx
100080e7:	c1 e9 16             	shr    ecx,0x16
100080ea:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
100080f1:	81 e6 fc 03 00 00    	and    esi,0x3fc
100080f7:	81 e7 fc 03 00 00    	and    edi,0x3fc
100080fd:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008103:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10008109:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
1000810d:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10008114:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
1000811b:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
1000811f:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10008126:	31 c1                	xor    ecx,eax
10008128:	89 cd                	mov    ebp,ecx
1000812a:	c1 ed 06             	shr    ebp,0x6
1000812d:	89 ce                	mov    esi,ecx
1000812f:	c1 ee 0e             	shr    esi,0xe
10008132:	89 c8                	mov    eax,ecx
10008134:	c1 e8 16             	shr    eax,0x16
10008137:	8d 3c 8d 00 00 00 00 	lea    edi,[ecx*4+0x0]
1000813e:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008144:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000814a:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008150:	25 fc 03 00 00       	and    eax,0x3fc
10008155:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10008159:	03 84 34 58 04 00 00 	add    eax,DWORD PTR [esp+esi*1+0x458]
10008160:	33 84 2c 58 08 00 00 	xor    eax,DWORD PTR [esp+ebp*1+0x858]
10008167:	33 54 24 0c          	xor    edx,DWORD PTR [esp+0xc]
1000816b:	03 84 3c 58 0c 00 00 	add    eax,DWORD PTR [esp+edi*1+0xc58]
10008172:	89 c6                	mov    esi,eax
10008174:	31 d6                	xor    esi,edx
10008176:	89 f5                	mov    ebp,esi
10008178:	c1 ed 06             	shr    ebp,0x6
1000817b:	89 f2                	mov    edx,esi
1000817d:	c1 ea 0e             	shr    edx,0xe
10008180:	89 f0                	mov    eax,esi
10008182:	c1 e8 16             	shr    eax,0x16
10008185:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
1000818c:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008192:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008198:	81 e2 fc 03 00 00    	and    edx,0x3fc
1000819e:	25 fc 03 00 00       	and    eax,0x3fc
100081a3:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
100081a7:	03 84 14 58 04 00 00 	add    eax,DWORD PTR [esp+edx*1+0x458]
100081ae:	33 84 2c 58 08 00 00 	xor    eax,DWORD PTR [esp+ebp*1+0x858]
100081b5:	33 4c 24 10          	xor    ecx,DWORD PTR [esp+0x10]
100081b9:	03 84 3c 58 0c 00 00 	add    eax,DWORD PTR [esp+edi*1+0xc58]
100081c0:	31 c1                	xor    ecx,eax
100081c2:	89 ca                	mov    edx,ecx
100081c4:	c1 ea 06             	shr    edx,0x6
100081c7:	89 cd                	mov    ebp,ecx
100081c9:	c1 ed 0e             	shr    ebp,0xe
100081cc:	89 c8                	mov    eax,ecx
100081ce:	c1 e8 16             	shr    eax,0x16
100081d1:	8d 3c 8d 00 00 00 00 	lea    edi,[ecx*4+0x0]
100081d8:	81 e7 fc 03 00 00    	and    edi,0x3fc
100081de:	81 e2 fc 03 00 00    	and    edx,0x3fc
100081e4:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100081ea:	25 fc 03 00 00       	and    eax,0x3fc
100081ef:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
100081f3:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
100081fa:	33 84 14 58 08 00 00 	xor    eax,DWORD PTR [esp+edx*1+0x858]
10008201:	33 74 24 14          	xor    esi,DWORD PTR [esp+0x14]
10008205:	03 84 3c 58 0c 00 00 	add    eax,DWORD PTR [esp+edi*1+0xc58]
1000820c:	31 f0                	xor    eax,esi
1000820e:	89 c7                	mov    edi,eax
10008210:	c1 ef 06             	shr    edi,0x6
10008213:	89 c5                	mov    ebp,eax
10008215:	c1 ed 0e             	shr    ebp,0xe
10008218:	89 c2                	mov    edx,eax
1000821a:	c1 ea 16             	shr    edx,0x16
1000821d:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10008224:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000822a:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008230:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008236:	81 e2 fc 03 00 00    	and    edx,0x3fc
1000823c:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10008240:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10008247:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
1000824e:	33 4c 24 18          	xor    ecx,DWORD PTR [esp+0x18]
10008252:	03 94 34 58 0c 00 00 	add    edx,DWORD PTR [esp+esi*1+0xc58]
10008259:	31 ca                	xor    edx,ecx
1000825b:	89 d7                	mov    edi,edx
1000825d:	c1 ef 06             	shr    edi,0x6
10008260:	89 d5                	mov    ebp,edx
10008262:	c1 ed 0e             	shr    ebp,0xe
10008265:	89 d1                	mov    ecx,edx
10008267:	c1 e9 16             	shr    ecx,0x16
1000826a:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10008271:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008277:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000827d:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008283:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10008289:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
1000828d:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10008294:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
1000829b:	33 44 24 1c          	xor    eax,DWORD PTR [esp+0x1c]
1000829f:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
100082a6:	31 c8                	xor    eax,ecx
100082a8:	89 c7                	mov    edi,eax
100082aa:	c1 ef 06             	shr    edi,0x6
100082ad:	89 c5                	mov    ebp,eax
100082af:	c1 ed 0e             	shr    ebp,0xe
100082b2:	89 c1                	mov    ecx,eax
100082b4:	c1 e9 16             	shr    ecx,0x16
100082b7:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
100082be:	81 e6 fc 03 00 00    	and    esi,0x3fc
100082c4:	81 e7 fc 03 00 00    	and    edi,0x3fc
100082ca:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100082d0:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100082d6:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
100082da:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
100082e1:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
100082e8:	33 54 24 20          	xor    edx,DWORD PTR [esp+0x20]
100082ec:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
100082f3:	31 ca                	xor    edx,ecx
100082f5:	89 d7                	mov    edi,edx
100082f7:	c1 ef 06             	shr    edi,0x6
100082fa:	89 d5                	mov    ebp,edx
100082fc:	c1 ed 0e             	shr    ebp,0xe
100082ff:	89 d1                	mov    ecx,edx
10008301:	c1 e9 16             	shr    ecx,0x16
10008304:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
1000830b:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008311:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008317:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000831d:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10008323:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10008327:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
1000832e:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10008335:	33 44 24 24          	xor    eax,DWORD PTR [esp+0x24]
10008339:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10008340:	31 c8                	xor    eax,ecx
10008342:	89 c7                	mov    edi,eax
10008344:	c1 ef 06             	shr    edi,0x6
10008347:	89 c5                	mov    ebp,eax
10008349:	c1 ed 0e             	shr    ebp,0xe
1000834c:	89 c1                	mov    ecx,eax
1000834e:	c1 e9 16             	shr    ecx,0x16
10008351:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10008358:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000835e:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008364:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000836a:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10008370:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10008374:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
1000837b:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10008382:	33 54 24 28          	xor    edx,DWORD PTR [esp+0x28]
10008386:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
1000838d:	31 ca                	xor    edx,ecx
1000838f:	89 d7                	mov    edi,edx
10008391:	c1 ef 06             	shr    edi,0x6
10008394:	89 d5                	mov    ebp,edx
10008396:	c1 ed 0e             	shr    ebp,0xe
10008399:	89 d1                	mov    ecx,edx
1000839b:	c1 e9 16             	shr    ecx,0x16
1000839e:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
100083a5:	81 e6 fc 03 00 00    	and    esi,0x3fc
100083ab:	81 e7 fc 03 00 00    	and    edi,0x3fc
100083b1:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100083b7:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100083bd:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
100083c1:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
100083c8:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
100083cf:	33 44 24 2c          	xor    eax,DWORD PTR [esp+0x2c]
100083d3:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
100083da:	31 c8                	xor    eax,ecx
100083dc:	89 c7                	mov    edi,eax
100083de:	c1 ef 06             	shr    edi,0x6
100083e1:	89 c5                	mov    ebp,eax
100083e3:	c1 ed 0e             	shr    ebp,0xe
100083e6:	89 c1                	mov    ecx,eax
100083e8:	c1 e9 16             	shr    ecx,0x16
100083eb:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
100083f2:	81 e6 fc 03 00 00    	and    esi,0x3fc
100083f8:	81 e7 fc 03 00 00    	and    edi,0x3fc
100083fe:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008404:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000840a:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
1000840e:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10008415:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
1000841c:	33 54 24 30          	xor    edx,DWORD PTR [esp+0x30]
10008420:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10008427:	31 ca                	xor    edx,ecx
10008429:	89 d7                	mov    edi,edx
1000842b:	c1 ef 06             	shr    edi,0x6
1000842e:	89 d5                	mov    ebp,edx
10008430:	c1 ed 0e             	shr    ebp,0xe
10008433:	89 d1                	mov    ecx,edx
10008435:	c1 e9 16             	shr    ecx,0x16
10008438:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
1000843f:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008445:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000844b:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008451:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10008457:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
1000845b:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10008462:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10008469:	33 44 24 34          	xor    eax,DWORD PTR [esp+0x34]
1000846d:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10008474:	31 c8                	xor    eax,ecx
10008476:	89 c7                	mov    edi,eax
10008478:	c1 ef 06             	shr    edi,0x6
1000847b:	89 c5                	mov    ebp,eax
1000847d:	c1 ed 0e             	shr    ebp,0xe
10008480:	89 c1                	mov    ecx,eax
10008482:	c1 e9 16             	shr    ecx,0x16
10008485:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
1000848c:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008492:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008498:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000849e:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100084a4:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
100084a8:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
100084af:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
100084b6:	33 54 24 38          	xor    edx,DWORD PTR [esp+0x38]
100084ba:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
100084c1:	31 ca                	xor    edx,ecx
100084c3:	89 d7                	mov    edi,edx
100084c5:	c1 ef 06             	shr    edi,0x6
100084c8:	89 d5                	mov    ebp,edx
100084ca:	c1 ed 0e             	shr    ebp,0xe
100084cd:	89 d6                	mov    esi,edx
100084cf:	c1 ee 16             	shr    esi,0x16
100084d2:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
100084d9:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100084df:	81 e7 fc 03 00 00    	and    edi,0x3fc
100084e5:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100084eb:	81 e6 fc 03 00 00    	and    esi,0x3fc
100084f1:	8b 74 34 58          	mov    esi,DWORD PTR [esp+esi*1+0x58]
100084f5:	03 b4 2c 58 04 00 00 	add    esi,DWORD PTR [esp+ebp*1+0x458]
100084fc:	33 b4 3c 58 08 00 00 	xor    esi,DWORD PTR [esp+edi*1+0x858]
10008503:	33 44 24 3c          	xor    eax,DWORD PTR [esp+0x3c]
10008507:	03 b4 0c 58 0c 00 00 	add    esi,DWORD PTR [esp+ecx*1+0xc58]
1000850e:	31 f0                	xor    eax,esi
10008510:	89 c5                	mov    ebp,eax
10008512:	c1 ed 06             	shr    ebp,0x6
10008515:	89 c1                	mov    ecx,eax
10008517:	c1 e9 0e             	shr    ecx,0xe
1000851a:	89 c6                	mov    esi,eax
1000851c:	c1 ee 16             	shr    esi,0x16
1000851f:	8d 3c 85 00 00 00 00 	lea    edi,[eax*4+0x0]
10008526:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000852c:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008532:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10008538:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000853e:	8b 74 34 58          	mov    esi,DWORD PTR [esp+esi*1+0x58]
10008542:	03 b4 0c 58 04 00 00 	add    esi,DWORD PTR [esp+ecx*1+0x458]
10008549:	33 b4 2c 58 08 00 00 	xor    esi,DWORD PTR [esp+ebp*1+0x858]
10008550:	33 54 24 40          	xor    edx,DWORD PTR [esp+0x40]
10008554:	03 b4 3c 58 0c 00 00 	add    esi,DWORD PTR [esp+edi*1+0xc58]
1000855b:	89 f1                	mov    ecx,esi
1000855d:	31 d1                	xor    ecx,edx
1000855f:	33 44 24 44          	xor    eax,DWORD PTR [esp+0x44]
10008563:	4b                   	dec    ebx
10008564:	0f 85 21 fb ff ff    	jne    1000808b <_crypt_blowfish_rn+0x282f>
1000856a:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
1000856e:	89 84 9c e8 10 00 00 	mov    DWORD PTR [esp+ebx*4+0x10e8],eax
10008575:	89 8c 9c ec 10 00 00 	mov    DWORD PTR [esp+ebx*4+0x10ec],ecx
1000857c:	83 44 24 48 02       	add    DWORD PTR [esp+0x48],0x2
10008581:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
10008585:	83 f8 06             	cmp    eax,0x6
10008588:	0f 85 e2 fa ff ff    	jne    10008070 <_crypt_blowfish_rn+0x2814>
1000858e:	b9 07 00 00 00       	mov    ecx,0x7
10008593:	8b bc 24 1c 11 00 00 	mov    edi,DWORD PTR [esp+0x111c]
1000859a:	8b b4 24 18 11 00 00 	mov    esi,DWORD PTR [esp+0x1118]
100085a1:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100085a3:	8b 84 24 18 11 00 00 	mov    eax,DWORD PTR [esp+0x1118]
100085aa:	0f be 40 1c          	movsx  eax,BYTE PTR [eax+0x1c]
100085ae:	8a 80 00 a3 00 10    	mov    al,BYTE PTR [eax+0x1000a300]	100085b0: R_386_32	.data
100085b4:	83 e0 30             	and    eax,0x30
100085b7:	8a 80 c0 a2 00 10    	mov    al,BYTE PTR [eax+0x1000a2c0]	100085b9: R_386_32	.data
100085bd:	88 04 24             	mov    BYTE PTR [esp],al
100085c0:	8b 9c 24 1c 11 00 00 	mov    ebx,DWORD PTR [esp+0x111c]
100085c7:	88 43 1c             	mov    BYTE PTR [ebx+0x1c],al
100085ca:	6a 06                	push   0x6
100085cc:	8d 74 24 5c          	lea    esi,[esp+0x5c]
100085d0:	8d 9c 24 ec 10 00 00 	lea    ebx,[esp+0x10ec]
100085d7:	53                   	push   ebx
100085d8:	e8 f5 d1 ff ff       	call   100057d2 <BF_swap>
100085dd:	6a 17                	push   0x17
100085df:	53                   	push   ebx
100085e0:	8b 84 24 2c 11 00 00 	mov    eax,DWORD PTR [esp+0x112c]
100085e7:	83 c0 1d             	add    eax,0x1d
100085ea:	50                   	push   eax
100085eb:	e8 3d d1 ff ff       	call   1000572d <BF_encode>
100085f0:	8b 84 24 30 11 00 00 	mov    eax,DWORD PTR [esp+0x1130]
100085f7:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
100085fb:	68 a8 10 00 00       	push   0x10a8
10008600:	56                   	push   esi
10008601:	e8 0b d0 ff ff       	call   10005611 <clean>
10008606:	83 c4 1c             	add    esp,0x1c
10008609:	8b 84 24 1c 11 00 00 	mov    eax,DWORD PTR [esp+0x111c]
10008610:	eb 29                	jmp    1000863b <_crypt_blowfish_rn+0x2ddf>
10008612:	c7 05 00 00 00 00 22 00 00 00 	mov    DWORD PTR ds:0x0,0x22	10008614: R_386_32	_bcrypt_errno
1000861c:	b8 00 00 00 00       	mov    eax,0x0
10008621:	eb 18                	jmp    1000863b <_crypt_blowfish_rn+0x2ddf>
10008623:	80 fa 31             	cmp    dl,0x31
10008626:	0f 8e a3 d2 ff ff    	jle    100058cf <_crypt_blowfish_rn+0x73>
1000862c:	c7 05 00 00 00 00 16 00 00 00 	mov    DWORD PTR ds:0x0,0x16	1000862e: R_386_32	_bcrypt_errno
10008636:	b8 00 00 00 00       	mov    eax,0x0
1000863b:	81 c4 00 11 00 00    	add    esp,0x1100
10008641:	5b                   	pop    ebx
10008642:	5e                   	pop    esi
10008643:	5f                   	pop    edi
10008644:	5d                   	pop    ebp
10008645:	c3                   	ret    
10008646:	6a 10                	push   0x10
10008648:	8d 84 24 ec 10 00 00 	lea    eax,[esp+0x10ec]
1000864f:	50                   	push   eax
10008650:	e8 bc cf ff ff       	call   10005611 <clean>
10008655:	c7 05 00 00 00 00 16 00 00 00 	mov    DWORD PTR ds:0x0,0x16	10008657: R_386_32	_bcrypt_errno
1000865f:	83 c4 08             	add    esp,0x8
10008662:	b8 00 00 00 00       	mov    eax,0x0
10008667:	eb d2                	jmp    1000863b <_crypt_blowfish_rn+0x2ddf>

10008669 <_crypt_gensalt_blowfish_rn>:
10008669:	53                   	push   ebx
1000866a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
1000866e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
10008672:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
10008677:	7e 19                	jle    10008692 <_crypt_gensalt_blowfish_rn+0x29>
10008679:	83 7c 24 18 1d       	cmp    DWORD PTR [esp+0x18],0x1d
1000867e:	0f 8e 88 00 00 00    	jle    1000870c <_crypt_gensalt_blowfish_rn+0xa3>
10008684:	85 c9                	test   ecx,ecx
10008686:	74 33                	je     100086bb <_crypt_gensalt_blowfish_rn+0x52>
10008688:	8d 41 fc             	lea    eax,[ecx-0x4]
1000868b:	83 f8 1b             	cmp    eax,0x1b
1000868e:	76 30                	jbe    100086c0 <_crypt_gensalt_blowfish_rn+0x57>
10008690:	eb 07                	jmp    10008699 <_crypt_gensalt_blowfish_rn+0x30>
10008692:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
10008697:	7e 03                	jle    1000869c <_crypt_gensalt_blowfish_rn+0x33>
10008699:	c6 03 00             	mov    BYTE PTR [ebx],0x0
1000869c:	83 7c 24 18 1d       	cmp    DWORD PTR [esp+0x18],0x1d
100086a1:	7e 11                	jle    100086b4 <_crypt_gensalt_blowfish_rn+0x4b>
100086a3:	b8 16 00 00 00       	mov    eax,0x16
100086a8:	a3 00 00 00 00       	mov    ds:0x0,eax	100086a9: R_386_32	_bcrypt_errno
100086ad:	b8 00 00 00 00       	mov    eax,0x0
100086b2:	eb 56                	jmp    1000870a <_crypt_gensalt_blowfish_rn+0xa1>
100086b4:	b8 22 00 00 00       	mov    eax,0x22
100086b9:	eb ed                	jmp    100086a8 <_crypt_gensalt_blowfish_rn+0x3f>
100086bb:	b9 05 00 00 00       	mov    ecx,0x5
100086c0:	c6 03 24             	mov    BYTE PTR [ebx],0x24
100086c3:	c6 43 01 32          	mov    BYTE PTR [ebx+0x1],0x32
100086c7:	c6 43 02 61          	mov    BYTE PTR [ebx+0x2],0x61
100086cb:	c6 43 03 24          	mov    BYTE PTR [ebx+0x3],0x24
100086cf:	b8 cd cc cc cc       	mov    eax,0xcccccccd
100086d4:	f7 e1                	mul    ecx
100086d6:	89 d0                	mov    eax,edx
100086d8:	c1 e8 03             	shr    eax,0x3
100086db:	8d 50 30             	lea    edx,[eax+0x30]
100086de:	88 53 04             	mov    BYTE PTR [ebx+0x4],dl
100086e1:	8d 04 80             	lea    eax,[eax+eax*4]
100086e4:	01 c0                	add    eax,eax
100086e6:	29 c1                	sub    ecx,eax
100086e8:	83 c1 30             	add    ecx,0x30
100086eb:	88 4b 05             	mov    BYTE PTR [ebx+0x5],cl
100086ee:	c6 43 06 24          	mov    BYTE PTR [ebx+0x6],0x24
100086f2:	6a 10                	push   0x10
100086f4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
100086f8:	8d 43 07             	lea    eax,[ebx+0x7]
100086fb:	50                   	push   eax
100086fc:	e8 2c d0 ff ff       	call   1000572d <BF_encode>
10008701:	c6 43 1d 00          	mov    BYTE PTR [ebx+0x1d],0x0
10008705:	83 c4 0c             	add    esp,0xc
10008708:	89 d8                	mov    eax,ebx
1000870a:	5b                   	pop    ebx
1000870b:	c3                   	ret    
1000870c:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
10008711:	7f 86                	jg     10008699 <_crypt_gensalt_blowfish_rn+0x30>
10008713:	b8 22 00 00 00       	mov    eax,0x22
10008718:	eb 8e                	jmp    100086a8 <_crypt_gensalt_blowfish_rn+0x3f>

1000871a <bcrypt_gensalt>:
1000871a:	57                   	push   edi
1000871b:	56                   	push   esi
1000871c:	53                   	push   ebx
1000871d:	83 ec 10             	sub    esp,0x10
10008720:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
10008724:	89 e3                	mov    ebx,esp
10008726:	8d 74 24 10          	lea    esi,[esp+0x10]
1000872a:	e8 fc ff ff ff       	call   1000872b <bcrypt_gensalt+0x11>	1000872b: R_386_PC32	_bcrypt_rand
1000872f:	88 03                	mov    BYTE PTR [ebx],al
10008731:	43                   	inc    ebx
10008732:	39 f3                	cmp    ebx,esi
10008734:	75 f4                	jne    1000872a <bcrypt_gensalt+0x10>
10008736:	8d 47 fc             	lea    eax,[edi-0x4]
10008739:	83 f8 1b             	cmp    eax,0x1b
1000873c:	76 05                	jbe    10008743 <bcrypt_gensalt+0x29>
1000873e:	bf 0c 00 00 00       	mov    edi,0xc
10008743:	83 ec 0c             	sub    esp,0xc
10008746:	6a 40                	push   0x40
10008748:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
1000874c:	6a 10                	push   0x10
1000874e:	8d 44 24 18          	lea    eax,[esp+0x18]
10008752:	50                   	push   eax
10008753:	57                   	push   edi
10008754:	e8 10 ff ff ff       	call   10008669 <_crypt_gensalt_blowfish_rn>
10008759:	85 c0                	test   eax,eax
1000875b:	0f 94 c0             	sete   al
1000875e:	0f b6 c0             	movzx  eax,al
10008761:	83 c4 30             	add    esp,0x30
10008764:	5b                   	pop    ebx
10008765:	5e                   	pop    esi
10008766:	5f                   	pop    edi
10008767:	c3                   	ret    

10008768 <bcrypt_hashpw>:
10008768:	6a 40                	push   0x40
1000876a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
1000876e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
10008772:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
10008776:	e8 e1 d0 ff ff       	call   1000585c <_crypt_blowfish_rn>
1000877b:	83 c4 10             	add    esp,0x10
1000877e:	85 c0                	test   eax,eax
10008780:	0f 94 c0             	sete   al
10008783:	0f b6 c0             	movzx  eax,al
10008786:	c3                   	ret    
10008787:	90                   	nop

10008788 <TERMINAL_KEYBUFFER_IN_SIZE>:
10008788:	80 00 00 00                                         ....

1000878c <TERMINAL_KEYBUFFER_OUT_SIZE>:
1000878c:	80 00 00 00 2e 00 2e 2e 00 2f 00 43 6f 75 6c 64     ........./.Could
1000879c:	6e 27 74 20 6f 70 65 6e 20 62 61 73 65 20 70 61     n't open base pa
100087ac:	74 68 2e 0a 00 25 73 20 2d 3e 20 25 73 0a 00 43     th...%s -> %s..C
100087bc:	4f 55 4c 44 20 4e 4f 54 20 43 52 45 41 54 45 00     OULD NOT CREATE.
100087cc:	43 4f 55 4c 44 20 4e 4f 54 20 43 4f 50 59 00 4e     COULD NOT COPY.N
100087dc:	4f 20 4d 45 4d 4f 52 59 00 42 61 63 6b 75 70 00     O MEMORY.Backup.
100087ec:	43 3a 2f 42 61 6e 61 6e 61 2f 53 79 73 74 65 6d     C:/Banana/System
100087fc:	2f 42 61 63 6b 75 70 2f 00 30 31 32 33 34 35 36     /Backup/.0123456
1000880c:	37 38 39 41 42 43 44 45 46 00 43 3a 2f 55 73 65     789ABCDEF.C:/Use
1000881c:	72 73 2f 00 2f 44 65 73 6b 74 6f 70 00 2f 44 6f     rs/./Desktop./Do
1000882c:	63 75 6d 65 6e 74 73 00 2f 44 6f 77 6e 6c 6f 61     cuments./Downloa
1000883c:	64 73 00 2f 50 68 6f 74 6f 73 00 2f 54 72 61 73     ds./Photos./Tras
1000884c:	68 20 42 69 6e 00 2f 4d 75 73 69 63 00 2f 4d 6f     h Bin./Music./Mo
1000885c:	76 69 65 73 00 43 3a 2f 42 61 6e 61 6e 61 2f 52     vies.C:/Banana/R
1000886c:	65 67 69 73 74 72 79 2f 55 73 65 72 2f 00 00 00     egistry/User/...
1000887c:	43 3a 2f 42 61 6e 61 6e 61 2f 52 65 67 69 73 74     C:/Banana/Regist
1000888c:	72 79 2f 44 65 66 61 75 6c 74 55 73 65 72 00 00     ry/DefaultUser..
1000889c:	43 68 65 63 6b 69 6e 67 0a 20 73 79 73 74 65 6d     Checking. system
100088ac:	0a 20 72 65 71 75 69 72 65 6d 65 6e 74 73 0a 0a     . requirements..
100088bc:	20 4c 65 67 61 6c 0a 20 6e 6f 74 69 63 65 73 0a      Legal. notices.
100088cc:	0a 20 43 68 6f 6f 73 69 6e 67 20 61 0a 20 70 61     . Choosing a. pa
100088dc:	72 74 69 74 69 6f 6e 0a 0a 20 46 6f 72 6d 61 74     rtition.. Format
100088ec:	74 69 6e 67 0a 0a 20 43 6f 70 79 69 6e 67 20 66     ting.. Copying f
100088fc:	69 6c 65 73 0a 0a 20 52 65 73 74 61 72 74 69 6e     iles.. Restartin
1000890c:	67 0a 20 79 6f 75 72 20 63 6f 6d 70 75 74 65 72     g. your computer
1000891c:	0a 0a 00 20 46 69 6e 61 6c 69 73 69 6e 67 20 74     ... Finalising t
1000892c:	68 65 0a 20 69 6e 73 74 61 6c 6c 61 74 69 6f 6e     he. installation
1000893c:	00 00 00 00 50 6c 65 61 73 65 20 77 61 69 74 20     ....Please wait 
1000894c:	77 68 69 6c 65 20 74 68 65 20 69 6e 73 74 61 6c     while the instal
1000895c:	6c 20 66 69 6e 69 73 68 65 73 2e 00 10 20 00 20     l finishes... . 
1000896c:	20 00 41 6c 6c 6f 63 61 74 69 6e 67 20 74 68 65      .Allocating the
1000897c:	20 73 77 61 70 66 69 6c 65 00 55 70 64 61 74 69      swapfile.Updati
1000898c:	6e 67 20 74 68 65 20 72 65 67 69 73 74 72 79 00     ng the registry.
1000899c:	43 72 65 61 74 69 6e 67 20 75 73 65 72 20 61 63     Creating user ac
100089ac:	63 6f 75 6e 74 00 49 6e 73 74 61 6c 6c 69 6e 67     count.Installing
100089bc:	20 70 61 63 6b 61 67 65 73 00 42 61 63 6b 69 6e      packages.Backin
100089cc:	67 20 75 70 20 73 79 73 74 65 6d 20 66 69 6c 65     g up system file
100089dc:	73 00 46 69 6e 69 73 68 69 6e 67 20 74 6f 75 63     s.Finishing touc
100089ec:	68 65 73 00 51 51 2d 30 30 30 2d 30 30 30 2d 30     hes.QQ-000-000-0
100089fc:	30 30 2d 51 00 00 00 00 43 3a 2f 42 61 6e 61 6e     00-Q....C:/Banan
10008a0c:	61 2f 53 79 73 74 65 6d 2f 74 69 6d 65 7a 6f 6e     a/System/timezon
10008a1c:	65 73 2e 74 78 74 00 73 69 7a 20 3d 20 25 64 0a     es.txt.siz = %d.
10008a2c:	00 20 00 2e 2e 2e 20 00 25 64 3b 20 25 73 0a 00     . .... .%d; %s..
10008a3c:	53 65 74 74 69 6e 67 20 75 70 20 74 68 65 20 73     Setting up the s
10008a4c:	79 73 74 65 6d 20 66 6f 72 20 74 68 65 20 66 69     ystem for the fi
10008a5c:	72 73 74 20 74 69 6d 65 00 0a 0a 0a 0a 0a 0a 00     rst time........
10008a6c:	54 65 73 74 00 41 41 2d 30 30 30 30 30 2d 30 30     Test.AA-00000-00
10008a7c:	30 30 30 2d 41 00 57 57 2d 38 38 33 38 38 2d 35     000-A.WW-88388-5
10008a8c:	35 35 35 35 2d 4e 00 42 61 6e 61 6e 61 20 53 65     5555-N.Banana Se
10008a9c:	74 75 70 00 50 6c 65 61 73 65 20 65 6e 74 65 72     tup.Please enter
10008aac:	20 79 6f 75 72 20 64 65 74 61 69 6c 73 2e 20 50      your details. P
10008abc:	72 65 73 73 20 54 41 42 20 74 6f 20 73 77 69 74     ress TAB to swit
10008acc:	63 68 00 62 65 74 77 65 65 6e 20 66 69 65 6c 64     ch.between field
10008adc:	73 2e 00 4e 61 6d 65 00 43 6f 6d 70 61 6e 79 00     s..Name.Company.
10008aec:	50 61 73 73 77 6f 72 64 00 43 6f 6e 66 69 72 6d     Password.Confirm
10008afc:	00 70 61 73 73 77 6f 72 64 00 00 00 20 20 20 20     .password...    
10008b0c:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
10008b1c:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
10008b2c:	00 20 20 11 00 20 20 20 00 2a 00 50 72 65 73 73     .  ..   .*.Press
10008b3c:	20 45 4e 54 45 52 20 74 6f 20 73 75 62 6d 69 74      ENTER to submit
10008b4c:	00 20 20 20 20 20 20 20 20 20 20 20 00 20 20 20     .           .   
10008b5c:	4f 4b 20 20 20 00 44 61 74 65 20 61 6e 64 20 54     OK   .Date and T
10008b6c:	69 6d 65 00 31 34 2f 30 35 2f 32 30 32 31 20 31     ime.14/05/2021 1
10008b7c:	38 3a 35 35 3a 30 30 00 50 6c 65 61 73 65 20 65     8:55:00.Please e
10008b8c:	6e 74 65 72 20 74 68 65 20 63 75 72 72 65 6e 74     nter the current
10008b9c:	20 64 61 74 65 20 61 6e 64 20 74 69 6d 65 2c 00      date and time,.
10008bac:	61 6e 64 20 74 68 65 6e 20 70 72 65 73 73 20 45     and then press E
10008bbc:	4e 54 45 52 2e 00 44 44 2f 4d 4d 2f 59 59 59 59     NTER..DD/MM/YYYY
10008bcc:	20 48 48 3a 4d 4d 3a 53 53 00 45 53 43 3a 20 47      HH:MM:SS.ESC: G
10008bdc:	6f 20 62 61 63 6b 20 61 20 73 63 72 65 65 6e 00     o back a screen.
10008bec:	50 6c 65 61 73 65 20 73 65 6c 65 63 74 20 79 6f     Please select yo
10008bfc:	75 72 20 74 69 6d 65 7a 6f 6e 65 20 61 6e 64 20     ur timezone and 
10008c0c:	74 68 65 6e 20 70 72 65 73 73 20 45 4e 54 45 52     then press ENTER
10008c1c:	2e 00 55 73 65 72 20 49 6e 74 65 72 66 61 63 65     ..User Interface
10008c2c:	00 00 00 00 50 6c 65 61 73 65 20 73 65 6c 65 63     ....Please selec
10008c3c:	74 20 74 68 65 20 75 73 65 72 20 69 6e 74 65 72     t the user inter
10008c4c:	66 61 63 65 20 79 6f 75 20 77 61 6e 74 20 42 61     face you want Ba
10008c5c:	6e 61 6e 61 00 00 00 00 74 6f 20 62 6f 6f 74 20     nana....to boot 
10008c6c:	69 6e 74 6f 20 62 79 20 64 65 66 61 75 6c 74 20     into by default 
10008c7c:	77 68 65 6e 20 79 6f 75 20 73 74 61 72 74 20 74     when you start t
10008c8c:	68 65 20 63 6f 6d 70 75 74 65 72 2e 00 49 6e 76     he computer..Inv
10008c9c:	61 6c 69 64 20 50 72 6f 64 75 63 74 20 4b 65 79     alid Product Key
10008cac:	00 00 00 00 59 6f 75 20 64 6f 20 6e 6f 74 20 68     ....You do not h
10008cbc:	61 76 65 20 61 20 76 61 6c 69 64 20 70 72 6f 64     ave a valid prod
10008ccc:	75 63 74 20 6b 65 79 2e 0a 00 00 00 59 6f 75 20     uct key.....You 
10008cdc:	6e 65 65 64 20 61 20 76 61 6c 69 64 20 70 72 6f     need a valid pro
10008cec:	64 75 63 74 20 6b 65 79 20 69 6e 20 6f 72 64 65     duct key in orde
10008cfc:	72 20 74 6f 00 75 73 65 20 42 61 6e 61 6e 61 2e     r to.use Banana.
10008d0c:	00 00 00 00 50 72 65 73 73 20 45 4e 54 45 52 20     ....Press ENTER 
10008d1c:	74 6f 20 72 65 2d 65 6e 74 65 72 20 79 6f 75 72     to re-enter your
10008d2c:	20 70 72 6f 64 75 63 74 20 6b 65 79 2e 00 50 72      product key..Pr
10008d3c:	6f 64 75 63 74 20 4b 65 79 00 00 00 50 6c 65 61     oduct Key...Plea
10008d4c:	73 65 20 65 6e 74 65 72 20 79 6f 75 72 20 70 72     se enter your pr
10008d5c:	6f 64 75 63 74 20 6b 65 79 20 62 65 6c 6f 77 2c     oduct key below,
10008d6c:	00 00 00 00 54 68 65 20 65 6e 74 65 72 65 64 20     ....The entered 
10008d7c:	70 72 6f 64 75 63 74 20 6b 65 79 20 77 61 73 20     product key was 
10008d8c:	69 6e 76 61 6c 69 64 2e 00 00 00 00 50 72 65 73     invalid.....Pres
10008d9c:	73 20 61 6e 79 20 6b 65 79 20 74 6f 20 63 6f 6e     s any key to con
10008dac:	74 69 6e 75 65 20 61 6e 64 20 74 68 65 6e 00 00     tinue and then..
10008dbc:	65 6e 74 65 72 20 74 68 65 20 70 72 6f 64 75 63     enter the produc
10008dcc:	74 20 6b 65 79 20 63 6f 72 72 65 63 74 6c 79 2e     t key correctly.
10008ddc:	00 46 69 6e 61 6c 69 73 69 6e 67 20 49 6e 73 74     .Finalising Inst
10008dec:	61 6c 6c 61 74 69 6f 6e 00 40 6d 65 6d 6f 72 79     allation.@memory
10008dfc:	3a 73 77 61 70 66 69 6c 65 00 73 79 73 74 65 6d     :swapfile.system
10008e0c:	00 43 3a 2f 42 61 6e 61 6e 61 2f 52 65 67 69 73     .C:/Banana/Regis
10008e1c:	74 72 79 2f 53 79 73 74 65 6d 00 43 3a 2f 42 61     try/System.C:/Ba
10008e2c:	6e 61 6e 61 2f 52 65 67 69 73 74 72 79 2f 55 73     nana/Registry/Us
10008e3c:	65 72 00 00 43 3a 2f 42 61 6e 61 6e 61 2f 52 65     er..C:/Banana/Re
10008e4c:	67 69 73 74 72 79 2f 44 65 66 61 75 6c 74 53 79     gistry/DefaultSy
10008e5c:	73 74 65 6d 00 00 00 00 20 42 6f 6f 74 20 74 6f     stem.... Boot to
10008e6c:	20 63 6f 6d 6d 61 6e 64 20 6c 69 6e 65 20 20 20      command line   
10008e7c:	20 20 20 20 20 20 20 20 20 20 20 20 00 00 00 00                 ....
10008e8c:	20 42 6f 6f 74 20 74 6f 20 67 72 61 70 68 69 63      Boot to graphic
10008e9c:	61 6c 20 69 6e 74 65 72 66 61 63 65 20 28 56 47     al interface (VG
10008eac:	41 29 20 20 00 00 00 00 20 42 6f 6f 74 20 74 6f     A)  .... Boot to
10008ebc:	20 67 72 61 70 68 69 63 61 6c 20 69 6e 74 65 72      graphical inter
10008ecc:	66 61 63 65 20 28 56 45 53 41 29 20 00 00 00 00     face (VESA) ....
10008edc:	64 8e 00 10 8c 8e 00 10 b4 8e 00 10 4c 6f 61 64     d...........Load	10008edc: R_386_32	.text
	10008ee0: R_386_32	.text
	10008ee4: R_386_32	.text
10008eec:	69 6e 67 20 65 78 74 65 6e 73 69 6f 6e 73 2e 2e     ing extensions..
10008efc:	2e 00 0a 0a 3a 0a 00 2f 25 73 0a 00 43 3a 2f 42     ....:../%s..C:/B
10008f0c:	61 6e 61 6e 61 2f 53 79 73 74 65 6d 2f 73 65 74     anana/System/set
10008f1c:	75 70 69 73 64 2e 6f 6e 65 00 53 59 53 49 4e 49     upisd.one.SYSINI
10008f2c:	54 20 46 41 49 4c 55 52 45 00 43 3a 2f 42 61 6e     T FAILURE.C:/Ban
10008f3c:	61 6e 61 2f 53 79 73 74 65 6d 2f 63 6f 6d 6d 61     ana/System/comma
10008f4c:	6e 64 2e 65 78 65 00 43 3a 2f 44 45 2e 42 55 47     nd.exe.C:/DE.BUG
10008f5c:	00 43 3a 2f 42 61 6e 61 6e 61 2f 44 72 69 76 65     .C:/Banana/Drive
10008f6c:	72 73 2f 00 43 3a 2f 42 61 6e 61 6e 61 2f 53 79     rs/.C:/Banana/Sy
10008f7c:	73 74 65 6d 2f 00 43 3a 2f 42 61 6e 61 6e 61 2f     stem/.C:/Banana/
10008f8c:	52 65 67 69 73 74 72 79 2f 00 00 00 43 3a 2f 42     Registry/...C:/B
10008f9c:	61 6e 61 6e 61 2f 52 65 67 69 73 74 72 79 2f 53     anana/Registry/S
10008fac:	79 73 74 65 6d 2f 53 59 53 54 45 4d 2e 52 45 47     ystem/SYSTEM.REG
10008fbc:	00 42 41 4e 41 4e 41 00 53 45 54 55 50 00 42 4f     .BANANA.SETUP.BO
10008fcc:	4f 54 00 42 41 4e 41 4e 41 2f 53 45 54 55 50 00     OT.BANANA/SETUP.
10008fdc:	4e 41 4d 45 00 43 4f 4d 50 41 4e 59 00 50 52 4f     NAME.COMPANY.PRO
10008fec:	44 55 43 54 4b 45 59 00 42 41 4e 41 4e 41 2f 42     DUCTKEY.BANANA/B
10008ffc:	4f 4f 54 00 41 55 54 4f 47 55 49 00 42 41 4e 41     OOT.AUTOGUI.BANA
1000900c:	4e 41 2f 53 45 54 55 50 2f 4e 41 4d 45 00 42 41     NA/SETUP/NAME.BA
1000901c:	4e 41 4e 41 2f 53 45 54 55 50 2f 43 4f 4d 50 41     NANA/SETUP/COMPA
1000902c:	4e 59 00 42 41 4e 41 4e 41 2f 53 45 54 55 50 2f     NY.BANANA/SETUP/
1000903c:	50 52 4f 44 55 43 54 4b 45 59 00 00 54 68 65 20     PRODUCTKEY..The 
1000904c:	69 6e 73 74 61 6c 6c 61 74 69 6f 6e 20 68 61 73     installation has
1000905c:	20 62 65 65 6e 20 63 6f 6d 70 6c 65 74 65 64 2e      been completed.
1000906c:	0a 00 00 00 50 6c 65 61 73 65 20 70 72 65 73 73     ....Please press
1000907c:	20 45 4e 54 45 52 20 74 6f 20 72 65 73 74 61 72      ENTER to restar
1000908c:	74 20 79 6f 75 72 20 63 6f 6d 70 75 74 65 72 00     t your computer.
1000909c:	61 6e 64 20 73 74 61 72 74 20 42 61 6e 61 6e 61     and start Banana
100090ac:	2e 00 00 00 50 4c 45 41 53 45 20 4d 41 4e 55 41     ....PLEASE MANUA
100090bc:	4c 4c 59 20 52 45 53 54 41 52 54 20 59 4f 55 52     LLY RESTART YOUR
100090cc:	20 43 4f 4d 50 55 54 45 52 00 42 41 4e 41 4e 41      COMPUTER.BANANA
100090dc:	2f 42 4f 4f 54 2f 41 55 54 4f 47 55 49 00 50 72     /BOOT/AUTOGUI.Pr
100090ec:	6f 64 75 63 74 20 4b 65 79 20 55 70 64 61 74 65     oduct Key Update
100090fc:	64 00 00 00 59 6f 75 72 20 70 72 6f 64 75 63 74     d...Your product
1000910c:	20 6b 65 79 20 68 61 73 20 62 65 65 6e 20 75 70      key has been up
1000911c:	64 61 74 65 64 2e 0a 00 49 74 20 69 73 20 73 61     dated...It is sa
1000912c:	66 65 20 74 6f 20 74 75 72 6e 20 6f 66 66 20 79     fe to turn off y
1000913c:	6f 75 72 20 50 43 00 63 61 6c 6c 00 43 3a 2f 42     our PC.call.C:/B
1000914c:	61 6e 61 6e 61 2f 53 79 73 74 65 6d 2f 69 6e 69     anana/System/ini
1000915c:	74 2e 62 61 74 00 00 00 36 8f 00 10 43 91 00 10     t.bat...6...C...	10009164: R_386_32	.text
	10009168: R_386_32	.text
1000916c:	48 91 00 10 00 00 00 00                             H.......	1000916c: R_386_32	.text
