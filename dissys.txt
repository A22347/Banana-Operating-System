
packages/system/32/0001/system.dll:     file format elf32-i386


Disassembly of section .text:

10000000 <beginx(void*)>:
10000000:	55                   	push   ebp
10000001:	89 e5                	mov    ebp,esp
10000003:	83 ec 08             	sub    esp,0x8
10000006:	83 ec 0c             	sub    esp,0xc
10000009:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000000c:	e8 fc ff ff ff       	call   1000000d <beginx(void*)+0xd>	1000000d: R_386_PC32	begin(void*)
10000011:	83 c4 10             	add    esp,0x10
10000014:	90                   	nop
10000015:	c9                   	leave  
10000016:	c3                   	ret    

10000017 <memcmp(void*, void*, unsigned long)>:
10000017:	55                   	push   ebp
10000018:	89 e5                	mov    ebp,esp
1000001a:	83 ec 10             	sub    esp,0x10
1000001d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000020:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
10000023:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000026:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
10000029:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
1000002c:	8d 50 ff             	lea    edx,[eax-0x1]
1000002f:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
10000032:	85 c0                	test   eax,eax
10000034:	74 12                	je     10000048 <memcmp(void*, void*, unsigned long)+0x31>
10000036:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000039:	8a 10                	mov    dl,BYTE PTR [eax]
1000003b:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
1000003e:	8a 00                	mov    al,BYTE PTR [eax]
10000040:	38 c2                	cmp    dl,al
10000042:	75 04                	jne    10000048 <memcmp(void*, void*, unsigned long)+0x31>
10000044:	b0 01                	mov    al,0x1
10000046:	eb 02                	jmp    1000004a <memcmp(void*, void*, unsigned long)+0x33>
10000048:	b0 00                	mov    al,0x0
1000004a:	84 c0                	test   al,al
1000004c:	74 08                	je     10000056 <memcmp(void*, void*, unsigned long)+0x3f>
1000004e:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
10000051:	ff 45 f8             	inc    DWORD PTR [ebp-0x8]
10000054:	eb d3                	jmp    10000029 <memcmp(void*, void*, unsigned long)+0x12>
10000056:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000059:	8a 00                	mov    al,BYTE PTR [eax]
1000005b:	0f b6 d0             	movzx  edx,al
1000005e:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
10000061:	8a 00                	mov    al,BYTE PTR [eax]
10000063:	0f b6 c0             	movzx  eax,al
10000066:	29 c2                	sub    edx,eax
10000068:	89 d0                	mov    eax,edx
1000006a:	c9                   	leave  
1000006b:	c3                   	ret    

1000006c <memmove>:
1000006c:	55                   	push   ebp
1000006d:	89 e5                	mov    ebp,esp
1000006f:	83 ec 10             	sub    esp,0x10
10000072:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000075:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
10000078:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
1000007b:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
1000007e:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
10000081:	3b 45 fc             	cmp    eax,DWORD PTR [ebp-0x4]
10000084:	76 1b                	jbe    100000a1 <memmove+0x35>
10000086:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
1000008a:	74 46                	je     100000d2 <memmove+0x66>
1000008c:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
1000008f:	8a 10                	mov    dl,BYTE PTR [eax]
10000091:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000094:	88 10                	mov    BYTE PTR [eax],dl
10000096:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
10000099:	ff 45 f8             	inc    DWORD PTR [ebp-0x8]
1000009c:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
1000009f:	eb e5                	jmp    10000086 <memmove+0x1a>
100000a1:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
100000a4:	3b 45 fc             	cmp    eax,DWORD PTR [ebp-0x4]
100000a7:	73 29                	jae    100000d2 <memmove+0x66>
100000a9:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
100000ac:	48                   	dec    eax
100000ad:	01 45 fc             	add    DWORD PTR [ebp-0x4],eax
100000b0:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
100000b3:	48                   	dec    eax
100000b4:	01 45 f8             	add    DWORD PTR [ebp-0x8],eax
100000b7:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
100000bb:	74 15                	je     100000d2 <memmove+0x66>
100000bd:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
100000c0:	8a 10                	mov    dl,BYTE PTR [eax]
100000c2:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100000c5:	88 10                	mov    BYTE PTR [eax],dl
100000c7:	ff 4d fc             	dec    DWORD PTR [ebp-0x4]
100000ca:	ff 4d f8             	dec    DWORD PTR [ebp-0x8]
100000cd:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
100000d0:	eb e5                	jmp    100000b7 <memmove+0x4b>
100000d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100000d5:	c9                   	leave  
100000d6:	c3                   	ret    

100000d7 <memset>:
100000d7:	55                   	push   ebp
100000d8:	89 e5                	mov    ebp,esp
100000da:	83 ec 10             	sub    esp,0x10
100000dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100000e0:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
100000e3:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
100000e7:	74 12                	je     100000fb <memset+0x24>
100000e9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100000ec:	88 c2                	mov    dl,al
100000ee:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100000f1:	88 10                	mov    BYTE PTR [eax],dl
100000f3:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
100000f6:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
100000f9:	eb e8                	jmp    100000e3 <memset+0xc>
100000fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100000fe:	c9                   	leave  
100000ff:	c3                   	ret    

10000100 <strlen>:
10000100:	55                   	push   ebp
10000101:	89 e5                	mov    ebp,esp
10000103:	83 ec 10             	sub    esp,0x10
10000106:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
1000010d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000110:	8a 00                	mov    al,BYTE PTR [eax]
10000112:	84 c0                	test   al,al
10000114:	74 0c                	je     10000122 <strlen+0x22>
10000116:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000119:	40                   	inc    eax
1000011a:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
1000011d:	ff 45 08             	inc    DWORD PTR [ebp+0x8]
10000120:	eb eb                	jmp    1000010d <strlen+0xd>
10000122:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000125:	c9                   	leave  
10000126:	c3                   	ret    

10000127 <strpbrk(char const*, char const*)>:
10000127:	55                   	push   ebp
10000128:	89 e5                	mov    ebp,esp
1000012a:	83 ec 10             	sub    esp,0x10
1000012d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000130:	8a 00                	mov    al,BYTE PTR [eax]
10000132:	84 c0                	test   al,al
10000134:	74 30                	je     10000166 <strpbrk(char const*, char const*)+0x3f>
10000136:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000139:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
1000013c:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000013f:	8a 00                	mov    al,BYTE PTR [eax]
10000141:	84 c0                	test   al,al
10000143:	74 18                	je     1000015d <strpbrk(char const*, char const*)+0x36>
10000145:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000148:	8a 10                	mov    dl,BYTE PTR [eax]
1000014a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000014d:	8a 00                	mov    al,BYTE PTR [eax]
1000014f:	38 c2                	cmp    dl,al
10000151:	75 05                	jne    10000158 <strpbrk(char const*, char const*)+0x31>
10000153:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000156:	eb 13                	jmp    1000016b <strpbrk(char const*, char const*)+0x44>
10000158:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
1000015b:	eb df                	jmp    1000013c <strpbrk(char const*, char const*)+0x15>
1000015d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000160:	40                   	inc    eax
10000161:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
10000164:	eb c7                	jmp    1000012d <strpbrk(char const*, char const*)+0x6>
10000166:	b8 00 00 00 00       	mov    eax,0x0
1000016b:	c9                   	leave  
1000016c:	c3                   	ret    

1000016d <strtok>:
1000016d:	55                   	push   ebp
1000016e:	89 e5                	mov    ebp,esp
10000170:	83 ec 10             	sub    esp,0x10
10000173:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000176:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
10000179:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000017c:	85 c0                	test   eax,eax
1000017e:	75 18                	jne    10000198 <strtok+0x2b>
10000180:	a1 00 00 00 00       	mov    eax,ds:0x0	10000181: R_386_32	SavedPtr
10000185:	85 c0                	test   eax,eax
10000187:	75 07                	jne    10000190 <strtok+0x23>
10000189:	b8 00 00 00 00       	mov    eax,0x0
1000018e:	eb 6f                	jmp    100001ff <strtok+0x92>
10000190:	a1 00 00 00 00       	mov    eax,ds:0x0	10000191: R_386_32	SavedPtr
10000195:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
10000198:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000019b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
1000019e:	50                   	push   eax
1000019f:	e8 fc ff ff ff       	call   100001a0 <strtok+0x33>	100001a0: R_386_PC32	strpbrk(char const*, char const*)
100001a4:	83 c4 08             	add    esp,0x8
100001a7:	a3 00 00 00 00       	mov    ds:0x0,eax	100001a8: R_386_32	SavedPtr
100001ac:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	100001ae: R_386_32	SavedPtr
100001b2:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100001b5:	39 c2                	cmp    edx,eax
100001b7:	75 22                	jne    100001db <strtok+0x6e>
100001b9:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100001bc:	8d 50 01             	lea    edx,[eax+0x1]
100001bf:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
100001c2:	c6 00 00             	mov    BYTE PTR [eax],0x0
100001c5:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100001c8:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
100001cb:	50                   	push   eax
100001cc:	e8 fc ff ff ff       	call   100001cd <strtok+0x60>	100001cd: R_386_PC32	strpbrk(char const*, char const*)
100001d1:	83 c4 08             	add    esp,0x8
100001d4:	a3 00 00 00 00       	mov    ds:0x0,eax	100001d5: R_386_32	SavedPtr
100001d9:	eb d1                	jmp    100001ac <strtok+0x3f>
100001db:	a1 00 00 00 00       	mov    eax,ds:0x0	100001dc: R_386_32	SavedPtr
100001e0:	85 c0                	test   eax,eax
100001e2:	74 16                	je     100001fa <strtok+0x8d>
100001e4:	a1 00 00 00 00       	mov    eax,ds:0x0	100001e5: R_386_32	SavedPtr
100001e9:	8d 50 01             	lea    edx,[eax+0x1]
100001ec:	89 15 00 00 00 00    	mov    DWORD PTR ds:0x0,edx	100001ee: R_386_32	SavedPtr
100001f2:	c6 00 00             	mov    BYTE PTR [eax],0x0
100001f5:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100001f8:	eb 05                	jmp    100001ff <strtok+0x92>
100001fa:	b8 00 00 00 00       	mov    eax,0x0
100001ff:	c9                   	leave  
10000200:	c3                   	ret    

10000201 <strcpy>:
10000201:	55                   	push   ebp
10000202:	89 e5                	mov    ebp,esp
10000204:	83 ec 10             	sub    esp,0x10
10000207:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000020a:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
1000020d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000210:	8a 00                	mov    al,BYTE PTR [eax]
10000212:	84 c0                	test   al,al
10000214:	74 12                	je     10000228 <strcpy+0x27>
10000216:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000219:	8a 10                	mov    dl,BYTE PTR [eax]
1000021b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000021e:	88 10                	mov    BYTE PTR [eax],dl
10000220:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
10000223:	ff 45 0c             	inc    DWORD PTR [ebp+0xc]
10000226:	eb e5                	jmp    1000020d <strcpy+0xc>
10000228:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000022b:	c6 00 00             	mov    BYTE PTR [eax],0x0
1000022e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000231:	c9                   	leave  
10000232:	c3                   	ret    

10000233 <strncpyxx(char*, char const*, unsigned long)>:
10000233:	55                   	push   ebp
10000234:	89 e5                	mov    ebp,esp
10000236:	83 ec 10             	sub    esp,0x10
10000239:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000023c:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
1000023f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000242:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
10000245:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
10000249:	74 23                	je     1000026e <strncpyxx(char*, char const*, unsigned long)+0x3b>
1000024b:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
1000024e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10000251:	8d 42 01             	lea    eax,[edx+0x1]
10000254:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
10000257:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000025a:	8d 48 01             	lea    ecx,[eax+0x1]
1000025d:	89 4d fc             	mov    DWORD PTR [ebp-0x4],ecx
10000260:	8a 12                	mov    dl,BYTE PTR [edx]
10000262:	88 10                	mov    BYTE PTR [eax],dl
10000264:	8a 00                	mov    al,BYTE PTR [eax]
10000266:	84 c0                	test   al,al
10000268:	74 04                	je     1000026e <strncpyxx(char*, char const*, unsigned long)+0x3b>
1000026a:	b0 01                	mov    al,0x1
1000026c:	eb 02                	jmp    10000270 <strncpyxx(char*, char const*, unsigned long)+0x3d>
1000026e:	b0 00                	mov    al,0x0
10000270:	84 c0                	test   al,al
10000272:	74 02                	je     10000276 <strncpyxx(char*, char const*, unsigned long)+0x43>
10000274:	eb cf                	jmp    10000245 <strncpyxx(char*, char const*, unsigned long)+0x12>
10000276:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
10000279:	8d 50 ff             	lea    edx,[eax-0x1]
1000027c:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
1000027f:	85 c0                	test   eax,eax
10000281:	0f 95 c0             	setne  al
10000284:	84 c0                	test   al,al
10000286:	74 0b                	je     10000293 <strncpyxx(char*, char const*, unsigned long)+0x60>
10000288:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000028b:	c6 00 00             	mov    BYTE PTR [eax],0x0
1000028e:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
10000291:	eb e3                	jmp    10000276 <strncpyxx(char*, char const*, unsigned long)+0x43>
10000293:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000296:	c9                   	leave  
10000297:	c3                   	ret    

10000298 <strcmp>:
10000298:	55                   	push   ebp
10000299:	89 e5                	mov    ebp,esp
1000029b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000029e:	8a 10                	mov    dl,BYTE PTR [eax]
100002a0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100002a3:	8a 00                	mov    al,BYTE PTR [eax]
100002a5:	38 c2                	cmp    dl,al
100002a7:	75 20                	jne    100002c9 <strcmp+0x31>
100002a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002ac:	8d 50 01             	lea    edx,[eax+0x1]
100002af:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
100002b2:	8a 00                	mov    al,BYTE PTR [eax]
100002b4:	84 c0                	test   al,al
100002b6:	0f 94 c0             	sete   al
100002b9:	84 c0                	test   al,al
100002bb:	74 07                	je     100002c4 <strcmp+0x2c>
100002bd:	b8 00 00 00 00       	mov    eax,0x0
100002c2:	eb 19                	jmp    100002dd <strcmp+0x45>
100002c4:	ff 45 0c             	inc    DWORD PTR [ebp+0xc]
100002c7:	eb d2                	jmp    1000029b <strcmp+0x3>
100002c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002cc:	8a 00                	mov    al,BYTE PTR [eax]
100002ce:	0f b6 d0             	movzx  edx,al
100002d1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100002d4:	8a 00                	mov    al,BYTE PTR [eax]
100002d6:	0f b6 c0             	movzx  eax,al
100002d9:	29 c2                	sub    edx,eax
100002db:	89 d0                	mov    eax,edx
100002dd:	5d                   	pop    ebp
100002de:	c3                   	ret    

100002df <strchr(char const*, int)>:
100002df:	55                   	push   ebp
100002e0:	89 e5                	mov    ebp,esp
100002e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002e5:	8a 00                	mov    al,BYTE PTR [eax]
100002e7:	84 c0                	test   al,al
100002e9:	74 16                	je     10000301 <strchr(char const*, int)+0x22>
100002eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002ee:	8a 00                	mov    al,BYTE PTR [eax]
100002f0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
100002f3:	38 d0                	cmp    al,dl
100002f5:	75 05                	jne    100002fc <strchr(char const*, int)+0x1d>
100002f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002fa:	eb 0a                	jmp    10000306 <strchr(char const*, int)+0x27>
100002fc:	ff 45 08             	inc    DWORD PTR [ebp+0x8]
100002ff:	eb e1                	jmp    100002e2 <strchr(char const*, int)+0x3>
10000301:	b8 00 00 00 00       	mov    eax,0x0
10000306:	5d                   	pop    ebp
10000307:	c3                   	ret    

10000308 <strncmp>:
10000308:	55                   	push   ebp
10000309:	89 e5                	mov    ebp,esp
1000030b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
1000030e:	8d 50 ff             	lea    edx,[eax-0x1]
10000311:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
10000314:	85 c0                	test   eax,eax
10000316:	74 12                	je     1000032a <strncmp+0x22>
10000318:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000031b:	8a 10                	mov    dl,BYTE PTR [eax]
1000031d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000320:	8a 00                	mov    al,BYTE PTR [eax]
10000322:	38 c2                	cmp    dl,al
10000324:	75 04                	jne    1000032a <strncmp+0x22>
10000326:	b0 01                	mov    al,0x1
10000328:	eb 02                	jmp    1000032c <strncmp+0x24>
1000032a:	b0 00                	mov    al,0x0
1000032c:	84 c0                	test   al,al
1000032e:	74 20                	je     10000350 <strncmp+0x48>
10000330:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000333:	8d 50 01             	lea    edx,[eax+0x1]
10000336:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
10000339:	8a 00                	mov    al,BYTE PTR [eax]
1000033b:	84 c0                	test   al,al
1000033d:	0f 94 c0             	sete   al
10000340:	84 c0                	test   al,al
10000342:	74 07                	je     1000034b <strncmp+0x43>
10000344:	b8 00 00 00 00       	mov    eax,0x0
10000349:	eb 19                	jmp    10000364 <strncmp+0x5c>
1000034b:	ff 45 0c             	inc    DWORD PTR [ebp+0xc]
1000034e:	eb bb                	jmp    1000030b <strncmp+0x3>
10000350:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000353:	8a 00                	mov    al,BYTE PTR [eax]
10000355:	0f b6 d0             	movzx  edx,al
10000358:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
1000035b:	8a 00                	mov    al,BYTE PTR [eax]
1000035d:	0f b6 c0             	movzx  eax,al
10000360:	29 c2                	sub    edx,eax
10000362:	89 d0                	mov    eax,edx
10000364:	5d                   	pop    ebp
10000365:	c3                   	ret    

10000366 <strcat>:
10000366:	55                   	push   ebp
10000367:	89 e5                	mov    ebp,esp
10000369:	83 ec 10             	sub    esp,0x10
1000036c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000036f:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
10000372:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000375:	8d 50 01             	lea    edx,[eax+0x1]
10000378:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
1000037b:	8a 00                	mov    al,BYTE PTR [eax]
1000037d:	84 c0                	test   al,al
1000037f:	0f 95 c0             	setne  al
10000382:	84 c0                	test   al,al
10000384:	74 02                	je     10000388 <strcat+0x22>
10000386:	eb ea                	jmp    10000372 <strcat+0xc>
10000388:	ff 4d fc             	dec    DWORD PTR [ebp-0x4]
1000038b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
1000038e:	8d 42 01             	lea    eax,[edx+0x1]
10000391:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
10000394:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000397:	8d 48 01             	lea    ecx,[eax+0x1]
1000039a:	89 4d fc             	mov    DWORD PTR [ebp-0x4],ecx
1000039d:	8a 12                	mov    dl,BYTE PTR [edx]
1000039f:	88 10                	mov    BYTE PTR [eax],dl
100003a1:	8a 00                	mov    al,BYTE PTR [eax]
100003a3:	84 c0                	test   al,al
100003a5:	0f 95 c0             	setne  al
100003a8:	84 c0                	test   al,al
100003aa:	74 02                	je     100003ae <strcat+0x48>
100003ac:	eb dd                	jmp    1000038b <strcat+0x25>
100003ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100003b1:	c9                   	leave  
100003b2:	c3                   	ret    

100003b3 <strncat(char*, char const*, unsigned long)>:
100003b3:	55                   	push   ebp
100003b4:	89 e5                	mov    ebp,esp
100003b6:	83 ec 10             	sub    esp,0x10
100003b9:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
100003bd:	74 5c                	je     1000041b <strncat(char*, char const*, unsigned long)+0x68>
100003bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100003c2:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
100003c5:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100003c8:	8d 50 01             	lea    edx,[eax+0x1]
100003cb:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
100003ce:	8a 00                	mov    al,BYTE PTR [eax]
100003d0:	84 c0                	test   al,al
100003d2:	0f 95 c0             	setne  al
100003d5:	84 c0                	test   al,al
100003d7:	74 02                	je     100003db <strncat(char*, char const*, unsigned long)+0x28>
100003d9:	eb ea                	jmp    100003c5 <strncat(char*, char const*, unsigned long)+0x12>
100003db:	ff 4d fc             	dec    DWORD PTR [ebp-0x4]
100003de:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
100003e1:	8d 42 01             	lea    eax,[edx+0x1]
100003e4:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
100003e7:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100003ea:	8d 48 01             	lea    ecx,[eax+0x1]
100003ed:	89 4d fc             	mov    DWORD PTR [ebp-0x4],ecx
100003f0:	8a 12                	mov    dl,BYTE PTR [edx]
100003f2:	88 10                	mov    BYTE PTR [eax],dl
100003f4:	8a 00                	mov    al,BYTE PTR [eax]
100003f6:	84 c0                	test   al,al
100003f8:	74 0d                	je     10000407 <strncat(char*, char const*, unsigned long)+0x54>
100003fa:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
100003fd:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
10000401:	74 04                	je     10000407 <strncat(char*, char const*, unsigned long)+0x54>
10000403:	b0 01                	mov    al,0x1
10000405:	eb 02                	jmp    10000409 <strncat(char*, char const*, unsigned long)+0x56>
10000407:	b0 00                	mov    al,0x0
10000409:	84 c0                	test   al,al
1000040b:	74 02                	je     1000040f <strncat(char*, char const*, unsigned long)+0x5c>
1000040d:	eb cf                	jmp    100003de <strncat(char*, char const*, unsigned long)+0x2b>
1000040f:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
10000413:	75 06                	jne    1000041b <strncat(char*, char const*, unsigned long)+0x68>
10000415:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000418:	c6 00 00             	mov    BYTE PTR [eax],0x0
1000041b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000041e:	c9                   	leave  
1000041f:	c3                   	ret    

10000420 <strstr(char*, char*)>:
10000420:	55                   	push   ebp
10000421:	89 e5                	mov    ebp,esp
10000423:	83 ec 10             	sub    esp,0x10
10000426:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10000429:	e8 fc ff ff ff       	call   1000042a <strstr(char*, char*)+0xa>	1000042a: R_386_PC32	strlen
1000042e:	83 c4 04             	add    esp,0x4
10000431:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
10000434:	83 7d fc 00          	cmp    DWORD PTR [ebp-0x4],0x0
10000438:	75 05                	jne    1000043f <strstr(char*, char*)+0x1f>
1000043a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000043d:	eb 3f                	jmp    1000047e <strstr(char*, char*)+0x5e>
1000043f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000442:	50                   	push   eax
10000443:	e8 fc ff ff ff       	call   10000444 <strstr(char*, char*)+0x24>	10000444: R_386_PC32	strlen
10000448:	83 c4 04             	add    esp,0x4
1000044b:	39 45 fc             	cmp    DWORD PTR [ebp-0x4],eax
1000044e:	77 29                	ja     10000479 <strstr(char*, char*)+0x59>
10000450:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000453:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
10000456:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10000459:	50                   	push   eax
1000045a:	e8 fc ff ff ff       	call   1000045b <strstr(char*, char*)+0x3b>	1000045b: R_386_PC32	memcmp(void*, void*, unsigned long)
1000045f:	83 c4 0c             	add    esp,0xc
10000462:	85 c0                	test   eax,eax
10000464:	0f 94 c0             	sete   al
10000467:	84 c0                	test   al,al
10000469:	74 05                	je     10000470 <strstr(char*, char*)+0x50>
1000046b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000046e:	eb 0e                	jmp    1000047e <strstr(char*, char*)+0x5e>
10000470:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000473:	40                   	inc    eax
10000474:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
10000477:	eb c6                	jmp    1000043f <strstr(char*, char*)+0x1f>
10000479:	b8 00 00 00 00       	mov    eax,0x0
1000047e:	c9                   	leave  
1000047f:	c3                   	ret    

10000480 <rmtree(char*)>:
10000480:	55                   	push   ebp
10000481:	89 e5                	mov    ebp,esp
10000483:	53                   	push   ebx
10000484:	81 ec 64 02 00 00    	sub    esp,0x264
1000048a:	68 2c 01 00 00       	push   0x12c
1000048f:	6a 00                	push   0x0
10000491:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
10000497:	50                   	push   eax
10000498:	e8 fc ff ff ff       	call   10000499 <rmtree(char*)+0x19>	10000499: R_386_PC32	memset
1000049d:	83 c4 0c             	add    esp,0xc
100004a0:	8d 85 a8 fd ff ff    	lea    eax,[ebp-0x258]
100004a6:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
100004a9:	83 ec 0c             	sub    esp,0xc
100004ac:	68 14 01 00 00       	push   0x114
100004b1:	e8 fc ff ff ff       	call   100004b2 <rmtree(char*)+0x32>	100004b2: R_386_PC32	operator new(unsigned long)
100004b6:	83 c4 10             	add    esp,0x10
100004b9:	89 c3                	mov    ebx,eax
100004bb:	b8 00 20 00 c2       	mov    eax,0xc2002000
100004c0:	8b 00                	mov    eax,DWORD PTR [eax]
100004c2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
100004c5:	83 ec 04             	sub    esp,0x4
100004c8:	50                   	push   eax
100004c9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100004cc:	53                   	push   ebx
100004cd:	e8 fc ff ff ff       	call   100004ce <rmtree(char*)+0x4e>	100004ce: R_386_PC32	Directory::Directory(char const*, Process*)
100004d2:	83 c4 10             	add    esp,0x10
100004d5:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
100004d8:	83 ec 0c             	sub    esp,0xc
100004db:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
100004de:	e8 fc ff ff ff       	call   100004df <rmtree(char*)+0x5f>	100004df: R_386_PC32	Directory::open()
100004e3:	83 c4 10             	add    esp,0x10
100004e6:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
100004e9:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
100004ed:	74 24                	je     10000513 <rmtree(char*)+0x93>
100004ef:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
100004f3:	0f 84 8b 01 00 00    	je     10000684 <rmtree(char*)+0x204>
100004f9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100004fc:	8b 00                	mov    eax,DWORD PTR [eax]
100004fe:	83 c0 08             	add    eax,0x8
10000501:	8b 00                	mov    eax,DWORD PTR [eax]
10000503:	83 ec 0c             	sub    esp,0xc
10000506:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000509:	ff d0                	call   eax
1000050b:	83 c4 10             	add    esp,0x10
1000050e:	e9 72 01 00 00       	jmp    10000685 <rmtree(char*)+0x205>
10000513:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10000516:	8b 00                	mov    eax,DWORD PTR [eax]
10000518:	83 c0 0c             	add    eax,0xc
1000051b:	8b 00                	mov    eax,DWORD PTR [eax]
1000051d:	83 ec 0c             	sub    esp,0xc
10000520:	8d 95 a4 fd ff ff    	lea    edx,[ebp-0x25c]
10000526:	52                   	push   edx
10000527:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
1000052a:	6a 00                	push   0x0
1000052c:	68 10 01 00 00       	push   0x110
10000531:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000534:	ff d0                	call   eax
10000536:	83 c4 20             	add    esp,0x20
10000539:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
1000053c:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
10000540:	0f 85 04 01 00 00    	jne    1000064a <rmtree(char*)+0x1ca>
10000546:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10000549:	83 c0 10             	add    eax,0x10
1000054c:	83 ec 08             	sub    esp,0x8
1000054f:	68 40 48 00 10       	push   0x10004840	10000550: R_386_32	.text
10000554:	50                   	push   eax
10000555:	e8 fc ff ff ff       	call   10000556 <rmtree(char*)+0xd6>	10000556: R_386_PC32	strcmp
1000055a:	83 c4 10             	add    esp,0x10
1000055d:	85 c0                	test   eax,eax
1000055f:	74 b2                	je     10000513 <rmtree(char*)+0x93>
10000561:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10000564:	83 c0 10             	add    eax,0x10
10000567:	83 ec 08             	sub    esp,0x8
1000056a:	68 42 48 00 10       	push   0x10004842	1000056b: R_386_32	.text
1000056f:	50                   	push   eax
10000570:	e8 fc ff ff ff       	call   10000571 <rmtree(char*)+0xf1>	10000571: R_386_PC32	strcmp
10000575:	83 c4 10             	add    esp,0x10
10000578:	85 c0                	test   eax,eax
1000057a:	74 97                	je     10000513 <rmtree(char*)+0x93>
1000057c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
1000057f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
10000582:	83 e0 02             	and    eax,0x2
10000585:	85 c0                	test   eax,eax
10000587:	74 17                	je     100005a0 <rmtree(char*)+0x120>
10000589:	83 ec 0c             	sub    esp,0xc
1000058c:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
10000592:	50                   	push   eax
10000593:	e8 fc ff ff ff       	call   10000594 <rmtree(char*)+0x114>	10000594: R_386_PC32	rmtree(char*)
10000598:	83 c4 10             	add    esp,0x10
1000059b:	e9 73 ff ff ff       	jmp    10000513 <rmtree(char*)+0x93>
100005a0:	83 ec 08             	sub    esp,0x8
100005a3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100005a6:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
100005ac:	50                   	push   eax
100005ad:	e8 fc ff ff ff       	call   100005ae <rmtree(char*)+0x12e>	100005ae: R_386_PC32	strcpy
100005b2:	83 c4 10             	add    esp,0x10
100005b5:	83 ec 08             	sub    esp,0x8
100005b8:	68 45 48 00 10       	push   0x10004845	100005b9: R_386_32	.text
100005bd:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
100005c3:	50                   	push   eax
100005c4:	e8 fc ff ff ff       	call   100005c5 <rmtree(char*)+0x145>	100005c5: R_386_PC32	strcat
100005c9:	83 c4 10             	add    esp,0x10
100005cc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
100005cf:	83 c0 10             	add    eax,0x10
100005d2:	83 ec 08             	sub    esp,0x8
100005d5:	50                   	push   eax
100005d6:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
100005dc:	50                   	push   eax
100005dd:	e8 fc ff ff ff       	call   100005de <rmtree(char*)+0x15e>	100005de: R_386_PC32	strcat
100005e2:	83 c4 10             	add    esp,0x10
100005e5:	83 ec 0c             	sub    esp,0xc
100005e8:	68 14 01 00 00       	push   0x114
100005ed:	e8 fc ff ff ff       	call   100005ee <rmtree(char*)+0x16e>	100005ee: R_386_PC32	operator new(unsigned long)
100005f2:	83 c4 10             	add    esp,0x10
100005f5:	89 c3                	mov    ebx,eax
100005f7:	b8 00 20 00 c2       	mov    eax,0xc2002000
100005fc:	8b 00                	mov    eax,DWORD PTR [eax]
100005fe:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
10000601:	83 ec 04             	sub    esp,0x4
10000604:	50                   	push   eax
10000605:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
1000060b:	50                   	push   eax
1000060c:	53                   	push   ebx
1000060d:	e8 fc ff ff ff       	call   1000060e <rmtree(char*)+0x18e>	1000060e: R_386_PC32	File::File(char const*, Process*)
10000612:	83 c4 10             	add    esp,0x10
10000615:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
10000618:	83 ec 0c             	sub    esp,0xc
1000061b:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
1000061e:	e8 fc ff ff ff       	call   1000061f <rmtree(char*)+0x19f>	1000061f: R_386_PC32	File::unlink()
10000623:	83 c4 10             	add    esp,0x10
10000626:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
1000062a:	0f 84 e3 fe ff ff    	je     10000513 <rmtree(char*)+0x93>
10000630:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10000633:	8b 00                	mov    eax,DWORD PTR [eax]
10000635:	83 c0 08             	add    eax,0x8
10000638:	8b 00                	mov    eax,DWORD PTR [eax]
1000063a:	83 ec 0c             	sub    esp,0xc
1000063d:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
10000640:	ff d0                	call   eax
10000642:	83 c4 10             	add    esp,0x10
10000645:	e9 c9 fe ff ff       	jmp    10000513 <rmtree(char*)+0x93>
1000064a:	90                   	nop
1000064b:	83 ec 0c             	sub    esp,0xc
1000064e:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000651:	e8 fc ff ff ff       	call   10000652 <rmtree(char*)+0x1d2>	10000652: R_386_PC32	Directory::close()
10000656:	83 c4 10             	add    esp,0x10
10000659:	83 ec 0c             	sub    esp,0xc
1000065c:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
1000065f:	e8 fc ff ff ff       	call   10000660 <rmtree(char*)+0x1e0>	10000660: R_386_PC32	Directory::unlink()
10000664:	83 c4 10             	add    esp,0x10
10000667:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
1000066b:	74 18                	je     10000685 <rmtree(char*)+0x205>
1000066d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10000670:	8b 00                	mov    eax,DWORD PTR [eax]
10000672:	83 c0 08             	add    eax,0x8
10000675:	8b 00                	mov    eax,DWORD PTR [eax]
10000677:	83 ec 0c             	sub    esp,0xc
1000067a:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
1000067d:	ff d0                	call   eax
1000067f:	83 c4 10             	add    esp,0x10
10000682:	eb 01                	jmp    10000685 <rmtree(char*)+0x205>
10000684:	90                   	nop
10000685:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
10000688:	c9                   	leave  
10000689:	c3                   	ret    

1000068a <mkdir(char const*, int)>:
1000068a:	55                   	push   ebp
1000068b:	89 e5                	mov    ebp,esp
1000068d:	53                   	push   ebx
1000068e:	83 ec 14             	sub    esp,0x14
10000691:	83 ec 0c             	sub    esp,0xc
10000694:	68 14 01 00 00       	push   0x114
10000699:	e8 fc ff ff ff       	call   1000069a <mkdir(char const*, int)+0x10>	1000069a: R_386_PC32	operator new(unsigned long)
1000069e:	83 c4 10             	add    esp,0x10
100006a1:	89 c3                	mov    ebx,eax
100006a3:	a1 00 00 00 00       	mov    eax,ds:0x0	100006a4: R_386_32	kernelProcess
100006a8:	83 ec 04             	sub    esp,0x4
100006ab:	50                   	push   eax
100006ac:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100006af:	53                   	push   ebx
100006b0:	e8 fc ff ff ff       	call   100006b1 <mkdir(char const*, int)+0x27>	100006b1: R_386_PC32	Directory::Directory(char const*, Process*)
100006b5:	83 c4 10             	add    esp,0x10
100006b8:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
100006bb:	83 ec 0c             	sub    esp,0xc
100006be:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
100006c1:	e8 fc ff ff ff       	call   100006c2 <mkdir(char const*, int)+0x38>	100006c2: R_386_PC32	Directory::create()
100006c6:	83 c4 10             	add    esp,0x10
100006c9:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
100006cd:	74 15                	je     100006e4 <mkdir(char const*, int)+0x5a>
100006cf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
100006d2:	8b 00                	mov    eax,DWORD PTR [eax]
100006d4:	83 c0 08             	add    eax,0x8
100006d7:	8b 00                	mov    eax,DWORD PTR [eax]
100006d9:	83 ec 0c             	sub    esp,0xc
100006dc:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
100006df:	ff d0                	call   eax
100006e1:	83 c4 10             	add    esp,0x10
100006e4:	b8 00 00 00 00       	mov    eax,0x0
100006e9:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
100006ec:	c9                   	leave  
100006ed:	c3                   	ret    

100006ee <copytree(char*, char*)>:
100006ee:	55                   	push   ebp
100006ef:	89 e5                	mov    ebp,esp
100006f1:	53                   	push   ebx
100006f2:	81 ec 54 01 00 00    	sub    esp,0x154
100006f8:	83 ec 0c             	sub    esp,0xc
100006fb:	68 90 01 00 00       	push   0x190
10000700:	e8 fc ff ff ff       	call   10000701 <copytree(char*, char*)+0x13>	10000701: R_386_PC32	malloc
10000705:	83 c4 10             	add    esp,0x10
10000708:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
1000070b:	83 ec 0c             	sub    esp,0xc
1000070e:	68 90 01 00 00       	push   0x190
10000713:	e8 fc ff ff ff       	call   10000714 <copytree(char*, char*)+0x26>	10000714: R_386_PC32	malloc
10000718:	83 c4 10             	add    esp,0x10
1000071b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
1000071e:	83 ec 04             	sub    esp,0x4
10000721:	68 90 01 00 00       	push   0x190
10000726:	6a 00                	push   0x0
10000728:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
1000072b:	e8 fc ff ff ff       	call   1000072c <copytree(char*, char*)+0x3e>	1000072c: R_386_PC32	memset
10000730:	83 c4 10             	add    esp,0x10
10000733:	83 ec 04             	sub    esp,0x4
10000736:	68 90 01 00 00       	push   0x190
1000073b:	6a 00                	push   0x0
1000073d:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000740:	e8 fc ff ff ff       	call   10000741 <copytree(char*, char*)+0x53>	10000741: R_386_PC32	memset
10000745:	83 c4 10             	add    esp,0x10
10000748:	8d 85 bc fe ff ff    	lea    eax,[ebp-0x144]
1000074e:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
10000751:	83 ec 0c             	sub    esp,0xc
10000754:	68 14 01 00 00       	push   0x114
10000759:	e8 fc ff ff ff       	call   1000075a <copytree(char*, char*)+0x6c>	1000075a: R_386_PC32	operator new(unsigned long)
1000075e:	83 c4 10             	add    esp,0x10
10000761:	89 c3                	mov    ebx,eax
10000763:	b8 00 20 00 c2       	mov    eax,0xc2002000
10000768:	8b 00                	mov    eax,DWORD PTR [eax]
1000076a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
1000076d:	83 ec 04             	sub    esp,0x4
10000770:	50                   	push   eax
10000771:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000774:	53                   	push   ebx
10000775:	e8 fc ff ff ff       	call   10000776 <copytree(char*, char*)+0x88>	10000776: R_386_PC32	Directory::Directory(char const*, Process*)
1000077a:	83 c4 10             	add    esp,0x10
1000077d:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
10000780:	83 ec 0c             	sub    esp,0xc
10000783:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
10000786:	e8 fc ff ff ff       	call   10000787 <copytree(char*, char*)+0x99>	10000787: R_386_PC32	Directory::open()
1000078b:	83 c4 10             	add    esp,0x10
1000078e:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10000791:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
10000795:	74 34                	je     100007cb <copytree(char*, char*)+0xdd>
10000797:	83 ec 0c             	sub    esp,0xc
1000079a:	68 47 48 00 10       	push   0x10004847	1000079b: R_386_32	.text
1000079f:	e8 fc ff ff ff       	call   100007a0 <copytree(char*, char*)+0xb2>	100007a0: R_386_PC32	Dbg::kprintf(char const*, ...)
100007a4:	83 c4 10             	add    esp,0x10
100007a7:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
100007ab:	0f 84 90 03 00 00    	je     10000b41 <copytree(char*, char*)+0x453>
100007b1:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
100007b4:	8b 00                	mov    eax,DWORD PTR [eax]
100007b6:	83 c0 08             	add    eax,0x8
100007b9:	8b 00                	mov    eax,DWORD PTR [eax]
100007bb:	83 ec 0c             	sub    esp,0xc
100007be:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
100007c1:	ff d0                	call   eax
100007c3:	83 c4 10             	add    esp,0x10
100007c6:	e9 76 03 00 00       	jmp    10000b41 <copytree(char*, char*)+0x453>
100007cb:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
100007ce:	8b 00                	mov    eax,DWORD PTR [eax]
100007d0:	83 c0 0c             	add    eax,0xc
100007d3:	8b 00                	mov    eax,DWORD PTR [eax]
100007d5:	83 ec 0c             	sub    esp,0xc
100007d8:	8d 95 b8 fe ff ff    	lea    edx,[ebp-0x148]
100007de:	52                   	push   edx
100007df:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
100007e2:	6a 00                	push   0x0
100007e4:	68 10 01 00 00       	push   0x110
100007e9:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
100007ec:	ff d0                	call   eax
100007ee:	83 c4 20             	add    esp,0x20
100007f1:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
100007f4:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
100007f8:	0f 85 fb 02 00 00    	jne    10000af9 <copytree(char*, char*)+0x40b>
100007fe:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
10000801:	83 c0 10             	add    eax,0x10
10000804:	83 ec 08             	sub    esp,0x8
10000807:	68 40 48 00 10       	push   0x10004840	10000808: R_386_32	.text
1000080c:	50                   	push   eax
1000080d:	e8 fc ff ff ff       	call   1000080e <copytree(char*, char*)+0x120>	1000080e: R_386_PC32	strcmp
10000812:	83 c4 10             	add    esp,0x10
10000815:	85 c0                	test   eax,eax
10000817:	74 b2                	je     100007cb <copytree(char*, char*)+0xdd>
10000819:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
1000081c:	83 c0 10             	add    eax,0x10
1000081f:	83 ec 08             	sub    esp,0x8
10000822:	68 42 48 00 10       	push   0x10004842	10000823: R_386_32	.text
10000827:	50                   	push   eax
10000828:	e8 fc ff ff ff       	call   10000829 <copytree(char*, char*)+0x13b>	10000829: R_386_PC32	strcmp
1000082d:	83 c4 10             	add    esp,0x10
10000830:	85 c0                	test   eax,eax
10000832:	74 97                	je     100007cb <copytree(char*, char*)+0xdd>
10000834:	83 ec 08             	sub    esp,0x8
10000837:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000083a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
1000083d:	e8 fc ff ff ff       	call   1000083e <copytree(char*, char*)+0x150>	1000083e: R_386_PC32	strcpy
10000842:	83 c4 10             	add    esp,0x10
10000845:	83 ec 08             	sub    esp,0x8
10000848:	68 45 48 00 10       	push   0x10004845	10000849: R_386_32	.text
1000084d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10000850:	e8 fc ff ff ff       	call   10000851 <copytree(char*, char*)+0x163>	10000851: R_386_PC32	strcat
10000855:	83 c4 10             	add    esp,0x10
10000858:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
1000085b:	83 c0 10             	add    eax,0x10
1000085e:	83 ec 08             	sub    esp,0x8
10000861:	50                   	push   eax
10000862:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10000865:	e8 fc ff ff ff       	call   10000866 <copytree(char*, char*)+0x178>	10000866: R_386_PC32	strcat
1000086a:	83 c4 10             	add    esp,0x10
1000086d:	83 ec 08             	sub    esp,0x8
10000870:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10000873:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000876:	e8 fc ff ff ff       	call   10000877 <copytree(char*, char*)+0x189>	10000877: R_386_PC32	strcpy
1000087b:	83 c4 10             	add    esp,0x10
1000087e:	83 ec 08             	sub    esp,0x8
10000881:	68 45 48 00 10       	push   0x10004845	10000882: R_386_32	.text
10000886:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000889:	e8 fc ff ff ff       	call   1000088a <copytree(char*, char*)+0x19c>	1000088a: R_386_PC32	strcat
1000088e:	83 c4 10             	add    esp,0x10
10000891:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
10000894:	83 c0 10             	add    eax,0x10
10000897:	83 ec 08             	sub    esp,0x8
1000089a:	50                   	push   eax
1000089b:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
1000089e:	e8 fc ff ff ff       	call   1000089f <copytree(char*, char*)+0x1b1>	1000089f: R_386_PC32	strcat
100008a3:	83 c4 10             	add    esp,0x10
100008a6:	83 ec 04             	sub    esp,0x4
100008a9:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
100008ac:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
100008af:	68 61 48 00 10       	push   0x10004861	100008b0: R_386_32	.text
100008b4:	e8 fc ff ff ff       	call   100008b5 <copytree(char*, char*)+0x1c7>	100008b5: R_386_PC32	Dbg::kprintf(char const*, ...)
100008b9:	83 c4 10             	add    esp,0x10
100008bc:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
100008bf:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
100008c2:	83 e0 02             	and    eax,0x2
100008c5:	85 c0                	test   eax,eax
100008c7:	74 47                	je     10000910 <copytree(char*, char*)+0x222>
100008c9:	83 ec 08             	sub    esp,0x8
100008cc:	68 c0 01 00 00       	push   0x1c0
100008d1:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
100008d4:	e8 fc ff ff ff       	call   100008d5 <copytree(char*, char*)+0x1e7>	100008d5: R_386_PC32	mkdir(char const*, int)
100008d9:	83 c4 10             	add    esp,0x10
100008dc:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
100008df:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
100008e3:	74 15                	je     100008fa <copytree(char*, char*)+0x20c>
100008e5:	83 ec 0c             	sub    esp,0xc
100008e8:	68 6b 48 00 10       	push   0x1000486b	100008e9: R_386_32	.text
100008ed:	e8 fc ff ff ff       	call   100008ee <copytree(char*, char*)+0x200>	100008ee: R_386_PC32	KePanic(char const*)
100008f2:	83 c4 10             	add    esp,0x10
100008f5:	e9 d1 fe ff ff       	jmp    100007cb <copytree(char*, char*)+0xdd>
100008fa:	83 ec 08             	sub    esp,0x8
100008fd:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000900:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10000903:	e8 fc ff ff ff       	call   10000904 <copytree(char*, char*)+0x216>	10000904: R_386_PC32	copytree(char*, char*)
10000908:	83 c4 10             	add    esp,0x10
1000090b:	e9 bb fe ff ff       	jmp    100007cb <copytree(char*, char*)+0xdd>
10000910:	83 ec 0c             	sub    esp,0xc
10000913:	68 14 01 00 00       	push   0x114
10000918:	e8 fc ff ff ff       	call   10000919 <copytree(char*, char*)+0x22b>	10000919: R_386_PC32	operator new(unsigned long)
1000091d:	83 c4 10             	add    esp,0x10
10000920:	89 c3                	mov    ebx,eax
10000922:	b8 00 20 00 c2       	mov    eax,0xc2002000
10000927:	8b 00                	mov    eax,DWORD PTR [eax]
10000929:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
1000092c:	83 ec 04             	sub    esp,0x4
1000092f:	50                   	push   eax
10000930:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10000933:	53                   	push   ebx
10000934:	e8 fc ff ff ff       	call   10000935 <copytree(char*, char*)+0x247>	10000935: R_386_PC32	File::File(char const*, Process*)
10000939:	83 c4 10             	add    esp,0x10
1000093c:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
1000093f:	83 ec 08             	sub    esp,0x8
10000942:	6a 01                	push   0x1
10000944:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000947:	e8 fc ff ff ff       	call   10000948 <copytree(char*, char*)+0x25a>	10000948: R_386_PC32	File::open(FileOpenMode)
1000094c:	83 c4 10             	add    esp,0x10
1000094f:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
10000953:	75 15                	jne    1000096a <copytree(char*, char*)+0x27c>
10000955:	83 ec 0c             	sub    esp,0xc
10000958:	68 7c 48 00 10       	push   0x1000487c	10000959: R_386_32	.text
1000095d:	e8 fc ff ff ff       	call   1000095e <copytree(char*, char*)+0x270>	1000095e: R_386_PC32	KePanic(char const*)
10000962:	83 c4 10             	add    esp,0x10
10000965:	e9 8a 01 00 00       	jmp    10000af4 <copytree(char*, char*)+0x406>
1000096a:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
1000096e:	0f 84 57 fe ff ff    	je     100007cb <copytree(char*, char*)+0xdd>
10000974:	83 ec 0c             	sub    esp,0xc
10000977:	68 14 01 00 00       	push   0x114
1000097c:	e8 fc ff ff ff       	call   1000097d <copytree(char*, char*)+0x28f>	1000097d: R_386_PC32	operator new(unsigned long)
10000981:	83 c4 10             	add    esp,0x10
10000984:	89 c3                	mov    ebx,eax
10000986:	b8 00 20 00 c2       	mov    eax,0xc2002000
1000098b:	8b 00                	mov    eax,DWORD PTR [eax]
1000098d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
10000990:	83 ec 04             	sub    esp,0x4
10000993:	50                   	push   eax
10000994:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000997:	53                   	push   ebx
10000998:	e8 fc ff ff ff       	call   10000999 <copytree(char*, char*)+0x2ab>	10000999: R_386_PC32	File::File(char const*, Process*)
1000099d:	83 c4 10             	add    esp,0x10
100009a0:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
100009a3:	83 ec 08             	sub    esp,0x8
100009a6:	6a 12                	push   0x12
100009a8:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
100009ab:	e8 fc ff ff ff       	call   100009ac <copytree(char*, char*)+0x2be>	100009ac: R_386_PC32	File::open(FileOpenMode)
100009b0:	83 c4 10             	add    esp,0x10
100009b3:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
100009b7:	75 23                	jne    100009dc <copytree(char*, char*)+0x2ee>
100009b9:	83 ec 0c             	sub    esp,0xc
100009bc:	68 7c 48 00 10       	push   0x1000487c	100009bd: R_386_32	.text
100009c1:	e8 fc ff ff ff       	call   100009c2 <copytree(char*, char*)+0x2d4>	100009c2: R_386_PC32	KePanic(char const*)
100009c6:	83 c4 10             	add    esp,0x10
100009c9:	83 ec 0c             	sub    esp,0xc
100009cc:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
100009cf:	e8 fc ff ff ff       	call   100009d0 <copytree(char*, char*)+0x2e2>	100009d0: R_386_PC32	File::close()
100009d4:	83 c4 10             	add    esp,0x10
100009d7:	e9 18 01 00 00       	jmp    10000af4 <copytree(char*, char*)+0x406>
100009dc:	83 ec 0c             	sub    esp,0xc
100009df:	68 00 10 00 00       	push   0x1000
100009e4:	e8 fc ff ff ff       	call   100009e5 <copytree(char*, char*)+0x2f7>	100009e5: R_386_PC32	malloc
100009e9:	83 c4 10             	add    esp,0x10
100009ec:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
100009ef:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
100009f3:	75 31                	jne    10000a26 <copytree(char*, char*)+0x338>
100009f5:	83 ec 0c             	sub    esp,0xc
100009f8:	68 8b 48 00 10       	push   0x1000488b	100009f9: R_386_32	.text
100009fd:	e8 fc ff ff ff       	call   100009fe <copytree(char*, char*)+0x310>	100009fe: R_386_PC32	KePanic(char const*)
10000a02:	83 c4 10             	add    esp,0x10
10000a05:	83 ec 0c             	sub    esp,0xc
10000a08:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10000a0b:	e8 fc ff ff ff       	call   10000a0c <copytree(char*, char*)+0x31e>	10000a0c: R_386_PC32	free
10000a10:	83 c4 10             	add    esp,0x10
10000a13:	83 ec 0c             	sub    esp,0xc
10000a16:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000a19:	e8 fc ff ff ff       	call   10000a1a <copytree(char*, char*)+0x32c>	10000a1a: R_386_PC32	free
10000a1e:	83 c4 10             	add    esp,0x10
10000a21:	e9 1c 01 00 00       	jmp    10000b42 <copytree(char*, char*)+0x454>
10000a26:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10000a29:	8b 00                	mov    eax,DWORD PTR [eax]
10000a2b:	83 c0 0c             	add    eax,0xc
10000a2e:	8b 00                	mov    eax,DWORD PTR [eax]
10000a30:	83 ec 0c             	sub    esp,0xc
10000a33:	8d 95 b4 fe ff ff    	lea    edx,[ebp-0x14c]
10000a39:	52                   	push   edx
10000a3a:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10000a3d:	6a 00                	push   0x0
10000a3f:	68 00 10 00 00       	push   0x1000
10000a44:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000a47:	ff d0                	call   eax
10000a49:	83 c4 20             	add    esp,0x20
10000a4c:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
10000a4f:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
10000a53:	75 37                	jne    10000a8c <copytree(char*, char*)+0x39e>
10000a55:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000a58:	8b 00                	mov    eax,DWORD PTR [eax]
10000a5a:	83 c0 10             	add    eax,0x10
10000a5d:	8b 08                	mov    ecx,DWORD PTR [eax]
10000a5f:	8b 85 b4 fe ff ff    	mov    eax,DWORD PTR [ebp-0x14c]
10000a65:	99                   	cdq    
10000a66:	83 ec 0c             	sub    esp,0xc
10000a69:	8d 9d b0 fe ff ff    	lea    ebx,[ebp-0x150]
10000a6f:	53                   	push   ebx
10000a70:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10000a73:	52                   	push   edx
10000a74:	50                   	push   eax
10000a75:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
10000a78:	ff d1                	call   ecx
10000a7a:	83 c4 20             	add    esp,0x20
10000a7d:	8b 85 b4 fe ff ff    	mov    eax,DWORD PTR [ebp-0x14c]
10000a83:	3d 00 10 00 00       	cmp    eax,0x1000
10000a88:	75 05                	jne    10000a8f <copytree(char*, char*)+0x3a1>
10000a8a:	eb 9a                	jmp    10000a26 <copytree(char*, char*)+0x338>
10000a8c:	90                   	nop
10000a8d:	eb 01                	jmp    10000a90 <copytree(char*, char*)+0x3a2>
10000a8f:	90                   	nop
10000a90:	83 ec 0c             	sub    esp,0xc
10000a93:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10000a96:	e8 fc ff ff ff       	call   10000a97 <copytree(char*, char*)+0x3a9>	10000a97: R_386_PC32	free
10000a9b:	83 c4 10             	add    esp,0x10
10000a9e:	83 ec 0c             	sub    esp,0xc
10000aa1:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000aa4:	e8 fc ff ff ff       	call   10000aa5 <copytree(char*, char*)+0x3b7>	10000aa5: R_386_PC32	File::close()
10000aa9:	83 c4 10             	add    esp,0x10
10000aac:	83 ec 0c             	sub    esp,0xc
10000aaf:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
10000ab2:	e8 fc ff ff ff       	call   10000ab3 <copytree(char*, char*)+0x3c5>	10000ab3: R_386_PC32	File::close()
10000ab7:	83 c4 10             	add    esp,0x10
10000aba:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
10000abe:	74 15                	je     10000ad5 <copytree(char*, char*)+0x3e7>
10000ac0:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10000ac3:	8b 00                	mov    eax,DWORD PTR [eax]
10000ac5:	83 c0 08             	add    eax,0x8
10000ac8:	8b 00                	mov    eax,DWORD PTR [eax]
10000aca:	83 ec 0c             	sub    esp,0xc
10000acd:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000ad0:	ff d0                	call   eax
10000ad2:	83 c4 10             	add    esp,0x10
10000ad5:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
10000ad9:	0f 84 ec fc ff ff    	je     100007cb <copytree(char*, char*)+0xdd>
10000adf:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000ae2:	8b 00                	mov    eax,DWORD PTR [eax]
10000ae4:	83 c0 08             	add    eax,0x8
10000ae7:	8b 00                	mov    eax,DWORD PTR [eax]
10000ae9:	83 ec 0c             	sub    esp,0xc
10000aec:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
10000aef:	ff d0                	call   eax
10000af1:	83 c4 10             	add    esp,0x10
10000af4:	e9 d2 fc ff ff       	jmp    100007cb <copytree(char*, char*)+0xdd>
10000af9:	90                   	nop
10000afa:	83 ec 0c             	sub    esp,0xc
10000afd:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10000b00:	e8 fc ff ff ff       	call   10000b01 <copytree(char*, char*)+0x413>	10000b01: R_386_PC32	free
10000b05:	83 c4 10             	add    esp,0x10
10000b08:	83 ec 0c             	sub    esp,0xc
10000b0b:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000b0e:	e8 fc ff ff ff       	call   10000b0f <copytree(char*, char*)+0x421>	10000b0f: R_386_PC32	free
10000b13:	83 c4 10             	add    esp,0x10
10000b16:	83 ec 0c             	sub    esp,0xc
10000b19:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
10000b1c:	e8 fc ff ff ff       	call   10000b1d <copytree(char*, char*)+0x42f>	10000b1d: R_386_PC32	Directory::close()
10000b21:	83 c4 10             	add    esp,0x10
10000b24:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
10000b28:	74 18                	je     10000b42 <copytree(char*, char*)+0x454>
10000b2a:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
10000b2d:	8b 00                	mov    eax,DWORD PTR [eax]
10000b2f:	83 c0 08             	add    eax,0x8
10000b32:	8b 00                	mov    eax,DWORD PTR [eax]
10000b34:	83 ec 0c             	sub    esp,0xc
10000b37:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
10000b3a:	ff d0                	call   eax
10000b3c:	83 c4 10             	add    esp,0x10
10000b3f:	eb 01                	jmp    10000b42 <copytree(char*, char*)+0x454>
10000b41:	90                   	nop
10000b42:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
10000b45:	c9                   	leave  
10000b46:	c3                   	ret    

10000b47 <backupTree(char*, unsigned short)>:
10000b47:	55                   	push   ebp
10000b48:	89 e5                	mov    ebp,esp
10000b4a:	57                   	push   edi
10000b4b:	56                   	push   esi
10000b4c:	53                   	push   ebx
10000b4d:	81 ec 8c 12 00 00    	sub    esp,0x128c
10000b53:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000b56:	66 89 85 74 ed ff ff 	mov    WORD PTR [ebp-0x128c],ax
10000b5d:	83 ec 0c             	sub    esp,0xc
10000b60:	68 90 01 00 00       	push   0x190
10000b65:	e8 fc ff ff ff       	call   10000b66 <backupTree(char*, unsigned short)+0x1f>	10000b66: R_386_PC32	malloc
10000b6a:	83 c4 10             	add    esp,0x10
10000b6d:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
10000b70:	83 ec 04             	sub    esp,0x4
10000b73:	68 90 01 00 00       	push   0x190
10000b78:	6a 00                	push   0x0
10000b7a:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000b7d:	e8 fc ff ff ff       	call   10000b7e <backupTree(char*, unsigned short)+0x37>	10000b7e: R_386_PC32	memset
10000b82:	83 c4 10             	add    esp,0x10
10000b85:	8d 85 a8 fe ff ff    	lea    eax,[ebp-0x158]
10000b8b:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
10000b8e:	83 ec 0c             	sub    esp,0xc
10000b91:	68 14 01 00 00       	push   0x114
10000b96:	e8 fc ff ff ff       	call   10000b97 <backupTree(char*, unsigned short)+0x50>	10000b97: R_386_PC32	operator new(unsigned long)
10000b9b:	83 c4 10             	add    esp,0x10
10000b9e:	89 c3                	mov    ebx,eax
10000ba0:	b8 00 20 00 c2       	mov    eax,0xc2002000
10000ba5:	8b 00                	mov    eax,DWORD PTR [eax]
10000ba7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
10000baa:	83 ec 04             	sub    esp,0x4
10000bad:	50                   	push   eax
10000bae:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000bb1:	53                   	push   ebx
10000bb2:	e8 fc ff ff ff       	call   10000bb3 <backupTree(char*, unsigned short)+0x6c>	10000bb3: R_386_PC32	Directory::Directory(char const*, Process*)
10000bb7:	83 c4 10             	add    esp,0x10
10000bba:	89 5d d0             	mov    DWORD PTR [ebp-0x30],ebx
10000bbd:	83 ec 0c             	sub    esp,0xc
10000bc0:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10000bc3:	e8 fc ff ff ff       	call   10000bc4 <backupTree(char*, unsigned short)+0x7d>	10000bc4: R_386_PC32	Directory::open()
10000bc8:	83 c4 10             	add    esp,0x10
10000bcb:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
10000bce:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
10000bd2:	74 34                	je     10000c08 <backupTree(char*, unsigned short)+0xc1>
10000bd4:	83 ec 0c             	sub    esp,0xc
10000bd7:	68 47 48 00 10       	push   0x10004847	10000bd8: R_386_32	.text
10000bdc:	e8 fc ff ff ff       	call   10000bdd <backupTree(char*, unsigned short)+0x96>	10000bdd: R_386_PC32	Dbg::kprintf(char const*, ...)
10000be1:	83 c4 10             	add    esp,0x10
10000be4:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
10000be8:	0f 84 c8 05 00 00    	je     100011b6 <backupTree(char*, unsigned short)+0x66f>
10000bee:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
10000bf1:	8b 00                	mov    eax,DWORD PTR [eax]
10000bf3:	83 c0 08             	add    eax,0x8
10000bf6:	8b 00                	mov    eax,DWORD PTR [eax]
10000bf8:	83 ec 0c             	sub    esp,0xc
10000bfb:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10000bfe:	ff d0                	call   eax
10000c00:	83 c4 10             	add    esp,0x10
10000c03:	e9 af 05 00 00       	jmp    100011b7 <backupTree(char*, unsigned short)+0x670>
10000c08:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
10000c0b:	8b 00                	mov    eax,DWORD PTR [eax]
10000c0d:	83 c0 0c             	add    eax,0xc
10000c10:	8b 00                	mov    eax,DWORD PTR [eax]
10000c12:	83 ec 0c             	sub    esp,0xc
10000c15:	8d 95 a4 fe ff ff    	lea    edx,[ebp-0x15c]
10000c1b:	52                   	push   edx
10000c1c:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
10000c1f:	6a 00                	push   0x0
10000c21:	68 10 01 00 00       	push   0x110
10000c26:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10000c29:	ff d0                	call   eax
10000c2b:	83 c4 20             	add    esp,0x20
10000c2e:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
10000c31:	83 7d c8 00          	cmp    DWORD PTR [ebp-0x38],0x0
10000c35:	0f 85 41 05 00 00    	jne    1000117c <backupTree(char*, unsigned short)+0x635>
10000c3b:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000c3e:	83 c0 10             	add    eax,0x10
10000c41:	83 ec 08             	sub    esp,0x8
10000c44:	68 40 48 00 10       	push   0x10004840	10000c45: R_386_32	.text
10000c49:	50                   	push   eax
10000c4a:	e8 fc ff ff ff       	call   10000c4b <backupTree(char*, unsigned short)+0x104>	10000c4b: R_386_PC32	strcmp
10000c4f:	83 c4 10             	add    esp,0x10
10000c52:	85 c0                	test   eax,eax
10000c54:	74 b2                	je     10000c08 <backupTree(char*, unsigned short)+0xc1>
10000c56:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000c59:	83 c0 10             	add    eax,0x10
10000c5c:	83 ec 08             	sub    esp,0x8
10000c5f:	68 42 48 00 10       	push   0x10004842	10000c60: R_386_32	.text
10000c64:	50                   	push   eax
10000c65:	e8 fc ff ff ff       	call   10000c66 <backupTree(char*, unsigned short)+0x11f>	10000c66: R_386_PC32	strcmp
10000c6a:	83 c4 10             	add    esp,0x10
10000c6d:	85 c0                	test   eax,eax
10000c6f:	74 97                	je     10000c08 <backupTree(char*, unsigned short)+0xc1>
10000c71:	83 ec 08             	sub    esp,0x8
10000c74:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000c77:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000c7a:	e8 fc ff ff ff       	call   10000c7b <backupTree(char*, unsigned short)+0x134>	10000c7b: R_386_PC32	strcpy
10000c7f:	83 c4 10             	add    esp,0x10
10000c82:	83 ec 08             	sub    esp,0x8
10000c85:	68 45 48 00 10       	push   0x10004845	10000c86: R_386_32	.text
10000c8a:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000c8d:	e8 fc ff ff ff       	call   10000c8e <backupTree(char*, unsigned short)+0x147>	10000c8e: R_386_PC32	strcat
10000c92:	83 c4 10             	add    esp,0x10
10000c95:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000c98:	83 c0 10             	add    eax,0x10
10000c9b:	83 ec 08             	sub    esp,0x8
10000c9e:	50                   	push   eax
10000c9f:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000ca2:	e8 fc ff ff ff       	call   10000ca3 <backupTree(char*, unsigned short)+0x15c>	10000ca3: R_386_PC32	strcat
10000ca7:	83 c4 10             	add    esp,0x10
10000caa:	66 c7 45 e6 bc ad    	mov    WORD PTR [ebp-0x1a],0xadbc
10000cb0:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
10000cb7:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
10000cba:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10000cbd:	01 d0                	add    eax,edx
10000cbf:	83 c0 10             	add    eax,0x10
10000cc2:	8a 00                	mov    al,BYTE PTR [eax]
10000cc4:	84 c0                	test   al,al
10000cc6:	74 3c                	je     10000d04 <backupTree(char*, unsigned short)+0x1bd>
10000cc8:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
10000ccb:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10000cce:	01 d0                	add    eax,edx
10000cd0:	83 c0 10             	add    eax,0x10
10000cd3:	8a 00                	mov    al,BYTE PTR [eax]
10000cd5:	66 0f be d0          	movsx  dx,al
10000cd9:	66 8b 45 e6          	mov    ax,WORD PTR [ebp-0x1a]
10000cdd:	31 d0                	xor    eax,edx
10000cdf:	66 89 45 e6          	mov    WORD PTR [ebp-0x1a],ax
10000ce3:	0f b7 45 e6          	movzx  eax,WORD PTR [ebp-0x1a]
10000ce7:	c1 e0 03             	shl    eax,0x3
10000cea:	89 c2                	mov    edx,eax
10000cec:	0f b7 45 e6          	movzx  eax,WORD PTR [ebp-0x1a]
10000cf0:	c1 f8 0d             	sar    eax,0xd
10000cf3:	09 d0                	or     eax,edx
10000cf5:	66 89 45 e6          	mov    WORD PTR [ebp-0x1a],ax
10000cf9:	66 81 6d e6 f1 06    	sub    WORD PTR [ebp-0x1a],0x6f1
10000cff:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
10000d02:	eb b3                	jmp    10000cb7 <backupTree(char*, unsigned short)+0x170>
10000d04:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000d07:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
10000d0a:	83 e0 02             	and    eax,0x2
10000d0d:	85 c0                	test   eax,eax
10000d0f:	74 37                	je     10000d48 <backupTree(char*, unsigned short)+0x201>
10000d11:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000d14:	83 c0 10             	add    eax,0x10
10000d17:	83 ec 08             	sub    esp,0x8
10000d1a:	68 95 48 00 10       	push   0x10004895	10000d1b: R_386_32	.text
10000d1f:	50                   	push   eax
10000d20:	e8 fc ff ff ff       	call   10000d21 <backupTree(char*, unsigned short)+0x1da>	10000d21: R_386_PC32	strcmp
10000d25:	83 c4 10             	add    esp,0x10
10000d28:	85 c0                	test   eax,eax
10000d2a:	0f 84 d8 fe ff ff    	je     10000c08 <backupTree(char*, unsigned short)+0xc1>
10000d30:	0f b7 45 e6          	movzx  eax,WORD PTR [ebp-0x1a]
10000d34:	83 ec 08             	sub    esp,0x8
10000d37:	50                   	push   eax
10000d38:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000d3b:	e8 fc ff ff ff       	call   10000d3c <backupTree(char*, unsigned short)+0x1f5>	10000d3c: R_386_PC32	backupTree(char*, unsigned short)
10000d40:	83 c4 10             	add    esp,0x10
10000d43:	e9 c0 fe ff ff       	jmp    10000c08 <backupTree(char*, unsigned short)+0xc1>
10000d48:	c6 85 a3 fe ff ff 00 	mov    BYTE PTR [ebp-0x15d],0x0
10000d4f:	83 ec 08             	sub    esp,0x8
10000d52:	68 9c 48 00 10       	push   0x1000489c	10000d53: R_386_32	.text
10000d57:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000d5d:	50                   	push   eax
10000d5e:	e8 fc ff ff ff       	call   10000d5f <backupTree(char*, unsigned short)+0x218>	10000d5f: R_386_PC32	strcpy
10000d63:	83 c4 10             	add    esp,0x10
10000d66:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000d69:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
10000d6c:	88 85 a2 fe ff ff    	mov    BYTE PTR [ebp-0x15e],al
10000d72:	83 ec 08             	sub    esp,0x8
10000d75:	8d 85 a2 fe ff ff    	lea    eax,[ebp-0x15e]
10000d7b:	50                   	push   eax
10000d7c:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000d82:	50                   	push   eax
10000d83:	e8 fc ff ff ff       	call   10000d84 <backupTree(char*, unsigned short)+0x23d>	10000d84: R_386_PC32	strcat
10000d88:	83 c4 10             	add    esp,0x10
10000d8b:	83 ec 04             	sub    esp,0x4
10000d8e:	6a 09                	push   0x9
10000d90:	6a 00                	push   0x0
10000d92:	8d 85 99 fe ff ff    	lea    eax,[ebp-0x167]
10000d98:	50                   	push   eax
10000d99:	e8 fc ff ff ff       	call   10000d9a <backupTree(char*, unsigned short)+0x253>	10000d9a: R_386_PC32	memset
10000d9e:	83 c4 10             	add    esp,0x10
10000da1:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000da4:	83 c0 10             	add    eax,0x10
10000da7:	83 ec 04             	sub    esp,0x4
10000daa:	6a 08                	push   0x8
10000dac:	50                   	push   eax
10000dad:	8d 85 99 fe ff ff    	lea    eax,[ebp-0x167]
10000db3:	50                   	push   eax
10000db4:	e8 fc ff ff ff       	call   10000db5 <backupTree(char*, unsigned short)+0x26e>	10000db5: R_386_PC32	strncpyxx(char*, char const*, unsigned long)
10000db9:	83 c4 10             	add    esp,0x10
10000dbc:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
10000dc3:	83 7d dc 07          	cmp    DWORD PTR [ebp-0x24],0x7
10000dc7:	0f 8f c5 00 00 00    	jg     10000e92 <backupTree(char*, unsigned short)+0x34b>
10000dcd:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000dd3:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000dd6:	01 d0                	add    eax,edx
10000dd8:	8a 00                	mov    al,BYTE PTR [eax]
10000dda:	3c 60                	cmp    al,0x60
10000ddc:	7e 30                	jle    10000e0e <backupTree(char*, unsigned short)+0x2c7>
10000dde:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000de4:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000de7:	01 d0                	add    eax,edx
10000de9:	8a 00                	mov    al,BYTE PTR [eax]
10000deb:	3c 7a                	cmp    al,0x7a
10000ded:	7f 1f                	jg     10000e0e <backupTree(char*, unsigned short)+0x2c7>
10000def:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000df5:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000df8:	01 d0                	add    eax,edx
10000dfa:	8a 00                	mov    al,BYTE PTR [eax]
10000dfc:	83 e8 20             	sub    eax,0x20
10000dff:	88 c2                	mov    dl,al
10000e01:	8d 8d 99 fe ff ff    	lea    ecx,[ebp-0x167]
10000e07:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e0a:	01 c8                	add    eax,ecx
10000e0c:	88 10                	mov    BYTE PTR [eax],dl
10000e0e:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000e14:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e17:	01 d0                	add    eax,edx
10000e19:	8a 00                	mov    al,BYTE PTR [eax]
10000e1b:	3c 59                	cmp    al,0x59
10000e1d:	75 0e                	jne    10000e2d <backupTree(char*, unsigned short)+0x2e6>
10000e1f:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000e25:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e28:	01 d0                	add    eax,edx
10000e2a:	c6 00 51             	mov    BYTE PTR [eax],0x51
10000e2d:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000e33:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e36:	01 d0                	add    eax,edx
10000e38:	8a 00                	mov    al,BYTE PTR [eax]
10000e3a:	3c 5a                	cmp    al,0x5a
10000e3c:	75 0e                	jne    10000e4c <backupTree(char*, unsigned short)+0x305>
10000e3e:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000e44:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e47:	01 d0                	add    eax,edx
10000e49:	c6 00 51             	mov    BYTE PTR [eax],0x51
10000e4c:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000e52:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e55:	01 d0                	add    eax,edx
10000e57:	8a 00                	mov    al,BYTE PTR [eax]
10000e59:	3c 20                	cmp    al,0x20
10000e5b:	75 0e                	jne    10000e6b <backupTree(char*, unsigned short)+0x324>
10000e5d:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000e63:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e66:	01 d0                	add    eax,edx
10000e68:	c6 00 59             	mov    BYTE PTR [eax],0x59
10000e6b:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000e71:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e74:	01 d0                	add    eax,edx
10000e76:	8a 00                	mov    al,BYTE PTR [eax]
10000e78:	3c 2e                	cmp    al,0x2e
10000e7a:	75 0e                	jne    10000e8a <backupTree(char*, unsigned short)+0x343>
10000e7c:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000e82:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e85:	01 d0                	add    eax,edx
10000e87:	c6 00 5a             	mov    BYTE PTR [eax],0x5a
10000e8a:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
10000e8d:	e9 31 ff ff ff       	jmp    10000dc3 <backupTree(char*, unsigned short)+0x27c>
10000e92:	83 ec 08             	sub    esp,0x8
10000e95:	8d 85 99 fe ff ff    	lea    eax,[ebp-0x167]
10000e9b:	50                   	push   eax
10000e9c:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000ea2:	50                   	push   eax
10000ea3:	e8 fc ff ff ff       	call   10000ea4 <backupTree(char*, unsigned short)+0x35d>	10000ea4: R_386_PC32	strcat
10000ea8:	83 c4 10             	add    esp,0x10
10000eab:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000eae:	83 c0 10             	add    eax,0x10
10000eb1:	83 ec 0c             	sub    esp,0xc
10000eb4:	50                   	push   eax
10000eb5:	e8 fc ff ff ff       	call   10000eb6 <backupTree(char*, unsigned short)+0x36f>	10000eb6: R_386_PC32	strlen
10000eba:	83 c4 10             	add    esp,0x10
10000ebd:	83 c0 41             	add    eax,0x41
10000ec0:	88 85 a2 fe ff ff    	mov    BYTE PTR [ebp-0x15e],al
10000ec6:	83 ec 08             	sub    esp,0x8
10000ec9:	8d 85 a2 fe ff ff    	lea    eax,[ebp-0x15e]
10000ecf:	50                   	push   eax
10000ed0:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000ed6:	50                   	push   eax
10000ed7:	e8 fc ff ff ff       	call   10000ed8 <backupTree(char*, unsigned short)+0x391>	10000ed8: R_386_PC32	strcat
10000edc:	83 c4 10             	add    esp,0x10
10000edf:	83 ec 08             	sub    esp,0x8
10000ee2:	68 40 48 00 10       	push   0x10004840	10000ee3: R_386_32	.text
10000ee7:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000eed:	50                   	push   eax
10000eee:	e8 fc ff ff ff       	call   10000eef <backupTree(char*, unsigned short)+0x3a8>	10000eef: R_386_PC32	strcat
10000ef3:	83 c4 10             	add    esp,0x10
10000ef6:	66 8b 45 e6          	mov    ax,WORD PTR [ebp-0x1a]
10000efa:	25 65 07 00 00       	and    eax,0x765
10000eff:	33 85 74 ed ff ff    	xor    eax,DWORD PTR [ebp-0x128c]
10000f05:	66 89 45 c6          	mov    WORD PTR [ebp-0x3a],ax
10000f09:	8d 85 88 fe ff ff    	lea    eax,[ebp-0x178]
10000f0f:	bb b5 48 00 10       	mov    ebx,0x100048b5	10000f10: R_386_32	.text
10000f14:	ba 11 00 00 00       	mov    edx,0x11
10000f19:	89 c7                	mov    edi,eax
10000f1b:	89 de                	mov    esi,ebx
10000f1d:	89 d1                	mov    ecx,edx
10000f1f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
10000f21:	0f b7 45 c6          	movzx  eax,WORD PTR [ebp-0x3a]
10000f25:	83 e0 0f             	and    eax,0xf
10000f28:	8a 84 05 88 fe ff ff 	mov    al,BYTE PTR [ebp+eax*1-0x178]
10000f2f:	88 85 a2 fe ff ff    	mov    BYTE PTR [ebp-0x15e],al
10000f35:	83 ec 08             	sub    esp,0x8
10000f38:	8d 85 a2 fe ff ff    	lea    eax,[ebp-0x15e]
10000f3e:	50                   	push   eax
10000f3f:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000f45:	50                   	push   eax
10000f46:	e8 fc ff ff ff       	call   10000f47 <backupTree(char*, unsigned short)+0x400>	10000f47: R_386_PC32	strcat
10000f4b:	83 c4 10             	add    esp,0x10
10000f4e:	0f b7 45 c6          	movzx  eax,WORD PTR [ebp-0x3a]
10000f52:	c1 f8 04             	sar    eax,0x4
10000f55:	83 e0 0f             	and    eax,0xf
10000f58:	8a 84 05 88 fe ff ff 	mov    al,BYTE PTR [ebp+eax*1-0x178]
10000f5f:	88 85 a2 fe ff ff    	mov    BYTE PTR [ebp-0x15e],al
10000f65:	83 ec 08             	sub    esp,0x8
10000f68:	8d 85 a2 fe ff ff    	lea    eax,[ebp-0x15e]
10000f6e:	50                   	push   eax
10000f6f:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000f75:	50                   	push   eax
10000f76:	e8 fc ff ff ff       	call   10000f77 <backupTree(char*, unsigned short)+0x430>	10000f77: R_386_PC32	strcat
10000f7b:	83 c4 10             	add    esp,0x10
10000f7e:	0f b7 45 c6          	movzx  eax,WORD PTR [ebp-0x3a]
10000f82:	c1 f8 08             	sar    eax,0x8
10000f85:	83 e0 0f             	and    eax,0xf
10000f88:	8a 84 05 88 fe ff ff 	mov    al,BYTE PTR [ebp+eax*1-0x178]
10000f8f:	88 85 a2 fe ff ff    	mov    BYTE PTR [ebp-0x15e],al
10000f95:	83 ec 08             	sub    esp,0x8
10000f98:	8d 85 a2 fe ff ff    	lea    eax,[ebp-0x15e]
10000f9e:	50                   	push   eax
10000f9f:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000fa5:	50                   	push   eax
10000fa6:	e8 fc ff ff ff       	call   10000fa7 <backupTree(char*, unsigned short)+0x460>	10000fa7: R_386_PC32	strcat
10000fab:	83 c4 10             	add    esp,0x10
10000fae:	66 8b 45 c6          	mov    ax,WORD PTR [ebp-0x3a]
10000fb2:	66 c1 e8 0c          	shr    ax,0xc
10000fb6:	0f b7 c0             	movzx  eax,ax
10000fb9:	8a 84 05 88 fe ff ff 	mov    al,BYTE PTR [ebp+eax*1-0x178]
10000fc0:	88 85 a2 fe ff ff    	mov    BYTE PTR [ebp-0x15e],al
10000fc6:	83 ec 08             	sub    esp,0x8
10000fc9:	8d 85 a2 fe ff ff    	lea    eax,[ebp-0x15e]
10000fcf:	50                   	push   eax
10000fd0:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000fd6:	50                   	push   eax
10000fd7:	e8 fc ff ff ff       	call   10000fd8 <backupTree(char*, unsigned short)+0x491>	10000fd8: R_386_PC32	strcat
10000fdc:	83 c4 10             	add    esp,0x10
10000fdf:	83 ec 0c             	sub    esp,0xc
10000fe2:	68 14 01 00 00       	push   0x114
10000fe7:	e8 fc ff ff ff       	call   10000fe8 <backupTree(char*, unsigned short)+0x4a1>	10000fe8: R_386_PC32	operator new(unsigned long)
10000fec:	83 c4 10             	add    esp,0x10
10000fef:	89 c3                	mov    ebx,eax
10000ff1:	b8 00 20 00 c2       	mov    eax,0xc2002000
10000ff6:	8b 00                	mov    eax,DWORD PTR [eax]
10000ff8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
10000ffb:	83 ec 04             	sub    esp,0x4
10000ffe:	50                   	push   eax
10000fff:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10001002:	53                   	push   ebx
10001003:	e8 fc ff ff ff       	call   10001004 <backupTree(char*, unsigned short)+0x4bd>	10001004: R_386_PC32	File::File(char const*, Process*)
10001008:	83 c4 10             	add    esp,0x10
1000100b:	89 5d c0             	mov    DWORD PTR [ebp-0x40],ebx
1000100e:	83 ec 08             	sub    esp,0x8
10001011:	6a 01                	push   0x1
10001013:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
10001016:	e8 fc ff ff ff       	call   10001017 <backupTree(char*, unsigned short)+0x4d0>	10001017: R_386_PC32	File::open(FileOpenMode)
1000101b:	83 c4 10             	add    esp,0x10
1000101e:	83 7d c0 00          	cmp    DWORD PTR [ebp-0x40],0x0
10001022:	75 15                	jne    10001039 <backupTree(char*, unsigned short)+0x4f2>
10001024:	83 ec 0c             	sub    esp,0xc
10001027:	68 7c 48 00 10       	push   0x1000487c	10001028: R_386_32	.text
1000102c:	e8 fc ff ff ff       	call   1000102d <backupTree(char*, unsigned short)+0x4e6>	1000102d: R_386_PC32	KePanic(char const*)
10001031:	83 c4 10             	add    esp,0x10
10001034:	e9 3e 01 00 00       	jmp    10001177 <backupTree(char*, unsigned short)+0x630>
10001039:	83 7d c0 00          	cmp    DWORD PTR [ebp-0x40],0x0
1000103d:	0f 84 c5 fb ff ff    	je     10000c08 <backupTree(char*, unsigned short)+0xc1>
10001043:	83 ec 0c             	sub    esp,0xc
10001046:	68 14 01 00 00       	push   0x114
1000104b:	e8 fc ff ff ff       	call   1000104c <backupTree(char*, unsigned short)+0x505>	1000104c: R_386_PC32	operator new(unsigned long)
10001050:	83 c4 10             	add    esp,0x10
10001053:	89 c3                	mov    ebx,eax
10001055:	b8 00 20 00 c2       	mov    eax,0xc2002000
1000105a:	8b 00                	mov    eax,DWORD PTR [eax]
1000105c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
1000105f:	83 ec 04             	sub    esp,0x4
10001062:	50                   	push   eax
10001063:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10001069:	50                   	push   eax
1000106a:	53                   	push   ebx
1000106b:	e8 fc ff ff ff       	call   1000106c <backupTree(char*, unsigned short)+0x525>	1000106c: R_386_PC32	File::File(char const*, Process*)
10001070:	83 c4 10             	add    esp,0x10
10001073:	89 5d bc             	mov    DWORD PTR [ebp-0x44],ebx
10001076:	83 ec 08             	sub    esp,0x8
10001079:	6a 12                	push   0x12
1000107b:	ff 75 bc             	push   DWORD PTR [ebp-0x44]
1000107e:	e8 fc ff ff ff       	call   1000107f <backupTree(char*, unsigned short)+0x538>	1000107f: R_386_PC32	File::open(FileOpenMode)
10001083:	83 c4 10             	add    esp,0x10
10001086:	83 7d bc 00          	cmp    DWORD PTR [ebp-0x44],0x0
1000108a:	75 23                	jne    100010af <backupTree(char*, unsigned short)+0x568>
1000108c:	83 ec 0c             	sub    esp,0xc
1000108f:	68 7c 48 00 10       	push   0x1000487c	10001090: R_386_32	.text
10001094:	e8 fc ff ff ff       	call   10001095 <backupTree(char*, unsigned short)+0x54e>	10001095: R_386_PC32	KePanic(char const*)
10001099:	83 c4 10             	add    esp,0x10
1000109c:	83 ec 0c             	sub    esp,0xc
1000109f:	ff 75 bc             	push   DWORD PTR [ebp-0x44]
100010a2:	e8 fc ff ff ff       	call   100010a3 <backupTree(char*, unsigned short)+0x55c>	100010a3: R_386_PC32	File::close()
100010a7:	83 c4 10             	add    esp,0x10
100010aa:	e9 c8 00 00 00       	jmp    10001177 <backupTree(char*, unsigned short)+0x630>
100010af:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
100010b2:	8b 00                	mov    eax,DWORD PTR [eax]
100010b4:	83 c0 0c             	add    eax,0xc
100010b7:	8b 00                	mov    eax,DWORD PTR [eax]
100010b9:	83 ec 0c             	sub    esp,0xc
100010bc:	8d 95 84 fe ff ff    	lea    edx,[ebp-0x17c]
100010c2:	52                   	push   edx
100010c3:	8d 95 80 ee ff ff    	lea    edx,[ebp-0x1180]
100010c9:	52                   	push   edx
100010ca:	6a 00                	push   0x0
100010cc:	68 00 10 00 00       	push   0x1000
100010d1:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
100010d4:	ff d0                	call   eax
100010d6:	83 c4 20             	add    esp,0x20
100010d9:	89 45 b8             	mov    DWORD PTR [ebp-0x48],eax
100010dc:	83 7d b8 00          	cmp    DWORD PTR [ebp-0x48],0x0
100010e0:	75 3b                	jne    1000111d <backupTree(char*, unsigned short)+0x5d6>
100010e2:	8b 45 bc             	mov    eax,DWORD PTR [ebp-0x44]
100010e5:	8b 00                	mov    eax,DWORD PTR [eax]
100010e7:	83 c0 10             	add    eax,0x10
100010ea:	8b 08                	mov    ecx,DWORD PTR [eax]
100010ec:	8b 85 84 fe ff ff    	mov    eax,DWORD PTR [ebp-0x17c]
100010f2:	99                   	cdq    
100010f3:	83 ec 0c             	sub    esp,0xc
100010f6:	8d 9d 80 fe ff ff    	lea    ebx,[ebp-0x180]
100010fc:	53                   	push   ebx
100010fd:	8d 9d 80 ee ff ff    	lea    ebx,[ebp-0x1180]
10001103:	53                   	push   ebx
10001104:	52                   	push   edx
10001105:	50                   	push   eax
10001106:	ff 75 bc             	push   DWORD PTR [ebp-0x44]
10001109:	ff d1                	call   ecx
1000110b:	83 c4 20             	add    esp,0x20
1000110e:	8b 85 84 fe ff ff    	mov    eax,DWORD PTR [ebp-0x17c]
10001114:	3d 00 10 00 00       	cmp    eax,0x1000
10001119:	75 05                	jne    10001120 <backupTree(char*, unsigned short)+0x5d9>
1000111b:	eb 92                	jmp    100010af <backupTree(char*, unsigned short)+0x568>
1000111d:	90                   	nop
1000111e:	eb 01                	jmp    10001121 <backupTree(char*, unsigned short)+0x5da>
10001120:	90                   	nop
10001121:	83 ec 0c             	sub    esp,0xc
10001124:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
10001127:	e8 fc ff ff ff       	call   10001128 <backupTree(char*, unsigned short)+0x5e1>	10001128: R_386_PC32	File::close()
1000112c:	83 c4 10             	add    esp,0x10
1000112f:	83 ec 0c             	sub    esp,0xc
10001132:	ff 75 bc             	push   DWORD PTR [ebp-0x44]
10001135:	e8 fc ff ff ff       	call   10001136 <backupTree(char*, unsigned short)+0x5ef>	10001136: R_386_PC32	File::close()
1000113a:	83 c4 10             	add    esp,0x10
1000113d:	83 7d c0 00          	cmp    DWORD PTR [ebp-0x40],0x0
10001141:	74 15                	je     10001158 <backupTree(char*, unsigned short)+0x611>
10001143:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
10001146:	8b 00                	mov    eax,DWORD PTR [eax]
10001148:	83 c0 08             	add    eax,0x8
1000114b:	8b 00                	mov    eax,DWORD PTR [eax]
1000114d:	83 ec 0c             	sub    esp,0xc
10001150:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
10001153:	ff d0                	call   eax
10001155:	83 c4 10             	add    esp,0x10
10001158:	83 7d bc 00          	cmp    DWORD PTR [ebp-0x44],0x0
1000115c:	0f 84 a6 fa ff ff    	je     10000c08 <backupTree(char*, unsigned short)+0xc1>
10001162:	8b 45 bc             	mov    eax,DWORD PTR [ebp-0x44]
10001165:	8b 00                	mov    eax,DWORD PTR [eax]
10001167:	83 c0 08             	add    eax,0x8
1000116a:	8b 00                	mov    eax,DWORD PTR [eax]
1000116c:	83 ec 0c             	sub    esp,0xc
1000116f:	ff 75 bc             	push   DWORD PTR [ebp-0x44]
10001172:	ff d0                	call   eax
10001174:	83 c4 10             	add    esp,0x10
10001177:	e9 8c fa ff ff       	jmp    10000c08 <backupTree(char*, unsigned short)+0xc1>
1000117c:	90                   	nop
1000117d:	83 ec 0c             	sub    esp,0xc
10001180:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10001183:	e8 fc ff ff ff       	call   10001184 <backupTree(char*, unsigned short)+0x63d>	10001184: R_386_PC32	free
10001188:	83 c4 10             	add    esp,0x10
1000118b:	83 ec 0c             	sub    esp,0xc
1000118e:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10001191:	e8 fc ff ff ff       	call   10001192 <backupTree(char*, unsigned short)+0x64b>	10001192: R_386_PC32	Directory::close()
10001196:	83 c4 10             	add    esp,0x10
10001199:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
1000119d:	74 18                	je     100011b7 <backupTree(char*, unsigned short)+0x670>
1000119f:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
100011a2:	8b 00                	mov    eax,DWORD PTR [eax]
100011a4:	83 c0 08             	add    eax,0x8
100011a7:	8b 00                	mov    eax,DWORD PTR [eax]
100011a9:	83 ec 0c             	sub    esp,0xc
100011ac:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
100011af:	ff d0                	call   eax
100011b1:	83 c4 10             	add    esp,0x10
100011b4:	eb 01                	jmp    100011b7 <backupTree(char*, unsigned short)+0x670>
100011b6:	90                   	nop
100011b7:	8d 65 f4             	lea    esp,[ebp-0xc]
100011ba:	5b                   	pop    ebx
100011bb:	5e                   	pop    esi
100011bc:	5f                   	pop    edi
100011bd:	5d                   	pop    ebp
100011be:	c3                   	ret    

100011bf <createUser(char const*)>:
100011bf:	55                   	push   ebp
100011c0:	89 e5                	mov    ebp,esp
100011c2:	81 ec 08 01 00 00    	sub    esp,0x108
100011c8:	68 c6 48 00 10       	push   0x100048c6	100011c9: R_386_32	.text
100011cd:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100011d3:	50                   	push   eax
100011d4:	e8 fc ff ff ff       	call   100011d5 <createUser(char const*)+0x16>	100011d5: R_386_PC32	strcpy
100011d9:	83 c4 08             	add    esp,0x8
100011dc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100011df:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100011e5:	50                   	push   eax
100011e6:	e8 fc ff ff ff       	call   100011e7 <createUser(char const*)+0x28>	100011e7: R_386_PC32	strcat
100011eb:	83 c4 08             	add    esp,0x8
100011ee:	83 ec 08             	sub    esp,0x8
100011f1:	68 c0 01 00 00       	push   0x1c0
100011f6:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100011fc:	50                   	push   eax
100011fd:	e8 fc ff ff ff       	call   100011fe <createUser(char const*)+0x3f>	100011fe: R_386_PC32	mkdir(char const*, int)
10001202:	83 c4 10             	add    esp,0x10
10001205:	83 ec 08             	sub    esp,0x8
10001208:	68 d0 48 00 10       	push   0x100048d0	10001209: R_386_32	.text
1000120d:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001213:	50                   	push   eax
10001214:	e8 fc ff ff ff       	call   10001215 <createUser(char const*)+0x56>	10001215: R_386_PC32	strcat
10001219:	83 c4 10             	add    esp,0x10
1000121c:	83 ec 08             	sub    esp,0x8
1000121f:	68 c0 01 00 00       	push   0x1c0
10001224:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000122a:	50                   	push   eax
1000122b:	e8 fc ff ff ff       	call   1000122c <createUser(char const*)+0x6d>	1000122c: R_386_PC32	mkdir(char const*, int)
10001230:	83 c4 10             	add    esp,0x10
10001233:	83 ec 08             	sub    esp,0x8
10001236:	68 c6 48 00 10       	push   0x100048c6	10001237: R_386_32	.text
1000123b:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001241:	50                   	push   eax
10001242:	e8 fc ff ff ff       	call   10001243 <createUser(char const*)+0x84>	10001243: R_386_PC32	strcpy
10001247:	83 c4 10             	add    esp,0x10
1000124a:	83 ec 08             	sub    esp,0x8
1000124d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001250:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001256:	50                   	push   eax
10001257:	e8 fc ff ff ff       	call   10001258 <createUser(char const*)+0x99>	10001258: R_386_PC32	strcat
1000125c:	83 c4 10             	add    esp,0x10
1000125f:	83 ec 08             	sub    esp,0x8
10001262:	68 d9 48 00 10       	push   0x100048d9	10001263: R_386_32	.text
10001267:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000126d:	50                   	push   eax
1000126e:	e8 fc ff ff ff       	call   1000126f <createUser(char const*)+0xb0>	1000126f: R_386_PC32	strcat
10001273:	83 c4 10             	add    esp,0x10
10001276:	83 ec 08             	sub    esp,0x8
10001279:	68 c0 01 00 00       	push   0x1c0
1000127e:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001284:	50                   	push   eax
10001285:	e8 fc ff ff ff       	call   10001286 <createUser(char const*)+0xc7>	10001286: R_386_PC32	mkdir(char const*, int)
1000128a:	83 c4 10             	add    esp,0x10
1000128d:	83 ec 08             	sub    esp,0x8
10001290:	68 c6 48 00 10       	push   0x100048c6	10001291: R_386_32	.text
10001295:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000129b:	50                   	push   eax
1000129c:	e8 fc ff ff ff       	call   1000129d <createUser(char const*)+0xde>	1000129d: R_386_PC32	strcpy
100012a1:	83 c4 10             	add    esp,0x10
100012a4:	83 ec 08             	sub    esp,0x8
100012a7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100012aa:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100012b0:	50                   	push   eax
100012b1:	e8 fc ff ff ff       	call   100012b2 <createUser(char const*)+0xf3>	100012b2: R_386_PC32	strcat
100012b6:	83 c4 10             	add    esp,0x10
100012b9:	83 ec 08             	sub    esp,0x8
100012bc:	68 e4 48 00 10       	push   0x100048e4	100012bd: R_386_32	.text
100012c1:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100012c7:	50                   	push   eax
100012c8:	e8 fc ff ff ff       	call   100012c9 <createUser(char const*)+0x10a>	100012c9: R_386_PC32	strcat
100012cd:	83 c4 10             	add    esp,0x10
100012d0:	83 ec 08             	sub    esp,0x8
100012d3:	68 c0 01 00 00       	push   0x1c0
100012d8:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100012de:	50                   	push   eax
100012df:	e8 fc ff ff ff       	call   100012e0 <createUser(char const*)+0x121>	100012e0: R_386_PC32	mkdir(char const*, int)
100012e4:	83 c4 10             	add    esp,0x10
100012e7:	83 ec 08             	sub    esp,0x8
100012ea:	68 c6 48 00 10       	push   0x100048c6	100012eb: R_386_32	.text
100012ef:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100012f5:	50                   	push   eax
100012f6:	e8 fc ff ff ff       	call   100012f7 <createUser(char const*)+0x138>	100012f7: R_386_PC32	strcpy
100012fb:	83 c4 10             	add    esp,0x10
100012fe:	83 ec 08             	sub    esp,0x8
10001301:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001304:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000130a:	50                   	push   eax
1000130b:	e8 fc ff ff ff       	call   1000130c <createUser(char const*)+0x14d>	1000130c: R_386_PC32	strcat
10001310:	83 c4 10             	add    esp,0x10
10001313:	83 ec 08             	sub    esp,0x8
10001316:	68 ef 48 00 10       	push   0x100048ef	10001317: R_386_32	.text
1000131b:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001321:	50                   	push   eax
10001322:	e8 fc ff ff ff       	call   10001323 <createUser(char const*)+0x164>	10001323: R_386_PC32	strcat
10001327:	83 c4 10             	add    esp,0x10
1000132a:	83 ec 08             	sub    esp,0x8
1000132d:	68 c0 01 00 00       	push   0x1c0
10001332:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001338:	50                   	push   eax
10001339:	e8 fc ff ff ff       	call   1000133a <createUser(char const*)+0x17b>	1000133a: R_386_PC32	mkdir(char const*, int)
1000133e:	83 c4 10             	add    esp,0x10
10001341:	83 ec 08             	sub    esp,0x8
10001344:	68 c6 48 00 10       	push   0x100048c6	10001345: R_386_32	.text
10001349:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000134f:	50                   	push   eax
10001350:	e8 fc ff ff ff       	call   10001351 <createUser(char const*)+0x192>	10001351: R_386_PC32	strcpy
10001355:	83 c4 10             	add    esp,0x10
10001358:	83 ec 08             	sub    esp,0x8
1000135b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000135e:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001364:	50                   	push   eax
10001365:	e8 fc ff ff ff       	call   10001366 <createUser(char const*)+0x1a7>	10001366: R_386_PC32	strcat
1000136a:	83 c4 10             	add    esp,0x10
1000136d:	83 ec 08             	sub    esp,0x8
10001370:	68 f7 48 00 10       	push   0x100048f7	10001371: R_386_32	.text
10001375:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000137b:	50                   	push   eax
1000137c:	e8 fc ff ff ff       	call   1000137d <createUser(char const*)+0x1be>	1000137d: R_386_PC32	strcat
10001381:	83 c4 10             	add    esp,0x10
10001384:	83 ec 08             	sub    esp,0x8
10001387:	68 c0 01 00 00       	push   0x1c0
1000138c:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001392:	50                   	push   eax
10001393:	e8 fc ff ff ff       	call   10001394 <createUser(char const*)+0x1d5>	10001394: R_386_PC32	mkdir(char const*, int)
10001398:	83 c4 10             	add    esp,0x10
1000139b:	83 ec 08             	sub    esp,0x8
1000139e:	68 c6 48 00 10       	push   0x100048c6	1000139f: R_386_32	.text
100013a3:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100013a9:	50                   	push   eax
100013aa:	e8 fc ff ff ff       	call   100013ab <createUser(char const*)+0x1ec>	100013ab: R_386_PC32	strcpy
100013af:	83 c4 10             	add    esp,0x10
100013b2:	83 ec 08             	sub    esp,0x8
100013b5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100013b8:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100013be:	50                   	push   eax
100013bf:	e8 fc ff ff ff       	call   100013c0 <createUser(char const*)+0x201>	100013c0: R_386_PC32	strcat
100013c4:	83 c4 10             	add    esp,0x10
100013c7:	83 ec 08             	sub    esp,0x8
100013ca:	68 02 49 00 10       	push   0x10004902	100013cb: R_386_32	.text
100013cf:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100013d5:	50                   	push   eax
100013d6:	e8 fc ff ff ff       	call   100013d7 <createUser(char const*)+0x218>	100013d7: R_386_PC32	strcat
100013db:	83 c4 10             	add    esp,0x10
100013de:	83 ec 08             	sub    esp,0x8
100013e1:	68 c0 01 00 00       	push   0x1c0
100013e6:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100013ec:	50                   	push   eax
100013ed:	e8 fc ff ff ff       	call   100013ee <createUser(char const*)+0x22f>	100013ee: R_386_PC32	mkdir(char const*, int)
100013f2:	83 c4 10             	add    esp,0x10
100013f5:	83 ec 08             	sub    esp,0x8
100013f8:	68 c6 48 00 10       	push   0x100048c6	100013f9: R_386_32	.text
100013fd:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001403:	50                   	push   eax
10001404:	e8 fc ff ff ff       	call   10001405 <createUser(char const*)+0x246>	10001405: R_386_PC32	strcpy
10001409:	83 c4 10             	add    esp,0x10
1000140c:	83 ec 08             	sub    esp,0x8
1000140f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001412:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001418:	50                   	push   eax
10001419:	e8 fc ff ff ff       	call   1000141a <createUser(char const*)+0x25b>	1000141a: R_386_PC32	strcat
1000141e:	83 c4 10             	add    esp,0x10
10001421:	83 ec 08             	sub    esp,0x8
10001424:	68 09 49 00 10       	push   0x10004909	10001425: R_386_32	.text
10001429:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000142f:	50                   	push   eax
10001430:	e8 fc ff ff ff       	call   10001431 <createUser(char const*)+0x272>	10001431: R_386_PC32	strcat
10001435:	83 c4 10             	add    esp,0x10
10001438:	83 ec 08             	sub    esp,0x8
1000143b:	68 c0 01 00 00       	push   0x1c0
10001440:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001446:	50                   	push   eax
10001447:	e8 fc ff ff ff       	call   10001448 <createUser(char const*)+0x289>	10001448: R_386_PC32	mkdir(char const*, int)
1000144c:	83 c4 10             	add    esp,0x10
1000144f:	83 ec 08             	sub    esp,0x8
10001452:	68 11 49 00 10       	push   0x10004911	10001453: R_386_32	.text
10001457:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000145d:	50                   	push   eax
1000145e:	e8 fc ff ff ff       	call   1000145f <createUser(char const*)+0x2a0>	1000145f: R_386_PC32	strcpy
10001463:	83 c4 10             	add    esp,0x10
10001466:	83 ec 08             	sub    esp,0x8
10001469:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000146c:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001472:	50                   	push   eax
10001473:	e8 fc ff ff ff       	call   10001474 <createUser(char const*)+0x2b5>	10001474: R_386_PC32	strcat
10001478:	83 c4 10             	add    esp,0x10
1000147b:	83 ec 08             	sub    esp,0x8
1000147e:	68 c0 01 00 00       	push   0x1c0
10001483:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001489:	50                   	push   eax
1000148a:	e8 fc ff ff ff       	call   1000148b <createUser(char const*)+0x2cc>	1000148b: R_386_PC32	mkdir(char const*, int)
1000148f:	83 c4 10             	add    esp,0x10
10001492:	83 ec 08             	sub    esp,0x8
10001495:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000149b:	50                   	push   eax
1000149c:	68 2c 49 00 10       	push   0x1000492c	1000149d: R_386_32	.text
100014a1:	e8 fc ff ff ff       	call   100014a2 <createUser(char const*)+0x2e3>	100014a2: R_386_PC32	copytree(char*, char*)
100014a6:	83 c4 10             	add    esp,0x10
100014a9:	90                   	nop
100014aa:	c9                   	leave  
100014ab:	c3                   	ret    

100014ac <drawBootScreen()>:
100014ac:	55                   	push   ebp
100014ad:	89 e5                	mov    ebp,esp
100014af:	83 ec 18             	sub    esp,0x18
100014b2:	a1 00 00 00 00       	mov    eax,ds:0x0	100014b3: R_386_32	term
100014b7:	83 ec 08             	sub    esp,0x8
100014ba:	6a 0b                	push   0xb
100014bc:	50                   	push   eax
100014bd:	e8 fc ff ff ff       	call   100014be <drawBootScreen()+0x12>	100014be: R_386_PC32	VgaText::setDefaultBgColour(VgaColour)
100014c2:	83 c4 10             	add    esp,0x10
100014c5:	a1 00 00 00 00       	mov    eax,ds:0x0	100014c6: R_386_32	term
100014ca:	83 ec 08             	sub    esp,0x8
100014cd:	6a 00                	push   0x0
100014cf:	50                   	push   eax
100014d0:	e8 fc ff ff ff       	call   100014d1 <drawBootScreen()+0x25>	100014d1: R_386_PC32	VgaText::setDefaultFgColour(VgaColour)
100014d5:	83 c4 10             	add    esp,0x10
100014d8:	a1 00 00 00 00       	mov    eax,ds:0x0	100014d9: R_386_32	term
100014dd:	83 ec 0c             	sub    esp,0xc
100014e0:	50                   	push   eax
100014e1:	e8 fc ff ff ff       	call   100014e2 <drawBootScreen()+0x36>	100014e2: R_386_PC32	VgaText::clearScreen()
100014e6:	83 c4 10             	add    esp,0x10
100014e9:	a1 00 00 00 00       	mov    eax,ds:0x0	100014ea: R_386_32	term
100014ee:	83 ec 08             	sub    esp,0x8
100014f1:	68 4b 49 00 10       	push   0x1000494b	100014f2: R_386_32	.text
100014f6:	50                   	push   eax
100014f7:	e8 fc ff ff ff       	call   100014f8 <drawBootScreen()+0x4c>	100014f8: R_386_PC32	VgaText::setTitle(char*)
100014fc:	83 c4 10             	add    esp,0x10
100014ff:	a1 00 00 00 00       	mov    eax,ds:0x0	10001500: R_386_32	term
10001504:	83 ec 08             	sub    esp,0x8
10001507:	6a 00                	push   0x0
10001509:	50                   	push   eax
1000150a:	e8 fc ff ff ff       	call   1000150b <drawBootScreen()+0x5f>	1000150b: R_386_PC32	VgaText::setTitleColour(VgaColour)
1000150f:	83 c4 10             	add    esp,0x10
10001512:	a1 00 00 00 00       	mov    eax,ds:0x0	10001513: R_386_32	term
10001517:	83 ec 08             	sub    esp,0x8
1000151a:	6a 00                	push   0x0
1000151c:	50                   	push   eax
1000151d:	e8 fc ff ff ff       	call   1000151e <drawBootScreen()+0x72>	1000151e: R_386_PC32	VgaText::setTitleTextColour(VgaColour)
10001522:	83 c4 10             	add    esp,0x10
10001525:	a1 00 00 00 00       	mov    eax,ds:0x0	10001526: R_386_32	term
1000152a:	83 ec 04             	sub    esp,0x4
1000152d:	6a 00                	push   0x0
1000152f:	6a 00                	push   0x0
10001531:	50                   	push   eax
10001532:	e8 fc ff ff ff       	call   10001533 <drawBootScreen()+0x87>	10001533: R_386_PC32	VgaText::setCursor(int, int)
10001537:	83 c4 10             	add    esp,0x10
1000153a:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
10001541:	83 7d f4 4f          	cmp    DWORD PTR [ebp-0xc],0x4f
10001545:	7f 19                	jg     10001560 <drawBootScreen()+0xb4>
10001547:	a1 00 00 00 00       	mov    eax,ds:0x0	10001548: R_386_32	term
1000154c:	6a 00                	push   0x0
1000154e:	6a 00                	push   0x0
10001550:	6a 20                	push   0x20
10001552:	50                   	push   eax
10001553:	e8 fc ff ff ff       	call   10001554 <drawBootScreen()+0xa8>	10001554: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
10001558:	83 c4 10             	add    esp,0x10
1000155b:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
1000155e:	eb e1                	jmp    10001541 <drawBootScreen()+0x95>
10001560:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
10001567:	83 7d f0 18          	cmp    DWORD PTR [ebp-0x10],0x18
1000156b:	7f 41                	jg     100015ae <drawBootScreen()+0x102>
1000156d:	a1 00 00 00 00       	mov    eax,ds:0x0	1000156e: R_386_32	term
10001572:	83 ec 04             	sub    esp,0x4
10001575:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10001578:	6a 00                	push   0x0
1000157a:	50                   	push   eax
1000157b:	e8 fc ff ff ff       	call   1000157c <drawBootScreen()+0xd0>	1000157c: R_386_PC32	VgaText::setCursor(int, int)
10001580:	83 c4 10             	add    esp,0x10
10001583:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
1000158a:	83 7d ec 0f          	cmp    DWORD PTR [ebp-0x14],0xf
1000158e:	7f 19                	jg     100015a9 <drawBootScreen()+0xfd>
10001590:	a1 00 00 00 00       	mov    eax,ds:0x0	10001591: R_386_32	term
10001595:	6a 00                	push   0x0
10001597:	6a 00                	push   0x0
10001599:	6a 20                	push   0x20
1000159b:	50                   	push   eax
1000159c:	e8 fc ff ff ff       	call   1000159d <drawBootScreen()+0xf1>	1000159d: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
100015a1:	83 c4 10             	add    esp,0x10
100015a4:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
100015a7:	eb e1                	jmp    1000158a <drawBootScreen()+0xde>
100015a9:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
100015ac:	eb b9                	jmp    10001567 <drawBootScreen()+0xbb>
100015ae:	a1 00 00 00 00       	mov    eax,ds:0x0	100015af: R_386_32	term
100015b3:	83 ec 04             	sub    esp,0x4
100015b6:	6a 01                	push   0x1
100015b8:	6a 01                	push   0x1
100015ba:	50                   	push   eax
100015bb:	e8 fc ff ff ff       	call   100015bc <drawBootScreen()+0x110>	100015bc: R_386_PC32	VgaText::setCursor(int, int)
100015c0:	83 c4 10             	add    esp,0x10
100015c3:	a1 00 00 00 00       	mov    eax,ds:0x0	100015c4: R_386_32	term
100015c8:	6a 00                	push   0x0
100015ca:	6a 0f                	push   0xf
100015cc:	68 4c 49 00 10       	push   0x1000494c	100015cd: R_386_32	.text
100015d1:	50                   	push   eax
100015d2:	e8 fc ff ff ff       	call   100015d3 <drawBootScreen()+0x127>	100015d3: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
100015d7:	83 c4 10             	add    esp,0x10
100015da:	a1 00 00 00 00       	mov    eax,ds:0x0	100015db: R_386_32	term
100015df:	6a 00                	push   0x0
100015e1:	6a 0e                	push   0xe
100015e3:	68 cf 49 00 10       	push   0x100049cf	100015e4: R_386_32	.text
100015e8:	50                   	push   eax
100015e9:	e8 fc ff ff ff       	call   100015ea <drawBootScreen()+0x13e>	100015ea: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
100015ee:	83 c4 10             	add    esp,0x10
100015f1:	a1 00 00 00 00       	mov    eax,ds:0x0	100015f2: R_386_32	term
100015f6:	83 ec 08             	sub    esp,0x8
100015f9:	6a 0f                	push   0xf
100015fb:	50                   	push   eax
100015fc:	e8 fc ff ff ff       	call   100015fd <drawBootScreen()+0x151>	100015fd: R_386_PC32	VgaText::setDefaultBgColour(VgaColour)
10001601:	83 c4 10             	add    esp,0x10
10001604:	a1 00 00 00 00       	mov    eax,ds:0x0	10001605: R_386_32	term
10001609:	83 ec 08             	sub    esp,0x8
1000160c:	6a 00                	push   0x0
1000160e:	50                   	push   eax
1000160f:	e8 fc ff ff ff       	call   10001610 <drawBootScreen()+0x164>	10001610: R_386_PC32	VgaText::setDefaultFgColour(VgaColour)
10001614:	83 c4 10             	add    esp,0x10
10001617:	90                   	nop
10001618:	c9                   	leave  
10001619:	c3                   	ret    

1000161a <drawBasicWindowX(int, int, int, int, char const*, bool)>:
1000161a:	55                   	push   ebp
1000161b:	89 e5                	mov    ebp,esp
1000161d:	53                   	push   ebx
1000161e:	83 ec 34             	sub    esp,0x34
10001621:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
10001624:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
10001627:	ff 45 0c             	inc    DWORD PTR [ebp+0xc]
1000162a:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
10001631:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10001634:	3b 45 14             	cmp    eax,DWORD PTR [ebp+0x14]
10001637:	7d 6c                	jge    100016a5 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x8b>
10001639:	a1 00 00 00 00       	mov    eax,ds:0x0	1000163a: R_386_32	term
1000163e:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
10001641:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001644:	01 ca                	add    edx,ecx
10001646:	83 ec 04             	sub    esp,0x4
10001649:	52                   	push   edx
1000164a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000164d:	50                   	push   eax
1000164e:	e8 fc ff ff ff       	call   1000164f <drawBasicWindowX(int, int, int, int, char const*, bool)+0x35>	1000164f: R_386_PC32	VgaText::setCursor(int, int)
10001653:	83 c4 10             	add    esp,0x10
10001656:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
1000165d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001660:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
10001663:	7d 3b                	jge    100016a0 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x86>
10001665:	a1 00 00 00 00       	mov    eax,ds:0x0	10001666: R_386_32	term
1000166a:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
1000166e:	74 07                	je     10001677 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x5d>
10001670:	b9 07 00 00 00       	mov    ecx,0x7
10001675:	eb 05                	jmp    1000167c <drawBasicWindowX(int, int, int, int, char const*, bool)+0x62>
10001677:	b9 0f 00 00 00       	mov    ecx,0xf
1000167c:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
10001680:	74 07                	je     10001689 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x6f>
10001682:	ba 07 00 00 00       	mov    edx,0x7
10001687:	eb 05                	jmp    1000168e <drawBasicWindowX(int, int, int, int, char const*, bool)+0x74>
10001689:	ba 0f 00 00 00       	mov    edx,0xf
1000168e:	51                   	push   ecx
1000168f:	52                   	push   edx
10001690:	6a 20                	push   0x20
10001692:	50                   	push   eax
10001693:	e8 fc ff ff ff       	call   10001694 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x7a>	10001694: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
10001698:	83 c4 10             	add    esp,0x10
1000169b:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
1000169e:	eb bd                	jmp    1000165d <drawBasicWindowX(int, int, int, int, char const*, bool)+0x43>
100016a0:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
100016a3:	eb 8c                	jmp    10001631 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x17>
100016a5:	a1 00 00 00 00       	mov    eax,ds:0x0	100016a6: R_386_32	term
100016aa:	83 ec 04             	sub    esp,0x4
100016ad:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
100016b0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100016b3:	50                   	push   eax
100016b4:	e8 fc ff ff ff       	call   100016b5 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x9b>	100016b5: R_386_PC32	VgaText::setCursor(int, int)
100016b9:	83 c4 10             	add    esp,0x10
100016bc:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
100016c3:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
100016c6:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
100016c9:	7d 19                	jge    100016e4 <drawBasicWindowX(int, int, int, int, char const*, bool)+0xca>
100016cb:	a1 00 00 00 00       	mov    eax,ds:0x0	100016cc: R_386_32	term
100016d0:	6a 01                	push   0x1
100016d2:	6a 01                	push   0x1
100016d4:	6a 20                	push   0x20
100016d6:	50                   	push   eax
100016d7:	e8 fc ff ff ff       	call   100016d8 <drawBasicWindowX(int, int, int, int, char const*, bool)+0xbe>	100016d8: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
100016dc:	83 c4 10             	add    esp,0x10
100016df:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
100016e2:	eb df                	jmp    100016c3 <drawBasicWindowX(int, int, int, int, char const*, bool)+0xa9>
100016e4:	a1 00 00 00 00       	mov    eax,ds:0x0	100016e5: R_386_32	term
100016e9:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
100016ec:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
100016ef:	01 d1                	add    ecx,edx
100016f1:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
100016f4:	42                   	inc    edx
100016f5:	83 ec 04             	sub    esp,0x4
100016f8:	51                   	push   ecx
100016f9:	52                   	push   edx
100016fa:	50                   	push   eax
100016fb:	e8 fc ff ff ff       	call   100016fc <drawBasicWindowX(int, int, int, int, char const*, bool)+0xe2>	100016fc: R_386_PC32	VgaText::setCursor(int, int)
10001700:	83 c4 10             	add    esp,0x10
10001703:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
1000170a:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
1000170d:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
10001710:	7d 19                	jge    1000172b <drawBasicWindowX(int, int, int, int, char const*, bool)+0x111>
10001712:	a1 00 00 00 00       	mov    eax,ds:0x0	10001713: R_386_32	term
10001717:	6a 03                	push   0x3
10001719:	6a 03                	push   0x3
1000171b:	6a 20                	push   0x20
1000171d:	50                   	push   eax
1000171e:	e8 fc ff ff ff       	call   1000171f <drawBasicWindowX(int, int, int, int, char const*, bool)+0x105>	1000171f: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
10001723:	83 c4 10             	add    esp,0x10
10001726:	ff 45 e8             	inc    DWORD PTR [ebp-0x18]
10001729:	eb df                	jmp    1000170a <drawBasicWindowX(int, int, int, int, char const*, bool)+0xf0>
1000172b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
1000172e:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10001731:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10001734:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
10001737:	01 d0                	add    eax,edx
10001739:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
1000173c:	0f 8d 89 00 00 00    	jge    100017cb <drawBasicWindowX(int, int, int, int, char const*, bool)+0x1b1>
10001742:	a1 00 00 00 00       	mov    eax,ds:0x0	10001743: R_386_32	term
10001747:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
1000174a:	8d 4a 01             	lea    ecx,[edx+0x1]
1000174d:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
10001750:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10001753:	01 da                	add    edx,ebx
10001755:	83 ec 04             	sub    esp,0x4
10001758:	51                   	push   ecx
10001759:	52                   	push   edx
1000175a:	50                   	push   eax
1000175b:	e8 fc ff ff ff       	call   1000175c <drawBasicWindowX(int, int, int, int, char const*, bool)+0x142>	1000175c: R_386_PC32	VgaText::setCursor(int, int)
10001760:	83 c4 10             	add    esp,0x10
10001763:	a1 00 00 00 00       	mov    eax,ds:0x0	10001764: R_386_32	term
10001768:	6a 03                	push   0x3
1000176a:	6a 03                	push   0x3
1000176c:	6a 20                	push   0x20
1000176e:	50                   	push   eax
1000176f:	e8 fc ff ff ff       	call   10001770 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x156>	10001770: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
10001774:	83 c4 10             	add    esp,0x10
10001777:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
1000177a:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
1000177d:	01 d0                	add    eax,edx
1000177f:	48                   	dec    eax
10001780:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
10001783:	74 3e                	je     100017c3 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x1a9>
10001785:	a1 00 00 00 00       	mov    eax,ds:0x0	10001786: R_386_32	term
1000178a:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
1000178d:	42                   	inc    edx
1000178e:	83 ec 04             	sub    esp,0x4
10001791:	52                   	push   edx
10001792:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001795:	50                   	push   eax
10001796:	e8 fc ff ff ff       	call   10001797 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x17d>	10001797: R_386_PC32	VgaText::setCursor(int, int)
1000179b:	83 c4 10             	add    esp,0x10
1000179e:	a1 00 00 00 00       	mov    eax,ds:0x0	1000179f: R_386_32	term
100017a3:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
100017a7:	74 07                	je     100017b0 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x196>
100017a9:	ba 07 00 00 00       	mov    edx,0x7
100017ae:	eb 05                	jmp    100017b5 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x19b>
100017b0:	ba 0f 00 00 00       	mov    edx,0xf
100017b5:	52                   	push   edx
100017b6:	6a 00                	push   0x0
100017b8:	6a dd                	push   0xffffffdd
100017ba:	50                   	push   eax
100017bb:	e8 fc ff ff ff       	call   100017bc <drawBasicWindowX(int, int, int, int, char const*, bool)+0x1a2>	100017bc: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
100017c0:	83 c4 10             	add    esp,0x10
100017c3:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
100017c6:	e9 66 ff ff ff       	jmp    10001731 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x117>
100017cb:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
100017ce:	83 ec 0c             	sub    esp,0xc
100017d1:	ff 75 18             	push   DWORD PTR [ebp+0x18]
100017d4:	e8 fc ff ff ff       	call   100017d5 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x1bb>	100017d5: R_386_PC32	strlen
100017d9:	83 c4 10             	add    esp,0x10
100017dc:	29 c3                	sub    ebx,eax
100017de:	89 d8                	mov    eax,ebx
100017e0:	d1 e8                	shr    eax,1
100017e2:	48                   	dec    eax
100017e3:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
100017e6:	a1 00 00 00 00       	mov    eax,ds:0x0	100017e7: R_386_32	term
100017eb:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
100017ee:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
100017f1:	01 ca                	add    edx,ecx
100017f3:	83 ec 04             	sub    esp,0x4
100017f6:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
100017f9:	52                   	push   edx
100017fa:	50                   	push   eax
100017fb:	e8 fc ff ff ff       	call   100017fc <drawBasicWindowX(int, int, int, int, char const*, bool)+0x1e2>	100017fc: R_386_PC32	VgaText::setCursor(int, int)
10001800:	83 c4 10             	add    esp,0x10
10001803:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
1000180a:	83 ec 0c             	sub    esp,0xc
1000180d:	ff 75 18             	push   DWORD PTR [ebp+0x18]
10001810:	e8 fc ff ff ff       	call   10001811 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x1f7>	10001811: R_386_PC32	strlen
10001815:	83 c4 10             	add    esp,0x10
10001818:	89 c2                	mov    edx,eax
1000181a:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
1000181d:	39 c2                	cmp    edx,eax
1000181f:	76 25                	jbe    10001846 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x22c>
10001821:	a1 00 00 00 00       	mov    eax,ds:0x0	10001822: R_386_32	term
10001826:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
10001829:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
1000182c:	01 ca                	add    edx,ecx
1000182e:	8a 12                	mov    dl,BYTE PTR [edx]
10001830:	0f be d2             	movsx  edx,dl
10001833:	6a 01                	push   0x1
10001835:	6a 0f                	push   0xf
10001837:	52                   	push   edx
10001838:	50                   	push   eax
10001839:	e8 fc ff ff ff       	call   1000183a <drawBasicWindowX(int, int, int, int, char const*, bool)+0x220>	1000183a: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
1000183e:	83 c4 10             	add    esp,0x10
10001841:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
10001844:	eb c4                	jmp    1000180a <drawBasicWindowX(int, int, int, int, char const*, bool)+0x1f0>
10001846:	90                   	nop
10001847:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
1000184a:	c9                   	leave  
1000184b:	c3                   	ret    

1000184c <drawBasicWindow(int, int, int, int, char const*)>:
1000184c:	55                   	push   ebp
1000184d:	89 e5                	mov    ebp,esp
1000184f:	83 ec 08             	sub    esp,0x8
10001852:	83 ec 08             	sub    esp,0x8
10001855:	6a 00                	push   0x0
10001857:	ff 75 18             	push   DWORD PTR [ebp+0x18]
1000185a:	ff 75 14             	push   DWORD PTR [ebp+0x14]
1000185d:	ff 75 10             	push   DWORD PTR [ebp+0x10]
10001860:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10001863:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001866:	e8 fc ff ff ff       	call   10001867 <drawBasicWindow(int, int, int, int, char const*)+0x1b>	10001867: R_386_PC32	drawBasicWindowX(int, int, int, int, char const*, bool)
1000186b:	83 c4 20             	add    esp,0x20
1000186e:	90                   	nop
1000186f:	c9                   	leave  
10001870:	c3                   	ret    

10001871 <bootInstallKeybrd(KeyboardToken, bool*)>:
10001871:	55                   	push   ebp
10001872:	89 e5                	mov    ebp,esp
10001874:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
10001877:	05 04 01 00 00       	add    eax,0x104
1000187c:	8a 00                	mov    al,BYTE PTR [eax]
1000187e:	84 c0                	test   al,al
10001880:	74 12                	je     10001894 <bootInstallKeybrd(KeyboardToken, bool*)+0x23>
10001882:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001885:	66 83 f8 09          	cmp    ax,0x9
10001889:	75 09                	jne    10001894 <bootInstallKeybrd(KeyboardToken, bool*)+0x23>
1000188b:	c6 05 00 00 00 00 7f 	mov    BYTE PTR ds:0x0,0x7f	1000188d: R_386_32	installKey
10001892:	eb 36                	jmp    100018ca <bootInstallKeybrd(KeyboardToken, bool*)+0x59>
10001894:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
10001897:	84 c0                	test   al,al
10001899:	75 2e                	jne    100018c9 <bootInstallKeybrd(KeyboardToken, bool*)+0x58>
1000189b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000189e:	66 3d 0d 02          	cmp    ax,0x20d
100018a2:	75 09                	jne    100018ad <bootInstallKeybrd(KeyboardToken, bool*)+0x3c>
100018a4:	c6 05 00 00 00 00 03 	mov    BYTE PTR ds:0x0,0x3	100018a6: R_386_32	installKey
100018ab:	eb 1d                	jmp    100018ca <bootInstallKeybrd(KeyboardToken, bool*)+0x59>
100018ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100018b0:	66 3d 0e 02          	cmp    ax,0x20e
100018b4:	75 09                	jne    100018bf <bootInstallKeybrd(KeyboardToken, bool*)+0x4e>
100018b6:	c6 05 00 00 00 00 04 	mov    BYTE PTR ds:0x0,0x4	100018b8: R_386_32	installKey
100018bd:	eb 0b                	jmp    100018ca <bootInstallKeybrd(KeyboardToken, bool*)+0x59>
100018bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100018c2:	a2 00 00 00 00       	mov    ds:0x0,al	100018c3: R_386_32	installKey
100018c7:	eb 01                	jmp    100018ca <bootInstallKeybrd(KeyboardToken, bool*)+0x59>
100018c9:	90                   	nop
100018ca:	5d                   	pop    ebp
100018cb:	c3                   	ret    

100018cc <bootInstallTasks(int)>:
100018cc:	55                   	push   ebp
100018cd:	89 e5                	mov    ebp,esp
100018cf:	83 ec 08             	sub    esp,0x8
100018d2:	a1 00 00 00 00       	mov    eax,ds:0x0	100018d3: R_386_32	term
100018d7:	83 ec 04             	sub    esp,0x4
100018da:	6a 08                	push   0x8
100018dc:	6a 18                	push   0x18
100018de:	50                   	push   eax
100018df:	e8 fc ff ff ff       	call   100018e0 <bootInstallTasks(int)+0x14>	100018e0: R_386_PC32	VgaText::setCursor(int, int)
100018e4:	83 c4 10             	add    esp,0x10
100018e7:	a1 00 00 00 00       	mov    eax,ds:0x0	100018e8: R_386_32	term
100018ec:	83 ec 08             	sub    esp,0x8
100018ef:	68 f0 49 00 10       	push   0x100049f0	100018f0: R_386_32	.text
100018f4:	50                   	push   eax
100018f5:	e8 fc ff ff ff       	call   100018f6 <bootInstallTasks(int)+0x2a>	100018f6: R_386_PC32	VgaText::puts(char const*)
100018fa:	83 c4 10             	add    esp,0x10
100018fd:	a1 00 00 00 00       	mov    eax,ds:0x0	100018fe: R_386_32	term
10001902:	83 ec 04             	sub    esp,0x4
10001905:	6a 0a                	push   0xa
10001907:	6a 1a                	push   0x1a
10001909:	50                   	push   eax
1000190a:	e8 fc ff ff ff       	call   1000190b <bootInstallTasks(int)+0x3f>	1000190b: R_386_PC32	VgaText::setCursor(int, int)
1000190f:	83 c4 10             	add    esp,0x10
10001912:	a1 00 00 00 00       	mov    eax,ds:0x0	10001913: R_386_32	term
10001917:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
1000191b:	75 07                	jne    10001924 <bootInstallTasks(int)+0x58>
1000191d:	ba 18 4a 00 10       	mov    edx,0x10004a18	1000191e: R_386_32	.text
10001922:	eb 05                	jmp    10001929 <bootInstallTasks(int)+0x5d>
10001924:	ba 1b 4a 00 10       	mov    edx,0x10004a1b	10001925: R_386_32	.text
10001929:	83 ec 08             	sub    esp,0x8
1000192c:	52                   	push   edx
1000192d:	50                   	push   eax
1000192e:	e8 fc ff ff ff       	call   1000192f <bootInstallTasks(int)+0x63>	1000192f: R_386_PC32	VgaText::puts(char const*)
10001933:	83 c4 10             	add    esp,0x10
10001936:	a1 00 00 00 00       	mov    eax,ds:0x0	10001937: R_386_32	term
1000193b:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
1000193f:	78 07                	js     10001948 <bootInstallTasks(int)+0x7c>
10001941:	ba 00 00 00 00       	mov    edx,0x0
10001946:	eb 05                	jmp    1000194d <bootInstallTasks(int)+0x81>
10001948:	ba 07 00 00 00       	mov    edx,0x7
1000194d:	6a 0f                	push   0xf
1000194f:	52                   	push   edx
10001950:	68 1e 4a 00 10       	push   0x10004a1e	10001951: R_386_32	.text
10001955:	50                   	push   eax
10001956:	e8 fc ff ff ff       	call   10001957 <bootInstallTasks(int)+0x8b>	10001957: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
1000195b:	83 c4 10             	add    esp,0x10
1000195e:	a1 00 00 00 00       	mov    eax,ds:0x0	1000195f: R_386_32	term
10001963:	83 ec 04             	sub    esp,0x4
10001966:	6a 0b                	push   0xb
10001968:	6a 1a                	push   0x1a
1000196a:	50                   	push   eax
1000196b:	e8 fc ff ff ff       	call   1000196c <bootInstallTasks(int)+0xa0>	1000196c: R_386_PC32	VgaText::setCursor(int, int)
10001970:	83 c4 10             	add    esp,0x10
10001973:	a1 00 00 00 00       	mov    eax,ds:0x0	10001974: R_386_32	term
10001978:	83 7d 08 01          	cmp    DWORD PTR [ebp+0x8],0x1
1000197c:	75 07                	jne    10001985 <bootInstallTasks(int)+0xb9>
1000197e:	ba 18 4a 00 10       	mov    edx,0x10004a18	1000197f: R_386_32	.text
10001983:	eb 05                	jmp    1000198a <bootInstallTasks(int)+0xbe>
10001985:	ba 1b 4a 00 10       	mov    edx,0x10004a1b	10001986: R_386_32	.text
1000198a:	83 ec 08             	sub    esp,0x8
1000198d:	52                   	push   edx
1000198e:	50                   	push   eax
1000198f:	e8 fc ff ff ff       	call   10001990 <bootInstallTasks(int)+0xc4>	10001990: R_386_PC32	VgaText::puts(char const*)
10001994:	83 c4 10             	add    esp,0x10
10001997:	a1 00 00 00 00       	mov    eax,ds:0x0	10001998: R_386_32	term
1000199c:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
100019a0:	7e 07                	jle    100019a9 <bootInstallTasks(int)+0xdd>
100019a2:	ba 00 00 00 00       	mov    edx,0x0
100019a7:	eb 05                	jmp    100019ae <bootInstallTasks(int)+0xe2>
100019a9:	ba 07 00 00 00       	mov    edx,0x7
100019ae:	6a 0f                	push   0xf
100019b0:	52                   	push   edx
100019b1:	68 36 4a 00 10       	push   0x10004a36	100019b2: R_386_32	.text
100019b6:	50                   	push   eax
100019b7:	e8 fc ff ff ff       	call   100019b8 <bootInstallTasks(int)+0xec>	100019b8: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
100019bc:	83 c4 10             	add    esp,0x10
100019bf:	a1 00 00 00 00       	mov    eax,ds:0x0	100019c0: R_386_32	term
100019c4:	83 ec 04             	sub    esp,0x4
100019c7:	6a 0c                	push   0xc
100019c9:	6a 1a                	push   0x1a
100019cb:	50                   	push   eax
100019cc:	e8 fc ff ff ff       	call   100019cd <bootInstallTasks(int)+0x101>	100019cd: R_386_PC32	VgaText::setCursor(int, int)
100019d1:	83 c4 10             	add    esp,0x10
100019d4:	a1 00 00 00 00       	mov    eax,ds:0x0	100019d5: R_386_32	term
100019d9:	83 7d 08 02          	cmp    DWORD PTR [ebp+0x8],0x2
100019dd:	75 07                	jne    100019e6 <bootInstallTasks(int)+0x11a>
100019df:	ba 18 4a 00 10       	mov    edx,0x10004a18	100019e0: R_386_32	.text
100019e4:	eb 05                	jmp    100019eb <bootInstallTasks(int)+0x11f>
100019e6:	ba 1b 4a 00 10       	mov    edx,0x10004a1b	100019e7: R_386_32	.text
100019eb:	83 ec 08             	sub    esp,0x8
100019ee:	52                   	push   edx
100019ef:	50                   	push   eax
100019f0:	e8 fc ff ff ff       	call   100019f1 <bootInstallTasks(int)+0x125>	100019f1: R_386_PC32	VgaText::puts(char const*)
100019f5:	83 c4 10             	add    esp,0x10
100019f8:	a1 00 00 00 00       	mov    eax,ds:0x0	100019f9: R_386_32	term
100019fd:	83 7d 08 01          	cmp    DWORD PTR [ebp+0x8],0x1
10001a01:	7e 07                	jle    10001a0a <bootInstallTasks(int)+0x13e>
10001a03:	ba 00 00 00 00       	mov    edx,0x0
10001a08:	eb 05                	jmp    10001a0f <bootInstallTasks(int)+0x143>
10001a0a:	ba 07 00 00 00       	mov    edx,0x7
10001a0f:	6a 0f                	push   0xf
10001a11:	52                   	push   edx
10001a12:	68 4c 4a 00 10       	push   0x10004a4c	10001a13: R_386_32	.text
10001a17:	50                   	push   eax
10001a18:	e8 fc ff ff ff       	call   10001a19 <bootInstallTasks(int)+0x14d>	10001a19: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10001a1d:	83 c4 10             	add    esp,0x10
10001a20:	a1 00 00 00 00       	mov    eax,ds:0x0	10001a21: R_386_32	term
10001a25:	83 ec 04             	sub    esp,0x4
10001a28:	6a 0d                	push   0xd
10001a2a:	6a 1a                	push   0x1a
10001a2c:	50                   	push   eax
10001a2d:	e8 fc ff ff ff       	call   10001a2e <bootInstallTasks(int)+0x162>	10001a2e: R_386_PC32	VgaText::setCursor(int, int)
10001a32:	83 c4 10             	add    esp,0x10
10001a35:	a1 00 00 00 00       	mov    eax,ds:0x0	10001a36: R_386_32	term
10001a3a:	83 7d 08 03          	cmp    DWORD PTR [ebp+0x8],0x3
10001a3e:	75 07                	jne    10001a47 <bootInstallTasks(int)+0x17b>
10001a40:	ba 18 4a 00 10       	mov    edx,0x10004a18	10001a41: R_386_32	.text
10001a45:	eb 05                	jmp    10001a4c <bootInstallTasks(int)+0x180>
10001a47:	ba 1b 4a 00 10       	mov    edx,0x10004a1b	10001a48: R_386_32	.text
10001a4c:	83 ec 08             	sub    esp,0x8
10001a4f:	52                   	push   edx
10001a50:	50                   	push   eax
10001a51:	e8 fc ff ff ff       	call   10001a52 <bootInstallTasks(int)+0x186>	10001a52: R_386_PC32	VgaText::puts(char const*)
10001a56:	83 c4 10             	add    esp,0x10
10001a59:	a1 00 00 00 00       	mov    eax,ds:0x0	10001a5a: R_386_32	term
10001a5e:	83 7d 08 02          	cmp    DWORD PTR [ebp+0x8],0x2
10001a62:	7e 07                	jle    10001a6b <bootInstallTasks(int)+0x19f>
10001a64:	ba 00 00 00 00       	mov    edx,0x0
10001a69:	eb 05                	jmp    10001a70 <bootInstallTasks(int)+0x1a4>
10001a6b:	ba 07 00 00 00       	mov    edx,0x7
10001a70:	6a 0f                	push   0xf
10001a72:	52                   	push   edx
10001a73:	68 62 4a 00 10       	push   0x10004a62	10001a74: R_386_32	.text
10001a78:	50                   	push   eax
10001a79:	e8 fc ff ff ff       	call   10001a7a <bootInstallTasks(int)+0x1ae>	10001a7a: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10001a7e:	83 c4 10             	add    esp,0x10
10001a81:	a1 00 00 00 00       	mov    eax,ds:0x0	10001a82: R_386_32	term
10001a86:	83 ec 04             	sub    esp,0x4
10001a89:	6a 0e                	push   0xe
10001a8b:	6a 1a                	push   0x1a
10001a8d:	50                   	push   eax
10001a8e:	e8 fc ff ff ff       	call   10001a8f <bootInstallTasks(int)+0x1c3>	10001a8f: R_386_PC32	VgaText::setCursor(int, int)
10001a93:	83 c4 10             	add    esp,0x10
10001a96:	a1 00 00 00 00       	mov    eax,ds:0x0	10001a97: R_386_32	term
10001a9b:	83 7d 08 04          	cmp    DWORD PTR [ebp+0x8],0x4
10001a9f:	75 07                	jne    10001aa8 <bootInstallTasks(int)+0x1dc>
10001aa1:	ba 18 4a 00 10       	mov    edx,0x10004a18	10001aa2: R_386_32	.text
10001aa6:	eb 05                	jmp    10001aad <bootInstallTasks(int)+0x1e1>
10001aa8:	ba 1b 4a 00 10       	mov    edx,0x10004a1b	10001aa9: R_386_32	.text
10001aad:	83 ec 08             	sub    esp,0x8
10001ab0:	52                   	push   edx
10001ab1:	50                   	push   eax
10001ab2:	e8 fc ff ff ff       	call   10001ab3 <bootInstallTasks(int)+0x1e7>	10001ab3: R_386_PC32	VgaText::puts(char const*)
10001ab7:	83 c4 10             	add    esp,0x10
10001aba:	a1 00 00 00 00       	mov    eax,ds:0x0	10001abb: R_386_32	term
10001abf:	83 7d 08 03          	cmp    DWORD PTR [ebp+0x8],0x3
10001ac3:	7e 07                	jle    10001acc <bootInstallTasks(int)+0x200>
10001ac5:	ba 00 00 00 00       	mov    edx,0x0
10001aca:	eb 05                	jmp    10001ad1 <bootInstallTasks(int)+0x205>
10001acc:	ba 07 00 00 00       	mov    edx,0x7
10001ad1:	6a 0f                	push   0xf
10001ad3:	52                   	push   edx
10001ad4:	68 76 4a 00 10       	push   0x10004a76	10001ad5: R_386_32	.text
10001ad9:	50                   	push   eax
10001ada:	e8 fc ff ff ff       	call   10001adb <bootInstallTasks(int)+0x20f>	10001adb: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10001adf:	83 c4 10             	add    esp,0x10
10001ae2:	a1 00 00 00 00       	mov    eax,ds:0x0	10001ae3: R_386_32	term
10001ae7:	83 ec 04             	sub    esp,0x4
10001aea:	6a 0f                	push   0xf
10001aec:	6a 1a                	push   0x1a
10001aee:	50                   	push   eax
10001aef:	e8 fc ff ff ff       	call   10001af0 <bootInstallTasks(int)+0x224>	10001af0: R_386_PC32	VgaText::setCursor(int, int)
10001af4:	83 c4 10             	add    esp,0x10
10001af7:	a1 00 00 00 00       	mov    eax,ds:0x0	10001af8: R_386_32	term
10001afc:	83 7d 08 05          	cmp    DWORD PTR [ebp+0x8],0x5
10001b00:	75 07                	jne    10001b09 <bootInstallTasks(int)+0x23d>
10001b02:	ba 18 4a 00 10       	mov    edx,0x10004a18	10001b03: R_386_32	.text
10001b07:	eb 05                	jmp    10001b0e <bootInstallTasks(int)+0x242>
10001b09:	ba 1b 4a 00 10       	mov    edx,0x10004a1b	10001b0a: R_386_32	.text
10001b0e:	83 ec 08             	sub    esp,0x8
10001b11:	52                   	push   edx
10001b12:	50                   	push   eax
10001b13:	e8 fc ff ff ff       	call   10001b14 <bootInstallTasks(int)+0x248>	10001b14: R_386_PC32	VgaText::puts(char const*)
10001b18:	83 c4 10             	add    esp,0x10
10001b1b:	a1 00 00 00 00       	mov    eax,ds:0x0	10001b1c: R_386_32	term
10001b20:	83 7d 08 04          	cmp    DWORD PTR [ebp+0x8],0x4
10001b24:	7e 07                	jle    10001b2d <bootInstallTasks(int)+0x261>
10001b26:	ba 00 00 00 00       	mov    edx,0x0
10001b2b:	eb 05                	jmp    10001b32 <bootInstallTasks(int)+0x266>
10001b2d:	ba 07 00 00 00       	mov    edx,0x7
10001b32:	6a 0f                	push   0xf
10001b34:	52                   	push   edx
10001b35:	68 8e 4a 00 10       	push   0x10004a8e	10001b36: R_386_32	.text
10001b3a:	50                   	push   eax
10001b3b:	e8 fc ff ff ff       	call   10001b3c <bootInstallTasks(int)+0x270>	10001b3c: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10001b40:	83 c4 10             	add    esp,0x10
10001b43:	90                   	nop
10001b44:	c9                   	leave  
10001b45:	c3                   	ret    

10001b46 <ror(unsigned long long, int, int)>:
10001b46:	55                   	push   ebp
10001b47:	89 e5                	mov    ebp,esp
10001b49:	56                   	push   esi
10001b4a:	53                   	push   ebx
10001b4b:	83 ec 20             	sub    esp,0x20
10001b4e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001b51:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
10001b54:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10001b57:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10001b5a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
10001b5d:	ba 01 00 00 00       	mov    edx,0x1
10001b62:	88 c1                	mov    cl,al
10001b64:	d3 e2                	shl    edx,cl
10001b66:	89 d0                	mov    eax,edx
10001b68:	48                   	dec    eax
10001b69:	99                   	cdq    
10001b6a:	89 c1                	mov    ecx,eax
10001b6c:	23 4d e0             	and    ecx,DWORD PTR [ebp-0x20]
10001b6f:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
10001b72:	89 d0                	mov    eax,edx
10001b74:	23 45 e4             	and    eax,DWORD PTR [ebp-0x1c]
10001b77:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
10001b7a:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
10001b7d:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10001b80:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10001b83:	0f ad d0             	shrd   eax,edx,cl
10001b86:	d3 ea                	shr    edx,cl
10001b88:	f6 c1 20             	test   cl,0x20
10001b8b:	74 04                	je     10001b91 <ror(unsigned long long, int, int)+0x4b>
10001b8d:	89 d0                	mov    eax,edx
10001b8f:	31 d2                	xor    edx,edx
10001b91:	89 c3                	mov    ebx,eax
10001b93:	89 d6                	mov    esi,edx
10001b95:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
10001b98:	2b 45 10             	sub    eax,DWORD PTR [ebp+0x10]
10001b9b:	89 c1                	mov    ecx,eax
10001b9d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001ba0:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001ba3:	0f a5 c2             	shld   edx,eax,cl
10001ba6:	d3 e0                	shl    eax,cl
10001ba8:	f6 c1 20             	test   cl,0x20
10001bab:	74 04                	je     10001bb1 <ror(unsigned long long, int, int)+0x6b>
10001bad:	89 c2                	mov    edx,eax
10001baf:	31 c0                	xor    eax,eax
10001bb1:	89 d1                	mov    ecx,edx
10001bb3:	89 c2                	mov    edx,eax
10001bb5:	89 d8                	mov    eax,ebx
10001bb7:	09 d0                	or     eax,edx
10001bb9:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
10001bbc:	89 f0                	mov    eax,esi
10001bbe:	09 c8                	or     eax,ecx
10001bc0:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
10001bc3:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10001bc6:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
10001bc9:	83 c4 20             	add    esp,0x20
10001bcc:	5b                   	pop    ebx
10001bcd:	5e                   	pop    esi
10001bce:	5d                   	pop    ebp
10001bcf:	c3                   	ret    

10001bd0 <swapBits(unsigned long long, unsigned long long, unsigned long long)>:
10001bd0:	55                   	push   ebp
10001bd1:	89 e5                	mov    ebp,esp
10001bd3:	56                   	push   esi
10001bd4:	53                   	push   ebx
10001bd5:	83 ec 40             	sub    esp,0x40
10001bd8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001bdb:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10001bde:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10001be1:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
10001be4:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
10001be7:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
10001bea:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
10001bed:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
10001bf0:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
10001bf3:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
10001bf6:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
10001bf9:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10001bfc:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
10001bff:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001c02:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001c05:	0f ad d0             	shrd   eax,edx,cl
10001c08:	d3 ea                	shr    edx,cl
10001c0a:	f6 c1 20             	test   cl,0x20
10001c0d:	74 04                	je     10001c13 <swapBits(unsigned long long, unsigned long long, unsigned long long)+0x43>
10001c0f:	89 d0                	mov    eax,edx
10001c11:	31 d2                	xor    edx,edx
10001c13:	89 c3                	mov    ebx,eax
10001c15:	89 d6                	mov    esi,edx
10001c17:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
10001c1a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001c1d:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001c20:	0f ad d0             	shrd   eax,edx,cl
10001c23:	d3 ea                	shr    edx,cl
10001c25:	f6 c1 20             	test   cl,0x20
10001c28:	74 04                	je     10001c2e <swapBits(unsigned long long, unsigned long long, unsigned long long)+0x5e>
10001c2a:	89 d0                	mov    eax,edx
10001c2c:	31 d2                	xor    edx,edx
10001c2e:	89 d1                	mov    ecx,edx
10001c30:	89 c2                	mov    edx,eax
10001c32:	89 d8                	mov    eax,ebx
10001c34:	31 d0                	xor    eax,edx
10001c36:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
10001c39:	89 f0                	mov    eax,esi
10001c3b:	31 c8                	xor    eax,ecx
10001c3d:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
10001c40:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
10001c43:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
10001c46:	89 c6                	mov    esi,eax
10001c48:	83 e6 01             	and    esi,0x1
10001c4b:	89 75 c8             	mov    DWORD PTR [ebp-0x38],esi
10001c4e:	89 d0                	mov    eax,edx
10001c50:	83 e0 00             	and    eax,0x0
10001c53:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
10001c56:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
10001c59:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
10001c5c:	89 c3                	mov    ebx,eax
10001c5e:	80 f7 00             	xor    bh,0x0
10001c61:	89 5d b8             	mov    DWORD PTR [ebp-0x48],ebx
10001c64:	89 d0                	mov    eax,edx
10001c66:	80 f4 00             	xor    ah,0x0
10001c69:	89 45 bc             	mov    DWORD PTR [ebp-0x44],eax
10001c6c:	8b 55 b8             	mov    edx,DWORD PTR [ebp-0x48]
10001c6f:	8b 4d bc             	mov    ecx,DWORD PTR [ebp-0x44]
10001c72:	89 c8                	mov    eax,ecx
10001c74:	09 d0                	or     eax,edx
10001c76:	85 c0                	test   eax,eax
10001c78:	74 62                	je     10001cdc <swapBits(unsigned long long, unsigned long long, unsigned long long)+0x10c>
10001c7a:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
10001c7d:	b8 01 00 00 00       	mov    eax,0x1
10001c82:	ba 00 00 00 00       	mov    edx,0x0
10001c87:	0f a5 c2             	shld   edx,eax,cl
10001c8a:	d3 e0                	shl    eax,cl
10001c8c:	f6 c1 20             	test   cl,0x20
10001c8f:	74 04                	je     10001c95 <swapBits(unsigned long long, unsigned long long, unsigned long long)+0xc5>
10001c91:	89 c2                	mov    edx,eax
10001c93:	31 c0                	xor    eax,eax
10001c95:	89 c3                	mov    ebx,eax
10001c97:	89 d6                	mov    esi,edx
10001c99:	89 d8                	mov    eax,ebx
10001c9b:	33 45 f0             	xor    eax,DWORD PTR [ebp-0x10]
10001c9e:	89 45 c0             	mov    DWORD PTR [ebp-0x40],eax
10001ca1:	89 f0                	mov    eax,esi
10001ca3:	33 45 f4             	xor    eax,DWORD PTR [ebp-0xc]
10001ca6:	89 45 c4             	mov    DWORD PTR [ebp-0x3c],eax
10001ca9:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
10001cac:	b8 01 00 00 00       	mov    eax,0x1
10001cb1:	ba 00 00 00 00       	mov    edx,0x0
10001cb6:	0f a5 c2             	shld   edx,eax,cl
10001cb9:	d3 e0                	shl    eax,cl
10001cbb:	f6 c1 20             	test   cl,0x20
10001cbe:	74 04                	je     10001cc4 <swapBits(unsigned long long, unsigned long long, unsigned long long)+0xf4>
10001cc0:	89 c2                	mov    edx,eax
10001cc2:	31 c0                	xor    eax,eax
10001cc4:	89 c1                	mov    ecx,eax
10001cc6:	89 d3                	mov    ebx,edx
10001cc8:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
10001ccb:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
10001cce:	89 c6                	mov    esi,eax
10001cd0:	31 ce                	xor    esi,ecx
10001cd2:	89 75 d8             	mov    DWORD PTR [ebp-0x28],esi
10001cd5:	31 d3                	xor    ebx,edx
10001cd7:	89 5d dc             	mov    DWORD PTR [ebp-0x24],ebx
10001cda:	eb 0c                	jmp    10001ce8 <swapBits(unsigned long long, unsigned long long, unsigned long long)+0x118>
10001cdc:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001cdf:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001ce2:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
10001ce5:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
10001ce8:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10001ceb:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
10001cee:	83 c4 40             	add    esp,0x40
10001cf1:	5b                   	pop    ebx
10001cf2:	5e                   	pop    esi
10001cf3:	5d                   	pop    ebp
10001cf4:	c3                   	ret    

10001cf5 <getChecksum(unsigned int)>:
10001cf5:	55                   	push   ebp
10001cf6:	89 e5                	mov    ebp,esp
10001cf8:	56                   	push   esi
10001cf9:	53                   	push   ebx
10001cfa:	83 ec 20             	sub    esp,0x20
10001cfd:	66 c7 45 f6 49 4e    	mov    WORD PTR [ebp-0xa],0x4e49
10001d03:	66 c7 45 f4 79 6e    	mov    WORD PTR [ebp-0xc],0x6e79
10001d09:	66 c7 45 f2 67 61    	mov    WORD PTR [ebp-0xe],0x6167
10001d0f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001d12:	c1 e8 10             	shr    eax,0x10
10001d15:	89 c1                	mov    ecx,eax
10001d17:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001d1a:	89 c2                	mov    edx,eax
10001d1c:	89 d0                	mov    eax,edx
10001d1e:	c1 e0 06             	shl    eax,0x6
10001d21:	29 d0                	sub    eax,edx
10001d23:	c1 e0 04             	shl    eax,0x4
10001d26:	01 d0                	add    eax,edx
10001d28:	31 c8                	xor    eax,ecx
10001d2a:	66 89 45 f0          	mov    WORD PTR [ebp-0x10],ax
10001d2e:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
10001d32:	0f 84 b1 00 00 00    	je     10001de9 <getChecksum(unsigned int)+0xf4>
10001d38:	b8 f4 02 00 00       	mov    eax,0x2f4
10001d3d:	ba 00 00 00 00       	mov    edx,0x0
10001d42:	f7 75 08             	div    DWORD PTR [ebp+0x8]
10001d45:	89 c3                	mov    ebx,eax
10001d47:	be 00 00 00 00       	mov    esi,0x0
10001d4c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001d4f:	ba 00 00 00 00       	mov    edx,0x0
10001d54:	6a 1d                	push   0x1d
10001d56:	6a 05                	push   0x5
10001d58:	52                   	push   edx
10001d59:	50                   	push   eax
10001d5a:	e8 fc ff ff ff       	call   10001d5b <getChecksum(unsigned int)+0x66>	10001d5b: R_386_PC32	ror(unsigned long long, int, int)
10001d5f:	83 c4 10             	add    esp,0x10
10001d62:	05 52 3f 04 00       	add    eax,0x43f52
10001d67:	83 d2 00             	adc    edx,0x0
10001d6a:	89 d9                	mov    ecx,ebx
10001d6c:	31 c1                	xor    ecx,eax
10001d6e:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
10001d71:	31 d6                	xor    esi,edx
10001d73:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
10001d76:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
10001d79:	66 8b 45 f6          	mov    ax,WORD PTR [ebp-0xa]
10001d7d:	66 0f af c2          	imul   ax,dx
10001d81:	66 89 45 f6          	mov    WORD PTR [ebp-0xa],ax
10001d85:	b8 ea 00 00 00       	mov    eax,0xea
10001d8a:	ba 00 00 00 00       	mov    edx,0x0
10001d8f:	f7 75 08             	div    DWORD PTR [ebp+0x8]
10001d92:	89 c3                	mov    ebx,eax
10001d94:	be 00 00 00 00       	mov    esi,0x0
10001d99:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001d9c:	ba 00 00 00 00       	mov    edx,0x0
10001da1:	6a 1f                	push   0x1f
10001da3:	6a 03                	push   0x3
10001da5:	52                   	push   edx
10001da6:	50                   	push   eax
10001da7:	e8 fc ff ff ff       	call   10001da8 <getChecksum(unsigned int)+0xb3>	10001da8: R_386_PC32	ror(unsigned long long, int, int)
10001dac:	83 c4 10             	add    esp,0x10
10001daf:	05 05 db 09 00       	add    eax,0x9db05
10001db4:	83 d2 00             	adc    edx,0x0
10001db7:	89 d9                	mov    ecx,ebx
10001db9:	31 c1                	xor    ecx,eax
10001dbb:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
10001dbe:	31 d6                	xor    esi,edx
10001dc0:	89 75 dc             	mov    DWORD PTR [ebp-0x24],esi
10001dc3:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10001dc6:	66 29 45 f4          	sub    WORD PTR [ebp-0xc],ax
10001dca:	66 8b 45 f6          	mov    ax,WORD PTR [ebp-0xa]
10001dce:	33 45 f4             	xor    eax,DWORD PTR [ebp-0xc]
10001dd1:	25 d2 04 00 00       	and    eax,0x4d2
10001dd6:	66 01 45 f2          	add    WORD PTR [ebp-0xe],ax
10001dda:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001ddd:	66 01 45 f2          	add    WORD PTR [ebp-0xe],ax
10001de1:	d1 6d 08             	shr    DWORD PTR [ebp+0x8],1
10001de4:	e9 45 ff ff ff       	jmp    10001d2e <getChecksum(unsigned int)+0x39>
10001de9:	66 8b 45 f6          	mov    ax,WORD PTR [ebp-0xa]
10001ded:	33 45 f4             	xor    eax,DWORD PTR [ebp-0xc]
10001df0:	66 33 45 f2          	xor    ax,WORD PTR [ebp-0xe]
10001df4:	33 45 f0             	xor    eax,DWORD PTR [ebp-0x10]
10001df7:	0f b7 c0             	movzx  eax,ax
10001dfa:	25 ff 7f 00 00       	and    eax,0x7fff
10001dff:	8d 65 f8             	lea    esp,[ebp-0x8]
10001e02:	5b                   	pop    ebx
10001e03:	5e                   	pop    esi
10001e04:	5d                   	pop    ebp
10001e05:	c3                   	ret    

10001e06 <createKey(char*, unsigned int)>:
10001e06:	55                   	push   ebp
10001e07:	89 e5                	mov    ebp,esp
10001e09:	53                   	push   ebx
10001e0a:	83 ec 34             	sub    esp,0x34
10001e0d:	68 a0 4a 00 10       	push   0x10004aa0	10001e0e: R_386_32	.text
10001e12:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001e15:	e8 fc ff ff ff       	call   10001e16 <createKey(char*, unsigned int)+0x10>	10001e16: R_386_PC32	strcpy
10001e1a:	83 c4 08             	add    esp,0x8
10001e1d:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
10001e20:	bb 00 00 00 00       	mov    ebx,0x0
10001e25:	89 c8                	mov    eax,ecx
10001e27:	89 da                	mov    edx,ebx
10001e29:	0f a4 c2 0f          	shld   edx,eax,0xf
10001e2d:	c1 e0 0f             	shl    eax,0xf
10001e30:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10001e33:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
10001e36:	83 ec 04             	sub    esp,0x4
10001e39:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10001e3c:	e8 fc ff ff ff       	call   10001e3d <createKey(char*, unsigned int)+0x37>	10001e3d: R_386_PC32	getChecksum(unsigned int)
10001e41:	83 c4 08             	add    esp,0x8
10001e44:	ba 00 00 00 00       	mov    edx,0x0
10001e49:	09 45 f0             	or     DWORD PTR [ebp-0x10],eax
10001e4c:	09 55 f4             	or     DWORD PTR [ebp-0xc],edx
10001e4f:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
10001e56:	81 7d ec db 24 00 00 	cmp    DWORD PTR [ebp-0x14],0x24db
10001e5d:	7f 7f                	jg     10001ede <createKey(char*, unsigned int)+0xd8>
10001e5f:	81 75 f0 95 38 e4 b5 	xor    DWORD PTR [ebp-0x10],0xb5e43895
10001e66:	83 75 f4 37          	xor    DWORD PTR [ebp-0xc],0x37
10001e6a:	6a 00                	push   0x0
10001e6c:	6a 08                	push   0x8
10001e6e:	6a 00                	push   0x0
10001e70:	6a 03                	push   0x3
10001e72:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10001e75:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10001e78:	e8 fc ff ff ff       	call   10001e79 <createKey(char*, unsigned int)+0x73>	10001e79: R_386_PC32	swapBits(unsigned long long, unsigned long long, unsigned long long)
10001e7d:	83 c4 18             	add    esp,0x18
10001e80:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10001e83:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
10001e86:	6a 00                	push   0x0
10001e88:	6a 0c                	push   0xc
10001e8a:	6a 00                	push   0x0
10001e8c:	6a 0d                	push   0xd
10001e8e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10001e91:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10001e94:	e8 fc ff ff ff       	call   10001e95 <createKey(char*, unsigned int)+0x8f>	10001e95: R_386_PC32	swapBits(unsigned long long, unsigned long long, unsigned long long)
10001e99:	83 c4 18             	add    esp,0x18
10001e9c:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10001e9f:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
10001ea2:	6a 00                	push   0x0
10001ea4:	6a 16                	push   0x16
10001ea6:	6a 00                	push   0x0
10001ea8:	6a 25                	push   0x25
10001eaa:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10001ead:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10001eb0:	e8 fc ff ff ff       	call   10001eb1 <createKey(char*, unsigned int)+0xab>	10001eb1: R_386_PC32	swapBits(unsigned long long, unsigned long long, unsigned long long)
10001eb5:	83 c4 18             	add    esp,0x18
10001eb8:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10001ebb:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
10001ebe:	6a 2a                	push   0x2a
10001ec0:	6a 13                	push   0x13
10001ec2:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10001ec5:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10001ec8:	e8 fc ff ff ff       	call   10001ec9 <createKey(char*, unsigned int)+0xc3>	10001ec9: R_386_PC32	ror(unsigned long long, int, int)
10001ecd:	83 c4 10             	add    esp,0x10
10001ed0:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10001ed3:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
10001ed6:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
10001ed9:	e9 78 ff ff ff       	jmp    10001e56 <createKey(char*, unsigned int)+0x50>
10001ede:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001ee1:	83 e0 0f             	and    eax,0xf
10001ee4:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
10001ee7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001eea:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001eed:	0f ac d0 04          	shrd   eax,edx,0x4
10001ef1:	c1 ea 04             	shr    edx,0x4
10001ef4:	89 c1                	mov    ecx,eax
10001ef6:	89 d3                	mov    ebx,edx
10001ef8:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
10001efb:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
10001efe:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001f01:	83 e0 0f             	and    eax,0xf
10001f04:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10001f07:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001f0a:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001f0d:	0f ac d0 04          	shrd   eax,edx,0x4
10001f11:	c1 ea 04             	shr    edx,0x4
10001f14:	89 c1                	mov    ecx,eax
10001f16:	89 d3                	mov    ebx,edx
10001f18:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
10001f1b:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
10001f1e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001f21:	83 e0 0f             	and    eax,0xf
10001f24:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
10001f27:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001f2a:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001f2d:	0f ac d0 04          	shrd   eax,edx,0x4
10001f31:	c1 ea 04             	shr    edx,0x4
10001f34:	89 c1                	mov    ecx,eax
10001f36:	89 d3                	mov    ebx,edx
10001f38:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
10001f3b:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
10001f3e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001f41:	25 ff 03 00 00       	and    eax,0x3ff
10001f46:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
10001f49:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001f4c:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001f4f:	0f ac d0 0a          	shrd   eax,edx,0xa
10001f53:	c1 ea 0a             	shr    edx,0xa
10001f56:	89 c1                	mov    ecx,eax
10001f58:	89 d3                	mov    ebx,edx
10001f5a:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
10001f5d:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
10001f60:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001f63:	25 ff 03 00 00       	and    eax,0x3ff
10001f68:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
10001f6b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001f6e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001f71:	0f ac d0 0a          	shrd   eax,edx,0xa
10001f75:	c1 ea 0a             	shr    edx,0xa
10001f78:	89 c1                	mov    ecx,eax
10001f7a:	89 d3                	mov    ebx,edx
10001f7c:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
10001f7f:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
10001f82:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001f85:	25 ff 03 00 00       	and    eax,0x3ff
10001f8a:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
10001f8d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001f90:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001f93:	0f ac d0 0a          	shrd   eax,edx,0xa
10001f97:	c1 ea 0a             	shr    edx,0xa
10001f9a:	89 c1                	mov    ecx,eax
10001f9c:	89 d3                	mov    ebx,edx
10001f9e:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
10001fa1:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
10001fa4:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
10001fa7:	05 00 00 00 00       	add    eax,0x0	10001fa8: R_386_32	lookupA
10001fac:	8a 10                	mov    dl,BYTE PTR [eax]
10001fae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001fb1:	88 10                	mov    BYTE PTR [eax],dl
10001fb3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001fb6:	8d 50 01             	lea    edx,[eax+0x1]
10001fb9:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10001fbc:	05 00 00 00 00       	add    eax,0x0	10001fbd: R_386_32	lookupA
10001fc1:	8a 00                	mov    al,BYTE PTR [eax]
10001fc3:	88 02                	mov    BYTE PTR [edx],al
10001fc5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001fc8:	8d 50 0f             	lea    edx,[eax+0xf]
10001fcb:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10001fce:	05 00 00 00 00       	add    eax,0x0	10001fcf: R_386_32	lookupA
10001fd3:	8a 00                	mov    al,BYTE PTR [eax]
10001fd5:	88 02                	mov    BYTE PTR [edx],al
10001fd7:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
10001fda:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
10001fdf:	f7 e9                	imul   ecx
10001fe1:	c1 fa 05             	sar    edx,0x5
10001fe4:	89 c8                	mov    eax,ecx
10001fe6:	c1 f8 1f             	sar    eax,0x1f
10001fe9:	29 c2                	sub    edx,eax
10001feb:	89 d0                	mov    eax,edx
10001fed:	b9 0a 00 00 00       	mov    ecx,0xa
10001ff2:	99                   	cdq    
10001ff3:	f7 f9                	idiv   ecx
10001ff5:	89 d0                	mov    eax,edx
10001ff7:	8d 50 30             	lea    edx,[eax+0x30]
10001ffa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001ffd:	83 c0 03             	add    eax,0x3
10002000:	88 10                	mov    BYTE PTR [eax],dl
10002002:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
10002005:	b8 67 66 66 66       	mov    eax,0x66666667
1000200a:	f7 e9                	imul   ecx
1000200c:	c1 fa 02             	sar    edx,0x2
1000200f:	89 c8                	mov    eax,ecx
10002011:	c1 f8 1f             	sar    eax,0x1f
10002014:	89 d1                	mov    ecx,edx
10002016:	29 c1                	sub    ecx,eax
10002018:	b8 67 66 66 66       	mov    eax,0x66666667
1000201d:	f7 e9                	imul   ecx
1000201f:	c1 fa 02             	sar    edx,0x2
10002022:	89 c8                	mov    eax,ecx
10002024:	c1 f8 1f             	sar    eax,0x1f
10002027:	29 c2                	sub    edx,eax
10002029:	89 d0                	mov    eax,edx
1000202b:	c1 e0 02             	shl    eax,0x2
1000202e:	01 d0                	add    eax,edx
10002030:	01 c0                	add    eax,eax
10002032:	29 c1                	sub    ecx,eax
10002034:	89 ca                	mov    edx,ecx
10002036:	88 d0                	mov    al,dl
10002038:	8d 50 30             	lea    edx,[eax+0x30]
1000203b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000203e:	83 c0 04             	add    eax,0x4
10002041:	88 10                	mov    BYTE PTR [eax],dl
10002043:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10002046:	b9 0a 00 00 00       	mov    ecx,0xa
1000204b:	99                   	cdq    
1000204c:	f7 f9                	idiv   ecx
1000204e:	89 d0                	mov    eax,edx
10002050:	8d 50 30             	lea    edx,[eax+0x30]
10002053:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002056:	83 c0 05             	add    eax,0x5
10002059:	88 10                	mov    BYTE PTR [eax],dl
1000205b:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
1000205e:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
10002063:	f7 e9                	imul   ecx
10002065:	c1 fa 05             	sar    edx,0x5
10002068:	89 c8                	mov    eax,ecx
1000206a:	c1 f8 1f             	sar    eax,0x1f
1000206d:	29 c2                	sub    edx,eax
1000206f:	89 d0                	mov    eax,edx
10002071:	b9 0a 00 00 00       	mov    ecx,0xa
10002076:	99                   	cdq    
10002077:	f7 f9                	idiv   ecx
10002079:	89 d0                	mov    eax,edx
1000207b:	8d 50 30             	lea    edx,[eax+0x30]
1000207e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002081:	83 c0 07             	add    eax,0x7
10002084:	88 10                	mov    BYTE PTR [eax],dl
10002086:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
10002089:	b8 67 66 66 66       	mov    eax,0x66666667
1000208e:	f7 e9                	imul   ecx
10002090:	c1 fa 02             	sar    edx,0x2
10002093:	89 c8                	mov    eax,ecx
10002095:	c1 f8 1f             	sar    eax,0x1f
10002098:	89 d1                	mov    ecx,edx
1000209a:	29 c1                	sub    ecx,eax
1000209c:	b8 67 66 66 66       	mov    eax,0x66666667
100020a1:	f7 e9                	imul   ecx
100020a3:	c1 fa 02             	sar    edx,0x2
100020a6:	89 c8                	mov    eax,ecx
100020a8:	c1 f8 1f             	sar    eax,0x1f
100020ab:	29 c2                	sub    edx,eax
100020ad:	89 d0                	mov    eax,edx
100020af:	c1 e0 02             	shl    eax,0x2
100020b2:	01 d0                	add    eax,edx
100020b4:	01 c0                	add    eax,eax
100020b6:	29 c1                	sub    ecx,eax
100020b8:	89 ca                	mov    edx,ecx
100020ba:	88 d0                	mov    al,dl
100020bc:	8d 50 30             	lea    edx,[eax+0x30]
100020bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100020c2:	83 c0 08             	add    eax,0x8
100020c5:	88 10                	mov    BYTE PTR [eax],dl
100020c7:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
100020ca:	b9 0a 00 00 00       	mov    ecx,0xa
100020cf:	99                   	cdq    
100020d0:	f7 f9                	idiv   ecx
100020d2:	89 d0                	mov    eax,edx
100020d4:	8d 50 30             	lea    edx,[eax+0x30]
100020d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100020da:	83 c0 09             	add    eax,0x9
100020dd:	88 10                	mov    BYTE PTR [eax],dl
100020df:	8b 4d d4             	mov    ecx,DWORD PTR [ebp-0x2c]
100020e2:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
100020e7:	f7 e9                	imul   ecx
100020e9:	c1 fa 05             	sar    edx,0x5
100020ec:	89 c8                	mov    eax,ecx
100020ee:	c1 f8 1f             	sar    eax,0x1f
100020f1:	29 c2                	sub    edx,eax
100020f3:	89 d0                	mov    eax,edx
100020f5:	b9 0a 00 00 00       	mov    ecx,0xa
100020fa:	99                   	cdq    
100020fb:	f7 f9                	idiv   ecx
100020fd:	89 d0                	mov    eax,edx
100020ff:	8d 50 30             	lea    edx,[eax+0x30]
10002102:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002105:	83 c0 0b             	add    eax,0xb
10002108:	88 10                	mov    BYTE PTR [eax],dl
1000210a:	8b 4d d4             	mov    ecx,DWORD PTR [ebp-0x2c]
1000210d:	b8 67 66 66 66       	mov    eax,0x66666667
10002112:	f7 e9                	imul   ecx
10002114:	c1 fa 02             	sar    edx,0x2
10002117:	89 c8                	mov    eax,ecx
10002119:	c1 f8 1f             	sar    eax,0x1f
1000211c:	89 d1                	mov    ecx,edx
1000211e:	29 c1                	sub    ecx,eax
10002120:	b8 67 66 66 66       	mov    eax,0x66666667
10002125:	f7 e9                	imul   ecx
10002127:	c1 fa 02             	sar    edx,0x2
1000212a:	89 c8                	mov    eax,ecx
1000212c:	c1 f8 1f             	sar    eax,0x1f
1000212f:	29 c2                	sub    edx,eax
10002131:	89 d0                	mov    eax,edx
10002133:	c1 e0 02             	shl    eax,0x2
10002136:	01 d0                	add    eax,edx
10002138:	01 c0                	add    eax,eax
1000213a:	29 c1                	sub    ecx,eax
1000213c:	89 ca                	mov    edx,ecx
1000213e:	88 d0                	mov    al,dl
10002140:	8d 50 30             	lea    edx,[eax+0x30]
10002143:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002146:	83 c0 0c             	add    eax,0xc
10002149:	88 10                	mov    BYTE PTR [eax],dl
1000214b:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
1000214e:	b9 0a 00 00 00       	mov    ecx,0xa
10002153:	99                   	cdq    
10002154:	f7 f9                	idiv   ecx
10002156:	89 d0                	mov    eax,edx
10002158:	8d 50 30             	lea    edx,[eax+0x30]
1000215b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000215e:	83 c0 0d             	add    eax,0xd
10002161:	88 10                	mov    BYTE PTR [eax],dl
10002163:	90                   	nop
10002164:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
10002167:	c9                   	leave  
10002168:	c3                   	ret    

10002169 <retrieveBits(char*)>:
10002169:	55                   	push   ebp
1000216a:	89 e5                	mov    ebp,esp
1000216c:	57                   	push   edi
1000216d:	56                   	push   esi
1000216e:	53                   	push   ebx
1000216f:	83 ec 4c             	sub    esp,0x4c
10002172:	c7 45 ec ff ff ff ff 	mov    DWORD PTR [ebp-0x14],0xffffffff
10002179:	c7 45 e8 ff ff ff ff 	mov    DWORD PTR [ebp-0x18],0xffffffff
10002180:	c7 45 e4 ff ff ff ff 	mov    DWORD PTR [ebp-0x1c],0xffffffff
10002187:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
1000218e:	83 7d e0 0f          	cmp    DWORD PTR [ebp-0x20],0xf
10002192:	7f 54                	jg     100021e8 <retrieveBits(char*)+0x7f>
10002194:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10002197:	05 00 00 00 00       	add    eax,0x0	10002198: R_386_32	lookupA
1000219c:	8a 10                	mov    dl,BYTE PTR [eax]
1000219e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100021a1:	8a 00                	mov    al,BYTE PTR [eax]
100021a3:	38 c2                	cmp    dl,al
100021a5:	75 06                	jne    100021ad <retrieveBits(char*)+0x44>
100021a7:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
100021aa:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
100021ad:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
100021b0:	05 00 00 00 00       	add    eax,0x0	100021b1: R_386_32	lookupB
100021b5:	8a 10                	mov    dl,BYTE PTR [eax]
100021b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100021ba:	40                   	inc    eax
100021bb:	8a 00                	mov    al,BYTE PTR [eax]
100021bd:	38 c2                	cmp    dl,al
100021bf:	75 06                	jne    100021c7 <retrieveBits(char*)+0x5e>
100021c1:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
100021c4:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
100021c7:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
100021ca:	05 00 00 00 00       	add    eax,0x0	100021cb: R_386_32	lookupC
100021cf:	8a 10                	mov    dl,BYTE PTR [eax]
100021d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100021d4:	83 c0 0f             	add    eax,0xf
100021d7:	8a 00                	mov    al,BYTE PTR [eax]
100021d9:	38 c2                	cmp    dl,al
100021db:	75 06                	jne    100021e3 <retrieveBits(char*)+0x7a>
100021dd:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
100021e0:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
100021e3:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
100021e6:	eb a6                	jmp    1000218e <retrieveBits(char*)+0x25>
100021e8:	83 7d ec ff          	cmp    DWORD PTR [ebp-0x14],0xffffffff
100021ec:	74 0c                	je     100021fa <retrieveBits(char*)+0x91>
100021ee:	83 7d e8 ff          	cmp    DWORD PTR [ebp-0x18],0xffffffff
100021f2:	74 06                	je     100021fa <retrieveBits(char*)+0x91>
100021f4:	83 7d e4 ff          	cmp    DWORD PTR [ebp-0x1c],0xffffffff
100021f8:	75 0f                	jne    10002209 <retrieveBits(char*)+0xa0>
100021fa:	b8 00 00 00 00       	mov    eax,0x0
100021ff:	ba 00 00 00 00       	mov    edx,0x0
10002204:	e9 02 02 00 00       	jmp    1000240b <retrieveBits(char*)+0x2a2>
10002209:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000220c:	83 c0 03             	add    eax,0x3
1000220f:	8a 00                	mov    al,BYTE PTR [eax]
10002211:	0f be c0             	movsx  eax,al
10002214:	8d 50 d0             	lea    edx,[eax-0x30]
10002217:	89 d0                	mov    eax,edx
10002219:	c1 e0 02             	shl    eax,0x2
1000221c:	01 d0                	add    eax,edx
1000221e:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10002225:	01 d0                	add    eax,edx
10002227:	c1 e0 02             	shl    eax,0x2
1000222a:	89 c6                	mov    esi,eax
1000222c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000222f:	83 c0 04             	add    eax,0x4
10002232:	8a 00                	mov    al,BYTE PTR [eax]
10002234:	0f be c0             	movsx  eax,al
10002237:	8d 50 d0             	lea    edx,[eax-0x30]
1000223a:	89 d0                	mov    eax,edx
1000223c:	c1 e0 02             	shl    eax,0x2
1000223f:	01 d0                	add    eax,edx
10002241:	01 c0                	add    eax,eax
10002243:	8d 14 06             	lea    edx,[esi+eax*1]
10002246:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002249:	83 c0 05             	add    eax,0x5
1000224c:	8a 00                	mov    al,BYTE PTR [eax]
1000224e:	0f be c0             	movsx  eax,al
10002251:	83 e8 30             	sub    eax,0x30
10002254:	01 d0                	add    eax,edx
10002256:	99                   	cdq    
10002257:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
1000225a:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
1000225d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002260:	83 c0 07             	add    eax,0x7
10002263:	8a 00                	mov    al,BYTE PTR [eax]
10002265:	0f be c0             	movsx  eax,al
10002268:	8d 50 d0             	lea    edx,[eax-0x30]
1000226b:	89 d0                	mov    eax,edx
1000226d:	c1 e0 02             	shl    eax,0x2
10002270:	01 d0                	add    eax,edx
10002272:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10002279:	01 d0                	add    eax,edx
1000227b:	c1 e0 02             	shl    eax,0x2
1000227e:	89 c6                	mov    esi,eax
10002280:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002283:	83 c0 08             	add    eax,0x8
10002286:	8a 00                	mov    al,BYTE PTR [eax]
10002288:	0f be c0             	movsx  eax,al
1000228b:	8d 50 d0             	lea    edx,[eax-0x30]
1000228e:	89 d0                	mov    eax,edx
10002290:	c1 e0 02             	shl    eax,0x2
10002293:	01 d0                	add    eax,edx
10002295:	01 c0                	add    eax,eax
10002297:	8d 14 06             	lea    edx,[esi+eax*1]
1000229a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000229d:	83 c0 09             	add    eax,0x9
100022a0:	8a 00                	mov    al,BYTE PTR [eax]
100022a2:	0f be c0             	movsx  eax,al
100022a5:	83 e8 30             	sub    eax,0x30
100022a8:	01 d0                	add    eax,edx
100022aa:	99                   	cdq    
100022ab:	89 45 c0             	mov    DWORD PTR [ebp-0x40],eax
100022ae:	89 55 c4             	mov    DWORD PTR [ebp-0x3c],edx
100022b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100022b4:	83 c0 0b             	add    eax,0xb
100022b7:	8a 00                	mov    al,BYTE PTR [eax]
100022b9:	0f be c0             	movsx  eax,al
100022bc:	8d 50 d0             	lea    edx,[eax-0x30]
100022bf:	89 d0                	mov    eax,edx
100022c1:	c1 e0 02             	shl    eax,0x2
100022c4:	01 d0                	add    eax,edx
100022c6:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
100022cd:	01 d0                	add    eax,edx
100022cf:	c1 e0 02             	shl    eax,0x2
100022d2:	89 c6                	mov    esi,eax
100022d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100022d7:	83 c0 0c             	add    eax,0xc
100022da:	8a 00                	mov    al,BYTE PTR [eax]
100022dc:	0f be c0             	movsx  eax,al
100022df:	8d 50 d0             	lea    edx,[eax-0x30]
100022e2:	89 d0                	mov    eax,edx
100022e4:	c1 e0 02             	shl    eax,0x2
100022e7:	01 d0                	add    eax,edx
100022e9:	01 c0                	add    eax,eax
100022eb:	8d 14 06             	lea    edx,[esi+eax*1]
100022ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100022f1:	83 c0 0d             	add    eax,0xd
100022f4:	8a 00                	mov    al,BYTE PTR [eax]
100022f6:	0f be c0             	movsx  eax,al
100022f9:	83 e8 30             	sub    eax,0x30
100022fc:	01 d0                	add    eax,edx
100022fe:	99                   	cdq    
100022ff:	89 45 b8             	mov    DWORD PTR [ebp-0x48],eax
10002302:	89 55 bc             	mov    DWORD PTR [ebp-0x44],edx
10002305:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
10002308:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
1000230b:	0f a4 c2 0a          	shld   edx,eax,0xa
1000230f:	c1 e0 0a             	shl    eax,0xa
10002312:	89 c6                	mov    esi,eax
10002314:	89 d7                	mov    edi,edx
10002316:	89 f0                	mov    eax,esi
10002318:	0b 45 c8             	or     eax,DWORD PTR [ebp-0x38]
1000231b:	89 c1                	mov    ecx,eax
1000231d:	89 f8                	mov    eax,edi
1000231f:	0b 45 cc             	or     eax,DWORD PTR [ebp-0x34]
10002322:	89 c3                	mov    ebx,eax
10002324:	8b 45 b8             	mov    eax,DWORD PTR [ebp-0x48]
10002327:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
1000232a:	0f a4 c2 14          	shld   edx,eax,0x14
1000232e:	c1 e0 14             	shl    eax,0x14
10002331:	89 ce                	mov    esi,ecx
10002333:	89 45 a8             	mov    DWORD PTR [ebp-0x58],eax
10002336:	89 55 ac             	mov    DWORD PTR [ebp-0x54],edx
10002339:	0b 75 a8             	or     esi,DWORD PTR [ebp-0x58]
1000233c:	89 75 d8             	mov    DWORD PTR [ebp-0x28],esi
1000233f:	89 d8                	mov    eax,ebx
10002341:	0b 45 ac             	or     eax,DWORD PTR [ebp-0x54]
10002344:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
10002347:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
1000234a:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
1000234d:	0f a4 c2 0c          	shld   edx,eax,0xc
10002351:	c1 e0 0c             	shl    eax,0xc
10002354:	89 c3                	mov    ebx,eax
10002356:	89 d6                	mov    esi,edx
10002358:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
1000235b:	89 75 dc             	mov    DWORD PTR [ebp-0x24],esi
1000235e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
10002361:	c1 e0 04             	shl    eax,0x4
10002364:	0b 45 ec             	or     eax,DWORD PTR [ebp-0x14]
10002367:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
1000236a:	c1 e2 08             	shl    edx,0x8
1000236d:	09 d0                	or     eax,edx
1000236f:	99                   	cdq    
10002370:	09 45 d8             	or     DWORD PTR [ebp-0x28],eax
10002373:	09 55 dc             	or     DWORD PTR [ebp-0x24],edx
10002376:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
1000237d:	81 7d d4 db 24 00 00 	cmp    DWORD PTR [ebp-0x2c],0x24db
10002384:	7f 7f                	jg     10002405 <retrieveBits(char*)+0x29c>
10002386:	6a 2a                	push   0x2a
10002388:	6a 13                	push   0x13
1000238a:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
1000238d:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10002390:	e8 fc ff ff ff       	call   10002391 <retrieveBits(char*)+0x228>	10002391: R_386_PC32	ror(unsigned long long, int, int)
10002395:	83 c4 10             	add    esp,0x10
10002398:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
1000239b:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
1000239e:	6a 00                	push   0x0
100023a0:	6a 08                	push   0x8
100023a2:	6a 00                	push   0x0
100023a4:	6a 03                	push   0x3
100023a6:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
100023a9:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
100023ac:	e8 fc ff ff ff       	call   100023ad <retrieveBits(char*)+0x244>	100023ad: R_386_PC32	swapBits(unsigned long long, unsigned long long, unsigned long long)
100023b1:	83 c4 18             	add    esp,0x18
100023b4:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
100023b7:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
100023ba:	6a 00                	push   0x0
100023bc:	6a 0c                	push   0xc
100023be:	6a 00                	push   0x0
100023c0:	6a 0d                	push   0xd
100023c2:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
100023c5:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
100023c8:	e8 fc ff ff ff       	call   100023c9 <retrieveBits(char*)+0x260>	100023c9: R_386_PC32	swapBits(unsigned long long, unsigned long long, unsigned long long)
100023cd:	83 c4 18             	add    esp,0x18
100023d0:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
100023d3:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
100023d6:	6a 00                	push   0x0
100023d8:	6a 16                	push   0x16
100023da:	6a 00                	push   0x0
100023dc:	6a 25                	push   0x25
100023de:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
100023e1:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
100023e4:	e8 fc ff ff ff       	call   100023e5 <retrieveBits(char*)+0x27c>	100023e5: R_386_PC32	swapBits(unsigned long long, unsigned long long, unsigned long long)
100023e9:	83 c4 18             	add    esp,0x18
100023ec:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
100023ef:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
100023f2:	81 75 d8 95 38 e4 b5 	xor    DWORD PTR [ebp-0x28],0xb5e43895
100023f9:	83 75 dc 37          	xor    DWORD PTR [ebp-0x24],0x37
100023fd:	ff 45 d4             	inc    DWORD PTR [ebp-0x2c]
10002400:	e9 78 ff ff ff       	jmp    1000237d <retrieveBits(char*)+0x214>
10002405:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10002408:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
1000240b:	8d 65 f4             	lea    esp,[ebp-0xc]
1000240e:	5b                   	pop    ebx
1000240f:	5e                   	pop    esi
10002410:	5f                   	pop    edi
10002411:	5d                   	pop    ebp
10002412:	c3                   	ret    

10002413 <checkKey(char*)>:
10002413:	55                   	push   ebp
10002414:	89 e5                	mov    ebp,esp
10002416:	53                   	push   ebx
10002417:	83 ec 14             	sub    esp,0x14
1000241a:	83 ec 04             	sub    esp,0x4
1000241d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002420:	e8 fc ff ff ff       	call   10002421 <checkKey(char*)+0xe>	10002421: R_386_PC32	retrieveBits(char*)
10002425:	83 c4 08             	add    esp,0x8
10002428:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
1000242b:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
1000242e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10002431:	25 ff 7f 00 00       	and    eax,0x7fff
10002436:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
10002439:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
1000243c:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
1000243f:	0f ac d0 0f          	shrd   eax,edx,0xf
10002443:	c1 ea 0f             	shr    edx,0xf
10002446:	89 c1                	mov    ecx,eax
10002448:	89 d3                	mov    ebx,edx
1000244a:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
1000244d:	83 ec 04             	sub    esp,0x4
10002450:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
10002453:	e8 fc ff ff ff       	call   10002454 <checkKey(char*)+0x41>	10002454: R_386_PC32	getChecksum(unsigned int)
10002458:	83 c4 08             	add    esp,0x8
1000245b:	39 45 ec             	cmp    DWORD PTR [ebp-0x14],eax
1000245e:	0f 95 c0             	setne  al
10002461:	84 c0                	test   al,al
10002463:	74 07                	je     1000246c <checkKey(char*)+0x59>
10002465:	b8 00 00 00 00       	mov    eax,0x0
1000246a:	eb 06                	jmp    10002472 <checkKey(char*)+0x5f>
1000246c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
1000246f:	83 e0 07             	and    eax,0x7
10002472:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
10002475:	c9                   	leave  
10002476:	c3                   	ret    

10002477 <changeKeyType(char*, int)>:
10002477:	55                   	push   ebp
10002478:	89 e5                	mov    ebp,esp
1000247a:	83 ec 10             	sub    esp,0x10
1000247d:	83 ec 04             	sub    esp,0x4
10002480:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002483:	e8 fc ff ff ff       	call   10002484 <changeKeyType(char*, int)+0xd>	10002484: R_386_PC32	retrieveBits(char*)
10002488:	83 c4 08             	add    esp,0x8
1000248b:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
1000248e:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
10002491:	83 65 f8 f8          	and    DWORD PTR [ebp-0x8],0xfffffff8
10002495:	83 65 fc ff          	and    DWORD PTR [ebp-0x4],0xffffffff
10002499:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
1000249c:	99                   	cdq    
1000249d:	09 45 f8             	or     DWORD PTR [ebp-0x8],eax
100024a0:	09 55 fc             	or     DWORD PTR [ebp-0x4],edx
100024a3:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
100024a6:	50                   	push   eax
100024a7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100024aa:	e8 fc ff ff ff       	call   100024ab <changeKeyType(char*, int)+0x34>	100024ab: R_386_PC32	createKey(char*, unsigned int)
100024af:	83 c4 08             	add    esp,0x8
100024b2:	83 ec 04             	sub    esp,0x4
100024b5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100024b8:	e8 fc ff ff ff       	call   100024b9 <changeKeyType(char*, int)+0x42>	100024b9: R_386_PC32	checkKey(char*)
100024bd:	83 c4 08             	add    esp,0x8
100024c0:	85 c0                	test   eax,eax
100024c2:	0f 95 c0             	setne  al
100024c5:	c9                   	leave  
100024c6:	c3                   	ret    

100024c7 <checkExtendedKey(char*)>:
100024c7:	55                   	push   ebp
100024c8:	89 e5                	mov    ebp,esp
100024ca:	83 ec 20             	sub    esp,0x20
100024cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100024d0:	8a 00                	mov    al,BYTE PTR [eax]
100024d2:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
100024d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100024d8:	8a 40 01             	mov    al,BYTE PTR [eax+0x1]
100024db:	88 45 ed             	mov    BYTE PTR [ebp-0x13],al
100024de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100024e1:	8a 40 02             	mov    al,BYTE PTR [eax+0x2]
100024e4:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
100024e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100024ea:	8a 40 03             	mov    al,BYTE PTR [eax+0x3]
100024ed:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
100024f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100024f3:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
100024f6:	88 45 f0             	mov    BYTE PTR [ebp-0x10],al
100024f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100024fc:	8a 40 05             	mov    al,BYTE PTR [eax+0x5]
100024ff:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
10002502:	c6 45 f2 2d          	mov    BYTE PTR [ebp-0xe],0x2d
10002506:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002509:	8a 40 06             	mov    al,BYTE PTR [eax+0x6]
1000250c:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
1000250f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002512:	8a 40 07             	mov    al,BYTE PTR [eax+0x7]
10002515:	88 45 f4             	mov    BYTE PTR [ebp-0xc],al
10002518:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000251b:	8a 40 09             	mov    al,BYTE PTR [eax+0x9]
1000251e:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
10002521:	c6 45 f6 2d          	mov    BYTE PTR [ebp-0xa],0x2d
10002525:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002528:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
1000252b:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
1000252e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002531:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
10002534:	88 45 f8             	mov    BYTE PTR [ebp-0x8],al
10002537:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000253a:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
1000253d:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
10002540:	c6 45 fa 2d          	mov    BYTE PTR [ebp-0x6],0x2d
10002544:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002547:	8a 40 0f             	mov    al,BYTE PTR [eax+0xf]
1000254a:	88 45 fb             	mov    BYTE PTR [ebp-0x5],al
1000254d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002550:	83 c0 0d             	add    eax,0xd
10002553:	8a 10                	mov    dl,BYTE PTR [eax]
10002555:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002558:	83 c0 0c             	add    eax,0xc
1000255b:	8a 00                	mov    al,BYTE PTR [eax]
1000255d:	38 c2                	cmp    dl,al
1000255f:	74 0a                	je     1000256b <checkExtendedKey(char*)+0xa4>
10002561:	b8 00 00 00 00       	mov    eax,0x0
10002566:	e9 d6 00 00 00       	jmp    10002641 <checkExtendedKey(char*)+0x17a>
1000256b:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
1000256e:	3c 2f                	cmp    al,0x2f
10002570:	7e 07                	jle    10002579 <checkExtendedKey(char*)+0xb2>
10002572:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
10002575:	3c 39                	cmp    al,0x39
10002577:	7e 0a                	jle    10002583 <checkExtendedKey(char*)+0xbc>
10002579:	b8 00 00 00 00       	mov    eax,0x0
1000257e:	e9 be 00 00 00       	jmp    10002641 <checkExtendedKey(char*)+0x17a>
10002583:	8a 45 f0             	mov    al,BYTE PTR [ebp-0x10]
10002586:	3c 2f                	cmp    al,0x2f
10002588:	7e 07                	jle    10002591 <checkExtendedKey(char*)+0xca>
1000258a:	8a 45 f0             	mov    al,BYTE PTR [ebp-0x10]
1000258d:	3c 39                	cmp    al,0x39
1000258f:	7e 0a                	jle    1000259b <checkExtendedKey(char*)+0xd4>
10002591:	b8 00 00 00 00       	mov    eax,0x0
10002596:	e9 a6 00 00 00       	jmp    10002641 <checkExtendedKey(char*)+0x17a>
1000259b:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
1000259e:	3c 2f                	cmp    al,0x2f
100025a0:	7e 07                	jle    100025a9 <checkExtendedKey(char*)+0xe2>
100025a2:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
100025a5:	3c 39                	cmp    al,0x39
100025a7:	7e 0a                	jle    100025b3 <checkExtendedKey(char*)+0xec>
100025a9:	b8 00 00 00 00       	mov    eax,0x0
100025ae:	e9 8e 00 00 00       	jmp    10002641 <checkExtendedKey(char*)+0x17a>
100025b3:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
100025b6:	3c 2f                	cmp    al,0x2f
100025b8:	7e 07                	jle    100025c1 <checkExtendedKey(char*)+0xfa>
100025ba:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
100025bd:	3c 39                	cmp    al,0x39
100025bf:	7e 07                	jle    100025c8 <checkExtendedKey(char*)+0x101>
100025c1:	b8 00 00 00 00       	mov    eax,0x0
100025c6:	eb 79                	jmp    10002641 <checkExtendedKey(char*)+0x17a>
100025c8:	8a 45 f4             	mov    al,BYTE PTR [ebp-0xc]
100025cb:	3c 2f                	cmp    al,0x2f
100025cd:	7e 07                	jle    100025d6 <checkExtendedKey(char*)+0x10f>
100025cf:	8a 45 f4             	mov    al,BYTE PTR [ebp-0xc]
100025d2:	3c 39                	cmp    al,0x39
100025d4:	7e 07                	jle    100025dd <checkExtendedKey(char*)+0x116>
100025d6:	b8 00 00 00 00       	mov    eax,0x0
100025db:	eb 64                	jmp    10002641 <checkExtendedKey(char*)+0x17a>
100025dd:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
100025e0:	3c 2f                	cmp    al,0x2f
100025e2:	7e 07                	jle    100025eb <checkExtendedKey(char*)+0x124>
100025e4:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
100025e7:	3c 39                	cmp    al,0x39
100025e9:	7e 07                	jle    100025f2 <checkExtendedKey(char*)+0x12b>
100025eb:	b8 00 00 00 00       	mov    eax,0x0
100025f0:	eb 4f                	jmp    10002641 <checkExtendedKey(char*)+0x17a>
100025f2:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
100025f5:	3c 2f                	cmp    al,0x2f
100025f7:	7e 07                	jle    10002600 <checkExtendedKey(char*)+0x139>
100025f9:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
100025fc:	3c 39                	cmp    al,0x39
100025fe:	7e 07                	jle    10002607 <checkExtendedKey(char*)+0x140>
10002600:	b8 00 00 00 00       	mov    eax,0x0
10002605:	eb 3a                	jmp    10002641 <checkExtendedKey(char*)+0x17a>
10002607:	8a 45 f8             	mov    al,BYTE PTR [ebp-0x8]
1000260a:	3c 2f                	cmp    al,0x2f
1000260c:	7e 07                	jle    10002615 <checkExtendedKey(char*)+0x14e>
1000260e:	8a 45 f8             	mov    al,BYTE PTR [ebp-0x8]
10002611:	3c 39                	cmp    al,0x39
10002613:	7e 07                	jle    1000261c <checkExtendedKey(char*)+0x155>
10002615:	b8 00 00 00 00       	mov    eax,0x0
1000261a:	eb 25                	jmp    10002641 <checkExtendedKey(char*)+0x17a>
1000261c:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
1000261f:	3c 2f                	cmp    al,0x2f
10002621:	7e 07                	jle    1000262a <checkExtendedKey(char*)+0x163>
10002623:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
10002626:	3c 39                	cmp    al,0x39
10002628:	7e 07                	jle    10002631 <checkExtendedKey(char*)+0x16a>
1000262a:	b8 00 00 00 00       	mov    eax,0x0
1000262f:	eb 10                	jmp    10002641 <checkExtendedKey(char*)+0x17a>
10002631:	83 ec 04             	sub    esp,0x4
10002634:	8d 45 ec             	lea    eax,[ebp-0x14]
10002637:	50                   	push   eax
10002638:	e8 fc ff ff ff       	call   10002639 <checkExtendedKey(char*)+0x172>	10002639: R_386_PC32	checkKey(char*)
1000263d:	83 c4 08             	add    esp,0x8
10002640:	90                   	nop
10002641:	c9                   	leave  
10002642:	c3                   	ret    

10002643 <firstRun(bool)>:
10002643:	55                   	push   ebp
10002644:	89 e5                	mov    ebp,esp
10002646:	53                   	push   ebx
10002647:	81 ec b4 00 00 00    	sub    esp,0xb4
1000264d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002650:	88 85 54 ff ff ff    	mov    BYTE PTR [ebp-0xac],al
10002656:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10002658: R_386_32	guiKeyboardHandler
	1000265c: R_386_32	bootInstallKeybrd(KeyboardToken, bool*)
10002660:	83 ec 0c             	sub    esp,0xc
10002663:	68 b4 4a 00 10       	push   0x10004ab4	10002664: R_386_32	.text
10002668:	e8 fc ff ff ff       	call   10002669 <firstRun(bool)+0x26>	10002669: R_386_PC32	KeSetBootMessage(char const*)
1000266d:	83 c4 10             	add    esp,0x10
10002670:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10002672: R_386_32	VgaText::hiddenOut
10002677:	a1 00 00 00 00       	mov    eax,ds:0x0	10002678: R_386_32	activeTerminal
1000267c:	83 ec 08             	sub    esp,0x8
1000267f:	68 dd 4a 00 10       	push   0x10004add	10002680: R_386_32	.text
10002684:	50                   	push   eax
10002685:	e8 fc ff ff ff       	call   10002686 <firstRun(bool)+0x43>	10002686: R_386_PC32	VgaText::puts(char const*)
1000268a:	83 c4 10             	add    esp,0x10
1000268d:	a1 00 00 00 00       	mov    eax,ds:0x0	1000268e: R_386_32	kernelProcess
10002692:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
10002698:	83 ec 08             	sub    esp,0x8
1000269b:	68 dd 4a 00 10       	push   0x10004add	1000269c: R_386_32	.text
100026a0:	50                   	push   eax
100026a1:	e8 fc ff ff ff       	call   100026a2 <firstRun(bool)+0x5f>	100026a2: R_386_PC32	VgaText::puts(char const*)
100026a6:	83 c4 10             	add    esp,0x10
100026a9:	83 ec 0c             	sub    esp,0xc
100026ac:	68 84 01 00 00       	push   0x184
100026b1:	e8 fc ff ff ff       	call   100026b2 <firstRun(bool)+0x6f>	100026b2: R_386_PC32	operator new(unsigned long)
100026b6:	83 c4 10             	add    esp,0x10
100026b9:	89 c3                	mov    ebx,eax
100026bb:	83 ec 08             	sub    esp,0x8
100026be:	68 e4 4a 00 10       	push   0x10004ae4	100026bf: R_386_32	.text
100026c3:	53                   	push   ebx
100026c4:	e8 fc ff ff ff       	call   100026c5 <firstRun(bool)+0x82>	100026c5: R_386_PC32	VgaText::VgaText(char const*)
100026c9:	83 c4 10             	add    esp,0x10
100026cc:	89 1d 00 00 00 00    	mov    DWORD PTR ds:0x0,ebx	100026ce: R_386_32	term
100026d2:	a1 00 00 00 00       	mov    eax,ds:0x0	100026d3: R_386_32	term
100026d7:	83 ec 0c             	sub    esp,0xc
100026da:	50                   	push   eax
100026db:	e8 fc ff ff ff       	call   100026dc <firstRun(bool)+0x99>	100026dc: R_386_PC32	setActiveTerminal(VgaText*)
100026e0:	83 c4 10             	add    esp,0x10
100026e3:	e8 fc ff ff ff       	call   100026e4 <firstRun(bool)+0xa1>	100026e4: R_386_PC32	drawBootScreen()
100026e8:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
100026ef:	8a 85 54 ff ff ff    	mov    al,BYTE PTR [ebp-0xac]
100026f5:	83 f0 01             	xor    eax,0x1
100026f8:	84 c0                	test   al,al
100026fa:	0f 84 2f 10 00 00    	je     1000372f <firstRun(bool)+0x10ec>
10002700:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
10002707:	83 ec 0c             	sub    esp,0xc
1000270a:	68 e9 4a 00 10       	push   0x10004ae9	1000270b: R_386_32	.text
1000270f:	6a 0c                	push   0xc
10002711:	6a 32                	push   0x32
10002713:	6a 03                	push   0x3
10002715:	6a 16                	push   0x16
10002717:	e8 fc ff ff ff       	call   10002718 <firstRun(bool)+0xd5>	10002718: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
1000271c:	83 c4 20             	add    esp,0x20
1000271f:	a1 00 00 00 00       	mov    eax,ds:0x0	10002720: R_386_32	term
10002724:	83 ec 04             	sub    esp,0x4
10002727:	6a 06                	push   0x6
10002729:	6a 18                	push   0x18
1000272b:	50                   	push   eax
1000272c:	e8 fc ff ff ff       	call   1000272d <firstRun(bool)+0xea>	1000272d: R_386_PC32	VgaText::setCursor(int, int)
10002731:	83 c4 10             	add    esp,0x10
10002734:	a1 00 00 00 00       	mov    eax,ds:0x0	10002735: R_386_32	term
10002739:	83 ec 08             	sub    esp,0x8
1000273c:	68 f8 4a 00 10       	push   0x10004af8	1000273d: R_386_32	.text
10002741:	50                   	push   eax
10002742:	e8 fc ff ff ff       	call   10002743 <firstRun(bool)+0x100>	10002743: R_386_PC32	VgaText::puts(char const*)
10002747:	83 c4 10             	add    esp,0x10
1000274a:	a1 00 00 00 00       	mov    eax,ds:0x0	1000274b: R_386_32	term
1000274f:	83 ec 04             	sub    esp,0x4
10002752:	6a 07                	push   0x7
10002754:	6a 18                	push   0x18
10002756:	50                   	push   eax
10002757:	e8 fc ff ff ff       	call   10002758 <firstRun(bool)+0x115>	10002758: R_386_PC32	VgaText::setCursor(int, int)
1000275c:	83 c4 10             	add    esp,0x10
1000275f:	a1 00 00 00 00       	mov    eax,ds:0x0	10002760: R_386_32	term
10002764:	83 ec 08             	sub    esp,0x8
10002767:	68 27 4b 00 10       	push   0x10004b27	10002768: R_386_32	.text
1000276c:	50                   	push   eax
1000276d:	e8 fc ff ff ff       	call   1000276e <firstRun(bool)+0x12b>	1000276e: R_386_PC32	VgaText::puts(char const*)
10002772:	83 c4 10             	add    esp,0x10
10002775:	a1 00 00 00 00       	mov    eax,ds:0x0	10002776: R_386_32	term
1000277a:	83 ec 04             	sub    esp,0x4
1000277d:	6a 09                	push   0x9
1000277f:	6a 18                	push   0x18
10002781:	50                   	push   eax
10002782:	e8 fc ff ff ff       	call   10002783 <firstRun(bool)+0x140>	10002783: R_386_PC32	VgaText::setCursor(int, int)
10002787:	83 c4 10             	add    esp,0x10
1000278a:	a1 00 00 00 00       	mov    eax,ds:0x0	1000278b: R_386_32	term
1000278f:	83 ec 08             	sub    esp,0x8
10002792:	68 37 4b 00 10       	push   0x10004b37	10002793: R_386_32	.text
10002797:	50                   	push   eax
10002798:	e8 fc ff ff ff       	call   10002799 <firstRun(bool)+0x156>	10002799: R_386_PC32	VgaText::puts(char const*)
1000279d:	83 c4 10             	add    esp,0x10
100027a0:	a1 00 00 00 00       	mov    eax,ds:0x0	100027a1: R_386_32	term
100027a5:	83 ec 04             	sub    esp,0x4
100027a8:	6a 0b                	push   0xb
100027aa:	6a 18                	push   0x18
100027ac:	50                   	push   eax
100027ad:	e8 fc ff ff ff       	call   100027ae <firstRun(bool)+0x16b>	100027ae: R_386_PC32	VgaText::setCursor(int, int)
100027b2:	83 c4 10             	add    esp,0x10
100027b5:	a1 00 00 00 00       	mov    eax,ds:0x0	100027b6: R_386_32	term
100027ba:	83 ec 08             	sub    esp,0x8
100027bd:	68 3c 4b 00 10       	push   0x10004b3c	100027be: R_386_32	.text
100027c2:	50                   	push   eax
100027c3:	e8 fc ff ff ff       	call   100027c4 <firstRun(bool)+0x181>	100027c4: R_386_PC32	VgaText::puts(char const*)
100027c8:	83 c4 10             	add    esp,0x10
100027cb:	a1 00 00 00 00       	mov    eax,ds:0x0	100027cc: R_386_32	term
100027d0:	83 ec 04             	sub    esp,0x4
100027d3:	6a 09                	push   0x9
100027d5:	6a 21                	push   0x21
100027d7:	50                   	push   eax
100027d8:	e8 fc ff ff ff       	call   100027d9 <firstRun(bool)+0x196>	100027d9: R_386_PC32	VgaText::setCursor(int, int)
100027dd:	83 c4 10             	add    esp,0x10
100027e0:	a1 00 00 00 00       	mov    eax,ds:0x0	100027e1: R_386_32	term
100027e5:	6a 07                	push   0x7
100027e7:	6a 00                	push   0x0
100027e9:	68 44 4b 00 10       	push   0x10004b44	100027ea: R_386_32	.text
100027ee:	50                   	push   eax
100027ef:	e8 fc ff ff ff       	call   100027f0 <firstRun(bool)+0x1ad>	100027f0: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
100027f4:	83 c4 10             	add    esp,0x10
100027f7:	a1 00 00 00 00       	mov    eax,ds:0x0	100027f8: R_386_32	term
100027fc:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
10002800:	75 07                	jne    10002809 <firstRun(bool)+0x1c6>
10002802:	ba 5e 4b 00 10       	mov    edx,0x10004b5e	10002803: R_386_32	.text
10002807:	eb 05                	jmp    1000280e <firstRun(bool)+0x1cb>
10002809:	ba 62 4b 00 10       	mov    edx,0x10004b62	1000280a: R_386_32	.text
1000280e:	6a 0f                	push   0xf
10002810:	6a 00                	push   0x0
10002812:	52                   	push   edx
10002813:	50                   	push   eax
10002814:	e8 fc ff ff ff       	call   10002815 <firstRun(bool)+0x1d2>	10002815: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002819:	83 c4 10             	add    esp,0x10
1000281c:	a1 00 00 00 00       	mov    eax,ds:0x0	1000281d: R_386_32	term
10002821:	83 ec 08             	sub    esp,0x8
10002824:	6a 21                	push   0x21
10002826:	50                   	push   eax
10002827:	e8 fc ff ff ff       	call   10002828 <firstRun(bool)+0x1e5>	10002828: R_386_PC32	VgaText::setCursorX(int)
1000282c:	83 c4 10             	add    esp,0x10
1000282f:	a1 00 00 00 00       	mov    eax,ds:0x0	10002830: R_386_32	term
10002834:	6a 07                	push   0x7
10002836:	6a 00                	push   0x0
10002838:	68 00 00 00 00       	push   0x0	10002839: R_386_32	currName
1000283d:	50                   	push   eax
1000283e:	e8 fc ff ff ff       	call   1000283f <firstRun(bool)+0x1fc>	1000283f: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002843:	83 c4 10             	add    esp,0x10
10002846:	a1 00 00 00 00       	mov    eax,ds:0x0	10002847: R_386_32	term
1000284b:	83 ec 04             	sub    esp,0x4
1000284e:	6a 0b                	push   0xb
10002850:	6a 21                	push   0x21
10002852:	50                   	push   eax
10002853:	e8 fc ff ff ff       	call   10002854 <firstRun(bool)+0x211>	10002854: R_386_PC32	VgaText::setCursor(int, int)
10002858:	83 c4 10             	add    esp,0x10
1000285b:	a1 00 00 00 00       	mov    eax,ds:0x0	1000285c: R_386_32	term
10002860:	6a 07                	push   0x7
10002862:	6a 00                	push   0x0
10002864:	68 44 4b 00 10       	push   0x10004b44	10002865: R_386_32	.text
10002869:	50                   	push   eax
1000286a:	e8 fc ff ff ff       	call   1000286b <firstRun(bool)+0x228>	1000286b: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
1000286f:	83 c4 10             	add    esp,0x10
10002872:	a1 00 00 00 00       	mov    eax,ds:0x0	10002873: R_386_32	term
10002877:	83 7d f0 01          	cmp    DWORD PTR [ebp-0x10],0x1
1000287b:	75 07                	jne    10002884 <firstRun(bool)+0x241>
1000287d:	ba 5e 4b 00 10       	mov    edx,0x10004b5e	1000287e: R_386_32	.text
10002882:	eb 05                	jmp    10002889 <firstRun(bool)+0x246>
10002884:	ba 62 4b 00 10       	mov    edx,0x10004b62	10002885: R_386_32	.text
10002889:	6a 0f                	push   0xf
1000288b:	6a 00                	push   0x0
1000288d:	52                   	push   edx
1000288e:	50                   	push   eax
1000288f:	e8 fc ff ff ff       	call   10002890 <firstRun(bool)+0x24d>	10002890: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002894:	83 c4 10             	add    esp,0x10
10002897:	a1 00 00 00 00       	mov    eax,ds:0x0	10002898: R_386_32	term
1000289c:	83 ec 08             	sub    esp,0x8
1000289f:	6a 21                	push   0x21
100028a1:	50                   	push   eax
100028a2:	e8 fc ff ff ff       	call   100028a3 <firstRun(bool)+0x260>	100028a3: R_386_PC32	VgaText::setCursorX(int)
100028a7:	83 c4 10             	add    esp,0x10
100028aa:	a1 00 00 00 00       	mov    eax,ds:0x0	100028ab: R_386_32	term
100028af:	6a 07                	push   0x7
100028b1:	6a 00                	push   0x0
100028b3:	68 00 00 00 00       	push   0x0	100028b4: R_386_32	currComp
100028b8:	50                   	push   eax
100028b9:	e8 fc ff ff ff       	call   100028ba <firstRun(bool)+0x277>	100028ba: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
100028be:	83 c4 10             	add    esp,0x10
100028c1:	a1 00 00 00 00       	mov    eax,ds:0x0	100028c2: R_386_32	term
100028c6:	83 ec 04             	sub    esp,0x4
100028c9:	6a 0d                	push   0xd
100028cb:	6a 18                	push   0x18
100028cd:	50                   	push   eax
100028ce:	e8 fc ff ff ff       	call   100028cf <firstRun(bool)+0x28c>	100028cf: R_386_PC32	VgaText::setCursor(int, int)
100028d3:	83 c4 10             	add    esp,0x10
100028d6:	a1 00 00 00 00       	mov    eax,ds:0x0	100028d7: R_386_32	term
100028db:	83 7d f0 02          	cmp    DWORD PTR [ebp-0x10],0x2
100028df:	75 07                	jne    100028e8 <firstRun(bool)+0x2a5>
100028e1:	ba 66 4b 00 10       	mov    edx,0x10004b66	100028e2: R_386_32	.text
100028e6:	eb 05                	jmp    100028ed <firstRun(bool)+0x2aa>
100028e8:	ba 72 4b 00 10       	mov    edx,0x10004b72	100028e9: R_386_32	.text
100028ed:	6a 0f                	push   0xf
100028ef:	6a 08                	push   0x8
100028f1:	52                   	push   edx
100028f2:	50                   	push   eax
100028f3:	e8 fc ff ff ff       	call   100028f4 <firstRun(bool)+0x2b1>	100028f4: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
100028f8:	83 c4 10             	add    esp,0x10
100028fb:	a1 00 00 00 00       	mov    eax,ds:0x0	100028fc: R_386_32	term
10002900:	83 ec 04             	sub    esp,0x4
10002903:	6a 0e                	push   0xe
10002905:	6a 18                	push   0x18
10002907:	50                   	push   eax
10002908:	e8 fc ff ff ff       	call   10002909 <firstRun(bool)+0x2c6>	10002909: R_386_PC32	VgaText::setCursor(int, int)
1000290d:	83 c4 10             	add    esp,0x10
10002910:	a1 00 00 00 00       	mov    eax,ds:0x0	10002911: R_386_32	term
10002915:	83 7d f0 02          	cmp    DWORD PTR [ebp-0x10],0x2
10002919:	75 07                	jne    10002922 <firstRun(bool)+0x2df>
1000291b:	ba 7e 4b 00 10       	mov    edx,0x10004b7e	1000291c: R_386_32	.text
10002920:	eb 05                	jmp    10002927 <firstRun(bool)+0x2e4>
10002922:	ba 72 4b 00 10       	mov    edx,0x10004b72	10002923: R_386_32	.text
10002927:	6a 0f                	push   0xf
10002929:	6a 08                	push   0x8
1000292b:	52                   	push   edx
1000292c:	50                   	push   eax
1000292d:	e8 fc ff ff ff       	call   1000292e <firstRun(bool)+0x2eb>	1000292e: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002932:	83 c4 10             	add    esp,0x10
10002935:	a1 00 00 00 00       	mov    eax,ds:0x0	10002936: R_386_32	term
1000293a:	83 ec 04             	sub    esp,0x4
1000293d:	6a 0d                	push   0xd
1000293f:	6a 32                	push   0x32
10002941:	50                   	push   eax
10002942:	e8 fc ff ff ff       	call   10002943 <firstRun(bool)+0x300>	10002943: R_386_PC32	VgaText::setCursor(int, int)
10002947:	83 c4 10             	add    esp,0x10
1000294a:	83 7d f0 02          	cmp    DWORD PTR [ebp-0x10],0x2
1000294e:	74 19                	je     10002969 <firstRun(bool)+0x326>
10002950:	a1 00 00 00 00       	mov    eax,ds:0x0	10002951: R_386_32	term
10002955:	6a 08                	push   0x8
10002957:	6a 0f                	push   0xf
10002959:	68 88 4b 00 10       	push   0x10004b88	1000295a: R_386_32	.text
1000295e:	50                   	push   eax
1000295f:	e8 fc ff ff ff       	call   10002960 <firstRun(bool)+0x31d>	10002960: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002964:	83 c4 10             	add    esp,0x10
10002967:	eb 17                	jmp    10002980 <firstRun(bool)+0x33d>
10002969:	a1 00 00 00 00       	mov    eax,ds:0x0	1000296a: R_386_32	term
1000296e:	6a 01                	push   0x1
10002970:	6a 0f                	push   0xf
10002972:	68 88 4b 00 10       	push   0x10004b88	10002973: R_386_32	.text
10002977:	50                   	push   eax
10002978:	e8 fc ff ff ff       	call   10002979 <firstRun(bool)+0x336>	10002979: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
1000297d:	83 c4 10             	add    esp,0x10
10002980:	a1 00 00 00 00       	mov    eax,ds:0x0	10002981: R_386_32	term
10002985:	83 7d f0 02          	cmp    DWORD PTR [ebp-0x10],0x2
10002989:	75 07                	jne    10002992 <firstRun(bool)+0x34f>
1000298b:	ba 5e 4b 00 10       	mov    edx,0x10004b5e	1000298c: R_386_32	.text
10002990:	eb 05                	jmp    10002997 <firstRun(bool)+0x354>
10002992:	ba 62 4b 00 10       	mov    edx,0x10004b62	10002993: R_386_32	.text
10002997:	6a 0f                	push   0xf
10002999:	6a 00                	push   0x0
1000299b:	52                   	push   edx
1000299c:	50                   	push   eax
1000299d:	e8 fc ff ff ff       	call   1000299e <firstRun(bool)+0x35b>	1000299e: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
100029a2:	83 c4 10             	add    esp,0x10
100029a5:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
100029a9:	75 28                	jne    100029d3 <firstRun(bool)+0x390>
100029ab:	8b 1d 00 00 00 00    	mov    ebx,DWORD PTR ds:0x0	100029ad: R_386_32	term
100029b1:	83 ec 0c             	sub    esp,0xc
100029b4:	68 00 00 00 00       	push   0x0	100029b5: R_386_32	currName
100029b9:	e8 fc ff ff ff       	call   100029ba <firstRun(bool)+0x377>	100029ba: R_386_PC32	strlen
100029be:	83 c4 10             	add    esp,0x10
100029c1:	83 c0 21             	add    eax,0x21
100029c4:	83 ec 04             	sub    esp,0x4
100029c7:	6a 09                	push   0x9
100029c9:	50                   	push   eax
100029ca:	53                   	push   ebx
100029cb:	e8 fc ff ff ff       	call   100029cc <firstRun(bool)+0x389>	100029cc: R_386_PC32	VgaText::setCursor(int, int)
100029d0:	83 c4 10             	add    esp,0x10
100029d3:	83 7d f0 01          	cmp    DWORD PTR [ebp-0x10],0x1
100029d7:	75 28                	jne    10002a01 <firstRun(bool)+0x3be>
100029d9:	8b 1d 00 00 00 00    	mov    ebx,DWORD PTR ds:0x0	100029db: R_386_32	term
100029df:	83 ec 0c             	sub    esp,0xc
100029e2:	68 00 00 00 00       	push   0x0	100029e3: R_386_32	currComp
100029e7:	e8 fc ff ff ff       	call   100029e8 <firstRun(bool)+0x3a5>	100029e8: R_386_PC32	strlen
100029ec:	83 c4 10             	add    esp,0x10
100029ef:	83 c0 21             	add    eax,0x21
100029f2:	83 ec 04             	sub    esp,0x4
100029f5:	6a 0b                	push   0xb
100029f7:	50                   	push   eax
100029f8:	53                   	push   ebx
100029f9:	e8 fc ff ff ff       	call   100029fa <firstRun(bool)+0x3b7>	100029fa: R_386_PC32	VgaText::setCursor(int, int)
100029fe:	83 c4 10             	add    esp,0x10
10002a01:	83 7d f0 02          	cmp    DWORD PTR [ebp-0x10],0x2
10002a05:	75 15                	jne    10002a1c <firstRun(bool)+0x3d9>
10002a07:	a1 00 00 00 00       	mov    eax,ds:0x0	10002a08: R_386_32	term
10002a0c:	83 ec 04             	sub    esp,0x4
10002a0f:	6a 02                	push   0x2
10002a11:	6a 00                	push   0x0
10002a13:	50                   	push   eax
10002a14:	e8 fc ff ff ff       	call   10002a15 <firstRun(bool)+0x3d2>	10002a15: R_386_PC32	VgaText::setCursor(int, int)
10002a19:	83 c4 10             	add    esp,0x10
10002a1c:	a0 00 00 00 00       	mov    al,ds:0x0	10002a1d: R_386_32	installKey
10002a21:	84 c0                	test   al,al
10002a23:	0f 94 c0             	sete   al
10002a26:	84 c0                	test   al,al
10002a28:	74 02                	je     10002a2c <firstRun(bool)+0x3e9>
10002a2a:	eb f0                	jmp    10002a1c <firstRun(bool)+0x3d9>
10002a2c:	a1 00 00 00 00       	mov    eax,ds:0x0	10002a2d: R_386_32	term
10002a31:	05 82 00 00 00       	add    eax,0x82
10002a36:	83 ec 04             	sub    esp,0x4
10002a39:	6a 10                	push   0x10
10002a3b:	6a 00                	push   0x0
10002a3d:	50                   	push   eax
10002a3e:	e8 fc ff ff ff       	call   10002a3f <firstRun(bool)+0x3fc>	10002a3f: R_386_PC32	memset
10002a43:	83 c4 10             	add    esp,0x10
10002a46:	a1 00 00 00 00       	mov    eax,ds:0x0	10002a47: R_386_32	term
10002a4b:	05 02 01 00 00       	add    eax,0x102
10002a50:	83 ec 04             	sub    esp,0x4
10002a53:	6a 10                	push   0x10
10002a55:	6a 00                	push   0x0
10002a57:	50                   	push   eax
10002a58:	e8 fc ff ff ff       	call   10002a59 <firstRun(bool)+0x416>	10002a59: R_386_PC32	memset
10002a5d:	83 c4 10             	add    esp,0x10
10002a60:	a0 00 00 00 00       	mov    al,ds:0x0	10002a61: R_386_32	installKey
10002a65:	3c 09                	cmp    al,0x9
10002a67:	74 09                	je     10002a72 <firstRun(bool)+0x42f>
10002a69:	a0 00 00 00 00       	mov    al,ds:0x0	10002a6a: R_386_32	installKey
10002a6e:	3c 0a                	cmp    al,0xa
10002a70:	75 04                	jne    10002a76 <firstRun(bool)+0x433>
10002a72:	b0 01                	mov    al,0x1
10002a74:	eb 02                	jmp    10002a78 <firstRun(bool)+0x435>
10002a76:	b0 00                	mov    al,0x0
10002a78:	84 c0                	test   al,al
10002a7a:	0f 84 f0 03 00 00    	je     10002e70 <firstRun(bool)+0x82d>
10002a80:	83 7d f0 02          	cmp    DWORD PTR [ebp-0x10],0x2
10002a84:	75 0d                	jne    10002a93 <firstRun(bool)+0x450>
10002a86:	a0 00 00 00 00       	mov    al,ds:0x0	10002a87: R_386_32	installKey
10002a8b:	3c 0a                	cmp    al,0xa
10002a8d:	75 04                	jne    10002a93 <firstRun(bool)+0x450>
10002a8f:	b0 01                	mov    al,0x1
10002a91:	eb 02                	jmp    10002a95 <firstRun(bool)+0x452>
10002a93:	b0 00                	mov    al,0x0
10002a95:	84 c0                	test   al,al
10002a97:	0f 84 ae 03 00 00    	je     10002e4b <firstRun(bool)+0x808>
10002a9d:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10002a9f: R_386_32	installKey
10002aa4:	90                   	nop
10002aa5:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10002aa7: R_386_32	installKey
10002aac:	83 ec 0c             	sub    esp,0xc
10002aaf:	68 a0 0f 00 00       	push   0xfa0
10002ab4:	e8 fc ff ff ff       	call   10002ab5 <firstRun(bool)+0x472>	10002ab5: R_386_PC32	milliTenthSleep(unsigned int)
10002ab9:	83 c4 10             	add    esp,0x10
10002abc:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10002abe: R_386_32	installKey
10002ac3:	e8 fc ff ff ff       	call   10002ac4 <firstRun(bool)+0x481>	10002ac4: R_386_PC32	drawBootScreen()
10002ac8:	83 ec 0c             	sub    esp,0xc
10002acb:	68 91 4b 00 10       	push   0x10004b91	10002acc: R_386_32	.text
10002ad0:	6a 0d                	push   0xd
10002ad2:	6a 32                	push   0x32
10002ad4:	6a 02                	push   0x2
10002ad6:	6a 16                	push   0x16
10002ad8:	e8 fc ff ff ff       	call   10002ad9 <firstRun(bool)+0x496>	10002ad9: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
10002add:	83 c4 20             	add    esp,0x20
10002ae0:	a1 00 00 00 00       	mov    eax,ds:0x0	10002ae1: R_386_32	Krnl::computer
10002ae5:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
10002aeb:	a1 00 00 00 00       	mov    eax,ds:0x0	10002aec: R_386_32	Krnl::computer
10002af0:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
10002af6:	8b 00                	mov    eax,DWORD PTR [eax]
10002af8:	83 c0 28             	add    eax,0x28
10002afb:	8b 00                	mov    eax,DWORD PTR [eax]
10002afd:	8d 55 b8             	lea    edx,[ebp-0x48]
10002b00:	83 ec 08             	sub    esp,0x8
10002b03:	51                   	push   ecx
10002b04:	52                   	push   edx
10002b05:	ff d0                	call   eax
10002b07:	83 c4 0c             	add    esp,0xc
10002b0a:	83 ec 08             	sub    esp,0x8
10002b0d:	68 9f 4b 00 10       	push   0x10004b9f	10002b0e: R_386_32	.text
10002b12:	8d 85 66 ff ff ff    	lea    eax,[ebp-0x9a]
10002b18:	50                   	push   eax
10002b19:	e8 fc ff ff ff       	call   10002b1a <firstRun(bool)+0x4d7>	10002b1a: R_386_PC32	strcpy
10002b1e:	83 c4 10             	add    esp,0x10
10002b21:	8a 45 b8             	mov    al,BYTE PTR [ebp-0x48]
10002b24:	0f b6 d0             	movzx  edx,al
10002b27:	89 d0                	mov    eax,edx
10002b29:	c1 e0 02             	shl    eax,0x2
10002b2c:	01 d0                	add    eax,edx
10002b2e:	c1 e0 03             	shl    eax,0x3
10002b31:	01 d0                	add    eax,edx
10002b33:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10002b3a:	01 d0                	add    eax,edx
10002b3c:	66 c1 e8 08          	shr    ax,0x8
10002b40:	c0 e8 03             	shr    al,0x3
10002b43:	83 c0 30             	add    eax,0x30
10002b46:	88 85 66 ff ff ff    	mov    BYTE PTR [ebp-0x9a],al
10002b4c:	8a 4d b8             	mov    cl,BYTE PTR [ebp-0x48]
10002b4f:	0f b6 d1             	movzx  edx,cl
10002b52:	89 d0                	mov    eax,edx
10002b54:	c1 e0 02             	shl    eax,0x2
10002b57:	01 d0                	add    eax,edx
10002b59:	c1 e0 03             	shl    eax,0x3
10002b5c:	01 d0                	add    eax,edx
10002b5e:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10002b65:	01 d0                	add    eax,edx
10002b67:	66 c1 e8 08          	shr    ax,0x8
10002b6b:	88 c2                	mov    dl,al
10002b6d:	c0 ea 03             	shr    dl,0x3
10002b70:	88 d0                	mov    al,dl
10002b72:	c1 e0 02             	shl    eax,0x2
10002b75:	01 d0                	add    eax,edx
10002b77:	d1 e0                	shl    eax,1
10002b79:	29 c1                	sub    ecx,eax
10002b7b:	88 ca                	mov    dl,cl
10002b7d:	8d 42 30             	lea    eax,[edx+0x30]
10002b80:	88 85 67 ff ff ff    	mov    BYTE PTR [ebp-0x99],al
10002b86:	8a 45 b9             	mov    al,BYTE PTR [ebp-0x47]
10002b89:	0f b6 c8             	movzx  ecx,al
10002b8c:	b8 67 66 66 66       	mov    eax,0x66666667
10002b91:	f7 e9                	imul   ecx
10002b93:	c1 fa 02             	sar    edx,0x2
10002b96:	89 c8                	mov    eax,ecx
10002b98:	c1 f8 1f             	sar    eax,0x1f
10002b9b:	29 c2                	sub    edx,eax
10002b9d:	89 d0                	mov    eax,edx
10002b9f:	83 c0 30             	add    eax,0x30
10002ba2:	88 85 69 ff ff ff    	mov    BYTE PTR [ebp-0x97],al
10002ba8:	8a 45 b9             	mov    al,BYTE PTR [ebp-0x47]
10002bab:	0f b6 c8             	movzx  ecx,al
10002bae:	b8 67 66 66 66       	mov    eax,0x66666667
10002bb3:	f7 e9                	imul   ecx
10002bb5:	c1 fa 02             	sar    edx,0x2
10002bb8:	89 c8                	mov    eax,ecx
10002bba:	c1 f8 1f             	sar    eax,0x1f
10002bbd:	29 c2                	sub    edx,eax
10002bbf:	89 d0                	mov    eax,edx
10002bc1:	c1 e0 02             	shl    eax,0x2
10002bc4:	01 d0                	add    eax,edx
10002bc6:	01 c0                	add    eax,eax
10002bc8:	29 c1                	sub    ecx,eax
10002bca:	89 ca                	mov    edx,ecx
10002bcc:	88 d0                	mov    al,dl
10002bce:	83 c0 30             	add    eax,0x30
10002bd1:	88 85 6a ff ff ff    	mov    BYTE PTR [ebp-0x96],al
10002bd7:	66 8b 45 ba          	mov    ax,WORD PTR [ebp-0x46]
10002bdb:	0f b7 c8             	movzx  ecx,ax
10002bde:	b8 d3 4d 62 10       	mov    eax,0x10624dd3
10002be3:	f7 e9                	imul   ecx
10002be5:	c1 fa 06             	sar    edx,0x6
10002be8:	89 c8                	mov    eax,ecx
10002bea:	c1 f8 1f             	sar    eax,0x1f
10002bed:	29 c2                	sub    edx,eax
10002bef:	89 d0                	mov    eax,edx
10002bf1:	b9 0a 00 00 00       	mov    ecx,0xa
10002bf6:	99                   	cdq    
10002bf7:	f7 f9                	idiv   ecx
10002bf9:	89 d0                	mov    eax,edx
10002bfb:	83 c0 30             	add    eax,0x30
10002bfe:	88 85 6c ff ff ff    	mov    BYTE PTR [ebp-0x94],al
10002c04:	66 8b 45 ba          	mov    ax,WORD PTR [ebp-0x46]
10002c08:	0f b7 c8             	movzx  ecx,ax
10002c0b:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
10002c10:	f7 e9                	imul   ecx
10002c12:	c1 fa 05             	sar    edx,0x5
10002c15:	89 c8                	mov    eax,ecx
10002c17:	c1 f8 1f             	sar    eax,0x1f
10002c1a:	29 c2                	sub    edx,eax
10002c1c:	89 d0                	mov    eax,edx
10002c1e:	b9 0a 00 00 00       	mov    ecx,0xa
10002c23:	99                   	cdq    
10002c24:	f7 f9                	idiv   ecx
10002c26:	89 d0                	mov    eax,edx
10002c28:	83 c0 30             	add    eax,0x30
10002c2b:	88 85 6d ff ff ff    	mov    BYTE PTR [ebp-0x93],al
10002c31:	66 8b 45 ba          	mov    ax,WORD PTR [ebp-0x46]
10002c35:	0f b7 c8             	movzx  ecx,ax
10002c38:	b8 67 66 66 66       	mov    eax,0x66666667
10002c3d:	f7 e9                	imul   ecx
10002c3f:	c1 fa 02             	sar    edx,0x2
10002c42:	89 c8                	mov    eax,ecx
10002c44:	c1 f8 1f             	sar    eax,0x1f
10002c47:	89 d1                	mov    ecx,edx
10002c49:	29 c1                	sub    ecx,eax
10002c4b:	b8 67 66 66 66       	mov    eax,0x66666667
10002c50:	f7 e9                	imul   ecx
10002c52:	c1 fa 02             	sar    edx,0x2
10002c55:	89 c8                	mov    eax,ecx
10002c57:	c1 f8 1f             	sar    eax,0x1f
10002c5a:	29 c2                	sub    edx,eax
10002c5c:	89 d0                	mov    eax,edx
10002c5e:	c1 e0 02             	shl    eax,0x2
10002c61:	01 d0                	add    eax,edx
10002c63:	01 c0                	add    eax,eax
10002c65:	29 c1                	sub    ecx,eax
10002c67:	89 ca                	mov    edx,ecx
10002c69:	88 d0                	mov    al,dl
10002c6b:	83 c0 30             	add    eax,0x30
10002c6e:	88 85 6e ff ff ff    	mov    BYTE PTR [ebp-0x92],al
10002c74:	66 8b 45 ba          	mov    ax,WORD PTR [ebp-0x46]
10002c78:	0f b7 c0             	movzx  eax,ax
10002c7b:	b9 0a 00 00 00       	mov    ecx,0xa
10002c80:	99                   	cdq    
10002c81:	f7 f9                	idiv   ecx
10002c83:	89 d0                	mov    eax,edx
10002c85:	83 c0 30             	add    eax,0x30
10002c88:	88 85 6f ff ff ff    	mov    BYTE PTR [ebp-0x91],al
10002c8e:	8a 45 bc             	mov    al,BYTE PTR [ebp-0x44]
10002c91:	0f b6 d0             	movzx  edx,al
10002c94:	89 d0                	mov    eax,edx
10002c96:	c1 e0 02             	shl    eax,0x2
10002c99:	01 d0                	add    eax,edx
10002c9b:	c1 e0 03             	shl    eax,0x3
10002c9e:	01 d0                	add    eax,edx
10002ca0:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10002ca7:	01 d0                	add    eax,edx
10002ca9:	66 c1 e8 08          	shr    ax,0x8
10002cad:	c0 e8 03             	shr    al,0x3
10002cb0:	83 c0 30             	add    eax,0x30
10002cb3:	88 85 71 ff ff ff    	mov    BYTE PTR [ebp-0x8f],al
10002cb9:	8a 4d bc             	mov    cl,BYTE PTR [ebp-0x44]
10002cbc:	0f b6 d1             	movzx  edx,cl
10002cbf:	89 d0                	mov    eax,edx
10002cc1:	c1 e0 02             	shl    eax,0x2
10002cc4:	01 d0                	add    eax,edx
10002cc6:	c1 e0 03             	shl    eax,0x3
10002cc9:	01 d0                	add    eax,edx
10002ccb:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10002cd2:	01 d0                	add    eax,edx
10002cd4:	66 c1 e8 08          	shr    ax,0x8
10002cd8:	88 c2                	mov    dl,al
10002cda:	c0 ea 03             	shr    dl,0x3
10002cdd:	88 d0                	mov    al,dl
10002cdf:	c1 e0 02             	shl    eax,0x2
10002ce2:	01 d0                	add    eax,edx
10002ce4:	d1 e0                	shl    eax,1
10002ce6:	29 c1                	sub    ecx,eax
10002ce8:	88 ca                	mov    dl,cl
10002cea:	8d 42 30             	lea    eax,[edx+0x30]
10002ced:	88 85 72 ff ff ff    	mov    BYTE PTR [ebp-0x8e],al
10002cf3:	8a 45 bd             	mov    al,BYTE PTR [ebp-0x43]
10002cf6:	0f b6 d0             	movzx  edx,al
10002cf9:	89 d0                	mov    eax,edx
10002cfb:	c1 e0 02             	shl    eax,0x2
10002cfe:	01 d0                	add    eax,edx
10002d00:	c1 e0 03             	shl    eax,0x3
10002d03:	01 d0                	add    eax,edx
10002d05:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10002d0c:	01 d0                	add    eax,edx
10002d0e:	66 c1 e8 08          	shr    ax,0x8
10002d12:	c0 e8 03             	shr    al,0x3
10002d15:	83 c0 30             	add    eax,0x30
10002d18:	88 85 74 ff ff ff    	mov    BYTE PTR [ebp-0x8c],al
10002d1e:	8a 4d bd             	mov    cl,BYTE PTR [ebp-0x43]
10002d21:	0f b6 d1             	movzx  edx,cl
10002d24:	89 d0                	mov    eax,edx
10002d26:	c1 e0 02             	shl    eax,0x2
10002d29:	01 d0                	add    eax,edx
10002d2b:	c1 e0 03             	shl    eax,0x3
10002d2e:	01 d0                	add    eax,edx
10002d30:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10002d37:	01 d0                	add    eax,edx
10002d39:	66 c1 e8 08          	shr    ax,0x8
10002d3d:	88 c2                	mov    dl,al
10002d3f:	c0 ea 03             	shr    dl,0x3
10002d42:	88 d0                	mov    al,dl
10002d44:	c1 e0 02             	shl    eax,0x2
10002d47:	01 d0                	add    eax,edx
10002d49:	d1 e0                	shl    eax,1
10002d4b:	29 c1                	sub    ecx,eax
10002d4d:	88 ca                	mov    dl,cl
10002d4f:	8d 42 30             	lea    eax,[edx+0x30]
10002d52:	88 85 75 ff ff ff    	mov    BYTE PTR [ebp-0x8b],al
10002d58:	8a 45 be             	mov    al,BYTE PTR [ebp-0x42]
10002d5b:	0f b6 d0             	movzx  edx,al
10002d5e:	89 d0                	mov    eax,edx
10002d60:	c1 e0 02             	shl    eax,0x2
10002d63:	01 d0                	add    eax,edx
10002d65:	c1 e0 03             	shl    eax,0x3
10002d68:	01 d0                	add    eax,edx
10002d6a:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10002d71:	01 d0                	add    eax,edx
10002d73:	66 c1 e8 08          	shr    ax,0x8
10002d77:	c0 e8 03             	shr    al,0x3
10002d7a:	83 c0 30             	add    eax,0x30
10002d7d:	88 85 77 ff ff ff    	mov    BYTE PTR [ebp-0x89],al
10002d83:	8a 4d be             	mov    cl,BYTE PTR [ebp-0x42]
10002d86:	0f b6 d1             	movzx  edx,cl
10002d89:	89 d0                	mov    eax,edx
10002d8b:	c1 e0 02             	shl    eax,0x2
10002d8e:	01 d0                	add    eax,edx
10002d90:	c1 e0 03             	shl    eax,0x3
10002d93:	01 d0                	add    eax,edx
10002d95:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10002d9c:	01 d0                	add    eax,edx
10002d9e:	66 c1 e8 08          	shr    ax,0x8
10002da2:	88 c2                	mov    dl,al
10002da4:	c0 ea 03             	shr    dl,0x3
10002da7:	88 d0                	mov    al,dl
10002da9:	c1 e0 02             	shl    eax,0x2
10002dac:	01 d0                	add    eax,edx
10002dae:	d1 e0                	shl    eax,1
10002db0:	29 c1                	sub    ecx,eax
10002db2:	88 ca                	mov    dl,cl
10002db4:	8d 42 30             	lea    eax,[edx+0x30]
10002db7:	88 85 78 ff ff ff    	mov    BYTE PTR [ebp-0x88],al
10002dbd:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
10002dc4:	a1 00 00 00 00       	mov    eax,ds:0x0	10002dc5: R_386_32	term
10002dc9:	83 ec 04             	sub    esp,0x4
10002dcc:	6a 05                	push   0x5
10002dce:	6a 18                	push   0x18
10002dd0:	50                   	push   eax
10002dd1:	e8 fc ff ff ff       	call   10002dd2 <firstRun(bool)+0x78f>	10002dd2: R_386_PC32	VgaText::setCursor(int, int)
10002dd6:	83 c4 10             	add    esp,0x10
10002dd9:	a1 00 00 00 00       	mov    eax,ds:0x0	10002dda: R_386_32	term
10002dde:	83 ec 08             	sub    esp,0x8
10002de1:	68 b4 4b 00 10       	push   0x10004bb4	10002de2: R_386_32	.text
10002de6:	50                   	push   eax
10002de7:	e8 fc ff ff ff       	call   10002de8 <firstRun(bool)+0x7a5>	10002de8: R_386_PC32	VgaText::puts(char const*)
10002dec:	83 c4 10             	add    esp,0x10
10002def:	a1 00 00 00 00       	mov    eax,ds:0x0	10002df0: R_386_32	term
10002df4:	83 ec 04             	sub    esp,0x4
10002df7:	6a 06                	push   0x6
10002df9:	6a 18                	push   0x18
10002dfb:	50                   	push   eax
10002dfc:	e8 fc ff ff ff       	call   10002dfd <firstRun(bool)+0x7ba>	10002dfd: R_386_PC32	VgaText::setCursor(int, int)
10002e01:	83 c4 10             	add    esp,0x10
10002e04:	a1 00 00 00 00       	mov    eax,ds:0x0	10002e05: R_386_32	term
10002e09:	83 ec 08             	sub    esp,0x8
10002e0c:	68 dc 4b 00 10       	push   0x10004bdc	10002e0d: R_386_32	.text
10002e11:	50                   	push   eax
10002e12:	e8 fc ff ff ff       	call   10002e13 <firstRun(bool)+0x7d0>	10002e13: R_386_PC32	VgaText::puts(char const*)
10002e17:	83 c4 10             	add    esp,0x10
10002e1a:	a1 00 00 00 00       	mov    eax,ds:0x0	10002e1b: R_386_32	term
10002e1f:	83 ec 04             	sub    esp,0x4
10002e22:	6a 09                	push   0x9
10002e24:	6a 1a                	push   0x1a
10002e26:	50                   	push   eax
10002e27:	e8 fc ff ff ff       	call   10002e28 <firstRun(bool)+0x7e5>	10002e28: R_386_PC32	VgaText::setCursor(int, int)
10002e2c:	83 c4 10             	add    esp,0x10
10002e2f:	a1 00 00 00 00       	mov    eax,ds:0x0	10002e30: R_386_32	term
10002e34:	6a 0f                	push   0xf
10002e36:	6a 07                	push   0x7
10002e38:	68 f2 4b 00 10       	push   0x10004bf2	10002e39: R_386_32	.text
10002e3d:	50                   	push   eax
10002e3e:	e8 fc ff ff ff       	call   10002e3f <firstRun(bool)+0x7fc>	10002e3f: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002e43:	83 c4 10             	add    esp,0x10
10002e46:	e9 66 01 00 00       	jmp    10002fb1 <firstRun(bool)+0x96e>
10002e4b:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
10002e4e:	83 7d f0 03          	cmp    DWORD PTR [ebp-0x10],0x3
10002e52:	75 07                	jne    10002e5b <firstRun(bool)+0x818>
10002e54:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
10002e5b:	83 ec 0c             	sub    esp,0xc
10002e5e:	68 2c 01 00 00       	push   0x12c
10002e63:	e8 fc ff ff ff       	call   10002e64 <firstRun(bool)+0x821>	10002e64: R_386_PC32	milliTenthSleep(unsigned int)
10002e68:	83 c4 10             	add    esp,0x10
10002e6b:	e9 35 01 00 00       	jmp    10002fa5 <firstRun(bool)+0x962>
10002e70:	a0 00 00 00 00       	mov    al,ds:0x0	10002e71: R_386_32	installKey
10002e75:	3c 1f                	cmp    al,0x1f
10002e77:	7e 0d                	jle    10002e86 <firstRun(bool)+0x843>
10002e79:	a0 00 00 00 00       	mov    al,ds:0x0	10002e7a: R_386_32	installKey
10002e7e:	3c 7f                	cmp    al,0x7f
10002e80:	74 04                	je     10002e86 <firstRun(bool)+0x843>
10002e82:	b0 01                	mov    al,0x1
10002e84:	eb 02                	jmp    10002e88 <firstRun(bool)+0x845>
10002e86:	b0 00                	mov    al,0x0
10002e88:	84 c0                	test   al,al
10002e8a:	74 77                	je     10002f03 <firstRun(bool)+0x8c0>
10002e8c:	a0 00 00 00 00       	mov    al,ds:0x0	10002e8d: R_386_32	installKey
10002e91:	88 45 b6             	mov    BYTE PTR [ebp-0x4a],al
10002e94:	c6 45 b7 00          	mov    BYTE PTR [ebp-0x49],0x0
10002e98:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
10002e9c:	75 29                	jne    10002ec7 <firstRun(bool)+0x884>
10002e9e:	83 ec 0c             	sub    esp,0xc
10002ea1:	68 00 00 00 00       	push   0x0	10002ea2: R_386_32	currName
10002ea6:	e8 fc ff ff ff       	call   10002ea7 <firstRun(bool)+0x864>	10002ea7: R_386_PC32	strlen
10002eab:	83 c4 10             	add    esp,0x10
10002eae:	83 f8 17             	cmp    eax,0x17
10002eb1:	77 14                	ja     10002ec7 <firstRun(bool)+0x884>
10002eb3:	83 ec 08             	sub    esp,0x8
10002eb6:	8d 45 b6             	lea    eax,[ebp-0x4a]
10002eb9:	50                   	push   eax
10002eba:	68 00 00 00 00       	push   0x0	10002ebb: R_386_32	currName
10002ebf:	e8 fc ff ff ff       	call   10002ec0 <firstRun(bool)+0x87d>	10002ec0: R_386_PC32	strcat
10002ec4:	83 c4 10             	add    esp,0x10
10002ec7:	83 7d f0 01          	cmp    DWORD PTR [ebp-0x10],0x1
10002ecb:	0f 85 d4 00 00 00    	jne    10002fa5 <firstRun(bool)+0x962>
10002ed1:	83 ec 0c             	sub    esp,0xc
10002ed4:	68 00 00 00 00       	push   0x0	10002ed5: R_386_32	currComp
10002ed9:	e8 fc ff ff ff       	call   10002eda <firstRun(bool)+0x897>	10002eda: R_386_PC32	strlen
10002ede:	83 c4 10             	add    esp,0x10
10002ee1:	83 f8 17             	cmp    eax,0x17
10002ee4:	0f 87 bb 00 00 00    	ja     10002fa5 <firstRun(bool)+0x962>
10002eea:	83 ec 08             	sub    esp,0x8
10002eed:	8d 45 b6             	lea    eax,[ebp-0x4a]
10002ef0:	50                   	push   eax
10002ef1:	68 00 00 00 00       	push   0x0	10002ef2: R_386_32	currComp
10002ef6:	e8 fc ff ff ff       	call   10002ef7 <firstRun(bool)+0x8b4>	10002ef7: R_386_PC32	strcat
10002efb:	83 c4 10             	add    esp,0x10
10002efe:	e9 a2 00 00 00       	jmp    10002fa5 <firstRun(bool)+0x962>
10002f03:	a0 00 00 00 00       	mov    al,ds:0x0	10002f04: R_386_32	installKey
10002f08:	3c 08                	cmp    al,0x8
10002f0a:	0f 94 c0             	sete   al
10002f0d:	84 c0                	test   al,al
10002f0f:	74 66                	je     10002f77 <firstRun(bool)+0x934>
10002f11:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
10002f15:	75 2c                	jne    10002f43 <firstRun(bool)+0x900>
10002f17:	83 ec 0c             	sub    esp,0xc
10002f1a:	68 00 00 00 00       	push   0x0	10002f1b: R_386_32	currName
10002f1f:	e8 fc ff ff ff       	call   10002f20 <firstRun(bool)+0x8dd>	10002f20: R_386_PC32	strlen
10002f24:	83 c4 10             	add    esp,0x10
10002f27:	85 c0                	test   eax,eax
10002f29:	74 18                	je     10002f43 <firstRun(bool)+0x900>
10002f2b:	83 ec 0c             	sub    esp,0xc
10002f2e:	68 00 00 00 00       	push   0x0	10002f2f: R_386_32	currName
10002f33:	e8 fc ff ff ff       	call   10002f34 <firstRun(bool)+0x8f1>	10002f34: R_386_PC32	strlen
10002f38:	83 c4 10             	add    esp,0x10
10002f3b:	48                   	dec    eax
10002f3c:	c6 80 00 00 00 00 00 	mov    BYTE PTR [eax+0x0],0x0	10002f3e: R_386_32	currName
10002f43:	83 7d f0 01          	cmp    DWORD PTR [ebp-0x10],0x1
10002f47:	75 5c                	jne    10002fa5 <firstRun(bool)+0x962>
10002f49:	83 ec 0c             	sub    esp,0xc
10002f4c:	68 00 00 00 00       	push   0x0	10002f4d: R_386_32	currComp
10002f51:	e8 fc ff ff ff       	call   10002f52 <firstRun(bool)+0x90f>	10002f52: R_386_PC32	strlen
10002f56:	83 c4 10             	add    esp,0x10
10002f59:	85 c0                	test   eax,eax
10002f5b:	74 48                	je     10002fa5 <firstRun(bool)+0x962>
10002f5d:	83 ec 0c             	sub    esp,0xc
10002f60:	68 00 00 00 00       	push   0x0	10002f61: R_386_32	currComp
10002f65:	e8 fc ff ff ff       	call   10002f66 <firstRun(bool)+0x923>	10002f66: R_386_PC32	strlen
10002f6a:	83 c4 10             	add    esp,0x10
10002f6d:	48                   	dec    eax
10002f6e:	c6 80 00 00 00 00 00 	mov    BYTE PTR [eax+0x0],0x0	10002f70: R_386_32	currComp
10002f75:	eb 2e                	jmp    10002fa5 <firstRun(bool)+0x962>
10002f77:	a0 00 00 00 00       	mov    al,ds:0x0	10002f78: R_386_32	installKey
10002f7c:	3c 7f                	cmp    al,0x7f
10002f7e:	0f 94 c0             	sete   al
10002f81:	84 c0                	test   al,al
10002f83:	74 20                	je     10002fa5 <firstRun(bool)+0x962>
10002f85:	ff 4d f0             	dec    DWORD PTR [ebp-0x10]
10002f88:	83 7d f0 ff          	cmp    DWORD PTR [ebp-0x10],0xffffffff
10002f8c:	75 07                	jne    10002f95 <firstRun(bool)+0x952>
10002f8e:	c7 45 f0 02 00 00 00 	mov    DWORD PTR [ebp-0x10],0x2
10002f95:	83 ec 0c             	sub    esp,0xc
10002f98:	68 2c 01 00 00       	push   0x12c
10002f9d:	e8 fc ff ff ff       	call   10002f9e <firstRun(bool)+0x95b>	10002f9e: R_386_PC32	milliTenthSleep(unsigned int)
10002fa2:	83 c4 10             	add    esp,0x10
10002fa5:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10002fa7: R_386_32	installKey
10002fac:	e9 1a f8 ff ff       	jmp    100027cb <firstRun(bool)+0x188>
10002fb1:	a1 00 00 00 00       	mov    eax,ds:0x0	10002fb2: R_386_32	term
10002fb6:	83 ec 04             	sub    esp,0x4
10002fb9:	6a 08                	push   0x8
10002fbb:	6a 1a                	push   0x1a
10002fbd:	50                   	push   eax
10002fbe:	e8 fc ff ff ff       	call   10002fbf <firstRun(bool)+0x97c>	10002fbf: R_386_PC32	VgaText::setCursor(int, int)
10002fc3:	83 c4 10             	add    esp,0x10
10002fc6:	a1 00 00 00 00       	mov    eax,ds:0x0	10002fc7: R_386_32	term
10002fcb:	83 ec 08             	sub    esp,0x8
10002fce:	8d 95 66 ff ff ff    	lea    edx,[ebp-0x9a]
10002fd4:	52                   	push   edx
10002fd5:	50                   	push   eax
10002fd6:	e8 fc ff ff ff       	call   10002fd7 <firstRun(bool)+0x994>	10002fd7: R_386_PC32	VgaText::puts(char const*)
10002fdb:	83 c4 10             	add    esp,0x10
10002fde:	a1 00 00 00 00       	mov    eax,ds:0x0	10002fdf: R_386_32	term
10002fe3:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10002fe6:	83 c2 1a             	add    edx,0x1a
10002fe9:	83 ec 04             	sub    esp,0x4
10002fec:	6a 08                	push   0x8
10002fee:	52                   	push   edx
10002fef:	50                   	push   eax
10002ff0:	e8 fc ff ff ff       	call   10002ff1 <firstRun(bool)+0x9ae>	10002ff1: R_386_PC32	VgaText::setCursor(int, int)
10002ff5:	83 c4 10             	add    esp,0x10
10002ff8:	a1 00 00 00 00       	mov    eax,ds:0x0	10002ff9: R_386_32	term
10002ffd:	8d 8d 66 ff ff ff    	lea    ecx,[ebp-0x9a]
10003003:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10003006:	01 ca                	add    edx,ecx
10003008:	8a 12                	mov    dl,BYTE PTR [edx]
1000300a:	0f be d2             	movsx  edx,dl
1000300d:	6a 00                	push   0x0
1000300f:	6a 0f                	push   0xf
10003011:	52                   	push   edx
10003012:	50                   	push   eax
10003013:	e8 fc ff ff ff       	call   10003014 <firstRun(bool)+0x9d1>	10003014: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
10003018:	83 c4 10             	add    esp,0x10
1000301b:	8a 85 71 ff ff ff    	mov    al,BYTE PTR [ebp-0x8f]
10003021:	0f be c0             	movsx  eax,al
10003024:	8d 50 d0             	lea    edx,[eax-0x30]
10003027:	89 d0                	mov    eax,edx
10003029:	c1 e0 02             	shl    eax,0x2
1000302c:	01 d0                	add    eax,edx
1000302e:	01 c0                	add    eax,eax
10003030:	89 c2                	mov    edx,eax
10003032:	8a 85 72 ff ff ff    	mov    al,BYTE PTR [ebp-0x8e]
10003038:	0f be c0             	movsx  eax,al
1000303b:	83 e8 30             	sub    eax,0x30
1000303e:	01 d0                	add    eax,edx
10003040:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
10003043:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
10003046:	b9 0c 00 00 00       	mov    ecx,0xc
1000304b:	99                   	cdq    
1000304c:	f7 f9                	idiv   ecx
1000304e:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
10003051:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
10003055:	75 07                	jne    1000305e <firstRun(bool)+0xa1b>
10003057:	c7 45 ec 0c 00 00 00 	mov    DWORD PTR [ebp-0x14],0xc
1000305e:	8a 85 74 ff ff ff    	mov    al,BYTE PTR [ebp-0x8c]
10003064:	0f be c0             	movsx  eax,al
10003067:	8d 50 d0             	lea    edx,[eax-0x30]
1000306a:	89 d0                	mov    eax,edx
1000306c:	c1 e0 02             	shl    eax,0x2
1000306f:	01 d0                	add    eax,edx
10003071:	01 c0                	add    eax,eax
10003073:	89 c2                	mov    edx,eax
10003075:	8a 85 75 ff ff ff    	mov    al,BYTE PTR [ebp-0x8b]
1000307b:	0f be c0             	movsx  eax,al
1000307e:	83 e8 30             	sub    eax,0x30
10003081:	01 d0                	add    eax,edx
10003083:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10003086:	83 ec 04             	sub    esp,0x4
10003089:	6a 10                	push   0x10
1000308b:	6a 00                	push   0x0
1000308d:	8d 45 a6             	lea    eax,[ebp-0x5a]
10003090:	50                   	push   eax
10003091:	e8 fc ff ff ff       	call   10003092 <firstRun(bool)+0xa4f>	10003092: R_386_PC32	memset
10003096:	83 c4 10             	add    esp,0x10
10003099:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
100030a0:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
100030a3:	8d 50 01             	lea    edx,[eax+0x1]
100030a6:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
100030a9:	c6 44 05 a6 28       	mov    BYTE PTR [ebp+eax*1-0x5a],0x28
100030ae:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
100030b1:	b8 67 66 66 66       	mov    eax,0x66666667
100030b6:	f7 e9                	imul   ecx
100030b8:	c1 fa 02             	sar    edx,0x2
100030bb:	89 c8                	mov    eax,ecx
100030bd:	c1 f8 1f             	sar    eax,0x1f
100030c0:	29 c2                	sub    edx,eax
100030c2:	89 d0                	mov    eax,edx
100030c4:	8d 48 30             	lea    ecx,[eax+0x30]
100030c7:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
100030ca:	8d 50 01             	lea    edx,[eax+0x1]
100030cd:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
100030d0:	88 ca                	mov    dl,cl
100030d2:	88 54 05 a6          	mov    BYTE PTR [ebp+eax*1-0x5a],dl
100030d6:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
100030d9:	b8 67 66 66 66       	mov    eax,0x66666667
100030de:	f7 e9                	imul   ecx
100030e0:	c1 fa 02             	sar    edx,0x2
100030e3:	89 c8                	mov    eax,ecx
100030e5:	c1 f8 1f             	sar    eax,0x1f
100030e8:	29 c2                	sub    edx,eax
100030ea:	89 d0                	mov    eax,edx
100030ec:	c1 e0 02             	shl    eax,0x2
100030ef:	01 d0                	add    eax,edx
100030f1:	01 c0                	add    eax,eax
100030f3:	29 c1                	sub    ecx,eax
100030f5:	89 ca                	mov    edx,ecx
100030f7:	88 d0                	mov    al,dl
100030f9:	8d 48 30             	lea    ecx,[eax+0x30]
100030fc:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
100030ff:	8d 50 01             	lea    edx,[eax+0x1]
10003102:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
10003105:	88 ca                	mov    dl,cl
10003107:	88 54 05 a6          	mov    BYTE PTR [ebp+eax*1-0x5a],dl
1000310b:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
1000310e:	8d 50 01             	lea    edx,[eax+0x1]
10003111:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
10003114:	c6 44 05 a6 3a       	mov    BYTE PTR [ebp+eax*1-0x5a],0x3a
10003119:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
1000311c:	b8 67 66 66 66       	mov    eax,0x66666667
10003121:	f7 e9                	imul   ecx
10003123:	c1 fa 02             	sar    edx,0x2
10003126:	89 c8                	mov    eax,ecx
10003128:	c1 f8 1f             	sar    eax,0x1f
1000312b:	29 c2                	sub    edx,eax
1000312d:	89 d0                	mov    eax,edx
1000312f:	8d 48 30             	lea    ecx,[eax+0x30]
10003132:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10003135:	8d 50 01             	lea    edx,[eax+0x1]
10003138:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
1000313b:	88 ca                	mov    dl,cl
1000313d:	88 54 05 a6          	mov    BYTE PTR [ebp+eax*1-0x5a],dl
10003141:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
10003144:	b8 67 66 66 66       	mov    eax,0x66666667
10003149:	f7 e9                	imul   ecx
1000314b:	c1 fa 02             	sar    edx,0x2
1000314e:	89 c8                	mov    eax,ecx
10003150:	c1 f8 1f             	sar    eax,0x1f
10003153:	29 c2                	sub    edx,eax
10003155:	89 d0                	mov    eax,edx
10003157:	c1 e0 02             	shl    eax,0x2
1000315a:	01 d0                	add    eax,edx
1000315c:	01 c0                	add    eax,eax
1000315e:	29 c1                	sub    ecx,eax
10003160:	89 ca                	mov    edx,ecx
10003162:	88 d0                	mov    al,dl
10003164:	8d 48 30             	lea    ecx,[eax+0x30]
10003167:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
1000316a:	8d 50 01             	lea    edx,[eax+0x1]
1000316d:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
10003170:	88 ca                	mov    dl,cl
10003172:	88 54 05 a6          	mov    BYTE PTR [ebp+eax*1-0x5a],dl
10003176:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10003179:	8d 50 01             	lea    edx,[eax+0x1]
1000317c:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
1000317f:	c6 44 05 a6 20       	mov    BYTE PTR [ebp+eax*1-0x5a],0x20
10003184:	83 7d e8 0b          	cmp    DWORD PTR [ebp-0x18],0xb
10003188:	7e 04                	jle    1000318e <firstRun(bool)+0xb4b>
1000318a:	b2 50                	mov    dl,0x50
1000318c:	eb 02                	jmp    10003190 <firstRun(bool)+0xb4d>
1000318e:	b2 41                	mov    dl,0x41
10003190:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10003193:	8d 48 01             	lea    ecx,[eax+0x1]
10003196:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
10003199:	88 54 05 a6          	mov    BYTE PTR [ebp+eax*1-0x5a],dl
1000319d:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
100031a0:	8d 50 01             	lea    edx,[eax+0x1]
100031a3:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
100031a6:	c6 44 05 a6 4d       	mov    BYTE PTR [ebp+eax*1-0x5a],0x4d
100031ab:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
100031ae:	8d 50 01             	lea    edx,[eax+0x1]
100031b1:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
100031b4:	c6 44 05 a6 29       	mov    BYTE PTR [ebp+eax*1-0x5a],0x29
100031b9:	8b 1d 00 00 00 00    	mov    ebx,DWORD PTR ds:0x0	100031bb: R_386_32	term
100031bf:	83 ec 0c             	sub    esp,0xc
100031c2:	8d 85 66 ff ff ff    	lea    eax,[ebp-0x9a]
100031c8:	50                   	push   eax
100031c9:	e8 fc ff ff ff       	call   100031ca <firstRun(bool)+0xb87>	100031ca: R_386_PC32	strlen
100031ce:	83 c4 10             	add    esp,0x10
100031d1:	83 c0 1e             	add    eax,0x1e
100031d4:	83 ec 04             	sub    esp,0x4
100031d7:	6a 08                	push   0x8
100031d9:	50                   	push   eax
100031da:	53                   	push   ebx
100031db:	e8 fc ff ff ff       	call   100031dc <firstRun(bool)+0xb99>	100031dc: R_386_PC32	VgaText::setCursor(int, int)
100031e0:	83 c4 10             	add    esp,0x10
100031e3:	a1 00 00 00 00       	mov    eax,ds:0x0	100031e4: R_386_32	term
100031e8:	83 ec 08             	sub    esp,0x8
100031eb:	8d 55 a6             	lea    edx,[ebp-0x5a]
100031ee:	52                   	push   edx
100031ef:	50                   	push   eax
100031f0:	e8 fc ff ff ff       	call   100031f1 <firstRun(bool)+0xbae>	100031f1: R_386_PC32	VgaText::puts(char const*)
100031f5:	83 c4 10             	add    esp,0x10
100031f8:	a1 00 00 00 00       	mov    eax,ds:0x0	100031f9: R_386_32	term
100031fd:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10003200:	83 c2 1a             	add    edx,0x1a
10003203:	83 ec 04             	sub    esp,0x4
10003206:	6a 08                	push   0x8
10003208:	52                   	push   edx
10003209:	50                   	push   eax
1000320a:	e8 fc ff ff ff       	call   1000320b <firstRun(bool)+0xbc8>	1000320b: R_386_PC32	VgaText::setCursor(int, int)
1000320f:	83 c4 10             	add    esp,0x10
10003212:	a0 00 00 00 00       	mov    al,ds:0x0	10003213: R_386_32	installKey
10003217:	84 c0                	test   al,al
10003219:	0f 94 c0             	sete   al
1000321c:	84 c0                	test   al,al
1000321e:	74 02                	je     10003222 <firstRun(bool)+0xbdf>
10003220:	eb f0                	jmp    10003212 <firstRun(bool)+0xbcf>
10003222:	a1 00 00 00 00       	mov    eax,ds:0x0	10003223: R_386_32	term
10003227:	05 82 00 00 00       	add    eax,0x82
1000322c:	83 ec 04             	sub    esp,0x4
1000322f:	6a 10                	push   0x10
10003231:	6a 00                	push   0x0
10003233:	50                   	push   eax
10003234:	e8 fc ff ff ff       	call   10003235 <firstRun(bool)+0xbf2>	10003235: R_386_PC32	memset
10003239:	83 c4 10             	add    esp,0x10
1000323c:	a1 00 00 00 00       	mov    eax,ds:0x0	1000323d: R_386_32	term
10003241:	05 02 01 00 00       	add    eax,0x102
10003246:	83 ec 04             	sub    esp,0x4
10003249:	6a 10                	push   0x10
1000324b:	6a 00                	push   0x0
1000324d:	50                   	push   eax
1000324e:	e8 fc ff ff ff       	call   1000324f <firstRun(bool)+0xc0c>	1000324f: R_386_PC32	memset
10003253:	83 c4 10             	add    esp,0x10
10003256:	a0 00 00 00 00       	mov    al,ds:0x0	10003257: R_386_32	installKey
1000325b:	3c 03                	cmp    al,0x3
1000325d:	74 09                	je     10003268 <firstRun(bool)+0xc25>
1000325f:	a0 00 00 00 00       	mov    al,ds:0x0	10003260: R_386_32	installKey
10003264:	3c 08                	cmp    al,0x8
10003266:	75 04                	jne    1000326c <firstRun(bool)+0xc29>
10003268:	b0 01                	mov    al,0x1
1000326a:	eb 02                	jmp    1000326e <firstRun(bool)+0xc2b>
1000326c:	b0 00                	mov    al,0x0
1000326e:	84 c0                	test   al,al
10003270:	74 58                	je     100032ca <firstRun(bool)+0xc87>
10003272:	ff 4d f4             	dec    DWORD PTR [ebp-0xc]
10003275:	83 7d f4 ff          	cmp    DWORD PTR [ebp-0xc],0xffffffff
10003279:	75 16                	jne    10003291 <firstRun(bool)+0xc4e>
1000327b:	83 ec 0c             	sub    esp,0xc
1000327e:	8d 85 66 ff ff ff    	lea    eax,[ebp-0x9a]
10003284:	50                   	push   eax
10003285:	e8 fc ff ff ff       	call   10003286 <firstRun(bool)+0xc43>	10003286: R_386_PC32	strlen
1000328a:	83 c4 10             	add    esp,0x10
1000328d:	48                   	dec    eax
1000328e:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
10003291:	8d 95 66 ff ff ff    	lea    edx,[ebp-0x9a]
10003297:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
1000329a:	01 d0                	add    eax,edx
1000329c:	8a 00                	mov    al,BYTE PTR [eax]
1000329e:	3c 20                	cmp    al,0x20
100032a0:	74 d0                	je     10003272 <firstRun(bool)+0xc2f>
100032a2:	8d 95 66 ff ff ff    	lea    edx,[ebp-0x9a]
100032a8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
100032ab:	01 d0                	add    eax,edx
100032ad:	8a 00                	mov    al,BYTE PTR [eax]
100032af:	3c 2f                	cmp    al,0x2f
100032b1:	74 bf                	je     10003272 <firstRun(bool)+0xc2f>
100032b3:	8d 95 66 ff ff ff    	lea    edx,[ebp-0x9a]
100032b9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
100032bc:	01 d0                	add    eax,edx
100032be:	8a 00                	mov    al,BYTE PTR [eax]
100032c0:	3c 3a                	cmp    al,0x3a
100032c2:	0f 85 4a 04 00 00    	jne    10003712 <firstRun(bool)+0x10cf>
100032c8:	eb a8                	jmp    10003272 <firstRun(bool)+0xc2f>
100032ca:	a0 00 00 00 00       	mov    al,ds:0x0	100032cb: R_386_32	installKey
100032cf:	3c 2f                	cmp    al,0x2f
100032d1:	7e 09                	jle    100032dc <firstRun(bool)+0xc99>
100032d3:	a0 00 00 00 00       	mov    al,ds:0x0	100032d4: R_386_32	installKey
100032d8:	3c 39                	cmp    al,0x39
100032da:	7e 12                	jle    100032ee <firstRun(bool)+0xcab>
100032dc:	a0 00 00 00 00       	mov    al,ds:0x0	100032dd: R_386_32	installKey
100032e1:	3c 20                	cmp    al,0x20
100032e3:	74 09                	je     100032ee <firstRun(bool)+0xcab>
100032e5:	a0 00 00 00 00       	mov    al,ds:0x0	100032e6: R_386_32	installKey
100032ea:	3c 04                	cmp    al,0x4
100032ec:	75 04                	jne    100032f2 <firstRun(bool)+0xcaf>
100032ee:	b0 01                	mov    al,0x1
100032f0:	eb 02                	jmp    100032f4 <firstRun(bool)+0xcb1>
100032f2:	b0 00                	mov    al,0x0
100032f4:	84 c0                	test   al,al
100032f6:	0f 84 cf 01 00 00    	je     100034cb <firstRun(bool)+0xe88>
100032fc:	a0 00 00 00 00       	mov    al,ds:0x0	100032fd: R_386_32	installKey
10003301:	3c 2f                	cmp    al,0x2f
10003303:	7e 0d                	jle    10003312 <firstRun(bool)+0xccf>
10003305:	a0 00 00 00 00       	mov    al,ds:0x0	10003306: R_386_32	installKey
1000330a:	3c 39                	cmp    al,0x39
1000330c:	7f 04                	jg     10003312 <firstRun(bool)+0xccf>
1000330e:	b0 01                	mov    al,0x1
10003310:	eb 02                	jmp    10003314 <firstRun(bool)+0xcd1>
10003312:	b0 00                	mov    al,0x0
10003314:	84 c0                	test   al,al
10003316:	0f 84 51 01 00 00    	je     1000346d <firstRun(bool)+0xe2a>
1000331c:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
10003320:	75 0d                	jne    1000332f <firstRun(bool)+0xcec>
10003322:	a0 00 00 00 00       	mov    al,ds:0x0	10003323: R_386_32	installKey
10003327:	3c 33                	cmp    al,0x33
10003329:	7e 04                	jle    1000332f <firstRun(bool)+0xcec>
1000332b:	b0 01                	mov    al,0x1
1000332d:	eb 02                	jmp    10003331 <firstRun(bool)+0xcee>
1000332f:	b0 00                	mov    al,0x0
10003331:	84 c0                	test   al,al
10003333:	74 28                	je     1000335d <firstRun(bool)+0xd1a>
10003335:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10003338:	8d 50 01             	lea    edx,[eax+0x1]
1000333b:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
1000333e:	c6 84 05 66 ff ff ff 30 	mov    BYTE PTR [ebp+eax*1-0x9a],0x30
10003346:	a0 00 00 00 00       	mov    al,ds:0x0	10003347: R_386_32	installKey
1000334b:	8d 8d 66 ff ff ff    	lea    ecx,[ebp-0x9a]
10003351:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10003354:	01 ca                	add    edx,ecx
10003356:	88 02                	mov    BYTE PTR [edx],al
10003358:	e9 10 01 00 00       	jmp    1000346d <firstRun(bool)+0xe2a>
1000335d:	83 7d f4 03          	cmp    DWORD PTR [ebp-0xc],0x3
10003361:	75 0d                	jne    10003370 <firstRun(bool)+0xd2d>
10003363:	a0 00 00 00 00       	mov    al,ds:0x0	10003364: R_386_32	installKey
10003368:	3c 31                	cmp    al,0x31
1000336a:	7e 04                	jle    10003370 <firstRun(bool)+0xd2d>
1000336c:	b0 01                	mov    al,0x1
1000336e:	eb 02                	jmp    10003372 <firstRun(bool)+0xd2f>
10003370:	b0 00                	mov    al,0x0
10003372:	84 c0                	test   al,al
10003374:	74 28                	je     1000339e <firstRun(bool)+0xd5b>
10003376:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10003379:	8d 50 01             	lea    edx,[eax+0x1]
1000337c:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
1000337f:	c6 84 05 66 ff ff ff 30 	mov    BYTE PTR [ebp+eax*1-0x9a],0x30
10003387:	a0 00 00 00 00       	mov    al,ds:0x0	10003388: R_386_32	installKey
1000338c:	8d 8d 66 ff ff ff    	lea    ecx,[ebp-0x9a]
10003392:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10003395:	01 ca                	add    edx,ecx
10003397:	88 02                	mov    BYTE PTR [edx],al
10003399:	e9 cf 00 00 00       	jmp    1000346d <firstRun(bool)+0xe2a>
1000339e:	83 7d f4 0b          	cmp    DWORD PTR [ebp-0xc],0xb
100033a2:	75 0d                	jne    100033b1 <firstRun(bool)+0xd6e>
100033a4:	a0 00 00 00 00       	mov    al,ds:0x0	100033a5: R_386_32	installKey
100033a9:	3c 32                	cmp    al,0x32
100033ab:	7e 04                	jle    100033b1 <firstRun(bool)+0xd6e>
100033ad:	b0 01                	mov    al,0x1
100033af:	eb 02                	jmp    100033b3 <firstRun(bool)+0xd70>
100033b1:	b0 00                	mov    al,0x0
100033b3:	84 c0                	test   al,al
100033b5:	74 28                	je     100033df <firstRun(bool)+0xd9c>
100033b7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
100033ba:	8d 50 01             	lea    edx,[eax+0x1]
100033bd:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
100033c0:	c6 84 05 66 ff ff ff 30 	mov    BYTE PTR [ebp+eax*1-0x9a],0x30
100033c8:	a0 00 00 00 00       	mov    al,ds:0x0	100033c9: R_386_32	installKey
100033cd:	8d 8d 66 ff ff ff    	lea    ecx,[ebp-0x9a]
100033d3:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
100033d6:	01 ca                	add    edx,ecx
100033d8:	88 02                	mov    BYTE PTR [edx],al
100033da:	e9 8e 00 00 00       	jmp    1000346d <firstRun(bool)+0xe2a>
100033df:	83 7d f4 0e          	cmp    DWORD PTR [ebp-0xc],0xe
100033e3:	75 0d                	jne    100033f2 <firstRun(bool)+0xdaf>
100033e5:	a0 00 00 00 00       	mov    al,ds:0x0	100033e6: R_386_32	installKey
100033ea:	3c 35                	cmp    al,0x35
100033ec:	7e 04                	jle    100033f2 <firstRun(bool)+0xdaf>
100033ee:	b0 01                	mov    al,0x1
100033f0:	eb 02                	jmp    100033f4 <firstRun(bool)+0xdb1>
100033f2:	b0 00                	mov    al,0x0
100033f4:	84 c0                	test   al,al
100033f6:	74 25                	je     1000341d <firstRun(bool)+0xdda>
100033f8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
100033fb:	8d 50 01             	lea    edx,[eax+0x1]
100033fe:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
10003401:	c6 84 05 66 ff ff ff 30 	mov    BYTE PTR [ebp+eax*1-0x9a],0x30
10003409:	a0 00 00 00 00       	mov    al,ds:0x0	1000340a: R_386_32	installKey
1000340e:	8d 8d 66 ff ff ff    	lea    ecx,[ebp-0x9a]
10003414:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10003417:	01 ca                	add    edx,ecx
10003419:	88 02                	mov    BYTE PTR [edx],al
1000341b:	eb 50                	jmp    1000346d <firstRun(bool)+0xe2a>
1000341d:	83 7d f4 11          	cmp    DWORD PTR [ebp-0xc],0x11
10003421:	75 0d                	jne    10003430 <firstRun(bool)+0xded>
10003423:	a0 00 00 00 00       	mov    al,ds:0x0	10003424: R_386_32	installKey
10003428:	3c 35                	cmp    al,0x35
1000342a:	7e 04                	jle    10003430 <firstRun(bool)+0xded>
1000342c:	b0 01                	mov    al,0x1
1000342e:	eb 02                	jmp    10003432 <firstRun(bool)+0xdef>
10003430:	b0 00                	mov    al,0x0
10003432:	84 c0                	test   al,al
10003434:	74 25                	je     1000345b <firstRun(bool)+0xe18>
10003436:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10003439:	8d 50 01             	lea    edx,[eax+0x1]
1000343c:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
1000343f:	c6 84 05 66 ff ff ff 30 	mov    BYTE PTR [ebp+eax*1-0x9a],0x30
10003447:	a0 00 00 00 00       	mov    al,ds:0x0	10003448: R_386_32	installKey
1000344c:	8d 8d 66 ff ff ff    	lea    ecx,[ebp-0x9a]
10003452:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10003455:	01 ca                	add    edx,ecx
10003457:	88 02                	mov    BYTE PTR [edx],al
10003459:	eb 12                	jmp    1000346d <firstRun(bool)+0xe2a>
1000345b:	a0 00 00 00 00       	mov    al,ds:0x0	1000345c: R_386_32	installKey
10003460:	8d 8d 66 ff ff ff    	lea    ecx,[ebp-0x9a]
10003466:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10003469:	01 ca                	add    edx,ecx
1000346b:	88 02                	mov    BYTE PTR [edx],al
1000346d:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10003470:	83 ec 0c             	sub    esp,0xc
10003473:	8d 85 66 ff ff ff    	lea    eax,[ebp-0x9a]
10003479:	50                   	push   eax
1000347a:	e8 fc ff ff ff       	call   1000347b <firstRun(bool)+0xe38>	1000347b: R_386_PC32	strlen
1000347f:	83 c4 10             	add    esp,0x10
10003482:	89 c2                	mov    edx,eax
10003484:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10003487:	39 c2                	cmp    edx,eax
10003489:	77 07                	ja     10003492 <firstRun(bool)+0xe4f>
1000348b:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
10003492:	8d 95 66 ff ff ff    	lea    edx,[ebp-0x9a]
10003498:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
1000349b:	01 d0                	add    eax,edx
1000349d:	8a 00                	mov    al,BYTE PTR [eax]
1000349f:	3c 20                	cmp    al,0x20
100034a1:	74 ca                	je     1000346d <firstRun(bool)+0xe2a>
100034a3:	8d 95 66 ff ff ff    	lea    edx,[ebp-0x9a]
100034a9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
100034ac:	01 d0                	add    eax,edx
100034ae:	8a 00                	mov    al,BYTE PTR [eax]
100034b0:	3c 2f                	cmp    al,0x2f
100034b2:	74 b9                	je     1000346d <firstRun(bool)+0xe2a>
100034b4:	8d 95 66 ff ff ff    	lea    edx,[ebp-0x9a]
100034ba:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
100034bd:	01 d0                	add    eax,edx
100034bf:	8a 00                	mov    al,BYTE PTR [eax]
100034c1:	3c 3a                	cmp    al,0x3a
100034c3:	0f 85 49 02 00 00    	jne    10003712 <firstRun(bool)+0x10cf>
100034c9:	eb a2                	jmp    1000346d <firstRun(bool)+0xe2a>
100034cb:	a0 00 00 00 00       	mov    al,ds:0x0	100034cc: R_386_32	installKey
100034d0:	3c 0a                	cmp    al,0xa
100034d2:	0f 94 c0             	sete   al
100034d5:	84 c0                	test   al,al
100034d7:	0f 84 35 02 00 00    	je     10003712 <firstRun(bool)+0x10cf>
100034dd:	8a 85 66 ff ff ff    	mov    al,BYTE PTR [ebp-0x9a]
100034e3:	0f be c0             	movsx  eax,al
100034e6:	8d 50 d0             	lea    edx,[eax-0x30]
100034e9:	89 d0                	mov    eax,edx
100034eb:	c1 e0 02             	shl    eax,0x2
100034ee:	01 d0                	add    eax,edx
100034f0:	01 c0                	add    eax,eax
100034f2:	89 c2                	mov    edx,eax
100034f4:	8a 85 67 ff ff ff    	mov    al,BYTE PTR [ebp-0x99]
100034fa:	0f be c0             	movsx  eax,al
100034fd:	83 e8 30             	sub    eax,0x30
10003500:	01 d0                	add    eax,edx
10003502:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
10003505:	8a 85 69 ff ff ff    	mov    al,BYTE PTR [ebp-0x97]
1000350b:	0f be c0             	movsx  eax,al
1000350e:	8d 50 d0             	lea    edx,[eax-0x30]
10003511:	89 d0                	mov    eax,edx
10003513:	c1 e0 02             	shl    eax,0x2
10003516:	01 d0                	add    eax,edx
10003518:	01 c0                	add    eax,eax
1000351a:	89 c2                	mov    edx,eax
1000351c:	8a 85 6a ff ff ff    	mov    al,BYTE PTR [ebp-0x96]
10003522:	0f be c0             	movsx  eax,al
10003525:	83 e8 30             	sub    eax,0x30
10003528:	01 d0                	add    eax,edx
1000352a:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
1000352d:	8a 85 6c ff ff ff    	mov    al,BYTE PTR [ebp-0x94]
10003533:	0f be c0             	movsx  eax,al
10003536:	8d 50 d0             	lea    edx,[eax-0x30]
10003539:	89 d0                	mov    eax,edx
1000353b:	c1 e0 02             	shl    eax,0x2
1000353e:	01 d0                	add    eax,edx
10003540:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10003547:	01 d0                	add    eax,edx
10003549:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10003550:	01 d0                	add    eax,edx
10003552:	c1 e0 03             	shl    eax,0x3
10003555:	89 c1                	mov    ecx,eax
10003557:	8a 85 6d ff ff ff    	mov    al,BYTE PTR [ebp-0x93]
1000355d:	0f be c0             	movsx  eax,al
10003560:	8d 50 d0             	lea    edx,[eax-0x30]
10003563:	89 d0                	mov    eax,edx
10003565:	c1 e0 02             	shl    eax,0x2
10003568:	01 d0                	add    eax,edx
1000356a:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10003571:	01 d0                	add    eax,edx
10003573:	c1 e0 02             	shl    eax,0x2
10003576:	01 c1                	add    ecx,eax
10003578:	8a 85 6e ff ff ff    	mov    al,BYTE PTR [ebp-0x92]
1000357e:	0f be c0             	movsx  eax,al
10003581:	8d 50 d0             	lea    edx,[eax-0x30]
10003584:	89 d0                	mov    eax,edx
10003586:	c1 e0 02             	shl    eax,0x2
10003589:	01 d0                	add    eax,edx
1000358b:	01 c0                	add    eax,eax
1000358d:	8d 14 01             	lea    edx,[ecx+eax*1]
10003590:	8a 85 6f ff ff ff    	mov    al,BYTE PTR [ebp-0x91]
10003596:	0f be c0             	movsx  eax,al
10003599:	83 e8 30             	sub    eax,0x30
1000359c:	01 d0                	add    eax,edx
1000359e:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
100035a1:	8a 85 71 ff ff ff    	mov    al,BYTE PTR [ebp-0x8f]
100035a7:	0f be c0             	movsx  eax,al
100035aa:	8d 50 d0             	lea    edx,[eax-0x30]
100035ad:	89 d0                	mov    eax,edx
100035af:	c1 e0 02             	shl    eax,0x2
100035b2:	01 d0                	add    eax,edx
100035b4:	01 c0                	add    eax,eax
100035b6:	89 c2                	mov    edx,eax
100035b8:	8a 85 72 ff ff ff    	mov    al,BYTE PTR [ebp-0x8e]
100035be:	0f be c0             	movsx  eax,al
100035c1:	83 e8 30             	sub    eax,0x30
100035c4:	01 d0                	add    eax,edx
100035c6:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
100035c9:	8a 85 74 ff ff ff    	mov    al,BYTE PTR [ebp-0x8c]
100035cf:	0f be c0             	movsx  eax,al
100035d2:	8d 50 d0             	lea    edx,[eax-0x30]
100035d5:	89 d0                	mov    eax,edx
100035d7:	c1 e0 02             	shl    eax,0x2
100035da:	01 d0                	add    eax,edx
100035dc:	01 c0                	add    eax,eax
100035de:	89 c2                	mov    edx,eax
100035e0:	8a 85 75 ff ff ff    	mov    al,BYTE PTR [ebp-0x8b]
100035e6:	0f be c0             	movsx  eax,al
100035e9:	83 e8 30             	sub    eax,0x30
100035ec:	01 d0                	add    eax,edx
100035ee:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
100035f1:	8a 85 77 ff ff ff    	mov    al,BYTE PTR [ebp-0x89]
100035f7:	0f be c0             	movsx  eax,al
100035fa:	8d 50 d0             	lea    edx,[eax-0x30]
100035fd:	89 d0                	mov    eax,edx
100035ff:	c1 e0 02             	shl    eax,0x2
10003602:	01 d0                	add    eax,edx
10003604:	01 c0                	add    eax,eax
10003606:	89 c2                	mov    edx,eax
10003608:	8a 85 78 ff ff ff    	mov    al,BYTE PTR [ebp-0x88]
1000360e:	0f be c0             	movsx  eax,al
10003611:	83 e8 30             	sub    eax,0x30
10003614:	01 d0                	add    eax,edx
10003616:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
10003619:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
1000361c:	83 e0 03             	and    eax,0x3
1000361f:	85 c0                	test   eax,eax
10003621:	75 1f                	jne    10003642 <firstRun(bool)+0xfff>
10003623:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10003626:	b9 19 00 00 00       	mov    ecx,0x19
1000362b:	99                   	cdq    
1000362c:	f7 f9                	idiv   ecx
1000362e:	89 d0                	mov    eax,edx
10003630:	85 c0                	test   eax,eax
10003632:	75 0a                	jne    1000363e <firstRun(bool)+0xffb>
10003634:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10003637:	83 e0 0f             	and    eax,0xf
1000363a:	85 c0                	test   eax,eax
1000363c:	75 04                	jne    10003642 <firstRun(bool)+0xfff>
1000363e:	b0 01                	mov    al,0x1
10003640:	eb 02                	jmp    10003644 <firstRun(bool)+0x1001>
10003642:	b0 00                	mov    al,0x0
10003644:	88 45 c7             	mov    BYTE PTR [ebp-0x39],al
10003647:	83 7d dc 1f          	cmp    DWORD PTR [ebp-0x24],0x1f
1000364b:	7e 0c                	jle    10003659 <firstRun(bool)+0x1016>
1000364d:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
10003654:	e9 b9 00 00 00       	jmp    10003712 <firstRun(bool)+0x10cf>
10003659:	83 7d dc 1e          	cmp    DWORD PTR [ebp-0x24],0x1e
1000365d:	7e 2a                	jle    10003689 <firstRun(bool)+0x1046>
1000365f:	83 7d d8 02          	cmp    DWORD PTR [ebp-0x28],0x2
10003663:	74 18                	je     1000367d <firstRun(bool)+0x103a>
10003665:	83 7d d8 04          	cmp    DWORD PTR [ebp-0x28],0x4
10003669:	74 12                	je     1000367d <firstRun(bool)+0x103a>
1000366b:	83 7d d8 06          	cmp    DWORD PTR [ebp-0x28],0x6
1000366f:	74 0c                	je     1000367d <firstRun(bool)+0x103a>
10003671:	83 7d d8 09          	cmp    DWORD PTR [ebp-0x28],0x9
10003675:	74 06                	je     1000367d <firstRun(bool)+0x103a>
10003677:	83 7d d8 0b          	cmp    DWORD PTR [ebp-0x28],0xb
1000367b:	75 0c                	jne    10003689 <firstRun(bool)+0x1046>
1000367d:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
10003684:	e9 89 00 00 00       	jmp    10003712 <firstRun(bool)+0x10cf>
10003689:	83 7d dc 1d          	cmp    DWORD PTR [ebp-0x24],0x1d
1000368d:	75 19                	jne    100036a8 <firstRun(bool)+0x1065>
1000368f:	83 7d d8 02          	cmp    DWORD PTR [ebp-0x28],0x2
10003693:	75 13                	jne    100036a8 <firstRun(bool)+0x1065>
10003695:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
10003698:	83 f0 01             	xor    eax,0x1
1000369b:	84 c0                	test   al,al
1000369d:	74 09                	je     100036a8 <firstRun(bool)+0x1065>
1000369f:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
100036a6:	eb 6a                	jmp    10003712 <firstRun(bool)+0x10cf>
100036a8:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
100036ac:	75 09                	jne    100036b7 <firstRun(bool)+0x1074>
100036ae:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
100036b5:	eb 5b                	jmp    10003712 <firstRun(bool)+0x10cf>
100036b7:	83 7d d8 0c          	cmp    DWORD PTR [ebp-0x28],0xc
100036bb:	7f 06                	jg     100036c3 <firstRun(bool)+0x1080>
100036bd:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
100036c1:	75 09                	jne    100036cc <firstRun(bool)+0x1089>
100036c3:	c7 45 f4 03 00 00 00 	mov    DWORD PTR [ebp-0xc],0x3
100036ca:	eb 46                	jmp    10003712 <firstRun(bool)+0x10cf>
100036cc:	81 7d d4 b7 0b 00 00 	cmp    DWORD PTR [ebp-0x2c],0xbb7
100036d3:	7f 09                	jg     100036de <firstRun(bool)+0x109b>
100036d5:	81 7d d4 b1 07 00 00 	cmp    DWORD PTR [ebp-0x2c],0x7b1
100036dc:	7f 09                	jg     100036e7 <firstRun(bool)+0x10a4>
100036de:	c7 45 f4 06 00 00 00 	mov    DWORD PTR [ebp-0xc],0x6
100036e5:	eb 2b                	jmp    10003712 <firstRun(bool)+0x10cf>
100036e7:	83 7d d0 17          	cmp    DWORD PTR [ebp-0x30],0x17
100036eb:	7e 09                	jle    100036f6 <firstRun(bool)+0x10b3>
100036ed:	c7 45 f4 0b 00 00 00 	mov    DWORD PTR [ebp-0xc],0xb
100036f4:	eb 1c                	jmp    10003712 <firstRun(bool)+0x10cf>
100036f6:	83 7d cc 3b          	cmp    DWORD PTR [ebp-0x34],0x3b
100036fa:	7e 09                	jle    10003705 <firstRun(bool)+0x10c2>
100036fc:	c7 45 f4 0e 00 00 00 	mov    DWORD PTR [ebp-0xc],0xe
10003703:	eb 0d                	jmp    10003712 <firstRun(bool)+0x10cf>
10003705:	83 7d c8 3b          	cmp    DWORD PTR [ebp-0x38],0x3b
10003709:	7e 23                	jle    1000372e <firstRun(bool)+0x10eb>
1000370b:	c7 45 f4 11 00 00 00 	mov    DWORD PTR [ebp-0xc],0x11
10003712:	83 ec 0c             	sub    esp,0xc
10003715:	68 4c 04 00 00       	push   0x44c
1000371a:	e8 fc ff ff ff       	call   1000371b <firstRun(bool)+0x10d8>	1000371b: R_386_PC32	milliTenthSleep(unsigned int)
1000371f:	83 c4 10             	add    esp,0x10
10003722:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10003724: R_386_32	installKey
10003729:	e9 83 f8 ff ff       	jmp    10002fb1 <firstRun(bool)+0x96e>
1000372e:	90                   	nop
1000372f:	80 bd 54 ff ff ff 00 	cmp    BYTE PTR [ebp-0xac],0x0
10003736:	0f 84 f8 00 00 00    	je     10003834 <firstRun(bool)+0x11f1>
1000373c:	a1 00 00 00 00       	mov    eax,ds:0x0	1000373d: R_386_32	term
10003741:	83 ec 0c             	sub    esp,0xc
10003744:	50                   	push   eax
10003745:	e8 fc ff ff ff       	call   10003746 <firstRun(bool)+0x1103>	10003746: R_386_PC32	setActiveTerminal(VgaText*)
1000374a:	83 c4 10             	add    esp,0x10
1000374d:	e8 fc ff ff ff       	call   1000374e <firstRun(bool)+0x110b>	1000374e: R_386_PC32	drawBootScreen()
10003752:	83 ec 0c             	sub    esp,0xc
10003755:	68 06 4c 00 10       	push   0x10004c06	10003756: R_386_32	.text
1000375a:	6a 0d                	push   0xd
1000375c:	6a 32                	push   0x32
1000375e:	6a 05                	push   0x5
10003760:	6a 16                	push   0x16
10003762:	e8 fc ff ff ff       	call   10003763 <firstRun(bool)+0x1120>	10003763: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
10003767:	83 c4 20             	add    esp,0x20
1000376a:	a1 00 00 00 00       	mov    eax,ds:0x0	1000376b: R_386_32	term
1000376f:	83 ec 04             	sub    esp,0x4
10003772:	6a 08                	push   0x8
10003774:	6a 18                	push   0x18
10003776:	50                   	push   eax
10003777:	e8 fc ff ff ff       	call   10003778 <firstRun(bool)+0x1135>	10003778: R_386_PC32	VgaText::setCursor(int, int)
1000377c:	83 c4 10             	add    esp,0x10
1000377f:	a1 00 00 00 00       	mov    eax,ds:0x0	10003780: R_386_32	term
10003784:	83 ec 08             	sub    esp,0x8
10003787:	68 1c 4c 00 10       	push   0x10004c1c	10003788: R_386_32	.text
1000378c:	50                   	push   eax
1000378d:	e8 fc ff ff ff       	call   1000378e <firstRun(bool)+0x114b>	1000378e: R_386_PC32	VgaText::puts(char const*)
10003792:	83 c4 10             	add    esp,0x10
10003795:	a1 00 00 00 00       	mov    eax,ds:0x0	10003796: R_386_32	term
1000379a:	83 ec 04             	sub    esp,0x4
1000379d:	6a 0a                	push   0xa
1000379f:	6a 18                	push   0x18
100037a1:	50                   	push   eax
100037a2:	e8 fc ff ff ff       	call   100037a3 <firstRun(bool)+0x1160>	100037a3: R_386_PC32	VgaText::setCursor(int, int)
100037a7:	83 c4 10             	add    esp,0x10
100037aa:	a1 00 00 00 00       	mov    eax,ds:0x0	100037ab: R_386_32	term
100037af:	83 ec 08             	sub    esp,0x8
100037b2:	68 44 4c 00 10       	push   0x10004c44	100037b3: R_386_32	.text
100037b7:	50                   	push   eax
100037b8:	e8 fc ff ff ff       	call   100037b9 <firstRun(bool)+0x1176>	100037b9: R_386_PC32	VgaText::puts(char const*)
100037bd:	83 c4 10             	add    esp,0x10
100037c0:	a1 00 00 00 00       	mov    eax,ds:0x0	100037c1: R_386_32	term
100037c5:	83 ec 04             	sub    esp,0x4
100037c8:	6a 0b                	push   0xb
100037ca:	6a 18                	push   0x18
100037cc:	50                   	push   eax
100037cd:	e8 fc ff ff ff       	call   100037ce <firstRun(bool)+0x118b>	100037ce: R_386_PC32	VgaText::setCursor(int, int)
100037d2:	83 c4 10             	add    esp,0x10
100037d5:	a1 00 00 00 00       	mov    eax,ds:0x0	100037d6: R_386_32	term
100037da:	83 ec 08             	sub    esp,0x8
100037dd:	68 6d 4c 00 10       	push   0x10004c6d	100037de: R_386_32	.text
100037e2:	50                   	push   eax
100037e3:	e8 fc ff ff ff       	call   100037e4 <firstRun(bool)+0x11a1>	100037e4: R_386_PC32	VgaText::puts(char const*)
100037e8:	83 c4 10             	add    esp,0x10
100037eb:	a1 00 00 00 00       	mov    eax,ds:0x0	100037ec: R_386_32	term
100037f0:	83 ec 04             	sub    esp,0x4
100037f3:	6a 0e                	push   0xe
100037f5:	6a 18                	push   0x18
100037f7:	50                   	push   eax
100037f8:	e8 fc ff ff ff       	call   100037f9 <firstRun(bool)+0x11b6>	100037f9: R_386_PC32	VgaText::setCursor(int, int)
100037fd:	83 c4 10             	add    esp,0x10
10003800:	a1 00 00 00 00       	mov    eax,ds:0x0	10003801: R_386_32	term
10003805:	83 ec 08             	sub    esp,0x8
10003808:	68 7c 4c 00 10       	push   0x10004c7c	10003809: R_386_32	.text
1000380d:	50                   	push   eax
1000380e:	e8 fc ff ff ff       	call   1000380f <firstRun(bool)+0x11cc>	1000380f: R_386_PC32	VgaText::puts(char const*)
10003813:	83 c4 10             	add    esp,0x10
10003816:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10003818: R_386_32	installKey
1000381d:	a0 00 00 00 00       	mov    al,ds:0x0	1000381e: R_386_32	installKey
10003822:	84 c0                	test   al,al
10003824:	0f 94 c0             	sete   al
10003827:	84 c0                	test   al,al
10003829:	74 02                	je     1000382d <firstRun(bool)+0x11ea>
1000382b:	eb f0                	jmp    1000381d <firstRun(bool)+0x11da>
1000382d:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	1000382f: R_386_32	installKey
10003834:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10003836: R_386_32	installKey
1000383b:	83 ec 0c             	sub    esp,0xc
1000383e:	68 84 03 00 00       	push   0x384
10003843:	e8 fc ff ff ff       	call   10003844 <firstRun(bool)+0x1201>	10003844: R_386_PC32	milliTenthSleep(unsigned int)
10003848:	83 c4 10             	add    esp,0x10
1000384b:	e8 fc ff ff ff       	call   1000384c <firstRun(bool)+0x1209>	1000384c: R_386_PC32	drawBootScreen()
10003850:	83 ec 0c             	sub    esp,0xc
10003853:	68 18 2e 00 00       	push   0x2e18
10003858:	e8 fc ff ff ff       	call   10003859 <firstRun(bool)+0x1216>	10003859: R_386_PC32	milliTenthSleep(unsigned int)
1000385d:	83 c4 10             	add    esp,0x10
10003860:	80 bd 54 ff ff ff 00 	cmp    BYTE PTR [ebp-0xac],0x0
10003867:	74 17                	je     10003880 <firstRun(bool)+0x123d>
10003869:	83 ec 08             	sub    esp,0x8
1000386c:	68 a6 4c 00 10       	push   0x10004ca6	1000386d: R_386_32	.text
10003871:	68 00 00 00 00       	push   0x0	10003872: R_386_32	pkeybuf
10003876:	e8 fc ff ff ff       	call   10003877 <firstRun(bool)+0x1234>	10003877: R_386_PC32	strcpy
1000387b:	83 c4 10             	add    esp,0x10
1000387e:	eb 15                	jmp    10003895 <firstRun(bool)+0x1252>
10003880:	83 ec 08             	sub    esp,0x8
10003883:	68 b7 4c 00 10       	push   0x10004cb7	10003884: R_386_32	.text
10003888:	68 00 00 00 00       	push   0x0	10003889: R_386_32	pkeybuf
1000388d:	e8 fc ff ff ff       	call   1000388e <firstRun(bool)+0x124b>	1000388e: R_386_PC32	strcpy
10003892:	83 c4 10             	add    esp,0x10
10003895:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
1000389c:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	1000389e: R_386_32	installKey
100038a3:	e8 fc ff ff ff       	call   100038a4 <firstRun(bool)+0x1261>	100038a4: R_386_PC32	drawBootScreen()
100038a8:	83 ec 0c             	sub    esp,0xc
100038ab:	68 c8 4c 00 10       	push   0x10004cc8	100038ac: R_386_32	.text
100038b0:	6a 0e                	push   0xe
100038b2:	6a 32                	push   0x32
100038b4:	6a 02                	push   0x2
100038b6:	6a 16                	push   0x16
100038b8:	e8 fc ff ff ff       	call   100038b9 <firstRun(bool)+0x1276>	100038b9: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
100038bd:	83 c4 20             	add    esp,0x20
100038c0:	a1 00 00 00 00       	mov    eax,ds:0x0	100038c1: R_386_32	term
100038c5:	83 ec 04             	sub    esp,0x4
100038c8:	6a 05                	push   0x5
100038ca:	6a 18                	push   0x18
100038cc:	50                   	push   eax
100038cd:	e8 fc ff ff ff       	call   100038ce <firstRun(bool)+0x128b>	100038ce: R_386_PC32	VgaText::setCursor(int, int)
100038d2:	83 c4 10             	add    esp,0x10
100038d5:	a1 00 00 00 00       	mov    eax,ds:0x0	100038d6: R_386_32	term
100038da:	83 ec 08             	sub    esp,0x8
100038dd:	68 d4 4c 00 10       	push   0x10004cd4	100038de: R_386_32	.text
100038e2:	50                   	push   eax
100038e3:	e8 fc ff ff ff       	call   100038e4 <firstRun(bool)+0x12a1>	100038e4: R_386_PC32	VgaText::puts(char const*)
100038e8:	83 c4 10             	add    esp,0x10
100038eb:	a1 00 00 00 00       	mov    eax,ds:0x0	100038ec: R_386_32	term
100038f0:	83 ec 04             	sub    esp,0x4
100038f3:	6a 06                	push   0x6
100038f5:	6a 18                	push   0x18
100038f7:	50                   	push   eax
100038f8:	e8 fc ff ff ff       	call   100038f9 <firstRun(bool)+0x12b6>	100038f9: R_386_PC32	VgaText::setCursor(int, int)
100038fd:	83 c4 10             	add    esp,0x10
10003900:	a1 00 00 00 00       	mov    eax,ds:0x0	10003901: R_386_32	term
10003905:	83 ec 08             	sub    esp,0x8
10003908:	68 dc 4b 00 10       	push   0x10004bdc	10003909: R_386_32	.text
1000390d:	50                   	push   eax
1000390e:	e8 fc ff ff ff       	call   1000390f <firstRun(bool)+0x12cc>	1000390f: R_386_PC32	VgaText::puts(char const*)
10003913:	83 c4 10             	add    esp,0x10
10003916:	c6 05 10 00 00 00 00 	mov    BYTE PTR ds:0x10,0x0	10003918: R_386_32	pkeybuf
1000391d:	c6 05 11 00 00 00 00 	mov    BYTE PTR ds:0x11,0x0	1000391f: R_386_32	pkeybuf
10003924:	a1 00 00 00 00       	mov    eax,ds:0x0	10003925: R_386_32	term
10003929:	83 ec 04             	sub    esp,0x4
1000392c:	6a 08                	push   0x8
1000392e:	6a 1c                	push   0x1c
10003930:	50                   	push   eax
10003931:	e8 fc ff ff ff       	call   10003932 <firstRun(bool)+0x12ef>	10003932: R_386_PC32	VgaText::setCursor(int, int)
10003936:	83 c4 10             	add    esp,0x10
10003939:	a1 00 00 00 00       	mov    eax,ds:0x0	1000393a: R_386_32	term
1000393e:	83 ec 08             	sub    esp,0x8
10003941:	68 00 00 00 00       	push   0x0	10003942: R_386_32	pkeybuf
10003946:	50                   	push   eax
10003947:	e8 fc ff ff ff       	call   10003948 <firstRun(bool)+0x1305>	10003948: R_386_PC32	VgaText::puts(char const*)
1000394c:	83 c4 10             	add    esp,0x10
1000394f:	a1 00 00 00 00       	mov    eax,ds:0x0	10003950: R_386_32	term
10003954:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10003957:	83 c2 1c             	add    edx,0x1c
1000395a:	83 ec 04             	sub    esp,0x4
1000395d:	6a 08                	push   0x8
1000395f:	52                   	push   edx
10003960:	50                   	push   eax
10003961:	e8 fc ff ff ff       	call   10003962 <firstRun(bool)+0x131f>	10003962: R_386_PC32	VgaText::setCursor(int, int)
10003966:	83 c4 10             	add    esp,0x10
10003969:	a1 00 00 00 00       	mov    eax,ds:0x0	1000396a: R_386_32	term
1000396e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10003971:	81 c2 00 00 00 00    	add    edx,0x0	10003973: R_386_32	pkeybuf
10003977:	8a 12                	mov    dl,BYTE PTR [edx]
10003979:	0f be d2             	movsx  edx,dl
1000397c:	6a 00                	push   0x0
1000397e:	6a 0f                	push   0xf
10003980:	52                   	push   edx
10003981:	50                   	push   eax
10003982:	e8 fc ff ff ff       	call   10003983 <firstRun(bool)+0x1340>	10003983: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
10003987:	83 c4 10             	add    esp,0x10
1000398a:	a1 00 00 00 00       	mov    eax,ds:0x0	1000398b: R_386_32	term
1000398f:	83 ec 04             	sub    esp,0x4
10003992:	6a 08                	push   0x8
10003994:	6a 2c                	push   0x2c
10003996:	50                   	push   eax
10003997:	e8 fc ff ff ff       	call   10003998 <firstRun(bool)+0x1355>	10003998: R_386_PC32	VgaText::setCursor(int, int)
1000399c:	83 c4 10             	add    esp,0x10
1000399f:	a1 00 00 00 00       	mov    eax,ds:0x0	100039a0: R_386_32	term
100039a4:	6a 0f                	push   0xf
100039a6:	6a 0f                	push   0xf
100039a8:	6a 20                	push   0x20
100039aa:	50                   	push   eax
100039ab:	e8 fc ff ff ff       	call   100039ac <firstRun(bool)+0x1369>	100039ac: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
100039b0:	83 c4 10             	add    esp,0x10
100039b3:	a1 00 00 00 00       	mov    eax,ds:0x0	100039b4: R_386_32	term
100039b8:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
100039bb:	83 c2 1c             	add    edx,0x1c
100039be:	83 ec 04             	sub    esp,0x4
100039c1:	6a 08                	push   0x8
100039c3:	52                   	push   edx
100039c4:	50                   	push   eax
100039c5:	e8 fc ff ff ff       	call   100039c6 <firstRun(bool)+0x1383>	100039c6: R_386_PC32	VgaText::setCursor(int, int)
100039ca:	83 c4 10             	add    esp,0x10
100039cd:	a0 00 00 00 00       	mov    al,ds:0x0	100039ce: R_386_32	installKey
100039d2:	84 c0                	test   al,al
100039d4:	0f 94 c0             	sete   al
100039d7:	84 c0                	test   al,al
100039d9:	74 02                	je     100039dd <firstRun(bool)+0x139a>
100039db:	eb f0                	jmp    100039cd <firstRun(bool)+0x138a>
100039dd:	a1 00 00 00 00       	mov    eax,ds:0x0	100039de: R_386_32	term
100039e2:	05 82 00 00 00       	add    eax,0x82
100039e7:	83 ec 04             	sub    esp,0x4
100039ea:	6a 10                	push   0x10
100039ec:	6a 00                	push   0x0
100039ee:	50                   	push   eax
100039ef:	e8 fc ff ff ff       	call   100039f0 <firstRun(bool)+0x13ad>	100039f0: R_386_PC32	memset
100039f4:	83 c4 10             	add    esp,0x10
100039f7:	a1 00 00 00 00       	mov    eax,ds:0x0	100039f8: R_386_32	term
100039fc:	05 02 01 00 00       	add    eax,0x102
10003a01:	83 ec 04             	sub    esp,0x4
10003a04:	6a 10                	push   0x10
10003a06:	6a 00                	push   0x0
10003a08:	50                   	push   eax
10003a09:	e8 fc ff ff ff       	call   10003a0a <firstRun(bool)+0x13c7>	10003a0a: R_386_PC32	memset
10003a0e:	83 c4 10             	add    esp,0x10
10003a11:	a0 00 00 00 00       	mov    al,ds:0x0	10003a12: R_386_32	installKey
10003a16:	3c 03                	cmp    al,0x3
10003a18:	74 09                	je     10003a23 <firstRun(bool)+0x13e0>
10003a1a:	a0 00 00 00 00       	mov    al,ds:0x0	10003a1b: R_386_32	installKey
10003a1f:	3c 08                	cmp    al,0x8
10003a21:	75 04                	jne    10003a27 <firstRun(bool)+0x13e4>
10003a23:	b0 01                	mov    al,0x1
10003a25:	eb 02                	jmp    10003a29 <firstRun(bool)+0x13e6>
10003a27:	b0 00                	mov    al,0x0
10003a29:	84 c0                	test   al,al
10003a2b:	74 31                	je     10003a5e <firstRun(bool)+0x141b>
10003a2d:	ff 4d f4             	dec    DWORD PTR [ebp-0xc]
10003a30:	83 7d f4 ff          	cmp    DWORD PTR [ebp-0xc],0xffffffff
10003a34:	75 14                	jne    10003a4a <firstRun(bool)+0x1407>
10003a36:	83 ec 0c             	sub    esp,0xc
10003a39:	68 00 00 00 00       	push   0x0	10003a3a: R_386_32	pkeybuf
10003a3e:	e8 fc ff ff ff       	call   10003a3f <firstRun(bool)+0x13fc>	10003a3f: R_386_PC32	strlen
10003a43:	83 c4 10             	add    esp,0x10
10003a46:	48                   	dec    eax
10003a47:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
10003a4a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10003a4d:	05 00 00 00 00       	add    eax,0x0	10003a4e: R_386_32	pkeybuf
10003a52:	8a 00                	mov    al,BYTE PTR [eax]
10003a54:	3c 2d                	cmp    al,0x2d
10003a56:	0f 85 61 03 00 00    	jne    10003dbd <firstRun(bool)+0x177a>
10003a5c:	eb cf                	jmp    10003a2d <firstRun(bool)+0x13ea>
10003a5e:	a0 00 00 00 00       	mov    al,ds:0x0	10003a5f: R_386_32	installKey
10003a63:	3c 2f                	cmp    al,0x2f
10003a65:	7e 09                	jle    10003a70 <firstRun(bool)+0x142d>
10003a67:	a0 00 00 00 00       	mov    al,ds:0x0	10003a68: R_386_32	installKey
10003a6c:	3c 39                	cmp    al,0x39
10003a6e:	7e 36                	jle    10003aa6 <firstRun(bool)+0x1463>
10003a70:	a0 00 00 00 00       	mov    al,ds:0x0	10003a71: R_386_32	installKey
10003a75:	3c 40                	cmp    al,0x40
10003a77:	7e 09                	jle    10003a82 <firstRun(bool)+0x143f>
10003a79:	a0 00 00 00 00       	mov    al,ds:0x0	10003a7a: R_386_32	installKey
10003a7e:	3c 5a                	cmp    al,0x5a
10003a80:	7e 24                	jle    10003aa6 <firstRun(bool)+0x1463>
10003a82:	a0 00 00 00 00       	mov    al,ds:0x0	10003a83: R_386_32	installKey
10003a87:	3c 60                	cmp    al,0x60
10003a89:	7e 09                	jle    10003a94 <firstRun(bool)+0x1451>
10003a8b:	a0 00 00 00 00       	mov    al,ds:0x0	10003a8c: R_386_32	installKey
10003a90:	3c 7a                	cmp    al,0x7a
10003a92:	7e 12                	jle    10003aa6 <firstRun(bool)+0x1463>
10003a94:	a0 00 00 00 00       	mov    al,ds:0x0	10003a95: R_386_32	installKey
10003a99:	3c 20                	cmp    al,0x20
10003a9b:	74 09                	je     10003aa6 <firstRun(bool)+0x1463>
10003a9d:	a0 00 00 00 00       	mov    al,ds:0x0	10003a9e: R_386_32	installKey
10003aa2:	3c 04                	cmp    al,0x4
10003aa4:	75 04                	jne    10003aaa <firstRun(bool)+0x1467>
10003aa6:	b0 01                	mov    al,0x1
10003aa8:	eb 02                	jmp    10003aac <firstRun(bool)+0x1469>
10003aaa:	b0 00                	mov    al,0x0
10003aac:	84 c0                	test   al,al
10003aae:	0f 84 a3 00 00 00    	je     10003b57 <firstRun(bool)+0x1514>
10003ab4:	a0 00 00 00 00       	mov    al,ds:0x0	10003ab5: R_386_32	installKey
10003ab9:	3c 2f                	cmp    al,0x2f
10003abb:	7e 09                	jle    10003ac6 <firstRun(bool)+0x1483>
10003abd:	a0 00 00 00 00       	mov    al,ds:0x0	10003abe: R_386_32	installKey
10003ac2:	3c 39                	cmp    al,0x39
10003ac4:	7e 24                	jle    10003aea <firstRun(bool)+0x14a7>
10003ac6:	a0 00 00 00 00       	mov    al,ds:0x0	10003ac7: R_386_32	installKey
10003acb:	3c 40                	cmp    al,0x40
10003acd:	7e 09                	jle    10003ad8 <firstRun(bool)+0x1495>
10003acf:	a0 00 00 00 00       	mov    al,ds:0x0	10003ad0: R_386_32	installKey
10003ad4:	3c 5a                	cmp    al,0x5a
10003ad6:	7e 12                	jle    10003aea <firstRun(bool)+0x14a7>
10003ad8:	a0 00 00 00 00       	mov    al,ds:0x0	10003ad9: R_386_32	installKey
10003add:	3c 60                	cmp    al,0x60
10003adf:	7e 0d                	jle    10003aee <firstRun(bool)+0x14ab>
10003ae1:	a0 00 00 00 00       	mov    al,ds:0x0	10003ae2: R_386_32	installKey
10003ae6:	3c 7a                	cmp    al,0x7a
10003ae8:	7f 04                	jg     10003aee <firstRun(bool)+0x14ab>
10003aea:	b0 01                	mov    al,0x1
10003aec:	eb 02                	jmp    10003af0 <firstRun(bool)+0x14ad>
10003aee:	b0 00                	mov    al,0x0
10003af0:	84 c0                	test   al,al
10003af2:	74 2c                	je     10003b20 <firstRun(bool)+0x14dd>
10003af4:	a0 00 00 00 00       	mov    al,ds:0x0	10003af5: R_386_32	installKey
10003af9:	3c 60                	cmp    al,0x60
10003afb:	7e 13                	jle    10003b10 <firstRun(bool)+0x14cd>
10003afd:	a0 00 00 00 00       	mov    al,ds:0x0	10003afe: R_386_32	installKey
10003b02:	3c 7a                	cmp    al,0x7a
10003b04:	7f 0a                	jg     10003b10 <firstRun(bool)+0x14cd>
10003b06:	a0 00 00 00 00       	mov    al,ds:0x0	10003b07: R_386_32	installKey
10003b0b:	83 e8 20             	sub    eax,0x20
10003b0e:	eb 05                	jmp    10003b15 <firstRun(bool)+0x14d2>
10003b10:	a0 00 00 00 00       	mov    al,ds:0x0	10003b11: R_386_32	installKey
10003b15:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10003b18:	81 c2 00 00 00 00    	add    edx,0x0	10003b1a: R_386_32	pkeybuf
10003b1e:	88 02                	mov    BYTE PTR [edx],al
10003b20:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10003b23:	83 ec 0c             	sub    esp,0xc
10003b26:	68 00 00 00 00       	push   0x0	10003b27: R_386_32	pkeybuf
10003b2b:	e8 fc ff ff ff       	call   10003b2c <firstRun(bool)+0x14e9>	10003b2c: R_386_PC32	strlen
10003b30:	83 c4 10             	add    esp,0x10
10003b33:	89 c2                	mov    edx,eax
10003b35:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10003b38:	39 c2                	cmp    edx,eax
10003b3a:	77 07                	ja     10003b43 <firstRun(bool)+0x1500>
10003b3c:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
10003b43:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10003b46:	05 00 00 00 00       	add    eax,0x0	10003b47: R_386_32	pkeybuf
10003b4b:	8a 00                	mov    al,BYTE PTR [eax]
10003b4d:	3c 2d                	cmp    al,0x2d
10003b4f:	0f 85 68 02 00 00    	jne    10003dbd <firstRun(bool)+0x177a>
10003b55:	eb c9                	jmp    10003b20 <firstRun(bool)+0x14dd>
10003b57:	a0 00 00 00 00       	mov    al,ds:0x0	10003b58: R_386_32	installKey
10003b5c:	3c 0a                	cmp    al,0xa
10003b5e:	0f 94 c0             	sete   al
10003b61:	84 c0                	test   al,al
10003b63:	0f 84 54 02 00 00    	je     10003dbd <firstRun(bool)+0x177a>
10003b69:	83 ec 0c             	sub    esp,0xc
10003b6c:	68 00 00 00 00       	push   0x0	10003b6d: R_386_32	pkeybuf
10003b71:	e8 fc ff ff ff       	call   10003b72 <firstRun(bool)+0x152f>	10003b72: R_386_PC32	checkExtendedKey(char*)
10003b76:	83 c4 10             	add    esp,0x10
10003b79:	85 c0                	test   eax,eax
10003b7b:	0f 95 c0             	setne  al
10003b7e:	88 45 c6             	mov    BYTE PTR [ebp-0x3a],al
10003b81:	c6 45 c6 01          	mov    BYTE PTR [ebp-0x3a],0x1
10003b85:	80 7d c6 00          	cmp    BYTE PTR [ebp-0x3a],0x0
10003b89:	74 5b                	je     10003be6 <firstRun(bool)+0x15a3>
10003b8b:	83 ec 0c             	sub    esp,0xc
10003b8e:	68 f0 0a 00 00       	push   0xaf0
10003b93:	e8 fc ff ff ff       	call   10003b94 <firstRun(bool)+0x1551>	10003b94: R_386_PC32	milliTenthSleep(unsigned int)
10003b98:	83 c4 10             	add    esp,0x10
10003b9b:	e8 fc ff ff ff       	call   10003b9c <firstRun(bool)+0x1559>	10003b9c: R_386_PC32	drawBootScreen()
10003ba0:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10003ba2: R_386_32	installKey
10003ba7:	83 ec 0c             	sub    esp,0xc
10003baa:	68 84 03 00 00       	push   0x384
10003baf:	e8 fc ff ff ff       	call   10003bb0 <firstRun(bool)+0x156d>	10003bb0: R_386_PC32	milliTenthSleep(unsigned int)
10003bb4:	83 c4 10             	add    esp,0x10
10003bb7:	e8 fc ff ff ff       	call   10003bb8 <firstRun(bool)+0x1575>	10003bb8: R_386_PC32	drawBootScreen()
10003bbc:	83 ec 0c             	sub    esp,0xc
10003bbf:	68 c0 12 00 00       	push   0x12c0
10003bc4:	e8 fc ff ff ff       	call   10003bc5 <firstRun(bool)+0x1582>	10003bc5: R_386_PC32	milliTenthSleep(unsigned int)
10003bc9:	83 c4 10             	add    esp,0x10
10003bcc:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10003bce: R_386_32	installKey
10003bd3:	90                   	nop
10003bd4:	80 bd 54 ff ff ff 00 	cmp    BYTE PTR [ebp-0xac],0x0
10003bdb:	0f 84 e8 01 00 00    	je     10003dc9 <firstRun(bool)+0x1786>
10003be1:	e9 d2 02 00 00       	jmp    10003eb8 <firstRun(bool)+0x1875>
10003be6:	83 ec 0c             	sub    esp,0xc
10003be9:	68 f0 0a 00 00       	push   0xaf0
10003bee:	e8 fc ff ff ff       	call   10003bef <firstRun(bool)+0x15ac>	10003bef: R_386_PC32	milliTenthSleep(unsigned int)
10003bf3:	83 c4 10             	add    esp,0x10
10003bf6:	e8 fc ff ff ff       	call   10003bf7 <firstRun(bool)+0x15b4>	10003bf7: R_386_PC32	drawBootScreen()
10003bfb:	83 ec 08             	sub    esp,0x8
10003bfe:	6a 01                	push   0x1
10003c00:	68 c8 4c 00 10       	push   0x10004cc8	10003c01: R_386_32	.text
10003c05:	6a 0e                	push   0xe
10003c07:	6a 32                	push   0x32
10003c09:	6a 02                	push   0x2
10003c0b:	6a 16                	push   0x16
10003c0d:	e8 fc ff ff ff       	call   10003c0e <firstRun(bool)+0x15cb>	10003c0e: R_386_PC32	drawBasicWindowX(int, int, int, int, char const*, bool)
10003c12:	83 c4 20             	add    esp,0x20
10003c15:	a1 00 00 00 00       	mov    eax,ds:0x0	10003c16: R_386_32	term
10003c1a:	83 ec 04             	sub    esp,0x4
10003c1d:	6a 05                	push   0x5
10003c1f:	6a 18                	push   0x18
10003c21:	50                   	push   eax
10003c22:	e8 fc ff ff ff       	call   10003c23 <firstRun(bool)+0x15e0>	10003c23: R_386_PC32	VgaText::setCursor(int, int)
10003c27:	83 c4 10             	add    esp,0x10
10003c2a:	a1 00 00 00 00       	mov    eax,ds:0x0	10003c2b: R_386_32	term
10003c2f:	6a 07                	push   0x7
10003c31:	6a 00                	push   0x0
10003c33:	68 d4 4c 00 10       	push   0x10004cd4	10003c34: R_386_32	.text
10003c38:	50                   	push   eax
10003c39:	e8 fc ff ff ff       	call   10003c3a <firstRun(bool)+0x15f7>	10003c3a: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10003c3e:	83 c4 10             	add    esp,0x10
10003c41:	a1 00 00 00 00       	mov    eax,ds:0x0	10003c42: R_386_32	term
10003c46:	83 ec 04             	sub    esp,0x4
10003c49:	6a 06                	push   0x6
10003c4b:	6a 18                	push   0x18
10003c4d:	50                   	push   eax
10003c4e:	e8 fc ff ff ff       	call   10003c4f <firstRun(bool)+0x160c>	10003c4f: R_386_PC32	VgaText::setCursor(int, int)
10003c53:	83 c4 10             	add    esp,0x10
10003c56:	a1 00 00 00 00       	mov    eax,ds:0x0	10003c57: R_386_32	term
10003c5b:	6a 07                	push   0x7
10003c5d:	6a 00                	push   0x0
10003c5f:	68 dc 4b 00 10       	push   0x10004bdc	10003c60: R_386_32	.text
10003c64:	50                   	push   eax
10003c65:	e8 fc ff ff ff       	call   10003c66 <firstRun(bool)+0x1623>	10003c66: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10003c6a:	83 c4 10             	add    esp,0x10
10003c6d:	a1 00 00 00 00       	mov    eax,ds:0x0	10003c6e: R_386_32	term
10003c72:	83 ec 04             	sub    esp,0x4
10003c75:	6a 08                	push   0x8
10003c77:	6a 1c                	push   0x1c
10003c79:	50                   	push   eax
10003c7a:	e8 fc ff ff ff       	call   10003c7b <firstRun(bool)+0x1638>	10003c7b: R_386_PC32	VgaText::setCursor(int, int)
10003c7f:	83 c4 10             	add    esp,0x10
10003c82:	a1 00 00 00 00       	mov    eax,ds:0x0	10003c83: R_386_32	term
10003c87:	6a 07                	push   0x7
10003c89:	6a 00                	push   0x0
10003c8b:	68 00 00 00 00       	push   0x0	10003c8c: R_386_32	pkeybuf
10003c90:	50                   	push   eax
10003c91:	e8 fc ff ff ff       	call   10003c92 <firstRun(bool)+0x164f>	10003c92: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10003c96:	83 c4 10             	add    esp,0x10
10003c99:	a1 00 00 00 00       	mov    eax,ds:0x0	10003c9a: R_386_32	term
10003c9e:	83 ec 04             	sub    esp,0x4
10003ca1:	6a 08                	push   0x8
10003ca3:	6a 2c                	push   0x2c
10003ca5:	50                   	push   eax
10003ca6:	e8 fc ff ff ff       	call   10003ca7 <firstRun(bool)+0x1664>	10003ca7: R_386_PC32	VgaText::setCursor(int, int)
10003cab:	83 c4 10             	add    esp,0x10
10003cae:	a1 00 00 00 00       	mov    eax,ds:0x0	10003caf: R_386_32	term
10003cb3:	6a 07                	push   0x7
10003cb5:	6a 07                	push   0x7
10003cb7:	6a 20                	push   0x20
10003cb9:	50                   	push   eax
10003cba:	e8 fc ff ff ff       	call   10003cbb <firstRun(bool)+0x1678>	10003cbb: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
10003cbf:	83 c4 10             	add    esp,0x10
10003cc2:	a1 00 00 00 00       	mov    eax,ds:0x0	10003cc3: R_386_32	term
10003cc7:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10003cca:	83 c2 1c             	add    edx,0x1c
10003ccd:	83 ec 04             	sub    esp,0x4
10003cd0:	6a 08                	push   0x8
10003cd2:	52                   	push   edx
10003cd3:	50                   	push   eax
10003cd4:	e8 fc ff ff ff       	call   10003cd5 <firstRun(bool)+0x1692>	10003cd5: R_386_PC32	VgaText::setCursor(int, int)
10003cd9:	83 c4 10             	add    esp,0x10
10003cdc:	83 ec 0c             	sub    esp,0xc
10003cdf:	68 06 4c 00 10       	push   0x10004c06	10003ce0: R_386_32	.text
10003ce4:	6a 0b                	push   0xb
10003ce6:	6a 2b                	push   0x2b
10003ce8:	6a 0a                	push   0xa
10003cea:	6a 22                	push   0x22
10003cec:	e8 fc ff ff ff       	call   10003ced <firstRun(bool)+0x16aa>	10003ced: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
10003cf1:	83 c4 20             	add    esp,0x20
10003cf4:	a1 00 00 00 00       	mov    eax,ds:0x0	10003cf5: R_386_32	term
10003cf9:	83 ec 04             	sub    esp,0x4
10003cfc:	6a 0d                	push   0xd
10003cfe:	6a 24                	push   0x24
10003d00:	50                   	push   eax
10003d01:	e8 fc ff ff ff       	call   10003d02 <firstRun(bool)+0x16bf>	10003d02: R_386_PC32	VgaText::setCursor(int, int)
10003d06:	83 c4 10             	add    esp,0x10
10003d09:	a1 00 00 00 00       	mov    eax,ds:0x0	10003d0a: R_386_32	term
10003d0e:	83 ec 08             	sub    esp,0x8
10003d11:	68 fc 4c 00 10       	push   0x10004cfc	10003d12: R_386_32	.text
10003d16:	50                   	push   eax
10003d17:	e8 fc ff ff ff       	call   10003d18 <firstRun(bool)+0x16d5>	10003d18: R_386_PC32	VgaText::puts(char const*)
10003d1c:	83 c4 10             	add    esp,0x10
10003d1f:	a1 00 00 00 00       	mov    eax,ds:0x0	10003d20: R_386_32	term
10003d24:	83 ec 04             	sub    esp,0x4
10003d27:	6a 0f                	push   0xf
10003d29:	6a 24                	push   0x24
10003d2b:	50                   	push   eax
10003d2c:	e8 fc ff ff ff       	call   10003d2d <firstRun(bool)+0x16ea>	10003d2d: R_386_PC32	VgaText::setCursor(int, int)
10003d31:	83 c4 10             	add    esp,0x10
10003d34:	a1 00 00 00 00       	mov    eax,ds:0x0	10003d35: R_386_32	term
10003d39:	83 ec 08             	sub    esp,0x8
10003d3c:	68 24 4d 00 10       	push   0x10004d24	10003d3d: R_386_32	.text
10003d41:	50                   	push   eax
10003d42:	e8 fc ff ff ff       	call   10003d43 <firstRun(bool)+0x1700>	10003d43: R_386_PC32	VgaText::puts(char const*)
10003d47:	83 c4 10             	add    esp,0x10
10003d4a:	a1 00 00 00 00       	mov    eax,ds:0x0	10003d4b: R_386_32	term
10003d4f:	83 ec 04             	sub    esp,0x4
10003d52:	6a 10                	push   0x10
10003d54:	6a 24                	push   0x24
10003d56:	50                   	push   eax
10003d57:	e8 fc ff ff ff       	call   10003d58 <firstRun(bool)+0x1715>	10003d58: R_386_PC32	VgaText::setCursor(int, int)
10003d5c:	83 c4 10             	add    esp,0x10
10003d5f:	a1 00 00 00 00       	mov    eax,ds:0x0	10003d60: R_386_32	term
10003d64:	83 ec 08             	sub    esp,0x8
10003d67:	68 48 4d 00 10       	push   0x10004d48	10003d68: R_386_32	.text
10003d6c:	50                   	push   eax
10003d6d:	e8 fc ff ff ff       	call   10003d6e <firstRun(bool)+0x172b>	10003d6e: R_386_PC32	VgaText::puts(char const*)
10003d72:	83 c4 10             	add    esp,0x10
10003d75:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10003d77: R_386_32	installKey
10003d7c:	83 ec 0c             	sub    esp,0xc
10003d7f:	68 94 11 00 00       	push   0x1194
10003d84:	e8 fc ff ff ff       	call   10003d85 <firstRun(bool)+0x1742>	10003d85: R_386_PC32	milliTenthSleep(unsigned int)
10003d89:	83 c4 10             	add    esp,0x10
10003d8c:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10003d8e: R_386_32	installKey
10003d93:	a0 00 00 00 00       	mov    al,ds:0x0	10003d94: R_386_32	installKey
10003d98:	84 c0                	test   al,al
10003d9a:	0f 94 c0             	sete   al
10003d9d:	84 c0                	test   al,al
10003d9f:	74 02                	je     10003da3 <firstRun(bool)+0x1760>
10003da1:	eb f0                	jmp    10003d93 <firstRun(bool)+0x1750>
10003da3:	e8 fc ff ff ff       	call   10003da4 <firstRun(bool)+0x1761>	10003da4: R_386_PC32	drawBootScreen()
10003da8:	83 ec 0c             	sub    esp,0xc
10003dab:	68 9c 18 00 00       	push   0x189c
10003db0:	e8 fc ff ff ff       	call   10003db1 <firstRun(bool)+0x176e>	10003db1: R_386_PC32	milliTenthSleep(unsigned int)
10003db5:	83 c4 10             	add    esp,0x10
10003db8:	e9 df fa ff ff       	jmp    1000389c <firstRun(bool)+0x1259>
10003dbd:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10003dbf: R_386_32	installKey
10003dc4:	e9 4d fb ff ff       	jmp    10003916 <firstRun(bool)+0x12d3>
10003dc9:	e8 fc ff ff ff       	call   10003dca <firstRun(bool)+0x1787>	10003dca: R_386_PC32	drawBootScreen()
10003dce:	83 ec 0c             	sub    esp,0xc
10003dd1:	68 69 4d 00 10       	push   0x10004d69	10003dd2: R_386_32	.text
10003dd6:	6a 0d                	push   0xd
10003dd8:	6a 32                	push   0x32
10003dda:	6a 05                	push   0x5
10003ddc:	6a 16                	push   0x16
10003dde:	e8 fc ff ff ff       	call   10003ddf <firstRun(bool)+0x179c>	10003ddf: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
10003de3:	83 c4 20             	add    esp,0x20
10003de6:	83 ec 0c             	sub    esp,0xc
10003de9:	6a 00                	push   0x0
10003deb:	e8 fc ff ff ff       	call   10003dec <firstRun(bool)+0x17a9>	10003dec: R_386_PC32	bootInstallTasks(int)
10003df0:	83 c4 10             	add    esp,0x10
10003df3:	83 ec 04             	sub    esp,0x4
10003df6:	6a 0c                	push   0xc
10003df8:	68 81 4d 00 10       	push   0x10004d81	10003df9: R_386_32	.text
10003dfd:	68 92 4d 00 10       	push   0x10004d92	10003dfe: R_386_32	.text
10003e02:	e8 fc ff ff ff       	call   10003e03 <firstRun(bool)+0x17c0>	10003e03: R_386_PC32	Reg::readIntWithDefault(char*, char*, int)
10003e07:	83 c4 10             	add    esp,0x10
10003e0a:	89 45 c0             	mov    DWORD PTR [ebp-0x40],eax
10003e0d:	83 ec 0c             	sub    esp,0xc
10003e10:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
10003e13:	e8 fc ff ff ff       	call   10003e14 <firstRun(bool)+0x17d1>	10003e14: R_386_PC32	Virt::setupPageSwapping(int)
10003e18:	83 c4 10             	add    esp,0x10
10003e1b:	83 ec 0c             	sub    esp,0xc
10003e1e:	6a 01                	push   0x1
10003e20:	e8 fc ff ff ff       	call   10003e21 <firstRun(bool)+0x17de>	10003e21: R_386_PC32	bootInstallTasks(int)
10003e25:	83 c4 10             	add    esp,0x10
10003e28:	83 ec 0c             	sub    esp,0xc
10003e2b:	68 99 4d 00 10       	push   0x10004d99	10003e2c: R_386_32	.text
10003e30:	e8 fc ff ff ff       	call   10003e31 <firstRun(bool)+0x17ee>	10003e31: R_386_PC32	rmtree(char*)
10003e35:	83 c4 10             	add    esp,0x10
10003e38:	83 ec 0c             	sub    esp,0xc
10003e3b:	68 b3 4d 00 10       	push   0x10004db3	10003e3c: R_386_32	.text
10003e40:	e8 fc ff ff ff       	call   10003e41 <firstRun(bool)+0x17fe>	10003e41: R_386_PC32	rmtree(char*)
10003e45:	83 c4 10             	add    esp,0x10
10003e48:	83 ec 08             	sub    esp,0x8
10003e4b:	68 c0 01 00 00       	push   0x1c0
10003e50:	68 99 4d 00 10       	push   0x10004d99	10003e51: R_386_32	.text
10003e55:	e8 fc ff ff ff       	call   10003e56 <firstRun(bool)+0x1813>	10003e56: R_386_PC32	mkdir(char const*, int)
10003e5a:	83 c4 10             	add    esp,0x10
10003e5d:	83 ec 08             	sub    esp,0x8
10003e60:	68 c0 01 00 00       	push   0x1c0
10003e65:	68 b3 4d 00 10       	push   0x10004db3	10003e66: R_386_32	.text
10003e6a:	e8 fc ff ff ff       	call   10003e6b <firstRun(bool)+0x1828>	10003e6b: R_386_PC32	mkdir(char const*, int)
10003e6f:	83 c4 10             	add    esp,0x10
10003e72:	83 ec 08             	sub    esp,0x8
10003e75:	68 99 4d 00 10       	push   0x10004d99	10003e76: R_386_32	.text
10003e7a:	68 cc 4d 00 10       	push   0x10004dcc	10003e7b: R_386_32	.text
10003e7f:	e8 fc ff ff ff       	call   10003e80 <firstRun(bool)+0x183d>	10003e80: R_386_PC32	copytree(char*, char*)
10003e84:	83 c4 10             	add    esp,0x10
10003e87:	83 ec 0c             	sub    esp,0xc
10003e8a:	6a 02                	push   0x2
10003e8c:	e8 fc ff ff ff       	call   10003e8d <firstRun(bool)+0x184a>	10003e8d: R_386_PC32	bootInstallTasks(int)
10003e91:	83 c4 10             	add    esp,0x10
10003e94:	83 ec 0c             	sub    esp,0xc
10003e97:	68 00 00 00 00       	push   0x0	10003e98: R_386_32	currName
10003e9c:	e8 fc ff ff ff       	call   10003e9d <firstRun(bool)+0x185a>	10003e9d: R_386_PC32	createUser(char const*)
10003ea1:	83 c4 10             	add    esp,0x10
10003ea4:	83 ec 0c             	sub    esp,0xc
10003ea7:	6a 03                	push   0x3
10003ea9:	e8 fc ff ff ff       	call   10003eaa <firstRun(bool)+0x1867>	10003eaa: R_386_PC32	bootInstallTasks(int)
10003eae:	83 c4 10             	add    esp,0x10
10003eb1:	c6 05 00 00 00 00 01 	mov    BYTE PTR ds:0x0,0x1	10003eb3: R_386_32	VgaText::hiddenOut
10003eb8:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
10003ebb:	c9                   	leave  
10003ebc:	c3                   	ret    

10003ebd <loadExtensions()>:
10003ebd:	55                   	push   ebp
10003ebe:	89 e5                	mov    ebp,esp
10003ec0:	83 ec 08             	sub    esp,0x8
10003ec3:	83 ec 0c             	sub    esp,0xc
10003ec6:	68 ed 4d 00 10       	push   0x10004ded	10003ec7: R_386_32	.text
10003ecb:	e8 fc ff ff ff       	call   10003ecc <loadExtensions()+0xf>	10003ecc: R_386_PC32	KeSetBootMessage(char const*)
10003ed0:	83 c4 10             	add    esp,0x10
10003ed3:	90                   	nop
10003ed4:	c9                   	leave  
10003ed5:	c3                   	ret    

10003ed6 <begin(void*)>:
10003ed6:	55                   	push   ebp
10003ed7:	89 e5                	mov    ebp,esp
10003ed9:	57                   	push   edi
10003eda:	56                   	push   esi
10003edb:	53                   	push   ebx
10003edc:	81 ec ac 02 00 00    	sub    esp,0x2ac
10003ee2:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
10003ee6:	83 ec 0c             	sub    esp,0xc
10003ee9:	68 14 01 00 00       	push   0x114
10003eee:	e8 fc ff ff ff       	call   10003eef <begin(void*)+0x19>	10003eef: R_386_PC32	operator new(unsigned long)
10003ef3:	83 c4 10             	add    esp,0x10
10003ef6:	89 c3                	mov    ebx,eax
10003ef8:	a1 00 00 00 00       	mov    eax,ds:0x0	10003ef9: R_386_32	kernelProcess
10003efd:	83 ec 04             	sub    esp,0x4
10003f00:	50                   	push   eax
10003f01:	68 03 4e 00 10       	push   0x10004e03	10003f02: R_386_32	.text
10003f06:	53                   	push   ebx
10003f07:	e8 fc ff ff ff       	call   10003f08 <begin(void*)+0x32>	10003f08: R_386_PC32	File::File(char const*, Process*)
10003f0c:	83 c4 10             	add    esp,0x10
10003f0f:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
10003f12:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
10003f16:	75 10                	jne    10003f28 <begin(void*)+0x52>
10003f18:	83 ec 0c             	sub    esp,0xc
10003f1b:	68 21 4e 00 10       	push   0x10004e21	10003f1c: R_386_32	.text
10003f20:	e8 fc ff ff ff       	call   10003f21 <begin(void*)+0x4b>	10003f21: R_386_PC32	KePanic(char const*)
10003f25:	83 c4 10             	add    esp,0x10
10003f28:	83 ec 08             	sub    esp,0x8
10003f2b:	6a 01                	push   0x1
10003f2d:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10003f30:	e8 fc ff ff ff       	call   10003f31 <begin(void*)+0x5b>	10003f31: R_386_PC32	File::open(FileOpenMode)
10003f35:	83 c4 10             	add    esp,0x10
10003f38:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
10003f3b:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
10003f3f:	75 10                	jne    10003f51 <begin(void*)+0x7b>
10003f41:	83 ec 0c             	sub    esp,0xc
10003f44:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10003f47:	e8 fc ff ff ff       	call   10003f48 <begin(void*)+0x72>	10003f48: R_386_PC32	File::close()
10003f4c:	83 c4 10             	add    esp,0x10
10003f4f:	eb 04                	jmp    10003f55 <begin(void*)+0x7f>
10003f51:	c6 45 e7 01          	mov    BYTE PTR [ebp-0x19],0x1
10003f55:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
10003f59:	74 15                	je     10003f70 <begin(void*)+0x9a>
10003f5b:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10003f5e:	8b 00                	mov    eax,DWORD PTR [eax]
10003f60:	83 c0 08             	add    eax,0x8
10003f63:	8b 00                	mov    eax,DWORD PTR [eax]
10003f65:	83 ec 0c             	sub    esp,0xc
10003f68:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10003f6b:	ff d0                	call   eax
10003f6d:	83 c4 10             	add    esp,0x10
10003f70:	c6 05 00 00 00 00 01 	mov    BYTE PTR ds:0x0,0x1	10003f72: R_386_32	KeIsPreemptionOn
10003f77:	80 7d e7 00          	cmp    BYTE PTR [ebp-0x19],0x0
10003f7b:	74 0f                	je     10003f8c <begin(void*)+0xb6>
10003f7d:	83 ec 0c             	sub    esp,0xc
10003f80:	6a 00                	push   0x0
10003f82:	e8 fc ff ff ff       	call   10003f83 <begin(void*)+0xad>	10003f83: R_386_PC32	firstRun(bool)
10003f87:	83 c4 10             	add    esp,0x10
10003f8a:	eb 05                	jmp    10003f91 <begin(void*)+0xbb>
10003f8c:	e8 fc ff ff ff       	call   10003f8d <begin(void*)+0xb7>	10003f8d: R_386_PC32	loadExtensions()
10003f91:	8d 45 ac             	lea    eax,[ebp-0x54]
10003f94:	bb 38 50 00 10       	mov    ebx,0x10005038	10003f95: R_386_32	.text
10003f99:	ba 04 00 00 00       	mov    edx,0x4
10003f9e:	89 c7                	mov    edi,eax
10003fa0:	89 de                	mov    esi,ebx
10003fa2:	89 d1                	mov    ecx,edx
10003fa4:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10003fa6:	80 7d e7 00          	cmp    BYTE PTR [ebp-0x19],0x0
10003faa:	0f 84 66 04 00 00    	je     10004416 <begin(void*)+0x540>
10003fb0:	83 ec 0c             	sub    esp,0xc
10003fb3:	68 24 07 00 00       	push   0x724
10003fb8:	e8 fc ff ff ff       	call   10003fb9 <begin(void*)+0xe3>	10003fb9: R_386_PC32	operator new(unsigned long)
10003fbd:	83 c4 10             	add    esp,0x10
10003fc0:	89 c3                	mov    ebx,eax
10003fc2:	8d 45 ac             	lea    eax,[ebp-0x54]
10003fc5:	50                   	push   eax
10003fc6:	6a 00                	push   0x0
10003fc8:	68 31 4e 00 10       	push   0x10004e31	10003fc9: R_386_32	.text
10003fcd:	53                   	push   ebx
10003fce:	e8 fc ff ff ff       	call   10003fcf <begin(void*)+0xf9>	10003fcf: R_386_PC32	Process::Process(char const*, Process*, char**)
10003fd3:	83 c4 10             	add    esp,0x10
10003fd6:	89 5d d0             	mov    DWORD PTR [ebp-0x30],ebx
10003fd9:	83 ec 0c             	sub    esp,0xc
10003fdc:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10003fdf:	e8 fc ff ff ff       	call   10003fe0 <begin(void*)+0x10a>	10003fe0: R_386_PC32	Process::createUserThread()
10003fe4:	83 c4 10             	add    esp,0x10
10003fe7:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10003fe9: R_386_32	VgaText::hiddenOut
10003fee:	a1 00 00 00 00       	mov    eax,ds:0x0	10003fef: R_386_32	term
10003ff3:	83 ec 0c             	sub    esp,0xc
10003ff6:	50                   	push   eax
10003ff7:	e8 fc ff ff ff       	call   10003ff8 <begin(void*)+0x122>	10003ff8: R_386_PC32	setActiveTerminal(VgaText*)
10003ffc:	83 c4 10             	add    esp,0x10
10003fff:	e8 fc ff ff ff       	call   10004000 <begin(void*)+0x12a>	10004000: R_386_PC32	drawBootScreen()
10004004:	83 ec 0c             	sub    esp,0xc
10004007:	68 69 4d 00 10       	push   0x10004d69	10004008: R_386_32	.text
1000400c:	6a 0d                	push   0xd
1000400e:	6a 32                	push   0x32
10004010:	6a 05                	push   0x5
10004012:	6a 16                	push   0x16
10004014:	e8 fc ff ff ff       	call   10004015 <begin(void*)+0x13f>	10004015: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
10004019:	83 c4 20             	add    esp,0x20
1000401c:	83 ec 0c             	sub    esp,0xc
1000401f:	6a 03                	push   0x3
10004021:	e8 fc ff ff ff       	call   10004022 <begin(void*)+0x14c>	10004022: R_386_PC32	bootInstallTasks(int)
10004026:	83 c4 10             	add    esp,0x10
10004029:	c6 05 00 00 00 00 01 	mov    BYTE PTR ds:0x0,0x1	1000402b: R_386_32	VgaText::hiddenOut
10004030:	83 ec 0c             	sub    esp,0xc
10004033:	68 14 01 00 00       	push   0x114
10004038:	e8 fc ff ff ff       	call   10004039 <begin(void*)+0x163>	10004039: R_386_PC32	operator new(unsigned long)
1000403d:	83 c4 10             	add    esp,0x10
10004040:	89 c3                	mov    ebx,eax
10004042:	a1 00 00 00 00       	mov    eax,ds:0x0	10004043: R_386_32	kernelProcess
10004047:	83 ec 04             	sub    esp,0x4
1000404a:	50                   	push   eax
1000404b:	68 4e 4e 00 10       	push   0x10004e4e	1000404c: R_386_32	.text
10004050:	53                   	push   ebx
10004051:	e8 fc ff ff ff       	call   10004052 <begin(void*)+0x17c>	10004052: R_386_PC32	File::File(char const*, Process*)
10004056:	83 c4 10             	add    esp,0x10
10004059:	89 5d cc             	mov    DWORD PTR [ebp-0x34],ebx
1000405c:	83 ec 08             	sub    esp,0x8
1000405f:	6a 01                	push   0x1
10004061:	ff 75 cc             	push   DWORD PTR [ebp-0x34]
10004064:	e8 fc ff ff ff       	call   10004065 <begin(void*)+0x18f>	10004065: R_386_PC32	File::open(FileOpenMode)
10004069:	83 c4 10             	add    esp,0x10
1000406c:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
1000406f:	83 7d c8 00          	cmp    DWORD PTR [ebp-0x38],0x0
10004073:	75 39                	jne    100040ae <begin(void*)+0x1d8>
10004075:	83 ec 0c             	sub    esp,0xc
10004078:	ff 75 cc             	push   DWORD PTR [ebp-0x34]
1000407b:	e8 fc ff ff ff       	call   1000407c <begin(void*)+0x1a6>	1000407c: R_386_PC32	File::close()
10004080:	83 c4 10             	add    esp,0x10
10004083:	83 ec 0c             	sub    esp,0xc
10004086:	ff 75 cc             	push   DWORD PTR [ebp-0x34]
10004089:	e8 fc ff ff ff       	call   1000408a <begin(void*)+0x1b4>	1000408a: R_386_PC32	File::unlink()
1000408e:	83 c4 10             	add    esp,0x10
10004091:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
10004095:	74 44                	je     100040db <begin(void*)+0x205>
10004097:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
1000409a:	8b 00                	mov    eax,DWORD PTR [eax]
1000409c:	83 c0 08             	add    eax,0x8
1000409f:	8b 00                	mov    eax,DWORD PTR [eax]
100040a1:	83 ec 0c             	sub    esp,0xc
100040a4:	ff 75 cc             	push   DWORD PTR [ebp-0x34]
100040a7:	ff d0                	call   eax
100040a9:	83 c4 10             	add    esp,0x10
100040ac:	eb 2d                	jmp    100040db <begin(void*)+0x205>
100040ae:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
100040b2:	74 15                	je     100040c9 <begin(void*)+0x1f3>
100040b4:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
100040b7:	8b 00                	mov    eax,DWORD PTR [eax]
100040b9:	83 c0 08             	add    eax,0x8
100040bc:	8b 00                	mov    eax,DWORD PTR [eax]
100040be:	83 ec 0c             	sub    esp,0xc
100040c1:	ff 75 cc             	push   DWORD PTR [ebp-0x34]
100040c4:	ff d0                	call   eax
100040c6:	83 c4 10             	add    esp,0x10
100040c9:	83 ec 0c             	sub    esp,0xc
100040cc:	6a 01                	push   0x1
100040ce:	e8 fc ff ff ff       	call   100040cf <begin(void*)+0x1f9>	100040cf: R_386_PC32	sleep(unsigned int)
100040d3:	83 c4 10             	add    esp,0x10
100040d6:	e9 55 ff ff ff       	jmp    10004030 <begin(void*)+0x15a>
100040db:	90                   	nop
100040dc:	83 ec 0c             	sub    esp,0xc
100040df:	6a 02                	push   0x2
100040e1:	e8 fc ff ff ff       	call   100040e2 <begin(void*)+0x20c>	100040e2: R_386_PC32	sleep(unsigned int)
100040e6:	83 c4 10             	add    esp,0x10
100040e9:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100040eb: R_386_32	VgaText::hiddenOut
100040f0:	a1 00 00 00 00       	mov    eax,ds:0x0	100040f1: R_386_32	term
100040f5:	83 ec 0c             	sub    esp,0xc
100040f8:	50                   	push   eax
100040f9:	e8 fc ff ff ff       	call   100040fa <begin(void*)+0x224>	100040fa: R_386_PC32	setActiveTerminal(VgaText*)
100040fe:	83 c4 10             	add    esp,0x10
10004101:	e8 fc ff ff ff       	call   10004102 <begin(void*)+0x22c>	10004102: R_386_PC32	drawBootScreen()
10004106:	83 ec 0c             	sub    esp,0xc
10004109:	68 69 4d 00 10       	push   0x10004d69	1000410a: R_386_32	.text
1000410e:	6a 0d                	push   0xd
10004110:	6a 32                	push   0x32
10004112:	6a 05                	push   0x5
10004114:	6a 16                	push   0x16
10004116:	e8 fc ff ff ff       	call   10004117 <begin(void*)+0x241>	10004117: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
1000411b:	83 c4 20             	add    esp,0x20
1000411e:	83 ec 0c             	sub    esp,0xc
10004121:	6a 04                	push   0x4
10004123:	e8 fc ff ff ff       	call   10004124 <begin(void*)+0x24e>	10004124: R_386_PC32	bootInstallTasks(int)
10004128:	83 c4 10             	add    esp,0x10
1000412b:	83 ec 08             	sub    esp,0x8
1000412e:	68 dd dd 00 00       	push   0xdddd
10004133:	68 58 4e 00 10       	push   0x10004e58	10004134: R_386_32	.text
10004138:	e8 fc ff ff ff       	call   10004139 <begin(void*)+0x263>	10004139: R_386_PC32	backupTree(char*, unsigned short)
1000413d:	83 c4 10             	add    esp,0x10
10004140:	83 ec 08             	sub    esp,0x8
10004143:	68 ee ee 00 00       	push   0xeeee
10004148:	68 6b 4e 00 10       	push   0x10004e6b	10004149: R_386_32	.text
1000414d:	e8 fc ff ff ff       	call   1000414e <begin(void*)+0x278>	1000414e: R_386_PC32	backupTree(char*, unsigned short)
10004152:	83 c4 10             	add    esp,0x10
10004155:	83 ec 08             	sub    esp,0x8
10004158:	68 ff ff 00 00       	push   0xffff
1000415d:	68 7d 4e 00 10       	push   0x10004e7d	1000415e: R_386_32	.text
10004162:	e8 fc ff ff ff       	call   10004163 <begin(void*)+0x28d>	10004163: R_386_PC32	backupTree(char*, unsigned short)
10004167:	83 c4 10             	add    esp,0x10
1000416a:	83 ec 0c             	sub    esp,0xc
1000416d:	6a 05                	push   0x5
1000416f:	e8 fc ff ff ff       	call   10004170 <begin(void*)+0x29a>	10004170: R_386_PC32	bootInstallTasks(int)
10004174:	83 c4 10             	add    esp,0x10
10004177:	83 ec 0c             	sub    esp,0xc
1000417a:	68 94 4e 00 10       	push   0x10004e94	1000417b: R_386_32	.text
1000417f:	e8 fc ff ff ff       	call   10004180 <begin(void*)+0x2aa>	10004180: R_386_PC32	CmOpen(char const*)
10004184:	83 c4 10             	add    esp,0x10
10004187:	89 45 c4             	mov    DWORD PTR [ebp-0x3c],eax
1000418a:	83 ec 04             	sub    esp,0x4
1000418d:	68 b9 4e 00 10       	push   0x10004eb9	1000418e: R_386_32	.text
10004192:	6a 00                	push   0x0
10004194:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
10004197:	e8 fc ff ff ff       	call   10004198 <begin(void*)+0x2c2>	10004198: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
1000419c:	83 c4 10             	add    esp,0x10
1000419f:	83 ec 08             	sub    esp,0x8
100041a2:	68 b9 4e 00 10       	push   0x10004eb9	100041a3: R_386_32	.text
100041a7:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
100041aa:	e8 fc ff ff ff       	call   100041ab <begin(void*)+0x2d5>	100041ab: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100041af:	83 c4 10             	add    esp,0x10
100041b2:	83 ec 08             	sub    esp,0x8
100041b5:	50                   	push   eax
100041b6:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
100041b9:	e8 fc ff ff ff       	call   100041ba <begin(void*)+0x2e4>	100041ba: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
100041be:	83 c4 10             	add    esp,0x10
100041c1:	83 ec 04             	sub    esp,0x4
100041c4:	68 c0 4e 00 10       	push   0x10004ec0	100041c5: R_386_32	.text
100041c9:	50                   	push   eax
100041ca:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
100041cd:	e8 fc ff ff ff       	call   100041ce <begin(void*)+0x2f8>	100041ce: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
100041d2:	83 c4 10             	add    esp,0x10
100041d5:	83 ec 08             	sub    esp,0x8
100041d8:	68 c6 4e 00 10       	push   0x10004ec6	100041d9: R_386_32	.text
100041dd:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
100041e0:	e8 fc ff ff ff       	call   100041e1 <begin(void*)+0x30b>	100041e1: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100041e5:	83 c4 10             	add    esp,0x10
100041e8:	83 ec 08             	sub    esp,0x8
100041eb:	50                   	push   eax
100041ec:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
100041ef:	e8 fc ff ff ff       	call   100041f0 <begin(void*)+0x31a>	100041f0: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
100041f4:	83 c4 10             	add    esp,0x10
100041f7:	83 ec 04             	sub    esp,0x4
100041fa:	68 d3 4e 00 10       	push   0x10004ed3	100041fb: R_386_32	.text
100041ff:	50                   	push   eax
10004200:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
10004203:	e8 fc ff ff ff       	call   10004204 <begin(void*)+0x32e>	10004204: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
10004208:	83 c4 10             	add    esp,0x10
1000420b:	83 ec 08             	sub    esp,0x8
1000420e:	68 c6 4e 00 10       	push   0x10004ec6	1000420f: R_386_32	.text
10004213:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
10004216:	e8 fc ff ff ff       	call   10004217 <begin(void*)+0x341>	10004217: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
1000421b:	83 c4 10             	add    esp,0x10
1000421e:	83 ec 08             	sub    esp,0x8
10004221:	50                   	push   eax
10004222:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
10004225:	e8 fc ff ff ff       	call   10004226 <begin(void*)+0x350>	10004226: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
1000422a:	83 c4 10             	add    esp,0x10
1000422d:	83 ec 04             	sub    esp,0x4
10004230:	68 d8 4e 00 10       	push   0x10004ed8	10004231: R_386_32	.text
10004235:	50                   	push   eax
10004236:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
10004239:	e8 fc ff ff ff       	call   1000423a <begin(void*)+0x364>	1000423a: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
1000423e:	83 c4 10             	add    esp,0x10
10004241:	83 ec 08             	sub    esp,0x8
10004244:	68 c6 4e 00 10       	push   0x10004ec6	10004245: R_386_32	.text
10004249:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
1000424c:	e8 fc ff ff ff       	call   1000424d <begin(void*)+0x377>	1000424d: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10004251:	83 c4 10             	add    esp,0x10
10004254:	83 ec 08             	sub    esp,0x8
10004257:	50                   	push   eax
10004258:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
1000425b:	e8 fc ff ff ff       	call   1000425c <begin(void*)+0x386>	1000425c: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10004260:	83 c4 10             	add    esp,0x10
10004263:	83 ec 04             	sub    esp,0x4
10004266:	68 e0 4e 00 10       	push   0x10004ee0	10004267: R_386_32	.text
1000426b:	50                   	push   eax
1000426c:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
1000426f:	e8 fc ff ff ff       	call   10004270 <begin(void*)+0x39a>	10004270: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
10004274:	83 c4 10             	add    esp,0x10
10004277:	83 ec 08             	sub    esp,0x8
1000427a:	68 eb 4e 00 10       	push   0x10004eeb	1000427b: R_386_32	.text
1000427f:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
10004282:	e8 fc ff ff ff       	call   10004283 <begin(void*)+0x3ad>	10004283: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10004287:	83 c4 10             	add    esp,0x10
1000428a:	83 ec 04             	sub    esp,0x4
1000428d:	68 00 00 00 00       	push   0x0	1000428e: R_386_32	currName
10004292:	50                   	push   eax
10004293:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
10004296:	e8 fc ff ff ff       	call   10004297 <begin(void*)+0x3c1>	10004297: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
1000429b:	83 c4 10             	add    esp,0x10
1000429e:	83 ec 08             	sub    esp,0x8
100042a1:	68 fd 4e 00 10       	push   0x10004efd	100042a2: R_386_32	.text
100042a6:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
100042a9:	e8 fc ff ff ff       	call   100042aa <begin(void*)+0x3d4>	100042aa: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100042ae:	83 c4 10             	add    esp,0x10
100042b1:	83 ec 04             	sub    esp,0x4
100042b4:	68 00 00 00 00       	push   0x0	100042b5: R_386_32	currComp
100042b9:	50                   	push   eax
100042ba:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
100042bd:	e8 fc ff ff ff       	call   100042be <begin(void*)+0x3e8>	100042be: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
100042c2:	83 c4 10             	add    esp,0x10
100042c5:	83 ec 08             	sub    esp,0x8
100042c8:	68 12 4f 00 10       	push   0x10004f12	100042c9: R_386_32	.text
100042cd:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
100042d0:	e8 fc ff ff ff       	call   100042d1 <begin(void*)+0x3fb>	100042d1: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100042d5:	83 c4 10             	add    esp,0x10
100042d8:	83 ec 04             	sub    esp,0x4
100042db:	68 00 00 00 00       	push   0x0	100042dc: R_386_32	pkeybuf
100042e0:	50                   	push   eax
100042e1:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
100042e4:	e8 fc ff ff ff       	call   100042e5 <begin(void*)+0x40f>	100042e5: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
100042e9:	83 c4 10             	add    esp,0x10
100042ec:	83 ec 0c             	sub    esp,0xc
100042ef:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
100042f2:	e8 fc ff ff ff       	call   100042f3 <begin(void*)+0x41d>	100042f3: R_386_PC32	CmClose(Reghive_Tag*)
100042f7:	83 c4 10             	add    esp,0x10
100042fa:	a1 00 00 00 00       	mov    eax,ds:0x0	100042fb: R_386_32	term
100042ff:	83 ec 0c             	sub    esp,0xc
10004302:	50                   	push   eax
10004303:	e8 fc ff ff ff       	call   10004304 <begin(void*)+0x42e>	10004304: R_386_PC32	setActiveTerminal(VgaText*)
10004308:	83 c4 10             	add    esp,0x10
1000430b:	e8 fc ff ff ff       	call   1000430c <begin(void*)+0x436>	1000430c: R_386_PC32	drawBootScreen()
10004310:	83 ec 0c             	sub    esp,0xc
10004313:	68 69 4d 00 10       	push   0x10004d69	10004314: R_386_32	.text
10004318:	6a 0d                	push   0xd
1000431a:	6a 32                	push   0x32
1000431c:	6a 05                	push   0x5
1000431e:	6a 16                	push   0x16
10004320:	e8 fc ff ff ff       	call   10004321 <begin(void*)+0x44b>	10004321: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
10004325:	83 c4 20             	add    esp,0x20
10004328:	a1 00 00 00 00       	mov    eax,ds:0x0	10004329: R_386_32	term
1000432d:	83 ec 04             	sub    esp,0x4
10004330:	6a 08                	push   0x8
10004332:	6a 18                	push   0x18
10004334:	50                   	push   eax
10004335:	e8 fc ff ff ff       	call   10004336 <begin(void*)+0x460>	10004336: R_386_PC32	VgaText::setCursor(int, int)
1000433a:	83 c4 10             	add    esp,0x10
1000433d:	a1 00 00 00 00       	mov    eax,ds:0x0	1000433e: R_386_32	term
10004342:	83 ec 08             	sub    esp,0x8
10004345:	68 2c 4f 00 10       	push   0x10004f2c	10004346: R_386_32	.text
1000434a:	50                   	push   eax
1000434b:	e8 fc ff ff ff       	call   1000434c <begin(void*)+0x476>	1000434c: R_386_PC32	VgaText::puts(char const*)
10004350:	83 c4 10             	add    esp,0x10
10004353:	a1 00 00 00 00       	mov    eax,ds:0x0	10004354: R_386_32	term
10004358:	83 ec 04             	sub    esp,0x4
1000435b:	6a 0a                	push   0xa
1000435d:	6a 18                	push   0x18
1000435f:	50                   	push   eax
10004360:	e8 fc ff ff ff       	call   10004361 <begin(void*)+0x48b>	10004361: R_386_PC32	VgaText::setCursor(int, int)
10004365:	83 c4 10             	add    esp,0x10
10004368:	a1 00 00 00 00       	mov    eax,ds:0x0	10004369: R_386_32	term
1000436d:	83 ec 08             	sub    esp,0x8
10004370:	68 54 4f 00 10       	push   0x10004f54	10004371: R_386_32	.text
10004375:	50                   	push   eax
10004376:	e8 fc ff ff ff       	call   10004377 <begin(void*)+0x4a1>	10004377: R_386_PC32	VgaText::puts(char const*)
1000437b:	83 c4 10             	add    esp,0x10
1000437e:	a1 00 00 00 00       	mov    eax,ds:0x0	1000437f: R_386_32	term
10004383:	83 ec 04             	sub    esp,0x4
10004386:	6a 0b                	push   0xb
10004388:	6a 18                	push   0x18
1000438a:	50                   	push   eax
1000438b:	e8 fc ff ff ff       	call   1000438c <begin(void*)+0x4b6>	1000438c: R_386_PC32	VgaText::setCursor(int, int)
10004390:	83 c4 10             	add    esp,0x10
10004393:	a1 00 00 00 00       	mov    eax,ds:0x0	10004394: R_386_32	term
10004398:	83 ec 08             	sub    esp,0x8
1000439b:	68 80 4f 00 10       	push   0x10004f80	1000439c: R_386_32	.text
100043a0:	50                   	push   eax
100043a1:	e8 fc ff ff ff       	call   100043a2 <begin(void*)+0x4cc>	100043a2: R_386_PC32	VgaText::puts(char const*)
100043a6:	83 c4 10             	add    esp,0x10
100043a9:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100043ab: R_386_32	installKey
100043b0:	a0 00 00 00 00       	mov    al,ds:0x0	100043b1: R_386_32	installKey
100043b5:	84 c0                	test   al,al
100043b7:	0f 94 c0             	sete   al
100043ba:	84 c0                	test   al,al
100043bc:	74 02                	je     100043c0 <begin(void*)+0x4ea>
100043be:	eb f0                	jmp    100043b0 <begin(void*)+0x4da>
100043c0:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100043c2: R_386_32	installKey
100043c7:	a1 00 00 00 00       	mov    eax,ds:0x0	100043c8: R_386_32	term
100043cc:	83 ec 04             	sub    esp,0x4
100043cf:	6a 0c                	push   0xc
100043d1:	6a 18                	push   0x18
100043d3:	50                   	push   eax
100043d4:	e8 fc ff ff ff       	call   100043d5 <begin(void*)+0x4ff>	100043d5: R_386_PC32	VgaText::setCursor(int, int)
100043d9:	83 c4 10             	add    esp,0x10
100043dc:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	100043de: R_386_32	Krnl::computer
100043e2:	a1 00 00 00 00       	mov    eax,ds:0x0	100043e3: R_386_32	Krnl::computer
100043e7:	8b 00                	mov    eax,DWORD PTR [eax]
100043e9:	83 c0 0c             	add    eax,0xc
100043ec:	8b 00                	mov    eax,DWORD PTR [eax]
100043ee:	6a 00                	push   0x0
100043f0:	6a 00                	push   0x0
100043f2:	6a 01                	push   0x1
100043f4:	52                   	push   edx
100043f5:	ff d0                	call   eax
100043f7:	83 c4 10             	add    esp,0x10
100043fa:	a1 00 00 00 00       	mov    eax,ds:0x0	100043fb: R_386_32	term
100043ff:	6a 0f                	push   0xf
10004401:	6a 0c                	push   0xc
10004403:	68 94 4f 00 10       	push   0x10004f94	10004404: R_386_32	.text
10004408:	50                   	push   eax
10004409:	e8 fc ff ff ff       	call   1000440a <begin(void*)+0x534>	1000440a: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
1000440e:	83 c4 10             	add    esp,0x10
10004411:	e9 f0 03 00 00       	jmp    10004806 <begin(void*)+0x930>
10004416:	83 ec 0c             	sub    esp,0xc
10004419:	68 94 4e 00 10       	push   0x10004e94	1000441a: R_386_32	.text
1000441e:	e8 fc ff ff ff       	call   1000441f <begin(void*)+0x549>	1000441f: R_386_PC32	CmOpen(char const*)
10004423:	83 c4 10             	add    esp,0x10
10004426:	89 45 c0             	mov    DWORD PTR [ebp-0x40],eax
10004429:	83 ec 08             	sub    esp,0x8
1000442c:	68 12 4f 00 10       	push   0x10004f12	1000442d: R_386_32	.text
10004431:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
10004434:	e8 fc ff ff ff       	call   10004435 <begin(void*)+0x55f>	10004435: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10004439:	83 c4 10             	add    esp,0x10
1000443c:	83 ec 04             	sub    esp,0x4
1000443f:	8d 95 50 fd ff ff    	lea    edx,[ebp-0x2b0]
10004445:	52                   	push   edx
10004446:	50                   	push   eax
10004447:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
1000444a:	e8 fc ff ff ff       	call   1000444b <begin(void*)+0x575>	1000444b: R_386_PC32	CmGetString(Reghive_Tag*, int, char*)
1000444f:	83 c4 10             	add    esp,0x10
10004452:	83 ec 0c             	sub    esp,0xc
10004455:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
10004458:	e8 fc ff ff ff       	call   10004459 <begin(void*)+0x583>	10004459: R_386_PC32	CmClose(Reghive_Tag*)
1000445d:	83 c4 10             	add    esp,0x10
10004460:	83 ec 0c             	sub    esp,0xc
10004463:	8d 85 50 fd ff ff    	lea    eax,[ebp-0x2b0]
10004469:	50                   	push   eax
1000446a:	e8 fc ff ff ff       	call   1000446b <begin(void*)+0x595>	1000446b: R_386_PC32	checkExtendedKey(char*)
1000446f:	83 c4 10             	add    esp,0x10
10004472:	85 c0                	test   eax,eax
10004474:	0f 94 c0             	sete   al
10004477:	84 c0                	test   al,al
10004479:	0f 84 a7 02 00 00    	je     10004726 <begin(void*)+0x850>
1000447f:	83 ec 0c             	sub    esp,0xc
10004482:	6a 01                	push   0x1
10004484:	e8 fc ff ff ff       	call   10004485 <begin(void*)+0x5af>	10004485: R_386_PC32	firstRun(bool)
10004489:	83 c4 10             	add    esp,0x10
1000448c:	83 ec 0c             	sub    esp,0xc
1000448f:	68 94 4e 00 10       	push   0x10004e94	10004490: R_386_32	.text
10004494:	e8 fc ff ff ff       	call   10004495 <begin(void*)+0x5bf>	10004495: R_386_PC32	CmOpen(char const*)
10004499:	83 c4 10             	add    esp,0x10
1000449c:	89 45 c0             	mov    DWORD PTR [ebp-0x40],eax
1000449f:	83 ec 04             	sub    esp,0x4
100044a2:	68 b9 4e 00 10       	push   0x10004eb9	100044a3: R_386_32	.text
100044a7:	6a 00                	push   0x0
100044a9:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
100044ac:	e8 fc ff ff ff       	call   100044ad <begin(void*)+0x5d7>	100044ad: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
100044b1:	83 c4 10             	add    esp,0x10
100044b4:	83 ec 08             	sub    esp,0x8
100044b7:	68 b9 4e 00 10       	push   0x10004eb9	100044b8: R_386_32	.text
100044bc:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
100044bf:	e8 fc ff ff ff       	call   100044c0 <begin(void*)+0x5ea>	100044c0: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100044c4:	83 c4 10             	add    esp,0x10
100044c7:	83 ec 08             	sub    esp,0x8
100044ca:	50                   	push   eax
100044cb:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
100044ce:	e8 fc ff ff ff       	call   100044cf <begin(void*)+0x5f9>	100044cf: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
100044d3:	83 c4 10             	add    esp,0x10
100044d6:	83 ec 04             	sub    esp,0x4
100044d9:	68 c0 4e 00 10       	push   0x10004ec0	100044da: R_386_32	.text
100044de:	50                   	push   eax
100044df:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
100044e2:	e8 fc ff ff ff       	call   100044e3 <begin(void*)+0x60d>	100044e3: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
100044e7:	83 c4 10             	add    esp,0x10
100044ea:	83 ec 08             	sub    esp,0x8
100044ed:	68 c6 4e 00 10       	push   0x10004ec6	100044ee: R_386_32	.text
100044f2:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
100044f5:	e8 fc ff ff ff       	call   100044f6 <begin(void*)+0x620>	100044f6: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100044fa:	83 c4 10             	add    esp,0x10
100044fd:	83 ec 08             	sub    esp,0x8
10004500:	50                   	push   eax
10004501:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
10004504:	e8 fc ff ff ff       	call   10004505 <begin(void*)+0x62f>	10004505: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10004509:	83 c4 10             	add    esp,0x10
1000450c:	83 ec 04             	sub    esp,0x4
1000450f:	68 d3 4e 00 10       	push   0x10004ed3	10004510: R_386_32	.text
10004514:	50                   	push   eax
10004515:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
10004518:	e8 fc ff ff ff       	call   10004519 <begin(void*)+0x643>	10004519: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
1000451d:	83 c4 10             	add    esp,0x10
10004520:	83 ec 08             	sub    esp,0x8
10004523:	68 c6 4e 00 10       	push   0x10004ec6	10004524: R_386_32	.text
10004528:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
1000452b:	e8 fc ff ff ff       	call   1000452c <begin(void*)+0x656>	1000452c: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10004530:	83 c4 10             	add    esp,0x10
10004533:	83 ec 08             	sub    esp,0x8
10004536:	50                   	push   eax
10004537:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
1000453a:	e8 fc ff ff ff       	call   1000453b <begin(void*)+0x665>	1000453b: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
1000453f:	83 c4 10             	add    esp,0x10
10004542:	83 ec 04             	sub    esp,0x4
10004545:	68 d8 4e 00 10       	push   0x10004ed8	10004546: R_386_32	.text
1000454a:	50                   	push   eax
1000454b:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
1000454e:	e8 fc ff ff ff       	call   1000454f <begin(void*)+0x679>	1000454f: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
10004553:	83 c4 10             	add    esp,0x10
10004556:	83 ec 08             	sub    esp,0x8
10004559:	68 c6 4e 00 10       	push   0x10004ec6	1000455a: R_386_32	.text
1000455e:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
10004561:	e8 fc ff ff ff       	call   10004562 <begin(void*)+0x68c>	10004562: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10004566:	83 c4 10             	add    esp,0x10
10004569:	83 ec 08             	sub    esp,0x8
1000456c:	50                   	push   eax
1000456d:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
10004570:	e8 fc ff ff ff       	call   10004571 <begin(void*)+0x69b>	10004571: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10004575:	83 c4 10             	add    esp,0x10
10004578:	83 ec 04             	sub    esp,0x4
1000457b:	68 e0 4e 00 10       	push   0x10004ee0	1000457c: R_386_32	.text
10004580:	50                   	push   eax
10004581:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
10004584:	e8 fc ff ff ff       	call   10004585 <begin(void*)+0x6af>	10004585: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
10004589:	83 c4 10             	add    esp,0x10
1000458c:	83 ec 08             	sub    esp,0x8
1000458f:	68 eb 4e 00 10       	push   0x10004eeb	10004590: R_386_32	.text
10004594:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
10004597:	e8 fc ff ff ff       	call   10004598 <begin(void*)+0x6c2>	10004598: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
1000459c:	83 c4 10             	add    esp,0x10
1000459f:	83 ec 04             	sub    esp,0x4
100045a2:	68 00 00 00 00       	push   0x0	100045a3: R_386_32	currName
100045a7:	50                   	push   eax
100045a8:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
100045ab:	e8 fc ff ff ff       	call   100045ac <begin(void*)+0x6d6>	100045ac: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
100045b0:	83 c4 10             	add    esp,0x10
100045b3:	83 ec 08             	sub    esp,0x8
100045b6:	68 fd 4e 00 10       	push   0x10004efd	100045b7: R_386_32	.text
100045bb:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
100045be:	e8 fc ff ff ff       	call   100045bf <begin(void*)+0x6e9>	100045bf: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100045c3:	83 c4 10             	add    esp,0x10
100045c6:	83 ec 04             	sub    esp,0x4
100045c9:	68 00 00 00 00       	push   0x0	100045ca: R_386_32	currComp
100045ce:	50                   	push   eax
100045cf:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
100045d2:	e8 fc ff ff ff       	call   100045d3 <begin(void*)+0x6fd>	100045d3: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
100045d7:	83 c4 10             	add    esp,0x10
100045da:	83 ec 08             	sub    esp,0x8
100045dd:	68 12 4f 00 10       	push   0x10004f12	100045de: R_386_32	.text
100045e2:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
100045e5:	e8 fc ff ff ff       	call   100045e6 <begin(void*)+0x710>	100045e6: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100045ea:	83 c4 10             	add    esp,0x10
100045ed:	83 ec 04             	sub    esp,0x4
100045f0:	68 00 00 00 00       	push   0x0	100045f1: R_386_32	pkeybuf
100045f5:	50                   	push   eax
100045f6:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
100045f9:	e8 fc ff ff ff       	call   100045fa <begin(void*)+0x724>	100045fa: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
100045fe:	83 c4 10             	add    esp,0x10
10004601:	83 ec 0c             	sub    esp,0xc
10004604:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
10004607:	e8 fc ff ff ff       	call   10004608 <begin(void*)+0x732>	10004608: R_386_PC32	CmClose(Reghive_Tag*)
1000460c:	83 c4 10             	add    esp,0x10
1000460f:	a1 00 00 00 00       	mov    eax,ds:0x0	10004610: R_386_32	term
10004614:	83 ec 0c             	sub    esp,0xc
10004617:	50                   	push   eax
10004618:	e8 fc ff ff ff       	call   10004619 <begin(void*)+0x743>	10004619: R_386_PC32	setActiveTerminal(VgaText*)
1000461d:	83 c4 10             	add    esp,0x10
10004620:	e8 fc ff ff ff       	call   10004621 <begin(void*)+0x74b>	10004621: R_386_PC32	drawBootScreen()
10004625:	83 ec 0c             	sub    esp,0xc
10004628:	68 ba 4f 00 10       	push   0x10004fba	10004629: R_386_32	.text
1000462d:	6a 0d                	push   0xd
1000462f:	6a 32                	push   0x32
10004631:	6a 05                	push   0x5
10004633:	6a 16                	push   0x16
10004635:	e8 fc ff ff ff       	call   10004636 <begin(void*)+0x760>	10004636: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
1000463a:	83 c4 20             	add    esp,0x20
1000463d:	a1 00 00 00 00       	mov    eax,ds:0x0	1000463e: R_386_32	term
10004642:	83 ec 04             	sub    esp,0x4
10004645:	6a 08                	push   0x8
10004647:	6a 18                	push   0x18
10004649:	50                   	push   eax
1000464a:	e8 fc ff ff ff       	call   1000464b <begin(void*)+0x775>	1000464b: R_386_PC32	VgaText::setCursor(int, int)
1000464f:	83 c4 10             	add    esp,0x10
10004652:	a1 00 00 00 00       	mov    eax,ds:0x0	10004653: R_386_32	term
10004657:	83 ec 08             	sub    esp,0x8
1000465a:	68 d0 4f 00 10       	push   0x10004fd0	1000465b: R_386_32	.text
1000465f:	50                   	push   eax
10004660:	e8 fc ff ff ff       	call   10004661 <begin(void*)+0x78b>	10004661: R_386_PC32	VgaText::puts(char const*)
10004665:	83 c4 10             	add    esp,0x10
10004668:	a1 00 00 00 00       	mov    eax,ds:0x0	10004669: R_386_32	term
1000466d:	83 ec 04             	sub    esp,0x4
10004670:	6a 0a                	push   0xa
10004672:	6a 18                	push   0x18
10004674:	50                   	push   eax
10004675:	e8 fc ff ff ff       	call   10004676 <begin(void*)+0x7a0>	10004676: R_386_PC32	VgaText::setCursor(int, int)
1000467a:	83 c4 10             	add    esp,0x10
1000467d:	a1 00 00 00 00       	mov    eax,ds:0x0	1000467e: R_386_32	term
10004682:	83 ec 08             	sub    esp,0x8
10004685:	68 54 4f 00 10       	push   0x10004f54	10004686: R_386_32	.text
1000468a:	50                   	push   eax
1000468b:	e8 fc ff ff ff       	call   1000468c <begin(void*)+0x7b6>	1000468c: R_386_PC32	VgaText::puts(char const*)
10004690:	83 c4 10             	add    esp,0x10
10004693:	a1 00 00 00 00       	mov    eax,ds:0x0	10004694: R_386_32	term
10004698:	83 ec 04             	sub    esp,0x4
1000469b:	6a 0b                	push   0xb
1000469d:	6a 18                	push   0x18
1000469f:	50                   	push   eax
100046a0:	e8 fc ff ff ff       	call   100046a1 <begin(void*)+0x7cb>	100046a1: R_386_PC32	VgaText::setCursor(int, int)
100046a5:	83 c4 10             	add    esp,0x10
100046a8:	a1 00 00 00 00       	mov    eax,ds:0x0	100046a9: R_386_32	term
100046ad:	83 ec 08             	sub    esp,0x8
100046b0:	68 80 4f 00 10       	push   0x10004f80	100046b1: R_386_32	.text
100046b5:	50                   	push   eax
100046b6:	e8 fc ff ff ff       	call   100046b7 <begin(void*)+0x7e1>	100046b7: R_386_PC32	VgaText::puts(char const*)
100046bb:	83 c4 10             	add    esp,0x10
100046be:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100046c0: R_386_32	installKey
100046c5:	a0 00 00 00 00       	mov    al,ds:0x0	100046c6: R_386_32	installKey
100046ca:	84 c0                	test   al,al
100046cc:	0f 94 c0             	sete   al
100046cf:	84 c0                	test   al,al
100046d1:	74 02                	je     100046d5 <begin(void*)+0x7ff>
100046d3:	eb f0                	jmp    100046c5 <begin(void*)+0x7ef>
100046d5:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100046d7: R_386_32	installKey
100046dc:	a1 00 00 00 00       	mov    eax,ds:0x0	100046dd: R_386_32	term
100046e1:	83 ec 04             	sub    esp,0x4
100046e4:	6a 0c                	push   0xc
100046e6:	6a 18                	push   0x18
100046e8:	50                   	push   eax
100046e9:	e8 fc ff ff ff       	call   100046ea <begin(void*)+0x814>	100046ea: R_386_PC32	VgaText::setCursor(int, int)
100046ee:	83 c4 10             	add    esp,0x10
100046f1:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	100046f3: R_386_32	Krnl::computer
100046f7:	a1 00 00 00 00       	mov    eax,ds:0x0	100046f8: R_386_32	Krnl::computer
100046fc:	8b 00                	mov    eax,DWORD PTR [eax]
100046fe:	83 c0 0c             	add    eax,0xc
10004701:	8b 00                	mov    eax,DWORD PTR [eax]
10004703:	6a 00                	push   0x0
10004705:	6a 00                	push   0x0
10004707:	6a 01                	push   0x1
10004709:	52                   	push   edx
1000470a:	ff d0                	call   eax
1000470c:	83 c4 10             	add    esp,0x10
1000470f:	a1 00 00 00 00       	mov    eax,ds:0x0	10004710: R_386_32	term
10004714:	6a 0f                	push   0xf
10004716:	6a 0c                	push   0xc
10004718:	68 94 4f 00 10       	push   0x10004f94	10004719: R_386_32	.text
1000471d:	50                   	push   eax
1000471e:	e8 fc ff ff ff       	call   1000471f <begin(void*)+0x849>	1000471f: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10004723:	83 c4 10             	add    esp,0x10
10004726:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10004728: R_386_32	VgaText::hiddenOut
1000472d:	83 ec 0c             	sub    esp,0xc
10004730:	68 24 07 00 00       	push   0x724
10004735:	e8 fc ff ff ff       	call   10004736 <begin(void*)+0x860>	10004736: R_386_PC32	operator new(unsigned long)
1000473a:	83 c4 10             	add    esp,0x10
1000473d:	89 c3                	mov    ebx,eax
1000473f:	6a 00                	push   0x0
10004741:	6a 00                	push   0x0
10004743:	68 31 4e 00 10       	push   0x10004e31	10004744: R_386_32	.text
10004748:	53                   	push   ebx
10004749:	e8 fc ff ff ff       	call   1000474a <begin(void*)+0x874>	1000474a: R_386_PC32	Process::Process(char const*, Process*, char**)
1000474e:	83 c4 10             	add    esp,0x10
10004751:	89 5d d0             	mov    DWORD PTR [ebp-0x30],ebx
10004754:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
10004757:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
1000475d:	83 ec 0c             	sub    esp,0xc
10004760:	50                   	push   eax
10004761:	e8 fc ff ff ff       	call   10004762 <begin(void*)+0x88c>	10004762: R_386_PC32	setActiveTerminal(VgaText*)
10004766:	83 c4 10             	add    esp,0x10
10004769:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
10004770:	83 7d e0 18          	cmp    DWORD PTR [ebp-0x20],0x18
10004774:	7f 2e                	jg     100047a4 <begin(void*)+0x8ce>
10004776:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
1000477d:	83 7d dc 4f          	cmp    DWORD PTR [ebp-0x24],0x4f
10004781:	7f 1c                	jg     1000479f <begin(void*)+0x8c9>
10004783:	83 ec 0c             	sub    esp,0xc
10004786:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
10004789:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
1000478c:	6a 00                	push   0x0
1000478e:	6a 07                	push   0x7
10004790:	6a 20                	push   0x20
10004792:	e8 fc ff ff ff       	call   10004793 <begin(void*)+0x8bd>	10004793: R_386_PC32	HalConsoleWriteCharacter(char, int, int, int, int)
10004797:	83 c4 20             	add    esp,0x20
1000479a:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
1000479d:	eb de                	jmp    1000477d <begin(void*)+0x8a7>
1000479f:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
100047a2:	eb cc                	jmp    10004770 <begin(void*)+0x89a>
100047a4:	83 ec 0c             	sub    esp,0xc
100047a7:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
100047aa:	e8 fc ff ff ff       	call   100047ab <begin(void*)+0x8d5>	100047ab: R_386_PC32	Process::createUserThread()
100047af:	83 c4 10             	add    esp,0x10
100047b2:	83 ec 04             	sub    esp,0x4
100047b5:	6a 00                	push   0x0
100047b7:	68 f4 4f 00 10       	push   0x10004ff4	100047b8: R_386_32	.text
100047bc:	68 fc 4f 00 10       	push   0x10004ffc	100047bd: R_386_32	.text
100047c1:	e8 fc ff ff ff       	call   100047c2 <begin(void*)+0x8ec>	100047c2: R_386_PC32	Reg::readIntWithDefault(char*, char*, int)
100047c6:	83 c4 10             	add    esp,0x10
100047c9:	89 45 bc             	mov    DWORD PTR [ebp-0x44],eax
100047cc:	83 7d bc 00          	cmp    DWORD PTR [ebp-0x44],0x0
100047d0:	74 1d                	je     100047ef <begin(void*)+0x919>
100047d2:	83 ec 0c             	sub    esp,0xc
100047d5:	68 02 50 00 10       	push   0x10005002	100047d6: R_386_32	.text
100047da:	e8 fc ff ff ff       	call   100047db <begin(void*)+0x905>	100047db: R_386_PC32	Dbg::kprintf(char const*, ...)
100047df:	83 c4 10             	add    esp,0x10
100047e2:	83 ec 0c             	sub    esp,0xc
100047e5:	6a 00                	push   0x0
100047e7:	e8 fc ff ff ff       	call   100047e8 <begin(void*)+0x912>	100047e8: R_386_PC32	startGUIVESA(void*)
100047ec:	83 c4 10             	add    esp,0x10
100047ef:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
100047f2:	8b 00                	mov    eax,DWORD PTR [eax]
100047f4:	83 ec 04             	sub    esp,0x4
100047f7:	6a 00                	push   0x0
100047f9:	8d 55 a8             	lea    edx,[ebp-0x58]
100047fc:	52                   	push   edx
100047fd:	50                   	push   eax
100047fe:	e8 fc ff ff ff       	call   100047ff <begin(void*)+0x929>	100047ff: R_386_PC32	waitTask(int, int*, int)
10004803:	83 c4 10             	add    esp,0x10
10004806:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10004808: R_386_32	Krnl::computer
1000480c:	a1 00 00 00 00       	mov    eax,ds:0x0	1000480d: R_386_32	Krnl::computer
10004811:	8b 00                	mov    eax,DWORD PTR [eax]
10004813:	83 c0 0c             	add    eax,0xc
10004816:	8b 00                	mov    eax,DWORD PTR [eax]
10004818:	6a 00                	push   0x0
1000481a:	6a 00                	push   0x0
1000481c:	6a 00                	push   0x0
1000481e:	52                   	push   edx
1000481f:	ff d0                	call   eax
10004821:	83 c4 10             	add    esp,0x10
10004824:	83 ec 0c             	sub    esp,0xc
10004827:	68 0d 50 00 10       	push   0x1000500d	10004828: R_386_32	.text
1000482c:	e8 fc ff ff ff       	call   1000482d <begin(void*)+0x957>	1000482d: R_386_PC32	KePanic(char const*)
10004831:	83 c4 10             	add    esp,0x10
10004834:	eb fe                	jmp    10004834 <begin(void*)+0x95e>
10004836:	66 90                	xchg   ax,ax

10004838 <TERMINAL_KEYBUFFER_IN_SIZE>:
10004838:	80 00 00 00                                         ....

1000483c <TERMINAL_KEYBUFFER_OUT_SIZE>:
1000483c:	80 00 00 00 2e 00 2e 2e 00 2f 00 43 6f 75 6c 64     ........./.Could
1000484c:	6e 27 74 20 6f 70 65 6e 20 62 61 73 65 20 70 61     n't open base pa
1000485c:	74 68 2e 0a 00 25 73 20 2d 3e 20 25 73 0a 00 43     th...%s -> %s..C
1000486c:	4f 55 4c 44 20 4e 4f 54 20 43 52 45 41 54 45 00     OULD NOT CREATE.
1000487c:	43 4f 55 4c 44 20 4e 4f 54 20 43 4f 50 59 00 4e     COULD NOT COPY.N
1000488c:	4f 20 4d 45 4d 4f 52 59 00 42 61 63 6b 75 70 00     O MEMORY.Backup.
1000489c:	43 3a 2f 42 61 6e 61 6e 61 2f 53 79 73 74 65 6d     C:/Banana/System
100048ac:	2f 42 61 63 6b 75 70 2f 00 30 31 32 33 34 35 36     /Backup/.0123456
100048bc:	37 38 39 41 42 43 44 45 46 00 43 3a 2f 55 73 65     789ABCDEF.C:/Use
100048cc:	72 73 2f 00 2f 44 65 73 6b 74 6f 70 00 2f 44 6f     rs/./Desktop./Do
100048dc:	63 75 6d 65 6e 74 73 00 2f 44 6f 77 6e 6c 6f 61     cuments./Downloa
100048ec:	64 73 00 2f 50 68 6f 74 6f 73 00 2f 54 72 61 73     ds./Photos./Tras
100048fc:	68 20 42 69 6e 00 2f 4d 75 73 69 63 00 2f 4d 6f     h Bin./Music./Mo
1000490c:	76 69 65 73 00 43 3a 2f 42 61 6e 61 6e 61 2f 52     vies.C:/Banana/R
1000491c:	65 67 69 73 74 72 79 2f 55 73 65 72 2f 00 00 00     egistry/User/...
1000492c:	43 3a 2f 42 61 6e 61 6e 61 2f 52 65 67 69 73 74     C:/Banana/Regist
1000493c:	72 79 2f 44 65 66 61 75 6c 74 55 73 65 72 00 00     ry/DefaultUser..
1000494c:	43 68 65 63 6b 69 6e 67 0a 20 73 79 73 74 65 6d     Checking. system
1000495c:	0a 20 72 65 71 75 69 72 65 6d 65 6e 74 73 0a 0a     . requirements..
1000496c:	20 4c 65 67 61 6c 0a 20 6e 6f 74 69 63 65 73 0a      Legal. notices.
1000497c:	0a 20 43 68 6f 6f 73 69 6e 67 20 61 0a 20 70 61     . Choosing a. pa
1000498c:	72 74 69 74 69 6f 6e 0a 0a 20 46 6f 72 6d 61 74     rtition.. Format
1000499c:	74 69 6e 67 0a 0a 20 43 6f 70 79 69 6e 67 20 66     ting.. Copying f
100049ac:	69 6c 65 73 0a 0a 20 52 65 73 74 61 72 74 69 6e     iles.. Restartin
100049bc:	67 0a 20 79 6f 75 72 20 63 6f 6d 70 75 74 65 72     g. your computer
100049cc:	0a 0a 00 20 46 69 6e 61 6c 69 73 69 6e 67 20 74     ... Finalising t
100049dc:	68 65 0a 20 69 6e 73 74 61 6c 6c 61 74 69 6f 6e     he. installation
100049ec:	00 00 00 00 50 6c 65 61 73 65 20 77 61 69 74 20     ....Please wait 
100049fc:	77 68 69 6c 65 20 74 68 65 20 69 6e 73 74 61 6c     while the instal
10004a0c:	6c 20 66 69 6e 69 73 68 65 73 2e 00 10 20 00 20     l finishes... . 
10004a1c:	20 00 41 6c 6c 6f 63 61 74 69 6e 67 20 74 68 65      .Allocating the
10004a2c:	20 73 77 61 70 66 69 6c 65 00 55 70 64 61 74 69      swapfile.Updati
10004a3c:	6e 67 20 74 68 65 20 72 65 67 69 73 74 72 79 00     ng the registry.
10004a4c:	43 72 65 61 74 69 6e 67 20 75 73 65 72 20 61 63     Creating user ac
10004a5c:	63 6f 75 6e 74 00 49 6e 73 74 61 6c 6c 69 6e 67     count.Installing
10004a6c:	20 70 61 63 6b 61 67 65 73 00 42 61 63 6b 69 6e      packages.Backin
10004a7c:	67 20 75 70 20 73 79 73 74 65 6d 20 66 69 6c 65     g up system file
10004a8c:	73 00 46 69 6e 69 73 68 69 6e 67 20 74 6f 75 63     s.Finishing touc
10004a9c:	68 65 73 00 51 51 2d 30 30 30 2d 30 30 30 2d 30     hes.QQ-000-000-0
10004aac:	30 30 2d 51 00 00 00 00 53 65 74 74 69 6e 67 20     00-Q....Setting 
10004abc:	75 70 20 74 68 65 20 73 79 73 74 65 6d 20 66 6f     up the system fo
10004acc:	72 20 74 68 65 20 66 69 72 73 74 20 74 69 6d 65     r the first time
10004adc:	00 0a 0a 0a 0a 0a 0a 00 54 65 73 74 00 42 61 6e     ........Test.Ban
10004aec:	61 6e 61 20 53 65 74 75 70 00 00 00 50 6c 65 61     ana Setup...Plea
10004afc:	73 65 20 65 6e 74 65 72 20 79 6f 75 72 20 64 65     se enter your de
10004b0c:	74 61 69 6c 73 2e 20 50 72 65 73 73 20 54 41 42     tails. Press TAB
10004b1c:	20 74 6f 20 73 77 69 74 63 68 00 62 65 74 77 65      to switch.betwe
10004b2c:	65 6e 20 66 69 65 6c 64 73 2e 00 4e 61 6d 65 00     en fields..Name.
10004b3c:	43 6f 6d 70 61 6e 79 00 20 20 20 20 20 20 20 20     Company.        
10004b4c:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
10004b5c:	20 00 20 20 11 00 20 20 20 00 50 72 65 73 73 20      .  ..   .Press 
10004b6c:	45 4e 54 45 52 00 20 20 20 20 20 20 20 20 20 20     ENTER.          
10004b7c:	20 00 74 6f 20 73 75 62 6d 69 74 00 20 20 20 4f      .to submit.   O
10004b8c:	4b 20 20 20 00 44 61 74 65 20 61 6e 64 20 54 69     K   .Date and Ti
10004b9c:	6d 65 00 31 34 2f 30 35 2f 32 30 32 31 20 31 38     me.14/05/2021 18
10004bac:	3a 35 35 3a 30 30 00 00 50 6c 65 61 73 65 20 65     :55:00..Please e
10004bbc:	6e 74 65 72 20 74 68 65 20 63 75 72 72 65 6e 74     nter the current
10004bcc:	20 64 61 74 65 20 61 6e 64 20 74 69 6d 65 2c 00      date and time,.
10004bdc:	61 6e 64 20 74 68 65 6e 20 70 72 65 73 73 20 45     and then press E
10004bec:	4e 54 45 52 2e 00 44 44 2f 4d 4d 2f 59 59 59 59     NTER..DD/MM/YYYY
10004bfc:	20 48 48 3a 4d 4d 3a 53 53 00 49 6e 76 61 6c 69      HH:MM:SS.Invali
10004c0c:	64 20 50 72 6f 64 75 63 74 20 4b 65 79 00 00 00     d Product Key...
10004c1c:	59 6f 75 20 64 6f 20 6e 6f 74 20 68 61 76 65 20     You do not have 
10004c2c:	61 20 76 61 6c 69 64 20 70 72 6f 64 75 63 74 20     a valid product 
10004c3c:	6b 65 79 2e 0a 00 00 00 59 6f 75 20 6e 65 65 64     key.....You need
10004c4c:	20 61 20 76 61 6c 69 64 20 70 72 6f 64 75 63 74      a valid product
10004c5c:	20 6b 65 79 20 69 6e 20 6f 72 64 65 72 20 74 6f      key in order to
10004c6c:	00 75 73 65 20 42 61 6e 61 6e 61 2e 00 00 00 00     .use Banana.....
10004c7c:	50 72 65 73 73 20 45 4e 54 45 52 20 74 6f 20 72     Press ENTER to r
10004c8c:	65 2d 65 6e 74 65 72 20 79 6f 75 72 20 70 72 6f     e-enter your pro
10004c9c:	64 75 63 74 20 6b 65 79 2e 00 41 41 2d 30 30 30     duct key..AA-000
10004cac:	30 30 2d 30 30 30 30 30 2d 41 00 57 57 2d 37 38     00-00000-A.WW-78
10004cbc:	33 38 38 2d 34 35 35 35 35 2d 4e 00 50 72 6f 64     388-45555-N.Prod
10004ccc:	75 63 74 20 4b 65 79 00 50 6c 65 61 73 65 20 65     uct Key.Please e
10004cdc:	6e 74 65 72 20 79 6f 75 72 20 70 72 6f 64 75 63     nter your produc
10004cec:	74 20 6b 65 79 20 62 65 6c 6f 77 2c 00 00 00 00     t key below,....
10004cfc:	54 68 65 20 65 6e 74 65 72 65 64 20 70 72 6f 64     The entered prod
10004d0c:	75 63 74 20 6b 65 79 20 77 61 73 20 69 6e 76 61     uct key was inva
10004d1c:	6c 69 64 2e 00 00 00 00 50 72 65 73 73 20 61 6e     lid.....Press an
10004d2c:	79 20 6b 65 79 20 74 6f 20 63 6f 6e 74 69 6e 75     y key to continu
10004d3c:	65 20 61 6e 64 20 74 68 65 6e 00 00 65 6e 74 65     e and then..ente
10004d4c:	72 20 74 68 65 20 70 72 6f 64 75 63 74 20 6b 65     r the product ke
10004d5c:	79 20 63 6f 72 72 65 63 74 6c 79 2e 00 46 69 6e     y correctly..Fin
10004d6c:	61 6c 69 73 69 6e 67 20 49 6e 73 74 61 6c 6c 61     alising Installa
10004d7c:	74 69 6f 6e 00 40 6d 65 6d 6f 72 79 3a 73 77 61     tion.@memory:swa
10004d8c:	70 66 69 6c 65 00 73 79 73 74 65 6d 00 43 3a 2f     pfile.system.C:/
10004d9c:	42 61 6e 61 6e 61 2f 52 65 67 69 73 74 72 79 2f     Banana/Registry/
10004dac:	53 79 73 74 65 6d 00 43 3a 2f 42 61 6e 61 6e 61     System.C:/Banana
10004dbc:	2f 52 65 67 69 73 74 72 79 2f 55 73 65 72 00 00     /Registry/User..
10004dcc:	43 3a 2f 42 61 6e 61 6e 61 2f 52 65 67 69 73 74     C:/Banana/Regist
10004ddc:	72 79 2f 44 65 66 61 75 6c 74 53 79 73 74 65 6d     ry/DefaultSystem
10004dec:	00 4c 6f 61 64 69 6e 67 20 65 78 74 65 6e 73 69     .Loading extensi
10004dfc:	6f 6e 73 2e 2e 2e 00 43 3a 2f 42 61 6e 61 6e 61     ons....C:/Banana
10004e0c:	2f 53 79 73 74 65 6d 2f 73 65 74 75 70 69 73 64     /System/setupisd
10004e1c:	2e 6f 6e 65 00 53 59 53 49 4e 49 54 20 46 41 49     .one.SYSINIT FAI
10004e2c:	4c 55 52 45 00 43 3a 2f 42 61 6e 61 6e 61 2f 53     LURE.C:/Banana/S
10004e3c:	79 73 74 65 6d 2f 63 6f 6d 6d 61 6e 64 2e 65 78     ystem/command.ex
10004e4c:	65 00 43 3a 2f 44 45 2e 42 55 47 00 43 3a 2f 42     e.C:/DE.BUG.C:/B
10004e5c:	61 6e 61 6e 61 2f 44 72 69 76 65 72 73 2f 00 43     anana/Drivers/.C
10004e6c:	3a 2f 42 61 6e 61 6e 61 2f 53 79 73 74 65 6d 2f     :/Banana/System/
10004e7c:	00 43 3a 2f 42 61 6e 61 6e 61 2f 52 65 67 69 73     .C:/Banana/Regis
10004e8c:	74 72 79 2f 00 00 00 00 43 3a 2f 42 61 6e 61 6e     try/....C:/Banan
10004e9c:	61 2f 52 65 67 69 73 74 72 79 2f 53 79 73 74 65     a/Registry/Syste
10004eac:	6d 2f 53 59 53 54 45 4d 2e 52 45 47 00 42 41 4e     m/SYSTEM.REG.BAN
10004ebc:	41 4e 41 00 53 45 54 55 50 00 42 41 4e 41 4e 41     ANA.SETUP.BANANA
10004ecc:	2f 53 45 54 55 50 00 4e 41 4d 45 00 43 4f 4d 50     /SETUP.NAME.COMP
10004edc:	41 4e 59 00 50 52 4f 44 55 43 54 4b 45 59 00 42     ANY.PRODUCTKEY.B
10004eec:	41 4e 41 4e 41 2f 53 45 54 55 50 2f 4e 41 4d 45     ANANA/SETUP/NAME
10004efc:	00 42 41 4e 41 4e 41 2f 53 45 54 55 50 2f 43 4f     .BANANA/SETUP/CO
10004f0c:	4d 50 41 4e 59 00 42 41 4e 41 4e 41 2f 53 45 54     MPANY.BANANA/SET
10004f1c:	55 50 2f 50 52 4f 44 55 43 54 4b 45 59 00 00 00     UP/PRODUCTKEY...
10004f2c:	54 68 65 20 69 6e 73 74 61 6c 6c 61 74 69 6f 6e     The installation
10004f3c:	20 68 61 73 20 62 65 65 6e 20 63 6f 6d 70 6c 65      has been comple
10004f4c:	74 65 64 2e 0a 00 00 00 50 6c 65 61 73 65 20 70     ted.....Please p
10004f5c:	72 65 73 73 20 45 4e 54 45 52 20 74 6f 20 72 65     ress ENTER to re
10004f6c:	73 74 61 72 74 20 79 6f 75 72 20 63 6f 6d 70 75     start your compu
10004f7c:	74 65 72 00 61 6e 64 20 73 74 61 72 74 20 42 61     ter.and start Ba
10004f8c:	6e 61 6e 61 2e 00 00 00 50 4c 45 41 53 45 20 4d     nana....PLEASE M
10004f9c:	41 4e 55 41 4c 4c 59 20 52 45 53 54 41 52 54 20     ANUALLY RESTART 
10004fac:	59 4f 55 52 20 43 4f 4d 50 55 54 45 52 00 50 72     YOUR COMPUTER.Pr
10004fbc:	6f 64 75 63 74 20 4b 65 79 20 55 70 64 61 74 65     oduct Key Update
10004fcc:	64 00 00 00 59 6f 75 72 20 70 72 6f 64 75 63 74     d...Your product
10004fdc:	20 6b 65 79 20 68 61 73 20 62 65 65 6e 20 75 70      key has been up
10004fec:	64 61 74 65 64 2e 0a 00 61 75 74 6f 67 75 69 00     dated...autogui.
10004ffc:	73 68 65 6c 6c 00 41 55 54 4f 20 47 55 49 2e 0a     shell.AUTO GUI..
1000500c:	00 54 55 52 4e 20 4f 46 46 20 50 43 00 63 61 6c     .TURN OFF PC.cal
1000501c:	6c 00 43 3a 2f 42 61 6e 61 6e 61 2f 53 79 73 74     l.C:/Banana/Syst
1000502c:	65 6d 2f 69 6e 69 74 2e 62 61 74 00 31 4e 00 10     em/init.bat.1N..	10005038: R_386_32	.text
1000503c:	19 50 00 10 1e 50 00 10 00 00 00 00                 .P...P......	1000503c: R_386_32	.text
	10005040: R_386_32	.text
