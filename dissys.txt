
packages/system/32/0001/system.dll:     file format elf32-i386


Disassembly of section .text:

10000000 <beginx(void*)>:
10000000:	55                   	push   ebp
10000001:	89 e5                	mov    ebp,esp
10000003:	83 ec 08             	sub    esp,0x8
10000006:	83 ec 0c             	sub    esp,0xc
10000009:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000000c:	e8 fc ff ff ff       	call   1000000d <beginx(void*)+0xd>	1000000d: R_386_PC32	begin(void*)
10000011:	83 c4 10             	add    esp,0x10
10000014:	90                   	nop
10000015:	c9                   	leave  
10000016:	c3                   	ret    

10000017 <memcmp(void*, void*, unsigned long)>:
10000017:	55                   	push   ebp
10000018:	89 e5                	mov    ebp,esp
1000001a:	83 ec 10             	sub    esp,0x10
1000001d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000020:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
10000023:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000026:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
10000029:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
1000002c:	8d 50 ff             	lea    edx,[eax-0x1]
1000002f:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
10000032:	85 c0                	test   eax,eax
10000034:	74 12                	je     10000048 <memcmp(void*, void*, unsigned long)+0x31>
10000036:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000039:	8a 10                	mov    dl,BYTE PTR [eax]
1000003b:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
1000003e:	8a 00                	mov    al,BYTE PTR [eax]
10000040:	38 c2                	cmp    dl,al
10000042:	75 04                	jne    10000048 <memcmp(void*, void*, unsigned long)+0x31>
10000044:	b0 01                	mov    al,0x1
10000046:	eb 02                	jmp    1000004a <memcmp(void*, void*, unsigned long)+0x33>
10000048:	b0 00                	mov    al,0x0
1000004a:	84 c0                	test   al,al
1000004c:	74 08                	je     10000056 <memcmp(void*, void*, unsigned long)+0x3f>
1000004e:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
10000051:	ff 45 f8             	inc    DWORD PTR [ebp-0x8]
10000054:	eb d3                	jmp    10000029 <memcmp(void*, void*, unsigned long)+0x12>
10000056:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000059:	8a 00                	mov    al,BYTE PTR [eax]
1000005b:	0f b6 d0             	movzx  edx,al
1000005e:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
10000061:	8a 00                	mov    al,BYTE PTR [eax]
10000063:	0f b6 c0             	movzx  eax,al
10000066:	29 c2                	sub    edx,eax
10000068:	89 d0                	mov    eax,edx
1000006a:	c9                   	leave  
1000006b:	c3                   	ret    

1000006c <memmove>:
1000006c:	55                   	push   ebp
1000006d:	89 e5                	mov    ebp,esp
1000006f:	83 ec 10             	sub    esp,0x10
10000072:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000075:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
10000078:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
1000007b:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
1000007e:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
10000081:	3b 45 fc             	cmp    eax,DWORD PTR [ebp-0x4]
10000084:	76 1b                	jbe    100000a1 <memmove+0x35>
10000086:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
1000008a:	74 46                	je     100000d2 <memmove+0x66>
1000008c:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
1000008f:	8a 10                	mov    dl,BYTE PTR [eax]
10000091:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000094:	88 10                	mov    BYTE PTR [eax],dl
10000096:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
10000099:	ff 45 f8             	inc    DWORD PTR [ebp-0x8]
1000009c:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
1000009f:	eb e5                	jmp    10000086 <memmove+0x1a>
100000a1:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
100000a4:	3b 45 fc             	cmp    eax,DWORD PTR [ebp-0x4]
100000a7:	73 29                	jae    100000d2 <memmove+0x66>
100000a9:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
100000ac:	48                   	dec    eax
100000ad:	01 45 fc             	add    DWORD PTR [ebp-0x4],eax
100000b0:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
100000b3:	48                   	dec    eax
100000b4:	01 45 f8             	add    DWORD PTR [ebp-0x8],eax
100000b7:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
100000bb:	74 15                	je     100000d2 <memmove+0x66>
100000bd:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
100000c0:	8a 10                	mov    dl,BYTE PTR [eax]
100000c2:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100000c5:	88 10                	mov    BYTE PTR [eax],dl
100000c7:	ff 4d fc             	dec    DWORD PTR [ebp-0x4]
100000ca:	ff 4d f8             	dec    DWORD PTR [ebp-0x8]
100000cd:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
100000d0:	eb e5                	jmp    100000b7 <memmove+0x4b>
100000d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100000d5:	c9                   	leave  
100000d6:	c3                   	ret    

100000d7 <memset>:
100000d7:	55                   	push   ebp
100000d8:	89 e5                	mov    ebp,esp
100000da:	83 ec 10             	sub    esp,0x10
100000dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100000e0:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
100000e3:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
100000e7:	74 12                	je     100000fb <memset+0x24>
100000e9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100000ec:	88 c2                	mov    dl,al
100000ee:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100000f1:	88 10                	mov    BYTE PTR [eax],dl
100000f3:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
100000f6:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
100000f9:	eb e8                	jmp    100000e3 <memset+0xc>
100000fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100000fe:	c9                   	leave  
100000ff:	c3                   	ret    

10000100 <strlen>:
10000100:	55                   	push   ebp
10000101:	89 e5                	mov    ebp,esp
10000103:	83 ec 10             	sub    esp,0x10
10000106:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
1000010d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000110:	8a 00                	mov    al,BYTE PTR [eax]
10000112:	84 c0                	test   al,al
10000114:	74 0c                	je     10000122 <strlen+0x22>
10000116:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000119:	40                   	inc    eax
1000011a:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
1000011d:	ff 45 08             	inc    DWORD PTR [ebp+0x8]
10000120:	eb eb                	jmp    1000010d <strlen+0xd>
10000122:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000125:	c9                   	leave  
10000126:	c3                   	ret    

10000127 <strpbrk(char const*, char const*)>:
10000127:	55                   	push   ebp
10000128:	89 e5                	mov    ebp,esp
1000012a:	83 ec 10             	sub    esp,0x10
1000012d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000130:	8a 00                	mov    al,BYTE PTR [eax]
10000132:	84 c0                	test   al,al
10000134:	74 30                	je     10000166 <strpbrk(char const*, char const*)+0x3f>
10000136:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000139:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
1000013c:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000013f:	8a 00                	mov    al,BYTE PTR [eax]
10000141:	84 c0                	test   al,al
10000143:	74 18                	je     1000015d <strpbrk(char const*, char const*)+0x36>
10000145:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000148:	8a 10                	mov    dl,BYTE PTR [eax]
1000014a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000014d:	8a 00                	mov    al,BYTE PTR [eax]
1000014f:	38 c2                	cmp    dl,al
10000151:	75 05                	jne    10000158 <strpbrk(char const*, char const*)+0x31>
10000153:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000156:	eb 13                	jmp    1000016b <strpbrk(char const*, char const*)+0x44>
10000158:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
1000015b:	eb df                	jmp    1000013c <strpbrk(char const*, char const*)+0x15>
1000015d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000160:	40                   	inc    eax
10000161:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
10000164:	eb c7                	jmp    1000012d <strpbrk(char const*, char const*)+0x6>
10000166:	b8 00 00 00 00       	mov    eax,0x0
1000016b:	c9                   	leave  
1000016c:	c3                   	ret    

1000016d <strtok>:
1000016d:	55                   	push   ebp
1000016e:	89 e5                	mov    ebp,esp
10000170:	83 ec 10             	sub    esp,0x10
10000173:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000176:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
10000179:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000017c:	85 c0                	test   eax,eax
1000017e:	75 18                	jne    10000198 <strtok+0x2b>
10000180:	a1 00 00 00 00       	mov    eax,ds:0x0	10000181: R_386_32	SavedPtr
10000185:	85 c0                	test   eax,eax
10000187:	75 07                	jne    10000190 <strtok+0x23>
10000189:	b8 00 00 00 00       	mov    eax,0x0
1000018e:	eb 6f                	jmp    100001ff <strtok+0x92>
10000190:	a1 00 00 00 00       	mov    eax,ds:0x0	10000191: R_386_32	SavedPtr
10000195:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
10000198:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000019b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
1000019e:	50                   	push   eax
1000019f:	e8 fc ff ff ff       	call   100001a0 <strtok+0x33>	100001a0: R_386_PC32	strpbrk(char const*, char const*)
100001a4:	83 c4 08             	add    esp,0x8
100001a7:	a3 00 00 00 00       	mov    ds:0x0,eax	100001a8: R_386_32	SavedPtr
100001ac:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	100001ae: R_386_32	SavedPtr
100001b2:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100001b5:	39 c2                	cmp    edx,eax
100001b7:	75 22                	jne    100001db <strtok+0x6e>
100001b9:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100001bc:	8d 50 01             	lea    edx,[eax+0x1]
100001bf:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
100001c2:	c6 00 00             	mov    BYTE PTR [eax],0x0
100001c5:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100001c8:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
100001cb:	50                   	push   eax
100001cc:	e8 fc ff ff ff       	call   100001cd <strtok+0x60>	100001cd: R_386_PC32	strpbrk(char const*, char const*)
100001d1:	83 c4 08             	add    esp,0x8
100001d4:	a3 00 00 00 00       	mov    ds:0x0,eax	100001d5: R_386_32	SavedPtr
100001d9:	eb d1                	jmp    100001ac <strtok+0x3f>
100001db:	a1 00 00 00 00       	mov    eax,ds:0x0	100001dc: R_386_32	SavedPtr
100001e0:	85 c0                	test   eax,eax
100001e2:	74 16                	je     100001fa <strtok+0x8d>
100001e4:	a1 00 00 00 00       	mov    eax,ds:0x0	100001e5: R_386_32	SavedPtr
100001e9:	8d 50 01             	lea    edx,[eax+0x1]
100001ec:	89 15 00 00 00 00    	mov    DWORD PTR ds:0x0,edx	100001ee: R_386_32	SavedPtr
100001f2:	c6 00 00             	mov    BYTE PTR [eax],0x0
100001f5:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100001f8:	eb 05                	jmp    100001ff <strtok+0x92>
100001fa:	b8 00 00 00 00       	mov    eax,0x0
100001ff:	c9                   	leave  
10000200:	c3                   	ret    

10000201 <strcpy>:
10000201:	55                   	push   ebp
10000202:	89 e5                	mov    ebp,esp
10000204:	83 ec 10             	sub    esp,0x10
10000207:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000020a:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
1000020d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000210:	8a 00                	mov    al,BYTE PTR [eax]
10000212:	84 c0                	test   al,al
10000214:	74 12                	je     10000228 <strcpy+0x27>
10000216:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000219:	8a 10                	mov    dl,BYTE PTR [eax]
1000021b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000021e:	88 10                	mov    BYTE PTR [eax],dl
10000220:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
10000223:	ff 45 0c             	inc    DWORD PTR [ebp+0xc]
10000226:	eb e5                	jmp    1000020d <strcpy+0xc>
10000228:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000022b:	c6 00 00             	mov    BYTE PTR [eax],0x0
1000022e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000231:	c9                   	leave  
10000232:	c3                   	ret    

10000233 <strncpyxx(char*, char const*, unsigned long)>:
10000233:	55                   	push   ebp
10000234:	89 e5                	mov    ebp,esp
10000236:	83 ec 10             	sub    esp,0x10
10000239:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000023c:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
1000023f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000242:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
10000245:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
10000249:	74 23                	je     1000026e <strncpyxx(char*, char const*, unsigned long)+0x3b>
1000024b:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
1000024e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10000251:	8d 42 01             	lea    eax,[edx+0x1]
10000254:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
10000257:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000025a:	8d 48 01             	lea    ecx,[eax+0x1]
1000025d:	89 4d fc             	mov    DWORD PTR [ebp-0x4],ecx
10000260:	8a 12                	mov    dl,BYTE PTR [edx]
10000262:	88 10                	mov    BYTE PTR [eax],dl
10000264:	8a 00                	mov    al,BYTE PTR [eax]
10000266:	84 c0                	test   al,al
10000268:	74 04                	je     1000026e <strncpyxx(char*, char const*, unsigned long)+0x3b>
1000026a:	b0 01                	mov    al,0x1
1000026c:	eb 02                	jmp    10000270 <strncpyxx(char*, char const*, unsigned long)+0x3d>
1000026e:	b0 00                	mov    al,0x0
10000270:	84 c0                	test   al,al
10000272:	74 02                	je     10000276 <strncpyxx(char*, char const*, unsigned long)+0x43>
10000274:	eb cf                	jmp    10000245 <strncpyxx(char*, char const*, unsigned long)+0x12>
10000276:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
10000279:	8d 50 ff             	lea    edx,[eax-0x1]
1000027c:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
1000027f:	85 c0                	test   eax,eax
10000281:	0f 95 c0             	setne  al
10000284:	84 c0                	test   al,al
10000286:	74 0b                	je     10000293 <strncpyxx(char*, char const*, unsigned long)+0x60>
10000288:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000028b:	c6 00 00             	mov    BYTE PTR [eax],0x0
1000028e:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
10000291:	eb e3                	jmp    10000276 <strncpyxx(char*, char const*, unsigned long)+0x43>
10000293:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000296:	c9                   	leave  
10000297:	c3                   	ret    

10000298 <strcmp>:
10000298:	55                   	push   ebp
10000299:	89 e5                	mov    ebp,esp
1000029b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000029e:	8a 10                	mov    dl,BYTE PTR [eax]
100002a0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100002a3:	8a 00                	mov    al,BYTE PTR [eax]
100002a5:	38 c2                	cmp    dl,al
100002a7:	75 20                	jne    100002c9 <strcmp+0x31>
100002a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002ac:	8d 50 01             	lea    edx,[eax+0x1]
100002af:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
100002b2:	8a 00                	mov    al,BYTE PTR [eax]
100002b4:	84 c0                	test   al,al
100002b6:	0f 94 c0             	sete   al
100002b9:	84 c0                	test   al,al
100002bb:	74 07                	je     100002c4 <strcmp+0x2c>
100002bd:	b8 00 00 00 00       	mov    eax,0x0
100002c2:	eb 19                	jmp    100002dd <strcmp+0x45>
100002c4:	ff 45 0c             	inc    DWORD PTR [ebp+0xc]
100002c7:	eb d2                	jmp    1000029b <strcmp+0x3>
100002c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002cc:	8a 00                	mov    al,BYTE PTR [eax]
100002ce:	0f b6 d0             	movzx  edx,al
100002d1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100002d4:	8a 00                	mov    al,BYTE PTR [eax]
100002d6:	0f b6 c0             	movzx  eax,al
100002d9:	29 c2                	sub    edx,eax
100002db:	89 d0                	mov    eax,edx
100002dd:	5d                   	pop    ebp
100002de:	c3                   	ret    

100002df <strchr(char const*, int)>:
100002df:	55                   	push   ebp
100002e0:	89 e5                	mov    ebp,esp
100002e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002e5:	8a 00                	mov    al,BYTE PTR [eax]
100002e7:	84 c0                	test   al,al
100002e9:	74 16                	je     10000301 <strchr(char const*, int)+0x22>
100002eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002ee:	8a 00                	mov    al,BYTE PTR [eax]
100002f0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
100002f3:	38 d0                	cmp    al,dl
100002f5:	75 05                	jne    100002fc <strchr(char const*, int)+0x1d>
100002f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002fa:	eb 0a                	jmp    10000306 <strchr(char const*, int)+0x27>
100002fc:	ff 45 08             	inc    DWORD PTR [ebp+0x8]
100002ff:	eb e1                	jmp    100002e2 <strchr(char const*, int)+0x3>
10000301:	b8 00 00 00 00       	mov    eax,0x0
10000306:	5d                   	pop    ebp
10000307:	c3                   	ret    

10000308 <strncmp>:
10000308:	55                   	push   ebp
10000309:	89 e5                	mov    ebp,esp
1000030b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
1000030e:	8d 50 ff             	lea    edx,[eax-0x1]
10000311:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
10000314:	85 c0                	test   eax,eax
10000316:	74 12                	je     1000032a <strncmp+0x22>
10000318:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000031b:	8a 10                	mov    dl,BYTE PTR [eax]
1000031d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000320:	8a 00                	mov    al,BYTE PTR [eax]
10000322:	38 c2                	cmp    dl,al
10000324:	75 04                	jne    1000032a <strncmp+0x22>
10000326:	b0 01                	mov    al,0x1
10000328:	eb 02                	jmp    1000032c <strncmp+0x24>
1000032a:	b0 00                	mov    al,0x0
1000032c:	84 c0                	test   al,al
1000032e:	74 20                	je     10000350 <strncmp+0x48>
10000330:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000333:	8d 50 01             	lea    edx,[eax+0x1]
10000336:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
10000339:	8a 00                	mov    al,BYTE PTR [eax]
1000033b:	84 c0                	test   al,al
1000033d:	0f 94 c0             	sete   al
10000340:	84 c0                	test   al,al
10000342:	74 07                	je     1000034b <strncmp+0x43>
10000344:	b8 00 00 00 00       	mov    eax,0x0
10000349:	eb 19                	jmp    10000364 <strncmp+0x5c>
1000034b:	ff 45 0c             	inc    DWORD PTR [ebp+0xc]
1000034e:	eb bb                	jmp    1000030b <strncmp+0x3>
10000350:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000353:	8a 00                	mov    al,BYTE PTR [eax]
10000355:	0f b6 d0             	movzx  edx,al
10000358:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
1000035b:	8a 00                	mov    al,BYTE PTR [eax]
1000035d:	0f b6 c0             	movzx  eax,al
10000360:	29 c2                	sub    edx,eax
10000362:	89 d0                	mov    eax,edx
10000364:	5d                   	pop    ebp
10000365:	c3                   	ret    

10000366 <strcat>:
10000366:	55                   	push   ebp
10000367:	89 e5                	mov    ebp,esp
10000369:	83 ec 10             	sub    esp,0x10
1000036c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000036f:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
10000372:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000375:	8d 50 01             	lea    edx,[eax+0x1]
10000378:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
1000037b:	8a 00                	mov    al,BYTE PTR [eax]
1000037d:	84 c0                	test   al,al
1000037f:	0f 95 c0             	setne  al
10000382:	84 c0                	test   al,al
10000384:	74 02                	je     10000388 <strcat+0x22>
10000386:	eb ea                	jmp    10000372 <strcat+0xc>
10000388:	ff 4d fc             	dec    DWORD PTR [ebp-0x4]
1000038b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
1000038e:	8d 42 01             	lea    eax,[edx+0x1]
10000391:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
10000394:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000397:	8d 48 01             	lea    ecx,[eax+0x1]
1000039a:	89 4d fc             	mov    DWORD PTR [ebp-0x4],ecx
1000039d:	8a 12                	mov    dl,BYTE PTR [edx]
1000039f:	88 10                	mov    BYTE PTR [eax],dl
100003a1:	8a 00                	mov    al,BYTE PTR [eax]
100003a3:	84 c0                	test   al,al
100003a5:	0f 95 c0             	setne  al
100003a8:	84 c0                	test   al,al
100003aa:	74 02                	je     100003ae <strcat+0x48>
100003ac:	eb dd                	jmp    1000038b <strcat+0x25>
100003ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100003b1:	c9                   	leave  
100003b2:	c3                   	ret    

100003b3 <strncat(char*, char const*, unsigned long)>:
100003b3:	55                   	push   ebp
100003b4:	89 e5                	mov    ebp,esp
100003b6:	83 ec 10             	sub    esp,0x10
100003b9:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
100003bd:	74 5c                	je     1000041b <strncat(char*, char const*, unsigned long)+0x68>
100003bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100003c2:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
100003c5:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100003c8:	8d 50 01             	lea    edx,[eax+0x1]
100003cb:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
100003ce:	8a 00                	mov    al,BYTE PTR [eax]
100003d0:	84 c0                	test   al,al
100003d2:	0f 95 c0             	setne  al
100003d5:	84 c0                	test   al,al
100003d7:	74 02                	je     100003db <strncat(char*, char const*, unsigned long)+0x28>
100003d9:	eb ea                	jmp    100003c5 <strncat(char*, char const*, unsigned long)+0x12>
100003db:	ff 4d fc             	dec    DWORD PTR [ebp-0x4]
100003de:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
100003e1:	8d 42 01             	lea    eax,[edx+0x1]
100003e4:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
100003e7:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100003ea:	8d 48 01             	lea    ecx,[eax+0x1]
100003ed:	89 4d fc             	mov    DWORD PTR [ebp-0x4],ecx
100003f0:	8a 12                	mov    dl,BYTE PTR [edx]
100003f2:	88 10                	mov    BYTE PTR [eax],dl
100003f4:	8a 00                	mov    al,BYTE PTR [eax]
100003f6:	84 c0                	test   al,al
100003f8:	74 0d                	je     10000407 <strncat(char*, char const*, unsigned long)+0x54>
100003fa:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
100003fd:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
10000401:	74 04                	je     10000407 <strncat(char*, char const*, unsigned long)+0x54>
10000403:	b0 01                	mov    al,0x1
10000405:	eb 02                	jmp    10000409 <strncat(char*, char const*, unsigned long)+0x56>
10000407:	b0 00                	mov    al,0x0
10000409:	84 c0                	test   al,al
1000040b:	74 02                	je     1000040f <strncat(char*, char const*, unsigned long)+0x5c>
1000040d:	eb cf                	jmp    100003de <strncat(char*, char const*, unsigned long)+0x2b>
1000040f:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
10000413:	75 06                	jne    1000041b <strncat(char*, char const*, unsigned long)+0x68>
10000415:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000418:	c6 00 00             	mov    BYTE PTR [eax],0x0
1000041b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000041e:	c9                   	leave  
1000041f:	c3                   	ret    

10000420 <strstr(char*, char*)>:
10000420:	55                   	push   ebp
10000421:	89 e5                	mov    ebp,esp
10000423:	83 ec 10             	sub    esp,0x10
10000426:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10000429:	e8 fc ff ff ff       	call   1000042a <strstr(char*, char*)+0xa>	1000042a: R_386_PC32	strlen
1000042e:	83 c4 04             	add    esp,0x4
10000431:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
10000434:	83 7d fc 00          	cmp    DWORD PTR [ebp-0x4],0x0
10000438:	75 05                	jne    1000043f <strstr(char*, char*)+0x1f>
1000043a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000043d:	eb 3f                	jmp    1000047e <strstr(char*, char*)+0x5e>
1000043f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000442:	50                   	push   eax
10000443:	e8 fc ff ff ff       	call   10000444 <strstr(char*, char*)+0x24>	10000444: R_386_PC32	strlen
10000448:	83 c4 04             	add    esp,0x4
1000044b:	39 45 fc             	cmp    DWORD PTR [ebp-0x4],eax
1000044e:	77 29                	ja     10000479 <strstr(char*, char*)+0x59>
10000450:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000453:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
10000456:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10000459:	50                   	push   eax
1000045a:	e8 fc ff ff ff       	call   1000045b <strstr(char*, char*)+0x3b>	1000045b: R_386_PC32	memcmp(void*, void*, unsigned long)
1000045f:	83 c4 0c             	add    esp,0xc
10000462:	85 c0                	test   eax,eax
10000464:	0f 94 c0             	sete   al
10000467:	84 c0                	test   al,al
10000469:	74 05                	je     10000470 <strstr(char*, char*)+0x50>
1000046b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000046e:	eb 0e                	jmp    1000047e <strstr(char*, char*)+0x5e>
10000470:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000473:	40                   	inc    eax
10000474:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
10000477:	eb c6                	jmp    1000043f <strstr(char*, char*)+0x1f>
10000479:	b8 00 00 00 00       	mov    eax,0x0
1000047e:	c9                   	leave  
1000047f:	c3                   	ret    

10000480 <rmtree(char*)>:
10000480:	55                   	push   ebp
10000481:	89 e5                	mov    ebp,esp
10000483:	53                   	push   ebx
10000484:	81 ec 64 02 00 00    	sub    esp,0x264
1000048a:	68 2c 01 00 00       	push   0x12c
1000048f:	6a 00                	push   0x0
10000491:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
10000497:	50                   	push   eax
10000498:	e8 fc ff ff ff       	call   10000499 <rmtree(char*)+0x19>	10000499: R_386_PC32	memset
1000049d:	83 c4 0c             	add    esp,0xc
100004a0:	8d 85 a8 fd ff ff    	lea    eax,[ebp-0x258]
100004a6:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
100004a9:	83 ec 0c             	sub    esp,0xc
100004ac:	68 14 01 00 00       	push   0x114
100004b1:	e8 fc ff ff ff       	call   100004b2 <rmtree(char*)+0x32>	100004b2: R_386_PC32	operator new(unsigned long)
100004b6:	83 c4 10             	add    esp,0x10
100004b9:	89 c3                	mov    ebx,eax
100004bb:	b8 00 20 00 c2       	mov    eax,0xc2002000
100004c0:	8b 00                	mov    eax,DWORD PTR [eax]
100004c2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
100004c5:	83 ec 04             	sub    esp,0x4
100004c8:	50                   	push   eax
100004c9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100004cc:	53                   	push   ebx
100004cd:	e8 fc ff ff ff       	call   100004ce <rmtree(char*)+0x4e>	100004ce: R_386_PC32	Directory::Directory(char const*, Process*)
100004d2:	83 c4 10             	add    esp,0x10
100004d5:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
100004d8:	83 ec 0c             	sub    esp,0xc
100004db:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
100004de:	e8 fc ff ff ff       	call   100004df <rmtree(char*)+0x5f>	100004df: R_386_PC32	Directory::open()
100004e3:	83 c4 10             	add    esp,0x10
100004e6:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
100004e9:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
100004ed:	74 24                	je     10000513 <rmtree(char*)+0x93>
100004ef:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
100004f3:	0f 84 8b 01 00 00    	je     10000684 <rmtree(char*)+0x204>
100004f9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100004fc:	8b 00                	mov    eax,DWORD PTR [eax]
100004fe:	83 c0 08             	add    eax,0x8
10000501:	8b 00                	mov    eax,DWORD PTR [eax]
10000503:	83 ec 0c             	sub    esp,0xc
10000506:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000509:	ff d0                	call   eax
1000050b:	83 c4 10             	add    esp,0x10
1000050e:	e9 72 01 00 00       	jmp    10000685 <rmtree(char*)+0x205>
10000513:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10000516:	8b 00                	mov    eax,DWORD PTR [eax]
10000518:	83 c0 0c             	add    eax,0xc
1000051b:	8b 00                	mov    eax,DWORD PTR [eax]
1000051d:	83 ec 0c             	sub    esp,0xc
10000520:	8d 95 a4 fd ff ff    	lea    edx,[ebp-0x25c]
10000526:	52                   	push   edx
10000527:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
1000052a:	6a 00                	push   0x0
1000052c:	68 10 01 00 00       	push   0x110
10000531:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000534:	ff d0                	call   eax
10000536:	83 c4 20             	add    esp,0x20
10000539:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
1000053c:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
10000540:	0f 85 04 01 00 00    	jne    1000064a <rmtree(char*)+0x1ca>
10000546:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10000549:	83 c0 10             	add    eax,0x10
1000054c:	83 ec 08             	sub    esp,0x8
1000054f:	68 24 44 00 10       	push   0x10004424	10000550: R_386_32	.text
10000554:	50                   	push   eax
10000555:	e8 fc ff ff ff       	call   10000556 <rmtree(char*)+0xd6>	10000556: R_386_PC32	strcmp
1000055a:	83 c4 10             	add    esp,0x10
1000055d:	85 c0                	test   eax,eax
1000055f:	74 b2                	je     10000513 <rmtree(char*)+0x93>
10000561:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10000564:	83 c0 10             	add    eax,0x10
10000567:	83 ec 08             	sub    esp,0x8
1000056a:	68 26 44 00 10       	push   0x10004426	1000056b: R_386_32	.text
1000056f:	50                   	push   eax
10000570:	e8 fc ff ff ff       	call   10000571 <rmtree(char*)+0xf1>	10000571: R_386_PC32	strcmp
10000575:	83 c4 10             	add    esp,0x10
10000578:	85 c0                	test   eax,eax
1000057a:	74 97                	je     10000513 <rmtree(char*)+0x93>
1000057c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
1000057f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
10000582:	83 e0 02             	and    eax,0x2
10000585:	85 c0                	test   eax,eax
10000587:	74 17                	je     100005a0 <rmtree(char*)+0x120>
10000589:	83 ec 0c             	sub    esp,0xc
1000058c:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
10000592:	50                   	push   eax
10000593:	e8 fc ff ff ff       	call   10000594 <rmtree(char*)+0x114>	10000594: R_386_PC32	rmtree(char*)
10000598:	83 c4 10             	add    esp,0x10
1000059b:	e9 73 ff ff ff       	jmp    10000513 <rmtree(char*)+0x93>
100005a0:	83 ec 08             	sub    esp,0x8
100005a3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100005a6:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
100005ac:	50                   	push   eax
100005ad:	e8 fc ff ff ff       	call   100005ae <rmtree(char*)+0x12e>	100005ae: R_386_PC32	strcpy
100005b2:	83 c4 10             	add    esp,0x10
100005b5:	83 ec 08             	sub    esp,0x8
100005b8:	68 29 44 00 10       	push   0x10004429	100005b9: R_386_32	.text
100005bd:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
100005c3:	50                   	push   eax
100005c4:	e8 fc ff ff ff       	call   100005c5 <rmtree(char*)+0x145>	100005c5: R_386_PC32	strcat
100005c9:	83 c4 10             	add    esp,0x10
100005cc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
100005cf:	83 c0 10             	add    eax,0x10
100005d2:	83 ec 08             	sub    esp,0x8
100005d5:	50                   	push   eax
100005d6:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
100005dc:	50                   	push   eax
100005dd:	e8 fc ff ff ff       	call   100005de <rmtree(char*)+0x15e>	100005de: R_386_PC32	strcat
100005e2:	83 c4 10             	add    esp,0x10
100005e5:	83 ec 0c             	sub    esp,0xc
100005e8:	68 14 01 00 00       	push   0x114
100005ed:	e8 fc ff ff ff       	call   100005ee <rmtree(char*)+0x16e>	100005ee: R_386_PC32	operator new(unsigned long)
100005f2:	83 c4 10             	add    esp,0x10
100005f5:	89 c3                	mov    ebx,eax
100005f7:	b8 00 20 00 c2       	mov    eax,0xc2002000
100005fc:	8b 00                	mov    eax,DWORD PTR [eax]
100005fe:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
10000601:	83 ec 04             	sub    esp,0x4
10000604:	50                   	push   eax
10000605:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
1000060b:	50                   	push   eax
1000060c:	53                   	push   ebx
1000060d:	e8 fc ff ff ff       	call   1000060e <rmtree(char*)+0x18e>	1000060e: R_386_PC32	File::File(char const*, Process*)
10000612:	83 c4 10             	add    esp,0x10
10000615:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
10000618:	83 ec 0c             	sub    esp,0xc
1000061b:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
1000061e:	e8 fc ff ff ff       	call   1000061f <rmtree(char*)+0x19f>	1000061f: R_386_PC32	File::unlink()
10000623:	83 c4 10             	add    esp,0x10
10000626:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
1000062a:	0f 84 e3 fe ff ff    	je     10000513 <rmtree(char*)+0x93>
10000630:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10000633:	8b 00                	mov    eax,DWORD PTR [eax]
10000635:	83 c0 08             	add    eax,0x8
10000638:	8b 00                	mov    eax,DWORD PTR [eax]
1000063a:	83 ec 0c             	sub    esp,0xc
1000063d:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
10000640:	ff d0                	call   eax
10000642:	83 c4 10             	add    esp,0x10
10000645:	e9 c9 fe ff ff       	jmp    10000513 <rmtree(char*)+0x93>
1000064a:	90                   	nop
1000064b:	83 ec 0c             	sub    esp,0xc
1000064e:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000651:	e8 fc ff ff ff       	call   10000652 <rmtree(char*)+0x1d2>	10000652: R_386_PC32	Directory::close()
10000656:	83 c4 10             	add    esp,0x10
10000659:	83 ec 0c             	sub    esp,0xc
1000065c:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
1000065f:	e8 fc ff ff ff       	call   10000660 <rmtree(char*)+0x1e0>	10000660: R_386_PC32	Directory::unlink()
10000664:	83 c4 10             	add    esp,0x10
10000667:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
1000066b:	74 18                	je     10000685 <rmtree(char*)+0x205>
1000066d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10000670:	8b 00                	mov    eax,DWORD PTR [eax]
10000672:	83 c0 08             	add    eax,0x8
10000675:	8b 00                	mov    eax,DWORD PTR [eax]
10000677:	83 ec 0c             	sub    esp,0xc
1000067a:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
1000067d:	ff d0                	call   eax
1000067f:	83 c4 10             	add    esp,0x10
10000682:	eb 01                	jmp    10000685 <rmtree(char*)+0x205>
10000684:	90                   	nop
10000685:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
10000688:	c9                   	leave  
10000689:	c3                   	ret    

1000068a <mkdir(char const*, int)>:
1000068a:	55                   	push   ebp
1000068b:	89 e5                	mov    ebp,esp
1000068d:	53                   	push   ebx
1000068e:	83 ec 14             	sub    esp,0x14
10000691:	83 ec 0c             	sub    esp,0xc
10000694:	68 14 01 00 00       	push   0x114
10000699:	e8 fc ff ff ff       	call   1000069a <mkdir(char const*, int)+0x10>	1000069a: R_386_PC32	operator new(unsigned long)
1000069e:	83 c4 10             	add    esp,0x10
100006a1:	89 c3                	mov    ebx,eax
100006a3:	a1 00 00 00 00       	mov    eax,ds:0x0	100006a4: R_386_32	kernelProcess
100006a8:	83 ec 04             	sub    esp,0x4
100006ab:	50                   	push   eax
100006ac:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100006af:	53                   	push   ebx
100006b0:	e8 fc ff ff ff       	call   100006b1 <mkdir(char const*, int)+0x27>	100006b1: R_386_PC32	Directory::Directory(char const*, Process*)
100006b5:	83 c4 10             	add    esp,0x10
100006b8:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
100006bb:	83 ec 0c             	sub    esp,0xc
100006be:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
100006c1:	e8 fc ff ff ff       	call   100006c2 <mkdir(char const*, int)+0x38>	100006c2: R_386_PC32	Directory::create()
100006c6:	83 c4 10             	add    esp,0x10
100006c9:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
100006cd:	74 15                	je     100006e4 <mkdir(char const*, int)+0x5a>
100006cf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
100006d2:	8b 00                	mov    eax,DWORD PTR [eax]
100006d4:	83 c0 08             	add    eax,0x8
100006d7:	8b 00                	mov    eax,DWORD PTR [eax]
100006d9:	83 ec 0c             	sub    esp,0xc
100006dc:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
100006df:	ff d0                	call   eax
100006e1:	83 c4 10             	add    esp,0x10
100006e4:	b8 00 00 00 00       	mov    eax,0x0
100006e9:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
100006ec:	c9                   	leave  
100006ed:	c3                   	ret    

100006ee <copytree(char*, char*)>:
100006ee:	55                   	push   ebp
100006ef:	89 e5                	mov    ebp,esp
100006f1:	53                   	push   ebx
100006f2:	81 ec 54 01 00 00    	sub    esp,0x154
100006f8:	83 ec 0c             	sub    esp,0xc
100006fb:	68 90 01 00 00       	push   0x190
10000700:	e8 fc ff ff ff       	call   10000701 <copytree(char*, char*)+0x13>	10000701: R_386_PC32	malloc
10000705:	83 c4 10             	add    esp,0x10
10000708:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
1000070b:	83 ec 0c             	sub    esp,0xc
1000070e:	68 90 01 00 00       	push   0x190
10000713:	e8 fc ff ff ff       	call   10000714 <copytree(char*, char*)+0x26>	10000714: R_386_PC32	malloc
10000718:	83 c4 10             	add    esp,0x10
1000071b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
1000071e:	83 ec 04             	sub    esp,0x4
10000721:	68 90 01 00 00       	push   0x190
10000726:	6a 00                	push   0x0
10000728:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
1000072b:	e8 fc ff ff ff       	call   1000072c <copytree(char*, char*)+0x3e>	1000072c: R_386_PC32	memset
10000730:	83 c4 10             	add    esp,0x10
10000733:	83 ec 04             	sub    esp,0x4
10000736:	68 90 01 00 00       	push   0x190
1000073b:	6a 00                	push   0x0
1000073d:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000740:	e8 fc ff ff ff       	call   10000741 <copytree(char*, char*)+0x53>	10000741: R_386_PC32	memset
10000745:	83 c4 10             	add    esp,0x10
10000748:	8d 85 bc fe ff ff    	lea    eax,[ebp-0x144]
1000074e:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
10000751:	83 ec 0c             	sub    esp,0xc
10000754:	68 14 01 00 00       	push   0x114
10000759:	e8 fc ff ff ff       	call   1000075a <copytree(char*, char*)+0x6c>	1000075a: R_386_PC32	operator new(unsigned long)
1000075e:	83 c4 10             	add    esp,0x10
10000761:	89 c3                	mov    ebx,eax
10000763:	b8 00 20 00 c2       	mov    eax,0xc2002000
10000768:	8b 00                	mov    eax,DWORD PTR [eax]
1000076a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
1000076d:	83 ec 04             	sub    esp,0x4
10000770:	50                   	push   eax
10000771:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000774:	53                   	push   ebx
10000775:	e8 fc ff ff ff       	call   10000776 <copytree(char*, char*)+0x88>	10000776: R_386_PC32	Directory::Directory(char const*, Process*)
1000077a:	83 c4 10             	add    esp,0x10
1000077d:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
10000780:	83 ec 0c             	sub    esp,0xc
10000783:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
10000786:	e8 fc ff ff ff       	call   10000787 <copytree(char*, char*)+0x99>	10000787: R_386_PC32	Directory::open()
1000078b:	83 c4 10             	add    esp,0x10
1000078e:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10000791:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
10000795:	74 34                	je     100007cb <copytree(char*, char*)+0xdd>
10000797:	83 ec 0c             	sub    esp,0xc
1000079a:	68 2b 44 00 10       	push   0x1000442b	1000079b: R_386_32	.text
1000079f:	e8 fc ff ff ff       	call   100007a0 <copytree(char*, char*)+0xb2>	100007a0: R_386_PC32	Dbg::kprintf(char const*, ...)
100007a4:	83 c4 10             	add    esp,0x10
100007a7:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
100007ab:	0f 84 90 03 00 00    	je     10000b41 <copytree(char*, char*)+0x453>
100007b1:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
100007b4:	8b 00                	mov    eax,DWORD PTR [eax]
100007b6:	83 c0 08             	add    eax,0x8
100007b9:	8b 00                	mov    eax,DWORD PTR [eax]
100007bb:	83 ec 0c             	sub    esp,0xc
100007be:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
100007c1:	ff d0                	call   eax
100007c3:	83 c4 10             	add    esp,0x10
100007c6:	e9 76 03 00 00       	jmp    10000b41 <copytree(char*, char*)+0x453>
100007cb:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
100007ce:	8b 00                	mov    eax,DWORD PTR [eax]
100007d0:	83 c0 0c             	add    eax,0xc
100007d3:	8b 00                	mov    eax,DWORD PTR [eax]
100007d5:	83 ec 0c             	sub    esp,0xc
100007d8:	8d 95 b8 fe ff ff    	lea    edx,[ebp-0x148]
100007de:	52                   	push   edx
100007df:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
100007e2:	6a 00                	push   0x0
100007e4:	68 10 01 00 00       	push   0x110
100007e9:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
100007ec:	ff d0                	call   eax
100007ee:	83 c4 20             	add    esp,0x20
100007f1:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
100007f4:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
100007f8:	0f 85 fb 02 00 00    	jne    10000af9 <copytree(char*, char*)+0x40b>
100007fe:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
10000801:	83 c0 10             	add    eax,0x10
10000804:	83 ec 08             	sub    esp,0x8
10000807:	68 24 44 00 10       	push   0x10004424	10000808: R_386_32	.text
1000080c:	50                   	push   eax
1000080d:	e8 fc ff ff ff       	call   1000080e <copytree(char*, char*)+0x120>	1000080e: R_386_PC32	strcmp
10000812:	83 c4 10             	add    esp,0x10
10000815:	85 c0                	test   eax,eax
10000817:	74 b2                	je     100007cb <copytree(char*, char*)+0xdd>
10000819:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
1000081c:	83 c0 10             	add    eax,0x10
1000081f:	83 ec 08             	sub    esp,0x8
10000822:	68 26 44 00 10       	push   0x10004426	10000823: R_386_32	.text
10000827:	50                   	push   eax
10000828:	e8 fc ff ff ff       	call   10000829 <copytree(char*, char*)+0x13b>	10000829: R_386_PC32	strcmp
1000082d:	83 c4 10             	add    esp,0x10
10000830:	85 c0                	test   eax,eax
10000832:	74 97                	je     100007cb <copytree(char*, char*)+0xdd>
10000834:	83 ec 08             	sub    esp,0x8
10000837:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000083a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
1000083d:	e8 fc ff ff ff       	call   1000083e <copytree(char*, char*)+0x150>	1000083e: R_386_PC32	strcpy
10000842:	83 c4 10             	add    esp,0x10
10000845:	83 ec 08             	sub    esp,0x8
10000848:	68 29 44 00 10       	push   0x10004429	10000849: R_386_32	.text
1000084d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10000850:	e8 fc ff ff ff       	call   10000851 <copytree(char*, char*)+0x163>	10000851: R_386_PC32	strcat
10000855:	83 c4 10             	add    esp,0x10
10000858:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
1000085b:	83 c0 10             	add    eax,0x10
1000085e:	83 ec 08             	sub    esp,0x8
10000861:	50                   	push   eax
10000862:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10000865:	e8 fc ff ff ff       	call   10000866 <copytree(char*, char*)+0x178>	10000866: R_386_PC32	strcat
1000086a:	83 c4 10             	add    esp,0x10
1000086d:	83 ec 08             	sub    esp,0x8
10000870:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10000873:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000876:	e8 fc ff ff ff       	call   10000877 <copytree(char*, char*)+0x189>	10000877: R_386_PC32	strcpy
1000087b:	83 c4 10             	add    esp,0x10
1000087e:	83 ec 08             	sub    esp,0x8
10000881:	68 29 44 00 10       	push   0x10004429	10000882: R_386_32	.text
10000886:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000889:	e8 fc ff ff ff       	call   1000088a <copytree(char*, char*)+0x19c>	1000088a: R_386_PC32	strcat
1000088e:	83 c4 10             	add    esp,0x10
10000891:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
10000894:	83 c0 10             	add    eax,0x10
10000897:	83 ec 08             	sub    esp,0x8
1000089a:	50                   	push   eax
1000089b:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
1000089e:	e8 fc ff ff ff       	call   1000089f <copytree(char*, char*)+0x1b1>	1000089f: R_386_PC32	strcat
100008a3:	83 c4 10             	add    esp,0x10
100008a6:	83 ec 04             	sub    esp,0x4
100008a9:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
100008ac:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
100008af:	68 45 44 00 10       	push   0x10004445	100008b0: R_386_32	.text
100008b4:	e8 fc ff ff ff       	call   100008b5 <copytree(char*, char*)+0x1c7>	100008b5: R_386_PC32	Dbg::kprintf(char const*, ...)
100008b9:	83 c4 10             	add    esp,0x10
100008bc:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
100008bf:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
100008c2:	83 e0 02             	and    eax,0x2
100008c5:	85 c0                	test   eax,eax
100008c7:	74 47                	je     10000910 <copytree(char*, char*)+0x222>
100008c9:	83 ec 08             	sub    esp,0x8
100008cc:	68 c0 01 00 00       	push   0x1c0
100008d1:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
100008d4:	e8 fc ff ff ff       	call   100008d5 <copytree(char*, char*)+0x1e7>	100008d5: R_386_PC32	mkdir(char const*, int)
100008d9:	83 c4 10             	add    esp,0x10
100008dc:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
100008df:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
100008e3:	74 15                	je     100008fa <copytree(char*, char*)+0x20c>
100008e5:	83 ec 0c             	sub    esp,0xc
100008e8:	68 4f 44 00 10       	push   0x1000444f	100008e9: R_386_32	.text
100008ed:	e8 fc ff ff ff       	call   100008ee <copytree(char*, char*)+0x200>	100008ee: R_386_PC32	KePanic(char const*)
100008f2:	83 c4 10             	add    esp,0x10
100008f5:	e9 d1 fe ff ff       	jmp    100007cb <copytree(char*, char*)+0xdd>
100008fa:	83 ec 08             	sub    esp,0x8
100008fd:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000900:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10000903:	e8 fc ff ff ff       	call   10000904 <copytree(char*, char*)+0x216>	10000904: R_386_PC32	copytree(char*, char*)
10000908:	83 c4 10             	add    esp,0x10
1000090b:	e9 bb fe ff ff       	jmp    100007cb <copytree(char*, char*)+0xdd>
10000910:	83 ec 0c             	sub    esp,0xc
10000913:	68 14 01 00 00       	push   0x114
10000918:	e8 fc ff ff ff       	call   10000919 <copytree(char*, char*)+0x22b>	10000919: R_386_PC32	operator new(unsigned long)
1000091d:	83 c4 10             	add    esp,0x10
10000920:	89 c3                	mov    ebx,eax
10000922:	b8 00 20 00 c2       	mov    eax,0xc2002000
10000927:	8b 00                	mov    eax,DWORD PTR [eax]
10000929:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
1000092c:	83 ec 04             	sub    esp,0x4
1000092f:	50                   	push   eax
10000930:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10000933:	53                   	push   ebx
10000934:	e8 fc ff ff ff       	call   10000935 <copytree(char*, char*)+0x247>	10000935: R_386_PC32	File::File(char const*, Process*)
10000939:	83 c4 10             	add    esp,0x10
1000093c:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
1000093f:	83 ec 08             	sub    esp,0x8
10000942:	6a 01                	push   0x1
10000944:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000947:	e8 fc ff ff ff       	call   10000948 <copytree(char*, char*)+0x25a>	10000948: R_386_PC32	File::open(FileOpenMode)
1000094c:	83 c4 10             	add    esp,0x10
1000094f:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
10000953:	75 15                	jne    1000096a <copytree(char*, char*)+0x27c>
10000955:	83 ec 0c             	sub    esp,0xc
10000958:	68 60 44 00 10       	push   0x10004460	10000959: R_386_32	.text
1000095d:	e8 fc ff ff ff       	call   1000095e <copytree(char*, char*)+0x270>	1000095e: R_386_PC32	KePanic(char const*)
10000962:	83 c4 10             	add    esp,0x10
10000965:	e9 8a 01 00 00       	jmp    10000af4 <copytree(char*, char*)+0x406>
1000096a:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
1000096e:	0f 84 57 fe ff ff    	je     100007cb <copytree(char*, char*)+0xdd>
10000974:	83 ec 0c             	sub    esp,0xc
10000977:	68 14 01 00 00       	push   0x114
1000097c:	e8 fc ff ff ff       	call   1000097d <copytree(char*, char*)+0x28f>	1000097d: R_386_PC32	operator new(unsigned long)
10000981:	83 c4 10             	add    esp,0x10
10000984:	89 c3                	mov    ebx,eax
10000986:	b8 00 20 00 c2       	mov    eax,0xc2002000
1000098b:	8b 00                	mov    eax,DWORD PTR [eax]
1000098d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
10000990:	83 ec 04             	sub    esp,0x4
10000993:	50                   	push   eax
10000994:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000997:	53                   	push   ebx
10000998:	e8 fc ff ff ff       	call   10000999 <copytree(char*, char*)+0x2ab>	10000999: R_386_PC32	File::File(char const*, Process*)
1000099d:	83 c4 10             	add    esp,0x10
100009a0:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
100009a3:	83 ec 08             	sub    esp,0x8
100009a6:	6a 12                	push   0x12
100009a8:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
100009ab:	e8 fc ff ff ff       	call   100009ac <copytree(char*, char*)+0x2be>	100009ac: R_386_PC32	File::open(FileOpenMode)
100009b0:	83 c4 10             	add    esp,0x10
100009b3:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
100009b7:	75 23                	jne    100009dc <copytree(char*, char*)+0x2ee>
100009b9:	83 ec 0c             	sub    esp,0xc
100009bc:	68 60 44 00 10       	push   0x10004460	100009bd: R_386_32	.text
100009c1:	e8 fc ff ff ff       	call   100009c2 <copytree(char*, char*)+0x2d4>	100009c2: R_386_PC32	KePanic(char const*)
100009c6:	83 c4 10             	add    esp,0x10
100009c9:	83 ec 0c             	sub    esp,0xc
100009cc:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
100009cf:	e8 fc ff ff ff       	call   100009d0 <copytree(char*, char*)+0x2e2>	100009d0: R_386_PC32	File::close()
100009d4:	83 c4 10             	add    esp,0x10
100009d7:	e9 18 01 00 00       	jmp    10000af4 <copytree(char*, char*)+0x406>
100009dc:	83 ec 0c             	sub    esp,0xc
100009df:	68 00 10 00 00       	push   0x1000
100009e4:	e8 fc ff ff ff       	call   100009e5 <copytree(char*, char*)+0x2f7>	100009e5: R_386_PC32	malloc
100009e9:	83 c4 10             	add    esp,0x10
100009ec:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
100009ef:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
100009f3:	75 31                	jne    10000a26 <copytree(char*, char*)+0x338>
100009f5:	83 ec 0c             	sub    esp,0xc
100009f8:	68 6f 44 00 10       	push   0x1000446f	100009f9: R_386_32	.text
100009fd:	e8 fc ff ff ff       	call   100009fe <copytree(char*, char*)+0x310>	100009fe: R_386_PC32	KePanic(char const*)
10000a02:	83 c4 10             	add    esp,0x10
10000a05:	83 ec 0c             	sub    esp,0xc
10000a08:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10000a0b:	e8 fc ff ff ff       	call   10000a0c <copytree(char*, char*)+0x31e>	10000a0c: R_386_PC32	free
10000a10:	83 c4 10             	add    esp,0x10
10000a13:	83 ec 0c             	sub    esp,0xc
10000a16:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000a19:	e8 fc ff ff ff       	call   10000a1a <copytree(char*, char*)+0x32c>	10000a1a: R_386_PC32	free
10000a1e:	83 c4 10             	add    esp,0x10
10000a21:	e9 1c 01 00 00       	jmp    10000b42 <copytree(char*, char*)+0x454>
10000a26:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10000a29:	8b 00                	mov    eax,DWORD PTR [eax]
10000a2b:	83 c0 0c             	add    eax,0xc
10000a2e:	8b 00                	mov    eax,DWORD PTR [eax]
10000a30:	83 ec 0c             	sub    esp,0xc
10000a33:	8d 95 b4 fe ff ff    	lea    edx,[ebp-0x14c]
10000a39:	52                   	push   edx
10000a3a:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10000a3d:	6a 00                	push   0x0
10000a3f:	68 00 10 00 00       	push   0x1000
10000a44:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000a47:	ff d0                	call   eax
10000a49:	83 c4 20             	add    esp,0x20
10000a4c:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
10000a4f:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
10000a53:	75 37                	jne    10000a8c <copytree(char*, char*)+0x39e>
10000a55:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000a58:	8b 00                	mov    eax,DWORD PTR [eax]
10000a5a:	83 c0 10             	add    eax,0x10
10000a5d:	8b 08                	mov    ecx,DWORD PTR [eax]
10000a5f:	8b 85 b4 fe ff ff    	mov    eax,DWORD PTR [ebp-0x14c]
10000a65:	99                   	cdq    
10000a66:	83 ec 0c             	sub    esp,0xc
10000a69:	8d 9d b0 fe ff ff    	lea    ebx,[ebp-0x150]
10000a6f:	53                   	push   ebx
10000a70:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10000a73:	52                   	push   edx
10000a74:	50                   	push   eax
10000a75:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
10000a78:	ff d1                	call   ecx
10000a7a:	83 c4 20             	add    esp,0x20
10000a7d:	8b 85 b4 fe ff ff    	mov    eax,DWORD PTR [ebp-0x14c]
10000a83:	3d 00 10 00 00       	cmp    eax,0x1000
10000a88:	75 05                	jne    10000a8f <copytree(char*, char*)+0x3a1>
10000a8a:	eb 9a                	jmp    10000a26 <copytree(char*, char*)+0x338>
10000a8c:	90                   	nop
10000a8d:	eb 01                	jmp    10000a90 <copytree(char*, char*)+0x3a2>
10000a8f:	90                   	nop
10000a90:	83 ec 0c             	sub    esp,0xc
10000a93:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10000a96:	e8 fc ff ff ff       	call   10000a97 <copytree(char*, char*)+0x3a9>	10000a97: R_386_PC32	free
10000a9b:	83 c4 10             	add    esp,0x10
10000a9e:	83 ec 0c             	sub    esp,0xc
10000aa1:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000aa4:	e8 fc ff ff ff       	call   10000aa5 <copytree(char*, char*)+0x3b7>	10000aa5: R_386_PC32	File::close()
10000aa9:	83 c4 10             	add    esp,0x10
10000aac:	83 ec 0c             	sub    esp,0xc
10000aaf:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
10000ab2:	e8 fc ff ff ff       	call   10000ab3 <copytree(char*, char*)+0x3c5>	10000ab3: R_386_PC32	File::close()
10000ab7:	83 c4 10             	add    esp,0x10
10000aba:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
10000abe:	74 15                	je     10000ad5 <copytree(char*, char*)+0x3e7>
10000ac0:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10000ac3:	8b 00                	mov    eax,DWORD PTR [eax]
10000ac5:	83 c0 08             	add    eax,0x8
10000ac8:	8b 00                	mov    eax,DWORD PTR [eax]
10000aca:	83 ec 0c             	sub    esp,0xc
10000acd:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000ad0:	ff d0                	call   eax
10000ad2:	83 c4 10             	add    esp,0x10
10000ad5:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
10000ad9:	0f 84 ec fc ff ff    	je     100007cb <copytree(char*, char*)+0xdd>
10000adf:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000ae2:	8b 00                	mov    eax,DWORD PTR [eax]
10000ae4:	83 c0 08             	add    eax,0x8
10000ae7:	8b 00                	mov    eax,DWORD PTR [eax]
10000ae9:	83 ec 0c             	sub    esp,0xc
10000aec:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
10000aef:	ff d0                	call   eax
10000af1:	83 c4 10             	add    esp,0x10
10000af4:	e9 d2 fc ff ff       	jmp    100007cb <copytree(char*, char*)+0xdd>
10000af9:	90                   	nop
10000afa:	83 ec 0c             	sub    esp,0xc
10000afd:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10000b00:	e8 fc ff ff ff       	call   10000b01 <copytree(char*, char*)+0x413>	10000b01: R_386_PC32	free
10000b05:	83 c4 10             	add    esp,0x10
10000b08:	83 ec 0c             	sub    esp,0xc
10000b0b:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000b0e:	e8 fc ff ff ff       	call   10000b0f <copytree(char*, char*)+0x421>	10000b0f: R_386_PC32	free
10000b13:	83 c4 10             	add    esp,0x10
10000b16:	83 ec 0c             	sub    esp,0xc
10000b19:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
10000b1c:	e8 fc ff ff ff       	call   10000b1d <copytree(char*, char*)+0x42f>	10000b1d: R_386_PC32	Directory::close()
10000b21:	83 c4 10             	add    esp,0x10
10000b24:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
10000b28:	74 18                	je     10000b42 <copytree(char*, char*)+0x454>
10000b2a:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
10000b2d:	8b 00                	mov    eax,DWORD PTR [eax]
10000b2f:	83 c0 08             	add    eax,0x8
10000b32:	8b 00                	mov    eax,DWORD PTR [eax]
10000b34:	83 ec 0c             	sub    esp,0xc
10000b37:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
10000b3a:	ff d0                	call   eax
10000b3c:	83 c4 10             	add    esp,0x10
10000b3f:	eb 01                	jmp    10000b42 <copytree(char*, char*)+0x454>
10000b41:	90                   	nop
10000b42:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
10000b45:	c9                   	leave  
10000b46:	c3                   	ret    

10000b47 <backupTree(char*, unsigned short)>:
10000b47:	55                   	push   ebp
10000b48:	89 e5                	mov    ebp,esp
10000b4a:	57                   	push   edi
10000b4b:	56                   	push   esi
10000b4c:	53                   	push   ebx
10000b4d:	81 ec 8c 12 00 00    	sub    esp,0x128c
10000b53:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000b56:	66 89 85 74 ed ff ff 	mov    WORD PTR [ebp-0x128c],ax
10000b5d:	83 ec 0c             	sub    esp,0xc
10000b60:	68 90 01 00 00       	push   0x190
10000b65:	e8 fc ff ff ff       	call   10000b66 <backupTree(char*, unsigned short)+0x1f>	10000b66: R_386_PC32	malloc
10000b6a:	83 c4 10             	add    esp,0x10
10000b6d:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
10000b70:	83 ec 04             	sub    esp,0x4
10000b73:	68 90 01 00 00       	push   0x190
10000b78:	6a 00                	push   0x0
10000b7a:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000b7d:	e8 fc ff ff ff       	call   10000b7e <backupTree(char*, unsigned short)+0x37>	10000b7e: R_386_PC32	memset
10000b82:	83 c4 10             	add    esp,0x10
10000b85:	8d 85 a8 fe ff ff    	lea    eax,[ebp-0x158]
10000b8b:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
10000b8e:	83 ec 0c             	sub    esp,0xc
10000b91:	68 14 01 00 00       	push   0x114
10000b96:	e8 fc ff ff ff       	call   10000b97 <backupTree(char*, unsigned short)+0x50>	10000b97: R_386_PC32	operator new(unsigned long)
10000b9b:	83 c4 10             	add    esp,0x10
10000b9e:	89 c3                	mov    ebx,eax
10000ba0:	b8 00 20 00 c2       	mov    eax,0xc2002000
10000ba5:	8b 00                	mov    eax,DWORD PTR [eax]
10000ba7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
10000baa:	83 ec 04             	sub    esp,0x4
10000bad:	50                   	push   eax
10000bae:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000bb1:	53                   	push   ebx
10000bb2:	e8 fc ff ff ff       	call   10000bb3 <backupTree(char*, unsigned short)+0x6c>	10000bb3: R_386_PC32	Directory::Directory(char const*, Process*)
10000bb7:	83 c4 10             	add    esp,0x10
10000bba:	89 5d d0             	mov    DWORD PTR [ebp-0x30],ebx
10000bbd:	83 ec 0c             	sub    esp,0xc
10000bc0:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10000bc3:	e8 fc ff ff ff       	call   10000bc4 <backupTree(char*, unsigned short)+0x7d>	10000bc4: R_386_PC32	Directory::open()
10000bc8:	83 c4 10             	add    esp,0x10
10000bcb:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
10000bce:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
10000bd2:	74 34                	je     10000c08 <backupTree(char*, unsigned short)+0xc1>
10000bd4:	83 ec 0c             	sub    esp,0xc
10000bd7:	68 2b 44 00 10       	push   0x1000442b	10000bd8: R_386_32	.text
10000bdc:	e8 fc ff ff ff       	call   10000bdd <backupTree(char*, unsigned short)+0x96>	10000bdd: R_386_PC32	Dbg::kprintf(char const*, ...)
10000be1:	83 c4 10             	add    esp,0x10
10000be4:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
10000be8:	0f 84 c8 05 00 00    	je     100011b6 <backupTree(char*, unsigned short)+0x66f>
10000bee:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
10000bf1:	8b 00                	mov    eax,DWORD PTR [eax]
10000bf3:	83 c0 08             	add    eax,0x8
10000bf6:	8b 00                	mov    eax,DWORD PTR [eax]
10000bf8:	83 ec 0c             	sub    esp,0xc
10000bfb:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10000bfe:	ff d0                	call   eax
10000c00:	83 c4 10             	add    esp,0x10
10000c03:	e9 af 05 00 00       	jmp    100011b7 <backupTree(char*, unsigned short)+0x670>
10000c08:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
10000c0b:	8b 00                	mov    eax,DWORD PTR [eax]
10000c0d:	83 c0 0c             	add    eax,0xc
10000c10:	8b 00                	mov    eax,DWORD PTR [eax]
10000c12:	83 ec 0c             	sub    esp,0xc
10000c15:	8d 95 a4 fe ff ff    	lea    edx,[ebp-0x15c]
10000c1b:	52                   	push   edx
10000c1c:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
10000c1f:	6a 00                	push   0x0
10000c21:	68 10 01 00 00       	push   0x110
10000c26:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10000c29:	ff d0                	call   eax
10000c2b:	83 c4 20             	add    esp,0x20
10000c2e:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
10000c31:	83 7d c8 00          	cmp    DWORD PTR [ebp-0x38],0x0
10000c35:	0f 85 41 05 00 00    	jne    1000117c <backupTree(char*, unsigned short)+0x635>
10000c3b:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000c3e:	83 c0 10             	add    eax,0x10
10000c41:	83 ec 08             	sub    esp,0x8
10000c44:	68 24 44 00 10       	push   0x10004424	10000c45: R_386_32	.text
10000c49:	50                   	push   eax
10000c4a:	e8 fc ff ff ff       	call   10000c4b <backupTree(char*, unsigned short)+0x104>	10000c4b: R_386_PC32	strcmp
10000c4f:	83 c4 10             	add    esp,0x10
10000c52:	85 c0                	test   eax,eax
10000c54:	74 b2                	je     10000c08 <backupTree(char*, unsigned short)+0xc1>
10000c56:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000c59:	83 c0 10             	add    eax,0x10
10000c5c:	83 ec 08             	sub    esp,0x8
10000c5f:	68 26 44 00 10       	push   0x10004426	10000c60: R_386_32	.text
10000c64:	50                   	push   eax
10000c65:	e8 fc ff ff ff       	call   10000c66 <backupTree(char*, unsigned short)+0x11f>	10000c66: R_386_PC32	strcmp
10000c6a:	83 c4 10             	add    esp,0x10
10000c6d:	85 c0                	test   eax,eax
10000c6f:	74 97                	je     10000c08 <backupTree(char*, unsigned short)+0xc1>
10000c71:	83 ec 08             	sub    esp,0x8
10000c74:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000c77:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000c7a:	e8 fc ff ff ff       	call   10000c7b <backupTree(char*, unsigned short)+0x134>	10000c7b: R_386_PC32	strcpy
10000c7f:	83 c4 10             	add    esp,0x10
10000c82:	83 ec 08             	sub    esp,0x8
10000c85:	68 29 44 00 10       	push   0x10004429	10000c86: R_386_32	.text
10000c8a:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000c8d:	e8 fc ff ff ff       	call   10000c8e <backupTree(char*, unsigned short)+0x147>	10000c8e: R_386_PC32	strcat
10000c92:	83 c4 10             	add    esp,0x10
10000c95:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000c98:	83 c0 10             	add    eax,0x10
10000c9b:	83 ec 08             	sub    esp,0x8
10000c9e:	50                   	push   eax
10000c9f:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000ca2:	e8 fc ff ff ff       	call   10000ca3 <backupTree(char*, unsigned short)+0x15c>	10000ca3: R_386_PC32	strcat
10000ca7:	83 c4 10             	add    esp,0x10
10000caa:	66 c7 45 e6 bc ad    	mov    WORD PTR [ebp-0x1a],0xadbc
10000cb0:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
10000cb7:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
10000cba:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10000cbd:	01 d0                	add    eax,edx
10000cbf:	83 c0 10             	add    eax,0x10
10000cc2:	8a 00                	mov    al,BYTE PTR [eax]
10000cc4:	84 c0                	test   al,al
10000cc6:	74 3c                	je     10000d04 <backupTree(char*, unsigned short)+0x1bd>
10000cc8:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
10000ccb:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10000cce:	01 d0                	add    eax,edx
10000cd0:	83 c0 10             	add    eax,0x10
10000cd3:	8a 00                	mov    al,BYTE PTR [eax]
10000cd5:	66 0f be d0          	movsx  dx,al
10000cd9:	66 8b 45 e6          	mov    ax,WORD PTR [ebp-0x1a]
10000cdd:	31 d0                	xor    eax,edx
10000cdf:	66 89 45 e6          	mov    WORD PTR [ebp-0x1a],ax
10000ce3:	0f b7 45 e6          	movzx  eax,WORD PTR [ebp-0x1a]
10000ce7:	c1 e0 03             	shl    eax,0x3
10000cea:	89 c2                	mov    edx,eax
10000cec:	0f b7 45 e6          	movzx  eax,WORD PTR [ebp-0x1a]
10000cf0:	c1 f8 0d             	sar    eax,0xd
10000cf3:	09 d0                	or     eax,edx
10000cf5:	66 89 45 e6          	mov    WORD PTR [ebp-0x1a],ax
10000cf9:	66 81 6d e6 f1 06    	sub    WORD PTR [ebp-0x1a],0x6f1
10000cff:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
10000d02:	eb b3                	jmp    10000cb7 <backupTree(char*, unsigned short)+0x170>
10000d04:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000d07:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
10000d0a:	83 e0 02             	and    eax,0x2
10000d0d:	85 c0                	test   eax,eax
10000d0f:	74 37                	je     10000d48 <backupTree(char*, unsigned short)+0x201>
10000d11:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000d14:	83 c0 10             	add    eax,0x10
10000d17:	83 ec 08             	sub    esp,0x8
10000d1a:	68 79 44 00 10       	push   0x10004479	10000d1b: R_386_32	.text
10000d1f:	50                   	push   eax
10000d20:	e8 fc ff ff ff       	call   10000d21 <backupTree(char*, unsigned short)+0x1da>	10000d21: R_386_PC32	strcmp
10000d25:	83 c4 10             	add    esp,0x10
10000d28:	85 c0                	test   eax,eax
10000d2a:	0f 84 d8 fe ff ff    	je     10000c08 <backupTree(char*, unsigned short)+0xc1>
10000d30:	0f b7 45 e6          	movzx  eax,WORD PTR [ebp-0x1a]
10000d34:	83 ec 08             	sub    esp,0x8
10000d37:	50                   	push   eax
10000d38:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000d3b:	e8 fc ff ff ff       	call   10000d3c <backupTree(char*, unsigned short)+0x1f5>	10000d3c: R_386_PC32	backupTree(char*, unsigned short)
10000d40:	83 c4 10             	add    esp,0x10
10000d43:	e9 c0 fe ff ff       	jmp    10000c08 <backupTree(char*, unsigned short)+0xc1>
10000d48:	c6 85 a3 fe ff ff 00 	mov    BYTE PTR [ebp-0x15d],0x0
10000d4f:	83 ec 08             	sub    esp,0x8
10000d52:	68 80 44 00 10       	push   0x10004480	10000d53: R_386_32	.text
10000d57:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000d5d:	50                   	push   eax
10000d5e:	e8 fc ff ff ff       	call   10000d5f <backupTree(char*, unsigned short)+0x218>	10000d5f: R_386_PC32	strcpy
10000d63:	83 c4 10             	add    esp,0x10
10000d66:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000d69:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
10000d6c:	88 85 a2 fe ff ff    	mov    BYTE PTR [ebp-0x15e],al
10000d72:	83 ec 08             	sub    esp,0x8
10000d75:	8d 85 a2 fe ff ff    	lea    eax,[ebp-0x15e]
10000d7b:	50                   	push   eax
10000d7c:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000d82:	50                   	push   eax
10000d83:	e8 fc ff ff ff       	call   10000d84 <backupTree(char*, unsigned short)+0x23d>	10000d84: R_386_PC32	strcat
10000d88:	83 c4 10             	add    esp,0x10
10000d8b:	83 ec 04             	sub    esp,0x4
10000d8e:	6a 09                	push   0x9
10000d90:	6a 00                	push   0x0
10000d92:	8d 85 99 fe ff ff    	lea    eax,[ebp-0x167]
10000d98:	50                   	push   eax
10000d99:	e8 fc ff ff ff       	call   10000d9a <backupTree(char*, unsigned short)+0x253>	10000d9a: R_386_PC32	memset
10000d9e:	83 c4 10             	add    esp,0x10
10000da1:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000da4:	83 c0 10             	add    eax,0x10
10000da7:	83 ec 04             	sub    esp,0x4
10000daa:	6a 08                	push   0x8
10000dac:	50                   	push   eax
10000dad:	8d 85 99 fe ff ff    	lea    eax,[ebp-0x167]
10000db3:	50                   	push   eax
10000db4:	e8 fc ff ff ff       	call   10000db5 <backupTree(char*, unsigned short)+0x26e>	10000db5: R_386_PC32	strncpyxx(char*, char const*, unsigned long)
10000db9:	83 c4 10             	add    esp,0x10
10000dbc:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
10000dc3:	83 7d dc 07          	cmp    DWORD PTR [ebp-0x24],0x7
10000dc7:	0f 8f c5 00 00 00    	jg     10000e92 <backupTree(char*, unsigned short)+0x34b>
10000dcd:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000dd3:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000dd6:	01 d0                	add    eax,edx
10000dd8:	8a 00                	mov    al,BYTE PTR [eax]
10000dda:	3c 60                	cmp    al,0x60
10000ddc:	7e 30                	jle    10000e0e <backupTree(char*, unsigned short)+0x2c7>
10000dde:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000de4:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000de7:	01 d0                	add    eax,edx
10000de9:	8a 00                	mov    al,BYTE PTR [eax]
10000deb:	3c 7a                	cmp    al,0x7a
10000ded:	7f 1f                	jg     10000e0e <backupTree(char*, unsigned short)+0x2c7>
10000def:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000df5:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000df8:	01 d0                	add    eax,edx
10000dfa:	8a 00                	mov    al,BYTE PTR [eax]
10000dfc:	83 e8 20             	sub    eax,0x20
10000dff:	88 c2                	mov    dl,al
10000e01:	8d 8d 99 fe ff ff    	lea    ecx,[ebp-0x167]
10000e07:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e0a:	01 c8                	add    eax,ecx
10000e0c:	88 10                	mov    BYTE PTR [eax],dl
10000e0e:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000e14:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e17:	01 d0                	add    eax,edx
10000e19:	8a 00                	mov    al,BYTE PTR [eax]
10000e1b:	3c 59                	cmp    al,0x59
10000e1d:	75 0e                	jne    10000e2d <backupTree(char*, unsigned short)+0x2e6>
10000e1f:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000e25:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e28:	01 d0                	add    eax,edx
10000e2a:	c6 00 51             	mov    BYTE PTR [eax],0x51
10000e2d:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000e33:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e36:	01 d0                	add    eax,edx
10000e38:	8a 00                	mov    al,BYTE PTR [eax]
10000e3a:	3c 5a                	cmp    al,0x5a
10000e3c:	75 0e                	jne    10000e4c <backupTree(char*, unsigned short)+0x305>
10000e3e:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000e44:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e47:	01 d0                	add    eax,edx
10000e49:	c6 00 51             	mov    BYTE PTR [eax],0x51
10000e4c:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000e52:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e55:	01 d0                	add    eax,edx
10000e57:	8a 00                	mov    al,BYTE PTR [eax]
10000e59:	3c 20                	cmp    al,0x20
10000e5b:	75 0e                	jne    10000e6b <backupTree(char*, unsigned short)+0x324>
10000e5d:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000e63:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e66:	01 d0                	add    eax,edx
10000e68:	c6 00 59             	mov    BYTE PTR [eax],0x59
10000e6b:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000e71:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e74:	01 d0                	add    eax,edx
10000e76:	8a 00                	mov    al,BYTE PTR [eax]
10000e78:	3c 2e                	cmp    al,0x2e
10000e7a:	75 0e                	jne    10000e8a <backupTree(char*, unsigned short)+0x343>
10000e7c:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000e82:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e85:	01 d0                	add    eax,edx
10000e87:	c6 00 5a             	mov    BYTE PTR [eax],0x5a
10000e8a:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
10000e8d:	e9 31 ff ff ff       	jmp    10000dc3 <backupTree(char*, unsigned short)+0x27c>
10000e92:	83 ec 08             	sub    esp,0x8
10000e95:	8d 85 99 fe ff ff    	lea    eax,[ebp-0x167]
10000e9b:	50                   	push   eax
10000e9c:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000ea2:	50                   	push   eax
10000ea3:	e8 fc ff ff ff       	call   10000ea4 <backupTree(char*, unsigned short)+0x35d>	10000ea4: R_386_PC32	strcat
10000ea8:	83 c4 10             	add    esp,0x10
10000eab:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000eae:	83 c0 10             	add    eax,0x10
10000eb1:	83 ec 0c             	sub    esp,0xc
10000eb4:	50                   	push   eax
10000eb5:	e8 fc ff ff ff       	call   10000eb6 <backupTree(char*, unsigned short)+0x36f>	10000eb6: R_386_PC32	strlen
10000eba:	83 c4 10             	add    esp,0x10
10000ebd:	83 c0 41             	add    eax,0x41
10000ec0:	88 85 a2 fe ff ff    	mov    BYTE PTR [ebp-0x15e],al
10000ec6:	83 ec 08             	sub    esp,0x8
10000ec9:	8d 85 a2 fe ff ff    	lea    eax,[ebp-0x15e]
10000ecf:	50                   	push   eax
10000ed0:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000ed6:	50                   	push   eax
10000ed7:	e8 fc ff ff ff       	call   10000ed8 <backupTree(char*, unsigned short)+0x391>	10000ed8: R_386_PC32	strcat
10000edc:	83 c4 10             	add    esp,0x10
10000edf:	83 ec 08             	sub    esp,0x8
10000ee2:	68 24 44 00 10       	push   0x10004424	10000ee3: R_386_32	.text
10000ee7:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000eed:	50                   	push   eax
10000eee:	e8 fc ff ff ff       	call   10000eef <backupTree(char*, unsigned short)+0x3a8>	10000eef: R_386_PC32	strcat
10000ef3:	83 c4 10             	add    esp,0x10
10000ef6:	66 8b 45 e6          	mov    ax,WORD PTR [ebp-0x1a]
10000efa:	25 65 07 00 00       	and    eax,0x765
10000eff:	33 85 74 ed ff ff    	xor    eax,DWORD PTR [ebp-0x128c]
10000f05:	66 89 45 c6          	mov    WORD PTR [ebp-0x3a],ax
10000f09:	8d 85 88 fe ff ff    	lea    eax,[ebp-0x178]
10000f0f:	bb 99 44 00 10       	mov    ebx,0x10004499	10000f10: R_386_32	.text
10000f14:	ba 11 00 00 00       	mov    edx,0x11
10000f19:	89 c7                	mov    edi,eax
10000f1b:	89 de                	mov    esi,ebx
10000f1d:	89 d1                	mov    ecx,edx
10000f1f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
10000f21:	0f b7 45 c6          	movzx  eax,WORD PTR [ebp-0x3a]
10000f25:	83 e0 0f             	and    eax,0xf
10000f28:	8a 84 05 88 fe ff ff 	mov    al,BYTE PTR [ebp+eax*1-0x178]
10000f2f:	88 85 a2 fe ff ff    	mov    BYTE PTR [ebp-0x15e],al
10000f35:	83 ec 08             	sub    esp,0x8
10000f38:	8d 85 a2 fe ff ff    	lea    eax,[ebp-0x15e]
10000f3e:	50                   	push   eax
10000f3f:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000f45:	50                   	push   eax
10000f46:	e8 fc ff ff ff       	call   10000f47 <backupTree(char*, unsigned short)+0x400>	10000f47: R_386_PC32	strcat
10000f4b:	83 c4 10             	add    esp,0x10
10000f4e:	0f b7 45 c6          	movzx  eax,WORD PTR [ebp-0x3a]
10000f52:	c1 f8 04             	sar    eax,0x4
10000f55:	83 e0 0f             	and    eax,0xf
10000f58:	8a 84 05 88 fe ff ff 	mov    al,BYTE PTR [ebp+eax*1-0x178]
10000f5f:	88 85 a2 fe ff ff    	mov    BYTE PTR [ebp-0x15e],al
10000f65:	83 ec 08             	sub    esp,0x8
10000f68:	8d 85 a2 fe ff ff    	lea    eax,[ebp-0x15e]
10000f6e:	50                   	push   eax
10000f6f:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000f75:	50                   	push   eax
10000f76:	e8 fc ff ff ff       	call   10000f77 <backupTree(char*, unsigned short)+0x430>	10000f77: R_386_PC32	strcat
10000f7b:	83 c4 10             	add    esp,0x10
10000f7e:	0f b7 45 c6          	movzx  eax,WORD PTR [ebp-0x3a]
10000f82:	c1 f8 08             	sar    eax,0x8
10000f85:	83 e0 0f             	and    eax,0xf
10000f88:	8a 84 05 88 fe ff ff 	mov    al,BYTE PTR [ebp+eax*1-0x178]
10000f8f:	88 85 a2 fe ff ff    	mov    BYTE PTR [ebp-0x15e],al
10000f95:	83 ec 08             	sub    esp,0x8
10000f98:	8d 85 a2 fe ff ff    	lea    eax,[ebp-0x15e]
10000f9e:	50                   	push   eax
10000f9f:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000fa5:	50                   	push   eax
10000fa6:	e8 fc ff ff ff       	call   10000fa7 <backupTree(char*, unsigned short)+0x460>	10000fa7: R_386_PC32	strcat
10000fab:	83 c4 10             	add    esp,0x10
10000fae:	66 8b 45 c6          	mov    ax,WORD PTR [ebp-0x3a]
10000fb2:	66 c1 e8 0c          	shr    ax,0xc
10000fb6:	0f b7 c0             	movzx  eax,ax
10000fb9:	8a 84 05 88 fe ff ff 	mov    al,BYTE PTR [ebp+eax*1-0x178]
10000fc0:	88 85 a2 fe ff ff    	mov    BYTE PTR [ebp-0x15e],al
10000fc6:	83 ec 08             	sub    esp,0x8
10000fc9:	8d 85 a2 fe ff ff    	lea    eax,[ebp-0x15e]
10000fcf:	50                   	push   eax
10000fd0:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000fd6:	50                   	push   eax
10000fd7:	e8 fc ff ff ff       	call   10000fd8 <backupTree(char*, unsigned short)+0x491>	10000fd8: R_386_PC32	strcat
10000fdc:	83 c4 10             	add    esp,0x10
10000fdf:	83 ec 0c             	sub    esp,0xc
10000fe2:	68 14 01 00 00       	push   0x114
10000fe7:	e8 fc ff ff ff       	call   10000fe8 <backupTree(char*, unsigned short)+0x4a1>	10000fe8: R_386_PC32	operator new(unsigned long)
10000fec:	83 c4 10             	add    esp,0x10
10000fef:	89 c3                	mov    ebx,eax
10000ff1:	b8 00 20 00 c2       	mov    eax,0xc2002000
10000ff6:	8b 00                	mov    eax,DWORD PTR [eax]
10000ff8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
10000ffb:	83 ec 04             	sub    esp,0x4
10000ffe:	50                   	push   eax
10000fff:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10001002:	53                   	push   ebx
10001003:	e8 fc ff ff ff       	call   10001004 <backupTree(char*, unsigned short)+0x4bd>	10001004: R_386_PC32	File::File(char const*, Process*)
10001008:	83 c4 10             	add    esp,0x10
1000100b:	89 5d c0             	mov    DWORD PTR [ebp-0x40],ebx
1000100e:	83 ec 08             	sub    esp,0x8
10001011:	6a 01                	push   0x1
10001013:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
10001016:	e8 fc ff ff ff       	call   10001017 <backupTree(char*, unsigned short)+0x4d0>	10001017: R_386_PC32	File::open(FileOpenMode)
1000101b:	83 c4 10             	add    esp,0x10
1000101e:	83 7d c0 00          	cmp    DWORD PTR [ebp-0x40],0x0
10001022:	75 15                	jne    10001039 <backupTree(char*, unsigned short)+0x4f2>
10001024:	83 ec 0c             	sub    esp,0xc
10001027:	68 60 44 00 10       	push   0x10004460	10001028: R_386_32	.text
1000102c:	e8 fc ff ff ff       	call   1000102d <backupTree(char*, unsigned short)+0x4e6>	1000102d: R_386_PC32	KePanic(char const*)
10001031:	83 c4 10             	add    esp,0x10
10001034:	e9 3e 01 00 00       	jmp    10001177 <backupTree(char*, unsigned short)+0x630>
10001039:	83 7d c0 00          	cmp    DWORD PTR [ebp-0x40],0x0
1000103d:	0f 84 c5 fb ff ff    	je     10000c08 <backupTree(char*, unsigned short)+0xc1>
10001043:	83 ec 0c             	sub    esp,0xc
10001046:	68 14 01 00 00       	push   0x114
1000104b:	e8 fc ff ff ff       	call   1000104c <backupTree(char*, unsigned short)+0x505>	1000104c: R_386_PC32	operator new(unsigned long)
10001050:	83 c4 10             	add    esp,0x10
10001053:	89 c3                	mov    ebx,eax
10001055:	b8 00 20 00 c2       	mov    eax,0xc2002000
1000105a:	8b 00                	mov    eax,DWORD PTR [eax]
1000105c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
1000105f:	83 ec 04             	sub    esp,0x4
10001062:	50                   	push   eax
10001063:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10001069:	50                   	push   eax
1000106a:	53                   	push   ebx
1000106b:	e8 fc ff ff ff       	call   1000106c <backupTree(char*, unsigned short)+0x525>	1000106c: R_386_PC32	File::File(char const*, Process*)
10001070:	83 c4 10             	add    esp,0x10
10001073:	89 5d bc             	mov    DWORD PTR [ebp-0x44],ebx
10001076:	83 ec 08             	sub    esp,0x8
10001079:	6a 12                	push   0x12
1000107b:	ff 75 bc             	push   DWORD PTR [ebp-0x44]
1000107e:	e8 fc ff ff ff       	call   1000107f <backupTree(char*, unsigned short)+0x538>	1000107f: R_386_PC32	File::open(FileOpenMode)
10001083:	83 c4 10             	add    esp,0x10
10001086:	83 7d bc 00          	cmp    DWORD PTR [ebp-0x44],0x0
1000108a:	75 23                	jne    100010af <backupTree(char*, unsigned short)+0x568>
1000108c:	83 ec 0c             	sub    esp,0xc
1000108f:	68 60 44 00 10       	push   0x10004460	10001090: R_386_32	.text
10001094:	e8 fc ff ff ff       	call   10001095 <backupTree(char*, unsigned short)+0x54e>	10001095: R_386_PC32	KePanic(char const*)
10001099:	83 c4 10             	add    esp,0x10
1000109c:	83 ec 0c             	sub    esp,0xc
1000109f:	ff 75 bc             	push   DWORD PTR [ebp-0x44]
100010a2:	e8 fc ff ff ff       	call   100010a3 <backupTree(char*, unsigned short)+0x55c>	100010a3: R_386_PC32	File::close()
100010a7:	83 c4 10             	add    esp,0x10
100010aa:	e9 c8 00 00 00       	jmp    10001177 <backupTree(char*, unsigned short)+0x630>
100010af:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
100010b2:	8b 00                	mov    eax,DWORD PTR [eax]
100010b4:	83 c0 0c             	add    eax,0xc
100010b7:	8b 00                	mov    eax,DWORD PTR [eax]
100010b9:	83 ec 0c             	sub    esp,0xc
100010bc:	8d 95 84 fe ff ff    	lea    edx,[ebp-0x17c]
100010c2:	52                   	push   edx
100010c3:	8d 95 80 ee ff ff    	lea    edx,[ebp-0x1180]
100010c9:	52                   	push   edx
100010ca:	6a 00                	push   0x0
100010cc:	68 00 10 00 00       	push   0x1000
100010d1:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
100010d4:	ff d0                	call   eax
100010d6:	83 c4 20             	add    esp,0x20
100010d9:	89 45 b8             	mov    DWORD PTR [ebp-0x48],eax
100010dc:	83 7d b8 00          	cmp    DWORD PTR [ebp-0x48],0x0
100010e0:	75 3b                	jne    1000111d <backupTree(char*, unsigned short)+0x5d6>
100010e2:	8b 45 bc             	mov    eax,DWORD PTR [ebp-0x44]
100010e5:	8b 00                	mov    eax,DWORD PTR [eax]
100010e7:	83 c0 10             	add    eax,0x10
100010ea:	8b 08                	mov    ecx,DWORD PTR [eax]
100010ec:	8b 85 84 fe ff ff    	mov    eax,DWORD PTR [ebp-0x17c]
100010f2:	99                   	cdq    
100010f3:	83 ec 0c             	sub    esp,0xc
100010f6:	8d 9d 80 fe ff ff    	lea    ebx,[ebp-0x180]
100010fc:	53                   	push   ebx
100010fd:	8d 9d 80 ee ff ff    	lea    ebx,[ebp-0x1180]
10001103:	53                   	push   ebx
10001104:	52                   	push   edx
10001105:	50                   	push   eax
10001106:	ff 75 bc             	push   DWORD PTR [ebp-0x44]
10001109:	ff d1                	call   ecx
1000110b:	83 c4 20             	add    esp,0x20
1000110e:	8b 85 84 fe ff ff    	mov    eax,DWORD PTR [ebp-0x17c]
10001114:	3d 00 10 00 00       	cmp    eax,0x1000
10001119:	75 05                	jne    10001120 <backupTree(char*, unsigned short)+0x5d9>
1000111b:	eb 92                	jmp    100010af <backupTree(char*, unsigned short)+0x568>
1000111d:	90                   	nop
1000111e:	eb 01                	jmp    10001121 <backupTree(char*, unsigned short)+0x5da>
10001120:	90                   	nop
10001121:	83 ec 0c             	sub    esp,0xc
10001124:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
10001127:	e8 fc ff ff ff       	call   10001128 <backupTree(char*, unsigned short)+0x5e1>	10001128: R_386_PC32	File::close()
1000112c:	83 c4 10             	add    esp,0x10
1000112f:	83 ec 0c             	sub    esp,0xc
10001132:	ff 75 bc             	push   DWORD PTR [ebp-0x44]
10001135:	e8 fc ff ff ff       	call   10001136 <backupTree(char*, unsigned short)+0x5ef>	10001136: R_386_PC32	File::close()
1000113a:	83 c4 10             	add    esp,0x10
1000113d:	83 7d c0 00          	cmp    DWORD PTR [ebp-0x40],0x0
10001141:	74 15                	je     10001158 <backupTree(char*, unsigned short)+0x611>
10001143:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
10001146:	8b 00                	mov    eax,DWORD PTR [eax]
10001148:	83 c0 08             	add    eax,0x8
1000114b:	8b 00                	mov    eax,DWORD PTR [eax]
1000114d:	83 ec 0c             	sub    esp,0xc
10001150:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
10001153:	ff d0                	call   eax
10001155:	83 c4 10             	add    esp,0x10
10001158:	83 7d bc 00          	cmp    DWORD PTR [ebp-0x44],0x0
1000115c:	0f 84 a6 fa ff ff    	je     10000c08 <backupTree(char*, unsigned short)+0xc1>
10001162:	8b 45 bc             	mov    eax,DWORD PTR [ebp-0x44]
10001165:	8b 00                	mov    eax,DWORD PTR [eax]
10001167:	83 c0 08             	add    eax,0x8
1000116a:	8b 00                	mov    eax,DWORD PTR [eax]
1000116c:	83 ec 0c             	sub    esp,0xc
1000116f:	ff 75 bc             	push   DWORD PTR [ebp-0x44]
10001172:	ff d0                	call   eax
10001174:	83 c4 10             	add    esp,0x10
10001177:	e9 8c fa ff ff       	jmp    10000c08 <backupTree(char*, unsigned short)+0xc1>
1000117c:	90                   	nop
1000117d:	83 ec 0c             	sub    esp,0xc
10001180:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10001183:	e8 fc ff ff ff       	call   10001184 <backupTree(char*, unsigned short)+0x63d>	10001184: R_386_PC32	free
10001188:	83 c4 10             	add    esp,0x10
1000118b:	83 ec 0c             	sub    esp,0xc
1000118e:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10001191:	e8 fc ff ff ff       	call   10001192 <backupTree(char*, unsigned short)+0x64b>	10001192: R_386_PC32	Directory::close()
10001196:	83 c4 10             	add    esp,0x10
10001199:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
1000119d:	74 18                	je     100011b7 <backupTree(char*, unsigned short)+0x670>
1000119f:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
100011a2:	8b 00                	mov    eax,DWORD PTR [eax]
100011a4:	83 c0 08             	add    eax,0x8
100011a7:	8b 00                	mov    eax,DWORD PTR [eax]
100011a9:	83 ec 0c             	sub    esp,0xc
100011ac:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
100011af:	ff d0                	call   eax
100011b1:	83 c4 10             	add    esp,0x10
100011b4:	eb 01                	jmp    100011b7 <backupTree(char*, unsigned short)+0x670>
100011b6:	90                   	nop
100011b7:	8d 65 f4             	lea    esp,[ebp-0xc]
100011ba:	5b                   	pop    ebx
100011bb:	5e                   	pop    esi
100011bc:	5f                   	pop    edi
100011bd:	5d                   	pop    ebp
100011be:	c3                   	ret    

100011bf <createUser(char const*)>:
100011bf:	55                   	push   ebp
100011c0:	89 e5                	mov    ebp,esp
100011c2:	81 ec 08 01 00 00    	sub    esp,0x108
100011c8:	68 aa 44 00 10       	push   0x100044aa	100011c9: R_386_32	.text
100011cd:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100011d3:	50                   	push   eax
100011d4:	e8 fc ff ff ff       	call   100011d5 <createUser(char const*)+0x16>	100011d5: R_386_PC32	strcpy
100011d9:	83 c4 08             	add    esp,0x8
100011dc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100011df:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100011e5:	50                   	push   eax
100011e6:	e8 fc ff ff ff       	call   100011e7 <createUser(char const*)+0x28>	100011e7: R_386_PC32	strcat
100011eb:	83 c4 08             	add    esp,0x8
100011ee:	83 ec 08             	sub    esp,0x8
100011f1:	68 c0 01 00 00       	push   0x1c0
100011f6:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100011fc:	50                   	push   eax
100011fd:	e8 fc ff ff ff       	call   100011fe <createUser(char const*)+0x3f>	100011fe: R_386_PC32	mkdir(char const*, int)
10001202:	83 c4 10             	add    esp,0x10
10001205:	83 ec 08             	sub    esp,0x8
10001208:	68 b4 44 00 10       	push   0x100044b4	10001209: R_386_32	.text
1000120d:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001213:	50                   	push   eax
10001214:	e8 fc ff ff ff       	call   10001215 <createUser(char const*)+0x56>	10001215: R_386_PC32	strcat
10001219:	83 c4 10             	add    esp,0x10
1000121c:	83 ec 08             	sub    esp,0x8
1000121f:	68 c0 01 00 00       	push   0x1c0
10001224:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000122a:	50                   	push   eax
1000122b:	e8 fc ff ff ff       	call   1000122c <createUser(char const*)+0x6d>	1000122c: R_386_PC32	mkdir(char const*, int)
10001230:	83 c4 10             	add    esp,0x10
10001233:	83 ec 08             	sub    esp,0x8
10001236:	68 aa 44 00 10       	push   0x100044aa	10001237: R_386_32	.text
1000123b:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001241:	50                   	push   eax
10001242:	e8 fc ff ff ff       	call   10001243 <createUser(char const*)+0x84>	10001243: R_386_PC32	strcpy
10001247:	83 c4 10             	add    esp,0x10
1000124a:	83 ec 08             	sub    esp,0x8
1000124d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001250:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001256:	50                   	push   eax
10001257:	e8 fc ff ff ff       	call   10001258 <createUser(char const*)+0x99>	10001258: R_386_PC32	strcat
1000125c:	83 c4 10             	add    esp,0x10
1000125f:	83 ec 08             	sub    esp,0x8
10001262:	68 bd 44 00 10       	push   0x100044bd	10001263: R_386_32	.text
10001267:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000126d:	50                   	push   eax
1000126e:	e8 fc ff ff ff       	call   1000126f <createUser(char const*)+0xb0>	1000126f: R_386_PC32	strcat
10001273:	83 c4 10             	add    esp,0x10
10001276:	83 ec 08             	sub    esp,0x8
10001279:	68 c0 01 00 00       	push   0x1c0
1000127e:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001284:	50                   	push   eax
10001285:	e8 fc ff ff ff       	call   10001286 <createUser(char const*)+0xc7>	10001286: R_386_PC32	mkdir(char const*, int)
1000128a:	83 c4 10             	add    esp,0x10
1000128d:	83 ec 08             	sub    esp,0x8
10001290:	68 aa 44 00 10       	push   0x100044aa	10001291: R_386_32	.text
10001295:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000129b:	50                   	push   eax
1000129c:	e8 fc ff ff ff       	call   1000129d <createUser(char const*)+0xde>	1000129d: R_386_PC32	strcpy
100012a1:	83 c4 10             	add    esp,0x10
100012a4:	83 ec 08             	sub    esp,0x8
100012a7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100012aa:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100012b0:	50                   	push   eax
100012b1:	e8 fc ff ff ff       	call   100012b2 <createUser(char const*)+0xf3>	100012b2: R_386_PC32	strcat
100012b6:	83 c4 10             	add    esp,0x10
100012b9:	83 ec 08             	sub    esp,0x8
100012bc:	68 c8 44 00 10       	push   0x100044c8	100012bd: R_386_32	.text
100012c1:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100012c7:	50                   	push   eax
100012c8:	e8 fc ff ff ff       	call   100012c9 <createUser(char const*)+0x10a>	100012c9: R_386_PC32	strcat
100012cd:	83 c4 10             	add    esp,0x10
100012d0:	83 ec 08             	sub    esp,0x8
100012d3:	68 c0 01 00 00       	push   0x1c0
100012d8:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100012de:	50                   	push   eax
100012df:	e8 fc ff ff ff       	call   100012e0 <createUser(char const*)+0x121>	100012e0: R_386_PC32	mkdir(char const*, int)
100012e4:	83 c4 10             	add    esp,0x10
100012e7:	83 ec 08             	sub    esp,0x8
100012ea:	68 aa 44 00 10       	push   0x100044aa	100012eb: R_386_32	.text
100012ef:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100012f5:	50                   	push   eax
100012f6:	e8 fc ff ff ff       	call   100012f7 <createUser(char const*)+0x138>	100012f7: R_386_PC32	strcpy
100012fb:	83 c4 10             	add    esp,0x10
100012fe:	83 ec 08             	sub    esp,0x8
10001301:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001304:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000130a:	50                   	push   eax
1000130b:	e8 fc ff ff ff       	call   1000130c <createUser(char const*)+0x14d>	1000130c: R_386_PC32	strcat
10001310:	83 c4 10             	add    esp,0x10
10001313:	83 ec 08             	sub    esp,0x8
10001316:	68 d3 44 00 10       	push   0x100044d3	10001317: R_386_32	.text
1000131b:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001321:	50                   	push   eax
10001322:	e8 fc ff ff ff       	call   10001323 <createUser(char const*)+0x164>	10001323: R_386_PC32	strcat
10001327:	83 c4 10             	add    esp,0x10
1000132a:	83 ec 08             	sub    esp,0x8
1000132d:	68 c0 01 00 00       	push   0x1c0
10001332:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001338:	50                   	push   eax
10001339:	e8 fc ff ff ff       	call   1000133a <createUser(char const*)+0x17b>	1000133a: R_386_PC32	mkdir(char const*, int)
1000133e:	83 c4 10             	add    esp,0x10
10001341:	83 ec 08             	sub    esp,0x8
10001344:	68 aa 44 00 10       	push   0x100044aa	10001345: R_386_32	.text
10001349:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000134f:	50                   	push   eax
10001350:	e8 fc ff ff ff       	call   10001351 <createUser(char const*)+0x192>	10001351: R_386_PC32	strcpy
10001355:	83 c4 10             	add    esp,0x10
10001358:	83 ec 08             	sub    esp,0x8
1000135b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000135e:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001364:	50                   	push   eax
10001365:	e8 fc ff ff ff       	call   10001366 <createUser(char const*)+0x1a7>	10001366: R_386_PC32	strcat
1000136a:	83 c4 10             	add    esp,0x10
1000136d:	83 ec 08             	sub    esp,0x8
10001370:	68 db 44 00 10       	push   0x100044db	10001371: R_386_32	.text
10001375:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000137b:	50                   	push   eax
1000137c:	e8 fc ff ff ff       	call   1000137d <createUser(char const*)+0x1be>	1000137d: R_386_PC32	strcat
10001381:	83 c4 10             	add    esp,0x10
10001384:	83 ec 08             	sub    esp,0x8
10001387:	68 c0 01 00 00       	push   0x1c0
1000138c:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001392:	50                   	push   eax
10001393:	e8 fc ff ff ff       	call   10001394 <createUser(char const*)+0x1d5>	10001394: R_386_PC32	mkdir(char const*, int)
10001398:	83 c4 10             	add    esp,0x10
1000139b:	83 ec 08             	sub    esp,0x8
1000139e:	68 aa 44 00 10       	push   0x100044aa	1000139f: R_386_32	.text
100013a3:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100013a9:	50                   	push   eax
100013aa:	e8 fc ff ff ff       	call   100013ab <createUser(char const*)+0x1ec>	100013ab: R_386_PC32	strcpy
100013af:	83 c4 10             	add    esp,0x10
100013b2:	83 ec 08             	sub    esp,0x8
100013b5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100013b8:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100013be:	50                   	push   eax
100013bf:	e8 fc ff ff ff       	call   100013c0 <createUser(char const*)+0x201>	100013c0: R_386_PC32	strcat
100013c4:	83 c4 10             	add    esp,0x10
100013c7:	83 ec 08             	sub    esp,0x8
100013ca:	68 e6 44 00 10       	push   0x100044e6	100013cb: R_386_32	.text
100013cf:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100013d5:	50                   	push   eax
100013d6:	e8 fc ff ff ff       	call   100013d7 <createUser(char const*)+0x218>	100013d7: R_386_PC32	strcat
100013db:	83 c4 10             	add    esp,0x10
100013de:	83 ec 08             	sub    esp,0x8
100013e1:	68 c0 01 00 00       	push   0x1c0
100013e6:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100013ec:	50                   	push   eax
100013ed:	e8 fc ff ff ff       	call   100013ee <createUser(char const*)+0x22f>	100013ee: R_386_PC32	mkdir(char const*, int)
100013f2:	83 c4 10             	add    esp,0x10
100013f5:	83 ec 08             	sub    esp,0x8
100013f8:	68 aa 44 00 10       	push   0x100044aa	100013f9: R_386_32	.text
100013fd:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001403:	50                   	push   eax
10001404:	e8 fc ff ff ff       	call   10001405 <createUser(char const*)+0x246>	10001405: R_386_PC32	strcpy
10001409:	83 c4 10             	add    esp,0x10
1000140c:	83 ec 08             	sub    esp,0x8
1000140f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001412:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001418:	50                   	push   eax
10001419:	e8 fc ff ff ff       	call   1000141a <createUser(char const*)+0x25b>	1000141a: R_386_PC32	strcat
1000141e:	83 c4 10             	add    esp,0x10
10001421:	83 ec 08             	sub    esp,0x8
10001424:	68 ed 44 00 10       	push   0x100044ed	10001425: R_386_32	.text
10001429:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000142f:	50                   	push   eax
10001430:	e8 fc ff ff ff       	call   10001431 <createUser(char const*)+0x272>	10001431: R_386_PC32	strcat
10001435:	83 c4 10             	add    esp,0x10
10001438:	83 ec 08             	sub    esp,0x8
1000143b:	68 c0 01 00 00       	push   0x1c0
10001440:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001446:	50                   	push   eax
10001447:	e8 fc ff ff ff       	call   10001448 <createUser(char const*)+0x289>	10001448: R_386_PC32	mkdir(char const*, int)
1000144c:	83 c4 10             	add    esp,0x10
1000144f:	83 ec 08             	sub    esp,0x8
10001452:	68 f5 44 00 10       	push   0x100044f5	10001453: R_386_32	.text
10001457:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000145d:	50                   	push   eax
1000145e:	e8 fc ff ff ff       	call   1000145f <createUser(char const*)+0x2a0>	1000145f: R_386_PC32	strcpy
10001463:	83 c4 10             	add    esp,0x10
10001466:	83 ec 08             	sub    esp,0x8
10001469:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000146c:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001472:	50                   	push   eax
10001473:	e8 fc ff ff ff       	call   10001474 <createUser(char const*)+0x2b5>	10001474: R_386_PC32	strcat
10001478:	83 c4 10             	add    esp,0x10
1000147b:	83 ec 08             	sub    esp,0x8
1000147e:	68 c0 01 00 00       	push   0x1c0
10001483:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001489:	50                   	push   eax
1000148a:	e8 fc ff ff ff       	call   1000148b <createUser(char const*)+0x2cc>	1000148b: R_386_PC32	mkdir(char const*, int)
1000148f:	83 c4 10             	add    esp,0x10
10001492:	83 ec 08             	sub    esp,0x8
10001495:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000149b:	50                   	push   eax
1000149c:	68 10 45 00 10       	push   0x10004510	1000149d: R_386_32	.text
100014a1:	e8 fc ff ff ff       	call   100014a2 <createUser(char const*)+0x2e3>	100014a2: R_386_PC32	copytree(char*, char*)
100014a6:	83 c4 10             	add    esp,0x10
100014a9:	90                   	nop
100014aa:	c9                   	leave  
100014ab:	c3                   	ret    

100014ac <drawBootScreen()>:
100014ac:	55                   	push   ebp
100014ad:	89 e5                	mov    ebp,esp
100014af:	83 ec 18             	sub    esp,0x18
100014b2:	a1 00 00 00 00       	mov    eax,ds:0x0	100014b3: R_386_32	term
100014b7:	83 ec 08             	sub    esp,0x8
100014ba:	6a 0b                	push   0xb
100014bc:	50                   	push   eax
100014bd:	e8 fc ff ff ff       	call   100014be <drawBootScreen()+0x12>	100014be: R_386_PC32	VgaText::setDefaultBgColour(VgaColour)
100014c2:	83 c4 10             	add    esp,0x10
100014c5:	a1 00 00 00 00       	mov    eax,ds:0x0	100014c6: R_386_32	term
100014ca:	83 ec 08             	sub    esp,0x8
100014cd:	6a 00                	push   0x0
100014cf:	50                   	push   eax
100014d0:	e8 fc ff ff ff       	call   100014d1 <drawBootScreen()+0x25>	100014d1: R_386_PC32	VgaText::setDefaultFgColour(VgaColour)
100014d5:	83 c4 10             	add    esp,0x10
100014d8:	a1 00 00 00 00       	mov    eax,ds:0x0	100014d9: R_386_32	term
100014dd:	83 ec 0c             	sub    esp,0xc
100014e0:	50                   	push   eax
100014e1:	e8 fc ff ff ff       	call   100014e2 <drawBootScreen()+0x36>	100014e2: R_386_PC32	VgaText::clearScreen()
100014e6:	83 c4 10             	add    esp,0x10
100014e9:	a1 00 00 00 00       	mov    eax,ds:0x0	100014ea: R_386_32	term
100014ee:	83 ec 08             	sub    esp,0x8
100014f1:	68 2f 45 00 10       	push   0x1000452f	100014f2: R_386_32	.text
100014f6:	50                   	push   eax
100014f7:	e8 fc ff ff ff       	call   100014f8 <drawBootScreen()+0x4c>	100014f8: R_386_PC32	VgaText::setTitle(char*)
100014fc:	83 c4 10             	add    esp,0x10
100014ff:	a1 00 00 00 00       	mov    eax,ds:0x0	10001500: R_386_32	term
10001504:	83 ec 08             	sub    esp,0x8
10001507:	6a 00                	push   0x0
10001509:	50                   	push   eax
1000150a:	e8 fc ff ff ff       	call   1000150b <drawBootScreen()+0x5f>	1000150b: R_386_PC32	VgaText::setTitleColour(VgaColour)
1000150f:	83 c4 10             	add    esp,0x10
10001512:	a1 00 00 00 00       	mov    eax,ds:0x0	10001513: R_386_32	term
10001517:	83 ec 08             	sub    esp,0x8
1000151a:	6a 00                	push   0x0
1000151c:	50                   	push   eax
1000151d:	e8 fc ff ff ff       	call   1000151e <drawBootScreen()+0x72>	1000151e: R_386_PC32	VgaText::setTitleTextColour(VgaColour)
10001522:	83 c4 10             	add    esp,0x10
10001525:	a1 00 00 00 00       	mov    eax,ds:0x0	10001526: R_386_32	term
1000152a:	83 ec 04             	sub    esp,0x4
1000152d:	6a 00                	push   0x0
1000152f:	6a 00                	push   0x0
10001531:	50                   	push   eax
10001532:	e8 fc ff ff ff       	call   10001533 <drawBootScreen()+0x87>	10001533: R_386_PC32	VgaText::setCursor(int, int)
10001537:	83 c4 10             	add    esp,0x10
1000153a:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
10001541:	83 7d f4 4f          	cmp    DWORD PTR [ebp-0xc],0x4f
10001545:	7f 19                	jg     10001560 <drawBootScreen()+0xb4>
10001547:	a1 00 00 00 00       	mov    eax,ds:0x0	10001548: R_386_32	term
1000154c:	6a 00                	push   0x0
1000154e:	6a 00                	push   0x0
10001550:	6a 20                	push   0x20
10001552:	50                   	push   eax
10001553:	e8 fc ff ff ff       	call   10001554 <drawBootScreen()+0xa8>	10001554: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
10001558:	83 c4 10             	add    esp,0x10
1000155b:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
1000155e:	eb e1                	jmp    10001541 <drawBootScreen()+0x95>
10001560:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
10001567:	83 7d f0 18          	cmp    DWORD PTR [ebp-0x10],0x18
1000156b:	7f 41                	jg     100015ae <drawBootScreen()+0x102>
1000156d:	a1 00 00 00 00       	mov    eax,ds:0x0	1000156e: R_386_32	term
10001572:	83 ec 04             	sub    esp,0x4
10001575:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10001578:	6a 00                	push   0x0
1000157a:	50                   	push   eax
1000157b:	e8 fc ff ff ff       	call   1000157c <drawBootScreen()+0xd0>	1000157c: R_386_PC32	VgaText::setCursor(int, int)
10001580:	83 c4 10             	add    esp,0x10
10001583:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
1000158a:	83 7d ec 0f          	cmp    DWORD PTR [ebp-0x14],0xf
1000158e:	7f 19                	jg     100015a9 <drawBootScreen()+0xfd>
10001590:	a1 00 00 00 00       	mov    eax,ds:0x0	10001591: R_386_32	term
10001595:	6a 00                	push   0x0
10001597:	6a 00                	push   0x0
10001599:	6a 20                	push   0x20
1000159b:	50                   	push   eax
1000159c:	e8 fc ff ff ff       	call   1000159d <drawBootScreen()+0xf1>	1000159d: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
100015a1:	83 c4 10             	add    esp,0x10
100015a4:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
100015a7:	eb e1                	jmp    1000158a <drawBootScreen()+0xde>
100015a9:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
100015ac:	eb b9                	jmp    10001567 <drawBootScreen()+0xbb>
100015ae:	a1 00 00 00 00       	mov    eax,ds:0x0	100015af: R_386_32	term
100015b3:	83 ec 04             	sub    esp,0x4
100015b6:	6a 01                	push   0x1
100015b8:	6a 01                	push   0x1
100015ba:	50                   	push   eax
100015bb:	e8 fc ff ff ff       	call   100015bc <drawBootScreen()+0x110>	100015bc: R_386_PC32	VgaText::setCursor(int, int)
100015c0:	83 c4 10             	add    esp,0x10
100015c3:	a1 00 00 00 00       	mov    eax,ds:0x0	100015c4: R_386_32	term
100015c8:	6a 00                	push   0x0
100015ca:	6a 0f                	push   0xf
100015cc:	68 30 45 00 10       	push   0x10004530	100015cd: R_386_32	.text
100015d1:	50                   	push   eax
100015d2:	e8 fc ff ff ff       	call   100015d3 <drawBootScreen()+0x127>	100015d3: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
100015d7:	83 c4 10             	add    esp,0x10
100015da:	a1 00 00 00 00       	mov    eax,ds:0x0	100015db: R_386_32	term
100015df:	6a 00                	push   0x0
100015e1:	6a 0e                	push   0xe
100015e3:	68 b3 45 00 10       	push   0x100045b3	100015e4: R_386_32	.text
100015e8:	50                   	push   eax
100015e9:	e8 fc ff ff ff       	call   100015ea <drawBootScreen()+0x13e>	100015ea: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
100015ee:	83 c4 10             	add    esp,0x10
100015f1:	a1 00 00 00 00       	mov    eax,ds:0x0	100015f2: R_386_32	term
100015f6:	83 ec 08             	sub    esp,0x8
100015f9:	6a 0f                	push   0xf
100015fb:	50                   	push   eax
100015fc:	e8 fc ff ff ff       	call   100015fd <drawBootScreen()+0x151>	100015fd: R_386_PC32	VgaText::setDefaultBgColour(VgaColour)
10001601:	83 c4 10             	add    esp,0x10
10001604:	a1 00 00 00 00       	mov    eax,ds:0x0	10001605: R_386_32	term
10001609:	83 ec 08             	sub    esp,0x8
1000160c:	6a 00                	push   0x0
1000160e:	50                   	push   eax
1000160f:	e8 fc ff ff ff       	call   10001610 <drawBootScreen()+0x164>	10001610: R_386_PC32	VgaText::setDefaultFgColour(VgaColour)
10001614:	83 c4 10             	add    esp,0x10
10001617:	90                   	nop
10001618:	c9                   	leave  
10001619:	c3                   	ret    

1000161a <drawBasicWindowX(int, int, int, int, char const*, bool)>:
1000161a:	55                   	push   ebp
1000161b:	89 e5                	mov    ebp,esp
1000161d:	53                   	push   ebx
1000161e:	83 ec 34             	sub    esp,0x34
10001621:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
10001624:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
10001627:	ff 45 0c             	inc    DWORD PTR [ebp+0xc]
1000162a:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
10001631:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10001634:	3b 45 14             	cmp    eax,DWORD PTR [ebp+0x14]
10001637:	7d 6c                	jge    100016a5 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x8b>
10001639:	a1 00 00 00 00       	mov    eax,ds:0x0	1000163a: R_386_32	term
1000163e:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
10001641:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001644:	01 ca                	add    edx,ecx
10001646:	83 ec 04             	sub    esp,0x4
10001649:	52                   	push   edx
1000164a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000164d:	50                   	push   eax
1000164e:	e8 fc ff ff ff       	call   1000164f <drawBasicWindowX(int, int, int, int, char const*, bool)+0x35>	1000164f: R_386_PC32	VgaText::setCursor(int, int)
10001653:	83 c4 10             	add    esp,0x10
10001656:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
1000165d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001660:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
10001663:	7d 3b                	jge    100016a0 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x86>
10001665:	a1 00 00 00 00       	mov    eax,ds:0x0	10001666: R_386_32	term
1000166a:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
1000166e:	74 07                	je     10001677 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x5d>
10001670:	b9 07 00 00 00       	mov    ecx,0x7
10001675:	eb 05                	jmp    1000167c <drawBasicWindowX(int, int, int, int, char const*, bool)+0x62>
10001677:	b9 0f 00 00 00       	mov    ecx,0xf
1000167c:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
10001680:	74 07                	je     10001689 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x6f>
10001682:	ba 07 00 00 00       	mov    edx,0x7
10001687:	eb 05                	jmp    1000168e <drawBasicWindowX(int, int, int, int, char const*, bool)+0x74>
10001689:	ba 0f 00 00 00       	mov    edx,0xf
1000168e:	51                   	push   ecx
1000168f:	52                   	push   edx
10001690:	6a 20                	push   0x20
10001692:	50                   	push   eax
10001693:	e8 fc ff ff ff       	call   10001694 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x7a>	10001694: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
10001698:	83 c4 10             	add    esp,0x10
1000169b:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
1000169e:	eb bd                	jmp    1000165d <drawBasicWindowX(int, int, int, int, char const*, bool)+0x43>
100016a0:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
100016a3:	eb 8c                	jmp    10001631 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x17>
100016a5:	a1 00 00 00 00       	mov    eax,ds:0x0	100016a6: R_386_32	term
100016aa:	83 ec 04             	sub    esp,0x4
100016ad:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
100016b0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100016b3:	50                   	push   eax
100016b4:	e8 fc ff ff ff       	call   100016b5 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x9b>	100016b5: R_386_PC32	VgaText::setCursor(int, int)
100016b9:	83 c4 10             	add    esp,0x10
100016bc:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
100016c3:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
100016c6:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
100016c9:	7d 19                	jge    100016e4 <drawBasicWindowX(int, int, int, int, char const*, bool)+0xca>
100016cb:	a1 00 00 00 00       	mov    eax,ds:0x0	100016cc: R_386_32	term
100016d0:	6a 01                	push   0x1
100016d2:	6a 01                	push   0x1
100016d4:	6a 20                	push   0x20
100016d6:	50                   	push   eax
100016d7:	e8 fc ff ff ff       	call   100016d8 <drawBasicWindowX(int, int, int, int, char const*, bool)+0xbe>	100016d8: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
100016dc:	83 c4 10             	add    esp,0x10
100016df:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
100016e2:	eb df                	jmp    100016c3 <drawBasicWindowX(int, int, int, int, char const*, bool)+0xa9>
100016e4:	a1 00 00 00 00       	mov    eax,ds:0x0	100016e5: R_386_32	term
100016e9:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
100016ec:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
100016ef:	01 d1                	add    ecx,edx
100016f1:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
100016f4:	42                   	inc    edx
100016f5:	83 ec 04             	sub    esp,0x4
100016f8:	51                   	push   ecx
100016f9:	52                   	push   edx
100016fa:	50                   	push   eax
100016fb:	e8 fc ff ff ff       	call   100016fc <drawBasicWindowX(int, int, int, int, char const*, bool)+0xe2>	100016fc: R_386_PC32	VgaText::setCursor(int, int)
10001700:	83 c4 10             	add    esp,0x10
10001703:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
1000170a:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
1000170d:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
10001710:	7d 19                	jge    1000172b <drawBasicWindowX(int, int, int, int, char const*, bool)+0x111>
10001712:	a1 00 00 00 00       	mov    eax,ds:0x0	10001713: R_386_32	term
10001717:	6a 03                	push   0x3
10001719:	6a 03                	push   0x3
1000171b:	6a 20                	push   0x20
1000171d:	50                   	push   eax
1000171e:	e8 fc ff ff ff       	call   1000171f <drawBasicWindowX(int, int, int, int, char const*, bool)+0x105>	1000171f: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
10001723:	83 c4 10             	add    esp,0x10
10001726:	ff 45 e8             	inc    DWORD PTR [ebp-0x18]
10001729:	eb df                	jmp    1000170a <drawBasicWindowX(int, int, int, int, char const*, bool)+0xf0>
1000172b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
1000172e:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10001731:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10001734:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
10001737:	01 d0                	add    eax,edx
10001739:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
1000173c:	0f 8d 89 00 00 00    	jge    100017cb <drawBasicWindowX(int, int, int, int, char const*, bool)+0x1b1>
10001742:	a1 00 00 00 00       	mov    eax,ds:0x0	10001743: R_386_32	term
10001747:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
1000174a:	8d 4a 01             	lea    ecx,[edx+0x1]
1000174d:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
10001750:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10001753:	01 da                	add    edx,ebx
10001755:	83 ec 04             	sub    esp,0x4
10001758:	51                   	push   ecx
10001759:	52                   	push   edx
1000175a:	50                   	push   eax
1000175b:	e8 fc ff ff ff       	call   1000175c <drawBasicWindowX(int, int, int, int, char const*, bool)+0x142>	1000175c: R_386_PC32	VgaText::setCursor(int, int)
10001760:	83 c4 10             	add    esp,0x10
10001763:	a1 00 00 00 00       	mov    eax,ds:0x0	10001764: R_386_32	term
10001768:	6a 03                	push   0x3
1000176a:	6a 03                	push   0x3
1000176c:	6a 20                	push   0x20
1000176e:	50                   	push   eax
1000176f:	e8 fc ff ff ff       	call   10001770 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x156>	10001770: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
10001774:	83 c4 10             	add    esp,0x10
10001777:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
1000177a:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
1000177d:	01 d0                	add    eax,edx
1000177f:	48                   	dec    eax
10001780:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
10001783:	74 3e                	je     100017c3 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x1a9>
10001785:	a1 00 00 00 00       	mov    eax,ds:0x0	10001786: R_386_32	term
1000178a:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
1000178d:	42                   	inc    edx
1000178e:	83 ec 04             	sub    esp,0x4
10001791:	52                   	push   edx
10001792:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001795:	50                   	push   eax
10001796:	e8 fc ff ff ff       	call   10001797 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x17d>	10001797: R_386_PC32	VgaText::setCursor(int, int)
1000179b:	83 c4 10             	add    esp,0x10
1000179e:	a1 00 00 00 00       	mov    eax,ds:0x0	1000179f: R_386_32	term
100017a3:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
100017a7:	74 07                	je     100017b0 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x196>
100017a9:	ba 07 00 00 00       	mov    edx,0x7
100017ae:	eb 05                	jmp    100017b5 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x19b>
100017b0:	ba 0f 00 00 00       	mov    edx,0xf
100017b5:	52                   	push   edx
100017b6:	6a 00                	push   0x0
100017b8:	6a dd                	push   0xffffffdd
100017ba:	50                   	push   eax
100017bb:	e8 fc ff ff ff       	call   100017bc <drawBasicWindowX(int, int, int, int, char const*, bool)+0x1a2>	100017bc: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
100017c0:	83 c4 10             	add    esp,0x10
100017c3:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
100017c6:	e9 66 ff ff ff       	jmp    10001731 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x117>
100017cb:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
100017ce:	83 ec 0c             	sub    esp,0xc
100017d1:	ff 75 18             	push   DWORD PTR [ebp+0x18]
100017d4:	e8 fc ff ff ff       	call   100017d5 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x1bb>	100017d5: R_386_PC32	strlen
100017d9:	83 c4 10             	add    esp,0x10
100017dc:	29 c3                	sub    ebx,eax
100017de:	89 d8                	mov    eax,ebx
100017e0:	d1 e8                	shr    eax,1
100017e2:	48                   	dec    eax
100017e3:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
100017e6:	a1 00 00 00 00       	mov    eax,ds:0x0	100017e7: R_386_32	term
100017eb:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
100017ee:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
100017f1:	01 ca                	add    edx,ecx
100017f3:	83 ec 04             	sub    esp,0x4
100017f6:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
100017f9:	52                   	push   edx
100017fa:	50                   	push   eax
100017fb:	e8 fc ff ff ff       	call   100017fc <drawBasicWindowX(int, int, int, int, char const*, bool)+0x1e2>	100017fc: R_386_PC32	VgaText::setCursor(int, int)
10001800:	83 c4 10             	add    esp,0x10
10001803:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
1000180a:	83 ec 0c             	sub    esp,0xc
1000180d:	ff 75 18             	push   DWORD PTR [ebp+0x18]
10001810:	e8 fc ff ff ff       	call   10001811 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x1f7>	10001811: R_386_PC32	strlen
10001815:	83 c4 10             	add    esp,0x10
10001818:	89 c2                	mov    edx,eax
1000181a:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
1000181d:	39 c2                	cmp    edx,eax
1000181f:	76 25                	jbe    10001846 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x22c>
10001821:	a1 00 00 00 00       	mov    eax,ds:0x0	10001822: R_386_32	term
10001826:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
10001829:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
1000182c:	01 ca                	add    edx,ecx
1000182e:	8a 12                	mov    dl,BYTE PTR [edx]
10001830:	0f be d2             	movsx  edx,dl
10001833:	6a 01                	push   0x1
10001835:	6a 0f                	push   0xf
10001837:	52                   	push   edx
10001838:	50                   	push   eax
10001839:	e8 fc ff ff ff       	call   1000183a <drawBasicWindowX(int, int, int, int, char const*, bool)+0x220>	1000183a: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
1000183e:	83 c4 10             	add    esp,0x10
10001841:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
10001844:	eb c4                	jmp    1000180a <drawBasicWindowX(int, int, int, int, char const*, bool)+0x1f0>
10001846:	90                   	nop
10001847:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
1000184a:	c9                   	leave  
1000184b:	c3                   	ret    

1000184c <drawBasicWindow(int, int, int, int, char const*)>:
1000184c:	55                   	push   ebp
1000184d:	89 e5                	mov    ebp,esp
1000184f:	83 ec 08             	sub    esp,0x8
10001852:	83 ec 08             	sub    esp,0x8
10001855:	6a 00                	push   0x0
10001857:	ff 75 18             	push   DWORD PTR [ebp+0x18]
1000185a:	ff 75 14             	push   DWORD PTR [ebp+0x14]
1000185d:	ff 75 10             	push   DWORD PTR [ebp+0x10]
10001860:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10001863:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001866:	e8 fc ff ff ff       	call   10001867 <drawBasicWindow(int, int, int, int, char const*)+0x1b>	10001867: R_386_PC32	drawBasicWindowX(int, int, int, int, char const*, bool)
1000186b:	83 c4 20             	add    esp,0x20
1000186e:	90                   	nop
1000186f:	c9                   	leave  
10001870:	c3                   	ret    

10001871 <bootInstallKeybrd(KeyboardToken, bool*)>:
10001871:	55                   	push   ebp
10001872:	89 e5                	mov    ebp,esp
10001874:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
10001877:	05 04 01 00 00       	add    eax,0x104
1000187c:	8a 00                	mov    al,BYTE PTR [eax]
1000187e:	84 c0                	test   al,al
10001880:	74 12                	je     10001894 <bootInstallKeybrd(KeyboardToken, bool*)+0x23>
10001882:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001885:	66 83 f8 09          	cmp    ax,0x9
10001889:	75 09                	jne    10001894 <bootInstallKeybrd(KeyboardToken, bool*)+0x23>
1000188b:	c6 05 00 00 00 00 7f 	mov    BYTE PTR ds:0x0,0x7f	1000188d: R_386_32	installKey
10001892:	eb 36                	jmp    100018ca <bootInstallKeybrd(KeyboardToken, bool*)+0x59>
10001894:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
10001897:	84 c0                	test   al,al
10001899:	75 2e                	jne    100018c9 <bootInstallKeybrd(KeyboardToken, bool*)+0x58>
1000189b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000189e:	66 3d 0d 02          	cmp    ax,0x20d
100018a2:	75 09                	jne    100018ad <bootInstallKeybrd(KeyboardToken, bool*)+0x3c>
100018a4:	c6 05 00 00 00 00 03 	mov    BYTE PTR ds:0x0,0x3	100018a6: R_386_32	installKey
100018ab:	eb 1d                	jmp    100018ca <bootInstallKeybrd(KeyboardToken, bool*)+0x59>
100018ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100018b0:	66 3d 0e 02          	cmp    ax,0x20e
100018b4:	75 09                	jne    100018bf <bootInstallKeybrd(KeyboardToken, bool*)+0x4e>
100018b6:	c6 05 00 00 00 00 04 	mov    BYTE PTR ds:0x0,0x4	100018b8: R_386_32	installKey
100018bd:	eb 0b                	jmp    100018ca <bootInstallKeybrd(KeyboardToken, bool*)+0x59>
100018bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100018c2:	a2 00 00 00 00       	mov    ds:0x0,al	100018c3: R_386_32	installKey
100018c7:	eb 01                	jmp    100018ca <bootInstallKeybrd(KeyboardToken, bool*)+0x59>
100018c9:	90                   	nop
100018ca:	5d                   	pop    ebp
100018cb:	c3                   	ret    

100018cc <bootInstallTasks(int)>:
100018cc:	55                   	push   ebp
100018cd:	89 e5                	mov    ebp,esp
100018cf:	83 ec 08             	sub    esp,0x8
100018d2:	a1 00 00 00 00       	mov    eax,ds:0x0	100018d3: R_386_32	term
100018d7:	83 ec 04             	sub    esp,0x4
100018da:	6a 08                	push   0x8
100018dc:	6a 18                	push   0x18
100018de:	50                   	push   eax
100018df:	e8 fc ff ff ff       	call   100018e0 <bootInstallTasks(int)+0x14>	100018e0: R_386_PC32	VgaText::setCursor(int, int)
100018e4:	83 c4 10             	add    esp,0x10
100018e7:	a1 00 00 00 00       	mov    eax,ds:0x0	100018e8: R_386_32	term
100018ec:	83 ec 08             	sub    esp,0x8
100018ef:	68 d4 45 00 10       	push   0x100045d4	100018f0: R_386_32	.text
100018f4:	50                   	push   eax
100018f5:	e8 fc ff ff ff       	call   100018f6 <bootInstallTasks(int)+0x2a>	100018f6: R_386_PC32	VgaText::puts(char const*)
100018fa:	83 c4 10             	add    esp,0x10
100018fd:	a1 00 00 00 00       	mov    eax,ds:0x0	100018fe: R_386_32	term
10001902:	83 ec 04             	sub    esp,0x4
10001905:	6a 0a                	push   0xa
10001907:	6a 1a                	push   0x1a
10001909:	50                   	push   eax
1000190a:	e8 fc ff ff ff       	call   1000190b <bootInstallTasks(int)+0x3f>	1000190b: R_386_PC32	VgaText::setCursor(int, int)
1000190f:	83 c4 10             	add    esp,0x10
10001912:	a1 00 00 00 00       	mov    eax,ds:0x0	10001913: R_386_32	term
10001917:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
1000191b:	75 07                	jne    10001924 <bootInstallTasks(int)+0x58>
1000191d:	ba fc 45 00 10       	mov    edx,0x100045fc	1000191e: R_386_32	.text
10001922:	eb 05                	jmp    10001929 <bootInstallTasks(int)+0x5d>
10001924:	ba ff 45 00 10       	mov    edx,0x100045ff	10001925: R_386_32	.text
10001929:	83 ec 08             	sub    esp,0x8
1000192c:	52                   	push   edx
1000192d:	50                   	push   eax
1000192e:	e8 fc ff ff ff       	call   1000192f <bootInstallTasks(int)+0x63>	1000192f: R_386_PC32	VgaText::puts(char const*)
10001933:	83 c4 10             	add    esp,0x10
10001936:	a1 00 00 00 00       	mov    eax,ds:0x0	10001937: R_386_32	term
1000193b:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
1000193f:	78 07                	js     10001948 <bootInstallTasks(int)+0x7c>
10001941:	ba 00 00 00 00       	mov    edx,0x0
10001946:	eb 05                	jmp    1000194d <bootInstallTasks(int)+0x81>
10001948:	ba 07 00 00 00       	mov    edx,0x7
1000194d:	6a 0f                	push   0xf
1000194f:	52                   	push   edx
10001950:	68 02 46 00 10       	push   0x10004602	10001951: R_386_32	.text
10001955:	50                   	push   eax
10001956:	e8 fc ff ff ff       	call   10001957 <bootInstallTasks(int)+0x8b>	10001957: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
1000195b:	83 c4 10             	add    esp,0x10
1000195e:	a1 00 00 00 00       	mov    eax,ds:0x0	1000195f: R_386_32	term
10001963:	83 ec 04             	sub    esp,0x4
10001966:	6a 0b                	push   0xb
10001968:	6a 1a                	push   0x1a
1000196a:	50                   	push   eax
1000196b:	e8 fc ff ff ff       	call   1000196c <bootInstallTasks(int)+0xa0>	1000196c: R_386_PC32	VgaText::setCursor(int, int)
10001970:	83 c4 10             	add    esp,0x10
10001973:	a1 00 00 00 00       	mov    eax,ds:0x0	10001974: R_386_32	term
10001978:	83 7d 08 01          	cmp    DWORD PTR [ebp+0x8],0x1
1000197c:	75 07                	jne    10001985 <bootInstallTasks(int)+0xb9>
1000197e:	ba fc 45 00 10       	mov    edx,0x100045fc	1000197f: R_386_32	.text
10001983:	eb 05                	jmp    1000198a <bootInstallTasks(int)+0xbe>
10001985:	ba ff 45 00 10       	mov    edx,0x100045ff	10001986: R_386_32	.text
1000198a:	83 ec 08             	sub    esp,0x8
1000198d:	52                   	push   edx
1000198e:	50                   	push   eax
1000198f:	e8 fc ff ff ff       	call   10001990 <bootInstallTasks(int)+0xc4>	10001990: R_386_PC32	VgaText::puts(char const*)
10001994:	83 c4 10             	add    esp,0x10
10001997:	a1 00 00 00 00       	mov    eax,ds:0x0	10001998: R_386_32	term
1000199c:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
100019a0:	7e 07                	jle    100019a9 <bootInstallTasks(int)+0xdd>
100019a2:	ba 00 00 00 00       	mov    edx,0x0
100019a7:	eb 05                	jmp    100019ae <bootInstallTasks(int)+0xe2>
100019a9:	ba 07 00 00 00       	mov    edx,0x7
100019ae:	6a 0f                	push   0xf
100019b0:	52                   	push   edx
100019b1:	68 1a 46 00 10       	push   0x1000461a	100019b2: R_386_32	.text
100019b6:	50                   	push   eax
100019b7:	e8 fc ff ff ff       	call   100019b8 <bootInstallTasks(int)+0xec>	100019b8: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
100019bc:	83 c4 10             	add    esp,0x10
100019bf:	a1 00 00 00 00       	mov    eax,ds:0x0	100019c0: R_386_32	term
100019c4:	83 ec 04             	sub    esp,0x4
100019c7:	6a 0c                	push   0xc
100019c9:	6a 1a                	push   0x1a
100019cb:	50                   	push   eax
100019cc:	e8 fc ff ff ff       	call   100019cd <bootInstallTasks(int)+0x101>	100019cd: R_386_PC32	VgaText::setCursor(int, int)
100019d1:	83 c4 10             	add    esp,0x10
100019d4:	a1 00 00 00 00       	mov    eax,ds:0x0	100019d5: R_386_32	term
100019d9:	83 7d 08 02          	cmp    DWORD PTR [ebp+0x8],0x2
100019dd:	75 07                	jne    100019e6 <bootInstallTasks(int)+0x11a>
100019df:	ba fc 45 00 10       	mov    edx,0x100045fc	100019e0: R_386_32	.text
100019e4:	eb 05                	jmp    100019eb <bootInstallTasks(int)+0x11f>
100019e6:	ba ff 45 00 10       	mov    edx,0x100045ff	100019e7: R_386_32	.text
100019eb:	83 ec 08             	sub    esp,0x8
100019ee:	52                   	push   edx
100019ef:	50                   	push   eax
100019f0:	e8 fc ff ff ff       	call   100019f1 <bootInstallTasks(int)+0x125>	100019f1: R_386_PC32	VgaText::puts(char const*)
100019f5:	83 c4 10             	add    esp,0x10
100019f8:	a1 00 00 00 00       	mov    eax,ds:0x0	100019f9: R_386_32	term
100019fd:	83 7d 08 01          	cmp    DWORD PTR [ebp+0x8],0x1
10001a01:	7e 07                	jle    10001a0a <bootInstallTasks(int)+0x13e>
10001a03:	ba 00 00 00 00       	mov    edx,0x0
10001a08:	eb 05                	jmp    10001a0f <bootInstallTasks(int)+0x143>
10001a0a:	ba 07 00 00 00       	mov    edx,0x7
10001a0f:	6a 0f                	push   0xf
10001a11:	52                   	push   edx
10001a12:	68 30 46 00 10       	push   0x10004630	10001a13: R_386_32	.text
10001a17:	50                   	push   eax
10001a18:	e8 fc ff ff ff       	call   10001a19 <bootInstallTasks(int)+0x14d>	10001a19: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10001a1d:	83 c4 10             	add    esp,0x10
10001a20:	a1 00 00 00 00       	mov    eax,ds:0x0	10001a21: R_386_32	term
10001a25:	83 ec 04             	sub    esp,0x4
10001a28:	6a 0d                	push   0xd
10001a2a:	6a 1a                	push   0x1a
10001a2c:	50                   	push   eax
10001a2d:	e8 fc ff ff ff       	call   10001a2e <bootInstallTasks(int)+0x162>	10001a2e: R_386_PC32	VgaText::setCursor(int, int)
10001a32:	83 c4 10             	add    esp,0x10
10001a35:	a1 00 00 00 00       	mov    eax,ds:0x0	10001a36: R_386_32	term
10001a3a:	83 7d 08 03          	cmp    DWORD PTR [ebp+0x8],0x3
10001a3e:	75 07                	jne    10001a47 <bootInstallTasks(int)+0x17b>
10001a40:	ba fc 45 00 10       	mov    edx,0x100045fc	10001a41: R_386_32	.text
10001a45:	eb 05                	jmp    10001a4c <bootInstallTasks(int)+0x180>
10001a47:	ba ff 45 00 10       	mov    edx,0x100045ff	10001a48: R_386_32	.text
10001a4c:	83 ec 08             	sub    esp,0x8
10001a4f:	52                   	push   edx
10001a50:	50                   	push   eax
10001a51:	e8 fc ff ff ff       	call   10001a52 <bootInstallTasks(int)+0x186>	10001a52: R_386_PC32	VgaText::puts(char const*)
10001a56:	83 c4 10             	add    esp,0x10
10001a59:	a1 00 00 00 00       	mov    eax,ds:0x0	10001a5a: R_386_32	term
10001a5e:	83 7d 08 02          	cmp    DWORD PTR [ebp+0x8],0x2
10001a62:	7e 07                	jle    10001a6b <bootInstallTasks(int)+0x19f>
10001a64:	ba 00 00 00 00       	mov    edx,0x0
10001a69:	eb 05                	jmp    10001a70 <bootInstallTasks(int)+0x1a4>
10001a6b:	ba 07 00 00 00       	mov    edx,0x7
10001a70:	6a 0f                	push   0xf
10001a72:	52                   	push   edx
10001a73:	68 46 46 00 10       	push   0x10004646	10001a74: R_386_32	.text
10001a78:	50                   	push   eax
10001a79:	e8 fc ff ff ff       	call   10001a7a <bootInstallTasks(int)+0x1ae>	10001a7a: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10001a7e:	83 c4 10             	add    esp,0x10
10001a81:	a1 00 00 00 00       	mov    eax,ds:0x0	10001a82: R_386_32	term
10001a86:	83 ec 04             	sub    esp,0x4
10001a89:	6a 0e                	push   0xe
10001a8b:	6a 1a                	push   0x1a
10001a8d:	50                   	push   eax
10001a8e:	e8 fc ff ff ff       	call   10001a8f <bootInstallTasks(int)+0x1c3>	10001a8f: R_386_PC32	VgaText::setCursor(int, int)
10001a93:	83 c4 10             	add    esp,0x10
10001a96:	a1 00 00 00 00       	mov    eax,ds:0x0	10001a97: R_386_32	term
10001a9b:	83 7d 08 04          	cmp    DWORD PTR [ebp+0x8],0x4
10001a9f:	75 07                	jne    10001aa8 <bootInstallTasks(int)+0x1dc>
10001aa1:	ba fc 45 00 10       	mov    edx,0x100045fc	10001aa2: R_386_32	.text
10001aa6:	eb 05                	jmp    10001aad <bootInstallTasks(int)+0x1e1>
10001aa8:	ba ff 45 00 10       	mov    edx,0x100045ff	10001aa9: R_386_32	.text
10001aad:	83 ec 08             	sub    esp,0x8
10001ab0:	52                   	push   edx
10001ab1:	50                   	push   eax
10001ab2:	e8 fc ff ff ff       	call   10001ab3 <bootInstallTasks(int)+0x1e7>	10001ab3: R_386_PC32	VgaText::puts(char const*)
10001ab7:	83 c4 10             	add    esp,0x10
10001aba:	a1 00 00 00 00       	mov    eax,ds:0x0	10001abb: R_386_32	term
10001abf:	83 7d 08 03          	cmp    DWORD PTR [ebp+0x8],0x3
10001ac3:	7e 07                	jle    10001acc <bootInstallTasks(int)+0x200>
10001ac5:	ba 00 00 00 00       	mov    edx,0x0
10001aca:	eb 05                	jmp    10001ad1 <bootInstallTasks(int)+0x205>
10001acc:	ba 07 00 00 00       	mov    edx,0x7
10001ad1:	6a 0f                	push   0xf
10001ad3:	52                   	push   edx
10001ad4:	68 5a 46 00 10       	push   0x1000465a	10001ad5: R_386_32	.text
10001ad9:	50                   	push   eax
10001ada:	e8 fc ff ff ff       	call   10001adb <bootInstallTasks(int)+0x20f>	10001adb: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10001adf:	83 c4 10             	add    esp,0x10
10001ae2:	a1 00 00 00 00       	mov    eax,ds:0x0	10001ae3: R_386_32	term
10001ae7:	83 ec 04             	sub    esp,0x4
10001aea:	6a 0f                	push   0xf
10001aec:	6a 1a                	push   0x1a
10001aee:	50                   	push   eax
10001aef:	e8 fc ff ff ff       	call   10001af0 <bootInstallTasks(int)+0x224>	10001af0: R_386_PC32	VgaText::setCursor(int, int)
10001af4:	83 c4 10             	add    esp,0x10
10001af7:	a1 00 00 00 00       	mov    eax,ds:0x0	10001af8: R_386_32	term
10001afc:	83 7d 08 05          	cmp    DWORD PTR [ebp+0x8],0x5
10001b00:	75 07                	jne    10001b09 <bootInstallTasks(int)+0x23d>
10001b02:	ba fc 45 00 10       	mov    edx,0x100045fc	10001b03: R_386_32	.text
10001b07:	eb 05                	jmp    10001b0e <bootInstallTasks(int)+0x242>
10001b09:	ba ff 45 00 10       	mov    edx,0x100045ff	10001b0a: R_386_32	.text
10001b0e:	83 ec 08             	sub    esp,0x8
10001b11:	52                   	push   edx
10001b12:	50                   	push   eax
10001b13:	e8 fc ff ff ff       	call   10001b14 <bootInstallTasks(int)+0x248>	10001b14: R_386_PC32	VgaText::puts(char const*)
10001b18:	83 c4 10             	add    esp,0x10
10001b1b:	a1 00 00 00 00       	mov    eax,ds:0x0	10001b1c: R_386_32	term
10001b20:	83 7d 08 04          	cmp    DWORD PTR [ebp+0x8],0x4
10001b24:	7e 07                	jle    10001b2d <bootInstallTasks(int)+0x261>
10001b26:	ba 00 00 00 00       	mov    edx,0x0
10001b2b:	eb 05                	jmp    10001b32 <bootInstallTasks(int)+0x266>
10001b2d:	ba 07 00 00 00       	mov    edx,0x7
10001b32:	6a 0f                	push   0xf
10001b34:	52                   	push   edx
10001b35:	68 72 46 00 10       	push   0x10004672	10001b36: R_386_32	.text
10001b3a:	50                   	push   eax
10001b3b:	e8 fc ff ff ff       	call   10001b3c <bootInstallTasks(int)+0x270>	10001b3c: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10001b40:	83 c4 10             	add    esp,0x10
10001b43:	90                   	nop
10001b44:	c9                   	leave  
10001b45:	c3                   	ret    

10001b46 <ror(unsigned long long, int, int)>:
10001b46:	55                   	push   ebp
10001b47:	89 e5                	mov    ebp,esp
10001b49:	56                   	push   esi
10001b4a:	53                   	push   ebx
10001b4b:	83 ec 20             	sub    esp,0x20
10001b4e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001b51:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
10001b54:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10001b57:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10001b5a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
10001b5d:	ba 01 00 00 00       	mov    edx,0x1
10001b62:	88 c1                	mov    cl,al
10001b64:	d3 e2                	shl    edx,cl
10001b66:	89 d0                	mov    eax,edx
10001b68:	48                   	dec    eax
10001b69:	99                   	cdq    
10001b6a:	89 c1                	mov    ecx,eax
10001b6c:	23 4d e0             	and    ecx,DWORD PTR [ebp-0x20]
10001b6f:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
10001b72:	89 d0                	mov    eax,edx
10001b74:	23 45 e4             	and    eax,DWORD PTR [ebp-0x1c]
10001b77:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
10001b7a:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
10001b7d:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10001b80:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10001b83:	0f ad d0             	shrd   eax,edx,cl
10001b86:	d3 ea                	shr    edx,cl
10001b88:	f6 c1 20             	test   cl,0x20
10001b8b:	74 04                	je     10001b91 <ror(unsigned long long, int, int)+0x4b>
10001b8d:	89 d0                	mov    eax,edx
10001b8f:	31 d2                	xor    edx,edx
10001b91:	89 c3                	mov    ebx,eax
10001b93:	89 d6                	mov    esi,edx
10001b95:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
10001b98:	2b 45 10             	sub    eax,DWORD PTR [ebp+0x10]
10001b9b:	89 c1                	mov    ecx,eax
10001b9d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001ba0:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001ba3:	0f a5 c2             	shld   edx,eax,cl
10001ba6:	d3 e0                	shl    eax,cl
10001ba8:	f6 c1 20             	test   cl,0x20
10001bab:	74 04                	je     10001bb1 <ror(unsigned long long, int, int)+0x6b>
10001bad:	89 c2                	mov    edx,eax
10001baf:	31 c0                	xor    eax,eax
10001bb1:	89 d1                	mov    ecx,edx
10001bb3:	89 c2                	mov    edx,eax
10001bb5:	89 d8                	mov    eax,ebx
10001bb7:	09 d0                	or     eax,edx
10001bb9:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
10001bbc:	89 f0                	mov    eax,esi
10001bbe:	09 c8                	or     eax,ecx
10001bc0:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
10001bc3:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10001bc6:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
10001bc9:	83 c4 20             	add    esp,0x20
10001bcc:	5b                   	pop    ebx
10001bcd:	5e                   	pop    esi
10001bce:	5d                   	pop    ebp
10001bcf:	c3                   	ret    

10001bd0 <swapBits(unsigned long long, unsigned long long, unsigned long long)>:
10001bd0:	55                   	push   ebp
10001bd1:	89 e5                	mov    ebp,esp
10001bd3:	56                   	push   esi
10001bd4:	53                   	push   ebx
10001bd5:	83 ec 40             	sub    esp,0x40
10001bd8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001bdb:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10001bde:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10001be1:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
10001be4:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
10001be7:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
10001bea:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
10001bed:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
10001bf0:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
10001bf3:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
10001bf6:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
10001bf9:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10001bfc:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
10001bff:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001c02:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001c05:	0f ad d0             	shrd   eax,edx,cl
10001c08:	d3 ea                	shr    edx,cl
10001c0a:	f6 c1 20             	test   cl,0x20
10001c0d:	74 04                	je     10001c13 <swapBits(unsigned long long, unsigned long long, unsigned long long)+0x43>
10001c0f:	89 d0                	mov    eax,edx
10001c11:	31 d2                	xor    edx,edx
10001c13:	89 c3                	mov    ebx,eax
10001c15:	89 d6                	mov    esi,edx
10001c17:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
10001c1a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001c1d:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001c20:	0f ad d0             	shrd   eax,edx,cl
10001c23:	d3 ea                	shr    edx,cl
10001c25:	f6 c1 20             	test   cl,0x20
10001c28:	74 04                	je     10001c2e <swapBits(unsigned long long, unsigned long long, unsigned long long)+0x5e>
10001c2a:	89 d0                	mov    eax,edx
10001c2c:	31 d2                	xor    edx,edx
10001c2e:	89 d1                	mov    ecx,edx
10001c30:	89 c2                	mov    edx,eax
10001c32:	89 d8                	mov    eax,ebx
10001c34:	31 d0                	xor    eax,edx
10001c36:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
10001c39:	89 f0                	mov    eax,esi
10001c3b:	31 c8                	xor    eax,ecx
10001c3d:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
10001c40:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
10001c43:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
10001c46:	89 c6                	mov    esi,eax
10001c48:	83 e6 01             	and    esi,0x1
10001c4b:	89 75 c8             	mov    DWORD PTR [ebp-0x38],esi
10001c4e:	89 d0                	mov    eax,edx
10001c50:	83 e0 00             	and    eax,0x0
10001c53:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
10001c56:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
10001c59:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
10001c5c:	89 c3                	mov    ebx,eax
10001c5e:	80 f7 00             	xor    bh,0x0
10001c61:	89 5d b8             	mov    DWORD PTR [ebp-0x48],ebx
10001c64:	89 d0                	mov    eax,edx
10001c66:	80 f4 00             	xor    ah,0x0
10001c69:	89 45 bc             	mov    DWORD PTR [ebp-0x44],eax
10001c6c:	8b 55 b8             	mov    edx,DWORD PTR [ebp-0x48]
10001c6f:	8b 4d bc             	mov    ecx,DWORD PTR [ebp-0x44]
10001c72:	89 c8                	mov    eax,ecx
10001c74:	09 d0                	or     eax,edx
10001c76:	85 c0                	test   eax,eax
10001c78:	74 62                	je     10001cdc <swapBits(unsigned long long, unsigned long long, unsigned long long)+0x10c>
10001c7a:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
10001c7d:	b8 01 00 00 00       	mov    eax,0x1
10001c82:	ba 00 00 00 00       	mov    edx,0x0
10001c87:	0f a5 c2             	shld   edx,eax,cl
10001c8a:	d3 e0                	shl    eax,cl
10001c8c:	f6 c1 20             	test   cl,0x20
10001c8f:	74 04                	je     10001c95 <swapBits(unsigned long long, unsigned long long, unsigned long long)+0xc5>
10001c91:	89 c2                	mov    edx,eax
10001c93:	31 c0                	xor    eax,eax
10001c95:	89 c3                	mov    ebx,eax
10001c97:	89 d6                	mov    esi,edx
10001c99:	89 d8                	mov    eax,ebx
10001c9b:	33 45 f0             	xor    eax,DWORD PTR [ebp-0x10]
10001c9e:	89 45 c0             	mov    DWORD PTR [ebp-0x40],eax
10001ca1:	89 f0                	mov    eax,esi
10001ca3:	33 45 f4             	xor    eax,DWORD PTR [ebp-0xc]
10001ca6:	89 45 c4             	mov    DWORD PTR [ebp-0x3c],eax
10001ca9:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
10001cac:	b8 01 00 00 00       	mov    eax,0x1
10001cb1:	ba 00 00 00 00       	mov    edx,0x0
10001cb6:	0f a5 c2             	shld   edx,eax,cl
10001cb9:	d3 e0                	shl    eax,cl
10001cbb:	f6 c1 20             	test   cl,0x20
10001cbe:	74 04                	je     10001cc4 <swapBits(unsigned long long, unsigned long long, unsigned long long)+0xf4>
10001cc0:	89 c2                	mov    edx,eax
10001cc2:	31 c0                	xor    eax,eax
10001cc4:	89 c1                	mov    ecx,eax
10001cc6:	89 d3                	mov    ebx,edx
10001cc8:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
10001ccb:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
10001cce:	89 c6                	mov    esi,eax
10001cd0:	31 ce                	xor    esi,ecx
10001cd2:	89 75 d8             	mov    DWORD PTR [ebp-0x28],esi
10001cd5:	31 d3                	xor    ebx,edx
10001cd7:	89 5d dc             	mov    DWORD PTR [ebp-0x24],ebx
10001cda:	eb 0c                	jmp    10001ce8 <swapBits(unsigned long long, unsigned long long, unsigned long long)+0x118>
10001cdc:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001cdf:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001ce2:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
10001ce5:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
10001ce8:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10001ceb:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
10001cee:	83 c4 40             	add    esp,0x40
10001cf1:	5b                   	pop    ebx
10001cf2:	5e                   	pop    esi
10001cf3:	5d                   	pop    ebp
10001cf4:	c3                   	ret    

10001cf5 <getChecksum(unsigned int)>:
10001cf5:	55                   	push   ebp
10001cf6:	89 e5                	mov    ebp,esp
10001cf8:	56                   	push   esi
10001cf9:	53                   	push   ebx
10001cfa:	83 ec 20             	sub    esp,0x20
10001cfd:	66 c7 45 f6 49 4e    	mov    WORD PTR [ebp-0xa],0x4e49
10001d03:	66 c7 45 f4 79 6e    	mov    WORD PTR [ebp-0xc],0x6e79
10001d09:	66 c7 45 f2 67 61    	mov    WORD PTR [ebp-0xe],0x6167
10001d0f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001d12:	c1 e8 10             	shr    eax,0x10
10001d15:	89 c1                	mov    ecx,eax
10001d17:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001d1a:	89 c2                	mov    edx,eax
10001d1c:	89 d0                	mov    eax,edx
10001d1e:	c1 e0 06             	shl    eax,0x6
10001d21:	29 d0                	sub    eax,edx
10001d23:	c1 e0 04             	shl    eax,0x4
10001d26:	01 d0                	add    eax,edx
10001d28:	31 c8                	xor    eax,ecx
10001d2a:	66 89 45 f0          	mov    WORD PTR [ebp-0x10],ax
10001d2e:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
10001d32:	0f 84 b1 00 00 00    	je     10001de9 <getChecksum(unsigned int)+0xf4>
10001d38:	b8 f4 02 00 00       	mov    eax,0x2f4
10001d3d:	ba 00 00 00 00       	mov    edx,0x0
10001d42:	f7 75 08             	div    DWORD PTR [ebp+0x8]
10001d45:	89 c3                	mov    ebx,eax
10001d47:	be 00 00 00 00       	mov    esi,0x0
10001d4c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001d4f:	ba 00 00 00 00       	mov    edx,0x0
10001d54:	6a 1d                	push   0x1d
10001d56:	6a 05                	push   0x5
10001d58:	52                   	push   edx
10001d59:	50                   	push   eax
10001d5a:	e8 fc ff ff ff       	call   10001d5b <getChecksum(unsigned int)+0x66>	10001d5b: R_386_PC32	ror(unsigned long long, int, int)
10001d5f:	83 c4 10             	add    esp,0x10
10001d62:	05 52 3f 04 00       	add    eax,0x43f52
10001d67:	83 d2 00             	adc    edx,0x0
10001d6a:	89 d9                	mov    ecx,ebx
10001d6c:	31 c1                	xor    ecx,eax
10001d6e:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
10001d71:	31 d6                	xor    esi,edx
10001d73:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
10001d76:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
10001d79:	66 8b 45 f6          	mov    ax,WORD PTR [ebp-0xa]
10001d7d:	66 0f af c2          	imul   ax,dx
10001d81:	66 89 45 f6          	mov    WORD PTR [ebp-0xa],ax
10001d85:	b8 ea 00 00 00       	mov    eax,0xea
10001d8a:	ba 00 00 00 00       	mov    edx,0x0
10001d8f:	f7 75 08             	div    DWORD PTR [ebp+0x8]
10001d92:	89 c3                	mov    ebx,eax
10001d94:	be 00 00 00 00       	mov    esi,0x0
10001d99:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001d9c:	ba 00 00 00 00       	mov    edx,0x0
10001da1:	6a 1f                	push   0x1f
10001da3:	6a 03                	push   0x3
10001da5:	52                   	push   edx
10001da6:	50                   	push   eax
10001da7:	e8 fc ff ff ff       	call   10001da8 <getChecksum(unsigned int)+0xb3>	10001da8: R_386_PC32	ror(unsigned long long, int, int)
10001dac:	83 c4 10             	add    esp,0x10
10001daf:	05 05 db 09 00       	add    eax,0x9db05
10001db4:	83 d2 00             	adc    edx,0x0
10001db7:	89 d9                	mov    ecx,ebx
10001db9:	31 c1                	xor    ecx,eax
10001dbb:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
10001dbe:	31 d6                	xor    esi,edx
10001dc0:	89 75 dc             	mov    DWORD PTR [ebp-0x24],esi
10001dc3:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10001dc6:	66 29 45 f4          	sub    WORD PTR [ebp-0xc],ax
10001dca:	66 8b 45 f6          	mov    ax,WORD PTR [ebp-0xa]
10001dce:	33 45 f4             	xor    eax,DWORD PTR [ebp-0xc]
10001dd1:	25 d2 04 00 00       	and    eax,0x4d2
10001dd6:	66 01 45 f2          	add    WORD PTR [ebp-0xe],ax
10001dda:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001ddd:	66 01 45 f2          	add    WORD PTR [ebp-0xe],ax
10001de1:	d1 6d 08             	shr    DWORD PTR [ebp+0x8],1
10001de4:	e9 45 ff ff ff       	jmp    10001d2e <getChecksum(unsigned int)+0x39>
10001de9:	66 8b 45 f6          	mov    ax,WORD PTR [ebp-0xa]
10001ded:	33 45 f4             	xor    eax,DWORD PTR [ebp-0xc]
10001df0:	66 33 45 f2          	xor    ax,WORD PTR [ebp-0xe]
10001df4:	33 45 f0             	xor    eax,DWORD PTR [ebp-0x10]
10001df7:	0f b7 c0             	movzx  eax,ax
10001dfa:	25 ff 7f 00 00       	and    eax,0x7fff
10001dff:	8d 65 f8             	lea    esp,[ebp-0x8]
10001e02:	5b                   	pop    ebx
10001e03:	5e                   	pop    esi
10001e04:	5d                   	pop    ebp
10001e05:	c3                   	ret    

10001e06 <createKey(char*, unsigned int)>:
10001e06:	55                   	push   ebp
10001e07:	89 e5                	mov    ebp,esp
10001e09:	53                   	push   ebx
10001e0a:	83 ec 34             	sub    esp,0x34
10001e0d:	68 84 46 00 10       	push   0x10004684	10001e0e: R_386_32	.text
10001e12:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001e15:	e8 fc ff ff ff       	call   10001e16 <createKey(char*, unsigned int)+0x10>	10001e16: R_386_PC32	strcpy
10001e1a:	83 c4 08             	add    esp,0x8
10001e1d:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
10001e20:	bb 00 00 00 00       	mov    ebx,0x0
10001e25:	89 c8                	mov    eax,ecx
10001e27:	89 da                	mov    edx,ebx
10001e29:	0f a4 c2 0f          	shld   edx,eax,0xf
10001e2d:	c1 e0 0f             	shl    eax,0xf
10001e30:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10001e33:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
10001e36:	83 ec 04             	sub    esp,0x4
10001e39:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10001e3c:	e8 fc ff ff ff       	call   10001e3d <createKey(char*, unsigned int)+0x37>	10001e3d: R_386_PC32	getChecksum(unsigned int)
10001e41:	83 c4 08             	add    esp,0x8
10001e44:	ba 00 00 00 00       	mov    edx,0x0
10001e49:	09 45 f0             	or     DWORD PTR [ebp-0x10],eax
10001e4c:	09 55 f4             	or     DWORD PTR [ebp-0xc],edx
10001e4f:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
10001e56:	81 7d ec db 24 00 00 	cmp    DWORD PTR [ebp-0x14],0x24db
10001e5d:	7f 7f                	jg     10001ede <createKey(char*, unsigned int)+0xd8>
10001e5f:	81 75 f0 95 38 e4 b5 	xor    DWORD PTR [ebp-0x10],0xb5e43895
10001e66:	83 75 f4 37          	xor    DWORD PTR [ebp-0xc],0x37
10001e6a:	6a 00                	push   0x0
10001e6c:	6a 08                	push   0x8
10001e6e:	6a 00                	push   0x0
10001e70:	6a 03                	push   0x3
10001e72:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10001e75:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10001e78:	e8 fc ff ff ff       	call   10001e79 <createKey(char*, unsigned int)+0x73>	10001e79: R_386_PC32	swapBits(unsigned long long, unsigned long long, unsigned long long)
10001e7d:	83 c4 18             	add    esp,0x18
10001e80:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10001e83:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
10001e86:	6a 00                	push   0x0
10001e88:	6a 0c                	push   0xc
10001e8a:	6a 00                	push   0x0
10001e8c:	6a 0d                	push   0xd
10001e8e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10001e91:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10001e94:	e8 fc ff ff ff       	call   10001e95 <createKey(char*, unsigned int)+0x8f>	10001e95: R_386_PC32	swapBits(unsigned long long, unsigned long long, unsigned long long)
10001e99:	83 c4 18             	add    esp,0x18
10001e9c:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10001e9f:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
10001ea2:	6a 00                	push   0x0
10001ea4:	6a 16                	push   0x16
10001ea6:	6a 00                	push   0x0
10001ea8:	6a 25                	push   0x25
10001eaa:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10001ead:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10001eb0:	e8 fc ff ff ff       	call   10001eb1 <createKey(char*, unsigned int)+0xab>	10001eb1: R_386_PC32	swapBits(unsigned long long, unsigned long long, unsigned long long)
10001eb5:	83 c4 18             	add    esp,0x18
10001eb8:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10001ebb:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
10001ebe:	6a 2a                	push   0x2a
10001ec0:	6a 13                	push   0x13
10001ec2:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10001ec5:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10001ec8:	e8 fc ff ff ff       	call   10001ec9 <createKey(char*, unsigned int)+0xc3>	10001ec9: R_386_PC32	ror(unsigned long long, int, int)
10001ecd:	83 c4 10             	add    esp,0x10
10001ed0:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10001ed3:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
10001ed6:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
10001ed9:	e9 78 ff ff ff       	jmp    10001e56 <createKey(char*, unsigned int)+0x50>
10001ede:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001ee1:	83 e0 0f             	and    eax,0xf
10001ee4:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
10001ee7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001eea:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001eed:	0f ac d0 04          	shrd   eax,edx,0x4
10001ef1:	c1 ea 04             	shr    edx,0x4
10001ef4:	89 c1                	mov    ecx,eax
10001ef6:	89 d3                	mov    ebx,edx
10001ef8:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
10001efb:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
10001efe:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001f01:	83 e0 0f             	and    eax,0xf
10001f04:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10001f07:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001f0a:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001f0d:	0f ac d0 04          	shrd   eax,edx,0x4
10001f11:	c1 ea 04             	shr    edx,0x4
10001f14:	89 c1                	mov    ecx,eax
10001f16:	89 d3                	mov    ebx,edx
10001f18:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
10001f1b:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
10001f1e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001f21:	83 e0 0f             	and    eax,0xf
10001f24:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
10001f27:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001f2a:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001f2d:	0f ac d0 04          	shrd   eax,edx,0x4
10001f31:	c1 ea 04             	shr    edx,0x4
10001f34:	89 c1                	mov    ecx,eax
10001f36:	89 d3                	mov    ebx,edx
10001f38:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
10001f3b:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
10001f3e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001f41:	25 ff 03 00 00       	and    eax,0x3ff
10001f46:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
10001f49:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001f4c:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001f4f:	0f ac d0 0a          	shrd   eax,edx,0xa
10001f53:	c1 ea 0a             	shr    edx,0xa
10001f56:	89 c1                	mov    ecx,eax
10001f58:	89 d3                	mov    ebx,edx
10001f5a:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
10001f5d:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
10001f60:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001f63:	25 ff 03 00 00       	and    eax,0x3ff
10001f68:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
10001f6b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001f6e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001f71:	0f ac d0 0a          	shrd   eax,edx,0xa
10001f75:	c1 ea 0a             	shr    edx,0xa
10001f78:	89 c1                	mov    ecx,eax
10001f7a:	89 d3                	mov    ebx,edx
10001f7c:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
10001f7f:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
10001f82:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001f85:	25 ff 03 00 00       	and    eax,0x3ff
10001f8a:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
10001f8d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001f90:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001f93:	0f ac d0 0a          	shrd   eax,edx,0xa
10001f97:	c1 ea 0a             	shr    edx,0xa
10001f9a:	89 c1                	mov    ecx,eax
10001f9c:	89 d3                	mov    ebx,edx
10001f9e:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
10001fa1:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
10001fa4:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
10001fa7:	05 00 00 00 00       	add    eax,0x0	10001fa8: R_386_32	lookupA
10001fac:	8a 10                	mov    dl,BYTE PTR [eax]
10001fae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001fb1:	88 10                	mov    BYTE PTR [eax],dl
10001fb3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001fb6:	8d 50 01             	lea    edx,[eax+0x1]
10001fb9:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10001fbc:	05 00 00 00 00       	add    eax,0x0	10001fbd: R_386_32	lookupA
10001fc1:	8a 00                	mov    al,BYTE PTR [eax]
10001fc3:	88 02                	mov    BYTE PTR [edx],al
10001fc5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001fc8:	8d 50 0f             	lea    edx,[eax+0xf]
10001fcb:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10001fce:	05 00 00 00 00       	add    eax,0x0	10001fcf: R_386_32	lookupA
10001fd3:	8a 00                	mov    al,BYTE PTR [eax]
10001fd5:	88 02                	mov    BYTE PTR [edx],al
10001fd7:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
10001fda:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
10001fdf:	f7 e9                	imul   ecx
10001fe1:	c1 fa 05             	sar    edx,0x5
10001fe4:	89 c8                	mov    eax,ecx
10001fe6:	c1 f8 1f             	sar    eax,0x1f
10001fe9:	29 c2                	sub    edx,eax
10001feb:	89 d0                	mov    eax,edx
10001fed:	b9 0a 00 00 00       	mov    ecx,0xa
10001ff2:	99                   	cdq    
10001ff3:	f7 f9                	idiv   ecx
10001ff5:	89 d0                	mov    eax,edx
10001ff7:	8d 50 30             	lea    edx,[eax+0x30]
10001ffa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001ffd:	83 c0 03             	add    eax,0x3
10002000:	88 10                	mov    BYTE PTR [eax],dl
10002002:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
10002005:	b8 67 66 66 66       	mov    eax,0x66666667
1000200a:	f7 e9                	imul   ecx
1000200c:	c1 fa 02             	sar    edx,0x2
1000200f:	89 c8                	mov    eax,ecx
10002011:	c1 f8 1f             	sar    eax,0x1f
10002014:	89 d1                	mov    ecx,edx
10002016:	29 c1                	sub    ecx,eax
10002018:	b8 67 66 66 66       	mov    eax,0x66666667
1000201d:	f7 e9                	imul   ecx
1000201f:	c1 fa 02             	sar    edx,0x2
10002022:	89 c8                	mov    eax,ecx
10002024:	c1 f8 1f             	sar    eax,0x1f
10002027:	29 c2                	sub    edx,eax
10002029:	89 d0                	mov    eax,edx
1000202b:	c1 e0 02             	shl    eax,0x2
1000202e:	01 d0                	add    eax,edx
10002030:	01 c0                	add    eax,eax
10002032:	29 c1                	sub    ecx,eax
10002034:	89 ca                	mov    edx,ecx
10002036:	88 d0                	mov    al,dl
10002038:	8d 50 30             	lea    edx,[eax+0x30]
1000203b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000203e:	83 c0 04             	add    eax,0x4
10002041:	88 10                	mov    BYTE PTR [eax],dl
10002043:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10002046:	b9 0a 00 00 00       	mov    ecx,0xa
1000204b:	99                   	cdq    
1000204c:	f7 f9                	idiv   ecx
1000204e:	89 d0                	mov    eax,edx
10002050:	8d 50 30             	lea    edx,[eax+0x30]
10002053:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002056:	83 c0 05             	add    eax,0x5
10002059:	88 10                	mov    BYTE PTR [eax],dl
1000205b:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
1000205e:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
10002063:	f7 e9                	imul   ecx
10002065:	c1 fa 05             	sar    edx,0x5
10002068:	89 c8                	mov    eax,ecx
1000206a:	c1 f8 1f             	sar    eax,0x1f
1000206d:	29 c2                	sub    edx,eax
1000206f:	89 d0                	mov    eax,edx
10002071:	b9 0a 00 00 00       	mov    ecx,0xa
10002076:	99                   	cdq    
10002077:	f7 f9                	idiv   ecx
10002079:	89 d0                	mov    eax,edx
1000207b:	8d 50 30             	lea    edx,[eax+0x30]
1000207e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002081:	83 c0 07             	add    eax,0x7
10002084:	88 10                	mov    BYTE PTR [eax],dl
10002086:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
10002089:	b8 67 66 66 66       	mov    eax,0x66666667
1000208e:	f7 e9                	imul   ecx
10002090:	c1 fa 02             	sar    edx,0x2
10002093:	89 c8                	mov    eax,ecx
10002095:	c1 f8 1f             	sar    eax,0x1f
10002098:	89 d1                	mov    ecx,edx
1000209a:	29 c1                	sub    ecx,eax
1000209c:	b8 67 66 66 66       	mov    eax,0x66666667
100020a1:	f7 e9                	imul   ecx
100020a3:	c1 fa 02             	sar    edx,0x2
100020a6:	89 c8                	mov    eax,ecx
100020a8:	c1 f8 1f             	sar    eax,0x1f
100020ab:	29 c2                	sub    edx,eax
100020ad:	89 d0                	mov    eax,edx
100020af:	c1 e0 02             	shl    eax,0x2
100020b2:	01 d0                	add    eax,edx
100020b4:	01 c0                	add    eax,eax
100020b6:	29 c1                	sub    ecx,eax
100020b8:	89 ca                	mov    edx,ecx
100020ba:	88 d0                	mov    al,dl
100020bc:	8d 50 30             	lea    edx,[eax+0x30]
100020bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100020c2:	83 c0 08             	add    eax,0x8
100020c5:	88 10                	mov    BYTE PTR [eax],dl
100020c7:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
100020ca:	b9 0a 00 00 00       	mov    ecx,0xa
100020cf:	99                   	cdq    
100020d0:	f7 f9                	idiv   ecx
100020d2:	89 d0                	mov    eax,edx
100020d4:	8d 50 30             	lea    edx,[eax+0x30]
100020d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100020da:	83 c0 09             	add    eax,0x9
100020dd:	88 10                	mov    BYTE PTR [eax],dl
100020df:	8b 4d d4             	mov    ecx,DWORD PTR [ebp-0x2c]
100020e2:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
100020e7:	f7 e9                	imul   ecx
100020e9:	c1 fa 05             	sar    edx,0x5
100020ec:	89 c8                	mov    eax,ecx
100020ee:	c1 f8 1f             	sar    eax,0x1f
100020f1:	29 c2                	sub    edx,eax
100020f3:	89 d0                	mov    eax,edx
100020f5:	b9 0a 00 00 00       	mov    ecx,0xa
100020fa:	99                   	cdq    
100020fb:	f7 f9                	idiv   ecx
100020fd:	89 d0                	mov    eax,edx
100020ff:	8d 50 30             	lea    edx,[eax+0x30]
10002102:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002105:	83 c0 0b             	add    eax,0xb
10002108:	88 10                	mov    BYTE PTR [eax],dl
1000210a:	8b 4d d4             	mov    ecx,DWORD PTR [ebp-0x2c]
1000210d:	b8 67 66 66 66       	mov    eax,0x66666667
10002112:	f7 e9                	imul   ecx
10002114:	c1 fa 02             	sar    edx,0x2
10002117:	89 c8                	mov    eax,ecx
10002119:	c1 f8 1f             	sar    eax,0x1f
1000211c:	89 d1                	mov    ecx,edx
1000211e:	29 c1                	sub    ecx,eax
10002120:	b8 67 66 66 66       	mov    eax,0x66666667
10002125:	f7 e9                	imul   ecx
10002127:	c1 fa 02             	sar    edx,0x2
1000212a:	89 c8                	mov    eax,ecx
1000212c:	c1 f8 1f             	sar    eax,0x1f
1000212f:	29 c2                	sub    edx,eax
10002131:	89 d0                	mov    eax,edx
10002133:	c1 e0 02             	shl    eax,0x2
10002136:	01 d0                	add    eax,edx
10002138:	01 c0                	add    eax,eax
1000213a:	29 c1                	sub    ecx,eax
1000213c:	89 ca                	mov    edx,ecx
1000213e:	88 d0                	mov    al,dl
10002140:	8d 50 30             	lea    edx,[eax+0x30]
10002143:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002146:	83 c0 0c             	add    eax,0xc
10002149:	88 10                	mov    BYTE PTR [eax],dl
1000214b:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
1000214e:	b9 0a 00 00 00       	mov    ecx,0xa
10002153:	99                   	cdq    
10002154:	f7 f9                	idiv   ecx
10002156:	89 d0                	mov    eax,edx
10002158:	8d 50 30             	lea    edx,[eax+0x30]
1000215b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000215e:	83 c0 0d             	add    eax,0xd
10002161:	88 10                	mov    BYTE PTR [eax],dl
10002163:	90                   	nop
10002164:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
10002167:	c9                   	leave  
10002168:	c3                   	ret    

10002169 <retrieveBits(char*)>:
10002169:	55                   	push   ebp
1000216a:	89 e5                	mov    ebp,esp
1000216c:	57                   	push   edi
1000216d:	56                   	push   esi
1000216e:	53                   	push   ebx
1000216f:	83 ec 4c             	sub    esp,0x4c
10002172:	c7 45 ec ff ff ff ff 	mov    DWORD PTR [ebp-0x14],0xffffffff
10002179:	c7 45 e8 ff ff ff ff 	mov    DWORD PTR [ebp-0x18],0xffffffff
10002180:	c7 45 e4 ff ff ff ff 	mov    DWORD PTR [ebp-0x1c],0xffffffff
10002187:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
1000218e:	83 7d e0 0f          	cmp    DWORD PTR [ebp-0x20],0xf
10002192:	7f 54                	jg     100021e8 <retrieveBits(char*)+0x7f>
10002194:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10002197:	05 00 00 00 00       	add    eax,0x0	10002198: R_386_32	lookupA
1000219c:	8a 10                	mov    dl,BYTE PTR [eax]
1000219e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100021a1:	8a 00                	mov    al,BYTE PTR [eax]
100021a3:	38 c2                	cmp    dl,al
100021a5:	75 06                	jne    100021ad <retrieveBits(char*)+0x44>
100021a7:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
100021aa:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
100021ad:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
100021b0:	05 00 00 00 00       	add    eax,0x0	100021b1: R_386_32	lookupB
100021b5:	8a 10                	mov    dl,BYTE PTR [eax]
100021b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100021ba:	40                   	inc    eax
100021bb:	8a 00                	mov    al,BYTE PTR [eax]
100021bd:	38 c2                	cmp    dl,al
100021bf:	75 06                	jne    100021c7 <retrieveBits(char*)+0x5e>
100021c1:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
100021c4:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
100021c7:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
100021ca:	05 00 00 00 00       	add    eax,0x0	100021cb: R_386_32	lookupC
100021cf:	8a 10                	mov    dl,BYTE PTR [eax]
100021d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100021d4:	83 c0 0f             	add    eax,0xf
100021d7:	8a 00                	mov    al,BYTE PTR [eax]
100021d9:	38 c2                	cmp    dl,al
100021db:	75 06                	jne    100021e3 <retrieveBits(char*)+0x7a>
100021dd:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
100021e0:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
100021e3:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
100021e6:	eb a6                	jmp    1000218e <retrieveBits(char*)+0x25>
100021e8:	83 7d ec ff          	cmp    DWORD PTR [ebp-0x14],0xffffffff
100021ec:	74 0c                	je     100021fa <retrieveBits(char*)+0x91>
100021ee:	83 7d e8 ff          	cmp    DWORD PTR [ebp-0x18],0xffffffff
100021f2:	74 06                	je     100021fa <retrieveBits(char*)+0x91>
100021f4:	83 7d e4 ff          	cmp    DWORD PTR [ebp-0x1c],0xffffffff
100021f8:	75 0f                	jne    10002209 <retrieveBits(char*)+0xa0>
100021fa:	b8 00 00 00 00       	mov    eax,0x0
100021ff:	ba 00 00 00 00       	mov    edx,0x0
10002204:	e9 02 02 00 00       	jmp    1000240b <retrieveBits(char*)+0x2a2>
10002209:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000220c:	83 c0 03             	add    eax,0x3
1000220f:	8a 00                	mov    al,BYTE PTR [eax]
10002211:	0f be c0             	movsx  eax,al
10002214:	8d 50 d0             	lea    edx,[eax-0x30]
10002217:	89 d0                	mov    eax,edx
10002219:	c1 e0 02             	shl    eax,0x2
1000221c:	01 d0                	add    eax,edx
1000221e:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10002225:	01 d0                	add    eax,edx
10002227:	c1 e0 02             	shl    eax,0x2
1000222a:	89 c6                	mov    esi,eax
1000222c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000222f:	83 c0 04             	add    eax,0x4
10002232:	8a 00                	mov    al,BYTE PTR [eax]
10002234:	0f be c0             	movsx  eax,al
10002237:	8d 50 d0             	lea    edx,[eax-0x30]
1000223a:	89 d0                	mov    eax,edx
1000223c:	c1 e0 02             	shl    eax,0x2
1000223f:	01 d0                	add    eax,edx
10002241:	01 c0                	add    eax,eax
10002243:	8d 14 06             	lea    edx,[esi+eax*1]
10002246:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002249:	83 c0 05             	add    eax,0x5
1000224c:	8a 00                	mov    al,BYTE PTR [eax]
1000224e:	0f be c0             	movsx  eax,al
10002251:	83 e8 30             	sub    eax,0x30
10002254:	01 d0                	add    eax,edx
10002256:	99                   	cdq    
10002257:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
1000225a:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
1000225d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002260:	83 c0 07             	add    eax,0x7
10002263:	8a 00                	mov    al,BYTE PTR [eax]
10002265:	0f be c0             	movsx  eax,al
10002268:	8d 50 d0             	lea    edx,[eax-0x30]
1000226b:	89 d0                	mov    eax,edx
1000226d:	c1 e0 02             	shl    eax,0x2
10002270:	01 d0                	add    eax,edx
10002272:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10002279:	01 d0                	add    eax,edx
1000227b:	c1 e0 02             	shl    eax,0x2
1000227e:	89 c6                	mov    esi,eax
10002280:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002283:	83 c0 08             	add    eax,0x8
10002286:	8a 00                	mov    al,BYTE PTR [eax]
10002288:	0f be c0             	movsx  eax,al
1000228b:	8d 50 d0             	lea    edx,[eax-0x30]
1000228e:	89 d0                	mov    eax,edx
10002290:	c1 e0 02             	shl    eax,0x2
10002293:	01 d0                	add    eax,edx
10002295:	01 c0                	add    eax,eax
10002297:	8d 14 06             	lea    edx,[esi+eax*1]
1000229a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000229d:	83 c0 09             	add    eax,0x9
100022a0:	8a 00                	mov    al,BYTE PTR [eax]
100022a2:	0f be c0             	movsx  eax,al
100022a5:	83 e8 30             	sub    eax,0x30
100022a8:	01 d0                	add    eax,edx
100022aa:	99                   	cdq    
100022ab:	89 45 c0             	mov    DWORD PTR [ebp-0x40],eax
100022ae:	89 55 c4             	mov    DWORD PTR [ebp-0x3c],edx
100022b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100022b4:	83 c0 0b             	add    eax,0xb
100022b7:	8a 00                	mov    al,BYTE PTR [eax]
100022b9:	0f be c0             	movsx  eax,al
100022bc:	8d 50 d0             	lea    edx,[eax-0x30]
100022bf:	89 d0                	mov    eax,edx
100022c1:	c1 e0 02             	shl    eax,0x2
100022c4:	01 d0                	add    eax,edx
100022c6:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
100022cd:	01 d0                	add    eax,edx
100022cf:	c1 e0 02             	shl    eax,0x2
100022d2:	89 c6                	mov    esi,eax
100022d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100022d7:	83 c0 0c             	add    eax,0xc
100022da:	8a 00                	mov    al,BYTE PTR [eax]
100022dc:	0f be c0             	movsx  eax,al
100022df:	8d 50 d0             	lea    edx,[eax-0x30]
100022e2:	89 d0                	mov    eax,edx
100022e4:	c1 e0 02             	shl    eax,0x2
100022e7:	01 d0                	add    eax,edx
100022e9:	01 c0                	add    eax,eax
100022eb:	8d 14 06             	lea    edx,[esi+eax*1]
100022ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100022f1:	83 c0 0d             	add    eax,0xd
100022f4:	8a 00                	mov    al,BYTE PTR [eax]
100022f6:	0f be c0             	movsx  eax,al
100022f9:	83 e8 30             	sub    eax,0x30
100022fc:	01 d0                	add    eax,edx
100022fe:	99                   	cdq    
100022ff:	89 45 b8             	mov    DWORD PTR [ebp-0x48],eax
10002302:	89 55 bc             	mov    DWORD PTR [ebp-0x44],edx
10002305:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
10002308:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
1000230b:	0f a4 c2 0a          	shld   edx,eax,0xa
1000230f:	c1 e0 0a             	shl    eax,0xa
10002312:	89 c6                	mov    esi,eax
10002314:	89 d7                	mov    edi,edx
10002316:	89 f0                	mov    eax,esi
10002318:	0b 45 c8             	or     eax,DWORD PTR [ebp-0x38]
1000231b:	89 c1                	mov    ecx,eax
1000231d:	89 f8                	mov    eax,edi
1000231f:	0b 45 cc             	or     eax,DWORD PTR [ebp-0x34]
10002322:	89 c3                	mov    ebx,eax
10002324:	8b 45 b8             	mov    eax,DWORD PTR [ebp-0x48]
10002327:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
1000232a:	0f a4 c2 14          	shld   edx,eax,0x14
1000232e:	c1 e0 14             	shl    eax,0x14
10002331:	89 ce                	mov    esi,ecx
10002333:	89 45 a8             	mov    DWORD PTR [ebp-0x58],eax
10002336:	89 55 ac             	mov    DWORD PTR [ebp-0x54],edx
10002339:	0b 75 a8             	or     esi,DWORD PTR [ebp-0x58]
1000233c:	89 75 d8             	mov    DWORD PTR [ebp-0x28],esi
1000233f:	89 d8                	mov    eax,ebx
10002341:	0b 45 ac             	or     eax,DWORD PTR [ebp-0x54]
10002344:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
10002347:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
1000234a:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
1000234d:	0f a4 c2 0c          	shld   edx,eax,0xc
10002351:	c1 e0 0c             	shl    eax,0xc
10002354:	89 c3                	mov    ebx,eax
10002356:	89 d6                	mov    esi,edx
10002358:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
1000235b:	89 75 dc             	mov    DWORD PTR [ebp-0x24],esi
1000235e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
10002361:	c1 e0 04             	shl    eax,0x4
10002364:	0b 45 ec             	or     eax,DWORD PTR [ebp-0x14]
10002367:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
1000236a:	c1 e2 08             	shl    edx,0x8
1000236d:	09 d0                	or     eax,edx
1000236f:	99                   	cdq    
10002370:	09 45 d8             	or     DWORD PTR [ebp-0x28],eax
10002373:	09 55 dc             	or     DWORD PTR [ebp-0x24],edx
10002376:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
1000237d:	81 7d d4 db 24 00 00 	cmp    DWORD PTR [ebp-0x2c],0x24db
10002384:	7f 7f                	jg     10002405 <retrieveBits(char*)+0x29c>
10002386:	6a 2a                	push   0x2a
10002388:	6a 13                	push   0x13
1000238a:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
1000238d:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10002390:	e8 fc ff ff ff       	call   10002391 <retrieveBits(char*)+0x228>	10002391: R_386_PC32	ror(unsigned long long, int, int)
10002395:	83 c4 10             	add    esp,0x10
10002398:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
1000239b:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
1000239e:	6a 00                	push   0x0
100023a0:	6a 08                	push   0x8
100023a2:	6a 00                	push   0x0
100023a4:	6a 03                	push   0x3
100023a6:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
100023a9:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
100023ac:	e8 fc ff ff ff       	call   100023ad <retrieveBits(char*)+0x244>	100023ad: R_386_PC32	swapBits(unsigned long long, unsigned long long, unsigned long long)
100023b1:	83 c4 18             	add    esp,0x18
100023b4:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
100023b7:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
100023ba:	6a 00                	push   0x0
100023bc:	6a 0c                	push   0xc
100023be:	6a 00                	push   0x0
100023c0:	6a 0d                	push   0xd
100023c2:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
100023c5:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
100023c8:	e8 fc ff ff ff       	call   100023c9 <retrieveBits(char*)+0x260>	100023c9: R_386_PC32	swapBits(unsigned long long, unsigned long long, unsigned long long)
100023cd:	83 c4 18             	add    esp,0x18
100023d0:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
100023d3:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
100023d6:	6a 00                	push   0x0
100023d8:	6a 16                	push   0x16
100023da:	6a 00                	push   0x0
100023dc:	6a 25                	push   0x25
100023de:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
100023e1:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
100023e4:	e8 fc ff ff ff       	call   100023e5 <retrieveBits(char*)+0x27c>	100023e5: R_386_PC32	swapBits(unsigned long long, unsigned long long, unsigned long long)
100023e9:	83 c4 18             	add    esp,0x18
100023ec:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
100023ef:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
100023f2:	81 75 d8 95 38 e4 b5 	xor    DWORD PTR [ebp-0x28],0xb5e43895
100023f9:	83 75 dc 37          	xor    DWORD PTR [ebp-0x24],0x37
100023fd:	ff 45 d4             	inc    DWORD PTR [ebp-0x2c]
10002400:	e9 78 ff ff ff       	jmp    1000237d <retrieveBits(char*)+0x214>
10002405:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10002408:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
1000240b:	8d 65 f4             	lea    esp,[ebp-0xc]
1000240e:	5b                   	pop    ebx
1000240f:	5e                   	pop    esi
10002410:	5f                   	pop    edi
10002411:	5d                   	pop    ebp
10002412:	c3                   	ret    

10002413 <checkKey(char*)>:
10002413:	55                   	push   ebp
10002414:	89 e5                	mov    ebp,esp
10002416:	53                   	push   ebx
10002417:	83 ec 14             	sub    esp,0x14
1000241a:	83 ec 04             	sub    esp,0x4
1000241d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002420:	e8 fc ff ff ff       	call   10002421 <checkKey(char*)+0xe>	10002421: R_386_PC32	retrieveBits(char*)
10002425:	83 c4 08             	add    esp,0x8
10002428:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
1000242b:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
1000242e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10002431:	25 ff 7f 00 00       	and    eax,0x7fff
10002436:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
10002439:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
1000243c:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
1000243f:	0f ac d0 0f          	shrd   eax,edx,0xf
10002443:	c1 ea 0f             	shr    edx,0xf
10002446:	89 c1                	mov    ecx,eax
10002448:	89 d3                	mov    ebx,edx
1000244a:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
1000244d:	83 ec 04             	sub    esp,0x4
10002450:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
10002453:	e8 fc ff ff ff       	call   10002454 <checkKey(char*)+0x41>	10002454: R_386_PC32	getChecksum(unsigned int)
10002458:	83 c4 08             	add    esp,0x8
1000245b:	39 45 ec             	cmp    DWORD PTR [ebp-0x14],eax
1000245e:	0f 95 c0             	setne  al
10002461:	84 c0                	test   al,al
10002463:	74 07                	je     1000246c <checkKey(char*)+0x59>
10002465:	b8 00 00 00 00       	mov    eax,0x0
1000246a:	eb 06                	jmp    10002472 <checkKey(char*)+0x5f>
1000246c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
1000246f:	83 e0 07             	and    eax,0x7
10002472:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
10002475:	c9                   	leave  
10002476:	c3                   	ret    

10002477 <changeKeyType(char*, int)>:
10002477:	55                   	push   ebp
10002478:	89 e5                	mov    ebp,esp
1000247a:	83 ec 10             	sub    esp,0x10
1000247d:	83 ec 04             	sub    esp,0x4
10002480:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002483:	e8 fc ff ff ff       	call   10002484 <changeKeyType(char*, int)+0xd>	10002484: R_386_PC32	retrieveBits(char*)
10002488:	83 c4 08             	add    esp,0x8
1000248b:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
1000248e:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
10002491:	83 65 f8 f8          	and    DWORD PTR [ebp-0x8],0xfffffff8
10002495:	83 65 fc ff          	and    DWORD PTR [ebp-0x4],0xffffffff
10002499:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
1000249c:	99                   	cdq    
1000249d:	09 45 f8             	or     DWORD PTR [ebp-0x8],eax
100024a0:	09 55 fc             	or     DWORD PTR [ebp-0x4],edx
100024a3:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
100024a6:	50                   	push   eax
100024a7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100024aa:	e8 fc ff ff ff       	call   100024ab <changeKeyType(char*, int)+0x34>	100024ab: R_386_PC32	createKey(char*, unsigned int)
100024af:	83 c4 08             	add    esp,0x8
100024b2:	83 ec 04             	sub    esp,0x4
100024b5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100024b8:	e8 fc ff ff ff       	call   100024b9 <changeKeyType(char*, int)+0x42>	100024b9: R_386_PC32	checkKey(char*)
100024bd:	83 c4 08             	add    esp,0x8
100024c0:	85 c0                	test   eax,eax
100024c2:	0f 95 c0             	setne  al
100024c5:	c9                   	leave  
100024c6:	c3                   	ret    

100024c7 <checkExtendedKey(char*)>:
100024c7:	55                   	push   ebp
100024c8:	89 e5                	mov    ebp,esp
100024ca:	83 ec 20             	sub    esp,0x20
100024cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100024d0:	8a 00                	mov    al,BYTE PTR [eax]
100024d2:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
100024d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100024d8:	8a 40 01             	mov    al,BYTE PTR [eax+0x1]
100024db:	88 45 ed             	mov    BYTE PTR [ebp-0x13],al
100024de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100024e1:	8a 40 02             	mov    al,BYTE PTR [eax+0x2]
100024e4:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
100024e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100024ea:	8a 40 03             	mov    al,BYTE PTR [eax+0x3]
100024ed:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
100024f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100024f3:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
100024f6:	88 45 f0             	mov    BYTE PTR [ebp-0x10],al
100024f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100024fc:	8a 40 05             	mov    al,BYTE PTR [eax+0x5]
100024ff:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
10002502:	c6 45 f2 2d          	mov    BYTE PTR [ebp-0xe],0x2d
10002506:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002509:	8a 40 06             	mov    al,BYTE PTR [eax+0x6]
1000250c:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
1000250f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002512:	8a 40 07             	mov    al,BYTE PTR [eax+0x7]
10002515:	88 45 f4             	mov    BYTE PTR [ebp-0xc],al
10002518:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000251b:	8a 40 09             	mov    al,BYTE PTR [eax+0x9]
1000251e:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
10002521:	c6 45 f6 2d          	mov    BYTE PTR [ebp-0xa],0x2d
10002525:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002528:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
1000252b:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
1000252e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002531:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
10002534:	88 45 f8             	mov    BYTE PTR [ebp-0x8],al
10002537:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000253a:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
1000253d:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
10002540:	c6 45 fa 2d          	mov    BYTE PTR [ebp-0x6],0x2d
10002544:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002547:	8a 40 0f             	mov    al,BYTE PTR [eax+0xf]
1000254a:	88 45 fb             	mov    BYTE PTR [ebp-0x5],al
1000254d:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
10002550:	3c 2f                	cmp    al,0x2f
10002552:	7e 07                	jle    1000255b <checkExtendedKey(char*)+0x94>
10002554:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
10002557:	3c 39                	cmp    al,0x39
10002559:	7e 0a                	jle    10002565 <checkExtendedKey(char*)+0x9e>
1000255b:	b8 00 00 00 00       	mov    eax,0x0
10002560:	e9 be 00 00 00       	jmp    10002623 <checkExtendedKey(char*)+0x15c>
10002565:	8a 45 f0             	mov    al,BYTE PTR [ebp-0x10]
10002568:	3c 2f                	cmp    al,0x2f
1000256a:	7e 07                	jle    10002573 <checkExtendedKey(char*)+0xac>
1000256c:	8a 45 f0             	mov    al,BYTE PTR [ebp-0x10]
1000256f:	3c 39                	cmp    al,0x39
10002571:	7e 0a                	jle    1000257d <checkExtendedKey(char*)+0xb6>
10002573:	b8 00 00 00 00       	mov    eax,0x0
10002578:	e9 a6 00 00 00       	jmp    10002623 <checkExtendedKey(char*)+0x15c>
1000257d:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
10002580:	3c 2f                	cmp    al,0x2f
10002582:	7e 07                	jle    1000258b <checkExtendedKey(char*)+0xc4>
10002584:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
10002587:	3c 39                	cmp    al,0x39
10002589:	7e 0a                	jle    10002595 <checkExtendedKey(char*)+0xce>
1000258b:	b8 00 00 00 00       	mov    eax,0x0
10002590:	e9 8e 00 00 00       	jmp    10002623 <checkExtendedKey(char*)+0x15c>
10002595:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
10002598:	3c 2f                	cmp    al,0x2f
1000259a:	7e 07                	jle    100025a3 <checkExtendedKey(char*)+0xdc>
1000259c:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
1000259f:	3c 39                	cmp    al,0x39
100025a1:	7e 07                	jle    100025aa <checkExtendedKey(char*)+0xe3>
100025a3:	b8 00 00 00 00       	mov    eax,0x0
100025a8:	eb 79                	jmp    10002623 <checkExtendedKey(char*)+0x15c>
100025aa:	8a 45 f4             	mov    al,BYTE PTR [ebp-0xc]
100025ad:	3c 2f                	cmp    al,0x2f
100025af:	7e 07                	jle    100025b8 <checkExtendedKey(char*)+0xf1>
100025b1:	8a 45 f4             	mov    al,BYTE PTR [ebp-0xc]
100025b4:	3c 39                	cmp    al,0x39
100025b6:	7e 07                	jle    100025bf <checkExtendedKey(char*)+0xf8>
100025b8:	b8 00 00 00 00       	mov    eax,0x0
100025bd:	eb 64                	jmp    10002623 <checkExtendedKey(char*)+0x15c>
100025bf:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
100025c2:	3c 2f                	cmp    al,0x2f
100025c4:	7e 07                	jle    100025cd <checkExtendedKey(char*)+0x106>
100025c6:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
100025c9:	3c 39                	cmp    al,0x39
100025cb:	7e 07                	jle    100025d4 <checkExtendedKey(char*)+0x10d>
100025cd:	b8 00 00 00 00       	mov    eax,0x0
100025d2:	eb 4f                	jmp    10002623 <checkExtendedKey(char*)+0x15c>
100025d4:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
100025d7:	3c 2f                	cmp    al,0x2f
100025d9:	7e 07                	jle    100025e2 <checkExtendedKey(char*)+0x11b>
100025db:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
100025de:	3c 39                	cmp    al,0x39
100025e0:	7e 07                	jle    100025e9 <checkExtendedKey(char*)+0x122>
100025e2:	b8 00 00 00 00       	mov    eax,0x0
100025e7:	eb 3a                	jmp    10002623 <checkExtendedKey(char*)+0x15c>
100025e9:	8a 45 f8             	mov    al,BYTE PTR [ebp-0x8]
100025ec:	3c 2f                	cmp    al,0x2f
100025ee:	7e 07                	jle    100025f7 <checkExtendedKey(char*)+0x130>
100025f0:	8a 45 f8             	mov    al,BYTE PTR [ebp-0x8]
100025f3:	3c 39                	cmp    al,0x39
100025f5:	7e 07                	jle    100025fe <checkExtendedKey(char*)+0x137>
100025f7:	b8 00 00 00 00       	mov    eax,0x0
100025fc:	eb 25                	jmp    10002623 <checkExtendedKey(char*)+0x15c>
100025fe:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
10002601:	3c 2f                	cmp    al,0x2f
10002603:	7e 07                	jle    1000260c <checkExtendedKey(char*)+0x145>
10002605:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
10002608:	3c 39                	cmp    al,0x39
1000260a:	7e 07                	jle    10002613 <checkExtendedKey(char*)+0x14c>
1000260c:	b8 00 00 00 00       	mov    eax,0x0
10002611:	eb 10                	jmp    10002623 <checkExtendedKey(char*)+0x15c>
10002613:	83 ec 04             	sub    esp,0x4
10002616:	8d 45 ec             	lea    eax,[ebp-0x14]
10002619:	50                   	push   eax
1000261a:	e8 fc ff ff ff       	call   1000261b <checkExtendedKey(char*)+0x154>	1000261b: R_386_PC32	checkKey(char*)
1000261f:	83 c4 08             	add    esp,0x8
10002622:	90                   	nop
10002623:	c9                   	leave  
10002624:	c3                   	ret    

10002625 <firstRun()>:
10002625:	55                   	push   ebp
10002626:	89 e5                	mov    ebp,esp
10002628:	57                   	push   edi
10002629:	53                   	push   ebx
1000262a:	81 ec 10 01 00 00    	sub    esp,0x110
10002630:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10002632: R_386_32	guiKeyboardHandler
	10002636: R_386_32	bootInstallKeybrd(KeyboardToken, bool*)
1000263a:	83 ec 0c             	sub    esp,0xc
1000263d:	68 98 46 00 10       	push   0x10004698	1000263e: R_386_32	.text
10002642:	e8 fc ff ff ff       	call   10002643 <firstRun()+0x1e>	10002643: R_386_PC32	KeSetBootMessage(char const*)
10002647:	83 c4 10             	add    esp,0x10
1000264a:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	1000264c: R_386_32	VgaText::hiddenOut
10002651:	a1 00 00 00 00       	mov    eax,ds:0x0	10002652: R_386_32	activeTerminal
10002656:	83 ec 08             	sub    esp,0x8
10002659:	68 c1 46 00 10       	push   0x100046c1	1000265a: R_386_32	.text
1000265e:	50                   	push   eax
1000265f:	e8 fc ff ff ff       	call   10002660 <firstRun()+0x3b>	10002660: R_386_PC32	VgaText::puts(char const*)
10002664:	83 c4 10             	add    esp,0x10
10002667:	a1 00 00 00 00       	mov    eax,ds:0x0	10002668: R_386_32	kernelProcess
1000266c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
10002672:	83 ec 08             	sub    esp,0x8
10002675:	68 c1 46 00 10       	push   0x100046c1	10002676: R_386_32	.text
1000267a:	50                   	push   eax
1000267b:	e8 fc ff ff ff       	call   1000267c <firstRun()+0x57>	1000267c: R_386_PC32	VgaText::puts(char const*)
10002680:	83 c4 10             	add    esp,0x10
10002683:	83 ec 0c             	sub    esp,0xc
10002686:	68 84 01 00 00       	push   0x184
1000268b:	e8 fc ff ff ff       	call   1000268c <firstRun()+0x67>	1000268c: R_386_PC32	operator new(unsigned long)
10002690:	83 c4 10             	add    esp,0x10
10002693:	89 c3                	mov    ebx,eax
10002695:	83 ec 08             	sub    esp,0x8
10002698:	68 c8 46 00 10       	push   0x100046c8	10002699: R_386_32	.text
1000269d:	53                   	push   ebx
1000269e:	e8 fc ff ff ff       	call   1000269f <firstRun()+0x7a>	1000269f: R_386_PC32	VgaText::VgaText(char const*)
100026a3:	83 c4 10             	add    esp,0x10
100026a6:	89 1d 00 00 00 00    	mov    DWORD PTR ds:0x0,ebx	100026a8: R_386_32	term
100026ac:	a1 00 00 00 00       	mov    eax,ds:0x0	100026ad: R_386_32	term
100026b1:	83 ec 0c             	sub    esp,0xc
100026b4:	50                   	push   eax
100026b5:	e8 fc ff ff ff       	call   100026b6 <firstRun()+0x91>	100026b6: R_386_PC32	setActiveTerminal(VgaText*)
100026ba:	83 c4 10             	add    esp,0x10
100026bd:	e8 fc ff ff ff       	call   100026be <firstRun()+0x99>	100026be: R_386_PC32	drawBootScreen()
100026c2:	c7 45 90 41 6c 65 78 	mov    DWORD PTR [ebp-0x70],0x78656c41
100026c9:	c7 45 94 00 00 00 00 	mov    DWORD PTR [ebp-0x6c],0x0
100026d0:	8d 55 98             	lea    edx,[ebp-0x68]
100026d3:	b9 0a 00 00 00       	mov    ecx,0xa
100026d8:	b8 00 00 00 00       	mov    eax,0x0
100026dd:	89 d7                	mov    edi,edx
100026df:	f3 ab                	rep stos DWORD PTR es:[edi],eax
100026e1:	c7 85 60 ff ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0xa0],0x0
100026eb:	8d 95 64 ff ff ff    	lea    edx,[ebp-0x9c]
100026f1:	b9 0b 00 00 00       	mov    ecx,0xb
100026f6:	b8 00 00 00 00       	mov    eax,0x0
100026fb:	89 d7                	mov    edi,edx
100026fd:	f3 ab                	rep stos DWORD PTR es:[edi],eax
100026ff:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
10002706:	83 ec 0c             	sub    esp,0xc
10002709:	68 cd 46 00 10       	push   0x100046cd	1000270a: R_386_32	.text
1000270e:	6a 0c                	push   0xc
10002710:	6a 32                	push   0x32
10002712:	6a 03                	push   0x3
10002714:	6a 16                	push   0x16
10002716:	e8 fc ff ff ff       	call   10002717 <firstRun()+0xf2>	10002717: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
1000271b:	83 c4 20             	add    esp,0x20
1000271e:	a1 00 00 00 00       	mov    eax,ds:0x0	1000271f: R_386_32	term
10002723:	83 ec 04             	sub    esp,0x4
10002726:	6a 06                	push   0x6
10002728:	6a 18                	push   0x18
1000272a:	50                   	push   eax
1000272b:	e8 fc ff ff ff       	call   1000272c <firstRun()+0x107>	1000272c: R_386_PC32	VgaText::setCursor(int, int)
10002730:	83 c4 10             	add    esp,0x10
10002733:	a1 00 00 00 00       	mov    eax,ds:0x0	10002734: R_386_32	term
10002738:	83 ec 08             	sub    esp,0x8
1000273b:	68 dc 46 00 10       	push   0x100046dc	1000273c: R_386_32	.text
10002740:	50                   	push   eax
10002741:	e8 fc ff ff ff       	call   10002742 <firstRun()+0x11d>	10002742: R_386_PC32	VgaText::puts(char const*)
10002746:	83 c4 10             	add    esp,0x10
10002749:	a1 00 00 00 00       	mov    eax,ds:0x0	1000274a: R_386_32	term
1000274e:	83 ec 04             	sub    esp,0x4
10002751:	6a 07                	push   0x7
10002753:	6a 18                	push   0x18
10002755:	50                   	push   eax
10002756:	e8 fc ff ff ff       	call   10002757 <firstRun()+0x132>	10002757: R_386_PC32	VgaText::setCursor(int, int)
1000275b:	83 c4 10             	add    esp,0x10
1000275e:	a1 00 00 00 00       	mov    eax,ds:0x0	1000275f: R_386_32	term
10002763:	83 ec 08             	sub    esp,0x8
10002766:	68 0b 47 00 10       	push   0x1000470b	10002767: R_386_32	.text
1000276b:	50                   	push   eax
1000276c:	e8 fc ff ff ff       	call   1000276d <firstRun()+0x148>	1000276d: R_386_PC32	VgaText::puts(char const*)
10002771:	83 c4 10             	add    esp,0x10
10002774:	a1 00 00 00 00       	mov    eax,ds:0x0	10002775: R_386_32	term
10002779:	83 ec 04             	sub    esp,0x4
1000277c:	6a 09                	push   0x9
1000277e:	6a 18                	push   0x18
10002780:	50                   	push   eax
10002781:	e8 fc ff ff ff       	call   10002782 <firstRun()+0x15d>	10002782: R_386_PC32	VgaText::setCursor(int, int)
10002786:	83 c4 10             	add    esp,0x10
10002789:	a1 00 00 00 00       	mov    eax,ds:0x0	1000278a: R_386_32	term
1000278e:	83 ec 08             	sub    esp,0x8
10002791:	68 1b 47 00 10       	push   0x1000471b	10002792: R_386_32	.text
10002796:	50                   	push   eax
10002797:	e8 fc ff ff ff       	call   10002798 <firstRun()+0x173>	10002798: R_386_PC32	VgaText::puts(char const*)
1000279c:	83 c4 10             	add    esp,0x10
1000279f:	a1 00 00 00 00       	mov    eax,ds:0x0	100027a0: R_386_32	term
100027a4:	83 ec 04             	sub    esp,0x4
100027a7:	6a 0b                	push   0xb
100027a9:	6a 18                	push   0x18
100027ab:	50                   	push   eax
100027ac:	e8 fc ff ff ff       	call   100027ad <firstRun()+0x188>	100027ad: R_386_PC32	VgaText::setCursor(int, int)
100027b1:	83 c4 10             	add    esp,0x10
100027b4:	a1 00 00 00 00       	mov    eax,ds:0x0	100027b5: R_386_32	term
100027b9:	83 ec 08             	sub    esp,0x8
100027bc:	68 20 47 00 10       	push   0x10004720	100027bd: R_386_32	.text
100027c1:	50                   	push   eax
100027c2:	e8 fc ff ff ff       	call   100027c3 <firstRun()+0x19e>	100027c3: R_386_PC32	VgaText::puts(char const*)
100027c7:	83 c4 10             	add    esp,0x10
100027ca:	a1 00 00 00 00       	mov    eax,ds:0x0	100027cb: R_386_32	term
100027cf:	83 ec 04             	sub    esp,0x4
100027d2:	6a 09                	push   0x9
100027d4:	6a 21                	push   0x21
100027d6:	50                   	push   eax
100027d7:	e8 fc ff ff ff       	call   100027d8 <firstRun()+0x1b3>	100027d8: R_386_PC32	VgaText::setCursor(int, int)
100027dc:	83 c4 10             	add    esp,0x10
100027df:	a1 00 00 00 00       	mov    eax,ds:0x0	100027e0: R_386_32	term
100027e4:	6a 07                	push   0x7
100027e6:	6a 00                	push   0x0
100027e8:	68 28 47 00 10       	push   0x10004728	100027e9: R_386_32	.text
100027ed:	50                   	push   eax
100027ee:	e8 fc ff ff ff       	call   100027ef <firstRun()+0x1ca>	100027ef: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
100027f3:	83 c4 10             	add    esp,0x10
100027f6:	a1 00 00 00 00       	mov    eax,ds:0x0	100027f7: R_386_32	term
100027fb:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
100027ff:	75 07                	jne    10002808 <firstRun()+0x1e3>
10002801:	ba 42 47 00 10       	mov    edx,0x10004742	10002802: R_386_32	.text
10002806:	eb 05                	jmp    1000280d <firstRun()+0x1e8>
10002808:	ba 46 47 00 10       	mov    edx,0x10004746	10002809: R_386_32	.text
1000280d:	6a 0f                	push   0xf
1000280f:	6a 00                	push   0x0
10002811:	52                   	push   edx
10002812:	50                   	push   eax
10002813:	e8 fc ff ff ff       	call   10002814 <firstRun()+0x1ef>	10002814: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002818:	83 c4 10             	add    esp,0x10
1000281b:	a1 00 00 00 00       	mov    eax,ds:0x0	1000281c: R_386_32	term
10002820:	83 ec 08             	sub    esp,0x8
10002823:	6a 21                	push   0x21
10002825:	50                   	push   eax
10002826:	e8 fc ff ff ff       	call   10002827 <firstRun()+0x202>	10002827: R_386_PC32	VgaText::setCursorX(int)
1000282b:	83 c4 10             	add    esp,0x10
1000282e:	a1 00 00 00 00       	mov    eax,ds:0x0	1000282f: R_386_32	term
10002833:	6a 07                	push   0x7
10002835:	6a 00                	push   0x0
10002837:	8d 55 90             	lea    edx,[ebp-0x70]
1000283a:	52                   	push   edx
1000283b:	50                   	push   eax
1000283c:	e8 fc ff ff ff       	call   1000283d <firstRun()+0x218>	1000283d: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002841:	83 c4 10             	add    esp,0x10
10002844:	a1 00 00 00 00       	mov    eax,ds:0x0	10002845: R_386_32	term
10002849:	83 ec 04             	sub    esp,0x4
1000284c:	6a 0b                	push   0xb
1000284e:	6a 21                	push   0x21
10002850:	50                   	push   eax
10002851:	e8 fc ff ff ff       	call   10002852 <firstRun()+0x22d>	10002852: R_386_PC32	VgaText::setCursor(int, int)
10002856:	83 c4 10             	add    esp,0x10
10002859:	a1 00 00 00 00       	mov    eax,ds:0x0	1000285a: R_386_32	term
1000285e:	6a 07                	push   0x7
10002860:	6a 00                	push   0x0
10002862:	68 28 47 00 10       	push   0x10004728	10002863: R_386_32	.text
10002867:	50                   	push   eax
10002868:	e8 fc ff ff ff       	call   10002869 <firstRun()+0x244>	10002869: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
1000286d:	83 c4 10             	add    esp,0x10
10002870:	a1 00 00 00 00       	mov    eax,ds:0x0	10002871: R_386_32	term
10002875:	83 7d f4 01          	cmp    DWORD PTR [ebp-0xc],0x1
10002879:	75 07                	jne    10002882 <firstRun()+0x25d>
1000287b:	ba 42 47 00 10       	mov    edx,0x10004742	1000287c: R_386_32	.text
10002880:	eb 05                	jmp    10002887 <firstRun()+0x262>
10002882:	ba 46 47 00 10       	mov    edx,0x10004746	10002883: R_386_32	.text
10002887:	6a 0f                	push   0xf
10002889:	6a 00                	push   0x0
1000288b:	52                   	push   edx
1000288c:	50                   	push   eax
1000288d:	e8 fc ff ff ff       	call   1000288e <firstRun()+0x269>	1000288e: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002892:	83 c4 10             	add    esp,0x10
10002895:	a1 00 00 00 00       	mov    eax,ds:0x0	10002896: R_386_32	term
1000289a:	83 ec 08             	sub    esp,0x8
1000289d:	6a 21                	push   0x21
1000289f:	50                   	push   eax
100028a0:	e8 fc ff ff ff       	call   100028a1 <firstRun()+0x27c>	100028a1: R_386_PC32	VgaText::setCursorX(int)
100028a5:	83 c4 10             	add    esp,0x10
100028a8:	a1 00 00 00 00       	mov    eax,ds:0x0	100028a9: R_386_32	term
100028ad:	6a 07                	push   0x7
100028af:	6a 00                	push   0x0
100028b1:	8d 95 60 ff ff ff    	lea    edx,[ebp-0xa0]
100028b7:	52                   	push   edx
100028b8:	50                   	push   eax
100028b9:	e8 fc ff ff ff       	call   100028ba <firstRun()+0x295>	100028ba: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
100028be:	83 c4 10             	add    esp,0x10
100028c1:	a1 00 00 00 00       	mov    eax,ds:0x0	100028c2: R_386_32	term
100028c6:	83 ec 04             	sub    esp,0x4
100028c9:	6a 0d                	push   0xd
100028cb:	6a 18                	push   0x18
100028cd:	50                   	push   eax
100028ce:	e8 fc ff ff ff       	call   100028cf <firstRun()+0x2aa>	100028cf: R_386_PC32	VgaText::setCursor(int, int)
100028d3:	83 c4 10             	add    esp,0x10
100028d6:	a1 00 00 00 00       	mov    eax,ds:0x0	100028d7: R_386_32	term
100028db:	83 7d f4 02          	cmp    DWORD PTR [ebp-0xc],0x2
100028df:	75 07                	jne    100028e8 <firstRun()+0x2c3>
100028e1:	ba 4a 47 00 10       	mov    edx,0x1000474a	100028e2: R_386_32	.text
100028e6:	eb 05                	jmp    100028ed <firstRun()+0x2c8>
100028e8:	ba 56 47 00 10       	mov    edx,0x10004756	100028e9: R_386_32	.text
100028ed:	6a 0f                	push   0xf
100028ef:	6a 08                	push   0x8
100028f1:	52                   	push   edx
100028f2:	50                   	push   eax
100028f3:	e8 fc ff ff ff       	call   100028f4 <firstRun()+0x2cf>	100028f4: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
100028f8:	83 c4 10             	add    esp,0x10
100028fb:	a1 00 00 00 00       	mov    eax,ds:0x0	100028fc: R_386_32	term
10002900:	83 ec 04             	sub    esp,0x4
10002903:	6a 0e                	push   0xe
10002905:	6a 18                	push   0x18
10002907:	50                   	push   eax
10002908:	e8 fc ff ff ff       	call   10002909 <firstRun()+0x2e4>	10002909: R_386_PC32	VgaText::setCursor(int, int)
1000290d:	83 c4 10             	add    esp,0x10
10002910:	a1 00 00 00 00       	mov    eax,ds:0x0	10002911: R_386_32	term
10002915:	83 7d f4 02          	cmp    DWORD PTR [ebp-0xc],0x2
10002919:	75 07                	jne    10002922 <firstRun()+0x2fd>
1000291b:	ba 62 47 00 10       	mov    edx,0x10004762	1000291c: R_386_32	.text
10002920:	eb 05                	jmp    10002927 <firstRun()+0x302>
10002922:	ba 56 47 00 10       	mov    edx,0x10004756	10002923: R_386_32	.text
10002927:	6a 0f                	push   0xf
10002929:	6a 08                	push   0x8
1000292b:	52                   	push   edx
1000292c:	50                   	push   eax
1000292d:	e8 fc ff ff ff       	call   1000292e <firstRun()+0x309>	1000292e: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002932:	83 c4 10             	add    esp,0x10
10002935:	a1 00 00 00 00       	mov    eax,ds:0x0	10002936: R_386_32	term
1000293a:	83 ec 04             	sub    esp,0x4
1000293d:	6a 0d                	push   0xd
1000293f:	6a 32                	push   0x32
10002941:	50                   	push   eax
10002942:	e8 fc ff ff ff       	call   10002943 <firstRun()+0x31e>	10002943: R_386_PC32	VgaText::setCursor(int, int)
10002947:	83 c4 10             	add    esp,0x10
1000294a:	83 7d f4 02          	cmp    DWORD PTR [ebp-0xc],0x2
1000294e:	74 19                	je     10002969 <firstRun()+0x344>
10002950:	a1 00 00 00 00       	mov    eax,ds:0x0	10002951: R_386_32	term
10002955:	6a 08                	push   0x8
10002957:	6a 0f                	push   0xf
10002959:	68 6c 47 00 10       	push   0x1000476c	1000295a: R_386_32	.text
1000295e:	50                   	push   eax
1000295f:	e8 fc ff ff ff       	call   10002960 <firstRun()+0x33b>	10002960: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002964:	83 c4 10             	add    esp,0x10
10002967:	eb 17                	jmp    10002980 <firstRun()+0x35b>
10002969:	a1 00 00 00 00       	mov    eax,ds:0x0	1000296a: R_386_32	term
1000296e:	6a 01                	push   0x1
10002970:	6a 0f                	push   0xf
10002972:	68 6c 47 00 10       	push   0x1000476c	10002973: R_386_32	.text
10002977:	50                   	push   eax
10002978:	e8 fc ff ff ff       	call   10002979 <firstRun()+0x354>	10002979: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
1000297d:	83 c4 10             	add    esp,0x10
10002980:	a1 00 00 00 00       	mov    eax,ds:0x0	10002981: R_386_32	term
10002985:	83 7d f4 02          	cmp    DWORD PTR [ebp-0xc],0x2
10002989:	75 07                	jne    10002992 <firstRun()+0x36d>
1000298b:	ba 42 47 00 10       	mov    edx,0x10004742	1000298c: R_386_32	.text
10002990:	eb 05                	jmp    10002997 <firstRun()+0x372>
10002992:	ba 46 47 00 10       	mov    edx,0x10004746	10002993: R_386_32	.text
10002997:	6a 0f                	push   0xf
10002999:	6a 00                	push   0x0
1000299b:	52                   	push   edx
1000299c:	50                   	push   eax
1000299d:	e8 fc ff ff ff       	call   1000299e <firstRun()+0x379>	1000299e: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
100029a2:	83 c4 10             	add    esp,0x10
100029a5:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
100029a9:	75 27                	jne    100029d2 <firstRun()+0x3ad>
100029ab:	8b 1d 00 00 00 00    	mov    ebx,DWORD PTR ds:0x0	100029ad: R_386_32	term
100029b1:	83 ec 0c             	sub    esp,0xc
100029b4:	8d 45 90             	lea    eax,[ebp-0x70]
100029b7:	50                   	push   eax
100029b8:	e8 fc ff ff ff       	call   100029b9 <firstRun()+0x394>	100029b9: R_386_PC32	strlen
100029bd:	83 c4 10             	add    esp,0x10
100029c0:	83 c0 21             	add    eax,0x21
100029c3:	83 ec 04             	sub    esp,0x4
100029c6:	6a 09                	push   0x9
100029c8:	50                   	push   eax
100029c9:	53                   	push   ebx
100029ca:	e8 fc ff ff ff       	call   100029cb <firstRun()+0x3a6>	100029cb: R_386_PC32	VgaText::setCursor(int, int)
100029cf:	83 c4 10             	add    esp,0x10
100029d2:	83 7d f4 01          	cmp    DWORD PTR [ebp-0xc],0x1
100029d6:	75 2a                	jne    10002a02 <firstRun()+0x3dd>
100029d8:	8b 1d 00 00 00 00    	mov    ebx,DWORD PTR ds:0x0	100029da: R_386_32	term
100029de:	83 ec 0c             	sub    esp,0xc
100029e1:	8d 85 60 ff ff ff    	lea    eax,[ebp-0xa0]
100029e7:	50                   	push   eax
100029e8:	e8 fc ff ff ff       	call   100029e9 <firstRun()+0x3c4>	100029e9: R_386_PC32	strlen
100029ed:	83 c4 10             	add    esp,0x10
100029f0:	83 c0 21             	add    eax,0x21
100029f3:	83 ec 04             	sub    esp,0x4
100029f6:	6a 0b                	push   0xb
100029f8:	50                   	push   eax
100029f9:	53                   	push   ebx
100029fa:	e8 fc ff ff ff       	call   100029fb <firstRun()+0x3d6>	100029fb: R_386_PC32	VgaText::setCursor(int, int)
100029ff:	83 c4 10             	add    esp,0x10
10002a02:	83 7d f4 02          	cmp    DWORD PTR [ebp-0xc],0x2
10002a06:	75 15                	jne    10002a1d <firstRun()+0x3f8>
10002a08:	a1 00 00 00 00       	mov    eax,ds:0x0	10002a09: R_386_32	term
10002a0d:	83 ec 04             	sub    esp,0x4
10002a10:	6a 02                	push   0x2
10002a12:	6a 00                	push   0x0
10002a14:	50                   	push   eax
10002a15:	e8 fc ff ff ff       	call   10002a16 <firstRun()+0x3f1>	10002a16: R_386_PC32	VgaText::setCursor(int, int)
10002a1a:	83 c4 10             	add    esp,0x10
10002a1d:	a0 00 00 00 00       	mov    al,ds:0x0	10002a1e: R_386_32	installKey
10002a22:	84 c0                	test   al,al
10002a24:	0f 94 c0             	sete   al
10002a27:	84 c0                	test   al,al
10002a29:	74 02                	je     10002a2d <firstRun()+0x408>
10002a2b:	eb f0                	jmp    10002a1d <firstRun()+0x3f8>
10002a2d:	a1 00 00 00 00       	mov    eax,ds:0x0	10002a2e: R_386_32	term
10002a32:	05 82 00 00 00       	add    eax,0x82
10002a37:	83 ec 04             	sub    esp,0x4
10002a3a:	6a 10                	push   0x10
10002a3c:	6a 00                	push   0x0
10002a3e:	50                   	push   eax
10002a3f:	e8 fc ff ff ff       	call   10002a40 <firstRun()+0x41b>	10002a40: R_386_PC32	memset
10002a44:	83 c4 10             	add    esp,0x10
10002a47:	a1 00 00 00 00       	mov    eax,ds:0x0	10002a48: R_386_32	term
10002a4c:	05 02 01 00 00       	add    eax,0x102
10002a51:	83 ec 04             	sub    esp,0x4
10002a54:	6a 10                	push   0x10
10002a56:	6a 00                	push   0x0
10002a58:	50                   	push   eax
10002a59:	e8 fc ff ff ff       	call   10002a5a <firstRun()+0x435>	10002a5a: R_386_PC32	memset
10002a5e:	83 c4 10             	add    esp,0x10
10002a61:	a0 00 00 00 00       	mov    al,ds:0x0	10002a62: R_386_32	installKey
10002a66:	3c 09                	cmp    al,0x9
10002a68:	74 09                	je     10002a73 <firstRun()+0x44e>
10002a6a:	a0 00 00 00 00       	mov    al,ds:0x0	10002a6b: R_386_32	installKey
10002a6f:	3c 0a                	cmp    al,0xa
10002a71:	75 04                	jne    10002a77 <firstRun()+0x452>
10002a73:	b0 01                	mov    al,0x1
10002a75:	eb 02                	jmp    10002a79 <firstRun()+0x454>
10002a77:	b0 00                	mov    al,0x0
10002a79:	84 c0                	test   al,al
10002a7b:	0f 84 1d 04 00 00    	je     10002e9e <firstRun()+0x879>
10002a81:	83 7d f4 02          	cmp    DWORD PTR [ebp-0xc],0x2
10002a85:	75 0d                	jne    10002a94 <firstRun()+0x46f>
10002a87:	a0 00 00 00 00       	mov    al,ds:0x0	10002a88: R_386_32	installKey
10002a8c:	3c 0a                	cmp    al,0xa
10002a8e:	75 04                	jne    10002a94 <firstRun()+0x46f>
10002a90:	b0 01                	mov    al,0x1
10002a92:	eb 02                	jmp    10002a96 <firstRun()+0x471>
10002a94:	b0 00                	mov    al,0x0
10002a96:	84 c0                	test   al,al
10002a98:	0f 84 db 03 00 00    	je     10002e79 <firstRun()+0x854>
10002a9e:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10002aa0: R_386_32	installKey
10002aa5:	90                   	nop
10002aa6:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10002aa8: R_386_32	installKey
10002aad:	83 ec 0c             	sub    esp,0xc
10002ab0:	68 a0 0f 00 00       	push   0xfa0
10002ab5:	e8 fc ff ff ff       	call   10002ab6 <firstRun()+0x491>	10002ab6: R_386_PC32	milliTenthSleep(unsigned int)
10002aba:	83 c4 10             	add    esp,0x10
10002abd:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10002abf: R_386_32	installKey
10002ac4:	e8 fc ff ff ff       	call   10002ac5 <firstRun()+0x4a0>	10002ac5: R_386_PC32	drawBootScreen()
10002ac9:	83 ec 0c             	sub    esp,0xc
10002acc:	68 75 47 00 10       	push   0x10004775	10002acd: R_386_32	.text
10002ad1:	6a 0d                	push   0xd
10002ad3:	6a 32                	push   0x32
10002ad5:	6a 02                	push   0x2
10002ad7:	6a 16                	push   0x16
10002ad9:	e8 fc ff ff ff       	call   10002ada <firstRun()+0x4b5>	10002ada: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
10002ade:	83 c4 20             	add    esp,0x20
10002ae1:	a1 00 00 00 00       	mov    eax,ds:0x0	10002ae2: R_386_32	Krnl::computer
10002ae6:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
10002aec:	a1 00 00 00 00       	mov    eax,ds:0x0	10002aed: R_386_32	Krnl::computer
10002af1:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
10002af7:	8b 00                	mov    eax,DWORD PTR [eax]
10002af9:	83 c0 28             	add    eax,0x28
10002afc:	8b 00                	mov    eax,DWORD PTR [eax]
10002afe:	8d 95 58 ff ff ff    	lea    edx,[ebp-0xa8]
10002b04:	83 ec 08             	sub    esp,0x8
10002b07:	51                   	push   ecx
10002b08:	52                   	push   edx
10002b09:	ff d0                	call   eax
10002b0b:	83 c4 0c             	add    esp,0xc
10002b0e:	83 ec 08             	sub    esp,0x8
10002b11:	68 83 47 00 10       	push   0x10004783	10002b12: R_386_32	.text
10002b16:	8d 85 18 ff ff ff    	lea    eax,[ebp-0xe8]
10002b1c:	50                   	push   eax
10002b1d:	e8 fc ff ff ff       	call   10002b1e <firstRun()+0x4f9>	10002b1e: R_386_PC32	strcpy
10002b22:	83 c4 10             	add    esp,0x10
10002b25:	8a 85 58 ff ff ff    	mov    al,BYTE PTR [ebp-0xa8]
10002b2b:	0f b6 d0             	movzx  edx,al
10002b2e:	89 d0                	mov    eax,edx
10002b30:	c1 e0 02             	shl    eax,0x2
10002b33:	01 d0                	add    eax,edx
10002b35:	c1 e0 03             	shl    eax,0x3
10002b38:	01 d0                	add    eax,edx
10002b3a:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10002b41:	01 d0                	add    eax,edx
10002b43:	66 c1 e8 08          	shr    ax,0x8
10002b47:	c0 e8 03             	shr    al,0x3
10002b4a:	83 c0 30             	add    eax,0x30
10002b4d:	88 85 18 ff ff ff    	mov    BYTE PTR [ebp-0xe8],al
10002b53:	8a 8d 58 ff ff ff    	mov    cl,BYTE PTR [ebp-0xa8]
10002b59:	0f b6 d1             	movzx  edx,cl
10002b5c:	89 d0                	mov    eax,edx
10002b5e:	c1 e0 02             	shl    eax,0x2
10002b61:	01 d0                	add    eax,edx
10002b63:	c1 e0 03             	shl    eax,0x3
10002b66:	01 d0                	add    eax,edx
10002b68:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10002b6f:	01 d0                	add    eax,edx
10002b71:	66 c1 e8 08          	shr    ax,0x8
10002b75:	88 c2                	mov    dl,al
10002b77:	c0 ea 03             	shr    dl,0x3
10002b7a:	88 d0                	mov    al,dl
10002b7c:	c1 e0 02             	shl    eax,0x2
10002b7f:	01 d0                	add    eax,edx
10002b81:	d1 e0                	shl    eax,1
10002b83:	29 c1                	sub    ecx,eax
10002b85:	88 ca                	mov    dl,cl
10002b87:	8d 42 30             	lea    eax,[edx+0x30]
10002b8a:	88 85 19 ff ff ff    	mov    BYTE PTR [ebp-0xe7],al
10002b90:	8a 85 59 ff ff ff    	mov    al,BYTE PTR [ebp-0xa7]
10002b96:	0f b6 c8             	movzx  ecx,al
10002b99:	b8 67 66 66 66       	mov    eax,0x66666667
10002b9e:	f7 e9                	imul   ecx
10002ba0:	c1 fa 02             	sar    edx,0x2
10002ba3:	89 c8                	mov    eax,ecx
10002ba5:	c1 f8 1f             	sar    eax,0x1f
10002ba8:	29 c2                	sub    edx,eax
10002baa:	89 d0                	mov    eax,edx
10002bac:	83 c0 30             	add    eax,0x30
10002baf:	88 85 1b ff ff ff    	mov    BYTE PTR [ebp-0xe5],al
10002bb5:	8a 85 59 ff ff ff    	mov    al,BYTE PTR [ebp-0xa7]
10002bbb:	0f b6 c8             	movzx  ecx,al
10002bbe:	b8 67 66 66 66       	mov    eax,0x66666667
10002bc3:	f7 e9                	imul   ecx
10002bc5:	c1 fa 02             	sar    edx,0x2
10002bc8:	89 c8                	mov    eax,ecx
10002bca:	c1 f8 1f             	sar    eax,0x1f
10002bcd:	29 c2                	sub    edx,eax
10002bcf:	89 d0                	mov    eax,edx
10002bd1:	c1 e0 02             	shl    eax,0x2
10002bd4:	01 d0                	add    eax,edx
10002bd6:	01 c0                	add    eax,eax
10002bd8:	29 c1                	sub    ecx,eax
10002bda:	89 ca                	mov    edx,ecx
10002bdc:	88 d0                	mov    al,dl
10002bde:	83 c0 30             	add    eax,0x30
10002be1:	88 85 1c ff ff ff    	mov    BYTE PTR [ebp-0xe4],al
10002be7:	66 8b 85 5a ff ff ff 	mov    ax,WORD PTR [ebp-0xa6]
10002bee:	0f b7 c8             	movzx  ecx,ax
10002bf1:	b8 d3 4d 62 10       	mov    eax,0x10624dd3
10002bf6:	f7 e9                	imul   ecx
10002bf8:	c1 fa 06             	sar    edx,0x6
10002bfb:	89 c8                	mov    eax,ecx
10002bfd:	c1 f8 1f             	sar    eax,0x1f
10002c00:	29 c2                	sub    edx,eax
10002c02:	89 d0                	mov    eax,edx
10002c04:	b9 0a 00 00 00       	mov    ecx,0xa
10002c09:	99                   	cdq    
10002c0a:	f7 f9                	idiv   ecx
10002c0c:	89 d0                	mov    eax,edx
10002c0e:	83 c0 30             	add    eax,0x30
10002c11:	88 85 1e ff ff ff    	mov    BYTE PTR [ebp-0xe2],al
10002c17:	66 8b 85 5a ff ff ff 	mov    ax,WORD PTR [ebp-0xa6]
10002c1e:	0f b7 c8             	movzx  ecx,ax
10002c21:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
10002c26:	f7 e9                	imul   ecx
10002c28:	c1 fa 05             	sar    edx,0x5
10002c2b:	89 c8                	mov    eax,ecx
10002c2d:	c1 f8 1f             	sar    eax,0x1f
10002c30:	29 c2                	sub    edx,eax
10002c32:	89 d0                	mov    eax,edx
10002c34:	b9 0a 00 00 00       	mov    ecx,0xa
10002c39:	99                   	cdq    
10002c3a:	f7 f9                	idiv   ecx
10002c3c:	89 d0                	mov    eax,edx
10002c3e:	83 c0 30             	add    eax,0x30
10002c41:	88 85 1f ff ff ff    	mov    BYTE PTR [ebp-0xe1],al
10002c47:	66 8b 85 5a ff ff ff 	mov    ax,WORD PTR [ebp-0xa6]
10002c4e:	0f b7 c8             	movzx  ecx,ax
10002c51:	b8 67 66 66 66       	mov    eax,0x66666667
10002c56:	f7 e9                	imul   ecx
10002c58:	c1 fa 02             	sar    edx,0x2
10002c5b:	89 c8                	mov    eax,ecx
10002c5d:	c1 f8 1f             	sar    eax,0x1f
10002c60:	89 d1                	mov    ecx,edx
10002c62:	29 c1                	sub    ecx,eax
10002c64:	b8 67 66 66 66       	mov    eax,0x66666667
10002c69:	f7 e9                	imul   ecx
10002c6b:	c1 fa 02             	sar    edx,0x2
10002c6e:	89 c8                	mov    eax,ecx
10002c70:	c1 f8 1f             	sar    eax,0x1f
10002c73:	29 c2                	sub    edx,eax
10002c75:	89 d0                	mov    eax,edx
10002c77:	c1 e0 02             	shl    eax,0x2
10002c7a:	01 d0                	add    eax,edx
10002c7c:	01 c0                	add    eax,eax
10002c7e:	29 c1                	sub    ecx,eax
10002c80:	89 ca                	mov    edx,ecx
10002c82:	88 d0                	mov    al,dl
10002c84:	83 c0 30             	add    eax,0x30
10002c87:	88 85 20 ff ff ff    	mov    BYTE PTR [ebp-0xe0],al
10002c8d:	66 8b 85 5a ff ff ff 	mov    ax,WORD PTR [ebp-0xa6]
10002c94:	0f b7 c0             	movzx  eax,ax
10002c97:	b9 0a 00 00 00       	mov    ecx,0xa
10002c9c:	99                   	cdq    
10002c9d:	f7 f9                	idiv   ecx
10002c9f:	89 d0                	mov    eax,edx
10002ca1:	83 c0 30             	add    eax,0x30
10002ca4:	88 85 21 ff ff ff    	mov    BYTE PTR [ebp-0xdf],al
10002caa:	8a 85 5c ff ff ff    	mov    al,BYTE PTR [ebp-0xa4]
10002cb0:	0f b6 d0             	movzx  edx,al
10002cb3:	89 d0                	mov    eax,edx
10002cb5:	c1 e0 02             	shl    eax,0x2
10002cb8:	01 d0                	add    eax,edx
10002cba:	c1 e0 03             	shl    eax,0x3
10002cbd:	01 d0                	add    eax,edx
10002cbf:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10002cc6:	01 d0                	add    eax,edx
10002cc8:	66 c1 e8 08          	shr    ax,0x8
10002ccc:	c0 e8 03             	shr    al,0x3
10002ccf:	83 c0 30             	add    eax,0x30
10002cd2:	88 85 23 ff ff ff    	mov    BYTE PTR [ebp-0xdd],al
10002cd8:	8a 8d 5c ff ff ff    	mov    cl,BYTE PTR [ebp-0xa4]
10002cde:	0f b6 d1             	movzx  edx,cl
10002ce1:	89 d0                	mov    eax,edx
10002ce3:	c1 e0 02             	shl    eax,0x2
10002ce6:	01 d0                	add    eax,edx
10002ce8:	c1 e0 03             	shl    eax,0x3
10002ceb:	01 d0                	add    eax,edx
10002ced:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10002cf4:	01 d0                	add    eax,edx
10002cf6:	66 c1 e8 08          	shr    ax,0x8
10002cfa:	88 c2                	mov    dl,al
10002cfc:	c0 ea 03             	shr    dl,0x3
10002cff:	88 d0                	mov    al,dl
10002d01:	c1 e0 02             	shl    eax,0x2
10002d04:	01 d0                	add    eax,edx
10002d06:	d1 e0                	shl    eax,1
10002d08:	29 c1                	sub    ecx,eax
10002d0a:	88 ca                	mov    dl,cl
10002d0c:	8d 42 30             	lea    eax,[edx+0x30]
10002d0f:	88 85 24 ff ff ff    	mov    BYTE PTR [ebp-0xdc],al
10002d15:	8a 85 5d ff ff ff    	mov    al,BYTE PTR [ebp-0xa3]
10002d1b:	0f b6 d0             	movzx  edx,al
10002d1e:	89 d0                	mov    eax,edx
10002d20:	c1 e0 02             	shl    eax,0x2
10002d23:	01 d0                	add    eax,edx
10002d25:	c1 e0 03             	shl    eax,0x3
10002d28:	01 d0                	add    eax,edx
10002d2a:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10002d31:	01 d0                	add    eax,edx
10002d33:	66 c1 e8 08          	shr    ax,0x8
10002d37:	c0 e8 03             	shr    al,0x3
10002d3a:	83 c0 30             	add    eax,0x30
10002d3d:	88 85 26 ff ff ff    	mov    BYTE PTR [ebp-0xda],al
10002d43:	8a 8d 5d ff ff ff    	mov    cl,BYTE PTR [ebp-0xa3]
10002d49:	0f b6 d1             	movzx  edx,cl
10002d4c:	89 d0                	mov    eax,edx
10002d4e:	c1 e0 02             	shl    eax,0x2
10002d51:	01 d0                	add    eax,edx
10002d53:	c1 e0 03             	shl    eax,0x3
10002d56:	01 d0                	add    eax,edx
10002d58:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10002d5f:	01 d0                	add    eax,edx
10002d61:	66 c1 e8 08          	shr    ax,0x8
10002d65:	88 c2                	mov    dl,al
10002d67:	c0 ea 03             	shr    dl,0x3
10002d6a:	88 d0                	mov    al,dl
10002d6c:	c1 e0 02             	shl    eax,0x2
10002d6f:	01 d0                	add    eax,edx
10002d71:	d1 e0                	shl    eax,1
10002d73:	29 c1                	sub    ecx,eax
10002d75:	88 ca                	mov    dl,cl
10002d77:	8d 42 30             	lea    eax,[edx+0x30]
10002d7a:	88 85 27 ff ff ff    	mov    BYTE PTR [ebp-0xd9],al
10002d80:	8a 85 5e ff ff ff    	mov    al,BYTE PTR [ebp-0xa2]
10002d86:	0f b6 d0             	movzx  edx,al
10002d89:	89 d0                	mov    eax,edx
10002d8b:	c1 e0 02             	shl    eax,0x2
10002d8e:	01 d0                	add    eax,edx
10002d90:	c1 e0 03             	shl    eax,0x3
10002d93:	01 d0                	add    eax,edx
10002d95:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10002d9c:	01 d0                	add    eax,edx
10002d9e:	66 c1 e8 08          	shr    ax,0x8
10002da2:	c0 e8 03             	shr    al,0x3
10002da5:	83 c0 30             	add    eax,0x30
10002da8:	88 85 29 ff ff ff    	mov    BYTE PTR [ebp-0xd7],al
10002dae:	8a 8d 5e ff ff ff    	mov    cl,BYTE PTR [ebp-0xa2]
10002db4:	0f b6 d1             	movzx  edx,cl
10002db7:	89 d0                	mov    eax,edx
10002db9:	c1 e0 02             	shl    eax,0x2
10002dbc:	01 d0                	add    eax,edx
10002dbe:	c1 e0 03             	shl    eax,0x3
10002dc1:	01 d0                	add    eax,edx
10002dc3:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10002dca:	01 d0                	add    eax,edx
10002dcc:	66 c1 e8 08          	shr    ax,0x8
10002dd0:	88 c2                	mov    dl,al
10002dd2:	c0 ea 03             	shr    dl,0x3
10002dd5:	88 d0                	mov    al,dl
10002dd7:	c1 e0 02             	shl    eax,0x2
10002dda:	01 d0                	add    eax,edx
10002ddc:	d1 e0                	shl    eax,1
10002dde:	29 c1                	sub    ecx,eax
10002de0:	88 ca                	mov    dl,cl
10002de2:	8d 42 30             	lea    eax,[edx+0x30]
10002de5:	88 85 2a ff ff ff    	mov    BYTE PTR [ebp-0xd6],al
10002deb:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
10002df2:	a1 00 00 00 00       	mov    eax,ds:0x0	10002df3: R_386_32	term
10002df7:	83 ec 04             	sub    esp,0x4
10002dfa:	6a 05                	push   0x5
10002dfc:	6a 18                	push   0x18
10002dfe:	50                   	push   eax
10002dff:	e8 fc ff ff ff       	call   10002e00 <firstRun()+0x7db>	10002e00: R_386_PC32	VgaText::setCursor(int, int)
10002e04:	83 c4 10             	add    esp,0x10
10002e07:	a1 00 00 00 00       	mov    eax,ds:0x0	10002e08: R_386_32	term
10002e0c:	83 ec 08             	sub    esp,0x8
10002e0f:	68 98 47 00 10       	push   0x10004798	10002e10: R_386_32	.text
10002e14:	50                   	push   eax
10002e15:	e8 fc ff ff ff       	call   10002e16 <firstRun()+0x7f1>	10002e16: R_386_PC32	VgaText::puts(char const*)
10002e1a:	83 c4 10             	add    esp,0x10
10002e1d:	a1 00 00 00 00       	mov    eax,ds:0x0	10002e1e: R_386_32	term
10002e22:	83 ec 04             	sub    esp,0x4
10002e25:	6a 06                	push   0x6
10002e27:	6a 18                	push   0x18
10002e29:	50                   	push   eax
10002e2a:	e8 fc ff ff ff       	call   10002e2b <firstRun()+0x806>	10002e2b: R_386_PC32	VgaText::setCursor(int, int)
10002e2f:	83 c4 10             	add    esp,0x10
10002e32:	a1 00 00 00 00       	mov    eax,ds:0x0	10002e33: R_386_32	term
10002e37:	83 ec 08             	sub    esp,0x8
10002e3a:	68 c0 47 00 10       	push   0x100047c0	10002e3b: R_386_32	.text
10002e3f:	50                   	push   eax
10002e40:	e8 fc ff ff ff       	call   10002e41 <firstRun()+0x81c>	10002e41: R_386_PC32	VgaText::puts(char const*)
10002e45:	83 c4 10             	add    esp,0x10
10002e48:	a1 00 00 00 00       	mov    eax,ds:0x0	10002e49: R_386_32	term
10002e4d:	83 ec 04             	sub    esp,0x4
10002e50:	6a 09                	push   0x9
10002e52:	6a 1a                	push   0x1a
10002e54:	50                   	push   eax
10002e55:	e8 fc ff ff ff       	call   10002e56 <firstRun()+0x831>	10002e56: R_386_PC32	VgaText::setCursor(int, int)
10002e5a:	83 c4 10             	add    esp,0x10
10002e5d:	a1 00 00 00 00       	mov    eax,ds:0x0	10002e5e: R_386_32	term
10002e62:	6a 0f                	push   0xf
10002e64:	6a 07                	push   0x7
10002e66:	68 d6 47 00 10       	push   0x100047d6	10002e67: R_386_32	.text
10002e6b:	50                   	push   eax
10002e6c:	e8 fc ff ff ff       	call   10002e6d <firstRun()+0x848>	10002e6d: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002e71:	83 c4 10             	add    esp,0x10
10002e74:	e9 79 01 00 00       	jmp    10002ff2 <firstRun()+0x9cd>
10002e79:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10002e7c:	83 7d f4 03          	cmp    DWORD PTR [ebp-0xc],0x3
10002e80:	75 07                	jne    10002e89 <firstRun()+0x864>
10002e82:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
10002e89:	83 ec 0c             	sub    esp,0xc
10002e8c:	68 2c 01 00 00       	push   0x12c
10002e91:	e8 fc ff ff ff       	call   10002e92 <firstRun()+0x86d>	10002e92: R_386_PC32	milliTenthSleep(unsigned int)
10002e96:	83 c4 10             	add    esp,0x10
10002e99:	e9 48 01 00 00       	jmp    10002fe6 <firstRun()+0x9c1>
10002e9e:	a0 00 00 00 00       	mov    al,ds:0x0	10002e9f: R_386_32	installKey
10002ea3:	3c 1f                	cmp    al,0x1f
10002ea5:	7e 0d                	jle    10002eb4 <firstRun()+0x88f>
10002ea7:	a0 00 00 00 00       	mov    al,ds:0x0	10002ea8: R_386_32	installKey
10002eac:	3c 7f                	cmp    al,0x7f
10002eae:	74 04                	je     10002eb4 <firstRun()+0x88f>
10002eb0:	b0 01                	mov    al,0x1
10002eb2:	eb 02                	jmp    10002eb6 <firstRun()+0x891>
10002eb4:	b0 00                	mov    al,0x0
10002eb6:	84 c0                	test   al,al
10002eb8:	0f 84 85 00 00 00    	je     10002f43 <firstRun()+0x91e>
10002ebe:	a0 00 00 00 00       	mov    al,ds:0x0	10002ebf: R_386_32	installKey
10002ec3:	88 85 04 ff ff ff    	mov    BYTE PTR [ebp-0xfc],al
10002ec9:	c6 85 05 ff ff ff 00 	mov    BYTE PTR [ebp-0xfb],0x0
10002ed0:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
10002ed4:	75 2a                	jne    10002f00 <firstRun()+0x8db>
10002ed6:	83 ec 0c             	sub    esp,0xc
10002ed9:	8d 45 90             	lea    eax,[ebp-0x70]
10002edc:	50                   	push   eax
10002edd:	e8 fc ff ff ff       	call   10002ede <firstRun()+0x8b9>	10002ede: R_386_PC32	strlen
10002ee2:	83 c4 10             	add    esp,0x10
10002ee5:	83 f8 17             	cmp    eax,0x17
10002ee8:	77 16                	ja     10002f00 <firstRun()+0x8db>
10002eea:	83 ec 08             	sub    esp,0x8
10002eed:	8d 85 04 ff ff ff    	lea    eax,[ebp-0xfc]
10002ef3:	50                   	push   eax
10002ef4:	8d 45 90             	lea    eax,[ebp-0x70]
10002ef7:	50                   	push   eax
10002ef8:	e8 fc ff ff ff       	call   10002ef9 <firstRun()+0x8d4>	10002ef9: R_386_PC32	strcat
10002efd:	83 c4 10             	add    esp,0x10
10002f00:	83 7d f4 01          	cmp    DWORD PTR [ebp-0xc],0x1
10002f04:	0f 85 dc 00 00 00    	jne    10002fe6 <firstRun()+0x9c1>
10002f0a:	83 ec 0c             	sub    esp,0xc
10002f0d:	8d 85 60 ff ff ff    	lea    eax,[ebp-0xa0]
10002f13:	50                   	push   eax
10002f14:	e8 fc ff ff ff       	call   10002f15 <firstRun()+0x8f0>	10002f15: R_386_PC32	strlen
10002f19:	83 c4 10             	add    esp,0x10
10002f1c:	83 f8 17             	cmp    eax,0x17
10002f1f:	0f 87 c1 00 00 00    	ja     10002fe6 <firstRun()+0x9c1>
10002f25:	83 ec 08             	sub    esp,0x8
10002f28:	8d 85 04 ff ff ff    	lea    eax,[ebp-0xfc]
10002f2e:	50                   	push   eax
10002f2f:	8d 85 60 ff ff ff    	lea    eax,[ebp-0xa0]
10002f35:	50                   	push   eax
10002f36:	e8 fc ff ff ff       	call   10002f37 <firstRun()+0x912>	10002f37: R_386_PC32	strcat
10002f3b:	83 c4 10             	add    esp,0x10
10002f3e:	e9 a3 00 00 00       	jmp    10002fe6 <firstRun()+0x9c1>
10002f43:	a0 00 00 00 00       	mov    al,ds:0x0	10002f44: R_386_32	installKey
10002f48:	3c 08                	cmp    al,0x8
10002f4a:	0f 94 c0             	sete   al
10002f4d:	84 c0                	test   al,al
10002f4f:	74 67                	je     10002fb8 <firstRun()+0x993>
10002f51:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
10002f55:	75 28                	jne    10002f7f <firstRun()+0x95a>
10002f57:	83 ec 0c             	sub    esp,0xc
10002f5a:	8d 45 90             	lea    eax,[ebp-0x70]
10002f5d:	50                   	push   eax
10002f5e:	e8 fc ff ff ff       	call   10002f5f <firstRun()+0x93a>	10002f5f: R_386_PC32	strlen
10002f63:	83 c4 10             	add    esp,0x10
10002f66:	85 c0                	test   eax,eax
10002f68:	74 15                	je     10002f7f <firstRun()+0x95a>
10002f6a:	83 ec 0c             	sub    esp,0xc
10002f6d:	8d 45 90             	lea    eax,[ebp-0x70]
10002f70:	50                   	push   eax
10002f71:	e8 fc ff ff ff       	call   10002f72 <firstRun()+0x94d>	10002f72: R_386_PC32	strlen
10002f76:	83 c4 10             	add    esp,0x10
10002f79:	48                   	dec    eax
10002f7a:	c6 44 05 90 00       	mov    BYTE PTR [ebp+eax*1-0x70],0x0
10002f7f:	83 7d f4 01          	cmp    DWORD PTR [ebp-0xc],0x1
10002f83:	75 61                	jne    10002fe6 <firstRun()+0x9c1>
10002f85:	83 ec 0c             	sub    esp,0xc
10002f88:	8d 85 60 ff ff ff    	lea    eax,[ebp-0xa0]
10002f8e:	50                   	push   eax
10002f8f:	e8 fc ff ff ff       	call   10002f90 <firstRun()+0x96b>	10002f90: R_386_PC32	strlen
10002f94:	83 c4 10             	add    esp,0x10
10002f97:	85 c0                	test   eax,eax
10002f99:	74 4b                	je     10002fe6 <firstRun()+0x9c1>
10002f9b:	83 ec 0c             	sub    esp,0xc
10002f9e:	8d 85 60 ff ff ff    	lea    eax,[ebp-0xa0]
10002fa4:	50                   	push   eax
10002fa5:	e8 fc ff ff ff       	call   10002fa6 <firstRun()+0x981>	10002fa6: R_386_PC32	strlen
10002faa:	83 c4 10             	add    esp,0x10
10002fad:	48                   	dec    eax
10002fae:	c6 84 05 60 ff ff ff 00 	mov    BYTE PTR [ebp+eax*1-0xa0],0x0
10002fb6:	eb 2e                	jmp    10002fe6 <firstRun()+0x9c1>
10002fb8:	a0 00 00 00 00       	mov    al,ds:0x0	10002fb9: R_386_32	installKey
10002fbd:	3c 7f                	cmp    al,0x7f
10002fbf:	0f 94 c0             	sete   al
10002fc2:	84 c0                	test   al,al
10002fc4:	74 20                	je     10002fe6 <firstRun()+0x9c1>
10002fc6:	ff 4d f4             	dec    DWORD PTR [ebp-0xc]
10002fc9:	83 7d f4 ff          	cmp    DWORD PTR [ebp-0xc],0xffffffff
10002fcd:	75 07                	jne    10002fd6 <firstRun()+0x9b1>
10002fcf:	c7 45 f4 02 00 00 00 	mov    DWORD PTR [ebp-0xc],0x2
10002fd6:	83 ec 0c             	sub    esp,0xc
10002fd9:	68 2c 01 00 00       	push   0x12c
10002fde:	e8 fc ff ff ff       	call   10002fdf <firstRun()+0x9ba>	10002fdf: R_386_PC32	milliTenthSleep(unsigned int)
10002fe3:	83 c4 10             	add    esp,0x10
10002fe6:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10002fe8: R_386_32	installKey
10002fed:	e9 d8 f7 ff ff       	jmp    100027ca <firstRun()+0x1a5>
10002ff2:	a1 00 00 00 00       	mov    eax,ds:0x0	10002ff3: R_386_32	term
10002ff7:	83 ec 04             	sub    esp,0x4
10002ffa:	6a 08                	push   0x8
10002ffc:	6a 1a                	push   0x1a
10002ffe:	50                   	push   eax
10002fff:	e8 fc ff ff ff       	call   10003000 <firstRun()+0x9db>	10003000: R_386_PC32	VgaText::setCursor(int, int)
10003004:	83 c4 10             	add    esp,0x10
10003007:	a1 00 00 00 00       	mov    eax,ds:0x0	10003008: R_386_32	term
1000300c:	83 ec 08             	sub    esp,0x8
1000300f:	8d 95 18 ff ff ff    	lea    edx,[ebp-0xe8]
10003015:	52                   	push   edx
10003016:	50                   	push   eax
10003017:	e8 fc ff ff ff       	call   10003018 <firstRun()+0x9f3>	10003018: R_386_PC32	VgaText::puts(char const*)
1000301c:	83 c4 10             	add    esp,0x10
1000301f:	a1 00 00 00 00       	mov    eax,ds:0x0	10003020: R_386_32	term
10003024:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
10003027:	83 c2 1a             	add    edx,0x1a
1000302a:	83 ec 04             	sub    esp,0x4
1000302d:	6a 08                	push   0x8
1000302f:	52                   	push   edx
10003030:	50                   	push   eax
10003031:	e8 fc ff ff ff       	call   10003032 <firstRun()+0xa0d>	10003032: R_386_PC32	VgaText::setCursor(int, int)
10003036:	83 c4 10             	add    esp,0x10
10003039:	a1 00 00 00 00       	mov    eax,ds:0x0	1000303a: R_386_32	term
1000303e:	8d 8d 18 ff ff ff    	lea    ecx,[ebp-0xe8]
10003044:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
10003047:	01 ca                	add    edx,ecx
10003049:	8a 12                	mov    dl,BYTE PTR [edx]
1000304b:	0f be d2             	movsx  edx,dl
1000304e:	6a 00                	push   0x0
10003050:	6a 0f                	push   0xf
10003052:	52                   	push   edx
10003053:	50                   	push   eax
10003054:	e8 fc ff ff ff       	call   10003055 <firstRun()+0xa30>	10003055: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
10003059:	83 c4 10             	add    esp,0x10
1000305c:	8a 85 23 ff ff ff    	mov    al,BYTE PTR [ebp-0xdd]
10003062:	0f be c0             	movsx  eax,al
10003065:	8d 50 d0             	lea    edx,[eax-0x30]
10003068:	89 d0                	mov    eax,edx
1000306a:	c1 e0 02             	shl    eax,0x2
1000306d:	01 d0                	add    eax,edx
1000306f:	01 c0                	add    eax,eax
10003071:	89 c2                	mov    edx,eax
10003073:	8a 85 24 ff ff ff    	mov    al,BYTE PTR [ebp-0xdc]
10003079:	0f be c0             	movsx  eax,al
1000307c:	83 e8 30             	sub    eax,0x30
1000307f:	01 d0                	add    eax,edx
10003081:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
10003084:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
10003087:	b9 0c 00 00 00       	mov    ecx,0xc
1000308c:	99                   	cdq    
1000308d:	f7 f9                	idiv   ecx
1000308f:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
10003092:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
10003096:	75 07                	jne    1000309f <firstRun()+0xa7a>
10003098:	c7 45 ec 0c 00 00 00 	mov    DWORD PTR [ebp-0x14],0xc
1000309f:	8a 85 26 ff ff ff    	mov    al,BYTE PTR [ebp-0xda]
100030a5:	0f be c0             	movsx  eax,al
100030a8:	8d 50 d0             	lea    edx,[eax-0x30]
100030ab:	89 d0                	mov    eax,edx
100030ad:	c1 e0 02             	shl    eax,0x2
100030b0:	01 d0                	add    eax,edx
100030b2:	01 c0                	add    eax,eax
100030b4:	89 c2                	mov    edx,eax
100030b6:	8a 85 27 ff ff ff    	mov    al,BYTE PTR [ebp-0xd9]
100030bc:	0f be c0             	movsx  eax,al
100030bf:	83 e8 30             	sub    eax,0x30
100030c2:	01 d0                	add    eax,edx
100030c4:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
100030c7:	83 ec 04             	sub    esp,0x4
100030ca:	6a 10                	push   0x10
100030cc:	6a 00                	push   0x0
100030ce:	8d 85 f4 fe ff ff    	lea    eax,[ebp-0x10c]
100030d4:	50                   	push   eax
100030d5:	e8 fc ff ff ff       	call   100030d6 <firstRun()+0xab1>	100030d6: R_386_PC32	memset
100030da:	83 c4 10             	add    esp,0x10
100030dd:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
100030e4:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
100030e7:	8d 50 01             	lea    edx,[eax+0x1]
100030ea:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
100030ed:	c6 84 05 f4 fe ff ff 28 	mov    BYTE PTR [ebp+eax*1-0x10c],0x28
100030f5:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
100030f8:	b8 67 66 66 66       	mov    eax,0x66666667
100030fd:	f7 e9                	imul   ecx
100030ff:	c1 fa 02             	sar    edx,0x2
10003102:	89 c8                	mov    eax,ecx
10003104:	c1 f8 1f             	sar    eax,0x1f
10003107:	29 c2                	sub    edx,eax
10003109:	89 d0                	mov    eax,edx
1000310b:	8d 48 30             	lea    ecx,[eax+0x30]
1000310e:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10003111:	8d 50 01             	lea    edx,[eax+0x1]
10003114:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
10003117:	88 ca                	mov    dl,cl
10003119:	88 94 05 f4 fe ff ff 	mov    BYTE PTR [ebp+eax*1-0x10c],dl
10003120:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
10003123:	b8 67 66 66 66       	mov    eax,0x66666667
10003128:	f7 e9                	imul   ecx
1000312a:	c1 fa 02             	sar    edx,0x2
1000312d:	89 c8                	mov    eax,ecx
1000312f:	c1 f8 1f             	sar    eax,0x1f
10003132:	29 c2                	sub    edx,eax
10003134:	89 d0                	mov    eax,edx
10003136:	c1 e0 02             	shl    eax,0x2
10003139:	01 d0                	add    eax,edx
1000313b:	01 c0                	add    eax,eax
1000313d:	29 c1                	sub    ecx,eax
1000313f:	89 ca                	mov    edx,ecx
10003141:	88 d0                	mov    al,dl
10003143:	8d 48 30             	lea    ecx,[eax+0x30]
10003146:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10003149:	8d 50 01             	lea    edx,[eax+0x1]
1000314c:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
1000314f:	88 ca                	mov    dl,cl
10003151:	88 94 05 f4 fe ff ff 	mov    BYTE PTR [ebp+eax*1-0x10c],dl
10003158:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
1000315b:	8d 50 01             	lea    edx,[eax+0x1]
1000315e:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
10003161:	c6 84 05 f4 fe ff ff 3a 	mov    BYTE PTR [ebp+eax*1-0x10c],0x3a
10003169:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
1000316c:	b8 67 66 66 66       	mov    eax,0x66666667
10003171:	f7 e9                	imul   ecx
10003173:	c1 fa 02             	sar    edx,0x2
10003176:	89 c8                	mov    eax,ecx
10003178:	c1 f8 1f             	sar    eax,0x1f
1000317b:	29 c2                	sub    edx,eax
1000317d:	89 d0                	mov    eax,edx
1000317f:	8d 48 30             	lea    ecx,[eax+0x30]
10003182:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10003185:	8d 50 01             	lea    edx,[eax+0x1]
10003188:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
1000318b:	88 ca                	mov    dl,cl
1000318d:	88 94 05 f4 fe ff ff 	mov    BYTE PTR [ebp+eax*1-0x10c],dl
10003194:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
10003197:	b8 67 66 66 66       	mov    eax,0x66666667
1000319c:	f7 e9                	imul   ecx
1000319e:	c1 fa 02             	sar    edx,0x2
100031a1:	89 c8                	mov    eax,ecx
100031a3:	c1 f8 1f             	sar    eax,0x1f
100031a6:	29 c2                	sub    edx,eax
100031a8:	89 d0                	mov    eax,edx
100031aa:	c1 e0 02             	shl    eax,0x2
100031ad:	01 d0                	add    eax,edx
100031af:	01 c0                	add    eax,eax
100031b1:	29 c1                	sub    ecx,eax
100031b3:	89 ca                	mov    edx,ecx
100031b5:	88 d0                	mov    al,dl
100031b7:	8d 48 30             	lea    ecx,[eax+0x30]
100031ba:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
100031bd:	8d 50 01             	lea    edx,[eax+0x1]
100031c0:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
100031c3:	88 ca                	mov    dl,cl
100031c5:	88 94 05 f4 fe ff ff 	mov    BYTE PTR [ebp+eax*1-0x10c],dl
100031cc:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
100031cf:	8d 50 01             	lea    edx,[eax+0x1]
100031d2:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
100031d5:	c6 84 05 f4 fe ff ff 20 	mov    BYTE PTR [ebp+eax*1-0x10c],0x20
100031dd:	83 7d e8 0b          	cmp    DWORD PTR [ebp-0x18],0xb
100031e1:	7e 04                	jle    100031e7 <firstRun()+0xbc2>
100031e3:	b2 50                	mov    dl,0x50
100031e5:	eb 02                	jmp    100031e9 <firstRun()+0xbc4>
100031e7:	b2 41                	mov    dl,0x41
100031e9:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
100031ec:	8d 48 01             	lea    ecx,[eax+0x1]
100031ef:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
100031f2:	88 94 05 f4 fe ff ff 	mov    BYTE PTR [ebp+eax*1-0x10c],dl
100031f9:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
100031fc:	8d 50 01             	lea    edx,[eax+0x1]
100031ff:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
10003202:	c6 84 05 f4 fe ff ff 4d 	mov    BYTE PTR [ebp+eax*1-0x10c],0x4d
1000320a:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
1000320d:	8d 50 01             	lea    edx,[eax+0x1]
10003210:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
10003213:	c6 84 05 f4 fe ff ff 29 	mov    BYTE PTR [ebp+eax*1-0x10c],0x29
1000321b:	8b 1d 00 00 00 00    	mov    ebx,DWORD PTR ds:0x0	1000321d: R_386_32	term
10003221:	83 ec 0c             	sub    esp,0xc
10003224:	8d 85 18 ff ff ff    	lea    eax,[ebp-0xe8]
1000322a:	50                   	push   eax
1000322b:	e8 fc ff ff ff       	call   1000322c <firstRun()+0xc07>	1000322c: R_386_PC32	strlen
10003230:	83 c4 10             	add    esp,0x10
10003233:	83 c0 1e             	add    eax,0x1e
10003236:	83 ec 04             	sub    esp,0x4
10003239:	6a 08                	push   0x8
1000323b:	50                   	push   eax
1000323c:	53                   	push   ebx
1000323d:	e8 fc ff ff ff       	call   1000323e <firstRun()+0xc19>	1000323e: R_386_PC32	VgaText::setCursor(int, int)
10003242:	83 c4 10             	add    esp,0x10
10003245:	a1 00 00 00 00       	mov    eax,ds:0x0	10003246: R_386_32	term
1000324a:	83 ec 08             	sub    esp,0x8
1000324d:	8d 95 f4 fe ff ff    	lea    edx,[ebp-0x10c]
10003253:	52                   	push   edx
10003254:	50                   	push   eax
10003255:	e8 fc ff ff ff       	call   10003256 <firstRun()+0xc31>	10003256: R_386_PC32	VgaText::puts(char const*)
1000325a:	83 c4 10             	add    esp,0x10
1000325d:	a1 00 00 00 00       	mov    eax,ds:0x0	1000325e: R_386_32	term
10003262:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
10003265:	83 c2 1a             	add    edx,0x1a
10003268:	83 ec 04             	sub    esp,0x4
1000326b:	6a 08                	push   0x8
1000326d:	52                   	push   edx
1000326e:	50                   	push   eax
1000326f:	e8 fc ff ff ff       	call   10003270 <firstRun()+0xc4b>	10003270: R_386_PC32	VgaText::setCursor(int, int)
10003274:	83 c4 10             	add    esp,0x10
10003277:	a0 00 00 00 00       	mov    al,ds:0x0	10003278: R_386_32	installKey
1000327c:	84 c0                	test   al,al
1000327e:	0f 94 c0             	sete   al
10003281:	84 c0                	test   al,al
10003283:	74 02                	je     10003287 <firstRun()+0xc62>
10003285:	eb f0                	jmp    10003277 <firstRun()+0xc52>
10003287:	a1 00 00 00 00       	mov    eax,ds:0x0	10003288: R_386_32	term
1000328c:	05 82 00 00 00       	add    eax,0x82
10003291:	83 ec 04             	sub    esp,0x4
10003294:	6a 10                	push   0x10
10003296:	6a 00                	push   0x0
10003298:	50                   	push   eax
10003299:	e8 fc ff ff ff       	call   1000329a <firstRun()+0xc75>	1000329a: R_386_PC32	memset
1000329e:	83 c4 10             	add    esp,0x10
100032a1:	a1 00 00 00 00       	mov    eax,ds:0x0	100032a2: R_386_32	term
100032a6:	05 02 01 00 00       	add    eax,0x102
100032ab:	83 ec 04             	sub    esp,0x4
100032ae:	6a 10                	push   0x10
100032b0:	6a 00                	push   0x0
100032b2:	50                   	push   eax
100032b3:	e8 fc ff ff ff       	call   100032b4 <firstRun()+0xc8f>	100032b4: R_386_PC32	memset
100032b8:	83 c4 10             	add    esp,0x10
100032bb:	a0 00 00 00 00       	mov    al,ds:0x0	100032bc: R_386_32	installKey
100032c0:	3c 03                	cmp    al,0x3
100032c2:	74 09                	je     100032cd <firstRun()+0xca8>
100032c4:	a0 00 00 00 00       	mov    al,ds:0x0	100032c5: R_386_32	installKey
100032c9:	3c 08                	cmp    al,0x8
100032cb:	75 04                	jne    100032d1 <firstRun()+0xcac>
100032cd:	b0 01                	mov    al,0x1
100032cf:	eb 02                	jmp    100032d3 <firstRun()+0xcae>
100032d1:	b0 00                	mov    al,0x0
100032d3:	84 c0                	test   al,al
100032d5:	74 58                	je     1000332f <firstRun()+0xd0a>
100032d7:	ff 4d f0             	dec    DWORD PTR [ebp-0x10]
100032da:	83 7d f0 ff          	cmp    DWORD PTR [ebp-0x10],0xffffffff
100032de:	75 16                	jne    100032f6 <firstRun()+0xcd1>
100032e0:	83 ec 0c             	sub    esp,0xc
100032e3:	8d 85 18 ff ff ff    	lea    eax,[ebp-0xe8]
100032e9:	50                   	push   eax
100032ea:	e8 fc ff ff ff       	call   100032eb <firstRun()+0xcc6>	100032eb: R_386_PC32	strlen
100032ef:	83 c4 10             	add    esp,0x10
100032f2:	48                   	dec    eax
100032f3:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
100032f6:	8d 95 18 ff ff ff    	lea    edx,[ebp-0xe8]
100032fc:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100032ff:	01 d0                	add    eax,edx
10003301:	8a 00                	mov    al,BYTE PTR [eax]
10003303:	3c 20                	cmp    al,0x20
10003305:	74 d0                	je     100032d7 <firstRun()+0xcb2>
10003307:	8d 95 18 ff ff ff    	lea    edx,[ebp-0xe8]
1000330d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10003310:	01 d0                	add    eax,edx
10003312:	8a 00                	mov    al,BYTE PTR [eax]
10003314:	3c 2f                	cmp    al,0x2f
10003316:	74 bf                	je     100032d7 <firstRun()+0xcb2>
10003318:	8d 95 18 ff ff ff    	lea    edx,[ebp-0xe8]
1000331e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10003321:	01 d0                	add    eax,edx
10003323:	8a 00                	mov    al,BYTE PTR [eax]
10003325:	3c 3a                	cmp    al,0x3a
10003327:	0f 85 4a 04 00 00    	jne    10003777 <firstRun()+0x1152>
1000332d:	eb a8                	jmp    100032d7 <firstRun()+0xcb2>
1000332f:	a0 00 00 00 00       	mov    al,ds:0x0	10003330: R_386_32	installKey
10003334:	3c 2f                	cmp    al,0x2f
10003336:	7e 09                	jle    10003341 <firstRun()+0xd1c>
10003338:	a0 00 00 00 00       	mov    al,ds:0x0	10003339: R_386_32	installKey
1000333d:	3c 39                	cmp    al,0x39
1000333f:	7e 12                	jle    10003353 <firstRun()+0xd2e>
10003341:	a0 00 00 00 00       	mov    al,ds:0x0	10003342: R_386_32	installKey
10003346:	3c 20                	cmp    al,0x20
10003348:	74 09                	je     10003353 <firstRun()+0xd2e>
1000334a:	a0 00 00 00 00       	mov    al,ds:0x0	1000334b: R_386_32	installKey
1000334f:	3c 04                	cmp    al,0x4
10003351:	75 04                	jne    10003357 <firstRun()+0xd32>
10003353:	b0 01                	mov    al,0x1
10003355:	eb 02                	jmp    10003359 <firstRun()+0xd34>
10003357:	b0 00                	mov    al,0x0
10003359:	84 c0                	test   al,al
1000335b:	0f 84 cf 01 00 00    	je     10003530 <firstRun()+0xf0b>
10003361:	a0 00 00 00 00       	mov    al,ds:0x0	10003362: R_386_32	installKey
10003366:	3c 2f                	cmp    al,0x2f
10003368:	7e 0d                	jle    10003377 <firstRun()+0xd52>
1000336a:	a0 00 00 00 00       	mov    al,ds:0x0	1000336b: R_386_32	installKey
1000336f:	3c 39                	cmp    al,0x39
10003371:	7f 04                	jg     10003377 <firstRun()+0xd52>
10003373:	b0 01                	mov    al,0x1
10003375:	eb 02                	jmp    10003379 <firstRun()+0xd54>
10003377:	b0 00                	mov    al,0x0
10003379:	84 c0                	test   al,al
1000337b:	0f 84 51 01 00 00    	je     100034d2 <firstRun()+0xead>
10003381:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
10003385:	75 0d                	jne    10003394 <firstRun()+0xd6f>
10003387:	a0 00 00 00 00       	mov    al,ds:0x0	10003388: R_386_32	installKey
1000338c:	3c 33                	cmp    al,0x33
1000338e:	7e 04                	jle    10003394 <firstRun()+0xd6f>
10003390:	b0 01                	mov    al,0x1
10003392:	eb 02                	jmp    10003396 <firstRun()+0xd71>
10003394:	b0 00                	mov    al,0x0
10003396:	84 c0                	test   al,al
10003398:	74 28                	je     100033c2 <firstRun()+0xd9d>
1000339a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
1000339d:	8d 50 01             	lea    edx,[eax+0x1]
100033a0:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
100033a3:	c6 84 05 18 ff ff ff 30 	mov    BYTE PTR [ebp+eax*1-0xe8],0x30
100033ab:	a0 00 00 00 00       	mov    al,ds:0x0	100033ac: R_386_32	installKey
100033b0:	8d 8d 18 ff ff ff    	lea    ecx,[ebp-0xe8]
100033b6:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
100033b9:	01 ca                	add    edx,ecx
100033bb:	88 02                	mov    BYTE PTR [edx],al
100033bd:	e9 10 01 00 00       	jmp    100034d2 <firstRun()+0xead>
100033c2:	83 7d f0 03          	cmp    DWORD PTR [ebp-0x10],0x3
100033c6:	75 0d                	jne    100033d5 <firstRun()+0xdb0>
100033c8:	a0 00 00 00 00       	mov    al,ds:0x0	100033c9: R_386_32	installKey
100033cd:	3c 31                	cmp    al,0x31
100033cf:	7e 04                	jle    100033d5 <firstRun()+0xdb0>
100033d1:	b0 01                	mov    al,0x1
100033d3:	eb 02                	jmp    100033d7 <firstRun()+0xdb2>
100033d5:	b0 00                	mov    al,0x0
100033d7:	84 c0                	test   al,al
100033d9:	74 28                	je     10003403 <firstRun()+0xdde>
100033db:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100033de:	8d 50 01             	lea    edx,[eax+0x1]
100033e1:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
100033e4:	c6 84 05 18 ff ff ff 30 	mov    BYTE PTR [ebp+eax*1-0xe8],0x30
100033ec:	a0 00 00 00 00       	mov    al,ds:0x0	100033ed: R_386_32	installKey
100033f1:	8d 8d 18 ff ff ff    	lea    ecx,[ebp-0xe8]
100033f7:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
100033fa:	01 ca                	add    edx,ecx
100033fc:	88 02                	mov    BYTE PTR [edx],al
100033fe:	e9 cf 00 00 00       	jmp    100034d2 <firstRun()+0xead>
10003403:	83 7d f0 0b          	cmp    DWORD PTR [ebp-0x10],0xb
10003407:	75 0d                	jne    10003416 <firstRun()+0xdf1>
10003409:	a0 00 00 00 00       	mov    al,ds:0x0	1000340a: R_386_32	installKey
1000340e:	3c 32                	cmp    al,0x32
10003410:	7e 04                	jle    10003416 <firstRun()+0xdf1>
10003412:	b0 01                	mov    al,0x1
10003414:	eb 02                	jmp    10003418 <firstRun()+0xdf3>
10003416:	b0 00                	mov    al,0x0
10003418:	84 c0                	test   al,al
1000341a:	74 28                	je     10003444 <firstRun()+0xe1f>
1000341c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
1000341f:	8d 50 01             	lea    edx,[eax+0x1]
10003422:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
10003425:	c6 84 05 18 ff ff ff 30 	mov    BYTE PTR [ebp+eax*1-0xe8],0x30
1000342d:	a0 00 00 00 00       	mov    al,ds:0x0	1000342e: R_386_32	installKey
10003432:	8d 8d 18 ff ff ff    	lea    ecx,[ebp-0xe8]
10003438:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
1000343b:	01 ca                	add    edx,ecx
1000343d:	88 02                	mov    BYTE PTR [edx],al
1000343f:	e9 8e 00 00 00       	jmp    100034d2 <firstRun()+0xead>
10003444:	83 7d f0 0e          	cmp    DWORD PTR [ebp-0x10],0xe
10003448:	75 0d                	jne    10003457 <firstRun()+0xe32>
1000344a:	a0 00 00 00 00       	mov    al,ds:0x0	1000344b: R_386_32	installKey
1000344f:	3c 35                	cmp    al,0x35
10003451:	7e 04                	jle    10003457 <firstRun()+0xe32>
10003453:	b0 01                	mov    al,0x1
10003455:	eb 02                	jmp    10003459 <firstRun()+0xe34>
10003457:	b0 00                	mov    al,0x0
10003459:	84 c0                	test   al,al
1000345b:	74 25                	je     10003482 <firstRun()+0xe5d>
1000345d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10003460:	8d 50 01             	lea    edx,[eax+0x1]
10003463:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
10003466:	c6 84 05 18 ff ff ff 30 	mov    BYTE PTR [ebp+eax*1-0xe8],0x30
1000346e:	a0 00 00 00 00       	mov    al,ds:0x0	1000346f: R_386_32	installKey
10003473:	8d 8d 18 ff ff ff    	lea    ecx,[ebp-0xe8]
10003479:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
1000347c:	01 ca                	add    edx,ecx
1000347e:	88 02                	mov    BYTE PTR [edx],al
10003480:	eb 50                	jmp    100034d2 <firstRun()+0xead>
10003482:	83 7d f0 11          	cmp    DWORD PTR [ebp-0x10],0x11
10003486:	75 0d                	jne    10003495 <firstRun()+0xe70>
10003488:	a0 00 00 00 00       	mov    al,ds:0x0	10003489: R_386_32	installKey
1000348d:	3c 35                	cmp    al,0x35
1000348f:	7e 04                	jle    10003495 <firstRun()+0xe70>
10003491:	b0 01                	mov    al,0x1
10003493:	eb 02                	jmp    10003497 <firstRun()+0xe72>
10003495:	b0 00                	mov    al,0x0
10003497:	84 c0                	test   al,al
10003499:	74 25                	je     100034c0 <firstRun()+0xe9b>
1000349b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
1000349e:	8d 50 01             	lea    edx,[eax+0x1]
100034a1:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
100034a4:	c6 84 05 18 ff ff ff 30 	mov    BYTE PTR [ebp+eax*1-0xe8],0x30
100034ac:	a0 00 00 00 00       	mov    al,ds:0x0	100034ad: R_386_32	installKey
100034b1:	8d 8d 18 ff ff ff    	lea    ecx,[ebp-0xe8]
100034b7:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
100034ba:	01 ca                	add    edx,ecx
100034bc:	88 02                	mov    BYTE PTR [edx],al
100034be:	eb 12                	jmp    100034d2 <firstRun()+0xead>
100034c0:	a0 00 00 00 00       	mov    al,ds:0x0	100034c1: R_386_32	installKey
100034c5:	8d 8d 18 ff ff ff    	lea    ecx,[ebp-0xe8]
100034cb:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
100034ce:	01 ca                	add    edx,ecx
100034d0:	88 02                	mov    BYTE PTR [edx],al
100034d2:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
100034d5:	83 ec 0c             	sub    esp,0xc
100034d8:	8d 85 18 ff ff ff    	lea    eax,[ebp-0xe8]
100034de:	50                   	push   eax
100034df:	e8 fc ff ff ff       	call   100034e0 <firstRun()+0xebb>	100034e0: R_386_PC32	strlen
100034e4:	83 c4 10             	add    esp,0x10
100034e7:	89 c2                	mov    edx,eax
100034e9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100034ec:	39 c2                	cmp    edx,eax
100034ee:	77 07                	ja     100034f7 <firstRun()+0xed2>
100034f0:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
100034f7:	8d 95 18 ff ff ff    	lea    edx,[ebp-0xe8]
100034fd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10003500:	01 d0                	add    eax,edx
10003502:	8a 00                	mov    al,BYTE PTR [eax]
10003504:	3c 20                	cmp    al,0x20
10003506:	74 ca                	je     100034d2 <firstRun()+0xead>
10003508:	8d 95 18 ff ff ff    	lea    edx,[ebp-0xe8]
1000350e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10003511:	01 d0                	add    eax,edx
10003513:	8a 00                	mov    al,BYTE PTR [eax]
10003515:	3c 2f                	cmp    al,0x2f
10003517:	74 b9                	je     100034d2 <firstRun()+0xead>
10003519:	8d 95 18 ff ff ff    	lea    edx,[ebp-0xe8]
1000351f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10003522:	01 d0                	add    eax,edx
10003524:	8a 00                	mov    al,BYTE PTR [eax]
10003526:	3c 3a                	cmp    al,0x3a
10003528:	0f 85 49 02 00 00    	jne    10003777 <firstRun()+0x1152>
1000352e:	eb a2                	jmp    100034d2 <firstRun()+0xead>
10003530:	a0 00 00 00 00       	mov    al,ds:0x0	10003531: R_386_32	installKey
10003535:	3c 0a                	cmp    al,0xa
10003537:	0f 94 c0             	sete   al
1000353a:	84 c0                	test   al,al
1000353c:	0f 84 35 02 00 00    	je     10003777 <firstRun()+0x1152>
10003542:	8a 85 18 ff ff ff    	mov    al,BYTE PTR [ebp-0xe8]
10003548:	0f be c0             	movsx  eax,al
1000354b:	8d 50 d0             	lea    edx,[eax-0x30]
1000354e:	89 d0                	mov    eax,edx
10003550:	c1 e0 02             	shl    eax,0x2
10003553:	01 d0                	add    eax,edx
10003555:	01 c0                	add    eax,eax
10003557:	89 c2                	mov    edx,eax
10003559:	8a 85 19 ff ff ff    	mov    al,BYTE PTR [ebp-0xe7]
1000355f:	0f be c0             	movsx  eax,al
10003562:	83 e8 30             	sub    eax,0x30
10003565:	01 d0                	add    eax,edx
10003567:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
1000356a:	8a 85 1b ff ff ff    	mov    al,BYTE PTR [ebp-0xe5]
10003570:	0f be c0             	movsx  eax,al
10003573:	8d 50 d0             	lea    edx,[eax-0x30]
10003576:	89 d0                	mov    eax,edx
10003578:	c1 e0 02             	shl    eax,0x2
1000357b:	01 d0                	add    eax,edx
1000357d:	01 c0                	add    eax,eax
1000357f:	89 c2                	mov    edx,eax
10003581:	8a 85 1c ff ff ff    	mov    al,BYTE PTR [ebp-0xe4]
10003587:	0f be c0             	movsx  eax,al
1000358a:	83 e8 30             	sub    eax,0x30
1000358d:	01 d0                	add    eax,edx
1000358f:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
10003592:	8a 85 1e ff ff ff    	mov    al,BYTE PTR [ebp-0xe2]
10003598:	0f be c0             	movsx  eax,al
1000359b:	8d 50 d0             	lea    edx,[eax-0x30]
1000359e:	89 d0                	mov    eax,edx
100035a0:	c1 e0 02             	shl    eax,0x2
100035a3:	01 d0                	add    eax,edx
100035a5:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
100035ac:	01 d0                	add    eax,edx
100035ae:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
100035b5:	01 d0                	add    eax,edx
100035b7:	c1 e0 03             	shl    eax,0x3
100035ba:	89 c1                	mov    ecx,eax
100035bc:	8a 85 1f ff ff ff    	mov    al,BYTE PTR [ebp-0xe1]
100035c2:	0f be c0             	movsx  eax,al
100035c5:	8d 50 d0             	lea    edx,[eax-0x30]
100035c8:	89 d0                	mov    eax,edx
100035ca:	c1 e0 02             	shl    eax,0x2
100035cd:	01 d0                	add    eax,edx
100035cf:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
100035d6:	01 d0                	add    eax,edx
100035d8:	c1 e0 02             	shl    eax,0x2
100035db:	01 c1                	add    ecx,eax
100035dd:	8a 85 20 ff ff ff    	mov    al,BYTE PTR [ebp-0xe0]
100035e3:	0f be c0             	movsx  eax,al
100035e6:	8d 50 d0             	lea    edx,[eax-0x30]
100035e9:	89 d0                	mov    eax,edx
100035eb:	c1 e0 02             	shl    eax,0x2
100035ee:	01 d0                	add    eax,edx
100035f0:	01 c0                	add    eax,eax
100035f2:	8d 14 01             	lea    edx,[ecx+eax*1]
100035f5:	8a 85 21 ff ff ff    	mov    al,BYTE PTR [ebp-0xdf]
100035fb:	0f be c0             	movsx  eax,al
100035fe:	83 e8 30             	sub    eax,0x30
10003601:	01 d0                	add    eax,edx
10003603:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
10003606:	8a 85 23 ff ff ff    	mov    al,BYTE PTR [ebp-0xdd]
1000360c:	0f be c0             	movsx  eax,al
1000360f:	8d 50 d0             	lea    edx,[eax-0x30]
10003612:	89 d0                	mov    eax,edx
10003614:	c1 e0 02             	shl    eax,0x2
10003617:	01 d0                	add    eax,edx
10003619:	01 c0                	add    eax,eax
1000361b:	89 c2                	mov    edx,eax
1000361d:	8a 85 24 ff ff ff    	mov    al,BYTE PTR [ebp-0xdc]
10003623:	0f be c0             	movsx  eax,al
10003626:	83 e8 30             	sub    eax,0x30
10003629:	01 d0                	add    eax,edx
1000362b:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
1000362e:	8a 85 26 ff ff ff    	mov    al,BYTE PTR [ebp-0xda]
10003634:	0f be c0             	movsx  eax,al
10003637:	8d 50 d0             	lea    edx,[eax-0x30]
1000363a:	89 d0                	mov    eax,edx
1000363c:	c1 e0 02             	shl    eax,0x2
1000363f:	01 d0                	add    eax,edx
10003641:	01 c0                	add    eax,eax
10003643:	89 c2                	mov    edx,eax
10003645:	8a 85 27 ff ff ff    	mov    al,BYTE PTR [ebp-0xd9]
1000364b:	0f be c0             	movsx  eax,al
1000364e:	83 e8 30             	sub    eax,0x30
10003651:	01 d0                	add    eax,edx
10003653:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
10003656:	8a 85 29 ff ff ff    	mov    al,BYTE PTR [ebp-0xd7]
1000365c:	0f be c0             	movsx  eax,al
1000365f:	8d 50 d0             	lea    edx,[eax-0x30]
10003662:	89 d0                	mov    eax,edx
10003664:	c1 e0 02             	shl    eax,0x2
10003667:	01 d0                	add    eax,edx
10003669:	01 c0                	add    eax,eax
1000366b:	89 c2                	mov    edx,eax
1000366d:	8a 85 2a ff ff ff    	mov    al,BYTE PTR [ebp-0xd6]
10003673:	0f be c0             	movsx  eax,al
10003676:	83 e8 30             	sub    eax,0x30
10003679:	01 d0                	add    eax,edx
1000367b:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
1000367e:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10003681:	83 e0 03             	and    eax,0x3
10003684:	85 c0                	test   eax,eax
10003686:	75 1f                	jne    100036a7 <firstRun()+0x1082>
10003688:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
1000368b:	b9 19 00 00 00       	mov    ecx,0x19
10003690:	99                   	cdq    
10003691:	f7 f9                	idiv   ecx
10003693:	89 d0                	mov    eax,edx
10003695:	85 c0                	test   eax,eax
10003697:	75 0a                	jne    100036a3 <firstRun()+0x107e>
10003699:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
1000369c:	83 e0 0f             	and    eax,0xf
1000369f:	85 c0                	test   eax,eax
100036a1:	75 04                	jne    100036a7 <firstRun()+0x1082>
100036a3:	b0 01                	mov    al,0x1
100036a5:	eb 02                	jmp    100036a9 <firstRun()+0x1084>
100036a7:	b0 00                	mov    al,0x0
100036a9:	88 45 c7             	mov    BYTE PTR [ebp-0x39],al
100036ac:	83 7d dc 1f          	cmp    DWORD PTR [ebp-0x24],0x1f
100036b0:	7e 0c                	jle    100036be <firstRun()+0x1099>
100036b2:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
100036b9:	e9 b9 00 00 00       	jmp    10003777 <firstRun()+0x1152>
100036be:	83 7d dc 1e          	cmp    DWORD PTR [ebp-0x24],0x1e
100036c2:	7e 2a                	jle    100036ee <firstRun()+0x10c9>
100036c4:	83 7d d8 02          	cmp    DWORD PTR [ebp-0x28],0x2
100036c8:	74 18                	je     100036e2 <firstRun()+0x10bd>
100036ca:	83 7d d8 04          	cmp    DWORD PTR [ebp-0x28],0x4
100036ce:	74 12                	je     100036e2 <firstRun()+0x10bd>
100036d0:	83 7d d8 06          	cmp    DWORD PTR [ebp-0x28],0x6
100036d4:	74 0c                	je     100036e2 <firstRun()+0x10bd>
100036d6:	83 7d d8 09          	cmp    DWORD PTR [ebp-0x28],0x9
100036da:	74 06                	je     100036e2 <firstRun()+0x10bd>
100036dc:	83 7d d8 0b          	cmp    DWORD PTR [ebp-0x28],0xb
100036e0:	75 0c                	jne    100036ee <firstRun()+0x10c9>
100036e2:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
100036e9:	e9 89 00 00 00       	jmp    10003777 <firstRun()+0x1152>
100036ee:	83 7d dc 1d          	cmp    DWORD PTR [ebp-0x24],0x1d
100036f2:	75 19                	jne    1000370d <firstRun()+0x10e8>
100036f4:	83 7d d8 02          	cmp    DWORD PTR [ebp-0x28],0x2
100036f8:	75 13                	jne    1000370d <firstRun()+0x10e8>
100036fa:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
100036fd:	83 f0 01             	xor    eax,0x1
10003700:	84 c0                	test   al,al
10003702:	74 09                	je     1000370d <firstRun()+0x10e8>
10003704:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
1000370b:	eb 6a                	jmp    10003777 <firstRun()+0x1152>
1000370d:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
10003711:	75 09                	jne    1000371c <firstRun()+0x10f7>
10003713:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
1000371a:	eb 5b                	jmp    10003777 <firstRun()+0x1152>
1000371c:	83 7d d8 0c          	cmp    DWORD PTR [ebp-0x28],0xc
10003720:	7f 06                	jg     10003728 <firstRun()+0x1103>
10003722:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
10003726:	75 09                	jne    10003731 <firstRun()+0x110c>
10003728:	c7 45 f0 03 00 00 00 	mov    DWORD PTR [ebp-0x10],0x3
1000372f:	eb 46                	jmp    10003777 <firstRun()+0x1152>
10003731:	81 7d d4 b7 0b 00 00 	cmp    DWORD PTR [ebp-0x2c],0xbb7
10003738:	7f 09                	jg     10003743 <firstRun()+0x111e>
1000373a:	81 7d d4 b1 07 00 00 	cmp    DWORD PTR [ebp-0x2c],0x7b1
10003741:	7f 09                	jg     1000374c <firstRun()+0x1127>
10003743:	c7 45 f0 06 00 00 00 	mov    DWORD PTR [ebp-0x10],0x6
1000374a:	eb 2b                	jmp    10003777 <firstRun()+0x1152>
1000374c:	83 7d d0 17          	cmp    DWORD PTR [ebp-0x30],0x17
10003750:	7e 09                	jle    1000375b <firstRun()+0x1136>
10003752:	c7 45 f0 0b 00 00 00 	mov    DWORD PTR [ebp-0x10],0xb
10003759:	eb 1c                	jmp    10003777 <firstRun()+0x1152>
1000375b:	83 7d cc 3b          	cmp    DWORD PTR [ebp-0x34],0x3b
1000375f:	7e 09                	jle    1000376a <firstRun()+0x1145>
10003761:	c7 45 f0 0e 00 00 00 	mov    DWORD PTR [ebp-0x10],0xe
10003768:	eb 0d                	jmp    10003777 <firstRun()+0x1152>
1000376a:	83 7d c8 3b          	cmp    DWORD PTR [ebp-0x38],0x3b
1000376e:	7e 23                	jle    10003793 <firstRun()+0x116e>
10003770:	c7 45 f0 11 00 00 00 	mov    DWORD PTR [ebp-0x10],0x11
10003777:	83 ec 0c             	sub    esp,0xc
1000377a:	68 4c 04 00 00       	push   0x44c
1000377f:	e8 fc ff ff ff       	call   10003780 <firstRun()+0x115b>	10003780: R_386_PC32	milliTenthSleep(unsigned int)
10003784:	83 c4 10             	add    esp,0x10
10003787:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10003789: R_386_32	installKey
1000378e:	e9 5f f8 ff ff       	jmp    10002ff2 <firstRun()+0x9cd>
10003793:	90                   	nop
10003794:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10003796: R_386_32	installKey
1000379b:	83 ec 0c             	sub    esp,0xc
1000379e:	68 84 03 00 00       	push   0x384
100037a3:	e8 fc ff ff ff       	call   100037a4 <firstRun()+0x117f>	100037a4: R_386_PC32	milliTenthSleep(unsigned int)
100037a8:	83 c4 10             	add    esp,0x10
100037ab:	e8 fc ff ff ff       	call   100037ac <firstRun()+0x1187>	100037ac: R_386_PC32	drawBootScreen()
100037b0:	83 ec 0c             	sub    esp,0xc
100037b3:	68 18 2e 00 00       	push   0x2e18
100037b8:	e8 fc ff ff ff       	call   100037b9 <firstRun()+0x1194>	100037b9: R_386_PC32	milliTenthSleep(unsigned int)
100037bd:	83 c4 10             	add    esp,0x10
100037c0:	83 ec 08             	sub    esp,0x8
100037c3:	68 ea 47 00 10       	push   0x100047ea	100037c4: R_386_32	.text
100037c8:	8d 85 06 ff ff ff    	lea    eax,[ebp-0xfa]
100037ce:	50                   	push   eax
100037cf:	e8 fc ff ff ff       	call   100037d0 <firstRun()+0x11ab>	100037d0: R_386_PC32	strcpy
100037d4:	83 c4 10             	add    esp,0x10
100037d7:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
100037de:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100037e0: R_386_32	installKey
100037e5:	e8 fc ff ff ff       	call   100037e6 <firstRun()+0x11c1>	100037e6: R_386_PC32	drawBootScreen()
100037ea:	83 ec 0c             	sub    esp,0xc
100037ed:	68 fb 47 00 10       	push   0x100047fb	100037ee: R_386_32	.text
100037f2:	6a 0e                	push   0xe
100037f4:	6a 32                	push   0x32
100037f6:	6a 02                	push   0x2
100037f8:	6a 16                	push   0x16
100037fa:	e8 fc ff ff ff       	call   100037fb <firstRun()+0x11d6>	100037fb: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
100037ff:	83 c4 20             	add    esp,0x20
10003802:	a1 00 00 00 00       	mov    eax,ds:0x0	10003803: R_386_32	term
10003807:	83 ec 04             	sub    esp,0x4
1000380a:	6a 05                	push   0x5
1000380c:	6a 18                	push   0x18
1000380e:	50                   	push   eax
1000380f:	e8 fc ff ff ff       	call   10003810 <firstRun()+0x11eb>	10003810: R_386_PC32	VgaText::setCursor(int, int)
10003814:	83 c4 10             	add    esp,0x10
10003817:	a1 00 00 00 00       	mov    eax,ds:0x0	10003818: R_386_32	term
1000381c:	83 ec 08             	sub    esp,0x8
1000381f:	68 08 48 00 10       	push   0x10004808	10003820: R_386_32	.text
10003824:	50                   	push   eax
10003825:	e8 fc ff ff ff       	call   10003826 <firstRun()+0x1201>	10003826: R_386_PC32	VgaText::puts(char const*)
1000382a:	83 c4 10             	add    esp,0x10
1000382d:	a1 00 00 00 00       	mov    eax,ds:0x0	1000382e: R_386_32	term
10003832:	83 ec 04             	sub    esp,0x4
10003835:	6a 06                	push   0x6
10003837:	6a 18                	push   0x18
10003839:	50                   	push   eax
1000383a:	e8 fc ff ff ff       	call   1000383b <firstRun()+0x1216>	1000383b: R_386_PC32	VgaText::setCursor(int, int)
1000383f:	83 c4 10             	add    esp,0x10
10003842:	a1 00 00 00 00       	mov    eax,ds:0x0	10003843: R_386_32	term
10003847:	83 ec 08             	sub    esp,0x8
1000384a:	68 c0 47 00 10       	push   0x100047c0	1000384b: R_386_32	.text
1000384f:	50                   	push   eax
10003850:	e8 fc ff ff ff       	call   10003851 <firstRun()+0x122c>	10003851: R_386_PC32	VgaText::puts(char const*)
10003855:	83 c4 10             	add    esp,0x10
10003858:	c6 85 16 ff ff ff 00 	mov    BYTE PTR [ebp-0xea],0x0
1000385f:	c6 85 17 ff ff ff 00 	mov    BYTE PTR [ebp-0xe9],0x0
10003866:	a1 00 00 00 00       	mov    eax,ds:0x0	10003867: R_386_32	term
1000386b:	83 ec 04             	sub    esp,0x4
1000386e:	6a 08                	push   0x8
10003870:	6a 1c                	push   0x1c
10003872:	50                   	push   eax
10003873:	e8 fc ff ff ff       	call   10003874 <firstRun()+0x124f>	10003874: R_386_PC32	VgaText::setCursor(int, int)
10003878:	83 c4 10             	add    esp,0x10
1000387b:	a1 00 00 00 00       	mov    eax,ds:0x0	1000387c: R_386_32	term
10003880:	83 ec 08             	sub    esp,0x8
10003883:	8d 95 06 ff ff ff    	lea    edx,[ebp-0xfa]
10003889:	52                   	push   edx
1000388a:	50                   	push   eax
1000388b:	e8 fc ff ff ff       	call   1000388c <firstRun()+0x1267>	1000388c: R_386_PC32	VgaText::puts(char const*)
10003890:	83 c4 10             	add    esp,0x10
10003893:	a1 00 00 00 00       	mov    eax,ds:0x0	10003894: R_386_32	term
10003898:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
1000389b:	83 c2 1c             	add    edx,0x1c
1000389e:	83 ec 04             	sub    esp,0x4
100038a1:	6a 08                	push   0x8
100038a3:	52                   	push   edx
100038a4:	50                   	push   eax
100038a5:	e8 fc ff ff ff       	call   100038a6 <firstRun()+0x1281>	100038a6: R_386_PC32	VgaText::setCursor(int, int)
100038aa:	83 c4 10             	add    esp,0x10
100038ad:	a1 00 00 00 00       	mov    eax,ds:0x0	100038ae: R_386_32	term
100038b2:	8d 8d 06 ff ff ff    	lea    ecx,[ebp-0xfa]
100038b8:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
100038bb:	01 ca                	add    edx,ecx
100038bd:	8a 12                	mov    dl,BYTE PTR [edx]
100038bf:	0f be d2             	movsx  edx,dl
100038c2:	6a 00                	push   0x0
100038c4:	6a 0f                	push   0xf
100038c6:	52                   	push   edx
100038c7:	50                   	push   eax
100038c8:	e8 fc ff ff ff       	call   100038c9 <firstRun()+0x12a4>	100038c9: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
100038cd:	83 c4 10             	add    esp,0x10
100038d0:	a1 00 00 00 00       	mov    eax,ds:0x0	100038d1: R_386_32	term
100038d5:	83 ec 04             	sub    esp,0x4
100038d8:	6a 08                	push   0x8
100038da:	6a 2c                	push   0x2c
100038dc:	50                   	push   eax
100038dd:	e8 fc ff ff ff       	call   100038de <firstRun()+0x12b9>	100038de: R_386_PC32	VgaText::setCursor(int, int)
100038e2:	83 c4 10             	add    esp,0x10
100038e5:	a1 00 00 00 00       	mov    eax,ds:0x0	100038e6: R_386_32	term
100038ea:	6a 0f                	push   0xf
100038ec:	6a 0f                	push   0xf
100038ee:	6a 20                	push   0x20
100038f0:	50                   	push   eax
100038f1:	e8 fc ff ff ff       	call   100038f2 <firstRun()+0x12cd>	100038f2: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
100038f6:	83 c4 10             	add    esp,0x10
100038f9:	a1 00 00 00 00       	mov    eax,ds:0x0	100038fa: R_386_32	term
100038fe:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
10003901:	83 c2 1c             	add    edx,0x1c
10003904:	83 ec 04             	sub    esp,0x4
10003907:	6a 08                	push   0x8
10003909:	52                   	push   edx
1000390a:	50                   	push   eax
1000390b:	e8 fc ff ff ff       	call   1000390c <firstRun()+0x12e7>	1000390c: R_386_PC32	VgaText::setCursor(int, int)
10003910:	83 c4 10             	add    esp,0x10
10003913:	a0 00 00 00 00       	mov    al,ds:0x0	10003914: R_386_32	installKey
10003918:	84 c0                	test   al,al
1000391a:	0f 94 c0             	sete   al
1000391d:	84 c0                	test   al,al
1000391f:	74 02                	je     10003923 <firstRun()+0x12fe>
10003921:	eb f0                	jmp    10003913 <firstRun()+0x12ee>
10003923:	a1 00 00 00 00       	mov    eax,ds:0x0	10003924: R_386_32	term
10003928:	05 82 00 00 00       	add    eax,0x82
1000392d:	83 ec 04             	sub    esp,0x4
10003930:	6a 10                	push   0x10
10003932:	6a 00                	push   0x0
10003934:	50                   	push   eax
10003935:	e8 fc ff ff ff       	call   10003936 <firstRun()+0x1311>	10003936: R_386_PC32	memset
1000393a:	83 c4 10             	add    esp,0x10
1000393d:	a1 00 00 00 00       	mov    eax,ds:0x0	1000393e: R_386_32	term
10003942:	05 02 01 00 00       	add    eax,0x102
10003947:	83 ec 04             	sub    esp,0x4
1000394a:	6a 10                	push   0x10
1000394c:	6a 00                	push   0x0
1000394e:	50                   	push   eax
1000394f:	e8 fc ff ff ff       	call   10003950 <firstRun()+0x132b>	10003950: R_386_PC32	memset
10003954:	83 c4 10             	add    esp,0x10
10003957:	a0 00 00 00 00       	mov    al,ds:0x0	10003958: R_386_32	installKey
1000395c:	3c 03                	cmp    al,0x3
1000395e:	74 09                	je     10003969 <firstRun()+0x1344>
10003960:	a0 00 00 00 00       	mov    al,ds:0x0	10003961: R_386_32	installKey
10003965:	3c 08                	cmp    al,0x8
10003967:	75 04                	jne    1000396d <firstRun()+0x1348>
10003969:	b0 01                	mov    al,0x1
1000396b:	eb 02                	jmp    1000396f <firstRun()+0x134a>
1000396d:	b0 00                	mov    al,0x0
1000396f:	84 c0                	test   al,al
10003971:	74 36                	je     100039a9 <firstRun()+0x1384>
10003973:	ff 4d f0             	dec    DWORD PTR [ebp-0x10]
10003976:	83 7d f0 ff          	cmp    DWORD PTR [ebp-0x10],0xffffffff
1000397a:	75 16                	jne    10003992 <firstRun()+0x136d>
1000397c:	83 ec 0c             	sub    esp,0xc
1000397f:	8d 85 06 ff ff ff    	lea    eax,[ebp-0xfa]
10003985:	50                   	push   eax
10003986:	e8 fc ff ff ff       	call   10003987 <firstRun()+0x1362>	10003987: R_386_PC32	strlen
1000398b:	83 c4 10             	add    esp,0x10
1000398e:	48                   	dec    eax
1000398f:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10003992:	8d 95 06 ff ff ff    	lea    edx,[ebp-0xfa]
10003998:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
1000399b:	01 d0                	add    eax,edx
1000399d:	8a 00                	mov    al,BYTE PTR [eax]
1000399f:	3c 2d                	cmp    al,0x2d
100039a1:	0f 85 45 03 00 00    	jne    10003cec <firstRun()+0x16c7>
100039a7:	eb ca                	jmp    10003973 <firstRun()+0x134e>
100039a9:	a0 00 00 00 00       	mov    al,ds:0x0	100039aa: R_386_32	installKey
100039ae:	3c 2f                	cmp    al,0x2f
100039b0:	7e 09                	jle    100039bb <firstRun()+0x1396>
100039b2:	a0 00 00 00 00       	mov    al,ds:0x0	100039b3: R_386_32	installKey
100039b7:	3c 39                	cmp    al,0x39
100039b9:	7e 36                	jle    100039f1 <firstRun()+0x13cc>
100039bb:	a0 00 00 00 00       	mov    al,ds:0x0	100039bc: R_386_32	installKey
100039c0:	3c 40                	cmp    al,0x40
100039c2:	7e 09                	jle    100039cd <firstRun()+0x13a8>
100039c4:	a0 00 00 00 00       	mov    al,ds:0x0	100039c5: R_386_32	installKey
100039c9:	3c 5a                	cmp    al,0x5a
100039cb:	7e 24                	jle    100039f1 <firstRun()+0x13cc>
100039cd:	a0 00 00 00 00       	mov    al,ds:0x0	100039ce: R_386_32	installKey
100039d2:	3c 60                	cmp    al,0x60
100039d4:	7e 09                	jle    100039df <firstRun()+0x13ba>
100039d6:	a0 00 00 00 00       	mov    al,ds:0x0	100039d7: R_386_32	installKey
100039db:	3c 7a                	cmp    al,0x7a
100039dd:	7e 12                	jle    100039f1 <firstRun()+0x13cc>
100039df:	a0 00 00 00 00       	mov    al,ds:0x0	100039e0: R_386_32	installKey
100039e4:	3c 20                	cmp    al,0x20
100039e6:	74 09                	je     100039f1 <firstRun()+0x13cc>
100039e8:	a0 00 00 00 00       	mov    al,ds:0x0	100039e9: R_386_32	installKey
100039ed:	3c 04                	cmp    al,0x4
100039ef:	75 04                	jne    100039f5 <firstRun()+0x13d0>
100039f1:	b0 01                	mov    al,0x1
100039f3:	eb 02                	jmp    100039f7 <firstRun()+0x13d2>
100039f5:	b0 00                	mov    al,0x0
100039f7:	84 c0                	test   al,al
100039f9:	0f 84 aa 00 00 00    	je     10003aa9 <firstRun()+0x1484>
100039ff:	a0 00 00 00 00       	mov    al,ds:0x0	10003a00: R_386_32	installKey
10003a04:	3c 2f                	cmp    al,0x2f
10003a06:	7e 09                	jle    10003a11 <firstRun()+0x13ec>
10003a08:	a0 00 00 00 00       	mov    al,ds:0x0	10003a09: R_386_32	installKey
10003a0d:	3c 39                	cmp    al,0x39
10003a0f:	7e 24                	jle    10003a35 <firstRun()+0x1410>
10003a11:	a0 00 00 00 00       	mov    al,ds:0x0	10003a12: R_386_32	installKey
10003a16:	3c 40                	cmp    al,0x40
10003a18:	7e 09                	jle    10003a23 <firstRun()+0x13fe>
10003a1a:	a0 00 00 00 00       	mov    al,ds:0x0	10003a1b: R_386_32	installKey
10003a1f:	3c 5a                	cmp    al,0x5a
10003a21:	7e 12                	jle    10003a35 <firstRun()+0x1410>
10003a23:	a0 00 00 00 00       	mov    al,ds:0x0	10003a24: R_386_32	installKey
10003a28:	3c 60                	cmp    al,0x60
10003a2a:	7e 0d                	jle    10003a39 <firstRun()+0x1414>
10003a2c:	a0 00 00 00 00       	mov    al,ds:0x0	10003a2d: R_386_32	installKey
10003a31:	3c 7a                	cmp    al,0x7a
10003a33:	7f 04                	jg     10003a39 <firstRun()+0x1414>
10003a35:	b0 01                	mov    al,0x1
10003a37:	eb 02                	jmp    10003a3b <firstRun()+0x1416>
10003a39:	b0 00                	mov    al,0x0
10003a3b:	84 c0                	test   al,al
10003a3d:	74 2e                	je     10003a6d <firstRun()+0x1448>
10003a3f:	a0 00 00 00 00       	mov    al,ds:0x0	10003a40: R_386_32	installKey
10003a44:	3c 60                	cmp    al,0x60
10003a46:	7e 13                	jle    10003a5b <firstRun()+0x1436>
10003a48:	a0 00 00 00 00       	mov    al,ds:0x0	10003a49: R_386_32	installKey
10003a4d:	3c 7a                	cmp    al,0x7a
10003a4f:	7f 0a                	jg     10003a5b <firstRun()+0x1436>
10003a51:	a0 00 00 00 00       	mov    al,ds:0x0	10003a52: R_386_32	installKey
10003a56:	83 e8 20             	sub    eax,0x20
10003a59:	eb 05                	jmp    10003a60 <firstRun()+0x143b>
10003a5b:	a0 00 00 00 00       	mov    al,ds:0x0	10003a5c: R_386_32	installKey
10003a60:	8d 8d 06 ff ff ff    	lea    ecx,[ebp-0xfa]
10003a66:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
10003a69:	01 ca                	add    edx,ecx
10003a6b:	88 02                	mov    BYTE PTR [edx],al
10003a6d:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
10003a70:	83 ec 0c             	sub    esp,0xc
10003a73:	8d 85 06 ff ff ff    	lea    eax,[ebp-0xfa]
10003a79:	50                   	push   eax
10003a7a:	e8 fc ff ff ff       	call   10003a7b <firstRun()+0x1456>	10003a7b: R_386_PC32	strlen
10003a7f:	83 c4 10             	add    esp,0x10
10003a82:	89 c2                	mov    edx,eax
10003a84:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10003a87:	39 c2                	cmp    edx,eax
10003a89:	77 07                	ja     10003a92 <firstRun()+0x146d>
10003a8b:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
10003a92:	8d 95 06 ff ff ff    	lea    edx,[ebp-0xfa]
10003a98:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10003a9b:	01 d0                	add    eax,edx
10003a9d:	8a 00                	mov    al,BYTE PTR [eax]
10003a9f:	3c 2d                	cmp    al,0x2d
10003aa1:	0f 85 45 02 00 00    	jne    10003cec <firstRun()+0x16c7>
10003aa7:	eb c4                	jmp    10003a6d <firstRun()+0x1448>
10003aa9:	a0 00 00 00 00       	mov    al,ds:0x0	10003aaa: R_386_32	installKey
10003aae:	3c 0a                	cmp    al,0xa
10003ab0:	0f 94 c0             	sete   al
10003ab3:	84 c0                	test   al,al
10003ab5:	0f 84 31 02 00 00    	je     10003cec <firstRun()+0x16c7>
10003abb:	83 ec 0c             	sub    esp,0xc
10003abe:	8d 85 06 ff ff ff    	lea    eax,[ebp-0xfa]
10003ac4:	50                   	push   eax
10003ac5:	e8 fc ff ff ff       	call   10003ac6 <firstRun()+0x14a1>	10003ac6: R_386_PC32	checkExtendedKey(char*)
10003aca:	83 c4 10             	add    esp,0x10
10003acd:	85 c0                	test   eax,eax
10003acf:	0f 95 c0             	setne  al
10003ad2:	88 45 c6             	mov    BYTE PTR [ebp-0x3a],al
10003ad5:	80 7d c6 00          	cmp    BYTE PTR [ebp-0x3a],0x0
10003ad9:	74 38                	je     10003b13 <firstRun()+0x14ee>
10003adb:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10003add: R_386_32	installKey
10003ae2:	83 ec 0c             	sub    esp,0xc
10003ae5:	68 84 03 00 00       	push   0x384
10003aea:	e8 fc ff ff ff       	call   10003aeb <firstRun()+0x14c6>	10003aeb: R_386_PC32	milliTenthSleep(unsigned int)
10003aef:	83 c4 10             	add    esp,0x10
10003af2:	e8 fc ff ff ff       	call   10003af3 <firstRun()+0x14ce>	10003af3: R_386_PC32	drawBootScreen()
10003af7:	83 ec 0c             	sub    esp,0xc
10003afa:	68 c0 12 00 00       	push   0x12c0
10003aff:	e8 fc ff ff ff       	call   10003b00 <firstRun()+0x14db>	10003b00: R_386_PC32	milliTenthSleep(unsigned int)
10003b04:	83 c4 10             	add    esp,0x10
10003b07:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10003b09: R_386_32	installKey
10003b0e:	e9 e5 01 00 00       	jmp    10003cf8 <firstRun()+0x16d3>
10003b13:	83 ec 0c             	sub    esp,0xc
10003b16:	68 f0 0a 00 00       	push   0xaf0
10003b1b:	e8 fc ff ff ff       	call   10003b1c <firstRun()+0x14f7>	10003b1c: R_386_PC32	milliTenthSleep(unsigned int)
10003b20:	83 c4 10             	add    esp,0x10
10003b23:	e8 fc ff ff ff       	call   10003b24 <firstRun()+0x14ff>	10003b24: R_386_PC32	drawBootScreen()
10003b28:	83 ec 08             	sub    esp,0x8
10003b2b:	6a 01                	push   0x1
10003b2d:	68 fb 47 00 10       	push   0x100047fb	10003b2e: R_386_32	.text
10003b32:	6a 0e                	push   0xe
10003b34:	6a 32                	push   0x32
10003b36:	6a 02                	push   0x2
10003b38:	6a 16                	push   0x16
10003b3a:	e8 fc ff ff ff       	call   10003b3b <firstRun()+0x1516>	10003b3b: R_386_PC32	drawBasicWindowX(int, int, int, int, char const*, bool)
10003b3f:	83 c4 20             	add    esp,0x20
10003b42:	a1 00 00 00 00       	mov    eax,ds:0x0	10003b43: R_386_32	term
10003b47:	83 ec 04             	sub    esp,0x4
10003b4a:	6a 05                	push   0x5
10003b4c:	6a 18                	push   0x18
10003b4e:	50                   	push   eax
10003b4f:	e8 fc ff ff ff       	call   10003b50 <firstRun()+0x152b>	10003b50: R_386_PC32	VgaText::setCursor(int, int)
10003b54:	83 c4 10             	add    esp,0x10
10003b57:	a1 00 00 00 00       	mov    eax,ds:0x0	10003b58: R_386_32	term
10003b5c:	6a 07                	push   0x7
10003b5e:	6a 00                	push   0x0
10003b60:	68 08 48 00 10       	push   0x10004808	10003b61: R_386_32	.text
10003b65:	50                   	push   eax
10003b66:	e8 fc ff ff ff       	call   10003b67 <firstRun()+0x1542>	10003b67: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10003b6b:	83 c4 10             	add    esp,0x10
10003b6e:	a1 00 00 00 00       	mov    eax,ds:0x0	10003b6f: R_386_32	term
10003b73:	83 ec 04             	sub    esp,0x4
10003b76:	6a 06                	push   0x6
10003b78:	6a 18                	push   0x18
10003b7a:	50                   	push   eax
10003b7b:	e8 fc ff ff ff       	call   10003b7c <firstRun()+0x1557>	10003b7c: R_386_PC32	VgaText::setCursor(int, int)
10003b80:	83 c4 10             	add    esp,0x10
10003b83:	a1 00 00 00 00       	mov    eax,ds:0x0	10003b84: R_386_32	term
10003b88:	6a 07                	push   0x7
10003b8a:	6a 00                	push   0x0
10003b8c:	68 c0 47 00 10       	push   0x100047c0	10003b8d: R_386_32	.text
10003b91:	50                   	push   eax
10003b92:	e8 fc ff ff ff       	call   10003b93 <firstRun()+0x156e>	10003b93: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10003b97:	83 c4 10             	add    esp,0x10
10003b9a:	a1 00 00 00 00       	mov    eax,ds:0x0	10003b9b: R_386_32	term
10003b9f:	83 ec 04             	sub    esp,0x4
10003ba2:	6a 08                	push   0x8
10003ba4:	6a 1c                	push   0x1c
10003ba6:	50                   	push   eax
10003ba7:	e8 fc ff ff ff       	call   10003ba8 <firstRun()+0x1583>	10003ba8: R_386_PC32	VgaText::setCursor(int, int)
10003bac:	83 c4 10             	add    esp,0x10
10003baf:	a1 00 00 00 00       	mov    eax,ds:0x0	10003bb0: R_386_32	term
10003bb4:	6a 07                	push   0x7
10003bb6:	6a 00                	push   0x0
10003bb8:	8d 95 06 ff ff ff    	lea    edx,[ebp-0xfa]
10003bbe:	52                   	push   edx
10003bbf:	50                   	push   eax
10003bc0:	e8 fc ff ff ff       	call   10003bc1 <firstRun()+0x159c>	10003bc1: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10003bc5:	83 c4 10             	add    esp,0x10
10003bc8:	a1 00 00 00 00       	mov    eax,ds:0x0	10003bc9: R_386_32	term
10003bcd:	83 ec 04             	sub    esp,0x4
10003bd0:	6a 08                	push   0x8
10003bd2:	6a 2c                	push   0x2c
10003bd4:	50                   	push   eax
10003bd5:	e8 fc ff ff ff       	call   10003bd6 <firstRun()+0x15b1>	10003bd6: R_386_PC32	VgaText::setCursor(int, int)
10003bda:	83 c4 10             	add    esp,0x10
10003bdd:	a1 00 00 00 00       	mov    eax,ds:0x0	10003bde: R_386_32	term
10003be2:	6a 07                	push   0x7
10003be4:	6a 07                	push   0x7
10003be6:	6a 20                	push   0x20
10003be8:	50                   	push   eax
10003be9:	e8 fc ff ff ff       	call   10003bea <firstRun()+0x15c5>	10003bea: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
10003bee:	83 c4 10             	add    esp,0x10
10003bf1:	a1 00 00 00 00       	mov    eax,ds:0x0	10003bf2: R_386_32	term
10003bf6:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
10003bf9:	83 c2 1c             	add    edx,0x1c
10003bfc:	83 ec 04             	sub    esp,0x4
10003bff:	6a 08                	push   0x8
10003c01:	52                   	push   edx
10003c02:	50                   	push   eax
10003c03:	e8 fc ff ff ff       	call   10003c04 <firstRun()+0x15df>	10003c04: R_386_PC32	VgaText::setCursor(int, int)
10003c08:	83 c4 10             	add    esp,0x10
10003c0b:	83 ec 0c             	sub    esp,0xc
10003c0e:	68 2d 48 00 10       	push   0x1000482d	10003c0f: R_386_32	.text
10003c13:	6a 0b                	push   0xb
10003c15:	6a 2b                	push   0x2b
10003c17:	6a 0a                	push   0xa
10003c19:	6a 22                	push   0x22
10003c1b:	e8 fc ff ff ff       	call   10003c1c <firstRun()+0x15f7>	10003c1c: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
10003c20:	83 c4 20             	add    esp,0x20
10003c23:	a1 00 00 00 00       	mov    eax,ds:0x0	10003c24: R_386_32	term
10003c28:	83 ec 04             	sub    esp,0x4
10003c2b:	6a 0d                	push   0xd
10003c2d:	6a 24                	push   0x24
10003c2f:	50                   	push   eax
10003c30:	e8 fc ff ff ff       	call   10003c31 <firstRun()+0x160c>	10003c31: R_386_PC32	VgaText::setCursor(int, int)
10003c35:	83 c4 10             	add    esp,0x10
10003c38:	a1 00 00 00 00       	mov    eax,ds:0x0	10003c39: R_386_32	term
10003c3d:	83 ec 08             	sub    esp,0x8
10003c40:	68 44 48 00 10       	push   0x10004844	10003c41: R_386_32	.text
10003c45:	50                   	push   eax
10003c46:	e8 fc ff ff ff       	call   10003c47 <firstRun()+0x1622>	10003c47: R_386_PC32	VgaText::puts(char const*)
10003c4b:	83 c4 10             	add    esp,0x10
10003c4e:	a1 00 00 00 00       	mov    eax,ds:0x0	10003c4f: R_386_32	term
10003c53:	83 ec 04             	sub    esp,0x4
10003c56:	6a 0f                	push   0xf
10003c58:	6a 24                	push   0x24
10003c5a:	50                   	push   eax
10003c5b:	e8 fc ff ff ff       	call   10003c5c <firstRun()+0x1637>	10003c5c: R_386_PC32	VgaText::setCursor(int, int)
10003c60:	83 c4 10             	add    esp,0x10
10003c63:	a1 00 00 00 00       	mov    eax,ds:0x0	10003c64: R_386_32	term
10003c68:	83 ec 08             	sub    esp,0x8
10003c6b:	68 6c 48 00 10       	push   0x1000486c	10003c6c: R_386_32	.text
10003c70:	50                   	push   eax
10003c71:	e8 fc ff ff ff       	call   10003c72 <firstRun()+0x164d>	10003c72: R_386_PC32	VgaText::puts(char const*)
10003c76:	83 c4 10             	add    esp,0x10
10003c79:	a1 00 00 00 00       	mov    eax,ds:0x0	10003c7a: R_386_32	term
10003c7e:	83 ec 04             	sub    esp,0x4
10003c81:	6a 10                	push   0x10
10003c83:	6a 24                	push   0x24
10003c85:	50                   	push   eax
10003c86:	e8 fc ff ff ff       	call   10003c87 <firstRun()+0x1662>	10003c87: R_386_PC32	VgaText::setCursor(int, int)
10003c8b:	83 c4 10             	add    esp,0x10
10003c8e:	a1 00 00 00 00       	mov    eax,ds:0x0	10003c8f: R_386_32	term
10003c93:	83 ec 08             	sub    esp,0x8
10003c96:	68 90 48 00 10       	push   0x10004890	10003c97: R_386_32	.text
10003c9b:	50                   	push   eax
10003c9c:	e8 fc ff ff ff       	call   10003c9d <firstRun()+0x1678>	10003c9d: R_386_PC32	VgaText::puts(char const*)
10003ca1:	83 c4 10             	add    esp,0x10
10003ca4:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10003ca6: R_386_32	installKey
10003cab:	83 ec 0c             	sub    esp,0xc
10003cae:	68 94 11 00 00       	push   0x1194
10003cb3:	e8 fc ff ff ff       	call   10003cb4 <firstRun()+0x168f>	10003cb4: R_386_PC32	milliTenthSleep(unsigned int)
10003cb8:	83 c4 10             	add    esp,0x10
10003cbb:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10003cbd: R_386_32	installKey
10003cc2:	a0 00 00 00 00       	mov    al,ds:0x0	10003cc3: R_386_32	installKey
10003cc7:	84 c0                	test   al,al
10003cc9:	0f 94 c0             	sete   al
10003ccc:	84 c0                	test   al,al
10003cce:	74 02                	je     10003cd2 <firstRun()+0x16ad>
10003cd0:	eb f0                	jmp    10003cc2 <firstRun()+0x169d>
10003cd2:	e8 fc ff ff ff       	call   10003cd3 <firstRun()+0x16ae>	10003cd3: R_386_PC32	drawBootScreen()
10003cd7:	83 ec 0c             	sub    esp,0xc
10003cda:	68 9c 18 00 00       	push   0x189c
10003cdf:	e8 fc ff ff ff       	call   10003ce0 <firstRun()+0x16bb>	10003ce0: R_386_PC32	milliTenthSleep(unsigned int)
10003ce4:	83 c4 10             	add    esp,0x10
10003ce7:	e9 f2 fa ff ff       	jmp    100037de <firstRun()+0x11b9>
10003cec:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10003cee: R_386_32	installKey
10003cf3:	e9 60 fb ff ff       	jmp    10003858 <firstRun()+0x1233>
10003cf8:	e8 fc ff ff ff       	call   10003cf9 <firstRun()+0x16d4>	10003cf9: R_386_PC32	drawBootScreen()
10003cfd:	83 ec 0c             	sub    esp,0xc
10003d00:	68 b1 48 00 10       	push   0x100048b1	10003d01: R_386_32	.text
10003d05:	6a 0d                	push   0xd
10003d07:	6a 32                	push   0x32
10003d09:	6a 05                	push   0x5
10003d0b:	6a 16                	push   0x16
10003d0d:	e8 fc ff ff ff       	call   10003d0e <firstRun()+0x16e9>	10003d0e: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
10003d12:	83 c4 20             	add    esp,0x20
10003d15:	83 ec 0c             	sub    esp,0xc
10003d18:	6a 00                	push   0x0
10003d1a:	e8 fc ff ff ff       	call   10003d1b <firstRun()+0x16f6>	10003d1b: R_386_PC32	bootInstallTasks(int)
10003d1f:	83 c4 10             	add    esp,0x10
10003d22:	83 ec 04             	sub    esp,0x4
10003d25:	6a 0c                	push   0xc
10003d27:	68 c9 48 00 10       	push   0x100048c9	10003d28: R_386_32	.text
10003d2c:	68 da 48 00 10       	push   0x100048da	10003d2d: R_386_32	.text
10003d31:	e8 fc ff ff ff       	call   10003d32 <firstRun()+0x170d>	10003d32: R_386_PC32	Reg::readIntWithDefault(char*, char*, int)
10003d36:	83 c4 10             	add    esp,0x10
10003d39:	89 45 c0             	mov    DWORD PTR [ebp-0x40],eax
10003d3c:	83 ec 0c             	sub    esp,0xc
10003d3f:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
10003d42:	e8 fc ff ff ff       	call   10003d43 <firstRun()+0x171e>	10003d43: R_386_PC32	Virt::setupPageSwapping(int)
10003d47:	83 c4 10             	add    esp,0x10
10003d4a:	83 ec 0c             	sub    esp,0xc
10003d4d:	6a 01                	push   0x1
10003d4f:	e8 fc ff ff ff       	call   10003d50 <firstRun()+0x172b>	10003d50: R_386_PC32	bootInstallTasks(int)
10003d54:	83 c4 10             	add    esp,0x10
10003d57:	83 ec 0c             	sub    esp,0xc
10003d5a:	68 e1 48 00 10       	push   0x100048e1	10003d5b: R_386_32	.text
10003d5f:	e8 fc ff ff ff       	call   10003d60 <firstRun()+0x173b>	10003d60: R_386_PC32	rmtree(char*)
10003d64:	83 c4 10             	add    esp,0x10
10003d67:	83 ec 0c             	sub    esp,0xc
10003d6a:	68 fb 48 00 10       	push   0x100048fb	10003d6b: R_386_32	.text
10003d6f:	e8 fc ff ff ff       	call   10003d70 <firstRun()+0x174b>	10003d70: R_386_PC32	rmtree(char*)
10003d74:	83 c4 10             	add    esp,0x10
10003d77:	83 ec 08             	sub    esp,0x8
10003d7a:	68 c0 01 00 00       	push   0x1c0
10003d7f:	68 e1 48 00 10       	push   0x100048e1	10003d80: R_386_32	.text
10003d84:	e8 fc ff ff ff       	call   10003d85 <firstRun()+0x1760>	10003d85: R_386_PC32	mkdir(char const*, int)
10003d89:	83 c4 10             	add    esp,0x10
10003d8c:	83 ec 08             	sub    esp,0x8
10003d8f:	68 c0 01 00 00       	push   0x1c0
10003d94:	68 fb 48 00 10       	push   0x100048fb	10003d95: R_386_32	.text
10003d99:	e8 fc ff ff ff       	call   10003d9a <firstRun()+0x1775>	10003d9a: R_386_PC32	mkdir(char const*, int)
10003d9e:	83 c4 10             	add    esp,0x10
10003da1:	83 ec 08             	sub    esp,0x8
10003da4:	68 e1 48 00 10       	push   0x100048e1	10003da5: R_386_32	.text
10003da9:	68 14 49 00 10       	push   0x10004914	10003daa: R_386_32	.text
10003dae:	e8 fc ff ff ff       	call   10003daf <firstRun()+0x178a>	10003daf: R_386_PC32	copytree(char*, char*)
10003db3:	83 c4 10             	add    esp,0x10
10003db6:	83 ec 0c             	sub    esp,0xc
10003db9:	6a 02                	push   0x2
10003dbb:	e8 fc ff ff ff       	call   10003dbc <firstRun()+0x1797>	10003dbc: R_386_PC32	bootInstallTasks(int)
10003dc0:	83 c4 10             	add    esp,0x10
10003dc3:	83 ec 0c             	sub    esp,0xc
10003dc6:	8d 45 90             	lea    eax,[ebp-0x70]
10003dc9:	50                   	push   eax
10003dca:	e8 fc ff ff ff       	call   10003dcb <firstRun()+0x17a6>	10003dcb: R_386_PC32	createUser(char const*)
10003dcf:	83 c4 10             	add    esp,0x10
10003dd2:	83 ec 0c             	sub    esp,0xc
10003dd5:	6a 03                	push   0x3
10003dd7:	e8 fc ff ff ff       	call   10003dd8 <firstRun()+0x17b3>	10003dd8: R_386_PC32	bootInstallTasks(int)
10003ddc:	83 c4 10             	add    esp,0x10
10003ddf:	c6 05 00 00 00 00 01 	mov    BYTE PTR ds:0x0,0x1	10003de1: R_386_32	VgaText::hiddenOut
10003de6:	90                   	nop
10003de7:	8d 65 f8             	lea    esp,[ebp-0x8]
10003dea:	5b                   	pop    ebx
10003deb:	5f                   	pop    edi
10003dec:	5d                   	pop    ebp
10003ded:	c3                   	ret    

10003dee <loadExtensions()>:
10003dee:	55                   	push   ebp
10003def:	89 e5                	mov    ebp,esp
10003df1:	83 ec 08             	sub    esp,0x8
10003df4:	83 ec 0c             	sub    esp,0xc
10003df7:	68 35 49 00 10       	push   0x10004935	10003df8: R_386_32	.text
10003dfc:	e8 fc ff ff ff       	call   10003dfd <loadExtensions()+0xf>	10003dfd: R_386_PC32	KeSetBootMessage(char const*)
10003e01:	83 c4 10             	add    esp,0x10
10003e04:	90                   	nop
10003e05:	c9                   	leave  
10003e06:	c3                   	ret    

10003e07 <begin(void*)>:
10003e07:	55                   	push   ebp
10003e08:	89 e5                	mov    ebp,esp
10003e0a:	57                   	push   edi
10003e0b:	56                   	push   esi
10003e0c:	53                   	push   ebx
10003e0d:	83 ec 4c             	sub    esp,0x4c
10003e10:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
10003e14:	83 ec 0c             	sub    esp,0xc
10003e17:	68 14 01 00 00       	push   0x114
10003e1c:	e8 fc ff ff ff       	call   10003e1d <begin(void*)+0x16>	10003e1d: R_386_PC32	operator new(unsigned long)
10003e21:	83 c4 10             	add    esp,0x10
10003e24:	89 c3                	mov    ebx,eax
10003e26:	a1 00 00 00 00       	mov    eax,ds:0x0	10003e27: R_386_32	kernelProcess
10003e2b:	83 ec 04             	sub    esp,0x4
10003e2e:	50                   	push   eax
10003e2f:	68 4b 49 00 10       	push   0x1000494b	10003e30: R_386_32	.text
10003e34:	53                   	push   ebx
10003e35:	e8 fc ff ff ff       	call   10003e36 <begin(void*)+0x2f>	10003e36: R_386_PC32	File::File(char const*, Process*)
10003e3a:	83 c4 10             	add    esp,0x10
10003e3d:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
10003e40:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
10003e44:	75 10                	jne    10003e56 <begin(void*)+0x4f>
10003e46:	83 ec 0c             	sub    esp,0xc
10003e49:	68 69 49 00 10       	push   0x10004969	10003e4a: R_386_32	.text
10003e4e:	e8 fc ff ff ff       	call   10003e4f <begin(void*)+0x48>	10003e4f: R_386_PC32	KePanic(char const*)
10003e53:	83 c4 10             	add    esp,0x10
10003e56:	83 ec 08             	sub    esp,0x8
10003e59:	6a 01                	push   0x1
10003e5b:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10003e5e:	e8 fc ff ff ff       	call   10003e5f <begin(void*)+0x58>	10003e5f: R_386_PC32	File::open(FileOpenMode)
10003e63:	83 c4 10             	add    esp,0x10
10003e66:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
10003e69:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
10003e6d:	75 10                	jne    10003e7f <begin(void*)+0x78>
10003e6f:	83 ec 0c             	sub    esp,0xc
10003e72:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10003e75:	e8 fc ff ff ff       	call   10003e76 <begin(void*)+0x6f>	10003e76: R_386_PC32	File::close()
10003e7a:	83 c4 10             	add    esp,0x10
10003e7d:	eb 04                	jmp    10003e83 <begin(void*)+0x7c>
10003e7f:	c6 45 e7 01          	mov    BYTE PTR [ebp-0x19],0x1
10003e83:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
10003e87:	74 15                	je     10003e9e <begin(void*)+0x97>
10003e89:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10003e8c:	8b 00                	mov    eax,DWORD PTR [eax]
10003e8e:	83 c0 08             	add    eax,0x8
10003e91:	8b 00                	mov    eax,DWORD PTR [eax]
10003e93:	83 ec 0c             	sub    esp,0xc
10003e96:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10003e99:	ff d0                	call   eax
10003e9b:	83 c4 10             	add    esp,0x10
10003e9e:	c6 05 00 00 00 00 01 	mov    BYTE PTR ds:0x0,0x1	10003ea0: R_386_32	KeIsPreemptionOn
10003ea5:	80 7d e7 00          	cmp    BYTE PTR [ebp-0x19],0x0
10003ea9:	0f 84 54 01 00 00    	je     10004003 <begin(void*)+0x1fc>
10003eaf:	83 ec 0c             	sub    esp,0xc
10003eb2:	68 79 49 00 10       	push   0x10004979	10003eb3: R_386_32	.text
10003eb7:	e8 fc ff ff ff       	call   10003eb8 <begin(void*)+0xb1>	10003eb8: R_386_PC32	CmOpen(char const*)
10003ebc:	83 c4 10             	add    esp,0x10
10003ebf:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
10003ec2:	83 ec 04             	sub    esp,0x4
10003ec5:	68 95 49 00 10       	push   0x10004995	10003ec6: R_386_32	.text
10003eca:	6a 00                	push   0x0
10003ecc:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10003ecf:	e8 fc ff ff ff       	call   10003ed0 <begin(void*)+0xc9>	10003ed0: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
10003ed4:	83 c4 10             	add    esp,0x10
10003ed7:	83 ec 08             	sub    esp,0x8
10003eda:	68 95 49 00 10       	push   0x10004995	10003edb: R_386_32	.text
10003edf:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10003ee2:	e8 fc ff ff ff       	call   10003ee3 <begin(void*)+0xdc>	10003ee3: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10003ee7:	83 c4 10             	add    esp,0x10
10003eea:	83 ec 08             	sub    esp,0x8
10003eed:	50                   	push   eax
10003eee:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10003ef1:	e8 fc ff ff ff       	call   10003ef2 <begin(void*)+0xeb>	10003ef2: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10003ef6:	83 c4 10             	add    esp,0x10
10003ef9:	83 ec 04             	sub    esp,0x4
10003efc:	68 9e 49 00 10       	push   0x1000499e	10003efd: R_386_32	.text
10003f01:	50                   	push   eax
10003f02:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10003f05:	e8 fc ff ff ff       	call   10003f06 <begin(void*)+0xff>	10003f06: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
10003f0a:	83 c4 10             	add    esp,0x10
10003f0d:	83 ec 08             	sub    esp,0x8
10003f10:	68 ae 49 00 10       	push   0x100049ae	10003f11: R_386_32	.text
10003f15:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10003f18:	e8 fc ff ff ff       	call   10003f19 <begin(void*)+0x112>	10003f19: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10003f1d:	83 c4 10             	add    esp,0x10
10003f20:	83 ec 08             	sub    esp,0x8
10003f23:	50                   	push   eax
10003f24:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10003f27:	e8 fc ff ff ff       	call   10003f28 <begin(void*)+0x121>	10003f28: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10003f2c:	83 c4 10             	add    esp,0x10
10003f2f:	83 ec 04             	sub    esp,0x4
10003f32:	68 c7 49 00 10       	push   0x100049c7	10003f33: R_386_32	.text
10003f37:	50                   	push   eax
10003f38:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10003f3b:	e8 fc ff ff ff       	call   10003f3c <begin(void*)+0x135>	10003f3c: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
10003f40:	83 c4 10             	add    esp,0x10
10003f43:	83 ec 08             	sub    esp,0x8
10003f46:	68 cc 49 00 10       	push   0x100049cc	10003f47: R_386_32	.text
10003f4b:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10003f4e:	e8 fc ff ff ff       	call   10003f4f <begin(void*)+0x148>	10003f4f: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10003f53:	83 c4 10             	add    esp,0x10
10003f56:	83 ec 04             	sub    esp,0x4
10003f59:	68 ea 49 00 10       	push   0x100049ea	10003f5a: R_386_32	.text
10003f5e:	50                   	push   eax
10003f5f:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10003f62:	e8 fc ff ff ff       	call   10003f63 <begin(void*)+0x15c>	10003f63: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10003f67:	83 c4 10             	add    esp,0x10
10003f6a:	83 ec 08             	sub    esp,0x8
10003f6d:	68 95 49 00 10       	push   0x10004995	10003f6e: R_386_32	.text
10003f72:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10003f75:	e8 fc ff ff ff       	call   10003f76 <begin(void*)+0x16f>	10003f76: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10003f7a:	83 c4 10             	add    esp,0x10
10003f7d:	83 ec 08             	sub    esp,0x8
10003f80:	50                   	push   eax
10003f81:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10003f84:	e8 fc ff ff ff       	call   10003f85 <begin(void*)+0x17e>	10003f85: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10003f89:	83 c4 10             	add    esp,0x10
10003f8c:	83 ec 08             	sub    esp,0x8
10003f8f:	6a 6a                	push   0x6a
10003f91:	6a 00                	push   0x0
10003f93:	6a 01                	push   0x1
10003f95:	68 f7 49 00 10       	push   0x100049f7	10003f96: R_386_32	.text
10003f9a:	50                   	push   eax
10003f9b:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10003f9e:	e8 fc ff ff ff       	call   10003f9f <begin(void*)+0x198>	10003f9f: R_386_PC32	CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)
10003fa3:	83 c4 20             	add    esp,0x20
10003fa6:	83 ec 08             	sub    esp,0x8
10003fa9:	6a 6d                	push   0x6d
10003fab:	68 fe ca 00 00       	push   0xcafe
10003fb0:	68 ef be ad de       	push   0xdeadbeef
10003fb5:	68 ff 49 00 10       	push   0x100049ff	10003fb6: R_386_32	.text
10003fba:	6a 01                	push   0x1
10003fbc:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10003fbf:	e8 fc ff ff ff       	call   10003fc0 <begin(void*)+0x1b9>	10003fc0: R_386_PC32	CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)
10003fc4:	83 c4 20             	add    esp,0x20
10003fc7:	83 ec 08             	sub    esp,0x8
10003fca:	68 cc 49 00 10       	push   0x100049cc	10003fcb: R_386_32	.text
10003fcf:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10003fd2:	e8 fc ff ff ff       	call   10003fd3 <begin(void*)+0x1cc>	10003fd3: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10003fd7:	83 c4 10             	add    esp,0x10
10003fda:	83 ec 04             	sub    esp,0x4
10003fdd:	68 0c 4a 00 10       	push   0x10004a0c	10003fde: R_386_32	.text
10003fe2:	50                   	push   eax
10003fe3:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10003fe6:	e8 fc ff ff ff       	call   10003fe7 <begin(void*)+0x1e0>	10003fe7: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10003feb:	83 c4 10             	add    esp,0x10
10003fee:	83 ec 0c             	sub    esp,0xc
10003ff1:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10003ff4:	e8 fc ff ff ff       	call   10003ff5 <begin(void*)+0x1ee>	10003ff5: R_386_PC32	CmClose(Reghive_Tag*)
10003ff9:	83 c4 10             	add    esp,0x10
10003ffc:	e8 fc ff ff ff       	call   10003ffd <begin(void*)+0x1f6>	10003ffd: R_386_PC32	firstRun()
10004001:	eb 05                	jmp    10004008 <begin(void*)+0x201>
10004003:	e8 fc ff ff ff       	call   10004004 <begin(void*)+0x1fd>	10004004: R_386_PC32	loadExtensions()
10004008:	80 7d e7 00          	cmp    BYTE PTR [ebp-0x19],0x0
1000400c:	0f 84 f8 02 00 00    	je     1000430a <begin(void*)+0x503>
10004012:	8d 45 b0             	lea    eax,[ebp-0x50]
10004015:	bb c4 4b 00 10       	mov    ebx,0x10004bc4	10004016: R_386_32	.text
1000401a:	ba 04 00 00 00       	mov    edx,0x4
1000401f:	89 c7                	mov    edi,eax
10004021:	89 de                	mov    esi,ebx
10004023:	89 d1                	mov    ecx,edx
10004025:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10004027:	83 ec 0c             	sub    esp,0xc
1000402a:	68 24 07 00 00       	push   0x724
1000402f:	e8 fc ff ff ff       	call   10004030 <begin(void*)+0x229>	10004030: R_386_PC32	operator new(unsigned long)
10004034:	83 c4 10             	add    esp,0x10
10004037:	89 c3                	mov    ebx,eax
10004039:	8d 45 b0             	lea    eax,[ebp-0x50]
1000403c:	50                   	push   eax
1000403d:	6a 00                	push   0x0
1000403f:	68 8e 4a 00 10       	push   0x10004a8e	10004040: R_386_32	.text
10004044:	53                   	push   ebx
10004045:	e8 fc ff ff ff       	call   10004046 <begin(void*)+0x23f>	10004046: R_386_PC32	Process::Process(char const*, Process*, char**)
1000404a:	83 c4 10             	add    esp,0x10
1000404d:	89 5d cc             	mov    DWORD PTR [ebp-0x34],ebx
10004050:	83 ec 0c             	sub    esp,0xc
10004053:	ff 75 cc             	push   DWORD PTR [ebp-0x34]
10004056:	e8 fc ff ff ff       	call   10004057 <begin(void*)+0x250>	10004057: R_386_PC32	Process::createUserThread()
1000405b:	83 c4 10             	add    esp,0x10
1000405e:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10004060: R_386_32	VgaText::hiddenOut
10004065:	a1 00 00 00 00       	mov    eax,ds:0x0	10004066: R_386_32	term
1000406a:	83 ec 0c             	sub    esp,0xc
1000406d:	50                   	push   eax
1000406e:	e8 fc ff ff ff       	call   1000406f <begin(void*)+0x268>	1000406f: R_386_PC32	setActiveTerminal(VgaText*)
10004073:	83 c4 10             	add    esp,0x10
10004076:	e8 fc ff ff ff       	call   10004077 <begin(void*)+0x270>	10004077: R_386_PC32	drawBootScreen()
1000407b:	83 ec 0c             	sub    esp,0xc
1000407e:	68 b1 48 00 10       	push   0x100048b1	1000407f: R_386_32	.text
10004083:	6a 0d                	push   0xd
10004085:	6a 32                	push   0x32
10004087:	6a 05                	push   0x5
10004089:	6a 16                	push   0x16
1000408b:	e8 fc ff ff ff       	call   1000408c <begin(void*)+0x285>	1000408c: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
10004090:	83 c4 20             	add    esp,0x20
10004093:	83 ec 0c             	sub    esp,0xc
10004096:	6a 03                	push   0x3
10004098:	e8 fc ff ff ff       	call   10004099 <begin(void*)+0x292>	10004099: R_386_PC32	bootInstallTasks(int)
1000409d:	83 c4 10             	add    esp,0x10
100040a0:	c6 05 00 00 00 00 01 	mov    BYTE PTR ds:0x0,0x1	100040a2: R_386_32	VgaText::hiddenOut
100040a7:	83 ec 0c             	sub    esp,0xc
100040aa:	68 14 01 00 00       	push   0x114
100040af:	e8 fc ff ff ff       	call   100040b0 <begin(void*)+0x2a9>	100040b0: R_386_PC32	operator new(unsigned long)
100040b4:	83 c4 10             	add    esp,0x10
100040b7:	89 c3                	mov    ebx,eax
100040b9:	a1 00 00 00 00       	mov    eax,ds:0x0	100040ba: R_386_32	kernelProcess
100040be:	83 ec 04             	sub    esp,0x4
100040c1:	50                   	push   eax
100040c2:	68 ab 4a 00 10       	push   0x10004aab	100040c3: R_386_32	.text
100040c7:	53                   	push   ebx
100040c8:	e8 fc ff ff ff       	call   100040c9 <begin(void*)+0x2c2>	100040c9: R_386_PC32	File::File(char const*, Process*)
100040cd:	83 c4 10             	add    esp,0x10
100040d0:	89 5d c8             	mov    DWORD PTR [ebp-0x38],ebx
100040d3:	83 ec 08             	sub    esp,0x8
100040d6:	6a 01                	push   0x1
100040d8:	ff 75 c8             	push   DWORD PTR [ebp-0x38]
100040db:	e8 fc ff ff ff       	call   100040dc <begin(void*)+0x2d5>	100040dc: R_386_PC32	File::open(FileOpenMode)
100040e0:	83 c4 10             	add    esp,0x10
100040e3:	89 45 c4             	mov    DWORD PTR [ebp-0x3c],eax
100040e6:	83 7d c4 00          	cmp    DWORD PTR [ebp-0x3c],0x0
100040ea:	75 39                	jne    10004125 <begin(void*)+0x31e>
100040ec:	83 ec 0c             	sub    esp,0xc
100040ef:	ff 75 c8             	push   DWORD PTR [ebp-0x38]
100040f2:	e8 fc ff ff ff       	call   100040f3 <begin(void*)+0x2ec>	100040f3: R_386_PC32	File::close()
100040f7:	83 c4 10             	add    esp,0x10
100040fa:	83 ec 0c             	sub    esp,0xc
100040fd:	ff 75 c8             	push   DWORD PTR [ebp-0x38]
10004100:	e8 fc ff ff ff       	call   10004101 <begin(void*)+0x2fa>	10004101: R_386_PC32	File::unlink()
10004105:	83 c4 10             	add    esp,0x10
10004108:	83 7d c8 00          	cmp    DWORD PTR [ebp-0x38],0x0
1000410c:	74 44                	je     10004152 <begin(void*)+0x34b>
1000410e:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
10004111:	8b 00                	mov    eax,DWORD PTR [eax]
10004113:	83 c0 08             	add    eax,0x8
10004116:	8b 00                	mov    eax,DWORD PTR [eax]
10004118:	83 ec 0c             	sub    esp,0xc
1000411b:	ff 75 c8             	push   DWORD PTR [ebp-0x38]
1000411e:	ff d0                	call   eax
10004120:	83 c4 10             	add    esp,0x10
10004123:	eb 2d                	jmp    10004152 <begin(void*)+0x34b>
10004125:	83 7d c8 00          	cmp    DWORD PTR [ebp-0x38],0x0
10004129:	74 15                	je     10004140 <begin(void*)+0x339>
1000412b:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
1000412e:	8b 00                	mov    eax,DWORD PTR [eax]
10004130:	83 c0 08             	add    eax,0x8
10004133:	8b 00                	mov    eax,DWORD PTR [eax]
10004135:	83 ec 0c             	sub    esp,0xc
10004138:	ff 75 c8             	push   DWORD PTR [ebp-0x38]
1000413b:	ff d0                	call   eax
1000413d:	83 c4 10             	add    esp,0x10
10004140:	83 ec 0c             	sub    esp,0xc
10004143:	6a 01                	push   0x1
10004145:	e8 fc ff ff ff       	call   10004146 <begin(void*)+0x33f>	10004146: R_386_PC32	sleep(unsigned int)
1000414a:	83 c4 10             	add    esp,0x10
1000414d:	e9 55 ff ff ff       	jmp    100040a7 <begin(void*)+0x2a0>
10004152:	90                   	nop
10004153:	83 ec 0c             	sub    esp,0xc
10004156:	6a 02                	push   0x2
10004158:	e8 fc ff ff ff       	call   10004159 <begin(void*)+0x352>	10004159: R_386_PC32	sleep(unsigned int)
1000415d:	83 c4 10             	add    esp,0x10
10004160:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10004162: R_386_32	VgaText::hiddenOut
10004167:	a1 00 00 00 00       	mov    eax,ds:0x0	10004168: R_386_32	term
1000416c:	83 ec 0c             	sub    esp,0xc
1000416f:	50                   	push   eax
10004170:	e8 fc ff ff ff       	call   10004171 <begin(void*)+0x36a>	10004171: R_386_PC32	setActiveTerminal(VgaText*)
10004175:	83 c4 10             	add    esp,0x10
10004178:	e8 fc ff ff ff       	call   10004179 <begin(void*)+0x372>	10004179: R_386_PC32	drawBootScreen()
1000417d:	83 ec 0c             	sub    esp,0xc
10004180:	68 b1 48 00 10       	push   0x100048b1	10004181: R_386_32	.text
10004185:	6a 0d                	push   0xd
10004187:	6a 32                	push   0x32
10004189:	6a 05                	push   0x5
1000418b:	6a 16                	push   0x16
1000418d:	e8 fc ff ff ff       	call   1000418e <begin(void*)+0x387>	1000418e: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
10004192:	83 c4 20             	add    esp,0x20
10004195:	83 ec 0c             	sub    esp,0xc
10004198:	6a 04                	push   0x4
1000419a:	e8 fc ff ff ff       	call   1000419b <begin(void*)+0x394>	1000419b: R_386_PC32	bootInstallTasks(int)
1000419f:	83 c4 10             	add    esp,0x10
100041a2:	83 ec 08             	sub    esp,0x8
100041a5:	68 dd dd 00 00       	push   0xdddd
100041aa:	68 b5 4a 00 10       	push   0x10004ab5	100041ab: R_386_32	.text
100041af:	e8 fc ff ff ff       	call   100041b0 <begin(void*)+0x3a9>	100041b0: R_386_PC32	backupTree(char*, unsigned short)
100041b4:	83 c4 10             	add    esp,0x10
100041b7:	83 ec 08             	sub    esp,0x8
100041ba:	68 ee ee 00 00       	push   0xeeee
100041bf:	68 c8 4a 00 10       	push   0x10004ac8	100041c0: R_386_32	.text
100041c4:	e8 fc ff ff ff       	call   100041c5 <begin(void*)+0x3be>	100041c5: R_386_PC32	backupTree(char*, unsigned short)
100041c9:	83 c4 10             	add    esp,0x10
100041cc:	83 ec 08             	sub    esp,0x8
100041cf:	68 ff ff 00 00       	push   0xffff
100041d4:	68 da 4a 00 10       	push   0x10004ada	100041d5: R_386_32	.text
100041d9:	e8 fc ff ff ff       	call   100041da <begin(void*)+0x3d3>	100041da: R_386_PC32	backupTree(char*, unsigned short)
100041de:	83 c4 10             	add    esp,0x10
100041e1:	83 ec 0c             	sub    esp,0xc
100041e4:	6a 05                	push   0x5
100041e6:	e8 fc ff ff ff       	call   100041e7 <begin(void*)+0x3e0>	100041e7: R_386_PC32	bootInstallTasks(int)
100041eb:	83 c4 10             	add    esp,0x10
100041ee:	a1 00 00 00 00       	mov    eax,ds:0x0	100041ef: R_386_32	term
100041f3:	83 ec 0c             	sub    esp,0xc
100041f6:	50                   	push   eax
100041f7:	e8 fc ff ff ff       	call   100041f8 <begin(void*)+0x3f1>	100041f8: R_386_PC32	setActiveTerminal(VgaText*)
100041fc:	83 c4 10             	add    esp,0x10
100041ff:	e8 fc ff ff ff       	call   10004200 <begin(void*)+0x3f9>	10004200: R_386_PC32	drawBootScreen()
10004204:	83 ec 0c             	sub    esp,0xc
10004207:	68 b1 48 00 10       	push   0x100048b1	10004208: R_386_32	.text
1000420c:	6a 0d                	push   0xd
1000420e:	6a 32                	push   0x32
10004210:	6a 05                	push   0x5
10004212:	6a 16                	push   0x16
10004214:	e8 fc ff ff ff       	call   10004215 <begin(void*)+0x40e>	10004215: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
10004219:	83 c4 20             	add    esp,0x20
1000421c:	a1 00 00 00 00       	mov    eax,ds:0x0	1000421d: R_386_32	term
10004221:	83 ec 04             	sub    esp,0x4
10004224:	6a 08                	push   0x8
10004226:	6a 18                	push   0x18
10004228:	50                   	push   eax
10004229:	e8 fc ff ff ff       	call   1000422a <begin(void*)+0x423>	1000422a: R_386_PC32	VgaText::setCursor(int, int)
1000422e:	83 c4 10             	add    esp,0x10
10004231:	a1 00 00 00 00       	mov    eax,ds:0x0	10004232: R_386_32	term
10004236:	83 ec 08             	sub    esp,0x8
10004239:	68 f0 4a 00 10       	push   0x10004af0	1000423a: R_386_32	.text
1000423e:	50                   	push   eax
1000423f:	e8 fc ff ff ff       	call   10004240 <begin(void*)+0x439>	10004240: R_386_PC32	VgaText::puts(char const*)
10004244:	83 c4 10             	add    esp,0x10
10004247:	a1 00 00 00 00       	mov    eax,ds:0x0	10004248: R_386_32	term
1000424c:	83 ec 04             	sub    esp,0x4
1000424f:	6a 0a                	push   0xa
10004251:	6a 18                	push   0x18
10004253:	50                   	push   eax
10004254:	e8 fc ff ff ff       	call   10004255 <begin(void*)+0x44e>	10004255: R_386_PC32	VgaText::setCursor(int, int)
10004259:	83 c4 10             	add    esp,0x10
1000425c:	a1 00 00 00 00       	mov    eax,ds:0x0	1000425d: R_386_32	term
10004261:	83 ec 08             	sub    esp,0x8
10004264:	68 18 4b 00 10       	push   0x10004b18	10004265: R_386_32	.text
10004269:	50                   	push   eax
1000426a:	e8 fc ff ff ff       	call   1000426b <begin(void*)+0x464>	1000426b: R_386_PC32	VgaText::puts(char const*)
1000426f:	83 c4 10             	add    esp,0x10
10004272:	a1 00 00 00 00       	mov    eax,ds:0x0	10004273: R_386_32	term
10004277:	83 ec 04             	sub    esp,0x4
1000427a:	6a 0b                	push   0xb
1000427c:	6a 18                	push   0x18
1000427e:	50                   	push   eax
1000427f:	e8 fc ff ff ff       	call   10004280 <begin(void*)+0x479>	10004280: R_386_PC32	VgaText::setCursor(int, int)
10004284:	83 c4 10             	add    esp,0x10
10004287:	a1 00 00 00 00       	mov    eax,ds:0x0	10004288: R_386_32	term
1000428c:	83 ec 08             	sub    esp,0x8
1000428f:	68 44 4b 00 10       	push   0x10004b44	10004290: R_386_32	.text
10004294:	50                   	push   eax
10004295:	e8 fc ff ff ff       	call   10004296 <begin(void*)+0x48f>	10004296: R_386_PC32	VgaText::puts(char const*)
1000429a:	83 c4 10             	add    esp,0x10
1000429d:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	1000429f: R_386_32	installKey
100042a4:	a0 00 00 00 00       	mov    al,ds:0x0	100042a5: R_386_32	installKey
100042a9:	84 c0                	test   al,al
100042ab:	0f 94 c0             	sete   al
100042ae:	84 c0                	test   al,al
100042b0:	74 02                	je     100042b4 <begin(void*)+0x4ad>
100042b2:	eb f0                	jmp    100042a4 <begin(void*)+0x49d>
100042b4:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100042b6: R_386_32	installKey
100042bb:	a1 00 00 00 00       	mov    eax,ds:0x0	100042bc: R_386_32	term
100042c0:	83 ec 04             	sub    esp,0x4
100042c3:	6a 0c                	push   0xc
100042c5:	6a 18                	push   0x18
100042c7:	50                   	push   eax
100042c8:	e8 fc ff ff ff       	call   100042c9 <begin(void*)+0x4c2>	100042c9: R_386_PC32	VgaText::setCursor(int, int)
100042cd:	83 c4 10             	add    esp,0x10
100042d0:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	100042d2: R_386_32	Krnl::computer
100042d6:	a1 00 00 00 00       	mov    eax,ds:0x0	100042d7: R_386_32	Krnl::computer
100042db:	8b 00                	mov    eax,DWORD PTR [eax]
100042dd:	83 c0 0c             	add    eax,0xc
100042e0:	8b 00                	mov    eax,DWORD PTR [eax]
100042e2:	6a 00                	push   0x0
100042e4:	6a 00                	push   0x0
100042e6:	6a 01                	push   0x1
100042e8:	52                   	push   edx
100042e9:	ff d0                	call   eax
100042eb:	83 c4 10             	add    esp,0x10
100042ee:	a1 00 00 00 00       	mov    eax,ds:0x0	100042ef: R_386_32	term
100042f3:	6a 0f                	push   0xf
100042f5:	6a 0c                	push   0xc
100042f7:	68 58 4b 00 10       	push   0x10004b58	100042f8: R_386_32	.text
100042fc:	50                   	push   eax
100042fd:	e8 fc ff ff ff       	call   100042fe <begin(void*)+0x4f7>	100042fe: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10004302:	83 c4 10             	add    esp,0x10
10004305:	e9 e0 00 00 00       	jmp    100043ea <begin(void*)+0x5e3>
1000430a:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	1000430c: R_386_32	VgaText::hiddenOut
10004311:	83 ec 0c             	sub    esp,0xc
10004314:	68 24 07 00 00       	push   0x724
10004319:	e8 fc ff ff ff       	call   1000431a <begin(void*)+0x513>	1000431a: R_386_PC32	operator new(unsigned long)
1000431e:	83 c4 10             	add    esp,0x10
10004321:	89 c3                	mov    ebx,eax
10004323:	6a 00                	push   0x0
10004325:	6a 00                	push   0x0
10004327:	68 8e 4a 00 10       	push   0x10004a8e	10004328: R_386_32	.text
1000432c:	53                   	push   ebx
1000432d:	e8 fc ff ff ff       	call   1000432e <begin(void*)+0x527>	1000432e: R_386_PC32	Process::Process(char const*, Process*, char**)
10004332:	83 c4 10             	add    esp,0x10
10004335:	89 5d cc             	mov    DWORD PTR [ebp-0x34],ebx
10004338:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
1000433b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
10004341:	83 ec 0c             	sub    esp,0xc
10004344:	50                   	push   eax
10004345:	e8 fc ff ff ff       	call   10004346 <begin(void*)+0x53f>	10004346: R_386_PC32	setActiveTerminal(VgaText*)
1000434a:	83 c4 10             	add    esp,0x10
1000434d:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
10004354:	83 7d e0 18          	cmp    DWORD PTR [ebp-0x20],0x18
10004358:	7f 2e                	jg     10004388 <begin(void*)+0x581>
1000435a:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
10004361:	83 7d dc 4f          	cmp    DWORD PTR [ebp-0x24],0x4f
10004365:	7f 1c                	jg     10004383 <begin(void*)+0x57c>
10004367:	83 ec 0c             	sub    esp,0xc
1000436a:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
1000436d:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
10004370:	6a 00                	push   0x0
10004372:	6a 07                	push   0x7
10004374:	6a 20                	push   0x20
10004376:	e8 fc ff ff ff       	call   10004377 <begin(void*)+0x570>	10004377: R_386_PC32	HalConsoleWriteCharacter(char, int, int, int, int)
1000437b:	83 c4 20             	add    esp,0x20
1000437e:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
10004381:	eb de                	jmp    10004361 <begin(void*)+0x55a>
10004383:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
10004386:	eb cc                	jmp    10004354 <begin(void*)+0x54d>
10004388:	83 ec 0c             	sub    esp,0xc
1000438b:	ff 75 cc             	push   DWORD PTR [ebp-0x34]
1000438e:	e8 fc ff ff ff       	call   1000438f <begin(void*)+0x588>	1000438f: R_386_PC32	Process::createUserThread()
10004393:	83 c4 10             	add    esp,0x10
10004396:	83 ec 04             	sub    esp,0x4
10004399:	6a 00                	push   0x0
1000439b:	68 7e 4b 00 10       	push   0x10004b7e	1000439c: R_386_32	.text
100043a0:	68 86 4b 00 10       	push   0x10004b86	100043a1: R_386_32	.text
100043a5:	e8 fc ff ff ff       	call   100043a6 <begin(void*)+0x59f>	100043a6: R_386_PC32	Reg::readIntWithDefault(char*, char*, int)
100043aa:	83 c4 10             	add    esp,0x10
100043ad:	89 45 c0             	mov    DWORD PTR [ebp-0x40],eax
100043b0:	83 7d c0 00          	cmp    DWORD PTR [ebp-0x40],0x0
100043b4:	74 1d                	je     100043d3 <begin(void*)+0x5cc>
100043b6:	83 ec 0c             	sub    esp,0xc
100043b9:	68 8c 4b 00 10       	push   0x10004b8c	100043ba: R_386_32	.text
100043be:	e8 fc ff ff ff       	call   100043bf <begin(void*)+0x5b8>	100043bf: R_386_PC32	Dbg::kprintf(char const*, ...)
100043c3:	83 c4 10             	add    esp,0x10
100043c6:	83 ec 0c             	sub    esp,0xc
100043c9:	6a 00                	push   0x0
100043cb:	e8 fc ff ff ff       	call   100043cc <begin(void*)+0x5c5>	100043cc: R_386_PC32	startGUIVESA(void*)
100043d0:	83 c4 10             	add    esp,0x10
100043d3:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
100043d6:	8b 00                	mov    eax,DWORD PTR [eax]
100043d8:	83 ec 04             	sub    esp,0x4
100043db:	6a 00                	push   0x0
100043dd:	8d 55 ac             	lea    edx,[ebp-0x54]
100043e0:	52                   	push   edx
100043e1:	50                   	push   eax
100043e2:	e8 fc ff ff ff       	call   100043e3 <begin(void*)+0x5dc>	100043e3: R_386_PC32	waitTask(int, int*, int)
100043e7:	83 c4 10             	add    esp,0x10
100043ea:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	100043ec: R_386_32	Krnl::computer
100043f0:	a1 00 00 00 00       	mov    eax,ds:0x0	100043f1: R_386_32	Krnl::computer
100043f5:	8b 00                	mov    eax,DWORD PTR [eax]
100043f7:	83 c0 0c             	add    eax,0xc
100043fa:	8b 00                	mov    eax,DWORD PTR [eax]
100043fc:	6a 00                	push   0x0
100043fe:	6a 00                	push   0x0
10004400:	6a 00                	push   0x0
10004402:	52                   	push   edx
10004403:	ff d0                	call   eax
10004405:	83 c4 10             	add    esp,0x10
10004408:	83 ec 0c             	sub    esp,0xc
1000440b:	68 97 4b 00 10       	push   0x10004b97	1000440c: R_386_32	.text
10004410:	e8 fc ff ff ff       	call   10004411 <begin(void*)+0x60a>	10004411: R_386_PC32	KePanic(char const*)
10004415:	83 c4 10             	add    esp,0x10
10004418:	eb fe                	jmp    10004418 <begin(void*)+0x611>
1000441a:	66 90                	xchg   ax,ax

1000441c <TERMINAL_KEYBUFFER_IN_SIZE>:
1000441c:	80 00 00 00                                         ....

10004420 <TERMINAL_KEYBUFFER_OUT_SIZE>:
10004420:	80 00 00 00 2e 00 2e 2e 00 2f 00 43 6f 75 6c 64     ........./.Could
10004430:	6e 27 74 20 6f 70 65 6e 20 62 61 73 65 20 70 61     n't open base pa
10004440:	74 68 2e 0a 00 25 73 20 2d 3e 20 25 73 0a 00 43     th...%s -> %s..C
10004450:	4f 55 4c 44 20 4e 4f 54 20 43 52 45 41 54 45 00     OULD NOT CREATE.
10004460:	43 4f 55 4c 44 20 4e 4f 54 20 43 4f 50 59 00 4e     COULD NOT COPY.N
10004470:	4f 20 4d 45 4d 4f 52 59 00 42 61 63 6b 75 70 00     O MEMORY.Backup.
10004480:	43 3a 2f 42 61 6e 61 6e 61 2f 53 79 73 74 65 6d     C:/Banana/System
10004490:	2f 42 61 63 6b 75 70 2f 00 30 31 32 33 34 35 36     /Backup/.0123456
100044a0:	37 38 39 41 42 43 44 45 46 00 43 3a 2f 55 73 65     789ABCDEF.C:/Use
100044b0:	72 73 2f 00 2f 44 65 73 6b 74 6f 70 00 2f 44 6f     rs/./Desktop./Do
100044c0:	63 75 6d 65 6e 74 73 00 2f 44 6f 77 6e 6c 6f 61     cuments./Downloa
100044d0:	64 73 00 2f 50 68 6f 74 6f 73 00 2f 54 72 61 73     ds./Photos./Tras
100044e0:	68 20 42 69 6e 00 2f 4d 75 73 69 63 00 2f 4d 6f     h Bin./Music./Mo
100044f0:	76 69 65 73 00 43 3a 2f 42 61 6e 61 6e 61 2f 52     vies.C:/Banana/R
10004500:	65 67 69 73 74 72 79 2f 55 73 65 72 2f 00 00 00     egistry/User/...
10004510:	43 3a 2f 42 61 6e 61 6e 61 2f 52 65 67 69 73 74     C:/Banana/Regist
10004520:	72 79 2f 44 65 66 61 75 6c 74 55 73 65 72 00 00     ry/DefaultUser..
10004530:	43 68 65 63 6b 69 6e 67 0a 20 73 79 73 74 65 6d     Checking. system
10004540:	0a 20 72 65 71 75 69 72 65 6d 65 6e 74 73 0a 0a     . requirements..
10004550:	20 4c 65 67 61 6c 0a 20 6e 6f 74 69 63 65 73 0a      Legal. notices.
10004560:	0a 20 43 68 6f 6f 73 69 6e 67 20 61 0a 20 70 61     . Choosing a. pa
10004570:	72 74 69 74 69 6f 6e 0a 0a 20 46 6f 72 6d 61 74     rtition.. Format
10004580:	74 69 6e 67 0a 0a 20 43 6f 70 79 69 6e 67 20 66     ting.. Copying f
10004590:	69 6c 65 73 0a 0a 20 52 65 73 74 61 72 74 69 6e     iles.. Restartin
100045a0:	67 0a 20 79 6f 75 72 20 63 6f 6d 70 75 74 65 72     g. your computer
100045b0:	0a 0a 00 20 46 69 6e 61 6c 69 73 69 6e 67 20 74     ... Finalising t
100045c0:	68 65 0a 20 69 6e 73 74 61 6c 6c 61 74 69 6f 6e     he. installation
100045d0:	00 00 00 00 50 6c 65 61 73 65 20 77 61 69 74 20     ....Please wait 
100045e0:	77 68 69 6c 65 20 74 68 65 20 69 6e 73 74 61 6c     while the instal
100045f0:	6c 20 66 69 6e 69 73 68 65 73 2e 00 10 20 00 20     l finishes... . 
10004600:	20 00 41 6c 6c 6f 63 61 74 69 6e 67 20 74 68 65      .Allocating the
10004610:	20 73 77 61 70 66 69 6c 65 00 55 70 64 61 74 69      swapfile.Updati
10004620:	6e 67 20 74 68 65 20 72 65 67 69 73 74 72 79 00     ng the registry.
10004630:	43 72 65 61 74 69 6e 67 20 75 73 65 72 20 61 63     Creating user ac
10004640:	63 6f 75 6e 74 00 49 6e 73 74 61 6c 6c 69 6e 67     count.Installing
10004650:	20 70 61 63 6b 61 67 65 73 00 42 61 63 6b 69 6e      packages.Backin
10004660:	67 20 75 70 20 73 79 73 74 65 6d 20 66 69 6c 65     g up system file
10004670:	73 00 46 69 6e 69 73 68 69 6e 67 20 74 6f 75 63     s.Finishing touc
10004680:	68 65 73 00 51 51 2d 30 30 30 2d 30 30 30 2d 30     hes.QQ-000-000-0
10004690:	30 30 2d 51 00 00 00 00 53 65 74 74 69 6e 67 20     00-Q....Setting 
100046a0:	75 70 20 74 68 65 20 73 79 73 74 65 6d 20 66 6f     up the system fo
100046b0:	72 20 74 68 65 20 66 69 72 73 74 20 74 69 6d 65     r the first time
100046c0:	00 0a 0a 0a 0a 0a 0a 00 54 65 73 74 00 42 61 6e     ........Test.Ban
100046d0:	61 6e 61 20 53 65 74 75 70 00 00 00 50 6c 65 61     ana Setup...Plea
100046e0:	73 65 20 65 6e 74 65 72 20 79 6f 75 72 20 64 65     se enter your de
100046f0:	74 61 69 6c 73 2e 20 50 72 65 73 73 20 54 41 42     tails. Press TAB
10004700:	20 74 6f 20 73 77 69 74 63 68 00 62 65 74 77 65      to switch.betwe
10004710:	65 6e 20 66 69 65 6c 64 73 2e 00 4e 61 6d 65 00     en fields..Name.
10004720:	43 6f 6d 70 61 6e 79 00 20 20 20 20 20 20 20 20     Company.        
10004730:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
10004740:	20 00 20 20 11 00 20 20 20 00 50 72 65 73 73 20      .  ..   .Press 
10004750:	45 4e 54 45 52 00 20 20 20 20 20 20 20 20 20 20     ENTER.          
10004760:	20 00 74 6f 20 73 75 62 6d 69 74 00 20 20 20 4f      .to submit.   O
10004770:	4b 20 20 20 00 44 61 74 65 20 61 6e 64 20 54 69     K   .Date and Ti
10004780:	6d 65 00 31 34 2f 30 35 2f 32 30 32 31 20 31 38     me.14/05/2021 18
10004790:	3a 35 35 3a 30 30 00 00 50 6c 65 61 73 65 20 65     :55:00..Please e
100047a0:	6e 74 65 72 20 74 68 65 20 63 75 72 72 65 6e 74     nter the current
100047b0:	20 64 61 74 65 20 61 6e 64 20 74 69 6d 65 2c 00      date and time,.
100047c0:	61 6e 64 20 74 68 65 6e 20 70 72 65 73 73 20 45     and then press E
100047d0:	4e 54 45 52 2e 00 44 44 2f 4d 4d 2f 59 59 59 59     NTER..DD/MM/YYYY
100047e0:	20 48 48 3a 4d 4d 3a 53 53 00 57 57 2d 37 38 33      HH:MM:SS.WW-783
100047f0:	38 38 2d 34 35 35 35 35 2d 4e 00 50 72 6f 64 75     88-45555-N.Produ
10004800:	63 74 20 4b 65 79 00 00 50 6c 65 61 73 65 20 65     ct Key..Please e
10004810:	6e 74 65 72 20 79 6f 75 72 20 70 72 6f 64 75 63     nter your produc
10004820:	74 20 6b 65 79 20 62 65 6c 6f 77 2c 00 49 6e 76     t key below,.Inv
10004830:	61 6c 69 64 20 50 72 6f 64 75 63 74 20 4b 65 79     alid Product Key
10004840:	00 00 00 00 54 68 65 20 65 6e 74 65 72 65 64 20     ....The entered 
10004850:	70 72 6f 64 75 63 74 20 6b 65 79 20 77 61 73 20     product key was 
10004860:	69 6e 76 61 6c 69 64 2e 00 00 00 00 50 72 65 73     invalid.....Pres
10004870:	73 20 61 6e 79 20 6b 65 79 20 74 6f 20 63 6f 6e     s any key to con
10004880:	74 69 6e 75 65 20 61 6e 64 20 74 68 65 6e 00 00     tinue and then..
10004890:	65 6e 74 65 72 20 74 68 65 20 70 72 6f 64 75 63     enter the produc
100048a0:	74 20 6b 65 79 20 63 6f 72 72 65 63 74 6c 79 2e     t key correctly.
100048b0:	00 46 69 6e 61 6c 69 73 69 6e 67 20 49 6e 73 74     .Finalising Inst
100048c0:	61 6c 6c 61 74 69 6f 6e 00 40 6d 65 6d 6f 72 79     allation.@memory
100048d0:	3a 73 77 61 70 66 69 6c 65 00 73 79 73 74 65 6d     :swapfile.system
100048e0:	00 43 3a 2f 42 61 6e 61 6e 61 2f 52 65 67 69 73     .C:/Banana/Regis
100048f0:	74 72 79 2f 53 79 73 74 65 6d 00 43 3a 2f 42 61     try/System.C:/Ba
10004900:	6e 61 6e 61 2f 52 65 67 69 73 74 72 79 2f 55 73     nana/Registry/Us
10004910:	65 72 00 00 43 3a 2f 42 61 6e 61 6e 61 2f 52 65     er..C:/Banana/Re
10004920:	67 69 73 74 72 79 2f 44 65 66 61 75 6c 74 53 79     gistry/DefaultSy
10004930:	73 74 65 6d 00 4c 6f 61 64 69 6e 67 20 65 78 74     stem.Loading ext
10004940:	65 6e 73 69 6f 6e 73 2e 2e 2e 00 43 3a 2f 42 61     ensions....C:/Ba
10004950:	6e 61 6e 61 2f 53 79 73 74 65 6d 2f 73 65 74 75     nana/System/setu
10004960:	70 69 73 64 2e 6f 6e 65 00 53 59 53 49 4e 49 54     pisd.one.SYSINIT
10004970:	20 46 41 49 4c 55 52 45 00 43 3a 2f 42 61 6e 61      FAILURE.C:/Bana
10004980:	6e 61 2f 53 79 73 74 65 6d 2f 53 59 53 54 45 4d     na/System/SYSTEM
10004990:	2e 52 45 47 00 43 4c 49 50 44 52 41 57 00 42 41     .REG.CLIPDRAW.BA
100049a0:	43 4b 47 52 4f 55 4e 44 49 4d 41 47 45 00 43 4c     CKGROUNDIMAGE.CL
100049b0:	49 50 44 52 41 57 2f 42 41 43 4b 47 52 4f 55 4e     IPDRAW/BACKGROUN
100049c0:	44 49 4d 41 47 45 00 4d 4f 44 45 00 43 4c 49 50     DIMAGE.MODE.CLIP
100049d0:	44 52 41 57 2f 42 41 43 4b 47 52 4f 55 4e 44 49     DRAW/BACKGROUNDI
100049e0:	4d 41 47 45 2f 4d 4f 44 45 00 73 6f 6c 69 64 20     MAGE/MODE.solid 
100049f0:	63 6f 6c 6f 75 72 00 41 55 54 4f 47 55 49 00 53     colour.AUTOGUI.S
10004a00:	45 52 49 41 4c 4e 55 4d 42 45 52 00 74 68 65 20     ERIALNUMBER.the 
10004a10:	62 61 63 6b 67 72 6f 75 6e 64 20 73 68 6f 75 6c     background shoul
10004a20:	64 20 62 65 20 69 6e 20 74 68 65 20 6d 6f 64 65     d be in the mode
10004a30:	20 77 68 65 72 65 20 69 74 20 69 73 20 61 6e 20      where it is an 
10004a40:	69 6d 61 67 65 20 74 69 6c 65 64 20 69 6e 20 61     image tiled in a
10004a50:	20 39 78 39 20 61 72 72 61 6e 67 65 6d 65 6e 74      9x9 arrangement
10004a60:	2c 20 62 75 74 20 73 74 72 65 74 63 68 65 64 20     , but stretched 
10004a70:	73 6f 20 39 78 39 20 6f 76 65 72 73 20 74 68 65     so 9x9 overs the
10004a80:	20 77 68 6f 6c 65 20 73 63 72 65 65 6e 00 43 3a      whole screen.C:
10004a90:	2f 42 61 6e 61 6e 61 2f 53 79 73 74 65 6d 2f 63     /Banana/System/c
10004aa0:	6f 6d 6d 61 6e 64 2e 65 78 65 00 43 3a 2f 44 45     ommand.exe.C:/DE
10004ab0:	2e 42 55 47 00 43 3a 2f 42 61 6e 61 6e 61 2f 44     .BUG.C:/Banana/D
10004ac0:	72 69 76 65 72 73 2f 00 43 3a 2f 42 61 6e 61 6e     rivers/.C:/Banan
10004ad0:	61 2f 53 79 73 74 65 6d 2f 00 43 3a 2f 42 61 6e     a/System/.C:/Ban
10004ae0:	61 6e 61 2f 52 65 67 69 73 74 72 79 2f 00 00 00     ana/Registry/...
10004af0:	54 68 65 20 69 6e 73 74 61 6c 6c 61 74 69 6f 6e     The installation
10004b00:	20 68 61 73 20 62 65 65 6e 20 63 6f 6d 70 6c 65      has been comple
10004b10:	74 65 64 2e 0a 00 00 00 50 6c 65 61 73 65 20 70     ted.....Please p
10004b20:	72 65 73 73 20 45 4e 54 45 52 20 74 6f 20 72 65     ress ENTER to re
10004b30:	73 74 61 72 74 20 79 6f 75 72 20 63 6f 6d 70 75     start your compu
10004b40:	74 65 72 00 61 6e 64 20 73 74 61 72 74 20 42 61     ter.and start Ba
10004b50:	6e 61 6e 61 2e 00 00 00 50 4c 45 41 53 45 20 4d     nana....PLEASE M
10004b60:	41 4e 55 41 4c 4c 59 20 52 45 53 54 41 52 54 20     ANUALLY RESTART 
10004b70:	59 4f 55 52 20 43 4f 4d 50 55 54 45 52 00 61 75     YOUR COMPUTER.au
10004b80:	74 6f 67 75 69 00 73 68 65 6c 6c 00 41 55 54 4f     togui.shell.AUTO
10004b90:	20 47 55 49 2e 0a 00 54 55 52 4e 20 4f 46 46 20      GUI...TURN OFF 
10004ba0:	50 43 00 63 61 6c 6c 00 43 3a 2f 42 61 6e 61 6e     PC.call.C:/Banan
10004bb0:	61 2f 53 79 73 74 65 6d 2f 69 6e 69 74 2e 62 61     a/System/init.ba
10004bc0:	74 00 00 00 8e 4a 00 10 a3 4b 00 10 a8 4b 00 10     t....J...K...K..	10004bc4: R_386_32	.text
	10004bc8: R_386_32	.text
	10004bcc: R_386_32	.text
10004bd0:	00 00 00 00                                         ....
