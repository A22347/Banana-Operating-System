
packages/system/32/0001/system.dll:     file format elf32-i386


Disassembly of section .text:

10000000 <beginx(void*)>:
10000000:	55                   	push   ebp
10000001:	89 e5                	mov    ebp,esp
10000003:	83 ec 08             	sub    esp,0x8
10000006:	83 ec 0c             	sub    esp,0xc
10000009:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000000c:	e8 fc ff ff ff       	call   1000000d <beginx(void*)+0xd>	1000000d: R_386_PC32	begin(void*)
10000011:	83 c4 10             	add    esp,0x10
10000014:	90                   	nop
10000015:	c9                   	leave  
10000016:	c3                   	ret    

10000017 <memcmp(void*, void*, unsigned long)>:
10000017:	55                   	push   ebp
10000018:	89 e5                	mov    ebp,esp
1000001a:	83 ec 10             	sub    esp,0x10
1000001d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000020:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
10000023:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000026:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
10000029:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
1000002c:	8d 50 ff             	lea    edx,[eax-0x1]
1000002f:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
10000032:	85 c0                	test   eax,eax
10000034:	74 12                	je     10000048 <memcmp(void*, void*, unsigned long)+0x31>
10000036:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000039:	8a 10                	mov    dl,BYTE PTR [eax]
1000003b:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
1000003e:	8a 00                	mov    al,BYTE PTR [eax]
10000040:	38 c2                	cmp    dl,al
10000042:	75 04                	jne    10000048 <memcmp(void*, void*, unsigned long)+0x31>
10000044:	b0 01                	mov    al,0x1
10000046:	eb 02                	jmp    1000004a <memcmp(void*, void*, unsigned long)+0x33>
10000048:	b0 00                	mov    al,0x0
1000004a:	84 c0                	test   al,al
1000004c:	74 08                	je     10000056 <memcmp(void*, void*, unsigned long)+0x3f>
1000004e:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
10000051:	ff 45 f8             	inc    DWORD PTR [ebp-0x8]
10000054:	eb d3                	jmp    10000029 <memcmp(void*, void*, unsigned long)+0x12>
10000056:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000059:	8a 00                	mov    al,BYTE PTR [eax]
1000005b:	0f b6 d0             	movzx  edx,al
1000005e:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
10000061:	8a 00                	mov    al,BYTE PTR [eax]
10000063:	0f b6 c0             	movzx  eax,al
10000066:	29 c2                	sub    edx,eax
10000068:	89 d0                	mov    eax,edx
1000006a:	c9                   	leave  
1000006b:	c3                   	ret    

1000006c <memmove>:
1000006c:	55                   	push   ebp
1000006d:	89 e5                	mov    ebp,esp
1000006f:	83 ec 10             	sub    esp,0x10
10000072:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000075:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
10000078:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
1000007b:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
1000007e:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
10000081:	3b 45 fc             	cmp    eax,DWORD PTR [ebp-0x4]
10000084:	76 1b                	jbe    100000a1 <memmove+0x35>
10000086:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
1000008a:	74 46                	je     100000d2 <memmove+0x66>
1000008c:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
1000008f:	8a 10                	mov    dl,BYTE PTR [eax]
10000091:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000094:	88 10                	mov    BYTE PTR [eax],dl
10000096:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
10000099:	ff 45 f8             	inc    DWORD PTR [ebp-0x8]
1000009c:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
1000009f:	eb e5                	jmp    10000086 <memmove+0x1a>
100000a1:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
100000a4:	3b 45 fc             	cmp    eax,DWORD PTR [ebp-0x4]
100000a7:	73 29                	jae    100000d2 <memmove+0x66>
100000a9:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
100000ac:	48                   	dec    eax
100000ad:	01 45 fc             	add    DWORD PTR [ebp-0x4],eax
100000b0:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
100000b3:	48                   	dec    eax
100000b4:	01 45 f8             	add    DWORD PTR [ebp-0x8],eax
100000b7:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
100000bb:	74 15                	je     100000d2 <memmove+0x66>
100000bd:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
100000c0:	8a 10                	mov    dl,BYTE PTR [eax]
100000c2:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100000c5:	88 10                	mov    BYTE PTR [eax],dl
100000c7:	ff 4d fc             	dec    DWORD PTR [ebp-0x4]
100000ca:	ff 4d f8             	dec    DWORD PTR [ebp-0x8]
100000cd:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
100000d0:	eb e5                	jmp    100000b7 <memmove+0x4b>
100000d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100000d5:	c9                   	leave  
100000d6:	c3                   	ret    

100000d7 <memset>:
100000d7:	55                   	push   ebp
100000d8:	89 e5                	mov    ebp,esp
100000da:	83 ec 10             	sub    esp,0x10
100000dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100000e0:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
100000e3:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
100000e7:	74 12                	je     100000fb <memset+0x24>
100000e9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100000ec:	88 c2                	mov    dl,al
100000ee:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100000f1:	88 10                	mov    BYTE PTR [eax],dl
100000f3:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
100000f6:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
100000f9:	eb e8                	jmp    100000e3 <memset+0xc>
100000fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100000fe:	c9                   	leave  
100000ff:	c3                   	ret    

10000100 <strlen>:
10000100:	55                   	push   ebp
10000101:	89 e5                	mov    ebp,esp
10000103:	83 ec 10             	sub    esp,0x10
10000106:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
1000010d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000110:	8a 00                	mov    al,BYTE PTR [eax]
10000112:	84 c0                	test   al,al
10000114:	74 0c                	je     10000122 <strlen+0x22>
10000116:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000119:	40                   	inc    eax
1000011a:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
1000011d:	ff 45 08             	inc    DWORD PTR [ebp+0x8]
10000120:	eb eb                	jmp    1000010d <strlen+0xd>
10000122:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000125:	c9                   	leave  
10000126:	c3                   	ret    

10000127 <strpbrk(char const*, char const*)>:
10000127:	55                   	push   ebp
10000128:	89 e5                	mov    ebp,esp
1000012a:	83 ec 10             	sub    esp,0x10
1000012d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000130:	8a 00                	mov    al,BYTE PTR [eax]
10000132:	84 c0                	test   al,al
10000134:	74 30                	je     10000166 <strpbrk(char const*, char const*)+0x3f>
10000136:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000139:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
1000013c:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000013f:	8a 00                	mov    al,BYTE PTR [eax]
10000141:	84 c0                	test   al,al
10000143:	74 18                	je     1000015d <strpbrk(char const*, char const*)+0x36>
10000145:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000148:	8a 10                	mov    dl,BYTE PTR [eax]
1000014a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000014d:	8a 00                	mov    al,BYTE PTR [eax]
1000014f:	38 c2                	cmp    dl,al
10000151:	75 05                	jne    10000158 <strpbrk(char const*, char const*)+0x31>
10000153:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000156:	eb 13                	jmp    1000016b <strpbrk(char const*, char const*)+0x44>
10000158:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
1000015b:	eb df                	jmp    1000013c <strpbrk(char const*, char const*)+0x15>
1000015d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000160:	40                   	inc    eax
10000161:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
10000164:	eb c7                	jmp    1000012d <strpbrk(char const*, char const*)+0x6>
10000166:	b8 00 00 00 00       	mov    eax,0x0
1000016b:	c9                   	leave  
1000016c:	c3                   	ret    

1000016d <strtok>:
1000016d:	55                   	push   ebp
1000016e:	89 e5                	mov    ebp,esp
10000170:	83 ec 10             	sub    esp,0x10
10000173:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000176:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
10000179:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000017c:	85 c0                	test   eax,eax
1000017e:	75 18                	jne    10000198 <strtok+0x2b>
10000180:	a1 00 00 00 00       	mov    eax,ds:0x0	10000181: R_386_32	SavedPtr
10000185:	85 c0                	test   eax,eax
10000187:	75 07                	jne    10000190 <strtok+0x23>
10000189:	b8 00 00 00 00       	mov    eax,0x0
1000018e:	eb 6f                	jmp    100001ff <strtok+0x92>
10000190:	a1 00 00 00 00       	mov    eax,ds:0x0	10000191: R_386_32	SavedPtr
10000195:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
10000198:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000019b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
1000019e:	50                   	push   eax
1000019f:	e8 fc ff ff ff       	call   100001a0 <strtok+0x33>	100001a0: R_386_PC32	strpbrk(char const*, char const*)
100001a4:	83 c4 08             	add    esp,0x8
100001a7:	a3 00 00 00 00       	mov    ds:0x0,eax	100001a8: R_386_32	SavedPtr
100001ac:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	100001ae: R_386_32	SavedPtr
100001b2:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100001b5:	39 c2                	cmp    edx,eax
100001b7:	75 22                	jne    100001db <strtok+0x6e>
100001b9:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100001bc:	8d 50 01             	lea    edx,[eax+0x1]
100001bf:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
100001c2:	c6 00 00             	mov    BYTE PTR [eax],0x0
100001c5:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100001c8:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
100001cb:	50                   	push   eax
100001cc:	e8 fc ff ff ff       	call   100001cd <strtok+0x60>	100001cd: R_386_PC32	strpbrk(char const*, char const*)
100001d1:	83 c4 08             	add    esp,0x8
100001d4:	a3 00 00 00 00       	mov    ds:0x0,eax	100001d5: R_386_32	SavedPtr
100001d9:	eb d1                	jmp    100001ac <strtok+0x3f>
100001db:	a1 00 00 00 00       	mov    eax,ds:0x0	100001dc: R_386_32	SavedPtr
100001e0:	85 c0                	test   eax,eax
100001e2:	74 16                	je     100001fa <strtok+0x8d>
100001e4:	a1 00 00 00 00       	mov    eax,ds:0x0	100001e5: R_386_32	SavedPtr
100001e9:	8d 50 01             	lea    edx,[eax+0x1]
100001ec:	89 15 00 00 00 00    	mov    DWORD PTR ds:0x0,edx	100001ee: R_386_32	SavedPtr
100001f2:	c6 00 00             	mov    BYTE PTR [eax],0x0
100001f5:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100001f8:	eb 05                	jmp    100001ff <strtok+0x92>
100001fa:	b8 00 00 00 00       	mov    eax,0x0
100001ff:	c9                   	leave  
10000200:	c3                   	ret    

10000201 <strcpy>:
10000201:	55                   	push   ebp
10000202:	89 e5                	mov    ebp,esp
10000204:	83 ec 10             	sub    esp,0x10
10000207:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000020a:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
1000020d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000210:	8a 00                	mov    al,BYTE PTR [eax]
10000212:	84 c0                	test   al,al
10000214:	74 12                	je     10000228 <strcpy+0x27>
10000216:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000219:	8a 10                	mov    dl,BYTE PTR [eax]
1000021b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000021e:	88 10                	mov    BYTE PTR [eax],dl
10000220:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
10000223:	ff 45 0c             	inc    DWORD PTR [ebp+0xc]
10000226:	eb e5                	jmp    1000020d <strcpy+0xc>
10000228:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000022b:	c6 00 00             	mov    BYTE PTR [eax],0x0
1000022e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000231:	c9                   	leave  
10000232:	c3                   	ret    

10000233 <strncpyxx(char*, char const*, unsigned long)>:
10000233:	55                   	push   ebp
10000234:	89 e5                	mov    ebp,esp
10000236:	83 ec 10             	sub    esp,0x10
10000239:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000023c:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
1000023f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000242:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
10000245:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
10000249:	74 23                	je     1000026e <strncpyxx(char*, char const*, unsigned long)+0x3b>
1000024b:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
1000024e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10000251:	8d 42 01             	lea    eax,[edx+0x1]
10000254:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
10000257:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000025a:	8d 48 01             	lea    ecx,[eax+0x1]
1000025d:	89 4d fc             	mov    DWORD PTR [ebp-0x4],ecx
10000260:	8a 12                	mov    dl,BYTE PTR [edx]
10000262:	88 10                	mov    BYTE PTR [eax],dl
10000264:	8a 00                	mov    al,BYTE PTR [eax]
10000266:	84 c0                	test   al,al
10000268:	74 04                	je     1000026e <strncpyxx(char*, char const*, unsigned long)+0x3b>
1000026a:	b0 01                	mov    al,0x1
1000026c:	eb 02                	jmp    10000270 <strncpyxx(char*, char const*, unsigned long)+0x3d>
1000026e:	b0 00                	mov    al,0x0
10000270:	84 c0                	test   al,al
10000272:	74 02                	je     10000276 <strncpyxx(char*, char const*, unsigned long)+0x43>
10000274:	eb cf                	jmp    10000245 <strncpyxx(char*, char const*, unsigned long)+0x12>
10000276:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
10000279:	8d 50 ff             	lea    edx,[eax-0x1]
1000027c:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
1000027f:	85 c0                	test   eax,eax
10000281:	0f 95 c0             	setne  al
10000284:	84 c0                	test   al,al
10000286:	74 0b                	je     10000293 <strncpyxx(char*, char const*, unsigned long)+0x60>
10000288:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000028b:	c6 00 00             	mov    BYTE PTR [eax],0x0
1000028e:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
10000291:	eb e3                	jmp    10000276 <strncpyxx(char*, char const*, unsigned long)+0x43>
10000293:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000296:	c9                   	leave  
10000297:	c3                   	ret    

10000298 <strcmp>:
10000298:	55                   	push   ebp
10000299:	89 e5                	mov    ebp,esp
1000029b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000029e:	8a 10                	mov    dl,BYTE PTR [eax]
100002a0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100002a3:	8a 00                	mov    al,BYTE PTR [eax]
100002a5:	38 c2                	cmp    dl,al
100002a7:	75 20                	jne    100002c9 <strcmp+0x31>
100002a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002ac:	8d 50 01             	lea    edx,[eax+0x1]
100002af:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
100002b2:	8a 00                	mov    al,BYTE PTR [eax]
100002b4:	84 c0                	test   al,al
100002b6:	0f 94 c0             	sete   al
100002b9:	84 c0                	test   al,al
100002bb:	74 07                	je     100002c4 <strcmp+0x2c>
100002bd:	b8 00 00 00 00       	mov    eax,0x0
100002c2:	eb 19                	jmp    100002dd <strcmp+0x45>
100002c4:	ff 45 0c             	inc    DWORD PTR [ebp+0xc]
100002c7:	eb d2                	jmp    1000029b <strcmp+0x3>
100002c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002cc:	8a 00                	mov    al,BYTE PTR [eax]
100002ce:	0f b6 d0             	movzx  edx,al
100002d1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100002d4:	8a 00                	mov    al,BYTE PTR [eax]
100002d6:	0f b6 c0             	movzx  eax,al
100002d9:	29 c2                	sub    edx,eax
100002db:	89 d0                	mov    eax,edx
100002dd:	5d                   	pop    ebp
100002de:	c3                   	ret    

100002df <strchr(char const*, int)>:
100002df:	55                   	push   ebp
100002e0:	89 e5                	mov    ebp,esp
100002e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002e5:	8a 00                	mov    al,BYTE PTR [eax]
100002e7:	84 c0                	test   al,al
100002e9:	74 16                	je     10000301 <strchr(char const*, int)+0x22>
100002eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002ee:	8a 00                	mov    al,BYTE PTR [eax]
100002f0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
100002f3:	38 d0                	cmp    al,dl
100002f5:	75 05                	jne    100002fc <strchr(char const*, int)+0x1d>
100002f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002fa:	eb 0a                	jmp    10000306 <strchr(char const*, int)+0x27>
100002fc:	ff 45 08             	inc    DWORD PTR [ebp+0x8]
100002ff:	eb e1                	jmp    100002e2 <strchr(char const*, int)+0x3>
10000301:	b8 00 00 00 00       	mov    eax,0x0
10000306:	5d                   	pop    ebp
10000307:	c3                   	ret    

10000308 <strncmp>:
10000308:	55                   	push   ebp
10000309:	89 e5                	mov    ebp,esp
1000030b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
1000030e:	8d 50 ff             	lea    edx,[eax-0x1]
10000311:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
10000314:	85 c0                	test   eax,eax
10000316:	74 12                	je     1000032a <strncmp+0x22>
10000318:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000031b:	8a 10                	mov    dl,BYTE PTR [eax]
1000031d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000320:	8a 00                	mov    al,BYTE PTR [eax]
10000322:	38 c2                	cmp    dl,al
10000324:	75 04                	jne    1000032a <strncmp+0x22>
10000326:	b0 01                	mov    al,0x1
10000328:	eb 02                	jmp    1000032c <strncmp+0x24>
1000032a:	b0 00                	mov    al,0x0
1000032c:	84 c0                	test   al,al
1000032e:	74 20                	je     10000350 <strncmp+0x48>
10000330:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000333:	8d 50 01             	lea    edx,[eax+0x1]
10000336:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
10000339:	8a 00                	mov    al,BYTE PTR [eax]
1000033b:	84 c0                	test   al,al
1000033d:	0f 94 c0             	sete   al
10000340:	84 c0                	test   al,al
10000342:	74 07                	je     1000034b <strncmp+0x43>
10000344:	b8 00 00 00 00       	mov    eax,0x0
10000349:	eb 19                	jmp    10000364 <strncmp+0x5c>
1000034b:	ff 45 0c             	inc    DWORD PTR [ebp+0xc]
1000034e:	eb bb                	jmp    1000030b <strncmp+0x3>
10000350:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000353:	8a 00                	mov    al,BYTE PTR [eax]
10000355:	0f b6 d0             	movzx  edx,al
10000358:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
1000035b:	8a 00                	mov    al,BYTE PTR [eax]
1000035d:	0f b6 c0             	movzx  eax,al
10000360:	29 c2                	sub    edx,eax
10000362:	89 d0                	mov    eax,edx
10000364:	5d                   	pop    ebp
10000365:	c3                   	ret    

10000366 <strcat>:
10000366:	55                   	push   ebp
10000367:	89 e5                	mov    ebp,esp
10000369:	83 ec 10             	sub    esp,0x10
1000036c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000036f:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
10000372:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000375:	8d 50 01             	lea    edx,[eax+0x1]
10000378:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
1000037b:	8a 00                	mov    al,BYTE PTR [eax]
1000037d:	84 c0                	test   al,al
1000037f:	0f 95 c0             	setne  al
10000382:	84 c0                	test   al,al
10000384:	74 02                	je     10000388 <strcat+0x22>
10000386:	eb ea                	jmp    10000372 <strcat+0xc>
10000388:	ff 4d fc             	dec    DWORD PTR [ebp-0x4]
1000038b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
1000038e:	8d 42 01             	lea    eax,[edx+0x1]
10000391:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
10000394:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000397:	8d 48 01             	lea    ecx,[eax+0x1]
1000039a:	89 4d fc             	mov    DWORD PTR [ebp-0x4],ecx
1000039d:	8a 12                	mov    dl,BYTE PTR [edx]
1000039f:	88 10                	mov    BYTE PTR [eax],dl
100003a1:	8a 00                	mov    al,BYTE PTR [eax]
100003a3:	84 c0                	test   al,al
100003a5:	0f 95 c0             	setne  al
100003a8:	84 c0                	test   al,al
100003aa:	74 02                	je     100003ae <strcat+0x48>
100003ac:	eb dd                	jmp    1000038b <strcat+0x25>
100003ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100003b1:	c9                   	leave  
100003b2:	c3                   	ret    

100003b3 <strncat(char*, char const*, unsigned long)>:
100003b3:	55                   	push   ebp
100003b4:	89 e5                	mov    ebp,esp
100003b6:	83 ec 10             	sub    esp,0x10
100003b9:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
100003bd:	74 5c                	je     1000041b <strncat(char*, char const*, unsigned long)+0x68>
100003bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100003c2:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
100003c5:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100003c8:	8d 50 01             	lea    edx,[eax+0x1]
100003cb:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
100003ce:	8a 00                	mov    al,BYTE PTR [eax]
100003d0:	84 c0                	test   al,al
100003d2:	0f 95 c0             	setne  al
100003d5:	84 c0                	test   al,al
100003d7:	74 02                	je     100003db <strncat(char*, char const*, unsigned long)+0x28>
100003d9:	eb ea                	jmp    100003c5 <strncat(char*, char const*, unsigned long)+0x12>
100003db:	ff 4d fc             	dec    DWORD PTR [ebp-0x4]
100003de:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
100003e1:	8d 42 01             	lea    eax,[edx+0x1]
100003e4:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
100003e7:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100003ea:	8d 48 01             	lea    ecx,[eax+0x1]
100003ed:	89 4d fc             	mov    DWORD PTR [ebp-0x4],ecx
100003f0:	8a 12                	mov    dl,BYTE PTR [edx]
100003f2:	88 10                	mov    BYTE PTR [eax],dl
100003f4:	8a 00                	mov    al,BYTE PTR [eax]
100003f6:	84 c0                	test   al,al
100003f8:	74 0d                	je     10000407 <strncat(char*, char const*, unsigned long)+0x54>
100003fa:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
100003fd:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
10000401:	74 04                	je     10000407 <strncat(char*, char const*, unsigned long)+0x54>
10000403:	b0 01                	mov    al,0x1
10000405:	eb 02                	jmp    10000409 <strncat(char*, char const*, unsigned long)+0x56>
10000407:	b0 00                	mov    al,0x0
10000409:	84 c0                	test   al,al
1000040b:	74 02                	je     1000040f <strncat(char*, char const*, unsigned long)+0x5c>
1000040d:	eb cf                	jmp    100003de <strncat(char*, char const*, unsigned long)+0x2b>
1000040f:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
10000413:	75 06                	jne    1000041b <strncat(char*, char const*, unsigned long)+0x68>
10000415:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000418:	c6 00 00             	mov    BYTE PTR [eax],0x0
1000041b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000041e:	c9                   	leave  
1000041f:	c3                   	ret    

10000420 <strstr(char*, char*)>:
10000420:	55                   	push   ebp
10000421:	89 e5                	mov    ebp,esp
10000423:	83 ec 10             	sub    esp,0x10
10000426:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10000429:	e8 fc ff ff ff       	call   1000042a <strstr(char*, char*)+0xa>	1000042a: R_386_PC32	strlen
1000042e:	83 c4 04             	add    esp,0x4
10000431:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
10000434:	83 7d fc 00          	cmp    DWORD PTR [ebp-0x4],0x0
10000438:	75 05                	jne    1000043f <strstr(char*, char*)+0x1f>
1000043a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000043d:	eb 3f                	jmp    1000047e <strstr(char*, char*)+0x5e>
1000043f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000442:	50                   	push   eax
10000443:	e8 fc ff ff ff       	call   10000444 <strstr(char*, char*)+0x24>	10000444: R_386_PC32	strlen
10000448:	83 c4 04             	add    esp,0x4
1000044b:	39 45 fc             	cmp    DWORD PTR [ebp-0x4],eax
1000044e:	77 29                	ja     10000479 <strstr(char*, char*)+0x59>
10000450:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000453:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
10000456:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10000459:	50                   	push   eax
1000045a:	e8 fc ff ff ff       	call   1000045b <strstr(char*, char*)+0x3b>	1000045b: R_386_PC32	memcmp(void*, void*, unsigned long)
1000045f:	83 c4 0c             	add    esp,0xc
10000462:	85 c0                	test   eax,eax
10000464:	0f 94 c0             	sete   al
10000467:	84 c0                	test   al,al
10000469:	74 05                	je     10000470 <strstr(char*, char*)+0x50>
1000046b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000046e:	eb 0e                	jmp    1000047e <strstr(char*, char*)+0x5e>
10000470:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000473:	40                   	inc    eax
10000474:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
10000477:	eb c6                	jmp    1000043f <strstr(char*, char*)+0x1f>
10000479:	b8 00 00 00 00       	mov    eax,0x0
1000047e:	c9                   	leave  
1000047f:	c3                   	ret    

10000480 <rmtree(char*)>:
10000480:	55                   	push   ebp
10000481:	89 e5                	mov    ebp,esp
10000483:	53                   	push   ebx
10000484:	81 ec 64 02 00 00    	sub    esp,0x264
1000048a:	68 2c 01 00 00       	push   0x12c
1000048f:	6a 00                	push   0x0
10000491:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
10000497:	50                   	push   eax
10000498:	e8 fc ff ff ff       	call   10000499 <rmtree(char*)+0x19>	10000499: R_386_PC32	memset
1000049d:	83 c4 0c             	add    esp,0xc
100004a0:	8d 85 a8 fd ff ff    	lea    eax,[ebp-0x258]
100004a6:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
100004a9:	83 ec 0c             	sub    esp,0xc
100004ac:	68 14 01 00 00       	push   0x114
100004b1:	e8 fc ff ff ff       	call   100004b2 <rmtree(char*)+0x32>	100004b2: R_386_PC32	operator new(unsigned long)
100004b6:	83 c4 10             	add    esp,0x10
100004b9:	89 c3                	mov    ebx,eax
100004bb:	b8 00 20 00 c2       	mov    eax,0xc2002000
100004c0:	8b 00                	mov    eax,DWORD PTR [eax]
100004c2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
100004c5:	83 ec 04             	sub    esp,0x4
100004c8:	50                   	push   eax
100004c9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100004cc:	53                   	push   ebx
100004cd:	e8 fc ff ff ff       	call   100004ce <rmtree(char*)+0x4e>	100004ce: R_386_PC32	Directory::Directory(char const*, Process*)
100004d2:	83 c4 10             	add    esp,0x10
100004d5:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
100004d8:	83 ec 0c             	sub    esp,0xc
100004db:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
100004de:	e8 fc ff ff ff       	call   100004df <rmtree(char*)+0x5f>	100004df: R_386_PC32	Directory::open()
100004e3:	83 c4 10             	add    esp,0x10
100004e6:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
100004e9:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
100004ed:	74 24                	je     10000513 <rmtree(char*)+0x93>
100004ef:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
100004f3:	0f 84 8b 01 00 00    	je     10000684 <rmtree(char*)+0x204>
100004f9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100004fc:	8b 00                	mov    eax,DWORD PTR [eax]
100004fe:	83 c0 08             	add    eax,0x8
10000501:	8b 00                	mov    eax,DWORD PTR [eax]
10000503:	83 ec 0c             	sub    esp,0xc
10000506:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000509:	ff d0                	call   eax
1000050b:	83 c4 10             	add    esp,0x10
1000050e:	e9 72 01 00 00       	jmp    10000685 <rmtree(char*)+0x205>
10000513:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10000516:	8b 00                	mov    eax,DWORD PTR [eax]
10000518:	83 c0 0c             	add    eax,0xc
1000051b:	8b 00                	mov    eax,DWORD PTR [eax]
1000051d:	83 ec 0c             	sub    esp,0xc
10000520:	8d 95 a4 fd ff ff    	lea    edx,[ebp-0x25c]
10000526:	52                   	push   edx
10000527:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
1000052a:	6a 00                	push   0x0
1000052c:	68 10 01 00 00       	push   0x110
10000531:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000534:	ff d0                	call   eax
10000536:	83 c4 20             	add    esp,0x20
10000539:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
1000053c:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
10000540:	0f 85 04 01 00 00    	jne    1000064a <rmtree(char*)+0x1ca>
10000546:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10000549:	83 c0 10             	add    eax,0x10
1000054c:	83 ec 08             	sub    esp,0x8
1000054f:	68 a8 8a 00 10       	push   0x10008aa8	10000550: R_386_32	.text
10000554:	50                   	push   eax
10000555:	e8 fc ff ff ff       	call   10000556 <rmtree(char*)+0xd6>	10000556: R_386_PC32	strcmp
1000055a:	83 c4 10             	add    esp,0x10
1000055d:	85 c0                	test   eax,eax
1000055f:	74 b2                	je     10000513 <rmtree(char*)+0x93>
10000561:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10000564:	83 c0 10             	add    eax,0x10
10000567:	83 ec 08             	sub    esp,0x8
1000056a:	68 aa 8a 00 10       	push   0x10008aaa	1000056b: R_386_32	.text
1000056f:	50                   	push   eax
10000570:	e8 fc ff ff ff       	call   10000571 <rmtree(char*)+0xf1>	10000571: R_386_PC32	strcmp
10000575:	83 c4 10             	add    esp,0x10
10000578:	85 c0                	test   eax,eax
1000057a:	74 97                	je     10000513 <rmtree(char*)+0x93>
1000057c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
1000057f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
10000582:	83 e0 02             	and    eax,0x2
10000585:	85 c0                	test   eax,eax
10000587:	74 17                	je     100005a0 <rmtree(char*)+0x120>
10000589:	83 ec 0c             	sub    esp,0xc
1000058c:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
10000592:	50                   	push   eax
10000593:	e8 fc ff ff ff       	call   10000594 <rmtree(char*)+0x114>	10000594: R_386_PC32	rmtree(char*)
10000598:	83 c4 10             	add    esp,0x10
1000059b:	e9 73 ff ff ff       	jmp    10000513 <rmtree(char*)+0x93>
100005a0:	83 ec 08             	sub    esp,0x8
100005a3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100005a6:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
100005ac:	50                   	push   eax
100005ad:	e8 fc ff ff ff       	call   100005ae <rmtree(char*)+0x12e>	100005ae: R_386_PC32	strcpy
100005b2:	83 c4 10             	add    esp,0x10
100005b5:	83 ec 08             	sub    esp,0x8
100005b8:	68 ad 8a 00 10       	push   0x10008aad	100005b9: R_386_32	.text
100005bd:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
100005c3:	50                   	push   eax
100005c4:	e8 fc ff ff ff       	call   100005c5 <rmtree(char*)+0x145>	100005c5: R_386_PC32	strcat
100005c9:	83 c4 10             	add    esp,0x10
100005cc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
100005cf:	83 c0 10             	add    eax,0x10
100005d2:	83 ec 08             	sub    esp,0x8
100005d5:	50                   	push   eax
100005d6:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
100005dc:	50                   	push   eax
100005dd:	e8 fc ff ff ff       	call   100005de <rmtree(char*)+0x15e>	100005de: R_386_PC32	strcat
100005e2:	83 c4 10             	add    esp,0x10
100005e5:	83 ec 0c             	sub    esp,0xc
100005e8:	68 14 01 00 00       	push   0x114
100005ed:	e8 fc ff ff ff       	call   100005ee <rmtree(char*)+0x16e>	100005ee: R_386_PC32	operator new(unsigned long)
100005f2:	83 c4 10             	add    esp,0x10
100005f5:	89 c3                	mov    ebx,eax
100005f7:	b8 00 20 00 c2       	mov    eax,0xc2002000
100005fc:	8b 00                	mov    eax,DWORD PTR [eax]
100005fe:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
10000601:	83 ec 04             	sub    esp,0x4
10000604:	50                   	push   eax
10000605:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
1000060b:	50                   	push   eax
1000060c:	53                   	push   ebx
1000060d:	e8 fc ff ff ff       	call   1000060e <rmtree(char*)+0x18e>	1000060e: R_386_PC32	File::File(char const*, Process*)
10000612:	83 c4 10             	add    esp,0x10
10000615:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
10000618:	83 ec 0c             	sub    esp,0xc
1000061b:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
1000061e:	e8 fc ff ff ff       	call   1000061f <rmtree(char*)+0x19f>	1000061f: R_386_PC32	File::unlink()
10000623:	83 c4 10             	add    esp,0x10
10000626:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
1000062a:	0f 84 e3 fe ff ff    	je     10000513 <rmtree(char*)+0x93>
10000630:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10000633:	8b 00                	mov    eax,DWORD PTR [eax]
10000635:	83 c0 08             	add    eax,0x8
10000638:	8b 00                	mov    eax,DWORD PTR [eax]
1000063a:	83 ec 0c             	sub    esp,0xc
1000063d:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
10000640:	ff d0                	call   eax
10000642:	83 c4 10             	add    esp,0x10
10000645:	e9 c9 fe ff ff       	jmp    10000513 <rmtree(char*)+0x93>
1000064a:	90                   	nop
1000064b:	83 ec 0c             	sub    esp,0xc
1000064e:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000651:	e8 fc ff ff ff       	call   10000652 <rmtree(char*)+0x1d2>	10000652: R_386_PC32	Directory::close()
10000656:	83 c4 10             	add    esp,0x10
10000659:	83 ec 0c             	sub    esp,0xc
1000065c:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
1000065f:	e8 fc ff ff ff       	call   10000660 <rmtree(char*)+0x1e0>	10000660: R_386_PC32	Directory::unlink()
10000664:	83 c4 10             	add    esp,0x10
10000667:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
1000066b:	74 18                	je     10000685 <rmtree(char*)+0x205>
1000066d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10000670:	8b 00                	mov    eax,DWORD PTR [eax]
10000672:	83 c0 08             	add    eax,0x8
10000675:	8b 00                	mov    eax,DWORD PTR [eax]
10000677:	83 ec 0c             	sub    esp,0xc
1000067a:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
1000067d:	ff d0                	call   eax
1000067f:	83 c4 10             	add    esp,0x10
10000682:	eb 01                	jmp    10000685 <rmtree(char*)+0x205>
10000684:	90                   	nop
10000685:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
10000688:	c9                   	leave  
10000689:	c3                   	ret    

1000068a <mkdir(char const*, int)>:
1000068a:	55                   	push   ebp
1000068b:	89 e5                	mov    ebp,esp
1000068d:	53                   	push   ebx
1000068e:	83 ec 14             	sub    esp,0x14
10000691:	83 ec 0c             	sub    esp,0xc
10000694:	68 14 01 00 00       	push   0x114
10000699:	e8 fc ff ff ff       	call   1000069a <mkdir(char const*, int)+0x10>	1000069a: R_386_PC32	operator new(unsigned long)
1000069e:	83 c4 10             	add    esp,0x10
100006a1:	89 c3                	mov    ebx,eax
100006a3:	a1 00 00 00 00       	mov    eax,ds:0x0	100006a4: R_386_32	kernelProcess
100006a8:	83 ec 04             	sub    esp,0x4
100006ab:	50                   	push   eax
100006ac:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100006af:	53                   	push   ebx
100006b0:	e8 fc ff ff ff       	call   100006b1 <mkdir(char const*, int)+0x27>	100006b1: R_386_PC32	Directory::Directory(char const*, Process*)
100006b5:	83 c4 10             	add    esp,0x10
100006b8:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
100006bb:	83 ec 0c             	sub    esp,0xc
100006be:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
100006c1:	e8 fc ff ff ff       	call   100006c2 <mkdir(char const*, int)+0x38>	100006c2: R_386_PC32	Directory::create()
100006c6:	83 c4 10             	add    esp,0x10
100006c9:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
100006cd:	74 15                	je     100006e4 <mkdir(char const*, int)+0x5a>
100006cf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
100006d2:	8b 00                	mov    eax,DWORD PTR [eax]
100006d4:	83 c0 08             	add    eax,0x8
100006d7:	8b 00                	mov    eax,DWORD PTR [eax]
100006d9:	83 ec 0c             	sub    esp,0xc
100006dc:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
100006df:	ff d0                	call   eax
100006e1:	83 c4 10             	add    esp,0x10
100006e4:	b8 00 00 00 00       	mov    eax,0x0
100006e9:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
100006ec:	c9                   	leave  
100006ed:	c3                   	ret    

100006ee <copytree(char*, char*)>:
100006ee:	55                   	push   ebp
100006ef:	89 e5                	mov    ebp,esp
100006f1:	53                   	push   ebx
100006f2:	81 ec 54 01 00 00    	sub    esp,0x154
100006f8:	83 ec 0c             	sub    esp,0xc
100006fb:	68 90 01 00 00       	push   0x190
10000700:	e8 fc ff ff ff       	call   10000701 <copytree(char*, char*)+0x13>	10000701: R_386_PC32	malloc
10000705:	83 c4 10             	add    esp,0x10
10000708:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
1000070b:	83 ec 0c             	sub    esp,0xc
1000070e:	68 90 01 00 00       	push   0x190
10000713:	e8 fc ff ff ff       	call   10000714 <copytree(char*, char*)+0x26>	10000714: R_386_PC32	malloc
10000718:	83 c4 10             	add    esp,0x10
1000071b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
1000071e:	83 ec 04             	sub    esp,0x4
10000721:	68 90 01 00 00       	push   0x190
10000726:	6a 00                	push   0x0
10000728:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
1000072b:	e8 fc ff ff ff       	call   1000072c <copytree(char*, char*)+0x3e>	1000072c: R_386_PC32	memset
10000730:	83 c4 10             	add    esp,0x10
10000733:	83 ec 04             	sub    esp,0x4
10000736:	68 90 01 00 00       	push   0x190
1000073b:	6a 00                	push   0x0
1000073d:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000740:	e8 fc ff ff ff       	call   10000741 <copytree(char*, char*)+0x53>	10000741: R_386_PC32	memset
10000745:	83 c4 10             	add    esp,0x10
10000748:	8d 85 bc fe ff ff    	lea    eax,[ebp-0x144]
1000074e:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
10000751:	83 ec 0c             	sub    esp,0xc
10000754:	68 14 01 00 00       	push   0x114
10000759:	e8 fc ff ff ff       	call   1000075a <copytree(char*, char*)+0x6c>	1000075a: R_386_PC32	operator new(unsigned long)
1000075e:	83 c4 10             	add    esp,0x10
10000761:	89 c3                	mov    ebx,eax
10000763:	b8 00 20 00 c2       	mov    eax,0xc2002000
10000768:	8b 00                	mov    eax,DWORD PTR [eax]
1000076a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
1000076d:	83 ec 04             	sub    esp,0x4
10000770:	50                   	push   eax
10000771:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000774:	53                   	push   ebx
10000775:	e8 fc ff ff ff       	call   10000776 <copytree(char*, char*)+0x88>	10000776: R_386_PC32	Directory::Directory(char const*, Process*)
1000077a:	83 c4 10             	add    esp,0x10
1000077d:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
10000780:	83 ec 0c             	sub    esp,0xc
10000783:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
10000786:	e8 fc ff ff ff       	call   10000787 <copytree(char*, char*)+0x99>	10000787: R_386_PC32	Directory::open()
1000078b:	83 c4 10             	add    esp,0x10
1000078e:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10000791:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
10000795:	74 34                	je     100007cb <copytree(char*, char*)+0xdd>
10000797:	83 ec 0c             	sub    esp,0xc
1000079a:	68 af 8a 00 10       	push   0x10008aaf	1000079b: R_386_32	.text
1000079f:	e8 fc ff ff ff       	call   100007a0 <copytree(char*, char*)+0xb2>	100007a0: R_386_PC32	Dbg::kprintf(char const*, ...)
100007a4:	83 c4 10             	add    esp,0x10
100007a7:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
100007ab:	0f 84 90 03 00 00    	je     10000b41 <copytree(char*, char*)+0x453>
100007b1:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
100007b4:	8b 00                	mov    eax,DWORD PTR [eax]
100007b6:	83 c0 08             	add    eax,0x8
100007b9:	8b 00                	mov    eax,DWORD PTR [eax]
100007bb:	83 ec 0c             	sub    esp,0xc
100007be:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
100007c1:	ff d0                	call   eax
100007c3:	83 c4 10             	add    esp,0x10
100007c6:	e9 76 03 00 00       	jmp    10000b41 <copytree(char*, char*)+0x453>
100007cb:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
100007ce:	8b 00                	mov    eax,DWORD PTR [eax]
100007d0:	83 c0 0c             	add    eax,0xc
100007d3:	8b 00                	mov    eax,DWORD PTR [eax]
100007d5:	83 ec 0c             	sub    esp,0xc
100007d8:	8d 95 b8 fe ff ff    	lea    edx,[ebp-0x148]
100007de:	52                   	push   edx
100007df:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
100007e2:	6a 00                	push   0x0
100007e4:	68 10 01 00 00       	push   0x110
100007e9:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
100007ec:	ff d0                	call   eax
100007ee:	83 c4 20             	add    esp,0x20
100007f1:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
100007f4:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
100007f8:	0f 85 fb 02 00 00    	jne    10000af9 <copytree(char*, char*)+0x40b>
100007fe:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
10000801:	83 c0 10             	add    eax,0x10
10000804:	83 ec 08             	sub    esp,0x8
10000807:	68 a8 8a 00 10       	push   0x10008aa8	10000808: R_386_32	.text
1000080c:	50                   	push   eax
1000080d:	e8 fc ff ff ff       	call   1000080e <copytree(char*, char*)+0x120>	1000080e: R_386_PC32	strcmp
10000812:	83 c4 10             	add    esp,0x10
10000815:	85 c0                	test   eax,eax
10000817:	74 b2                	je     100007cb <copytree(char*, char*)+0xdd>
10000819:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
1000081c:	83 c0 10             	add    eax,0x10
1000081f:	83 ec 08             	sub    esp,0x8
10000822:	68 aa 8a 00 10       	push   0x10008aaa	10000823: R_386_32	.text
10000827:	50                   	push   eax
10000828:	e8 fc ff ff ff       	call   10000829 <copytree(char*, char*)+0x13b>	10000829: R_386_PC32	strcmp
1000082d:	83 c4 10             	add    esp,0x10
10000830:	85 c0                	test   eax,eax
10000832:	74 97                	je     100007cb <copytree(char*, char*)+0xdd>
10000834:	83 ec 08             	sub    esp,0x8
10000837:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000083a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
1000083d:	e8 fc ff ff ff       	call   1000083e <copytree(char*, char*)+0x150>	1000083e: R_386_PC32	strcpy
10000842:	83 c4 10             	add    esp,0x10
10000845:	83 ec 08             	sub    esp,0x8
10000848:	68 ad 8a 00 10       	push   0x10008aad	10000849: R_386_32	.text
1000084d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10000850:	e8 fc ff ff ff       	call   10000851 <copytree(char*, char*)+0x163>	10000851: R_386_PC32	strcat
10000855:	83 c4 10             	add    esp,0x10
10000858:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
1000085b:	83 c0 10             	add    eax,0x10
1000085e:	83 ec 08             	sub    esp,0x8
10000861:	50                   	push   eax
10000862:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10000865:	e8 fc ff ff ff       	call   10000866 <copytree(char*, char*)+0x178>	10000866: R_386_PC32	strcat
1000086a:	83 c4 10             	add    esp,0x10
1000086d:	83 ec 08             	sub    esp,0x8
10000870:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10000873:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000876:	e8 fc ff ff ff       	call   10000877 <copytree(char*, char*)+0x189>	10000877: R_386_PC32	strcpy
1000087b:	83 c4 10             	add    esp,0x10
1000087e:	83 ec 08             	sub    esp,0x8
10000881:	68 ad 8a 00 10       	push   0x10008aad	10000882: R_386_32	.text
10000886:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000889:	e8 fc ff ff ff       	call   1000088a <copytree(char*, char*)+0x19c>	1000088a: R_386_PC32	strcat
1000088e:	83 c4 10             	add    esp,0x10
10000891:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
10000894:	83 c0 10             	add    eax,0x10
10000897:	83 ec 08             	sub    esp,0x8
1000089a:	50                   	push   eax
1000089b:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
1000089e:	e8 fc ff ff ff       	call   1000089f <copytree(char*, char*)+0x1b1>	1000089f: R_386_PC32	strcat
100008a3:	83 c4 10             	add    esp,0x10
100008a6:	83 ec 04             	sub    esp,0x4
100008a9:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
100008ac:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
100008af:	68 c9 8a 00 10       	push   0x10008ac9	100008b0: R_386_32	.text
100008b4:	e8 fc ff ff ff       	call   100008b5 <copytree(char*, char*)+0x1c7>	100008b5: R_386_PC32	Dbg::kprintf(char const*, ...)
100008b9:	83 c4 10             	add    esp,0x10
100008bc:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
100008bf:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
100008c2:	83 e0 02             	and    eax,0x2
100008c5:	85 c0                	test   eax,eax
100008c7:	74 47                	je     10000910 <copytree(char*, char*)+0x222>
100008c9:	83 ec 08             	sub    esp,0x8
100008cc:	68 c0 01 00 00       	push   0x1c0
100008d1:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
100008d4:	e8 fc ff ff ff       	call   100008d5 <copytree(char*, char*)+0x1e7>	100008d5: R_386_PC32	mkdir(char const*, int)
100008d9:	83 c4 10             	add    esp,0x10
100008dc:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
100008df:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
100008e3:	74 15                	je     100008fa <copytree(char*, char*)+0x20c>
100008e5:	83 ec 0c             	sub    esp,0xc
100008e8:	68 d3 8a 00 10       	push   0x10008ad3	100008e9: R_386_32	.text
100008ed:	e8 fc ff ff ff       	call   100008ee <copytree(char*, char*)+0x200>	100008ee: R_386_PC32	KePanic(char const*)
100008f2:	83 c4 10             	add    esp,0x10
100008f5:	e9 d1 fe ff ff       	jmp    100007cb <copytree(char*, char*)+0xdd>
100008fa:	83 ec 08             	sub    esp,0x8
100008fd:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000900:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10000903:	e8 fc ff ff ff       	call   10000904 <copytree(char*, char*)+0x216>	10000904: R_386_PC32	copytree(char*, char*)
10000908:	83 c4 10             	add    esp,0x10
1000090b:	e9 bb fe ff ff       	jmp    100007cb <copytree(char*, char*)+0xdd>
10000910:	83 ec 0c             	sub    esp,0xc
10000913:	68 14 01 00 00       	push   0x114
10000918:	e8 fc ff ff ff       	call   10000919 <copytree(char*, char*)+0x22b>	10000919: R_386_PC32	operator new(unsigned long)
1000091d:	83 c4 10             	add    esp,0x10
10000920:	89 c3                	mov    ebx,eax
10000922:	b8 00 20 00 c2       	mov    eax,0xc2002000
10000927:	8b 00                	mov    eax,DWORD PTR [eax]
10000929:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
1000092c:	83 ec 04             	sub    esp,0x4
1000092f:	50                   	push   eax
10000930:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10000933:	53                   	push   ebx
10000934:	e8 fc ff ff ff       	call   10000935 <copytree(char*, char*)+0x247>	10000935: R_386_PC32	File::File(char const*, Process*)
10000939:	83 c4 10             	add    esp,0x10
1000093c:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
1000093f:	83 ec 08             	sub    esp,0x8
10000942:	6a 01                	push   0x1
10000944:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000947:	e8 fc ff ff ff       	call   10000948 <copytree(char*, char*)+0x25a>	10000948: R_386_PC32	File::open(FileOpenMode)
1000094c:	83 c4 10             	add    esp,0x10
1000094f:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
10000953:	75 15                	jne    1000096a <copytree(char*, char*)+0x27c>
10000955:	83 ec 0c             	sub    esp,0xc
10000958:	68 e4 8a 00 10       	push   0x10008ae4	10000959: R_386_32	.text
1000095d:	e8 fc ff ff ff       	call   1000095e <copytree(char*, char*)+0x270>	1000095e: R_386_PC32	KePanic(char const*)
10000962:	83 c4 10             	add    esp,0x10
10000965:	e9 8a 01 00 00       	jmp    10000af4 <copytree(char*, char*)+0x406>
1000096a:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
1000096e:	0f 84 57 fe ff ff    	je     100007cb <copytree(char*, char*)+0xdd>
10000974:	83 ec 0c             	sub    esp,0xc
10000977:	68 14 01 00 00       	push   0x114
1000097c:	e8 fc ff ff ff       	call   1000097d <copytree(char*, char*)+0x28f>	1000097d: R_386_PC32	operator new(unsigned long)
10000981:	83 c4 10             	add    esp,0x10
10000984:	89 c3                	mov    ebx,eax
10000986:	b8 00 20 00 c2       	mov    eax,0xc2002000
1000098b:	8b 00                	mov    eax,DWORD PTR [eax]
1000098d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
10000990:	83 ec 04             	sub    esp,0x4
10000993:	50                   	push   eax
10000994:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000997:	53                   	push   ebx
10000998:	e8 fc ff ff ff       	call   10000999 <copytree(char*, char*)+0x2ab>	10000999: R_386_PC32	File::File(char const*, Process*)
1000099d:	83 c4 10             	add    esp,0x10
100009a0:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
100009a3:	83 ec 08             	sub    esp,0x8
100009a6:	6a 12                	push   0x12
100009a8:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
100009ab:	e8 fc ff ff ff       	call   100009ac <copytree(char*, char*)+0x2be>	100009ac: R_386_PC32	File::open(FileOpenMode)
100009b0:	83 c4 10             	add    esp,0x10
100009b3:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
100009b7:	75 23                	jne    100009dc <copytree(char*, char*)+0x2ee>
100009b9:	83 ec 0c             	sub    esp,0xc
100009bc:	68 e4 8a 00 10       	push   0x10008ae4	100009bd: R_386_32	.text
100009c1:	e8 fc ff ff ff       	call   100009c2 <copytree(char*, char*)+0x2d4>	100009c2: R_386_PC32	KePanic(char const*)
100009c6:	83 c4 10             	add    esp,0x10
100009c9:	83 ec 0c             	sub    esp,0xc
100009cc:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
100009cf:	e8 fc ff ff ff       	call   100009d0 <copytree(char*, char*)+0x2e2>	100009d0: R_386_PC32	File::close()
100009d4:	83 c4 10             	add    esp,0x10
100009d7:	e9 18 01 00 00       	jmp    10000af4 <copytree(char*, char*)+0x406>
100009dc:	83 ec 0c             	sub    esp,0xc
100009df:	68 00 10 00 00       	push   0x1000
100009e4:	e8 fc ff ff ff       	call   100009e5 <copytree(char*, char*)+0x2f7>	100009e5: R_386_PC32	malloc
100009e9:	83 c4 10             	add    esp,0x10
100009ec:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
100009ef:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
100009f3:	75 31                	jne    10000a26 <copytree(char*, char*)+0x338>
100009f5:	83 ec 0c             	sub    esp,0xc
100009f8:	68 f3 8a 00 10       	push   0x10008af3	100009f9: R_386_32	.text
100009fd:	e8 fc ff ff ff       	call   100009fe <copytree(char*, char*)+0x310>	100009fe: R_386_PC32	KePanic(char const*)
10000a02:	83 c4 10             	add    esp,0x10
10000a05:	83 ec 0c             	sub    esp,0xc
10000a08:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10000a0b:	e8 fc ff ff ff       	call   10000a0c <copytree(char*, char*)+0x31e>	10000a0c: R_386_PC32	free
10000a10:	83 c4 10             	add    esp,0x10
10000a13:	83 ec 0c             	sub    esp,0xc
10000a16:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000a19:	e8 fc ff ff ff       	call   10000a1a <copytree(char*, char*)+0x32c>	10000a1a: R_386_PC32	free
10000a1e:	83 c4 10             	add    esp,0x10
10000a21:	e9 1c 01 00 00       	jmp    10000b42 <copytree(char*, char*)+0x454>
10000a26:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10000a29:	8b 00                	mov    eax,DWORD PTR [eax]
10000a2b:	83 c0 0c             	add    eax,0xc
10000a2e:	8b 00                	mov    eax,DWORD PTR [eax]
10000a30:	83 ec 0c             	sub    esp,0xc
10000a33:	8d 95 b4 fe ff ff    	lea    edx,[ebp-0x14c]
10000a39:	52                   	push   edx
10000a3a:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10000a3d:	6a 00                	push   0x0
10000a3f:	68 00 10 00 00       	push   0x1000
10000a44:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000a47:	ff d0                	call   eax
10000a49:	83 c4 20             	add    esp,0x20
10000a4c:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
10000a4f:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
10000a53:	75 37                	jne    10000a8c <copytree(char*, char*)+0x39e>
10000a55:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000a58:	8b 00                	mov    eax,DWORD PTR [eax]
10000a5a:	83 c0 10             	add    eax,0x10
10000a5d:	8b 08                	mov    ecx,DWORD PTR [eax]
10000a5f:	8b 85 b4 fe ff ff    	mov    eax,DWORD PTR [ebp-0x14c]
10000a65:	99                   	cdq    
10000a66:	83 ec 0c             	sub    esp,0xc
10000a69:	8d 9d b0 fe ff ff    	lea    ebx,[ebp-0x150]
10000a6f:	53                   	push   ebx
10000a70:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10000a73:	52                   	push   edx
10000a74:	50                   	push   eax
10000a75:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
10000a78:	ff d1                	call   ecx
10000a7a:	83 c4 20             	add    esp,0x20
10000a7d:	8b 85 b4 fe ff ff    	mov    eax,DWORD PTR [ebp-0x14c]
10000a83:	3d 00 10 00 00       	cmp    eax,0x1000
10000a88:	75 05                	jne    10000a8f <copytree(char*, char*)+0x3a1>
10000a8a:	eb 9a                	jmp    10000a26 <copytree(char*, char*)+0x338>
10000a8c:	90                   	nop
10000a8d:	eb 01                	jmp    10000a90 <copytree(char*, char*)+0x3a2>
10000a8f:	90                   	nop
10000a90:	83 ec 0c             	sub    esp,0xc
10000a93:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10000a96:	e8 fc ff ff ff       	call   10000a97 <copytree(char*, char*)+0x3a9>	10000a97: R_386_PC32	free
10000a9b:	83 c4 10             	add    esp,0x10
10000a9e:	83 ec 0c             	sub    esp,0xc
10000aa1:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000aa4:	e8 fc ff ff ff       	call   10000aa5 <copytree(char*, char*)+0x3b7>	10000aa5: R_386_PC32	File::close()
10000aa9:	83 c4 10             	add    esp,0x10
10000aac:	83 ec 0c             	sub    esp,0xc
10000aaf:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
10000ab2:	e8 fc ff ff ff       	call   10000ab3 <copytree(char*, char*)+0x3c5>	10000ab3: R_386_PC32	File::close()
10000ab7:	83 c4 10             	add    esp,0x10
10000aba:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
10000abe:	74 15                	je     10000ad5 <copytree(char*, char*)+0x3e7>
10000ac0:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10000ac3:	8b 00                	mov    eax,DWORD PTR [eax]
10000ac5:	83 c0 08             	add    eax,0x8
10000ac8:	8b 00                	mov    eax,DWORD PTR [eax]
10000aca:	83 ec 0c             	sub    esp,0xc
10000acd:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000ad0:	ff d0                	call   eax
10000ad2:	83 c4 10             	add    esp,0x10
10000ad5:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
10000ad9:	0f 84 ec fc ff ff    	je     100007cb <copytree(char*, char*)+0xdd>
10000adf:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000ae2:	8b 00                	mov    eax,DWORD PTR [eax]
10000ae4:	83 c0 08             	add    eax,0x8
10000ae7:	8b 00                	mov    eax,DWORD PTR [eax]
10000ae9:	83 ec 0c             	sub    esp,0xc
10000aec:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
10000aef:	ff d0                	call   eax
10000af1:	83 c4 10             	add    esp,0x10
10000af4:	e9 d2 fc ff ff       	jmp    100007cb <copytree(char*, char*)+0xdd>
10000af9:	90                   	nop
10000afa:	83 ec 0c             	sub    esp,0xc
10000afd:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10000b00:	e8 fc ff ff ff       	call   10000b01 <copytree(char*, char*)+0x413>	10000b01: R_386_PC32	free
10000b05:	83 c4 10             	add    esp,0x10
10000b08:	83 ec 0c             	sub    esp,0xc
10000b0b:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000b0e:	e8 fc ff ff ff       	call   10000b0f <copytree(char*, char*)+0x421>	10000b0f: R_386_PC32	free
10000b13:	83 c4 10             	add    esp,0x10
10000b16:	83 ec 0c             	sub    esp,0xc
10000b19:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
10000b1c:	e8 fc ff ff ff       	call   10000b1d <copytree(char*, char*)+0x42f>	10000b1d: R_386_PC32	Directory::close()
10000b21:	83 c4 10             	add    esp,0x10
10000b24:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
10000b28:	74 18                	je     10000b42 <copytree(char*, char*)+0x454>
10000b2a:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
10000b2d:	8b 00                	mov    eax,DWORD PTR [eax]
10000b2f:	83 c0 08             	add    eax,0x8
10000b32:	8b 00                	mov    eax,DWORD PTR [eax]
10000b34:	83 ec 0c             	sub    esp,0xc
10000b37:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
10000b3a:	ff d0                	call   eax
10000b3c:	83 c4 10             	add    esp,0x10
10000b3f:	eb 01                	jmp    10000b42 <copytree(char*, char*)+0x454>
10000b41:	90                   	nop
10000b42:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
10000b45:	c9                   	leave  
10000b46:	c3                   	ret    

10000b47 <backupTree(char*, unsigned short)>:
10000b47:	55                   	push   ebp
10000b48:	89 e5                	mov    ebp,esp
10000b4a:	57                   	push   edi
10000b4b:	56                   	push   esi
10000b4c:	53                   	push   ebx
10000b4d:	81 ec 8c 12 00 00    	sub    esp,0x128c
10000b53:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000b56:	66 89 85 74 ed ff ff 	mov    WORD PTR [ebp-0x128c],ax
10000b5d:	83 ec 0c             	sub    esp,0xc
10000b60:	68 90 01 00 00       	push   0x190
10000b65:	e8 fc ff ff ff       	call   10000b66 <backupTree(char*, unsigned short)+0x1f>	10000b66: R_386_PC32	malloc
10000b6a:	83 c4 10             	add    esp,0x10
10000b6d:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
10000b70:	83 ec 04             	sub    esp,0x4
10000b73:	68 90 01 00 00       	push   0x190
10000b78:	6a 00                	push   0x0
10000b7a:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000b7d:	e8 fc ff ff ff       	call   10000b7e <backupTree(char*, unsigned short)+0x37>	10000b7e: R_386_PC32	memset
10000b82:	83 c4 10             	add    esp,0x10
10000b85:	8d 85 a8 fe ff ff    	lea    eax,[ebp-0x158]
10000b8b:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
10000b8e:	83 ec 0c             	sub    esp,0xc
10000b91:	68 14 01 00 00       	push   0x114
10000b96:	e8 fc ff ff ff       	call   10000b97 <backupTree(char*, unsigned short)+0x50>	10000b97: R_386_PC32	operator new(unsigned long)
10000b9b:	83 c4 10             	add    esp,0x10
10000b9e:	89 c3                	mov    ebx,eax
10000ba0:	b8 00 20 00 c2       	mov    eax,0xc2002000
10000ba5:	8b 00                	mov    eax,DWORD PTR [eax]
10000ba7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
10000baa:	83 ec 04             	sub    esp,0x4
10000bad:	50                   	push   eax
10000bae:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000bb1:	53                   	push   ebx
10000bb2:	e8 fc ff ff ff       	call   10000bb3 <backupTree(char*, unsigned short)+0x6c>	10000bb3: R_386_PC32	Directory::Directory(char const*, Process*)
10000bb7:	83 c4 10             	add    esp,0x10
10000bba:	89 5d d0             	mov    DWORD PTR [ebp-0x30],ebx
10000bbd:	83 ec 0c             	sub    esp,0xc
10000bc0:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10000bc3:	e8 fc ff ff ff       	call   10000bc4 <backupTree(char*, unsigned short)+0x7d>	10000bc4: R_386_PC32	Directory::open()
10000bc8:	83 c4 10             	add    esp,0x10
10000bcb:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
10000bce:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
10000bd2:	74 34                	je     10000c08 <backupTree(char*, unsigned short)+0xc1>
10000bd4:	83 ec 0c             	sub    esp,0xc
10000bd7:	68 af 8a 00 10       	push   0x10008aaf	10000bd8: R_386_32	.text
10000bdc:	e8 fc ff ff ff       	call   10000bdd <backupTree(char*, unsigned short)+0x96>	10000bdd: R_386_PC32	Dbg::kprintf(char const*, ...)
10000be1:	83 c4 10             	add    esp,0x10
10000be4:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
10000be8:	0f 84 c8 05 00 00    	je     100011b6 <backupTree(char*, unsigned short)+0x66f>
10000bee:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
10000bf1:	8b 00                	mov    eax,DWORD PTR [eax]
10000bf3:	83 c0 08             	add    eax,0x8
10000bf6:	8b 00                	mov    eax,DWORD PTR [eax]
10000bf8:	83 ec 0c             	sub    esp,0xc
10000bfb:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10000bfe:	ff d0                	call   eax
10000c00:	83 c4 10             	add    esp,0x10
10000c03:	e9 af 05 00 00       	jmp    100011b7 <backupTree(char*, unsigned short)+0x670>
10000c08:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
10000c0b:	8b 00                	mov    eax,DWORD PTR [eax]
10000c0d:	83 c0 0c             	add    eax,0xc
10000c10:	8b 00                	mov    eax,DWORD PTR [eax]
10000c12:	83 ec 0c             	sub    esp,0xc
10000c15:	8d 95 a4 fe ff ff    	lea    edx,[ebp-0x15c]
10000c1b:	52                   	push   edx
10000c1c:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
10000c1f:	6a 00                	push   0x0
10000c21:	68 10 01 00 00       	push   0x110
10000c26:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10000c29:	ff d0                	call   eax
10000c2b:	83 c4 20             	add    esp,0x20
10000c2e:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
10000c31:	83 7d c8 00          	cmp    DWORD PTR [ebp-0x38],0x0
10000c35:	0f 85 41 05 00 00    	jne    1000117c <backupTree(char*, unsigned short)+0x635>
10000c3b:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000c3e:	83 c0 10             	add    eax,0x10
10000c41:	83 ec 08             	sub    esp,0x8
10000c44:	68 a8 8a 00 10       	push   0x10008aa8	10000c45: R_386_32	.text
10000c49:	50                   	push   eax
10000c4a:	e8 fc ff ff ff       	call   10000c4b <backupTree(char*, unsigned short)+0x104>	10000c4b: R_386_PC32	strcmp
10000c4f:	83 c4 10             	add    esp,0x10
10000c52:	85 c0                	test   eax,eax
10000c54:	74 b2                	je     10000c08 <backupTree(char*, unsigned short)+0xc1>
10000c56:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000c59:	83 c0 10             	add    eax,0x10
10000c5c:	83 ec 08             	sub    esp,0x8
10000c5f:	68 aa 8a 00 10       	push   0x10008aaa	10000c60: R_386_32	.text
10000c64:	50                   	push   eax
10000c65:	e8 fc ff ff ff       	call   10000c66 <backupTree(char*, unsigned short)+0x11f>	10000c66: R_386_PC32	strcmp
10000c6a:	83 c4 10             	add    esp,0x10
10000c6d:	85 c0                	test   eax,eax
10000c6f:	74 97                	je     10000c08 <backupTree(char*, unsigned short)+0xc1>
10000c71:	83 ec 08             	sub    esp,0x8
10000c74:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000c77:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000c7a:	e8 fc ff ff ff       	call   10000c7b <backupTree(char*, unsigned short)+0x134>	10000c7b: R_386_PC32	strcpy
10000c7f:	83 c4 10             	add    esp,0x10
10000c82:	83 ec 08             	sub    esp,0x8
10000c85:	68 ad 8a 00 10       	push   0x10008aad	10000c86: R_386_32	.text
10000c8a:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000c8d:	e8 fc ff ff ff       	call   10000c8e <backupTree(char*, unsigned short)+0x147>	10000c8e: R_386_PC32	strcat
10000c92:	83 c4 10             	add    esp,0x10
10000c95:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000c98:	83 c0 10             	add    eax,0x10
10000c9b:	83 ec 08             	sub    esp,0x8
10000c9e:	50                   	push   eax
10000c9f:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000ca2:	e8 fc ff ff ff       	call   10000ca3 <backupTree(char*, unsigned short)+0x15c>	10000ca3: R_386_PC32	strcat
10000ca7:	83 c4 10             	add    esp,0x10
10000caa:	66 c7 45 e6 bc ad    	mov    WORD PTR [ebp-0x1a],0xadbc
10000cb0:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
10000cb7:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
10000cba:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10000cbd:	01 d0                	add    eax,edx
10000cbf:	83 c0 10             	add    eax,0x10
10000cc2:	8a 00                	mov    al,BYTE PTR [eax]
10000cc4:	84 c0                	test   al,al
10000cc6:	74 3c                	je     10000d04 <backupTree(char*, unsigned short)+0x1bd>
10000cc8:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
10000ccb:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10000cce:	01 d0                	add    eax,edx
10000cd0:	83 c0 10             	add    eax,0x10
10000cd3:	8a 00                	mov    al,BYTE PTR [eax]
10000cd5:	66 0f be d0          	movsx  dx,al
10000cd9:	66 8b 45 e6          	mov    ax,WORD PTR [ebp-0x1a]
10000cdd:	31 d0                	xor    eax,edx
10000cdf:	66 89 45 e6          	mov    WORD PTR [ebp-0x1a],ax
10000ce3:	0f b7 45 e6          	movzx  eax,WORD PTR [ebp-0x1a]
10000ce7:	c1 e0 03             	shl    eax,0x3
10000cea:	89 c2                	mov    edx,eax
10000cec:	0f b7 45 e6          	movzx  eax,WORD PTR [ebp-0x1a]
10000cf0:	c1 f8 0d             	sar    eax,0xd
10000cf3:	09 d0                	or     eax,edx
10000cf5:	66 89 45 e6          	mov    WORD PTR [ebp-0x1a],ax
10000cf9:	66 81 6d e6 f1 06    	sub    WORD PTR [ebp-0x1a],0x6f1
10000cff:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
10000d02:	eb b3                	jmp    10000cb7 <backupTree(char*, unsigned short)+0x170>
10000d04:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000d07:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
10000d0a:	83 e0 02             	and    eax,0x2
10000d0d:	85 c0                	test   eax,eax
10000d0f:	74 37                	je     10000d48 <backupTree(char*, unsigned short)+0x201>
10000d11:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000d14:	83 c0 10             	add    eax,0x10
10000d17:	83 ec 08             	sub    esp,0x8
10000d1a:	68 fd 8a 00 10       	push   0x10008afd	10000d1b: R_386_32	.text
10000d1f:	50                   	push   eax
10000d20:	e8 fc ff ff ff       	call   10000d21 <backupTree(char*, unsigned short)+0x1da>	10000d21: R_386_PC32	strcmp
10000d25:	83 c4 10             	add    esp,0x10
10000d28:	85 c0                	test   eax,eax
10000d2a:	0f 84 d8 fe ff ff    	je     10000c08 <backupTree(char*, unsigned short)+0xc1>
10000d30:	0f b7 45 e6          	movzx  eax,WORD PTR [ebp-0x1a]
10000d34:	83 ec 08             	sub    esp,0x8
10000d37:	50                   	push   eax
10000d38:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000d3b:	e8 fc ff ff ff       	call   10000d3c <backupTree(char*, unsigned short)+0x1f5>	10000d3c: R_386_PC32	backupTree(char*, unsigned short)
10000d40:	83 c4 10             	add    esp,0x10
10000d43:	e9 c0 fe ff ff       	jmp    10000c08 <backupTree(char*, unsigned short)+0xc1>
10000d48:	c6 85 a3 fe ff ff 00 	mov    BYTE PTR [ebp-0x15d],0x0
10000d4f:	83 ec 08             	sub    esp,0x8
10000d52:	68 04 8b 00 10       	push   0x10008b04	10000d53: R_386_32	.text
10000d57:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000d5d:	50                   	push   eax
10000d5e:	e8 fc ff ff ff       	call   10000d5f <backupTree(char*, unsigned short)+0x218>	10000d5f: R_386_PC32	strcpy
10000d63:	83 c4 10             	add    esp,0x10
10000d66:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000d69:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
10000d6c:	88 85 a2 fe ff ff    	mov    BYTE PTR [ebp-0x15e],al
10000d72:	83 ec 08             	sub    esp,0x8
10000d75:	8d 85 a2 fe ff ff    	lea    eax,[ebp-0x15e]
10000d7b:	50                   	push   eax
10000d7c:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000d82:	50                   	push   eax
10000d83:	e8 fc ff ff ff       	call   10000d84 <backupTree(char*, unsigned short)+0x23d>	10000d84: R_386_PC32	strcat
10000d88:	83 c4 10             	add    esp,0x10
10000d8b:	83 ec 04             	sub    esp,0x4
10000d8e:	6a 09                	push   0x9
10000d90:	6a 00                	push   0x0
10000d92:	8d 85 99 fe ff ff    	lea    eax,[ebp-0x167]
10000d98:	50                   	push   eax
10000d99:	e8 fc ff ff ff       	call   10000d9a <backupTree(char*, unsigned short)+0x253>	10000d9a: R_386_PC32	memset
10000d9e:	83 c4 10             	add    esp,0x10
10000da1:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000da4:	83 c0 10             	add    eax,0x10
10000da7:	83 ec 04             	sub    esp,0x4
10000daa:	6a 08                	push   0x8
10000dac:	50                   	push   eax
10000dad:	8d 85 99 fe ff ff    	lea    eax,[ebp-0x167]
10000db3:	50                   	push   eax
10000db4:	e8 fc ff ff ff       	call   10000db5 <backupTree(char*, unsigned short)+0x26e>	10000db5: R_386_PC32	strncpyxx(char*, char const*, unsigned long)
10000db9:	83 c4 10             	add    esp,0x10
10000dbc:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
10000dc3:	83 7d dc 07          	cmp    DWORD PTR [ebp-0x24],0x7
10000dc7:	0f 8f c5 00 00 00    	jg     10000e92 <backupTree(char*, unsigned short)+0x34b>
10000dcd:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000dd3:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000dd6:	01 d0                	add    eax,edx
10000dd8:	8a 00                	mov    al,BYTE PTR [eax]
10000dda:	3c 60                	cmp    al,0x60
10000ddc:	7e 30                	jle    10000e0e <backupTree(char*, unsigned short)+0x2c7>
10000dde:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000de4:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000de7:	01 d0                	add    eax,edx
10000de9:	8a 00                	mov    al,BYTE PTR [eax]
10000deb:	3c 7a                	cmp    al,0x7a
10000ded:	7f 1f                	jg     10000e0e <backupTree(char*, unsigned short)+0x2c7>
10000def:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000df5:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000df8:	01 d0                	add    eax,edx
10000dfa:	8a 00                	mov    al,BYTE PTR [eax]
10000dfc:	83 e8 20             	sub    eax,0x20
10000dff:	88 c2                	mov    dl,al
10000e01:	8d 8d 99 fe ff ff    	lea    ecx,[ebp-0x167]
10000e07:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e0a:	01 c8                	add    eax,ecx
10000e0c:	88 10                	mov    BYTE PTR [eax],dl
10000e0e:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000e14:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e17:	01 d0                	add    eax,edx
10000e19:	8a 00                	mov    al,BYTE PTR [eax]
10000e1b:	3c 59                	cmp    al,0x59
10000e1d:	75 0e                	jne    10000e2d <backupTree(char*, unsigned short)+0x2e6>
10000e1f:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000e25:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e28:	01 d0                	add    eax,edx
10000e2a:	c6 00 51             	mov    BYTE PTR [eax],0x51
10000e2d:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000e33:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e36:	01 d0                	add    eax,edx
10000e38:	8a 00                	mov    al,BYTE PTR [eax]
10000e3a:	3c 5a                	cmp    al,0x5a
10000e3c:	75 0e                	jne    10000e4c <backupTree(char*, unsigned short)+0x305>
10000e3e:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000e44:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e47:	01 d0                	add    eax,edx
10000e49:	c6 00 51             	mov    BYTE PTR [eax],0x51
10000e4c:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000e52:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e55:	01 d0                	add    eax,edx
10000e57:	8a 00                	mov    al,BYTE PTR [eax]
10000e59:	3c 20                	cmp    al,0x20
10000e5b:	75 0e                	jne    10000e6b <backupTree(char*, unsigned short)+0x324>
10000e5d:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000e63:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e66:	01 d0                	add    eax,edx
10000e68:	c6 00 59             	mov    BYTE PTR [eax],0x59
10000e6b:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000e71:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e74:	01 d0                	add    eax,edx
10000e76:	8a 00                	mov    al,BYTE PTR [eax]
10000e78:	3c 2e                	cmp    al,0x2e
10000e7a:	75 0e                	jne    10000e8a <backupTree(char*, unsigned short)+0x343>
10000e7c:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000e82:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e85:	01 d0                	add    eax,edx
10000e87:	c6 00 5a             	mov    BYTE PTR [eax],0x5a
10000e8a:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
10000e8d:	e9 31 ff ff ff       	jmp    10000dc3 <backupTree(char*, unsigned short)+0x27c>
10000e92:	83 ec 08             	sub    esp,0x8
10000e95:	8d 85 99 fe ff ff    	lea    eax,[ebp-0x167]
10000e9b:	50                   	push   eax
10000e9c:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000ea2:	50                   	push   eax
10000ea3:	e8 fc ff ff ff       	call   10000ea4 <backupTree(char*, unsigned short)+0x35d>	10000ea4: R_386_PC32	strcat
10000ea8:	83 c4 10             	add    esp,0x10
10000eab:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000eae:	83 c0 10             	add    eax,0x10
10000eb1:	83 ec 0c             	sub    esp,0xc
10000eb4:	50                   	push   eax
10000eb5:	e8 fc ff ff ff       	call   10000eb6 <backupTree(char*, unsigned short)+0x36f>	10000eb6: R_386_PC32	strlen
10000eba:	83 c4 10             	add    esp,0x10
10000ebd:	83 c0 41             	add    eax,0x41
10000ec0:	88 85 a2 fe ff ff    	mov    BYTE PTR [ebp-0x15e],al
10000ec6:	83 ec 08             	sub    esp,0x8
10000ec9:	8d 85 a2 fe ff ff    	lea    eax,[ebp-0x15e]
10000ecf:	50                   	push   eax
10000ed0:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000ed6:	50                   	push   eax
10000ed7:	e8 fc ff ff ff       	call   10000ed8 <backupTree(char*, unsigned short)+0x391>	10000ed8: R_386_PC32	strcat
10000edc:	83 c4 10             	add    esp,0x10
10000edf:	83 ec 08             	sub    esp,0x8
10000ee2:	68 a8 8a 00 10       	push   0x10008aa8	10000ee3: R_386_32	.text
10000ee7:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000eed:	50                   	push   eax
10000eee:	e8 fc ff ff ff       	call   10000eef <backupTree(char*, unsigned short)+0x3a8>	10000eef: R_386_PC32	strcat
10000ef3:	83 c4 10             	add    esp,0x10
10000ef6:	66 8b 45 e6          	mov    ax,WORD PTR [ebp-0x1a]
10000efa:	25 65 07 00 00       	and    eax,0x765
10000eff:	33 85 74 ed ff ff    	xor    eax,DWORD PTR [ebp-0x128c]
10000f05:	66 89 45 c6          	mov    WORD PTR [ebp-0x3a],ax
10000f09:	8d 85 88 fe ff ff    	lea    eax,[ebp-0x178]
10000f0f:	bb 1d 8b 00 10       	mov    ebx,0x10008b1d	10000f10: R_386_32	.text
10000f14:	ba 11 00 00 00       	mov    edx,0x11
10000f19:	89 c7                	mov    edi,eax
10000f1b:	89 de                	mov    esi,ebx
10000f1d:	89 d1                	mov    ecx,edx
10000f1f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
10000f21:	0f b7 45 c6          	movzx  eax,WORD PTR [ebp-0x3a]
10000f25:	83 e0 0f             	and    eax,0xf
10000f28:	8a 84 05 88 fe ff ff 	mov    al,BYTE PTR [ebp+eax*1-0x178]
10000f2f:	88 85 a2 fe ff ff    	mov    BYTE PTR [ebp-0x15e],al
10000f35:	83 ec 08             	sub    esp,0x8
10000f38:	8d 85 a2 fe ff ff    	lea    eax,[ebp-0x15e]
10000f3e:	50                   	push   eax
10000f3f:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000f45:	50                   	push   eax
10000f46:	e8 fc ff ff ff       	call   10000f47 <backupTree(char*, unsigned short)+0x400>	10000f47: R_386_PC32	strcat
10000f4b:	83 c4 10             	add    esp,0x10
10000f4e:	0f b7 45 c6          	movzx  eax,WORD PTR [ebp-0x3a]
10000f52:	c1 f8 04             	sar    eax,0x4
10000f55:	83 e0 0f             	and    eax,0xf
10000f58:	8a 84 05 88 fe ff ff 	mov    al,BYTE PTR [ebp+eax*1-0x178]
10000f5f:	88 85 a2 fe ff ff    	mov    BYTE PTR [ebp-0x15e],al
10000f65:	83 ec 08             	sub    esp,0x8
10000f68:	8d 85 a2 fe ff ff    	lea    eax,[ebp-0x15e]
10000f6e:	50                   	push   eax
10000f6f:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000f75:	50                   	push   eax
10000f76:	e8 fc ff ff ff       	call   10000f77 <backupTree(char*, unsigned short)+0x430>	10000f77: R_386_PC32	strcat
10000f7b:	83 c4 10             	add    esp,0x10
10000f7e:	0f b7 45 c6          	movzx  eax,WORD PTR [ebp-0x3a]
10000f82:	c1 f8 08             	sar    eax,0x8
10000f85:	83 e0 0f             	and    eax,0xf
10000f88:	8a 84 05 88 fe ff ff 	mov    al,BYTE PTR [ebp+eax*1-0x178]
10000f8f:	88 85 a2 fe ff ff    	mov    BYTE PTR [ebp-0x15e],al
10000f95:	83 ec 08             	sub    esp,0x8
10000f98:	8d 85 a2 fe ff ff    	lea    eax,[ebp-0x15e]
10000f9e:	50                   	push   eax
10000f9f:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000fa5:	50                   	push   eax
10000fa6:	e8 fc ff ff ff       	call   10000fa7 <backupTree(char*, unsigned short)+0x460>	10000fa7: R_386_PC32	strcat
10000fab:	83 c4 10             	add    esp,0x10
10000fae:	66 8b 45 c6          	mov    ax,WORD PTR [ebp-0x3a]
10000fb2:	66 c1 e8 0c          	shr    ax,0xc
10000fb6:	0f b7 c0             	movzx  eax,ax
10000fb9:	8a 84 05 88 fe ff ff 	mov    al,BYTE PTR [ebp+eax*1-0x178]
10000fc0:	88 85 a2 fe ff ff    	mov    BYTE PTR [ebp-0x15e],al
10000fc6:	83 ec 08             	sub    esp,0x8
10000fc9:	8d 85 a2 fe ff ff    	lea    eax,[ebp-0x15e]
10000fcf:	50                   	push   eax
10000fd0:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000fd6:	50                   	push   eax
10000fd7:	e8 fc ff ff ff       	call   10000fd8 <backupTree(char*, unsigned short)+0x491>	10000fd8: R_386_PC32	strcat
10000fdc:	83 c4 10             	add    esp,0x10
10000fdf:	83 ec 0c             	sub    esp,0xc
10000fe2:	68 14 01 00 00       	push   0x114
10000fe7:	e8 fc ff ff ff       	call   10000fe8 <backupTree(char*, unsigned short)+0x4a1>	10000fe8: R_386_PC32	operator new(unsigned long)
10000fec:	83 c4 10             	add    esp,0x10
10000fef:	89 c3                	mov    ebx,eax
10000ff1:	b8 00 20 00 c2       	mov    eax,0xc2002000
10000ff6:	8b 00                	mov    eax,DWORD PTR [eax]
10000ff8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
10000ffb:	83 ec 04             	sub    esp,0x4
10000ffe:	50                   	push   eax
10000fff:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10001002:	53                   	push   ebx
10001003:	e8 fc ff ff ff       	call   10001004 <backupTree(char*, unsigned short)+0x4bd>	10001004: R_386_PC32	File::File(char const*, Process*)
10001008:	83 c4 10             	add    esp,0x10
1000100b:	89 5d c0             	mov    DWORD PTR [ebp-0x40],ebx
1000100e:	83 ec 08             	sub    esp,0x8
10001011:	6a 01                	push   0x1
10001013:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
10001016:	e8 fc ff ff ff       	call   10001017 <backupTree(char*, unsigned short)+0x4d0>	10001017: R_386_PC32	File::open(FileOpenMode)
1000101b:	83 c4 10             	add    esp,0x10
1000101e:	83 7d c0 00          	cmp    DWORD PTR [ebp-0x40],0x0
10001022:	75 15                	jne    10001039 <backupTree(char*, unsigned short)+0x4f2>
10001024:	83 ec 0c             	sub    esp,0xc
10001027:	68 e4 8a 00 10       	push   0x10008ae4	10001028: R_386_32	.text
1000102c:	e8 fc ff ff ff       	call   1000102d <backupTree(char*, unsigned short)+0x4e6>	1000102d: R_386_PC32	KePanic(char const*)
10001031:	83 c4 10             	add    esp,0x10
10001034:	e9 3e 01 00 00       	jmp    10001177 <backupTree(char*, unsigned short)+0x630>
10001039:	83 7d c0 00          	cmp    DWORD PTR [ebp-0x40],0x0
1000103d:	0f 84 c5 fb ff ff    	je     10000c08 <backupTree(char*, unsigned short)+0xc1>
10001043:	83 ec 0c             	sub    esp,0xc
10001046:	68 14 01 00 00       	push   0x114
1000104b:	e8 fc ff ff ff       	call   1000104c <backupTree(char*, unsigned short)+0x505>	1000104c: R_386_PC32	operator new(unsigned long)
10001050:	83 c4 10             	add    esp,0x10
10001053:	89 c3                	mov    ebx,eax
10001055:	b8 00 20 00 c2       	mov    eax,0xc2002000
1000105a:	8b 00                	mov    eax,DWORD PTR [eax]
1000105c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
1000105f:	83 ec 04             	sub    esp,0x4
10001062:	50                   	push   eax
10001063:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10001069:	50                   	push   eax
1000106a:	53                   	push   ebx
1000106b:	e8 fc ff ff ff       	call   1000106c <backupTree(char*, unsigned short)+0x525>	1000106c: R_386_PC32	File::File(char const*, Process*)
10001070:	83 c4 10             	add    esp,0x10
10001073:	89 5d bc             	mov    DWORD PTR [ebp-0x44],ebx
10001076:	83 ec 08             	sub    esp,0x8
10001079:	6a 12                	push   0x12
1000107b:	ff 75 bc             	push   DWORD PTR [ebp-0x44]
1000107e:	e8 fc ff ff ff       	call   1000107f <backupTree(char*, unsigned short)+0x538>	1000107f: R_386_PC32	File::open(FileOpenMode)
10001083:	83 c4 10             	add    esp,0x10
10001086:	83 7d bc 00          	cmp    DWORD PTR [ebp-0x44],0x0
1000108a:	75 23                	jne    100010af <backupTree(char*, unsigned short)+0x568>
1000108c:	83 ec 0c             	sub    esp,0xc
1000108f:	68 e4 8a 00 10       	push   0x10008ae4	10001090: R_386_32	.text
10001094:	e8 fc ff ff ff       	call   10001095 <backupTree(char*, unsigned short)+0x54e>	10001095: R_386_PC32	KePanic(char const*)
10001099:	83 c4 10             	add    esp,0x10
1000109c:	83 ec 0c             	sub    esp,0xc
1000109f:	ff 75 bc             	push   DWORD PTR [ebp-0x44]
100010a2:	e8 fc ff ff ff       	call   100010a3 <backupTree(char*, unsigned short)+0x55c>	100010a3: R_386_PC32	File::close()
100010a7:	83 c4 10             	add    esp,0x10
100010aa:	e9 c8 00 00 00       	jmp    10001177 <backupTree(char*, unsigned short)+0x630>
100010af:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
100010b2:	8b 00                	mov    eax,DWORD PTR [eax]
100010b4:	83 c0 0c             	add    eax,0xc
100010b7:	8b 00                	mov    eax,DWORD PTR [eax]
100010b9:	83 ec 0c             	sub    esp,0xc
100010bc:	8d 95 84 fe ff ff    	lea    edx,[ebp-0x17c]
100010c2:	52                   	push   edx
100010c3:	8d 95 80 ee ff ff    	lea    edx,[ebp-0x1180]
100010c9:	52                   	push   edx
100010ca:	6a 00                	push   0x0
100010cc:	68 00 10 00 00       	push   0x1000
100010d1:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
100010d4:	ff d0                	call   eax
100010d6:	83 c4 20             	add    esp,0x20
100010d9:	89 45 b8             	mov    DWORD PTR [ebp-0x48],eax
100010dc:	83 7d b8 00          	cmp    DWORD PTR [ebp-0x48],0x0
100010e0:	75 3b                	jne    1000111d <backupTree(char*, unsigned short)+0x5d6>
100010e2:	8b 45 bc             	mov    eax,DWORD PTR [ebp-0x44]
100010e5:	8b 00                	mov    eax,DWORD PTR [eax]
100010e7:	83 c0 10             	add    eax,0x10
100010ea:	8b 08                	mov    ecx,DWORD PTR [eax]
100010ec:	8b 85 84 fe ff ff    	mov    eax,DWORD PTR [ebp-0x17c]
100010f2:	99                   	cdq    
100010f3:	83 ec 0c             	sub    esp,0xc
100010f6:	8d 9d 80 fe ff ff    	lea    ebx,[ebp-0x180]
100010fc:	53                   	push   ebx
100010fd:	8d 9d 80 ee ff ff    	lea    ebx,[ebp-0x1180]
10001103:	53                   	push   ebx
10001104:	52                   	push   edx
10001105:	50                   	push   eax
10001106:	ff 75 bc             	push   DWORD PTR [ebp-0x44]
10001109:	ff d1                	call   ecx
1000110b:	83 c4 20             	add    esp,0x20
1000110e:	8b 85 84 fe ff ff    	mov    eax,DWORD PTR [ebp-0x17c]
10001114:	3d 00 10 00 00       	cmp    eax,0x1000
10001119:	75 05                	jne    10001120 <backupTree(char*, unsigned short)+0x5d9>
1000111b:	eb 92                	jmp    100010af <backupTree(char*, unsigned short)+0x568>
1000111d:	90                   	nop
1000111e:	eb 01                	jmp    10001121 <backupTree(char*, unsigned short)+0x5da>
10001120:	90                   	nop
10001121:	83 ec 0c             	sub    esp,0xc
10001124:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
10001127:	e8 fc ff ff ff       	call   10001128 <backupTree(char*, unsigned short)+0x5e1>	10001128: R_386_PC32	File::close()
1000112c:	83 c4 10             	add    esp,0x10
1000112f:	83 ec 0c             	sub    esp,0xc
10001132:	ff 75 bc             	push   DWORD PTR [ebp-0x44]
10001135:	e8 fc ff ff ff       	call   10001136 <backupTree(char*, unsigned short)+0x5ef>	10001136: R_386_PC32	File::close()
1000113a:	83 c4 10             	add    esp,0x10
1000113d:	83 7d c0 00          	cmp    DWORD PTR [ebp-0x40],0x0
10001141:	74 15                	je     10001158 <backupTree(char*, unsigned short)+0x611>
10001143:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
10001146:	8b 00                	mov    eax,DWORD PTR [eax]
10001148:	83 c0 08             	add    eax,0x8
1000114b:	8b 00                	mov    eax,DWORD PTR [eax]
1000114d:	83 ec 0c             	sub    esp,0xc
10001150:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
10001153:	ff d0                	call   eax
10001155:	83 c4 10             	add    esp,0x10
10001158:	83 7d bc 00          	cmp    DWORD PTR [ebp-0x44],0x0
1000115c:	0f 84 a6 fa ff ff    	je     10000c08 <backupTree(char*, unsigned short)+0xc1>
10001162:	8b 45 bc             	mov    eax,DWORD PTR [ebp-0x44]
10001165:	8b 00                	mov    eax,DWORD PTR [eax]
10001167:	83 c0 08             	add    eax,0x8
1000116a:	8b 00                	mov    eax,DWORD PTR [eax]
1000116c:	83 ec 0c             	sub    esp,0xc
1000116f:	ff 75 bc             	push   DWORD PTR [ebp-0x44]
10001172:	ff d0                	call   eax
10001174:	83 c4 10             	add    esp,0x10
10001177:	e9 8c fa ff ff       	jmp    10000c08 <backupTree(char*, unsigned short)+0xc1>
1000117c:	90                   	nop
1000117d:	83 ec 0c             	sub    esp,0xc
10001180:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10001183:	e8 fc ff ff ff       	call   10001184 <backupTree(char*, unsigned short)+0x63d>	10001184: R_386_PC32	free
10001188:	83 c4 10             	add    esp,0x10
1000118b:	83 ec 0c             	sub    esp,0xc
1000118e:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10001191:	e8 fc ff ff ff       	call   10001192 <backupTree(char*, unsigned short)+0x64b>	10001192: R_386_PC32	Directory::close()
10001196:	83 c4 10             	add    esp,0x10
10001199:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
1000119d:	74 18                	je     100011b7 <backupTree(char*, unsigned short)+0x670>
1000119f:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
100011a2:	8b 00                	mov    eax,DWORD PTR [eax]
100011a4:	83 c0 08             	add    eax,0x8
100011a7:	8b 00                	mov    eax,DWORD PTR [eax]
100011a9:	83 ec 0c             	sub    esp,0xc
100011ac:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
100011af:	ff d0                	call   eax
100011b1:	83 c4 10             	add    esp,0x10
100011b4:	eb 01                	jmp    100011b7 <backupTree(char*, unsigned short)+0x670>
100011b6:	90                   	nop
100011b7:	8d 65 f4             	lea    esp,[ebp-0xc]
100011ba:	5b                   	pop    ebx
100011bb:	5e                   	pop    esi
100011bc:	5f                   	pop    edi
100011bd:	5d                   	pop    ebp
100011be:	c3                   	ret    

100011bf <createUser(char const*)>:
100011bf:	55                   	push   ebp
100011c0:	89 e5                	mov    ebp,esp
100011c2:	81 ec 08 01 00 00    	sub    esp,0x108
100011c8:	68 2e 8b 00 10       	push   0x10008b2e	100011c9: R_386_32	.text
100011cd:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100011d3:	50                   	push   eax
100011d4:	e8 fc ff ff ff       	call   100011d5 <createUser(char const*)+0x16>	100011d5: R_386_PC32	strcpy
100011d9:	83 c4 08             	add    esp,0x8
100011dc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100011df:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100011e5:	50                   	push   eax
100011e6:	e8 fc ff ff ff       	call   100011e7 <createUser(char const*)+0x28>	100011e7: R_386_PC32	strcat
100011eb:	83 c4 08             	add    esp,0x8
100011ee:	83 ec 08             	sub    esp,0x8
100011f1:	68 c0 01 00 00       	push   0x1c0
100011f6:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100011fc:	50                   	push   eax
100011fd:	e8 fc ff ff ff       	call   100011fe <createUser(char const*)+0x3f>	100011fe: R_386_PC32	mkdir(char const*, int)
10001202:	83 c4 10             	add    esp,0x10
10001205:	83 ec 08             	sub    esp,0x8
10001208:	68 38 8b 00 10       	push   0x10008b38	10001209: R_386_32	.text
1000120d:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001213:	50                   	push   eax
10001214:	e8 fc ff ff ff       	call   10001215 <createUser(char const*)+0x56>	10001215: R_386_PC32	strcat
10001219:	83 c4 10             	add    esp,0x10
1000121c:	83 ec 08             	sub    esp,0x8
1000121f:	68 c0 01 00 00       	push   0x1c0
10001224:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000122a:	50                   	push   eax
1000122b:	e8 fc ff ff ff       	call   1000122c <createUser(char const*)+0x6d>	1000122c: R_386_PC32	mkdir(char const*, int)
10001230:	83 c4 10             	add    esp,0x10
10001233:	83 ec 08             	sub    esp,0x8
10001236:	68 2e 8b 00 10       	push   0x10008b2e	10001237: R_386_32	.text
1000123b:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001241:	50                   	push   eax
10001242:	e8 fc ff ff ff       	call   10001243 <createUser(char const*)+0x84>	10001243: R_386_PC32	strcpy
10001247:	83 c4 10             	add    esp,0x10
1000124a:	83 ec 08             	sub    esp,0x8
1000124d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001250:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001256:	50                   	push   eax
10001257:	e8 fc ff ff ff       	call   10001258 <createUser(char const*)+0x99>	10001258: R_386_PC32	strcat
1000125c:	83 c4 10             	add    esp,0x10
1000125f:	83 ec 08             	sub    esp,0x8
10001262:	68 41 8b 00 10       	push   0x10008b41	10001263: R_386_32	.text
10001267:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000126d:	50                   	push   eax
1000126e:	e8 fc ff ff ff       	call   1000126f <createUser(char const*)+0xb0>	1000126f: R_386_PC32	strcat
10001273:	83 c4 10             	add    esp,0x10
10001276:	83 ec 08             	sub    esp,0x8
10001279:	68 c0 01 00 00       	push   0x1c0
1000127e:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001284:	50                   	push   eax
10001285:	e8 fc ff ff ff       	call   10001286 <createUser(char const*)+0xc7>	10001286: R_386_PC32	mkdir(char const*, int)
1000128a:	83 c4 10             	add    esp,0x10
1000128d:	83 ec 08             	sub    esp,0x8
10001290:	68 2e 8b 00 10       	push   0x10008b2e	10001291: R_386_32	.text
10001295:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000129b:	50                   	push   eax
1000129c:	e8 fc ff ff ff       	call   1000129d <createUser(char const*)+0xde>	1000129d: R_386_PC32	strcpy
100012a1:	83 c4 10             	add    esp,0x10
100012a4:	83 ec 08             	sub    esp,0x8
100012a7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100012aa:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100012b0:	50                   	push   eax
100012b1:	e8 fc ff ff ff       	call   100012b2 <createUser(char const*)+0xf3>	100012b2: R_386_PC32	strcat
100012b6:	83 c4 10             	add    esp,0x10
100012b9:	83 ec 08             	sub    esp,0x8
100012bc:	68 4c 8b 00 10       	push   0x10008b4c	100012bd: R_386_32	.text
100012c1:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100012c7:	50                   	push   eax
100012c8:	e8 fc ff ff ff       	call   100012c9 <createUser(char const*)+0x10a>	100012c9: R_386_PC32	strcat
100012cd:	83 c4 10             	add    esp,0x10
100012d0:	83 ec 08             	sub    esp,0x8
100012d3:	68 c0 01 00 00       	push   0x1c0
100012d8:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100012de:	50                   	push   eax
100012df:	e8 fc ff ff ff       	call   100012e0 <createUser(char const*)+0x121>	100012e0: R_386_PC32	mkdir(char const*, int)
100012e4:	83 c4 10             	add    esp,0x10
100012e7:	83 ec 08             	sub    esp,0x8
100012ea:	68 2e 8b 00 10       	push   0x10008b2e	100012eb: R_386_32	.text
100012ef:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100012f5:	50                   	push   eax
100012f6:	e8 fc ff ff ff       	call   100012f7 <createUser(char const*)+0x138>	100012f7: R_386_PC32	strcpy
100012fb:	83 c4 10             	add    esp,0x10
100012fe:	83 ec 08             	sub    esp,0x8
10001301:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001304:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000130a:	50                   	push   eax
1000130b:	e8 fc ff ff ff       	call   1000130c <createUser(char const*)+0x14d>	1000130c: R_386_PC32	strcat
10001310:	83 c4 10             	add    esp,0x10
10001313:	83 ec 08             	sub    esp,0x8
10001316:	68 57 8b 00 10       	push   0x10008b57	10001317: R_386_32	.text
1000131b:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001321:	50                   	push   eax
10001322:	e8 fc ff ff ff       	call   10001323 <createUser(char const*)+0x164>	10001323: R_386_PC32	strcat
10001327:	83 c4 10             	add    esp,0x10
1000132a:	83 ec 08             	sub    esp,0x8
1000132d:	68 c0 01 00 00       	push   0x1c0
10001332:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001338:	50                   	push   eax
10001339:	e8 fc ff ff ff       	call   1000133a <createUser(char const*)+0x17b>	1000133a: R_386_PC32	mkdir(char const*, int)
1000133e:	83 c4 10             	add    esp,0x10
10001341:	83 ec 08             	sub    esp,0x8
10001344:	68 2e 8b 00 10       	push   0x10008b2e	10001345: R_386_32	.text
10001349:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000134f:	50                   	push   eax
10001350:	e8 fc ff ff ff       	call   10001351 <createUser(char const*)+0x192>	10001351: R_386_PC32	strcpy
10001355:	83 c4 10             	add    esp,0x10
10001358:	83 ec 08             	sub    esp,0x8
1000135b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000135e:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001364:	50                   	push   eax
10001365:	e8 fc ff ff ff       	call   10001366 <createUser(char const*)+0x1a7>	10001366: R_386_PC32	strcat
1000136a:	83 c4 10             	add    esp,0x10
1000136d:	83 ec 08             	sub    esp,0x8
10001370:	68 5f 8b 00 10       	push   0x10008b5f	10001371: R_386_32	.text
10001375:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000137b:	50                   	push   eax
1000137c:	e8 fc ff ff ff       	call   1000137d <createUser(char const*)+0x1be>	1000137d: R_386_PC32	strcat
10001381:	83 c4 10             	add    esp,0x10
10001384:	83 ec 08             	sub    esp,0x8
10001387:	68 c0 01 00 00       	push   0x1c0
1000138c:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001392:	50                   	push   eax
10001393:	e8 fc ff ff ff       	call   10001394 <createUser(char const*)+0x1d5>	10001394: R_386_PC32	mkdir(char const*, int)
10001398:	83 c4 10             	add    esp,0x10
1000139b:	83 ec 08             	sub    esp,0x8
1000139e:	68 2e 8b 00 10       	push   0x10008b2e	1000139f: R_386_32	.text
100013a3:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100013a9:	50                   	push   eax
100013aa:	e8 fc ff ff ff       	call   100013ab <createUser(char const*)+0x1ec>	100013ab: R_386_PC32	strcpy
100013af:	83 c4 10             	add    esp,0x10
100013b2:	83 ec 08             	sub    esp,0x8
100013b5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100013b8:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100013be:	50                   	push   eax
100013bf:	e8 fc ff ff ff       	call   100013c0 <createUser(char const*)+0x201>	100013c0: R_386_PC32	strcat
100013c4:	83 c4 10             	add    esp,0x10
100013c7:	83 ec 08             	sub    esp,0x8
100013ca:	68 6a 8b 00 10       	push   0x10008b6a	100013cb: R_386_32	.text
100013cf:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100013d5:	50                   	push   eax
100013d6:	e8 fc ff ff ff       	call   100013d7 <createUser(char const*)+0x218>	100013d7: R_386_PC32	strcat
100013db:	83 c4 10             	add    esp,0x10
100013de:	83 ec 08             	sub    esp,0x8
100013e1:	68 c0 01 00 00       	push   0x1c0
100013e6:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100013ec:	50                   	push   eax
100013ed:	e8 fc ff ff ff       	call   100013ee <createUser(char const*)+0x22f>	100013ee: R_386_PC32	mkdir(char const*, int)
100013f2:	83 c4 10             	add    esp,0x10
100013f5:	83 ec 08             	sub    esp,0x8
100013f8:	68 2e 8b 00 10       	push   0x10008b2e	100013f9: R_386_32	.text
100013fd:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001403:	50                   	push   eax
10001404:	e8 fc ff ff ff       	call   10001405 <createUser(char const*)+0x246>	10001405: R_386_PC32	strcpy
10001409:	83 c4 10             	add    esp,0x10
1000140c:	83 ec 08             	sub    esp,0x8
1000140f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001412:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001418:	50                   	push   eax
10001419:	e8 fc ff ff ff       	call   1000141a <createUser(char const*)+0x25b>	1000141a: R_386_PC32	strcat
1000141e:	83 c4 10             	add    esp,0x10
10001421:	83 ec 08             	sub    esp,0x8
10001424:	68 71 8b 00 10       	push   0x10008b71	10001425: R_386_32	.text
10001429:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000142f:	50                   	push   eax
10001430:	e8 fc ff ff ff       	call   10001431 <createUser(char const*)+0x272>	10001431: R_386_PC32	strcat
10001435:	83 c4 10             	add    esp,0x10
10001438:	83 ec 08             	sub    esp,0x8
1000143b:	68 c0 01 00 00       	push   0x1c0
10001440:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001446:	50                   	push   eax
10001447:	e8 fc ff ff ff       	call   10001448 <createUser(char const*)+0x289>	10001448: R_386_PC32	mkdir(char const*, int)
1000144c:	83 c4 10             	add    esp,0x10
1000144f:	83 ec 08             	sub    esp,0x8
10001452:	68 79 8b 00 10       	push   0x10008b79	10001453: R_386_32	.text
10001457:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000145d:	50                   	push   eax
1000145e:	e8 fc ff ff ff       	call   1000145f <createUser(char const*)+0x2a0>	1000145f: R_386_PC32	strcpy
10001463:	83 c4 10             	add    esp,0x10
10001466:	83 ec 08             	sub    esp,0x8
10001469:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000146c:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001472:	50                   	push   eax
10001473:	e8 fc ff ff ff       	call   10001474 <createUser(char const*)+0x2b5>	10001474: R_386_PC32	strcat
10001478:	83 c4 10             	add    esp,0x10
1000147b:	83 ec 08             	sub    esp,0x8
1000147e:	68 c0 01 00 00       	push   0x1c0
10001483:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001489:	50                   	push   eax
1000148a:	e8 fc ff ff ff       	call   1000148b <createUser(char const*)+0x2cc>	1000148b: R_386_PC32	mkdir(char const*, int)
1000148f:	83 c4 10             	add    esp,0x10
10001492:	83 ec 08             	sub    esp,0x8
10001495:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000149b:	50                   	push   eax
1000149c:	68 94 8b 00 10       	push   0x10008b94	1000149d: R_386_32	.text
100014a1:	e8 fc ff ff ff       	call   100014a2 <createUser(char const*)+0x2e3>	100014a2: R_386_PC32	copytree(char*, char*)
100014a6:	83 c4 10             	add    esp,0x10
100014a9:	90                   	nop
100014aa:	c9                   	leave  
100014ab:	c3                   	ret    

100014ac <drawBootScreen()>:
100014ac:	55                   	push   ebp
100014ad:	89 e5                	mov    ebp,esp
100014af:	83 ec 18             	sub    esp,0x18
100014b2:	a1 00 00 00 00       	mov    eax,ds:0x0	100014b3: R_386_32	term
100014b7:	83 ec 08             	sub    esp,0x8
100014ba:	6a 0b                	push   0xb
100014bc:	50                   	push   eax
100014bd:	e8 fc ff ff ff       	call   100014be <drawBootScreen()+0x12>	100014be: R_386_PC32	VgaText::setDefaultBgColour(VgaColour)
100014c2:	83 c4 10             	add    esp,0x10
100014c5:	a1 00 00 00 00       	mov    eax,ds:0x0	100014c6: R_386_32	term
100014ca:	83 ec 08             	sub    esp,0x8
100014cd:	6a 00                	push   0x0
100014cf:	50                   	push   eax
100014d0:	e8 fc ff ff ff       	call   100014d1 <drawBootScreen()+0x25>	100014d1: R_386_PC32	VgaText::setDefaultFgColour(VgaColour)
100014d5:	83 c4 10             	add    esp,0x10
100014d8:	a1 00 00 00 00       	mov    eax,ds:0x0	100014d9: R_386_32	term
100014dd:	83 ec 0c             	sub    esp,0xc
100014e0:	50                   	push   eax
100014e1:	e8 fc ff ff ff       	call   100014e2 <drawBootScreen()+0x36>	100014e2: R_386_PC32	VgaText::clearScreen()
100014e6:	83 c4 10             	add    esp,0x10
100014e9:	a1 00 00 00 00       	mov    eax,ds:0x0	100014ea: R_386_32	term
100014ee:	83 ec 08             	sub    esp,0x8
100014f1:	68 b3 8b 00 10       	push   0x10008bb3	100014f2: R_386_32	.text
100014f6:	50                   	push   eax
100014f7:	e8 fc ff ff ff       	call   100014f8 <drawBootScreen()+0x4c>	100014f8: R_386_PC32	VgaText::setTitle(char*)
100014fc:	83 c4 10             	add    esp,0x10
100014ff:	a1 00 00 00 00       	mov    eax,ds:0x0	10001500: R_386_32	term
10001504:	83 ec 08             	sub    esp,0x8
10001507:	6a 00                	push   0x0
10001509:	50                   	push   eax
1000150a:	e8 fc ff ff ff       	call   1000150b <drawBootScreen()+0x5f>	1000150b: R_386_PC32	VgaText::setTitleColour(VgaColour)
1000150f:	83 c4 10             	add    esp,0x10
10001512:	a1 00 00 00 00       	mov    eax,ds:0x0	10001513: R_386_32	term
10001517:	83 ec 08             	sub    esp,0x8
1000151a:	6a 00                	push   0x0
1000151c:	50                   	push   eax
1000151d:	e8 fc ff ff ff       	call   1000151e <drawBootScreen()+0x72>	1000151e: R_386_PC32	VgaText::setTitleTextColour(VgaColour)
10001522:	83 c4 10             	add    esp,0x10
10001525:	a1 00 00 00 00       	mov    eax,ds:0x0	10001526: R_386_32	term
1000152a:	83 ec 04             	sub    esp,0x4
1000152d:	6a 00                	push   0x0
1000152f:	6a 00                	push   0x0
10001531:	50                   	push   eax
10001532:	e8 fc ff ff ff       	call   10001533 <drawBootScreen()+0x87>	10001533: R_386_PC32	VgaText::setCursor(int, int)
10001537:	83 c4 10             	add    esp,0x10
1000153a:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
10001541:	83 7d f4 4f          	cmp    DWORD PTR [ebp-0xc],0x4f
10001545:	7f 19                	jg     10001560 <drawBootScreen()+0xb4>
10001547:	a1 00 00 00 00       	mov    eax,ds:0x0	10001548: R_386_32	term
1000154c:	6a 00                	push   0x0
1000154e:	6a 00                	push   0x0
10001550:	6a 20                	push   0x20
10001552:	50                   	push   eax
10001553:	e8 fc ff ff ff       	call   10001554 <drawBootScreen()+0xa8>	10001554: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
10001558:	83 c4 10             	add    esp,0x10
1000155b:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
1000155e:	eb e1                	jmp    10001541 <drawBootScreen()+0x95>
10001560:	a0 00 00 00 00       	mov    al,ds:0x0	10001561: R_386_32	showSidebar
10001565:	84 c0                	test   al,al
10001567:	0f 84 91 00 00 00    	je     100015fe <drawBootScreen()+0x152>
1000156d:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
10001574:	83 7d f0 18          	cmp    DWORD PTR [ebp-0x10],0x18
10001578:	7f 41                	jg     100015bb <drawBootScreen()+0x10f>
1000157a:	a1 00 00 00 00       	mov    eax,ds:0x0	1000157b: R_386_32	term
1000157f:	83 ec 04             	sub    esp,0x4
10001582:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10001585:	6a 00                	push   0x0
10001587:	50                   	push   eax
10001588:	e8 fc ff ff ff       	call   10001589 <drawBootScreen()+0xdd>	10001589: R_386_PC32	VgaText::setCursor(int, int)
1000158d:	83 c4 10             	add    esp,0x10
10001590:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
10001597:	83 7d ec 0f          	cmp    DWORD PTR [ebp-0x14],0xf
1000159b:	7f 19                	jg     100015b6 <drawBootScreen()+0x10a>
1000159d:	a1 00 00 00 00       	mov    eax,ds:0x0	1000159e: R_386_32	term
100015a2:	6a 00                	push   0x0
100015a4:	6a 00                	push   0x0
100015a6:	6a 20                	push   0x20
100015a8:	50                   	push   eax
100015a9:	e8 fc ff ff ff       	call   100015aa <drawBootScreen()+0xfe>	100015aa: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
100015ae:	83 c4 10             	add    esp,0x10
100015b1:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
100015b4:	eb e1                	jmp    10001597 <drawBootScreen()+0xeb>
100015b6:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
100015b9:	eb b9                	jmp    10001574 <drawBootScreen()+0xc8>
100015bb:	a1 00 00 00 00       	mov    eax,ds:0x0	100015bc: R_386_32	term
100015c0:	83 ec 04             	sub    esp,0x4
100015c3:	6a 01                	push   0x1
100015c5:	6a 01                	push   0x1
100015c7:	50                   	push   eax
100015c8:	e8 fc ff ff ff       	call   100015c9 <drawBootScreen()+0x11d>	100015c9: R_386_PC32	VgaText::setCursor(int, int)
100015cd:	83 c4 10             	add    esp,0x10
100015d0:	a1 00 00 00 00       	mov    eax,ds:0x0	100015d1: R_386_32	term
100015d5:	6a 00                	push   0x0
100015d7:	6a 0f                	push   0xf
100015d9:	68 b4 8b 00 10       	push   0x10008bb4	100015da: R_386_32	.text
100015de:	50                   	push   eax
100015df:	e8 fc ff ff ff       	call   100015e0 <drawBootScreen()+0x134>	100015e0: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
100015e4:	83 c4 10             	add    esp,0x10
100015e7:	a1 00 00 00 00       	mov    eax,ds:0x0	100015e8: R_386_32	term
100015ec:	6a 00                	push   0x0
100015ee:	6a 0e                	push   0xe
100015f0:	68 37 8c 00 10       	push   0x10008c37	100015f1: R_386_32	.text
100015f5:	50                   	push   eax
100015f6:	e8 fc ff ff ff       	call   100015f7 <drawBootScreen()+0x14b>	100015f7: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
100015fb:	83 c4 10             	add    esp,0x10
100015fe:	a1 00 00 00 00       	mov    eax,ds:0x0	100015ff: R_386_32	term
10001603:	83 ec 08             	sub    esp,0x8
10001606:	6a 0f                	push   0xf
10001608:	50                   	push   eax
10001609:	e8 fc ff ff ff       	call   1000160a <drawBootScreen()+0x15e>	1000160a: R_386_PC32	VgaText::setDefaultBgColour(VgaColour)
1000160e:	83 c4 10             	add    esp,0x10
10001611:	a1 00 00 00 00       	mov    eax,ds:0x0	10001612: R_386_32	term
10001616:	83 ec 08             	sub    esp,0x8
10001619:	6a 00                	push   0x0
1000161b:	50                   	push   eax
1000161c:	e8 fc ff ff ff       	call   1000161d <drawBootScreen()+0x171>	1000161d: R_386_PC32	VgaText::setDefaultFgColour(VgaColour)
10001621:	83 c4 10             	add    esp,0x10
10001624:	90                   	nop
10001625:	c9                   	leave  
10001626:	c3                   	ret    

10001627 <drawBasicWindowX(int, int, int, int, char const*, bool)>:
10001627:	55                   	push   ebp
10001628:	89 e5                	mov    ebp,esp
1000162a:	53                   	push   ebx
1000162b:	83 ec 34             	sub    esp,0x34
1000162e:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
10001631:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
10001634:	ff 45 0c             	inc    DWORD PTR [ebp+0xc]
10001637:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
1000163e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10001641:	3b 45 14             	cmp    eax,DWORD PTR [ebp+0x14]
10001644:	7d 6c                	jge    100016b2 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x8b>
10001646:	a1 00 00 00 00       	mov    eax,ds:0x0	10001647: R_386_32	term
1000164b:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
1000164e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001651:	01 ca                	add    edx,ecx
10001653:	83 ec 04             	sub    esp,0x4
10001656:	52                   	push   edx
10001657:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000165a:	50                   	push   eax
1000165b:	e8 fc ff ff ff       	call   1000165c <drawBasicWindowX(int, int, int, int, char const*, bool)+0x35>	1000165c: R_386_PC32	VgaText::setCursor(int, int)
10001660:	83 c4 10             	add    esp,0x10
10001663:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
1000166a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
1000166d:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
10001670:	7d 3b                	jge    100016ad <drawBasicWindowX(int, int, int, int, char const*, bool)+0x86>
10001672:	a1 00 00 00 00       	mov    eax,ds:0x0	10001673: R_386_32	term
10001677:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
1000167b:	74 07                	je     10001684 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x5d>
1000167d:	b9 07 00 00 00       	mov    ecx,0x7
10001682:	eb 05                	jmp    10001689 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x62>
10001684:	b9 0f 00 00 00       	mov    ecx,0xf
10001689:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
1000168d:	74 07                	je     10001696 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x6f>
1000168f:	ba 07 00 00 00       	mov    edx,0x7
10001694:	eb 05                	jmp    1000169b <drawBasicWindowX(int, int, int, int, char const*, bool)+0x74>
10001696:	ba 0f 00 00 00       	mov    edx,0xf
1000169b:	51                   	push   ecx
1000169c:	52                   	push   edx
1000169d:	6a 20                	push   0x20
1000169f:	50                   	push   eax
100016a0:	e8 fc ff ff ff       	call   100016a1 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x7a>	100016a1: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
100016a5:	83 c4 10             	add    esp,0x10
100016a8:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
100016ab:	eb bd                	jmp    1000166a <drawBasicWindowX(int, int, int, int, char const*, bool)+0x43>
100016ad:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
100016b0:	eb 8c                	jmp    1000163e <drawBasicWindowX(int, int, int, int, char const*, bool)+0x17>
100016b2:	a1 00 00 00 00       	mov    eax,ds:0x0	100016b3: R_386_32	term
100016b7:	83 ec 04             	sub    esp,0x4
100016ba:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
100016bd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100016c0:	50                   	push   eax
100016c1:	e8 fc ff ff ff       	call   100016c2 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x9b>	100016c2: R_386_PC32	VgaText::setCursor(int, int)
100016c6:	83 c4 10             	add    esp,0x10
100016c9:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
100016d0:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
100016d3:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
100016d6:	7d 19                	jge    100016f1 <drawBasicWindowX(int, int, int, int, char const*, bool)+0xca>
100016d8:	a1 00 00 00 00       	mov    eax,ds:0x0	100016d9: R_386_32	term
100016dd:	6a 01                	push   0x1
100016df:	6a 01                	push   0x1
100016e1:	6a 20                	push   0x20
100016e3:	50                   	push   eax
100016e4:	e8 fc ff ff ff       	call   100016e5 <drawBasicWindowX(int, int, int, int, char const*, bool)+0xbe>	100016e5: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
100016e9:	83 c4 10             	add    esp,0x10
100016ec:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
100016ef:	eb df                	jmp    100016d0 <drawBasicWindowX(int, int, int, int, char const*, bool)+0xa9>
100016f1:	a1 00 00 00 00       	mov    eax,ds:0x0	100016f2: R_386_32	term
100016f6:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
100016f9:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
100016fc:	01 d1                	add    ecx,edx
100016fe:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10001701:	42                   	inc    edx
10001702:	83 ec 04             	sub    esp,0x4
10001705:	51                   	push   ecx
10001706:	52                   	push   edx
10001707:	50                   	push   eax
10001708:	e8 fc ff ff ff       	call   10001709 <drawBasicWindowX(int, int, int, int, char const*, bool)+0xe2>	10001709: R_386_PC32	VgaText::setCursor(int, int)
1000170d:	83 c4 10             	add    esp,0x10
10001710:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
10001717:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
1000171a:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
1000171d:	7d 19                	jge    10001738 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x111>
1000171f:	a1 00 00 00 00       	mov    eax,ds:0x0	10001720: R_386_32	term
10001724:	6a 03                	push   0x3
10001726:	6a 03                	push   0x3
10001728:	6a 20                	push   0x20
1000172a:	50                   	push   eax
1000172b:	e8 fc ff ff ff       	call   1000172c <drawBasicWindowX(int, int, int, int, char const*, bool)+0x105>	1000172c: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
10001730:	83 c4 10             	add    esp,0x10
10001733:	ff 45 e8             	inc    DWORD PTR [ebp-0x18]
10001736:	eb df                	jmp    10001717 <drawBasicWindowX(int, int, int, int, char const*, bool)+0xf0>
10001738:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
1000173b:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
1000173e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10001741:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
10001744:	01 d0                	add    eax,edx
10001746:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
10001749:	0f 8d 89 00 00 00    	jge    100017d8 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x1b1>
1000174f:	a1 00 00 00 00       	mov    eax,ds:0x0	10001750: R_386_32	term
10001754:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10001757:	8d 4a 01             	lea    ecx,[edx+0x1]
1000175a:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
1000175d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10001760:	01 da                	add    edx,ebx
10001762:	83 ec 04             	sub    esp,0x4
10001765:	51                   	push   ecx
10001766:	52                   	push   edx
10001767:	50                   	push   eax
10001768:	e8 fc ff ff ff       	call   10001769 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x142>	10001769: R_386_PC32	VgaText::setCursor(int, int)
1000176d:	83 c4 10             	add    esp,0x10
10001770:	a1 00 00 00 00       	mov    eax,ds:0x0	10001771: R_386_32	term
10001775:	6a 03                	push   0x3
10001777:	6a 03                	push   0x3
10001779:	6a 20                	push   0x20
1000177b:	50                   	push   eax
1000177c:	e8 fc ff ff ff       	call   1000177d <drawBasicWindowX(int, int, int, int, char const*, bool)+0x156>	1000177d: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
10001781:	83 c4 10             	add    esp,0x10
10001784:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10001787:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
1000178a:	01 d0                	add    eax,edx
1000178c:	48                   	dec    eax
1000178d:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
10001790:	74 3e                	je     100017d0 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x1a9>
10001792:	a1 00 00 00 00       	mov    eax,ds:0x0	10001793: R_386_32	term
10001797:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
1000179a:	42                   	inc    edx
1000179b:	83 ec 04             	sub    esp,0x4
1000179e:	52                   	push   edx
1000179f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100017a2:	50                   	push   eax
100017a3:	e8 fc ff ff ff       	call   100017a4 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x17d>	100017a4: R_386_PC32	VgaText::setCursor(int, int)
100017a8:	83 c4 10             	add    esp,0x10
100017ab:	a1 00 00 00 00       	mov    eax,ds:0x0	100017ac: R_386_32	term
100017b0:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
100017b4:	74 07                	je     100017bd <drawBasicWindowX(int, int, int, int, char const*, bool)+0x196>
100017b6:	ba 07 00 00 00       	mov    edx,0x7
100017bb:	eb 05                	jmp    100017c2 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x19b>
100017bd:	ba 0f 00 00 00       	mov    edx,0xf
100017c2:	52                   	push   edx
100017c3:	6a 00                	push   0x0
100017c5:	6a dd                	push   0xffffffdd
100017c7:	50                   	push   eax
100017c8:	e8 fc ff ff ff       	call   100017c9 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x1a2>	100017c9: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
100017cd:	83 c4 10             	add    esp,0x10
100017d0:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
100017d3:	e9 66 ff ff ff       	jmp    1000173e <drawBasicWindowX(int, int, int, int, char const*, bool)+0x117>
100017d8:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
100017db:	83 ec 0c             	sub    esp,0xc
100017de:	ff 75 18             	push   DWORD PTR [ebp+0x18]
100017e1:	e8 fc ff ff ff       	call   100017e2 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x1bb>	100017e2: R_386_PC32	strlen
100017e6:	83 c4 10             	add    esp,0x10
100017e9:	29 c3                	sub    ebx,eax
100017eb:	89 d8                	mov    eax,ebx
100017ed:	d1 e8                	shr    eax,1
100017ef:	48                   	dec    eax
100017f0:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
100017f3:	a1 00 00 00 00       	mov    eax,ds:0x0	100017f4: R_386_32	term
100017f8:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
100017fb:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
100017fe:	01 ca                	add    edx,ecx
10001800:	83 ec 04             	sub    esp,0x4
10001803:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10001806:	52                   	push   edx
10001807:	50                   	push   eax
10001808:	e8 fc ff ff ff       	call   10001809 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x1e2>	10001809: R_386_PC32	VgaText::setCursor(int, int)
1000180d:	83 c4 10             	add    esp,0x10
10001810:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
10001817:	83 ec 0c             	sub    esp,0xc
1000181a:	ff 75 18             	push   DWORD PTR [ebp+0x18]
1000181d:	e8 fc ff ff ff       	call   1000181e <drawBasicWindowX(int, int, int, int, char const*, bool)+0x1f7>	1000181e: R_386_PC32	strlen
10001822:	83 c4 10             	add    esp,0x10
10001825:	89 c2                	mov    edx,eax
10001827:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
1000182a:	39 c2                	cmp    edx,eax
1000182c:	76 25                	jbe    10001853 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x22c>
1000182e:	a1 00 00 00 00       	mov    eax,ds:0x0	1000182f: R_386_32	term
10001833:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
10001836:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
10001839:	01 ca                	add    edx,ecx
1000183b:	8a 12                	mov    dl,BYTE PTR [edx]
1000183d:	0f be d2             	movsx  edx,dl
10001840:	6a 01                	push   0x1
10001842:	6a 0f                	push   0xf
10001844:	52                   	push   edx
10001845:	50                   	push   eax
10001846:	e8 fc ff ff ff       	call   10001847 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x220>	10001847: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
1000184b:	83 c4 10             	add    esp,0x10
1000184e:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
10001851:	eb c4                	jmp    10001817 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x1f0>
10001853:	90                   	nop
10001854:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
10001857:	c9                   	leave  
10001858:	c3                   	ret    

10001859 <drawBasicWindow(int, int, int, int, char const*)>:
10001859:	55                   	push   ebp
1000185a:	89 e5                	mov    ebp,esp
1000185c:	83 ec 08             	sub    esp,0x8
1000185f:	83 ec 08             	sub    esp,0x8
10001862:	6a 00                	push   0x0
10001864:	ff 75 18             	push   DWORD PTR [ebp+0x18]
10001867:	ff 75 14             	push   DWORD PTR [ebp+0x14]
1000186a:	ff 75 10             	push   DWORD PTR [ebp+0x10]
1000186d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10001870:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001873:	e8 fc ff ff ff       	call   10001874 <drawBasicWindow(int, int, int, int, char const*)+0x1b>	10001874: R_386_PC32	drawBasicWindowX(int, int, int, int, char const*, bool)
10001878:	83 c4 20             	add    esp,0x20
1000187b:	90                   	nop
1000187c:	c9                   	leave  
1000187d:	c3                   	ret    

1000187e <bootInstallKeybrd(KeyboardToken, bool*)>:
1000187e:	55                   	push   ebp
1000187f:	89 e5                	mov    ebp,esp
10001881:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
10001884:	05 04 01 00 00       	add    eax,0x104
10001889:	8a 00                	mov    al,BYTE PTR [eax]
1000188b:	84 c0                	test   al,al
1000188d:	74 15                	je     100018a4 <bootInstallKeybrd(KeyboardToken, bool*)+0x26>
1000188f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001892:	66 83 f8 09          	cmp    ax,0x9
10001896:	75 0c                	jne    100018a4 <bootInstallKeybrd(KeyboardToken, bool*)+0x26>
10001898:	c6 05 00 00 00 00 7f 	mov    BYTE PTR ds:0x0,0x7f	1000189a: R_386_32	installKey
1000189f:	e9 94 00 00 00       	jmp    10001938 <bootInstallKeybrd(KeyboardToken, bool*)+0xba>
100018a4:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
100018a7:	84 c0                	test   al,al
100018a9:	0f 85 88 00 00 00    	jne    10001937 <bootInstallKeybrd(KeyboardToken, bool*)+0xb9>
100018af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100018b2:	66 3d 0a 02          	cmp    ax,0x20a
100018b6:	75 09                	jne    100018c1 <bootInstallKeybrd(KeyboardToken, bool*)+0x43>
100018b8:	c6 05 00 00 00 00 1b 	mov    BYTE PTR ds:0x0,0x1b	100018ba: R_386_32	installKey
100018bf:	eb 77                	jmp    10001938 <bootInstallKeybrd(KeyboardToken, bool*)+0xba>
100018c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100018c4:	66 3d 0d 02          	cmp    ax,0x20d
100018c8:	75 09                	jne    100018d3 <bootInstallKeybrd(KeyboardToken, bool*)+0x55>
100018ca:	c6 05 00 00 00 00 03 	mov    BYTE PTR ds:0x0,0x3	100018cc: R_386_32	installKey
100018d1:	eb 65                	jmp    10001938 <bootInstallKeybrd(KeyboardToken, bool*)+0xba>
100018d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100018d6:	66 3d 0e 02          	cmp    ax,0x20e
100018da:	75 09                	jne    100018e5 <bootInstallKeybrd(KeyboardToken, bool*)+0x67>
100018dc:	c6 05 00 00 00 00 04 	mov    BYTE PTR ds:0x0,0x4	100018de: R_386_32	installKey
100018e3:	eb 53                	jmp    10001938 <bootInstallKeybrd(KeyboardToken, bool*)+0xba>
100018e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100018e8:	66 3d 0b 02          	cmp    ax,0x20b
100018ec:	75 09                	jne    100018f7 <bootInstallKeybrd(KeyboardToken, bool*)+0x79>
100018ee:	c6 05 00 00 00 00 01 	mov    BYTE PTR ds:0x0,0x1	100018f0: R_386_32	installKey
100018f5:	eb 41                	jmp    10001938 <bootInstallKeybrd(KeyboardToken, bool*)+0xba>
100018f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100018fa:	66 3d 0c 02          	cmp    ax,0x20c
100018fe:	75 09                	jne    10001909 <bootInstallKeybrd(KeyboardToken, bool*)+0x8b>
10001900:	c6 05 00 00 00 00 02 	mov    BYTE PTR ds:0x0,0x2	10001902: R_386_32	installKey
10001907:	eb 2f                	jmp    10001938 <bootInstallKeybrd(KeyboardToken, bool*)+0xba>
10001909:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000190c:	66 3d 05 02          	cmp    ax,0x205
10001910:	75 09                	jne    1000191b <bootInstallKeybrd(KeyboardToken, bool*)+0x9d>
10001912:	c6 05 00 00 00 00 7d 	mov    BYTE PTR ds:0x0,0x7d	10001914: R_386_32	installKey
10001919:	eb 1d                	jmp    10001938 <bootInstallKeybrd(KeyboardToken, bool*)+0xba>
1000191b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000191e:	66 3d 05 02          	cmp    ax,0x205
10001922:	75 09                	jne    1000192d <bootInstallKeybrd(KeyboardToken, bool*)+0xaf>
10001924:	c6 05 00 00 00 00 7e 	mov    BYTE PTR ds:0x0,0x7e	10001926: R_386_32	installKey
1000192b:	eb 0b                	jmp    10001938 <bootInstallKeybrd(KeyboardToken, bool*)+0xba>
1000192d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001930:	a2 00 00 00 00       	mov    ds:0x0,al	10001931: R_386_32	installKey
10001935:	eb 01                	jmp    10001938 <bootInstallKeybrd(KeyboardToken, bool*)+0xba>
10001937:	90                   	nop
10001938:	5d                   	pop    ebp
10001939:	c3                   	ret    

1000193a <bootInstallTasks(int)>:
1000193a:	55                   	push   ebp
1000193b:	89 e5                	mov    ebp,esp
1000193d:	83 ec 08             	sub    esp,0x8
10001940:	a1 00 00 00 00       	mov    eax,ds:0x0	10001941: R_386_32	term
10001945:	83 ec 04             	sub    esp,0x4
10001948:	6a 08                	push   0x8
1000194a:	6a 18                	push   0x18
1000194c:	50                   	push   eax
1000194d:	e8 fc ff ff ff       	call   1000194e <bootInstallTasks(int)+0x14>	1000194e: R_386_PC32	VgaText::setCursor(int, int)
10001952:	83 c4 10             	add    esp,0x10
10001955:	a1 00 00 00 00       	mov    eax,ds:0x0	10001956: R_386_32	term
1000195a:	83 ec 08             	sub    esp,0x8
1000195d:	68 58 8c 00 10       	push   0x10008c58	1000195e: R_386_32	.text
10001962:	50                   	push   eax
10001963:	e8 fc ff ff ff       	call   10001964 <bootInstallTasks(int)+0x2a>	10001964: R_386_PC32	VgaText::puts(char const*)
10001968:	83 c4 10             	add    esp,0x10
1000196b:	a1 00 00 00 00       	mov    eax,ds:0x0	1000196c: R_386_32	term
10001970:	83 ec 04             	sub    esp,0x4
10001973:	6a 0a                	push   0xa
10001975:	6a 1a                	push   0x1a
10001977:	50                   	push   eax
10001978:	e8 fc ff ff ff       	call   10001979 <bootInstallTasks(int)+0x3f>	10001979: R_386_PC32	VgaText::setCursor(int, int)
1000197d:	83 c4 10             	add    esp,0x10
10001980:	a1 00 00 00 00       	mov    eax,ds:0x0	10001981: R_386_32	term
10001985:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
10001989:	75 07                	jne    10001992 <bootInstallTasks(int)+0x58>
1000198b:	ba 80 8c 00 10       	mov    edx,0x10008c80	1000198c: R_386_32	.text
10001990:	eb 05                	jmp    10001997 <bootInstallTasks(int)+0x5d>
10001992:	ba 83 8c 00 10       	mov    edx,0x10008c83	10001993: R_386_32	.text
10001997:	83 ec 08             	sub    esp,0x8
1000199a:	52                   	push   edx
1000199b:	50                   	push   eax
1000199c:	e8 fc ff ff ff       	call   1000199d <bootInstallTasks(int)+0x63>	1000199d: R_386_PC32	VgaText::puts(char const*)
100019a1:	83 c4 10             	add    esp,0x10
100019a4:	a1 00 00 00 00       	mov    eax,ds:0x0	100019a5: R_386_32	term
100019a9:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
100019ad:	78 07                	js     100019b6 <bootInstallTasks(int)+0x7c>
100019af:	ba 00 00 00 00       	mov    edx,0x0
100019b4:	eb 05                	jmp    100019bb <bootInstallTasks(int)+0x81>
100019b6:	ba 07 00 00 00       	mov    edx,0x7
100019bb:	6a 0f                	push   0xf
100019bd:	52                   	push   edx
100019be:	68 86 8c 00 10       	push   0x10008c86	100019bf: R_386_32	.text
100019c3:	50                   	push   eax
100019c4:	e8 fc ff ff ff       	call   100019c5 <bootInstallTasks(int)+0x8b>	100019c5: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
100019c9:	83 c4 10             	add    esp,0x10
100019cc:	a1 00 00 00 00       	mov    eax,ds:0x0	100019cd: R_386_32	term
100019d1:	83 ec 04             	sub    esp,0x4
100019d4:	6a 0b                	push   0xb
100019d6:	6a 1a                	push   0x1a
100019d8:	50                   	push   eax
100019d9:	e8 fc ff ff ff       	call   100019da <bootInstallTasks(int)+0xa0>	100019da: R_386_PC32	VgaText::setCursor(int, int)
100019de:	83 c4 10             	add    esp,0x10
100019e1:	a1 00 00 00 00       	mov    eax,ds:0x0	100019e2: R_386_32	term
100019e6:	83 7d 08 01          	cmp    DWORD PTR [ebp+0x8],0x1
100019ea:	75 07                	jne    100019f3 <bootInstallTasks(int)+0xb9>
100019ec:	ba 80 8c 00 10       	mov    edx,0x10008c80	100019ed: R_386_32	.text
100019f1:	eb 05                	jmp    100019f8 <bootInstallTasks(int)+0xbe>
100019f3:	ba 83 8c 00 10       	mov    edx,0x10008c83	100019f4: R_386_32	.text
100019f8:	83 ec 08             	sub    esp,0x8
100019fb:	52                   	push   edx
100019fc:	50                   	push   eax
100019fd:	e8 fc ff ff ff       	call   100019fe <bootInstallTasks(int)+0xc4>	100019fe: R_386_PC32	VgaText::puts(char const*)
10001a02:	83 c4 10             	add    esp,0x10
10001a05:	a1 00 00 00 00       	mov    eax,ds:0x0	10001a06: R_386_32	term
10001a0a:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
10001a0e:	7e 07                	jle    10001a17 <bootInstallTasks(int)+0xdd>
10001a10:	ba 00 00 00 00       	mov    edx,0x0
10001a15:	eb 05                	jmp    10001a1c <bootInstallTasks(int)+0xe2>
10001a17:	ba 07 00 00 00       	mov    edx,0x7
10001a1c:	6a 0f                	push   0xf
10001a1e:	52                   	push   edx
10001a1f:	68 9e 8c 00 10       	push   0x10008c9e	10001a20: R_386_32	.text
10001a24:	50                   	push   eax
10001a25:	e8 fc ff ff ff       	call   10001a26 <bootInstallTasks(int)+0xec>	10001a26: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10001a2a:	83 c4 10             	add    esp,0x10
10001a2d:	a1 00 00 00 00       	mov    eax,ds:0x0	10001a2e: R_386_32	term
10001a32:	83 ec 04             	sub    esp,0x4
10001a35:	6a 0c                	push   0xc
10001a37:	6a 1a                	push   0x1a
10001a39:	50                   	push   eax
10001a3a:	e8 fc ff ff ff       	call   10001a3b <bootInstallTasks(int)+0x101>	10001a3b: R_386_PC32	VgaText::setCursor(int, int)
10001a3f:	83 c4 10             	add    esp,0x10
10001a42:	a1 00 00 00 00       	mov    eax,ds:0x0	10001a43: R_386_32	term
10001a47:	83 7d 08 02          	cmp    DWORD PTR [ebp+0x8],0x2
10001a4b:	75 07                	jne    10001a54 <bootInstallTasks(int)+0x11a>
10001a4d:	ba 80 8c 00 10       	mov    edx,0x10008c80	10001a4e: R_386_32	.text
10001a52:	eb 05                	jmp    10001a59 <bootInstallTasks(int)+0x11f>
10001a54:	ba 83 8c 00 10       	mov    edx,0x10008c83	10001a55: R_386_32	.text
10001a59:	83 ec 08             	sub    esp,0x8
10001a5c:	52                   	push   edx
10001a5d:	50                   	push   eax
10001a5e:	e8 fc ff ff ff       	call   10001a5f <bootInstallTasks(int)+0x125>	10001a5f: R_386_PC32	VgaText::puts(char const*)
10001a63:	83 c4 10             	add    esp,0x10
10001a66:	a1 00 00 00 00       	mov    eax,ds:0x0	10001a67: R_386_32	term
10001a6b:	83 7d 08 01          	cmp    DWORD PTR [ebp+0x8],0x1
10001a6f:	7e 07                	jle    10001a78 <bootInstallTasks(int)+0x13e>
10001a71:	ba 00 00 00 00       	mov    edx,0x0
10001a76:	eb 05                	jmp    10001a7d <bootInstallTasks(int)+0x143>
10001a78:	ba 07 00 00 00       	mov    edx,0x7
10001a7d:	6a 0f                	push   0xf
10001a7f:	52                   	push   edx
10001a80:	68 b4 8c 00 10       	push   0x10008cb4	10001a81: R_386_32	.text
10001a85:	50                   	push   eax
10001a86:	e8 fc ff ff ff       	call   10001a87 <bootInstallTasks(int)+0x14d>	10001a87: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10001a8b:	83 c4 10             	add    esp,0x10
10001a8e:	a1 00 00 00 00       	mov    eax,ds:0x0	10001a8f: R_386_32	term
10001a93:	83 ec 04             	sub    esp,0x4
10001a96:	6a 0d                	push   0xd
10001a98:	6a 1a                	push   0x1a
10001a9a:	50                   	push   eax
10001a9b:	e8 fc ff ff ff       	call   10001a9c <bootInstallTasks(int)+0x162>	10001a9c: R_386_PC32	VgaText::setCursor(int, int)
10001aa0:	83 c4 10             	add    esp,0x10
10001aa3:	a1 00 00 00 00       	mov    eax,ds:0x0	10001aa4: R_386_32	term
10001aa8:	83 7d 08 03          	cmp    DWORD PTR [ebp+0x8],0x3
10001aac:	75 07                	jne    10001ab5 <bootInstallTasks(int)+0x17b>
10001aae:	ba 80 8c 00 10       	mov    edx,0x10008c80	10001aaf: R_386_32	.text
10001ab3:	eb 05                	jmp    10001aba <bootInstallTasks(int)+0x180>
10001ab5:	ba 83 8c 00 10       	mov    edx,0x10008c83	10001ab6: R_386_32	.text
10001aba:	83 ec 08             	sub    esp,0x8
10001abd:	52                   	push   edx
10001abe:	50                   	push   eax
10001abf:	e8 fc ff ff ff       	call   10001ac0 <bootInstallTasks(int)+0x186>	10001ac0: R_386_PC32	VgaText::puts(char const*)
10001ac4:	83 c4 10             	add    esp,0x10
10001ac7:	a1 00 00 00 00       	mov    eax,ds:0x0	10001ac8: R_386_32	term
10001acc:	83 7d 08 02          	cmp    DWORD PTR [ebp+0x8],0x2
10001ad0:	7e 07                	jle    10001ad9 <bootInstallTasks(int)+0x19f>
10001ad2:	ba 00 00 00 00       	mov    edx,0x0
10001ad7:	eb 05                	jmp    10001ade <bootInstallTasks(int)+0x1a4>
10001ad9:	ba 07 00 00 00       	mov    edx,0x7
10001ade:	6a 0f                	push   0xf
10001ae0:	52                   	push   edx
10001ae1:	68 ca 8c 00 10       	push   0x10008cca	10001ae2: R_386_32	.text
10001ae6:	50                   	push   eax
10001ae7:	e8 fc ff ff ff       	call   10001ae8 <bootInstallTasks(int)+0x1ae>	10001ae8: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10001aec:	83 c4 10             	add    esp,0x10
10001aef:	a1 00 00 00 00       	mov    eax,ds:0x0	10001af0: R_386_32	term
10001af4:	83 ec 04             	sub    esp,0x4
10001af7:	6a 0e                	push   0xe
10001af9:	6a 1a                	push   0x1a
10001afb:	50                   	push   eax
10001afc:	e8 fc ff ff ff       	call   10001afd <bootInstallTasks(int)+0x1c3>	10001afd: R_386_PC32	VgaText::setCursor(int, int)
10001b01:	83 c4 10             	add    esp,0x10
10001b04:	a1 00 00 00 00       	mov    eax,ds:0x0	10001b05: R_386_32	term
10001b09:	83 7d 08 04          	cmp    DWORD PTR [ebp+0x8],0x4
10001b0d:	75 07                	jne    10001b16 <bootInstallTasks(int)+0x1dc>
10001b0f:	ba 80 8c 00 10       	mov    edx,0x10008c80	10001b10: R_386_32	.text
10001b14:	eb 05                	jmp    10001b1b <bootInstallTasks(int)+0x1e1>
10001b16:	ba 83 8c 00 10       	mov    edx,0x10008c83	10001b17: R_386_32	.text
10001b1b:	83 ec 08             	sub    esp,0x8
10001b1e:	52                   	push   edx
10001b1f:	50                   	push   eax
10001b20:	e8 fc ff ff ff       	call   10001b21 <bootInstallTasks(int)+0x1e7>	10001b21: R_386_PC32	VgaText::puts(char const*)
10001b25:	83 c4 10             	add    esp,0x10
10001b28:	a1 00 00 00 00       	mov    eax,ds:0x0	10001b29: R_386_32	term
10001b2d:	83 7d 08 03          	cmp    DWORD PTR [ebp+0x8],0x3
10001b31:	7e 07                	jle    10001b3a <bootInstallTasks(int)+0x200>
10001b33:	ba 00 00 00 00       	mov    edx,0x0
10001b38:	eb 05                	jmp    10001b3f <bootInstallTasks(int)+0x205>
10001b3a:	ba 07 00 00 00       	mov    edx,0x7
10001b3f:	6a 0f                	push   0xf
10001b41:	52                   	push   edx
10001b42:	68 de 8c 00 10       	push   0x10008cde	10001b43: R_386_32	.text
10001b47:	50                   	push   eax
10001b48:	e8 fc ff ff ff       	call   10001b49 <bootInstallTasks(int)+0x20f>	10001b49: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10001b4d:	83 c4 10             	add    esp,0x10
10001b50:	a1 00 00 00 00       	mov    eax,ds:0x0	10001b51: R_386_32	term
10001b55:	83 ec 04             	sub    esp,0x4
10001b58:	6a 0f                	push   0xf
10001b5a:	6a 1a                	push   0x1a
10001b5c:	50                   	push   eax
10001b5d:	e8 fc ff ff ff       	call   10001b5e <bootInstallTasks(int)+0x224>	10001b5e: R_386_PC32	VgaText::setCursor(int, int)
10001b62:	83 c4 10             	add    esp,0x10
10001b65:	a1 00 00 00 00       	mov    eax,ds:0x0	10001b66: R_386_32	term
10001b6a:	83 7d 08 05          	cmp    DWORD PTR [ebp+0x8],0x5
10001b6e:	75 07                	jne    10001b77 <bootInstallTasks(int)+0x23d>
10001b70:	ba 80 8c 00 10       	mov    edx,0x10008c80	10001b71: R_386_32	.text
10001b75:	eb 05                	jmp    10001b7c <bootInstallTasks(int)+0x242>
10001b77:	ba 83 8c 00 10       	mov    edx,0x10008c83	10001b78: R_386_32	.text
10001b7c:	83 ec 08             	sub    esp,0x8
10001b7f:	52                   	push   edx
10001b80:	50                   	push   eax
10001b81:	e8 fc ff ff ff       	call   10001b82 <bootInstallTasks(int)+0x248>	10001b82: R_386_PC32	VgaText::puts(char const*)
10001b86:	83 c4 10             	add    esp,0x10
10001b89:	a1 00 00 00 00       	mov    eax,ds:0x0	10001b8a: R_386_32	term
10001b8e:	83 7d 08 04          	cmp    DWORD PTR [ebp+0x8],0x4
10001b92:	7e 07                	jle    10001b9b <bootInstallTasks(int)+0x261>
10001b94:	ba 00 00 00 00       	mov    edx,0x0
10001b99:	eb 05                	jmp    10001ba0 <bootInstallTasks(int)+0x266>
10001b9b:	ba 07 00 00 00       	mov    edx,0x7
10001ba0:	6a 0f                	push   0xf
10001ba2:	52                   	push   edx
10001ba3:	68 f6 8c 00 10       	push   0x10008cf6	10001ba4: R_386_32	.text
10001ba8:	50                   	push   eax
10001ba9:	e8 fc ff ff ff       	call   10001baa <bootInstallTasks(int)+0x270>	10001baa: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10001bae:	83 c4 10             	add    esp,0x10
10001bb1:	90                   	nop
10001bb2:	c9                   	leave  
10001bb3:	c3                   	ret    

10001bb4 <ror(unsigned long long, int, int)>:
10001bb4:	55                   	push   ebp
10001bb5:	89 e5                	mov    ebp,esp
10001bb7:	56                   	push   esi
10001bb8:	53                   	push   ebx
10001bb9:	83 ec 20             	sub    esp,0x20
10001bbc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001bbf:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
10001bc2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10001bc5:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10001bc8:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
10001bcb:	ba 01 00 00 00       	mov    edx,0x1
10001bd0:	88 c1                	mov    cl,al
10001bd2:	d3 e2                	shl    edx,cl
10001bd4:	89 d0                	mov    eax,edx
10001bd6:	48                   	dec    eax
10001bd7:	99                   	cdq    
10001bd8:	89 c1                	mov    ecx,eax
10001bda:	23 4d e0             	and    ecx,DWORD PTR [ebp-0x20]
10001bdd:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
10001be0:	89 d0                	mov    eax,edx
10001be2:	23 45 e4             	and    eax,DWORD PTR [ebp-0x1c]
10001be5:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
10001be8:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
10001beb:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10001bee:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10001bf1:	0f ad d0             	shrd   eax,edx,cl
10001bf4:	d3 ea                	shr    edx,cl
10001bf6:	f6 c1 20             	test   cl,0x20
10001bf9:	74 04                	je     10001bff <ror(unsigned long long, int, int)+0x4b>
10001bfb:	89 d0                	mov    eax,edx
10001bfd:	31 d2                	xor    edx,edx
10001bff:	89 c3                	mov    ebx,eax
10001c01:	89 d6                	mov    esi,edx
10001c03:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
10001c06:	2b 45 10             	sub    eax,DWORD PTR [ebp+0x10]
10001c09:	89 c1                	mov    ecx,eax
10001c0b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001c0e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001c11:	0f a5 c2             	shld   edx,eax,cl
10001c14:	d3 e0                	shl    eax,cl
10001c16:	f6 c1 20             	test   cl,0x20
10001c19:	74 04                	je     10001c1f <ror(unsigned long long, int, int)+0x6b>
10001c1b:	89 c2                	mov    edx,eax
10001c1d:	31 c0                	xor    eax,eax
10001c1f:	89 d1                	mov    ecx,edx
10001c21:	89 c2                	mov    edx,eax
10001c23:	89 d8                	mov    eax,ebx
10001c25:	09 d0                	or     eax,edx
10001c27:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
10001c2a:	89 f0                	mov    eax,esi
10001c2c:	09 c8                	or     eax,ecx
10001c2e:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
10001c31:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10001c34:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
10001c37:	83 c4 20             	add    esp,0x20
10001c3a:	5b                   	pop    ebx
10001c3b:	5e                   	pop    esi
10001c3c:	5d                   	pop    ebp
10001c3d:	c3                   	ret    

10001c3e <swapBits(unsigned long long, unsigned long long, unsigned long long)>:
10001c3e:	55                   	push   ebp
10001c3f:	89 e5                	mov    ebp,esp
10001c41:	56                   	push   esi
10001c42:	53                   	push   ebx
10001c43:	83 ec 40             	sub    esp,0x40
10001c46:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001c49:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10001c4c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10001c4f:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
10001c52:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
10001c55:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
10001c58:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
10001c5b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
10001c5e:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
10001c61:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
10001c64:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
10001c67:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10001c6a:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
10001c6d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001c70:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001c73:	0f ad d0             	shrd   eax,edx,cl
10001c76:	d3 ea                	shr    edx,cl
10001c78:	f6 c1 20             	test   cl,0x20
10001c7b:	74 04                	je     10001c81 <swapBits(unsigned long long, unsigned long long, unsigned long long)+0x43>
10001c7d:	89 d0                	mov    eax,edx
10001c7f:	31 d2                	xor    edx,edx
10001c81:	89 c3                	mov    ebx,eax
10001c83:	89 d6                	mov    esi,edx
10001c85:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
10001c88:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001c8b:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001c8e:	0f ad d0             	shrd   eax,edx,cl
10001c91:	d3 ea                	shr    edx,cl
10001c93:	f6 c1 20             	test   cl,0x20
10001c96:	74 04                	je     10001c9c <swapBits(unsigned long long, unsigned long long, unsigned long long)+0x5e>
10001c98:	89 d0                	mov    eax,edx
10001c9a:	31 d2                	xor    edx,edx
10001c9c:	89 d1                	mov    ecx,edx
10001c9e:	89 c2                	mov    edx,eax
10001ca0:	89 d8                	mov    eax,ebx
10001ca2:	31 d0                	xor    eax,edx
10001ca4:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
10001ca7:	89 f0                	mov    eax,esi
10001ca9:	31 c8                	xor    eax,ecx
10001cab:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
10001cae:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
10001cb1:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
10001cb4:	89 c6                	mov    esi,eax
10001cb6:	83 e6 01             	and    esi,0x1
10001cb9:	89 75 c8             	mov    DWORD PTR [ebp-0x38],esi
10001cbc:	89 d0                	mov    eax,edx
10001cbe:	83 e0 00             	and    eax,0x0
10001cc1:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
10001cc4:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
10001cc7:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
10001cca:	89 c3                	mov    ebx,eax
10001ccc:	80 f7 00             	xor    bh,0x0
10001ccf:	89 5d b8             	mov    DWORD PTR [ebp-0x48],ebx
10001cd2:	89 d0                	mov    eax,edx
10001cd4:	80 f4 00             	xor    ah,0x0
10001cd7:	89 45 bc             	mov    DWORD PTR [ebp-0x44],eax
10001cda:	8b 55 b8             	mov    edx,DWORD PTR [ebp-0x48]
10001cdd:	8b 4d bc             	mov    ecx,DWORD PTR [ebp-0x44]
10001ce0:	89 c8                	mov    eax,ecx
10001ce2:	09 d0                	or     eax,edx
10001ce4:	85 c0                	test   eax,eax
10001ce6:	74 62                	je     10001d4a <swapBits(unsigned long long, unsigned long long, unsigned long long)+0x10c>
10001ce8:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
10001ceb:	b8 01 00 00 00       	mov    eax,0x1
10001cf0:	ba 00 00 00 00       	mov    edx,0x0
10001cf5:	0f a5 c2             	shld   edx,eax,cl
10001cf8:	d3 e0                	shl    eax,cl
10001cfa:	f6 c1 20             	test   cl,0x20
10001cfd:	74 04                	je     10001d03 <swapBits(unsigned long long, unsigned long long, unsigned long long)+0xc5>
10001cff:	89 c2                	mov    edx,eax
10001d01:	31 c0                	xor    eax,eax
10001d03:	89 c3                	mov    ebx,eax
10001d05:	89 d6                	mov    esi,edx
10001d07:	89 d8                	mov    eax,ebx
10001d09:	33 45 f0             	xor    eax,DWORD PTR [ebp-0x10]
10001d0c:	89 45 c0             	mov    DWORD PTR [ebp-0x40],eax
10001d0f:	89 f0                	mov    eax,esi
10001d11:	33 45 f4             	xor    eax,DWORD PTR [ebp-0xc]
10001d14:	89 45 c4             	mov    DWORD PTR [ebp-0x3c],eax
10001d17:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
10001d1a:	b8 01 00 00 00       	mov    eax,0x1
10001d1f:	ba 00 00 00 00       	mov    edx,0x0
10001d24:	0f a5 c2             	shld   edx,eax,cl
10001d27:	d3 e0                	shl    eax,cl
10001d29:	f6 c1 20             	test   cl,0x20
10001d2c:	74 04                	je     10001d32 <swapBits(unsigned long long, unsigned long long, unsigned long long)+0xf4>
10001d2e:	89 c2                	mov    edx,eax
10001d30:	31 c0                	xor    eax,eax
10001d32:	89 c1                	mov    ecx,eax
10001d34:	89 d3                	mov    ebx,edx
10001d36:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
10001d39:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
10001d3c:	89 c6                	mov    esi,eax
10001d3e:	31 ce                	xor    esi,ecx
10001d40:	89 75 d8             	mov    DWORD PTR [ebp-0x28],esi
10001d43:	31 d3                	xor    ebx,edx
10001d45:	89 5d dc             	mov    DWORD PTR [ebp-0x24],ebx
10001d48:	eb 0c                	jmp    10001d56 <swapBits(unsigned long long, unsigned long long, unsigned long long)+0x118>
10001d4a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001d4d:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001d50:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
10001d53:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
10001d56:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10001d59:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
10001d5c:	83 c4 40             	add    esp,0x40
10001d5f:	5b                   	pop    ebx
10001d60:	5e                   	pop    esi
10001d61:	5d                   	pop    ebp
10001d62:	c3                   	ret    

10001d63 <getChecksum(unsigned int)>:
10001d63:	55                   	push   ebp
10001d64:	89 e5                	mov    ebp,esp
10001d66:	56                   	push   esi
10001d67:	53                   	push   ebx
10001d68:	83 ec 20             	sub    esp,0x20
10001d6b:	66 c7 45 f6 49 4e    	mov    WORD PTR [ebp-0xa],0x4e49
10001d71:	66 c7 45 f4 79 6e    	mov    WORD PTR [ebp-0xc],0x6e79
10001d77:	66 c7 45 f2 67 61    	mov    WORD PTR [ebp-0xe],0x6167
10001d7d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001d80:	c1 e8 10             	shr    eax,0x10
10001d83:	89 c1                	mov    ecx,eax
10001d85:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001d88:	89 c2                	mov    edx,eax
10001d8a:	89 d0                	mov    eax,edx
10001d8c:	c1 e0 06             	shl    eax,0x6
10001d8f:	29 d0                	sub    eax,edx
10001d91:	c1 e0 04             	shl    eax,0x4
10001d94:	01 d0                	add    eax,edx
10001d96:	31 c8                	xor    eax,ecx
10001d98:	66 89 45 f0          	mov    WORD PTR [ebp-0x10],ax
10001d9c:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
10001da0:	0f 84 b1 00 00 00    	je     10001e57 <getChecksum(unsigned int)+0xf4>
10001da6:	b8 f4 02 00 00       	mov    eax,0x2f4
10001dab:	ba 00 00 00 00       	mov    edx,0x0
10001db0:	f7 75 08             	div    DWORD PTR [ebp+0x8]
10001db3:	89 c3                	mov    ebx,eax
10001db5:	be 00 00 00 00       	mov    esi,0x0
10001dba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001dbd:	ba 00 00 00 00       	mov    edx,0x0
10001dc2:	6a 1d                	push   0x1d
10001dc4:	6a 05                	push   0x5
10001dc6:	52                   	push   edx
10001dc7:	50                   	push   eax
10001dc8:	e8 fc ff ff ff       	call   10001dc9 <getChecksum(unsigned int)+0x66>	10001dc9: R_386_PC32	ror(unsigned long long, int, int)
10001dcd:	83 c4 10             	add    esp,0x10
10001dd0:	05 52 3f 04 00       	add    eax,0x43f52
10001dd5:	83 d2 00             	adc    edx,0x0
10001dd8:	89 d9                	mov    ecx,ebx
10001dda:	31 c1                	xor    ecx,eax
10001ddc:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
10001ddf:	31 d6                	xor    esi,edx
10001de1:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
10001de4:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
10001de7:	66 8b 45 f6          	mov    ax,WORD PTR [ebp-0xa]
10001deb:	66 0f af c2          	imul   ax,dx
10001def:	66 89 45 f6          	mov    WORD PTR [ebp-0xa],ax
10001df3:	b8 ea 00 00 00       	mov    eax,0xea
10001df8:	ba 00 00 00 00       	mov    edx,0x0
10001dfd:	f7 75 08             	div    DWORD PTR [ebp+0x8]
10001e00:	89 c3                	mov    ebx,eax
10001e02:	be 00 00 00 00       	mov    esi,0x0
10001e07:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001e0a:	ba 00 00 00 00       	mov    edx,0x0
10001e0f:	6a 1f                	push   0x1f
10001e11:	6a 03                	push   0x3
10001e13:	52                   	push   edx
10001e14:	50                   	push   eax
10001e15:	e8 fc ff ff ff       	call   10001e16 <getChecksum(unsigned int)+0xb3>	10001e16: R_386_PC32	ror(unsigned long long, int, int)
10001e1a:	83 c4 10             	add    esp,0x10
10001e1d:	05 05 db 09 00       	add    eax,0x9db05
10001e22:	83 d2 00             	adc    edx,0x0
10001e25:	89 d9                	mov    ecx,ebx
10001e27:	31 c1                	xor    ecx,eax
10001e29:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
10001e2c:	31 d6                	xor    esi,edx
10001e2e:	89 75 dc             	mov    DWORD PTR [ebp-0x24],esi
10001e31:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10001e34:	66 29 45 f4          	sub    WORD PTR [ebp-0xc],ax
10001e38:	66 8b 45 f6          	mov    ax,WORD PTR [ebp-0xa]
10001e3c:	33 45 f4             	xor    eax,DWORD PTR [ebp-0xc]
10001e3f:	25 d2 04 00 00       	and    eax,0x4d2
10001e44:	66 01 45 f2          	add    WORD PTR [ebp-0xe],ax
10001e48:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001e4b:	66 01 45 f2          	add    WORD PTR [ebp-0xe],ax
10001e4f:	d1 6d 08             	shr    DWORD PTR [ebp+0x8],1
10001e52:	e9 45 ff ff ff       	jmp    10001d9c <getChecksum(unsigned int)+0x39>
10001e57:	66 8b 45 f6          	mov    ax,WORD PTR [ebp-0xa]
10001e5b:	33 45 f4             	xor    eax,DWORD PTR [ebp-0xc]
10001e5e:	66 33 45 f2          	xor    ax,WORD PTR [ebp-0xe]
10001e62:	33 45 f0             	xor    eax,DWORD PTR [ebp-0x10]
10001e65:	0f b7 c0             	movzx  eax,ax
10001e68:	25 ff 7f 00 00       	and    eax,0x7fff
10001e6d:	8d 65 f8             	lea    esp,[ebp-0x8]
10001e70:	5b                   	pop    ebx
10001e71:	5e                   	pop    esi
10001e72:	5d                   	pop    ebp
10001e73:	c3                   	ret    

10001e74 <createKey(char*, unsigned int)>:
10001e74:	55                   	push   ebp
10001e75:	89 e5                	mov    ebp,esp
10001e77:	53                   	push   ebx
10001e78:	83 ec 34             	sub    esp,0x34
10001e7b:	68 08 8d 00 10       	push   0x10008d08	10001e7c: R_386_32	.text
10001e80:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001e83:	e8 fc ff ff ff       	call   10001e84 <createKey(char*, unsigned int)+0x10>	10001e84: R_386_PC32	strcpy
10001e88:	83 c4 08             	add    esp,0x8
10001e8b:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
10001e8e:	bb 00 00 00 00       	mov    ebx,0x0
10001e93:	89 c8                	mov    eax,ecx
10001e95:	89 da                	mov    edx,ebx
10001e97:	0f a4 c2 0f          	shld   edx,eax,0xf
10001e9b:	c1 e0 0f             	shl    eax,0xf
10001e9e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10001ea1:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
10001ea4:	83 ec 04             	sub    esp,0x4
10001ea7:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10001eaa:	e8 fc ff ff ff       	call   10001eab <createKey(char*, unsigned int)+0x37>	10001eab: R_386_PC32	getChecksum(unsigned int)
10001eaf:	83 c4 08             	add    esp,0x8
10001eb2:	ba 00 00 00 00       	mov    edx,0x0
10001eb7:	09 45 f0             	or     DWORD PTR [ebp-0x10],eax
10001eba:	09 55 f4             	or     DWORD PTR [ebp-0xc],edx
10001ebd:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
10001ec4:	81 7d ec db 24 00 00 	cmp    DWORD PTR [ebp-0x14],0x24db
10001ecb:	7f 7f                	jg     10001f4c <createKey(char*, unsigned int)+0xd8>
10001ecd:	81 75 f0 95 38 e4 b5 	xor    DWORD PTR [ebp-0x10],0xb5e43895
10001ed4:	83 75 f4 37          	xor    DWORD PTR [ebp-0xc],0x37
10001ed8:	6a 00                	push   0x0
10001eda:	6a 08                	push   0x8
10001edc:	6a 00                	push   0x0
10001ede:	6a 03                	push   0x3
10001ee0:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10001ee3:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10001ee6:	e8 fc ff ff ff       	call   10001ee7 <createKey(char*, unsigned int)+0x73>	10001ee7: R_386_PC32	swapBits(unsigned long long, unsigned long long, unsigned long long)
10001eeb:	83 c4 18             	add    esp,0x18
10001eee:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10001ef1:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
10001ef4:	6a 00                	push   0x0
10001ef6:	6a 0c                	push   0xc
10001ef8:	6a 00                	push   0x0
10001efa:	6a 0d                	push   0xd
10001efc:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10001eff:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10001f02:	e8 fc ff ff ff       	call   10001f03 <createKey(char*, unsigned int)+0x8f>	10001f03: R_386_PC32	swapBits(unsigned long long, unsigned long long, unsigned long long)
10001f07:	83 c4 18             	add    esp,0x18
10001f0a:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10001f0d:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
10001f10:	6a 00                	push   0x0
10001f12:	6a 16                	push   0x16
10001f14:	6a 00                	push   0x0
10001f16:	6a 25                	push   0x25
10001f18:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10001f1b:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10001f1e:	e8 fc ff ff ff       	call   10001f1f <createKey(char*, unsigned int)+0xab>	10001f1f: R_386_PC32	swapBits(unsigned long long, unsigned long long, unsigned long long)
10001f23:	83 c4 18             	add    esp,0x18
10001f26:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10001f29:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
10001f2c:	6a 2a                	push   0x2a
10001f2e:	6a 13                	push   0x13
10001f30:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10001f33:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10001f36:	e8 fc ff ff ff       	call   10001f37 <createKey(char*, unsigned int)+0xc3>	10001f37: R_386_PC32	ror(unsigned long long, int, int)
10001f3b:	83 c4 10             	add    esp,0x10
10001f3e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10001f41:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
10001f44:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
10001f47:	e9 78 ff ff ff       	jmp    10001ec4 <createKey(char*, unsigned int)+0x50>
10001f4c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001f4f:	83 e0 0f             	and    eax,0xf
10001f52:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
10001f55:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001f58:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001f5b:	0f ac d0 04          	shrd   eax,edx,0x4
10001f5f:	c1 ea 04             	shr    edx,0x4
10001f62:	89 c1                	mov    ecx,eax
10001f64:	89 d3                	mov    ebx,edx
10001f66:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
10001f69:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
10001f6c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001f6f:	83 e0 0f             	and    eax,0xf
10001f72:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10001f75:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001f78:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001f7b:	0f ac d0 04          	shrd   eax,edx,0x4
10001f7f:	c1 ea 04             	shr    edx,0x4
10001f82:	89 c1                	mov    ecx,eax
10001f84:	89 d3                	mov    ebx,edx
10001f86:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
10001f89:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
10001f8c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001f8f:	83 e0 0f             	and    eax,0xf
10001f92:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
10001f95:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001f98:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001f9b:	0f ac d0 04          	shrd   eax,edx,0x4
10001f9f:	c1 ea 04             	shr    edx,0x4
10001fa2:	89 c1                	mov    ecx,eax
10001fa4:	89 d3                	mov    ebx,edx
10001fa6:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
10001fa9:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
10001fac:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001faf:	25 ff 03 00 00       	and    eax,0x3ff
10001fb4:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
10001fb7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001fba:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001fbd:	0f ac d0 0a          	shrd   eax,edx,0xa
10001fc1:	c1 ea 0a             	shr    edx,0xa
10001fc4:	89 c1                	mov    ecx,eax
10001fc6:	89 d3                	mov    ebx,edx
10001fc8:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
10001fcb:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
10001fce:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001fd1:	25 ff 03 00 00       	and    eax,0x3ff
10001fd6:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
10001fd9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001fdc:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001fdf:	0f ac d0 0a          	shrd   eax,edx,0xa
10001fe3:	c1 ea 0a             	shr    edx,0xa
10001fe6:	89 c1                	mov    ecx,eax
10001fe8:	89 d3                	mov    ebx,edx
10001fea:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
10001fed:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
10001ff0:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001ff3:	25 ff 03 00 00       	and    eax,0x3ff
10001ff8:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
10001ffb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001ffe:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10002001:	0f ac d0 0a          	shrd   eax,edx,0xa
10002005:	c1 ea 0a             	shr    edx,0xa
10002008:	89 c1                	mov    ecx,eax
1000200a:	89 d3                	mov    ebx,edx
1000200c:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
1000200f:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
10002012:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
10002015:	05 00 00 00 00       	add    eax,0x0	10002016: R_386_32	lookupA
1000201a:	8a 10                	mov    dl,BYTE PTR [eax]
1000201c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000201f:	88 10                	mov    BYTE PTR [eax],dl
10002021:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002024:	8d 50 01             	lea    edx,[eax+0x1]
10002027:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
1000202a:	05 00 00 00 00       	add    eax,0x0	1000202b: R_386_32	lookupA
1000202f:	8a 00                	mov    al,BYTE PTR [eax]
10002031:	88 02                	mov    BYTE PTR [edx],al
10002033:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002036:	8d 50 0f             	lea    edx,[eax+0xf]
10002039:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
1000203c:	05 00 00 00 00       	add    eax,0x0	1000203d: R_386_32	lookupA
10002041:	8a 00                	mov    al,BYTE PTR [eax]
10002043:	88 02                	mov    BYTE PTR [edx],al
10002045:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
10002048:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
1000204d:	f7 e9                	imul   ecx
1000204f:	c1 fa 05             	sar    edx,0x5
10002052:	89 c8                	mov    eax,ecx
10002054:	c1 f8 1f             	sar    eax,0x1f
10002057:	29 c2                	sub    edx,eax
10002059:	89 d0                	mov    eax,edx
1000205b:	b9 0a 00 00 00       	mov    ecx,0xa
10002060:	99                   	cdq    
10002061:	f7 f9                	idiv   ecx
10002063:	89 d0                	mov    eax,edx
10002065:	8d 50 30             	lea    edx,[eax+0x30]
10002068:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000206b:	83 c0 03             	add    eax,0x3
1000206e:	88 10                	mov    BYTE PTR [eax],dl
10002070:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
10002073:	b8 67 66 66 66       	mov    eax,0x66666667
10002078:	f7 e9                	imul   ecx
1000207a:	c1 fa 02             	sar    edx,0x2
1000207d:	89 c8                	mov    eax,ecx
1000207f:	c1 f8 1f             	sar    eax,0x1f
10002082:	89 d1                	mov    ecx,edx
10002084:	29 c1                	sub    ecx,eax
10002086:	b8 67 66 66 66       	mov    eax,0x66666667
1000208b:	f7 e9                	imul   ecx
1000208d:	c1 fa 02             	sar    edx,0x2
10002090:	89 c8                	mov    eax,ecx
10002092:	c1 f8 1f             	sar    eax,0x1f
10002095:	29 c2                	sub    edx,eax
10002097:	89 d0                	mov    eax,edx
10002099:	c1 e0 02             	shl    eax,0x2
1000209c:	01 d0                	add    eax,edx
1000209e:	01 c0                	add    eax,eax
100020a0:	29 c1                	sub    ecx,eax
100020a2:	89 ca                	mov    edx,ecx
100020a4:	88 d0                	mov    al,dl
100020a6:	8d 50 30             	lea    edx,[eax+0x30]
100020a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100020ac:	83 c0 04             	add    eax,0x4
100020af:	88 10                	mov    BYTE PTR [eax],dl
100020b1:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
100020b4:	b9 0a 00 00 00       	mov    ecx,0xa
100020b9:	99                   	cdq    
100020ba:	f7 f9                	idiv   ecx
100020bc:	89 d0                	mov    eax,edx
100020be:	8d 50 30             	lea    edx,[eax+0x30]
100020c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100020c4:	83 c0 05             	add    eax,0x5
100020c7:	88 10                	mov    BYTE PTR [eax],dl
100020c9:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
100020cc:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
100020d1:	f7 e9                	imul   ecx
100020d3:	c1 fa 05             	sar    edx,0x5
100020d6:	89 c8                	mov    eax,ecx
100020d8:	c1 f8 1f             	sar    eax,0x1f
100020db:	29 c2                	sub    edx,eax
100020dd:	89 d0                	mov    eax,edx
100020df:	b9 0a 00 00 00       	mov    ecx,0xa
100020e4:	99                   	cdq    
100020e5:	f7 f9                	idiv   ecx
100020e7:	89 d0                	mov    eax,edx
100020e9:	8d 50 30             	lea    edx,[eax+0x30]
100020ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100020ef:	83 c0 07             	add    eax,0x7
100020f2:	88 10                	mov    BYTE PTR [eax],dl
100020f4:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
100020f7:	b8 67 66 66 66       	mov    eax,0x66666667
100020fc:	f7 e9                	imul   ecx
100020fe:	c1 fa 02             	sar    edx,0x2
10002101:	89 c8                	mov    eax,ecx
10002103:	c1 f8 1f             	sar    eax,0x1f
10002106:	89 d1                	mov    ecx,edx
10002108:	29 c1                	sub    ecx,eax
1000210a:	b8 67 66 66 66       	mov    eax,0x66666667
1000210f:	f7 e9                	imul   ecx
10002111:	c1 fa 02             	sar    edx,0x2
10002114:	89 c8                	mov    eax,ecx
10002116:	c1 f8 1f             	sar    eax,0x1f
10002119:	29 c2                	sub    edx,eax
1000211b:	89 d0                	mov    eax,edx
1000211d:	c1 e0 02             	shl    eax,0x2
10002120:	01 d0                	add    eax,edx
10002122:	01 c0                	add    eax,eax
10002124:	29 c1                	sub    ecx,eax
10002126:	89 ca                	mov    edx,ecx
10002128:	88 d0                	mov    al,dl
1000212a:	8d 50 30             	lea    edx,[eax+0x30]
1000212d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002130:	83 c0 08             	add    eax,0x8
10002133:	88 10                	mov    BYTE PTR [eax],dl
10002135:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10002138:	b9 0a 00 00 00       	mov    ecx,0xa
1000213d:	99                   	cdq    
1000213e:	f7 f9                	idiv   ecx
10002140:	89 d0                	mov    eax,edx
10002142:	8d 50 30             	lea    edx,[eax+0x30]
10002145:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002148:	83 c0 09             	add    eax,0x9
1000214b:	88 10                	mov    BYTE PTR [eax],dl
1000214d:	8b 4d d4             	mov    ecx,DWORD PTR [ebp-0x2c]
10002150:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
10002155:	f7 e9                	imul   ecx
10002157:	c1 fa 05             	sar    edx,0x5
1000215a:	89 c8                	mov    eax,ecx
1000215c:	c1 f8 1f             	sar    eax,0x1f
1000215f:	29 c2                	sub    edx,eax
10002161:	89 d0                	mov    eax,edx
10002163:	b9 0a 00 00 00       	mov    ecx,0xa
10002168:	99                   	cdq    
10002169:	f7 f9                	idiv   ecx
1000216b:	89 d0                	mov    eax,edx
1000216d:	8d 50 30             	lea    edx,[eax+0x30]
10002170:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002173:	83 c0 0b             	add    eax,0xb
10002176:	88 10                	mov    BYTE PTR [eax],dl
10002178:	8b 4d d4             	mov    ecx,DWORD PTR [ebp-0x2c]
1000217b:	b8 67 66 66 66       	mov    eax,0x66666667
10002180:	f7 e9                	imul   ecx
10002182:	c1 fa 02             	sar    edx,0x2
10002185:	89 c8                	mov    eax,ecx
10002187:	c1 f8 1f             	sar    eax,0x1f
1000218a:	89 d1                	mov    ecx,edx
1000218c:	29 c1                	sub    ecx,eax
1000218e:	b8 67 66 66 66       	mov    eax,0x66666667
10002193:	f7 e9                	imul   ecx
10002195:	c1 fa 02             	sar    edx,0x2
10002198:	89 c8                	mov    eax,ecx
1000219a:	c1 f8 1f             	sar    eax,0x1f
1000219d:	29 c2                	sub    edx,eax
1000219f:	89 d0                	mov    eax,edx
100021a1:	c1 e0 02             	shl    eax,0x2
100021a4:	01 d0                	add    eax,edx
100021a6:	01 c0                	add    eax,eax
100021a8:	29 c1                	sub    ecx,eax
100021aa:	89 ca                	mov    edx,ecx
100021ac:	88 d0                	mov    al,dl
100021ae:	8d 50 30             	lea    edx,[eax+0x30]
100021b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100021b4:	83 c0 0c             	add    eax,0xc
100021b7:	88 10                	mov    BYTE PTR [eax],dl
100021b9:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
100021bc:	b9 0a 00 00 00       	mov    ecx,0xa
100021c1:	99                   	cdq    
100021c2:	f7 f9                	idiv   ecx
100021c4:	89 d0                	mov    eax,edx
100021c6:	8d 50 30             	lea    edx,[eax+0x30]
100021c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100021cc:	83 c0 0d             	add    eax,0xd
100021cf:	88 10                	mov    BYTE PTR [eax],dl
100021d1:	90                   	nop
100021d2:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
100021d5:	c9                   	leave  
100021d6:	c3                   	ret    

100021d7 <retrieveBits(char*)>:
100021d7:	55                   	push   ebp
100021d8:	89 e5                	mov    ebp,esp
100021da:	57                   	push   edi
100021db:	56                   	push   esi
100021dc:	53                   	push   ebx
100021dd:	83 ec 4c             	sub    esp,0x4c
100021e0:	c7 45 ec ff ff ff ff 	mov    DWORD PTR [ebp-0x14],0xffffffff
100021e7:	c7 45 e8 ff ff ff ff 	mov    DWORD PTR [ebp-0x18],0xffffffff
100021ee:	c7 45 e4 ff ff ff ff 	mov    DWORD PTR [ebp-0x1c],0xffffffff
100021f5:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
100021fc:	83 7d e0 0f          	cmp    DWORD PTR [ebp-0x20],0xf
10002200:	7f 54                	jg     10002256 <retrieveBits(char*)+0x7f>
10002202:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10002205:	05 00 00 00 00       	add    eax,0x0	10002206: R_386_32	lookupA
1000220a:	8a 10                	mov    dl,BYTE PTR [eax]
1000220c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000220f:	8a 00                	mov    al,BYTE PTR [eax]
10002211:	38 c2                	cmp    dl,al
10002213:	75 06                	jne    1000221b <retrieveBits(char*)+0x44>
10002215:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10002218:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
1000221b:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
1000221e:	05 00 00 00 00       	add    eax,0x0	1000221f: R_386_32	lookupB
10002223:	8a 10                	mov    dl,BYTE PTR [eax]
10002225:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002228:	40                   	inc    eax
10002229:	8a 00                	mov    al,BYTE PTR [eax]
1000222b:	38 c2                	cmp    dl,al
1000222d:	75 06                	jne    10002235 <retrieveBits(char*)+0x5e>
1000222f:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10002232:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
10002235:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10002238:	05 00 00 00 00       	add    eax,0x0	10002239: R_386_32	lookupC
1000223d:	8a 10                	mov    dl,BYTE PTR [eax]
1000223f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002242:	83 c0 0f             	add    eax,0xf
10002245:	8a 00                	mov    al,BYTE PTR [eax]
10002247:	38 c2                	cmp    dl,al
10002249:	75 06                	jne    10002251 <retrieveBits(char*)+0x7a>
1000224b:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
1000224e:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10002251:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
10002254:	eb a6                	jmp    100021fc <retrieveBits(char*)+0x25>
10002256:	83 7d ec ff          	cmp    DWORD PTR [ebp-0x14],0xffffffff
1000225a:	74 0c                	je     10002268 <retrieveBits(char*)+0x91>
1000225c:	83 7d e8 ff          	cmp    DWORD PTR [ebp-0x18],0xffffffff
10002260:	74 06                	je     10002268 <retrieveBits(char*)+0x91>
10002262:	83 7d e4 ff          	cmp    DWORD PTR [ebp-0x1c],0xffffffff
10002266:	75 0f                	jne    10002277 <retrieveBits(char*)+0xa0>
10002268:	b8 00 00 00 00       	mov    eax,0x0
1000226d:	ba 00 00 00 00       	mov    edx,0x0
10002272:	e9 02 02 00 00       	jmp    10002479 <retrieveBits(char*)+0x2a2>
10002277:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000227a:	83 c0 03             	add    eax,0x3
1000227d:	8a 00                	mov    al,BYTE PTR [eax]
1000227f:	0f be c0             	movsx  eax,al
10002282:	8d 50 d0             	lea    edx,[eax-0x30]
10002285:	89 d0                	mov    eax,edx
10002287:	c1 e0 02             	shl    eax,0x2
1000228a:	01 d0                	add    eax,edx
1000228c:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10002293:	01 d0                	add    eax,edx
10002295:	c1 e0 02             	shl    eax,0x2
10002298:	89 c6                	mov    esi,eax
1000229a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000229d:	83 c0 04             	add    eax,0x4
100022a0:	8a 00                	mov    al,BYTE PTR [eax]
100022a2:	0f be c0             	movsx  eax,al
100022a5:	8d 50 d0             	lea    edx,[eax-0x30]
100022a8:	89 d0                	mov    eax,edx
100022aa:	c1 e0 02             	shl    eax,0x2
100022ad:	01 d0                	add    eax,edx
100022af:	01 c0                	add    eax,eax
100022b1:	8d 14 06             	lea    edx,[esi+eax*1]
100022b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100022b7:	83 c0 05             	add    eax,0x5
100022ba:	8a 00                	mov    al,BYTE PTR [eax]
100022bc:	0f be c0             	movsx  eax,al
100022bf:	83 e8 30             	sub    eax,0x30
100022c2:	01 d0                	add    eax,edx
100022c4:	99                   	cdq    
100022c5:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
100022c8:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
100022cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100022ce:	83 c0 07             	add    eax,0x7
100022d1:	8a 00                	mov    al,BYTE PTR [eax]
100022d3:	0f be c0             	movsx  eax,al
100022d6:	8d 50 d0             	lea    edx,[eax-0x30]
100022d9:	89 d0                	mov    eax,edx
100022db:	c1 e0 02             	shl    eax,0x2
100022de:	01 d0                	add    eax,edx
100022e0:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
100022e7:	01 d0                	add    eax,edx
100022e9:	c1 e0 02             	shl    eax,0x2
100022ec:	89 c6                	mov    esi,eax
100022ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100022f1:	83 c0 08             	add    eax,0x8
100022f4:	8a 00                	mov    al,BYTE PTR [eax]
100022f6:	0f be c0             	movsx  eax,al
100022f9:	8d 50 d0             	lea    edx,[eax-0x30]
100022fc:	89 d0                	mov    eax,edx
100022fe:	c1 e0 02             	shl    eax,0x2
10002301:	01 d0                	add    eax,edx
10002303:	01 c0                	add    eax,eax
10002305:	8d 14 06             	lea    edx,[esi+eax*1]
10002308:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000230b:	83 c0 09             	add    eax,0x9
1000230e:	8a 00                	mov    al,BYTE PTR [eax]
10002310:	0f be c0             	movsx  eax,al
10002313:	83 e8 30             	sub    eax,0x30
10002316:	01 d0                	add    eax,edx
10002318:	99                   	cdq    
10002319:	89 45 c0             	mov    DWORD PTR [ebp-0x40],eax
1000231c:	89 55 c4             	mov    DWORD PTR [ebp-0x3c],edx
1000231f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002322:	83 c0 0b             	add    eax,0xb
10002325:	8a 00                	mov    al,BYTE PTR [eax]
10002327:	0f be c0             	movsx  eax,al
1000232a:	8d 50 d0             	lea    edx,[eax-0x30]
1000232d:	89 d0                	mov    eax,edx
1000232f:	c1 e0 02             	shl    eax,0x2
10002332:	01 d0                	add    eax,edx
10002334:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
1000233b:	01 d0                	add    eax,edx
1000233d:	c1 e0 02             	shl    eax,0x2
10002340:	89 c6                	mov    esi,eax
10002342:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002345:	83 c0 0c             	add    eax,0xc
10002348:	8a 00                	mov    al,BYTE PTR [eax]
1000234a:	0f be c0             	movsx  eax,al
1000234d:	8d 50 d0             	lea    edx,[eax-0x30]
10002350:	89 d0                	mov    eax,edx
10002352:	c1 e0 02             	shl    eax,0x2
10002355:	01 d0                	add    eax,edx
10002357:	01 c0                	add    eax,eax
10002359:	8d 14 06             	lea    edx,[esi+eax*1]
1000235c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000235f:	83 c0 0d             	add    eax,0xd
10002362:	8a 00                	mov    al,BYTE PTR [eax]
10002364:	0f be c0             	movsx  eax,al
10002367:	83 e8 30             	sub    eax,0x30
1000236a:	01 d0                	add    eax,edx
1000236c:	99                   	cdq    
1000236d:	89 45 b8             	mov    DWORD PTR [ebp-0x48],eax
10002370:	89 55 bc             	mov    DWORD PTR [ebp-0x44],edx
10002373:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
10002376:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
10002379:	0f a4 c2 0a          	shld   edx,eax,0xa
1000237d:	c1 e0 0a             	shl    eax,0xa
10002380:	89 c6                	mov    esi,eax
10002382:	89 d7                	mov    edi,edx
10002384:	89 f0                	mov    eax,esi
10002386:	0b 45 c8             	or     eax,DWORD PTR [ebp-0x38]
10002389:	89 c1                	mov    ecx,eax
1000238b:	89 f8                	mov    eax,edi
1000238d:	0b 45 cc             	or     eax,DWORD PTR [ebp-0x34]
10002390:	89 c3                	mov    ebx,eax
10002392:	8b 45 b8             	mov    eax,DWORD PTR [ebp-0x48]
10002395:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
10002398:	0f a4 c2 14          	shld   edx,eax,0x14
1000239c:	c1 e0 14             	shl    eax,0x14
1000239f:	89 ce                	mov    esi,ecx
100023a1:	89 45 a8             	mov    DWORD PTR [ebp-0x58],eax
100023a4:	89 55 ac             	mov    DWORD PTR [ebp-0x54],edx
100023a7:	0b 75 a8             	or     esi,DWORD PTR [ebp-0x58]
100023aa:	89 75 d8             	mov    DWORD PTR [ebp-0x28],esi
100023ad:	89 d8                	mov    eax,ebx
100023af:	0b 45 ac             	or     eax,DWORD PTR [ebp-0x54]
100023b2:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
100023b5:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
100023b8:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
100023bb:	0f a4 c2 0c          	shld   edx,eax,0xc
100023bf:	c1 e0 0c             	shl    eax,0xc
100023c2:	89 c3                	mov    ebx,eax
100023c4:	89 d6                	mov    esi,edx
100023c6:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
100023c9:	89 75 dc             	mov    DWORD PTR [ebp-0x24],esi
100023cc:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
100023cf:	c1 e0 04             	shl    eax,0x4
100023d2:	0b 45 ec             	or     eax,DWORD PTR [ebp-0x14]
100023d5:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
100023d8:	c1 e2 08             	shl    edx,0x8
100023db:	09 d0                	or     eax,edx
100023dd:	99                   	cdq    
100023de:	09 45 d8             	or     DWORD PTR [ebp-0x28],eax
100023e1:	09 55 dc             	or     DWORD PTR [ebp-0x24],edx
100023e4:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
100023eb:	81 7d d4 db 24 00 00 	cmp    DWORD PTR [ebp-0x2c],0x24db
100023f2:	7f 7f                	jg     10002473 <retrieveBits(char*)+0x29c>
100023f4:	6a 2a                	push   0x2a
100023f6:	6a 13                	push   0x13
100023f8:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
100023fb:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
100023fe:	e8 fc ff ff ff       	call   100023ff <retrieveBits(char*)+0x228>	100023ff: R_386_PC32	ror(unsigned long long, int, int)
10002403:	83 c4 10             	add    esp,0x10
10002406:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
10002409:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
1000240c:	6a 00                	push   0x0
1000240e:	6a 08                	push   0x8
10002410:	6a 00                	push   0x0
10002412:	6a 03                	push   0x3
10002414:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
10002417:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
1000241a:	e8 fc ff ff ff       	call   1000241b <retrieveBits(char*)+0x244>	1000241b: R_386_PC32	swapBits(unsigned long long, unsigned long long, unsigned long long)
1000241f:	83 c4 18             	add    esp,0x18
10002422:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
10002425:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
10002428:	6a 00                	push   0x0
1000242a:	6a 0c                	push   0xc
1000242c:	6a 00                	push   0x0
1000242e:	6a 0d                	push   0xd
10002430:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
10002433:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10002436:	e8 fc ff ff ff       	call   10002437 <retrieveBits(char*)+0x260>	10002437: R_386_PC32	swapBits(unsigned long long, unsigned long long, unsigned long long)
1000243b:	83 c4 18             	add    esp,0x18
1000243e:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
10002441:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
10002444:	6a 00                	push   0x0
10002446:	6a 16                	push   0x16
10002448:	6a 00                	push   0x0
1000244a:	6a 25                	push   0x25
1000244c:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
1000244f:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10002452:	e8 fc ff ff ff       	call   10002453 <retrieveBits(char*)+0x27c>	10002453: R_386_PC32	swapBits(unsigned long long, unsigned long long, unsigned long long)
10002457:	83 c4 18             	add    esp,0x18
1000245a:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
1000245d:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
10002460:	81 75 d8 95 38 e4 b5 	xor    DWORD PTR [ebp-0x28],0xb5e43895
10002467:	83 75 dc 37          	xor    DWORD PTR [ebp-0x24],0x37
1000246b:	ff 45 d4             	inc    DWORD PTR [ebp-0x2c]
1000246e:	e9 78 ff ff ff       	jmp    100023eb <retrieveBits(char*)+0x214>
10002473:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10002476:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
10002479:	8d 65 f4             	lea    esp,[ebp-0xc]
1000247c:	5b                   	pop    ebx
1000247d:	5e                   	pop    esi
1000247e:	5f                   	pop    edi
1000247f:	5d                   	pop    ebp
10002480:	c3                   	ret    

10002481 <checkKey(char*)>:
10002481:	55                   	push   ebp
10002482:	89 e5                	mov    ebp,esp
10002484:	53                   	push   ebx
10002485:	83 ec 14             	sub    esp,0x14
10002488:	83 ec 04             	sub    esp,0x4
1000248b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000248e:	e8 fc ff ff ff       	call   1000248f <checkKey(char*)+0xe>	1000248f: R_386_PC32	retrieveBits(char*)
10002493:	83 c4 08             	add    esp,0x8
10002496:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10002499:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
1000249c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
1000249f:	25 ff 7f 00 00       	and    eax,0x7fff
100024a4:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
100024a7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100024aa:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
100024ad:	0f ac d0 0f          	shrd   eax,edx,0xf
100024b1:	c1 ea 0f             	shr    edx,0xf
100024b4:	89 c1                	mov    ecx,eax
100024b6:	89 d3                	mov    ebx,edx
100024b8:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
100024bb:	83 ec 04             	sub    esp,0x4
100024be:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
100024c1:	e8 fc ff ff ff       	call   100024c2 <checkKey(char*)+0x41>	100024c2: R_386_PC32	getChecksum(unsigned int)
100024c6:	83 c4 08             	add    esp,0x8
100024c9:	39 45 ec             	cmp    DWORD PTR [ebp-0x14],eax
100024cc:	0f 95 c0             	setne  al
100024cf:	84 c0                	test   al,al
100024d1:	74 07                	je     100024da <checkKey(char*)+0x59>
100024d3:	b8 00 00 00 00       	mov    eax,0x0
100024d8:	eb 06                	jmp    100024e0 <checkKey(char*)+0x5f>
100024da:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100024dd:	83 e0 07             	and    eax,0x7
100024e0:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
100024e3:	c9                   	leave  
100024e4:	c3                   	ret    

100024e5 <changeKeyType(char*, int)>:
100024e5:	55                   	push   ebp
100024e6:	89 e5                	mov    ebp,esp
100024e8:	83 ec 10             	sub    esp,0x10
100024eb:	83 ec 04             	sub    esp,0x4
100024ee:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100024f1:	e8 fc ff ff ff       	call   100024f2 <changeKeyType(char*, int)+0xd>	100024f2: R_386_PC32	retrieveBits(char*)
100024f6:	83 c4 08             	add    esp,0x8
100024f9:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
100024fc:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
100024ff:	83 65 f8 f8          	and    DWORD PTR [ebp-0x8],0xfffffff8
10002503:	83 65 fc ff          	and    DWORD PTR [ebp-0x4],0xffffffff
10002507:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
1000250a:	99                   	cdq    
1000250b:	09 45 f8             	or     DWORD PTR [ebp-0x8],eax
1000250e:	09 55 fc             	or     DWORD PTR [ebp-0x4],edx
10002511:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
10002514:	50                   	push   eax
10002515:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002518:	e8 fc ff ff ff       	call   10002519 <changeKeyType(char*, int)+0x34>	10002519: R_386_PC32	createKey(char*, unsigned int)
1000251d:	83 c4 08             	add    esp,0x8
10002520:	83 ec 04             	sub    esp,0x4
10002523:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002526:	e8 fc ff ff ff       	call   10002527 <changeKeyType(char*, int)+0x42>	10002527: R_386_PC32	checkKey(char*)
1000252b:	83 c4 08             	add    esp,0x8
1000252e:	85 c0                	test   eax,eax
10002530:	0f 95 c0             	setne  al
10002533:	c9                   	leave  
10002534:	c3                   	ret    

10002535 <checkExtendedKey(char*)>:
10002535:	55                   	push   ebp
10002536:	89 e5                	mov    ebp,esp
10002538:	83 ec 20             	sub    esp,0x20
1000253b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000253e:	8a 00                	mov    al,BYTE PTR [eax]
10002540:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
10002543:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002546:	8a 40 01             	mov    al,BYTE PTR [eax+0x1]
10002549:	88 45 ed             	mov    BYTE PTR [ebp-0x13],al
1000254c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000254f:	8a 40 02             	mov    al,BYTE PTR [eax+0x2]
10002552:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
10002555:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002558:	8a 40 03             	mov    al,BYTE PTR [eax+0x3]
1000255b:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
1000255e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002561:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
10002564:	88 45 f0             	mov    BYTE PTR [ebp-0x10],al
10002567:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000256a:	8a 40 05             	mov    al,BYTE PTR [eax+0x5]
1000256d:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
10002570:	c6 45 f2 2d          	mov    BYTE PTR [ebp-0xe],0x2d
10002574:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002577:	8a 40 06             	mov    al,BYTE PTR [eax+0x6]
1000257a:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
1000257d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002580:	8a 40 07             	mov    al,BYTE PTR [eax+0x7]
10002583:	88 45 f4             	mov    BYTE PTR [ebp-0xc],al
10002586:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002589:	8a 40 09             	mov    al,BYTE PTR [eax+0x9]
1000258c:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
1000258f:	c6 45 f6 2d          	mov    BYTE PTR [ebp-0xa],0x2d
10002593:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002596:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
10002599:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
1000259c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000259f:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
100025a2:	88 45 f8             	mov    BYTE PTR [ebp-0x8],al
100025a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100025a8:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
100025ab:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
100025ae:	c6 45 fa 2d          	mov    BYTE PTR [ebp-0x6],0x2d
100025b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100025b5:	8a 40 0f             	mov    al,BYTE PTR [eax+0xf]
100025b8:	88 45 fb             	mov    BYTE PTR [ebp-0x5],al
100025bb:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
100025be:	48                   	dec    eax
100025bf:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
100025c2:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
100025c5:	3c 2f                	cmp    al,0x2f
100025c7:	75 04                	jne    100025cd <checkExtendedKey(char*)+0x98>
100025c9:	c6 45 ef 39          	mov    BYTE PTR [ebp-0x11],0x39
100025cd:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
100025d0:	48                   	dec    eax
100025d1:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
100025d4:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
100025d7:	3c 2f                	cmp    al,0x2f
100025d9:	75 04                	jne    100025df <checkExtendedKey(char*)+0xaa>
100025db:	c6 45 f5 39          	mov    BYTE PTR [ebp-0xb],0x39
100025df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100025e2:	83 c0 0d             	add    eax,0xd
100025e5:	8a 10                	mov    dl,BYTE PTR [eax]
100025e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100025ea:	83 c0 0c             	add    eax,0xc
100025ed:	8a 00                	mov    al,BYTE PTR [eax]
100025ef:	38 c2                	cmp    dl,al
100025f1:	74 0a                	je     100025fd <checkExtendedKey(char*)+0xc8>
100025f3:	b8 00 00 00 00       	mov    eax,0x0
100025f8:	e9 d6 00 00 00       	jmp    100026d3 <checkExtendedKey(char*)+0x19e>
100025fd:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
10002600:	3c 2f                	cmp    al,0x2f
10002602:	7e 07                	jle    1000260b <checkExtendedKey(char*)+0xd6>
10002604:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
10002607:	3c 39                	cmp    al,0x39
10002609:	7e 0a                	jle    10002615 <checkExtendedKey(char*)+0xe0>
1000260b:	b8 00 00 00 00       	mov    eax,0x0
10002610:	e9 be 00 00 00       	jmp    100026d3 <checkExtendedKey(char*)+0x19e>
10002615:	8a 45 f0             	mov    al,BYTE PTR [ebp-0x10]
10002618:	3c 2f                	cmp    al,0x2f
1000261a:	7e 07                	jle    10002623 <checkExtendedKey(char*)+0xee>
1000261c:	8a 45 f0             	mov    al,BYTE PTR [ebp-0x10]
1000261f:	3c 39                	cmp    al,0x39
10002621:	7e 0a                	jle    1000262d <checkExtendedKey(char*)+0xf8>
10002623:	b8 00 00 00 00       	mov    eax,0x0
10002628:	e9 a6 00 00 00       	jmp    100026d3 <checkExtendedKey(char*)+0x19e>
1000262d:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
10002630:	3c 2f                	cmp    al,0x2f
10002632:	7e 07                	jle    1000263b <checkExtendedKey(char*)+0x106>
10002634:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
10002637:	3c 39                	cmp    al,0x39
10002639:	7e 0a                	jle    10002645 <checkExtendedKey(char*)+0x110>
1000263b:	b8 00 00 00 00       	mov    eax,0x0
10002640:	e9 8e 00 00 00       	jmp    100026d3 <checkExtendedKey(char*)+0x19e>
10002645:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
10002648:	3c 2f                	cmp    al,0x2f
1000264a:	7e 07                	jle    10002653 <checkExtendedKey(char*)+0x11e>
1000264c:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
1000264f:	3c 39                	cmp    al,0x39
10002651:	7e 07                	jle    1000265a <checkExtendedKey(char*)+0x125>
10002653:	b8 00 00 00 00       	mov    eax,0x0
10002658:	eb 79                	jmp    100026d3 <checkExtendedKey(char*)+0x19e>
1000265a:	8a 45 f4             	mov    al,BYTE PTR [ebp-0xc]
1000265d:	3c 2f                	cmp    al,0x2f
1000265f:	7e 07                	jle    10002668 <checkExtendedKey(char*)+0x133>
10002661:	8a 45 f4             	mov    al,BYTE PTR [ebp-0xc]
10002664:	3c 39                	cmp    al,0x39
10002666:	7e 07                	jle    1000266f <checkExtendedKey(char*)+0x13a>
10002668:	b8 00 00 00 00       	mov    eax,0x0
1000266d:	eb 64                	jmp    100026d3 <checkExtendedKey(char*)+0x19e>
1000266f:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
10002672:	3c 2f                	cmp    al,0x2f
10002674:	7e 07                	jle    1000267d <checkExtendedKey(char*)+0x148>
10002676:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
10002679:	3c 39                	cmp    al,0x39
1000267b:	7e 07                	jle    10002684 <checkExtendedKey(char*)+0x14f>
1000267d:	b8 00 00 00 00       	mov    eax,0x0
10002682:	eb 4f                	jmp    100026d3 <checkExtendedKey(char*)+0x19e>
10002684:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
10002687:	3c 2f                	cmp    al,0x2f
10002689:	7e 07                	jle    10002692 <checkExtendedKey(char*)+0x15d>
1000268b:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
1000268e:	3c 39                	cmp    al,0x39
10002690:	7e 07                	jle    10002699 <checkExtendedKey(char*)+0x164>
10002692:	b8 00 00 00 00       	mov    eax,0x0
10002697:	eb 3a                	jmp    100026d3 <checkExtendedKey(char*)+0x19e>
10002699:	8a 45 f8             	mov    al,BYTE PTR [ebp-0x8]
1000269c:	3c 2f                	cmp    al,0x2f
1000269e:	7e 07                	jle    100026a7 <checkExtendedKey(char*)+0x172>
100026a0:	8a 45 f8             	mov    al,BYTE PTR [ebp-0x8]
100026a3:	3c 39                	cmp    al,0x39
100026a5:	7e 07                	jle    100026ae <checkExtendedKey(char*)+0x179>
100026a7:	b8 00 00 00 00       	mov    eax,0x0
100026ac:	eb 25                	jmp    100026d3 <checkExtendedKey(char*)+0x19e>
100026ae:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
100026b1:	3c 2f                	cmp    al,0x2f
100026b3:	7e 07                	jle    100026bc <checkExtendedKey(char*)+0x187>
100026b5:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
100026b8:	3c 39                	cmp    al,0x39
100026ba:	7e 07                	jle    100026c3 <checkExtendedKey(char*)+0x18e>
100026bc:	b8 00 00 00 00       	mov    eax,0x0
100026c1:	eb 10                	jmp    100026d3 <checkExtendedKey(char*)+0x19e>
100026c3:	83 ec 04             	sub    esp,0x4
100026c6:	8d 45 ec             	lea    eax,[ebp-0x14]
100026c9:	50                   	push   eax
100026ca:	e8 fc ff ff ff       	call   100026cb <checkExtendedKey(char*)+0x196>	100026cb: R_386_PC32	checkKey(char*)
100026cf:	83 c4 08             	add    esp,0x8
100026d2:	90                   	nop
100026d3:	c9                   	leave  
100026d4:	c3                   	ret    

100026d5 <loadTimezoneStrings()>:
100026d5:	55                   	push   ebp
100026d6:	89 e5                	mov    ebp,esp
100026d8:	53                   	push   ebx
100026d9:	83 ec 34             	sub    esp,0x34
100026dc:	83 ec 0c             	sub    esp,0xc
100026df:	68 14 01 00 00       	push   0x114
100026e4:	e8 fc ff ff ff       	call   100026e5 <loadTimezoneStrings()+0x10>	100026e5: R_386_PC32	operator new(unsigned long)
100026e9:	83 c4 10             	add    esp,0x10
100026ec:	89 c3                	mov    ebx,eax
100026ee:	a1 00 00 00 00       	mov    eax,ds:0x0	100026ef: R_386_32	kernelProcess
100026f3:	83 ec 04             	sub    esp,0x4
100026f6:	50                   	push   eax
100026f7:	68 1c 8d 00 10       	push   0x10008d1c	100026f8: R_386_32	.text
100026fc:	53                   	push   ebx
100026fd:	e8 fc ff ff ff       	call   100026fe <loadTimezoneStrings()+0x29>	100026fe: R_386_PC32	File::File(char const*, Process*)
10002702:	83 c4 10             	add    esp,0x10
10002705:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
10002708:	83 ec 08             	sub    esp,0x8
1000270b:	6a 01                	push   0x1
1000270d:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
10002710:	e8 fc ff ff ff       	call   10002711 <loadTimezoneStrings()+0x3c>	10002711: R_386_PC32	File::open(FileOpenMode)
10002715:	83 c4 10             	add    esp,0x10
10002718:	83 ec 04             	sub    esp,0x4
1000271b:	8d 45 d7             	lea    eax,[ebp-0x29]
1000271e:	50                   	push   eax
1000271f:	8d 45 d8             	lea    eax,[ebp-0x28]
10002722:	50                   	push   eax
10002723:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
10002726:	e8 fc ff ff ff       	call   10002727 <loadTimezoneStrings()+0x52>	10002727: R_386_PC32	File::stat(unsigned long long*, bool*)
1000272b:	83 c4 10             	add    esp,0x10
1000272e:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10002731:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
10002734:	83 ec 0c             	sub    esp,0xc
10002737:	50                   	push   eax
10002738:	e8 fc ff ff ff       	call   10002739 <loadTimezoneStrings()+0x64>	10002739: R_386_PC32	malloc
1000273d:	83 c4 10             	add    esp,0x10
10002740:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
10002743:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10002746:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
10002749:	83 ec 04             	sub    esp,0x4
1000274c:	50                   	push   eax
1000274d:	6a 00                	push   0x0
1000274f:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
10002752:	e8 fc ff ff ff       	call   10002753 <loadTimezoneStrings()+0x7e>	10002753: R_386_PC32	memset
10002757:	83 c4 10             	add    esp,0x10
1000275a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
1000275d:	8b 00                	mov    eax,DWORD PTR [eax]
1000275f:	83 c0 0c             	add    eax,0xc
10002762:	8b 08                	mov    ecx,DWORD PTR [eax]
10002764:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10002767:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
1000276a:	83 ec 0c             	sub    esp,0xc
1000276d:	8d 5d d0             	lea    ebx,[ebp-0x30]
10002770:	53                   	push   ebx
10002771:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
10002774:	52                   	push   edx
10002775:	50                   	push   eax
10002776:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
10002779:	ff d1                	call   ecx
1000277b:	83 c4 20             	add    esp,0x20
1000277e:	83 ec 0c             	sub    esp,0xc
10002781:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
10002784:	e8 fc ff ff ff       	call   10002785 <loadTimezoneStrings()+0xb0>	10002785: R_386_PC32	File::close()
10002789:	83 c4 10             	add    esp,0x10
1000278c:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
1000278f:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
10002792:	83 ec 08             	sub    esp,0x8
10002795:	50                   	push   eax
10002796:	68 3b 8d 00 10       	push   0x10008d3b	10002797: R_386_32	.text
1000279b:	e8 fc ff ff ff       	call   1000279c <loadTimezoneStrings()+0xc7>	1000279c: R_386_PC32	Dbg::kprintf(char const*, ...)
100027a0:	83 c4 10             	add    esp,0x10
100027a3:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
100027aa:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
100027b1:	81 7d f0 c7 00 00 00 	cmp    DWORD PTR [ebp-0x10],0xc7
100027b8:	7f 39                	jg     100027f3 <loadTimezoneStrings()+0x11e>
100027ba:	83 ec 0c             	sub    esp,0xc
100027bd:	6a 78                	push   0x78
100027bf:	e8 fc ff ff ff       	call   100027c0 <loadTimezoneStrings()+0xeb>	100027c0: R_386_PC32	malloc
100027c4:	83 c4 10             	add    esp,0x10
100027c7:	89 c2                	mov    edx,eax
100027c9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100027cc:	89 14 85 00 00 00 00 	mov    DWORD PTR [eax*4+0x0],edx	100027cf: R_386_32	timezoneStrings
100027d3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100027d6:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	100027d9: R_386_32	timezoneStrings
100027dd:	83 ec 08             	sub    esp,0x8
100027e0:	68 45 8d 00 10       	push   0x10008d45	100027e1: R_386_32	.text
100027e5:	50                   	push   eax
100027e6:	e8 fc ff ff ff       	call   100027e7 <loadTimezoneStrings()+0x112>	100027e7: R_386_PC32	strcpy
100027eb:	83 c4 10             	add    esp,0x10
100027ee:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
100027f1:	eb be                	jmp    100027b1 <loadTimezoneStrings()+0xdc>
100027f3:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
100027fa:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
100027fd:	8d 50 01             	lea    edx,[eax+0x1]
10002800:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
10002803:	89 c2                	mov    edx,eax
10002805:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10002808:	01 d0                	add    eax,edx
1000280a:	8a 00                	mov    al,BYTE PTR [eax]
1000280c:	88 45 ce             	mov    BYTE PTR [ebp-0x32],al
1000280f:	c6 45 cf 00          	mov    BYTE PTR [ebp-0x31],0x0
10002813:	8a 45 ce             	mov    al,BYTE PTR [ebp-0x32]
10002816:	3c 0d                	cmp    al,0xd
10002818:	0f 84 2e 01 00 00    	je     1000294c <loadTimezoneStrings()+0x277>
1000281e:	8a 45 ce             	mov    al,BYTE PTR [ebp-0x32]
10002821:	3c 09                	cmp    al,0x9
10002823:	75 3c                	jne    10002861 <loadTimezoneStrings()+0x18c>
10002825:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10002828:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	1000282b: R_386_32	timezoneStrings
1000282f:	83 ec 0c             	sub    esp,0xc
10002832:	50                   	push   eax
10002833:	e8 fc ff ff ff       	call   10002834 <loadTimezoneStrings()+0x15f>	10002834: R_386_PC32	strlen
10002838:	83 c4 10             	add    esp,0x10
1000283b:	83 f8 08             	cmp    eax,0x8
1000283e:	0f 87 0e 01 00 00    	ja     10002952 <loadTimezoneStrings()+0x27d>
10002844:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10002847:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	1000284a: R_386_32	timezoneStrings
1000284e:	83 ec 08             	sub    esp,0x8
10002851:	68 45 8d 00 10       	push   0x10008d45	10002852: R_386_32	.text
10002856:	50                   	push   eax
10002857:	e8 fc ff ff ff       	call   10002858 <loadTimezoneStrings()+0x183>	10002858: R_386_PC32	strcat
1000285c:	83 c4 10             	add    esp,0x10
1000285f:	eb c4                	jmp    10002825 <loadTimezoneStrings()+0x150>
10002861:	8a 45 ce             	mov    al,BYTE PTR [ebp-0x32]
10002864:	3c 0a                	cmp    al,0xa
10002866:	75 6b                	jne    100028d3 <loadTimezoneStrings()+0x1fe>
10002868:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
1000286b:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	1000286e: R_386_32	timezoneStrings
10002872:	83 ec 0c             	sub    esp,0xc
10002875:	50                   	push   eax
10002876:	e8 fc ff ff ff       	call   10002877 <loadTimezoneStrings()+0x1a2>	10002877: R_386_PC32	strlen
1000287b:	83 c4 10             	add    esp,0x10
1000287e:	83 f8 35             	cmp    eax,0x35
10002881:	77 1d                	ja     100028a0 <loadTimezoneStrings()+0x1cb>
10002883:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10002886:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	10002889: R_386_32	timezoneStrings
1000288d:	83 ec 08             	sub    esp,0x8
10002890:	68 45 8d 00 10       	push   0x10008d45	10002891: R_386_32	.text
10002895:	50                   	push   eax
10002896:	e8 fc ff ff ff       	call   10002897 <loadTimezoneStrings()+0x1c2>	10002897: R_386_PC32	strcat
1000289b:	83 c4 10             	add    esp,0x10
1000289e:	eb c8                	jmp    10002868 <loadTimezoneStrings()+0x193>
100028a0:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
100028a3:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
100028a6:	99                   	cdq    
100028a7:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
100028aa:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
100028ad:	39 c8                	cmp    eax,ecx
100028af:	89 d0                	mov    eax,edx
100028b1:	19 d8                	sbb    eax,ebx
100028b3:	0f 82 9f 00 00 00    	jb     10002958 <loadTimezoneStrings()+0x283>
100028b9:	83 ec 0c             	sub    esp,0xc
100028bc:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
100028bf:	e8 fc ff ff ff       	call   100028c0 <loadTimezoneStrings()+0x1eb>	100028c0: R_386_PC32	free
100028c4:	83 c4 10             	add    esp,0x10
100028c7:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
100028ce:	e9 8b 00 00 00       	jmp    1000295e <loadTimezoneStrings()+0x289>
100028d3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
100028d6:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	100028d9: R_386_32	timezoneStrings
100028dd:	83 ec 0c             	sub    esp,0xc
100028e0:	50                   	push   eax
100028e1:	e8 fc ff ff ff       	call   100028e2 <loadTimezoneStrings()+0x20d>	100028e2: R_386_PC32	strlen
100028e6:	83 c4 10             	add    esp,0x10
100028e9:	83 f8 31             	cmp    eax,0x31
100028ec:	77 1f                	ja     1000290d <loadTimezoneStrings()+0x238>
100028ee:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
100028f1:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	100028f4: R_386_32	timezoneStrings
100028f8:	83 ec 08             	sub    esp,0x8
100028fb:	8d 55 ce             	lea    edx,[ebp-0x32]
100028fe:	52                   	push   edx
100028ff:	50                   	push   eax
10002900:	e8 fc ff ff ff       	call   10002901 <loadTimezoneStrings()+0x22c>	10002901: R_386_PC32	strcat
10002905:	83 c4 10             	add    esp,0x10
10002908:	e9 ed fe ff ff       	jmp    100027fa <loadTimezoneStrings()+0x125>
1000290d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10002910:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	10002913: R_386_32	timezoneStrings
10002917:	83 ec 0c             	sub    esp,0xc
1000291a:	50                   	push   eax
1000291b:	e8 fc ff ff ff       	call   1000291c <loadTimezoneStrings()+0x247>	1000291c: R_386_PC32	strlen
10002920:	83 c4 10             	add    esp,0x10
10002923:	83 f8 32             	cmp    eax,0x32
10002926:	0f 85 ce fe ff ff    	jne    100027fa <loadTimezoneStrings()+0x125>
1000292c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
1000292f:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	10002932: R_386_32	timezoneStrings
10002936:	83 ec 08             	sub    esp,0x8
10002939:	68 47 8d 00 10       	push   0x10008d47	1000293a: R_386_32	.text
1000293e:	50                   	push   eax
1000293f:	e8 fc ff ff ff       	call   10002940 <loadTimezoneStrings()+0x26b>	10002940: R_386_PC32	strcat
10002944:	83 c4 10             	add    esp,0x10
10002947:	e9 ae fe ff ff       	jmp    100027fa <loadTimezoneStrings()+0x125>
1000294c:	90                   	nop
1000294d:	e9 a8 fe ff ff       	jmp    100027fa <loadTimezoneStrings()+0x125>
10002952:	90                   	nop
10002953:	e9 a2 fe ff ff       	jmp    100027fa <loadTimezoneStrings()+0x125>
10002958:	90                   	nop
10002959:	e9 9c fe ff ff       	jmp    100027fa <loadTimezoneStrings()+0x125>
1000295e:	81 7d e8 c7 00 00 00 	cmp    DWORD PTR [ebp-0x18],0xc7
10002965:	7f 23                	jg     1000298a <loadTimezoneStrings()+0x2b5>
10002967:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
1000296a:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	1000296d: R_386_32	timezoneStrings
10002971:	83 ec 04             	sub    esp,0x4
10002974:	50                   	push   eax
10002975:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
10002978:	68 4c 8d 00 10       	push   0x10008d4c	10002979: R_386_32	.text
1000297d:	e8 fc ff ff ff       	call   1000297e <loadTimezoneStrings()+0x2a9>	1000297e: R_386_PC32	Dbg::kprintf(char const*, ...)
10002982:	83 c4 10             	add    esp,0x10
10002985:	ff 45 e8             	inc    DWORD PTR [ebp-0x18]
10002988:	eb d4                	jmp    1000295e <loadTimezoneStrings()+0x289>
1000298a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
1000298d:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
10002990:	c9                   	leave  
10002991:	c3                   	ret    

10002992 <_bcrypt_rand>:
10002992:	55                   	push   ebp
10002993:	89 e5                	mov    ebp,esp
10002995:	83 ec 08             	sub    esp,0x8
10002998:	e8 fc ff ff ff       	call   10002999 <_bcrypt_rand+0x7>	10002999: R_386_PC32	KeRand()
1000299d:	c9                   	leave  
1000299e:	c3                   	ret    

1000299f <firstRun(bool)>:
1000299f:	55                   	push   ebp
100029a0:	89 e5                	mov    ebp,esp
100029a2:	57                   	push   edi
100029a3:	56                   	push   esi
100029a4:	53                   	push   ebx
100029a5:	81 ec 5c 01 00 00    	sub    esp,0x15c
100029ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100029ae:	88 85 a4 fe ff ff    	mov    BYTE PTR [ebp-0x15c],al
100029b4:	8a 85 a4 fe ff ff    	mov    al,BYTE PTR [ebp-0x15c]
100029ba:	83 f0 01             	xor    eax,0x1
100029bd:	a2 00 00 00 00       	mov    ds:0x0,al	100029be: R_386_32	showSidebar
100029c2:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	100029c4: R_386_32	guiKeyboardHandler
	100029c8: R_386_32	bootInstallKeybrd(KeyboardToken, bool*)
100029cc:	83 ec 0c             	sub    esp,0xc
100029cf:	68 54 8d 00 10       	push   0x10008d54	100029d0: R_386_32	.text
100029d4:	e8 fc ff ff ff       	call   100029d5 <firstRun(bool)+0x36>	100029d5: R_386_PC32	KeSetBootMessage(char const*)
100029d9:	83 c4 10             	add    esp,0x10
100029dc:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100029de: R_386_32	VgaText::hiddenOut
100029e3:	a1 00 00 00 00       	mov    eax,ds:0x0	100029e4: R_386_32	activeTerminal
100029e8:	83 ec 08             	sub    esp,0x8
100029eb:	68 7d 8d 00 10       	push   0x10008d7d	100029ec: R_386_32	.text
100029f0:	50                   	push   eax
100029f1:	e8 fc ff ff ff       	call   100029f2 <firstRun(bool)+0x53>	100029f2: R_386_PC32	VgaText::puts(char const*)
100029f6:	83 c4 10             	add    esp,0x10
100029f9:	a1 00 00 00 00       	mov    eax,ds:0x0	100029fa: R_386_32	kernelProcess
100029fe:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
10002a04:	83 ec 08             	sub    esp,0x8
10002a07:	68 7d 8d 00 10       	push   0x10008d7d	10002a08: R_386_32	.text
10002a0c:	50                   	push   eax
10002a0d:	e8 fc ff ff ff       	call   10002a0e <firstRun(bool)+0x6f>	10002a0e: R_386_PC32	VgaText::puts(char const*)
10002a12:	83 c4 10             	add    esp,0x10
10002a15:	83 ec 0c             	sub    esp,0xc
10002a18:	68 84 01 00 00       	push   0x184
10002a1d:	e8 fc ff ff ff       	call   10002a1e <firstRun(bool)+0x7f>	10002a1e: R_386_PC32	operator new(unsigned long)
10002a22:	83 c4 10             	add    esp,0x10
10002a25:	89 c3                	mov    ebx,eax
10002a27:	83 ec 08             	sub    esp,0x8
10002a2a:	68 84 8d 00 10       	push   0x10008d84	10002a2b: R_386_32	.text
10002a2f:	53                   	push   ebx
10002a30:	e8 fc ff ff ff       	call   10002a31 <firstRun(bool)+0x92>	10002a31: R_386_PC32	VgaText::VgaText(char const*)
10002a35:	83 c4 10             	add    esp,0x10
10002a38:	89 1d 00 00 00 00    	mov    DWORD PTR ds:0x0,ebx	10002a3a: R_386_32	term
10002a3e:	a1 00 00 00 00       	mov    eax,ds:0x0	10002a3f: R_386_32	term
10002a43:	83 ec 0c             	sub    esp,0xc
10002a46:	50                   	push   eax
10002a47:	e8 fc ff ff ff       	call   10002a48 <firstRun(bool)+0xa9>	10002a48: R_386_PC32	setActiveTerminal(VgaText*)
10002a4c:	83 c4 10             	add    esp,0x10
10002a4f:	e8 fc ff ff ff       	call   10002a50 <firstRun(bool)+0xb1>	10002a50: R_386_PC32	drawBootScreen()
10002a54:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
10002a5b:	80 bd a4 fe ff ff 00 	cmp    BYTE PTR [ebp-0x15c],0x0
10002a62:	74 17                	je     10002a7b <firstRun(bool)+0xdc>
10002a64:	83 ec 08             	sub    esp,0x8
10002a67:	68 89 8d 00 10       	push   0x10008d89	10002a68: R_386_32	.text
10002a6c:	68 00 00 00 00       	push   0x0	10002a6d: R_386_32	pkeybuf
10002a71:	e8 fc ff ff ff       	call   10002a72 <firstRun(bool)+0xd3>	10002a72: R_386_PC32	strcpy
10002a76:	83 c4 10             	add    esp,0x10
10002a79:	eb 15                	jmp    10002a90 <firstRun(bool)+0xf1>
10002a7b:	83 ec 08             	sub    esp,0x8
10002a7e:	68 9a 8d 00 10       	push   0x10008d9a	10002a7f: R_386_32	.text
10002a83:	68 00 00 00 00       	push   0x0	10002a84: R_386_32	pkeybuf
10002a88:	e8 fc ff ff ff       	call   10002a89 <firstRun(bool)+0xea>	10002a89: R_386_PC32	strcpy
10002a8d:	83 c4 10             	add    esp,0x10
10002a90:	8a 85 a4 fe ff ff    	mov    al,BYTE PTR [ebp-0x15c]
10002a96:	83 f0 01             	xor    eax,0x1
10002a99:	84 c0                	test   al,al
10002a9b:	0f 84 94 1b 00 00    	je     10004635 <firstRun(bool)+0x1c96>
10002aa1:	c7 45 d8 00 00 00 00 	mov    DWORD PTR [ebp-0x28],0x0
10002aa8:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10002aaa: R_386_32	tzsel
10002ab2:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10002ab4: R_386_32	modesel
10002abc:	eb 01                	jmp    10002abf <firstRun(bool)+0x120>
10002abe:	90                   	nop
10002abf:	e8 fc ff ff ff       	call   10002ac0 <firstRun(bool)+0x121>	10002ac0: R_386_PC32	drawBootScreen()
10002ac4:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
10002acb:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10002acd: R_386_32	installKey
10002ad2:	83 ec 0c             	sub    esp,0xc
10002ad5:	68 ab 8d 00 10       	push   0x10008dab	10002ad6: R_386_32	.text
10002ada:	6a 12                	push   0x12
10002adc:	6a 32                	push   0x32
10002ade:	6a 03                	push   0x3
10002ae0:	6a 16                	push   0x16
10002ae2:	e8 fc ff ff ff       	call   10002ae3 <firstRun(bool)+0x144>	10002ae3: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
10002ae7:	83 c4 20             	add    esp,0x20
10002aea:	a1 00 00 00 00       	mov    eax,ds:0x0	10002aeb: R_386_32	term
10002aef:	83 ec 04             	sub    esp,0x4
10002af2:	6a 06                	push   0x6
10002af4:	6a 18                	push   0x18
10002af6:	50                   	push   eax
10002af7:	e8 fc ff ff ff       	call   10002af8 <firstRun(bool)+0x159>	10002af8: R_386_PC32	VgaText::setCursor(int, int)
10002afc:	83 c4 10             	add    esp,0x10
10002aff:	a1 00 00 00 00       	mov    eax,ds:0x0	10002b00: R_386_32	term
10002b04:	83 ec 08             	sub    esp,0x8
10002b07:	68 b8 8d 00 10       	push   0x10008db8	10002b08: R_386_32	.text
10002b0c:	50                   	push   eax
10002b0d:	e8 fc ff ff ff       	call   10002b0e <firstRun(bool)+0x16f>	10002b0e: R_386_PC32	VgaText::puts(char const*)
10002b12:	83 c4 10             	add    esp,0x10
10002b15:	a1 00 00 00 00       	mov    eax,ds:0x0	10002b16: R_386_32	term
10002b1a:	83 ec 04             	sub    esp,0x4
10002b1d:	6a 07                	push   0x7
10002b1f:	6a 18                	push   0x18
10002b21:	50                   	push   eax
10002b22:	e8 fc ff ff ff       	call   10002b23 <firstRun(bool)+0x184>	10002b23: R_386_PC32	VgaText::setCursor(int, int)
10002b27:	83 c4 10             	add    esp,0x10
10002b2a:	a1 00 00 00 00       	mov    eax,ds:0x0	10002b2b: R_386_32	term
10002b2f:	83 ec 08             	sub    esp,0x8
10002b32:	68 e7 8d 00 10       	push   0x10008de7	10002b33: R_386_32	.text
10002b37:	50                   	push   eax
10002b38:	e8 fc ff ff ff       	call   10002b39 <firstRun(bool)+0x19a>	10002b39: R_386_PC32	VgaText::puts(char const*)
10002b3d:	83 c4 10             	add    esp,0x10
10002b40:	a1 00 00 00 00       	mov    eax,ds:0x0	10002b41: R_386_32	term
10002b45:	83 ec 04             	sub    esp,0x4
10002b48:	6a 09                	push   0x9
10002b4a:	6a 18                	push   0x18
10002b4c:	50                   	push   eax
10002b4d:	e8 fc ff ff ff       	call   10002b4e <firstRun(bool)+0x1af>	10002b4e: R_386_PC32	VgaText::setCursor(int, int)
10002b52:	83 c4 10             	add    esp,0x10
10002b55:	a1 00 00 00 00       	mov    eax,ds:0x0	10002b56: R_386_32	term
10002b5a:	83 ec 08             	sub    esp,0x8
10002b5d:	68 f7 8d 00 10       	push   0x10008df7	10002b5e: R_386_32	.text
10002b62:	50                   	push   eax
10002b63:	e8 fc ff ff ff       	call   10002b64 <firstRun(bool)+0x1c5>	10002b64: R_386_PC32	VgaText::puts(char const*)
10002b68:	83 c4 10             	add    esp,0x10
10002b6b:	a1 00 00 00 00       	mov    eax,ds:0x0	10002b6c: R_386_32	term
10002b70:	83 ec 04             	sub    esp,0x4
10002b73:	6a 0b                	push   0xb
10002b75:	6a 18                	push   0x18
10002b77:	50                   	push   eax
10002b78:	e8 fc ff ff ff       	call   10002b79 <firstRun(bool)+0x1da>	10002b79: R_386_PC32	VgaText::setCursor(int, int)
10002b7d:	83 c4 10             	add    esp,0x10
10002b80:	a1 00 00 00 00       	mov    eax,ds:0x0	10002b81: R_386_32	term
10002b85:	83 ec 08             	sub    esp,0x8
10002b88:	68 fc 8d 00 10       	push   0x10008dfc	10002b89: R_386_32	.text
10002b8d:	50                   	push   eax
10002b8e:	e8 fc ff ff ff       	call   10002b8f <firstRun(bool)+0x1f0>	10002b8f: R_386_PC32	VgaText::puts(char const*)
10002b93:	83 c4 10             	add    esp,0x10
10002b96:	a1 00 00 00 00       	mov    eax,ds:0x0	10002b97: R_386_32	term
10002b9b:	83 ec 04             	sub    esp,0x4
10002b9e:	6a 0d                	push   0xd
10002ba0:	6a 18                	push   0x18
10002ba2:	50                   	push   eax
10002ba3:	e8 fc ff ff ff       	call   10002ba4 <firstRun(bool)+0x205>	10002ba4: R_386_PC32	VgaText::setCursor(int, int)
10002ba8:	83 c4 10             	add    esp,0x10
10002bab:	a1 00 00 00 00       	mov    eax,ds:0x0	10002bac: R_386_32	term
10002bb0:	83 ec 08             	sub    esp,0x8
10002bb3:	68 04 8e 00 10       	push   0x10008e04	10002bb4: R_386_32	.text
10002bb8:	50                   	push   eax
10002bb9:	e8 fc ff ff ff       	call   10002bba <firstRun(bool)+0x21b>	10002bba: R_386_PC32	VgaText::puts(char const*)
10002bbe:	83 c4 10             	add    esp,0x10
10002bc1:	a1 00 00 00 00       	mov    eax,ds:0x0	10002bc2: R_386_32	term
10002bc6:	83 ec 04             	sub    esp,0x4
10002bc9:	6a 0f                	push   0xf
10002bcb:	6a 18                	push   0x18
10002bcd:	50                   	push   eax
10002bce:	e8 fc ff ff ff       	call   10002bcf <firstRun(bool)+0x230>	10002bcf: R_386_PC32	VgaText::setCursor(int, int)
10002bd3:	83 c4 10             	add    esp,0x10
10002bd6:	a1 00 00 00 00       	mov    eax,ds:0x0	10002bd7: R_386_32	term
10002bdb:	83 ec 08             	sub    esp,0x8
10002bde:	68 0d 8e 00 10       	push   0x10008e0d	10002bdf: R_386_32	.text
10002be3:	50                   	push   eax
10002be4:	e8 fc ff ff ff       	call   10002be5 <firstRun(bool)+0x246>	10002be5: R_386_PC32	VgaText::puts(char const*)
10002be9:	83 c4 10             	add    esp,0x10
10002bec:	a1 00 00 00 00       	mov    eax,ds:0x0	10002bed: R_386_32	term
10002bf1:	83 ec 04             	sub    esp,0x4
10002bf4:	6a 10                	push   0x10
10002bf6:	6a 18                	push   0x18
10002bf8:	50                   	push   eax
10002bf9:	e8 fc ff ff ff       	call   10002bfa <firstRun(bool)+0x25b>	10002bfa: R_386_PC32	VgaText::setCursor(int, int)
10002bfe:	83 c4 10             	add    esp,0x10
10002c01:	a1 00 00 00 00       	mov    eax,ds:0x0	10002c02: R_386_32	term
10002c06:	83 ec 08             	sub    esp,0x8
10002c09:	68 15 8e 00 10       	push   0x10008e15	10002c0a: R_386_32	.text
10002c0e:	50                   	push   eax
10002c0f:	e8 fc ff ff ff       	call   10002c10 <firstRun(bool)+0x271>	10002c10: R_386_PC32	VgaText::puts(char const*)
10002c14:	83 c4 10             	add    esp,0x10
10002c17:	a1 00 00 00 00       	mov    eax,ds:0x0	10002c18: R_386_32	term
10002c1c:	83 ec 04             	sub    esp,0x4
10002c1f:	6a 09                	push   0x9
10002c21:	6a 21                	push   0x21
10002c23:	50                   	push   eax
10002c24:	e8 fc ff ff ff       	call   10002c25 <firstRun(bool)+0x286>	10002c25: R_386_PC32	VgaText::setCursor(int, int)
10002c29:	83 c4 10             	add    esp,0x10
10002c2c:	a1 00 00 00 00       	mov    eax,ds:0x0	10002c2d: R_386_32	term
10002c31:	6a 07                	push   0x7
10002c33:	6a 00                	push   0x0
10002c35:	68 20 8e 00 10       	push   0x10008e20	10002c36: R_386_32	.text
10002c3a:	50                   	push   eax
10002c3b:	e8 fc ff ff ff       	call   10002c3c <firstRun(bool)+0x29d>	10002c3c: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002c40:	83 c4 10             	add    esp,0x10
10002c43:	a1 00 00 00 00       	mov    eax,ds:0x0	10002c44: R_386_32	term
10002c48:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
10002c4c:	75 07                	jne    10002c55 <firstRun(bool)+0x2b6>
10002c4e:	ba 45 8e 00 10       	mov    edx,0x10008e45	10002c4f: R_386_32	.text
10002c53:	eb 05                	jmp    10002c5a <firstRun(bool)+0x2bb>
10002c55:	ba 48 8e 00 10       	mov    edx,0x10008e48	10002c56: R_386_32	.text
10002c5a:	6a 0f                	push   0xf
10002c5c:	6a 00                	push   0x0
10002c5e:	52                   	push   edx
10002c5f:	50                   	push   eax
10002c60:	e8 fc ff ff ff       	call   10002c61 <firstRun(bool)+0x2c2>	10002c61: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002c65:	83 c4 10             	add    esp,0x10
10002c68:	a1 00 00 00 00       	mov    eax,ds:0x0	10002c69: R_386_32	term
10002c6d:	83 ec 08             	sub    esp,0x8
10002c70:	6a 21                	push   0x21
10002c72:	50                   	push   eax
10002c73:	e8 fc ff ff ff       	call   10002c74 <firstRun(bool)+0x2d5>	10002c74: R_386_PC32	VgaText::setCursorX(int)
10002c78:	83 c4 10             	add    esp,0x10
10002c7b:	a1 00 00 00 00       	mov    eax,ds:0x0	10002c7c: R_386_32	term
10002c80:	6a 07                	push   0x7
10002c82:	6a 00                	push   0x0
10002c84:	68 00 00 00 00       	push   0x0	10002c85: R_386_32	currName
10002c89:	50                   	push   eax
10002c8a:	e8 fc ff ff ff       	call   10002c8b <firstRun(bool)+0x2ec>	10002c8b: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002c8f:	83 c4 10             	add    esp,0x10
10002c92:	a1 00 00 00 00       	mov    eax,ds:0x0	10002c93: R_386_32	term
10002c97:	83 ec 04             	sub    esp,0x4
10002c9a:	6a 0b                	push   0xb
10002c9c:	6a 21                	push   0x21
10002c9e:	50                   	push   eax
10002c9f:	e8 fc ff ff ff       	call   10002ca0 <firstRun(bool)+0x301>	10002ca0: R_386_PC32	VgaText::setCursor(int, int)
10002ca4:	83 c4 10             	add    esp,0x10
10002ca7:	a1 00 00 00 00       	mov    eax,ds:0x0	10002ca8: R_386_32	term
10002cac:	6a 07                	push   0x7
10002cae:	6a 00                	push   0x0
10002cb0:	68 20 8e 00 10       	push   0x10008e20	10002cb1: R_386_32	.text
10002cb5:	50                   	push   eax
10002cb6:	e8 fc ff ff ff       	call   10002cb7 <firstRun(bool)+0x318>	10002cb7: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002cbb:	83 c4 10             	add    esp,0x10
10002cbe:	a1 00 00 00 00       	mov    eax,ds:0x0	10002cbf: R_386_32	term
10002cc3:	83 7d dc 01          	cmp    DWORD PTR [ebp-0x24],0x1
10002cc7:	75 07                	jne    10002cd0 <firstRun(bool)+0x331>
10002cc9:	ba 45 8e 00 10       	mov    edx,0x10008e45	10002cca: R_386_32	.text
10002cce:	eb 05                	jmp    10002cd5 <firstRun(bool)+0x336>
10002cd0:	ba 48 8e 00 10       	mov    edx,0x10008e48	10002cd1: R_386_32	.text
10002cd5:	6a 0f                	push   0xf
10002cd7:	6a 00                	push   0x0
10002cd9:	52                   	push   edx
10002cda:	50                   	push   eax
10002cdb:	e8 fc ff ff ff       	call   10002cdc <firstRun(bool)+0x33d>	10002cdc: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002ce0:	83 c4 10             	add    esp,0x10
10002ce3:	a1 00 00 00 00       	mov    eax,ds:0x0	10002ce4: R_386_32	term
10002ce8:	83 ec 08             	sub    esp,0x8
10002ceb:	6a 21                	push   0x21
10002ced:	50                   	push   eax
10002cee:	e8 fc ff ff ff       	call   10002cef <firstRun(bool)+0x350>	10002cef: R_386_PC32	VgaText::setCursorX(int)
10002cf3:	83 c4 10             	add    esp,0x10
10002cf6:	a1 00 00 00 00       	mov    eax,ds:0x0	10002cf7: R_386_32	term
10002cfb:	6a 07                	push   0x7
10002cfd:	6a 00                	push   0x0
10002cff:	68 00 00 00 00       	push   0x0	10002d00: R_386_32	currComp
10002d04:	50                   	push   eax
10002d05:	e8 fc ff ff ff       	call   10002d06 <firstRun(bool)+0x367>	10002d06: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002d0a:	83 c4 10             	add    esp,0x10
10002d0d:	a1 00 00 00 00       	mov    eax,ds:0x0	10002d0e: R_386_32	term
10002d12:	83 ec 04             	sub    esp,0x4
10002d15:	6a 0d                	push   0xd
10002d17:	6a 21                	push   0x21
10002d19:	50                   	push   eax
10002d1a:	e8 fc ff ff ff       	call   10002d1b <firstRun(bool)+0x37c>	10002d1b: R_386_PC32	VgaText::setCursor(int, int)
10002d1f:	83 c4 10             	add    esp,0x10
10002d22:	a1 00 00 00 00       	mov    eax,ds:0x0	10002d23: R_386_32	term
10002d27:	6a 07                	push   0x7
10002d29:	6a 00                	push   0x0
10002d2b:	68 20 8e 00 10       	push   0x10008e20	10002d2c: R_386_32	.text
10002d30:	50                   	push   eax
10002d31:	e8 fc ff ff ff       	call   10002d32 <firstRun(bool)+0x393>	10002d32: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002d36:	83 c4 10             	add    esp,0x10
10002d39:	a1 00 00 00 00       	mov    eax,ds:0x0	10002d3a: R_386_32	term
10002d3e:	83 7d dc 02          	cmp    DWORD PTR [ebp-0x24],0x2
10002d42:	75 07                	jne    10002d4b <firstRun(bool)+0x3ac>
10002d44:	ba 45 8e 00 10       	mov    edx,0x10008e45	10002d45: R_386_32	.text
10002d49:	eb 05                	jmp    10002d50 <firstRun(bool)+0x3b1>
10002d4b:	ba 48 8e 00 10       	mov    edx,0x10008e48	10002d4c: R_386_32	.text
10002d50:	6a 0f                	push   0xf
10002d52:	6a 00                	push   0x0
10002d54:	52                   	push   edx
10002d55:	50                   	push   eax
10002d56:	e8 fc ff ff ff       	call   10002d57 <firstRun(bool)+0x3b8>	10002d57: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002d5b:	83 c4 10             	add    esp,0x10
10002d5e:	a1 00 00 00 00       	mov    eax,ds:0x0	10002d5f: R_386_32	term
10002d63:	83 ec 08             	sub    esp,0x8
10002d66:	6a 21                	push   0x21
10002d68:	50                   	push   eax
10002d69:	e8 fc ff ff ff       	call   10002d6a <firstRun(bool)+0x3cb>	10002d6a: R_386_PC32	VgaText::setCursorX(int)
10002d6e:	83 c4 10             	add    esp,0x10
10002d71:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
10002d78:	83 ec 0c             	sub    esp,0xc
10002d7b:	68 00 00 00 00       	push   0x0	10002d7c: R_386_32	passwbufA
10002d80:	e8 fc ff ff ff       	call   10002d81 <firstRun(bool)+0x3e2>	10002d81: R_386_PC32	strlen
10002d85:	83 c4 10             	add    esp,0x10
10002d88:	89 c2                	mov    edx,eax
10002d8a:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10002d8d:	39 c2                	cmp    edx,eax
10002d8f:	76 1c                	jbe    10002dad <firstRun(bool)+0x40e>
10002d91:	a1 00 00 00 00       	mov    eax,ds:0x0	10002d92: R_386_32	term
10002d96:	6a 07                	push   0x7
10002d98:	6a 00                	push   0x0
10002d9a:	68 4c 8e 00 10       	push   0x10008e4c	10002d9b: R_386_32	.text
10002d9f:	50                   	push   eax
10002da0:	e8 fc ff ff ff       	call   10002da1 <firstRun(bool)+0x402>	10002da1: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002da5:	83 c4 10             	add    esp,0x10
10002da8:	ff 45 d4             	inc    DWORD PTR [ebp-0x2c]
10002dab:	eb cb                	jmp    10002d78 <firstRun(bool)+0x3d9>
10002dad:	a1 00 00 00 00       	mov    eax,ds:0x0	10002dae: R_386_32	term
10002db2:	83 ec 04             	sub    esp,0x4
10002db5:	6a 0f                	push   0xf
10002db7:	6a 21                	push   0x21
10002db9:	50                   	push   eax
10002dba:	e8 fc ff ff ff       	call   10002dbb <firstRun(bool)+0x41c>	10002dbb: R_386_PC32	VgaText::setCursor(int, int)
10002dbf:	83 c4 10             	add    esp,0x10
10002dc2:	a1 00 00 00 00       	mov    eax,ds:0x0	10002dc3: R_386_32	term
10002dc7:	6a 07                	push   0x7
10002dc9:	6a 00                	push   0x0
10002dcb:	68 20 8e 00 10       	push   0x10008e20	10002dcc: R_386_32	.text
10002dd0:	50                   	push   eax
10002dd1:	e8 fc ff ff ff       	call   10002dd2 <firstRun(bool)+0x433>	10002dd2: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002dd6:	83 c4 10             	add    esp,0x10
10002dd9:	a1 00 00 00 00       	mov    eax,ds:0x0	10002dda: R_386_32	term
10002dde:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
10002de2:	75 07                	jne    10002deb <firstRun(bool)+0x44c>
10002de4:	ba 45 8e 00 10       	mov    edx,0x10008e45	10002de5: R_386_32	.text
10002de9:	eb 05                	jmp    10002df0 <firstRun(bool)+0x451>
10002deb:	ba 48 8e 00 10       	mov    edx,0x10008e48	10002dec: R_386_32	.text
10002df0:	6a 0f                	push   0xf
10002df2:	6a 00                	push   0x0
10002df4:	52                   	push   edx
10002df5:	50                   	push   eax
10002df6:	e8 fc ff ff ff       	call   10002df7 <firstRun(bool)+0x458>	10002df7: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002dfb:	83 c4 10             	add    esp,0x10
10002dfe:	a1 00 00 00 00       	mov    eax,ds:0x0	10002dff: R_386_32	term
10002e03:	83 ec 08             	sub    esp,0x8
10002e06:	6a 21                	push   0x21
10002e08:	50                   	push   eax
10002e09:	e8 fc ff ff ff       	call   10002e0a <firstRun(bool)+0x46b>	10002e0a: R_386_PC32	VgaText::setCursorX(int)
10002e0e:	83 c4 10             	add    esp,0x10
10002e11:	c7 45 d0 00 00 00 00 	mov    DWORD PTR [ebp-0x30],0x0
10002e18:	83 ec 0c             	sub    esp,0xc
10002e1b:	68 00 00 00 00       	push   0x0	10002e1c: R_386_32	passwbufB
10002e20:	e8 fc ff ff ff       	call   10002e21 <firstRun(bool)+0x482>	10002e21: R_386_PC32	strlen
10002e25:	83 c4 10             	add    esp,0x10
10002e28:	89 c2                	mov    edx,eax
10002e2a:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
10002e2d:	39 c2                	cmp    edx,eax
10002e2f:	76 1c                	jbe    10002e4d <firstRun(bool)+0x4ae>
10002e31:	a1 00 00 00 00       	mov    eax,ds:0x0	10002e32: R_386_32	term
10002e36:	6a 07                	push   0x7
10002e38:	6a 00                	push   0x0
10002e3a:	68 4c 8e 00 10       	push   0x10008e4c	10002e3b: R_386_32	.text
10002e3f:	50                   	push   eax
10002e40:	e8 fc ff ff ff       	call   10002e41 <firstRun(bool)+0x4a2>	10002e41: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002e45:	83 c4 10             	add    esp,0x10
10002e48:	ff 45 d0             	inc    DWORD PTR [ebp-0x30]
10002e4b:	eb cb                	jmp    10002e18 <firstRun(bool)+0x479>
10002e4d:	a1 00 00 00 00       	mov    eax,ds:0x0	10002e4e: R_386_32	term
10002e52:	83 ec 04             	sub    esp,0x4
10002e55:	6a 14                	push   0x14
10002e57:	6a 18                	push   0x18
10002e59:	50                   	push   eax
10002e5a:	e8 fc ff ff ff       	call   10002e5b <firstRun(bool)+0x4bc>	10002e5b: R_386_PC32	VgaText::setCursor(int, int)
10002e5f:	83 c4 10             	add    esp,0x10
10002e62:	a1 00 00 00 00       	mov    eax,ds:0x0	10002e63: R_386_32	term
10002e67:	83 7d dc 04          	cmp    DWORD PTR [ebp-0x24],0x4
10002e6b:	75 07                	jne    10002e74 <firstRun(bool)+0x4d5>
10002e6d:	ba 4e 8e 00 10       	mov    edx,0x10008e4e	10002e6e: R_386_32	.text
10002e72:	eb 05                	jmp    10002e79 <firstRun(bool)+0x4da>
10002e74:	ba 64 8e 00 10       	mov    edx,0x10008e64	10002e75: R_386_32	.text
10002e79:	6a 0f                	push   0xf
10002e7b:	6a 08                	push   0x8
10002e7d:	52                   	push   edx
10002e7e:	50                   	push   eax
10002e7f:	e8 fc ff ff ff       	call   10002e80 <firstRun(bool)+0x4e1>	10002e80: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002e84:	83 c4 10             	add    esp,0x10
10002e87:	a1 00 00 00 00       	mov    eax,ds:0x0	10002e88: R_386_32	term
10002e8c:	83 ec 04             	sub    esp,0x4
10002e8f:	6a 14                	push   0x14
10002e91:	6a 3c                	push   0x3c
10002e93:	50                   	push   eax
10002e94:	e8 fc ff ff ff       	call   10002e95 <firstRun(bool)+0x4f6>	10002e95: R_386_PC32	VgaText::setCursor(int, int)
10002e99:	83 c4 10             	add    esp,0x10
10002e9c:	83 7d dc 04          	cmp    DWORD PTR [ebp-0x24],0x4
10002ea0:	74 19                	je     10002ebb <firstRun(bool)+0x51c>
10002ea2:	a1 00 00 00 00       	mov    eax,ds:0x0	10002ea3: R_386_32	term
10002ea7:	6a 08                	push   0x8
10002ea9:	6a 0f                	push   0xf
10002eab:	68 7b 8e 00 10       	push   0x10008e7b	10002eac: R_386_32	.text
10002eb0:	50                   	push   eax
10002eb1:	e8 fc ff ff ff       	call   10002eb2 <firstRun(bool)+0x513>	10002eb2: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002eb6:	83 c4 10             	add    esp,0x10
10002eb9:	eb 17                	jmp    10002ed2 <firstRun(bool)+0x533>
10002ebb:	a1 00 00 00 00       	mov    eax,ds:0x0	10002ebc: R_386_32	term
10002ec0:	6a 01                	push   0x1
10002ec2:	6a 0f                	push   0xf
10002ec4:	68 7b 8e 00 10       	push   0x10008e7b	10002ec5: R_386_32	.text
10002ec9:	50                   	push   eax
10002eca:	e8 fc ff ff ff       	call   10002ecb <firstRun(bool)+0x52c>	10002ecb: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002ecf:	83 c4 10             	add    esp,0x10
10002ed2:	a1 00 00 00 00       	mov    eax,ds:0x0	10002ed3: R_386_32	term
10002ed7:	83 7d dc 04          	cmp    DWORD PTR [ebp-0x24],0x4
10002edb:	75 07                	jne    10002ee4 <firstRun(bool)+0x545>
10002edd:	ba 84 8e 00 10       	mov    edx,0x10008e84	10002ede: R_386_32	.text
10002ee2:	eb 05                	jmp    10002ee9 <firstRun(bool)+0x54a>
10002ee4:	ba 48 8e 00 10       	mov    edx,0x10008e48	10002ee5: R_386_32	.text
10002ee9:	6a 0f                	push   0xf
10002eeb:	6a 00                	push   0x0
10002eed:	52                   	push   edx
10002eee:	50                   	push   eax
10002eef:	e8 fc ff ff ff       	call   10002ef0 <firstRun(bool)+0x551>	10002ef0: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002ef4:	83 c4 10             	add    esp,0x10
10002ef7:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
10002efb:	75 28                	jne    10002f25 <firstRun(bool)+0x586>
10002efd:	8b 1d 00 00 00 00    	mov    ebx,DWORD PTR ds:0x0	10002eff: R_386_32	term
10002f03:	83 ec 0c             	sub    esp,0xc
10002f06:	68 00 00 00 00       	push   0x0	10002f07: R_386_32	currName
10002f0b:	e8 fc ff ff ff       	call   10002f0c <firstRun(bool)+0x56d>	10002f0c: R_386_PC32	strlen
10002f10:	83 c4 10             	add    esp,0x10
10002f13:	83 c0 21             	add    eax,0x21
10002f16:	83 ec 04             	sub    esp,0x4
10002f19:	6a 09                	push   0x9
10002f1b:	50                   	push   eax
10002f1c:	53                   	push   ebx
10002f1d:	e8 fc ff ff ff       	call   10002f1e <firstRun(bool)+0x57f>	10002f1e: R_386_PC32	VgaText::setCursor(int, int)
10002f22:	83 c4 10             	add    esp,0x10
10002f25:	83 7d dc 01          	cmp    DWORD PTR [ebp-0x24],0x1
10002f29:	75 28                	jne    10002f53 <firstRun(bool)+0x5b4>
10002f2b:	8b 1d 00 00 00 00    	mov    ebx,DWORD PTR ds:0x0	10002f2d: R_386_32	term
10002f31:	83 ec 0c             	sub    esp,0xc
10002f34:	68 00 00 00 00       	push   0x0	10002f35: R_386_32	currComp
10002f39:	e8 fc ff ff ff       	call   10002f3a <firstRun(bool)+0x59b>	10002f3a: R_386_PC32	strlen
10002f3e:	83 c4 10             	add    esp,0x10
10002f41:	83 c0 21             	add    eax,0x21
10002f44:	83 ec 04             	sub    esp,0x4
10002f47:	6a 0b                	push   0xb
10002f49:	50                   	push   eax
10002f4a:	53                   	push   ebx
10002f4b:	e8 fc ff ff ff       	call   10002f4c <firstRun(bool)+0x5ad>	10002f4c: R_386_PC32	VgaText::setCursor(int, int)
10002f50:	83 c4 10             	add    esp,0x10
10002f53:	83 7d dc 02          	cmp    DWORD PTR [ebp-0x24],0x2
10002f57:	75 28                	jne    10002f81 <firstRun(bool)+0x5e2>
10002f59:	8b 1d 00 00 00 00    	mov    ebx,DWORD PTR ds:0x0	10002f5b: R_386_32	term
10002f5f:	83 ec 0c             	sub    esp,0xc
10002f62:	68 00 00 00 00       	push   0x0	10002f63: R_386_32	passwbufA
10002f67:	e8 fc ff ff ff       	call   10002f68 <firstRun(bool)+0x5c9>	10002f68: R_386_PC32	strlen
10002f6c:	83 c4 10             	add    esp,0x10
10002f6f:	83 c0 21             	add    eax,0x21
10002f72:	83 ec 04             	sub    esp,0x4
10002f75:	6a 0d                	push   0xd
10002f77:	50                   	push   eax
10002f78:	53                   	push   ebx
10002f79:	e8 fc ff ff ff       	call   10002f7a <firstRun(bool)+0x5db>	10002f7a: R_386_PC32	VgaText::setCursor(int, int)
10002f7e:	83 c4 10             	add    esp,0x10
10002f81:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
10002f85:	75 28                	jne    10002faf <firstRun(bool)+0x610>
10002f87:	8b 1d 00 00 00 00    	mov    ebx,DWORD PTR ds:0x0	10002f89: R_386_32	term
10002f8d:	83 ec 0c             	sub    esp,0xc
10002f90:	68 00 00 00 00       	push   0x0	10002f91: R_386_32	passwbufB
10002f95:	e8 fc ff ff ff       	call   10002f96 <firstRun(bool)+0x5f7>	10002f96: R_386_PC32	strlen
10002f9a:	83 c4 10             	add    esp,0x10
10002f9d:	83 c0 21             	add    eax,0x21
10002fa0:	83 ec 04             	sub    esp,0x4
10002fa3:	6a 0f                	push   0xf
10002fa5:	50                   	push   eax
10002fa6:	53                   	push   ebx
10002fa7:	e8 fc ff ff ff       	call   10002fa8 <firstRun(bool)+0x609>	10002fa8: R_386_PC32	VgaText::setCursor(int, int)
10002fac:	83 c4 10             	add    esp,0x10
10002faf:	83 7d dc 04          	cmp    DWORD PTR [ebp-0x24],0x4
10002fb3:	75 15                	jne    10002fca <firstRun(bool)+0x62b>
10002fb5:	a1 00 00 00 00       	mov    eax,ds:0x0	10002fb6: R_386_32	term
10002fba:	83 ec 04             	sub    esp,0x4
10002fbd:	6a 02                	push   0x2
10002fbf:	6a 00                	push   0x0
10002fc1:	50                   	push   eax
10002fc2:	e8 fc ff ff ff       	call   10002fc3 <firstRun(bool)+0x624>	10002fc3: R_386_PC32	VgaText::setCursor(int, int)
10002fc7:	83 c4 10             	add    esp,0x10
10002fca:	a0 00 00 00 00       	mov    al,ds:0x0	10002fcb: R_386_32	installKey
10002fcf:	84 c0                	test   al,al
10002fd1:	0f 94 c0             	sete   al
10002fd4:	84 c0                	test   al,al
10002fd6:	74 02                	je     10002fda <firstRun(bool)+0x63b>
10002fd8:	eb f0                	jmp    10002fca <firstRun(bool)+0x62b>
10002fda:	a1 00 00 00 00       	mov    eax,ds:0x0	10002fdb: R_386_32	term
10002fdf:	05 82 00 00 00       	add    eax,0x82
10002fe4:	83 ec 04             	sub    esp,0x4
10002fe7:	6a 10                	push   0x10
10002fe9:	6a 00                	push   0x0
10002feb:	50                   	push   eax
10002fec:	e8 fc ff ff ff       	call   10002fed <firstRun(bool)+0x64e>	10002fed: R_386_PC32	memset
10002ff1:	83 c4 10             	add    esp,0x10
10002ff4:	a1 00 00 00 00       	mov    eax,ds:0x0	10002ff5: R_386_32	term
10002ff9:	05 02 01 00 00       	add    eax,0x102
10002ffe:	83 ec 04             	sub    esp,0x4
10003001:	6a 10                	push   0x10
10003003:	6a 00                	push   0x0
10003005:	50                   	push   eax
10003006:	e8 fc ff ff ff       	call   10003007 <firstRun(bool)+0x668>	10003007: R_386_PC32	memset
1000300b:	83 c4 10             	add    esp,0x10
1000300e:	a0 00 00 00 00       	mov    al,ds:0x0	1000300f: R_386_32	installKey
10003013:	3c 09                	cmp    al,0x9
10003015:	74 09                	je     10003020 <firstRun(bool)+0x681>
10003017:	a0 00 00 00 00       	mov    al,ds:0x0	10003018: R_386_32	installKey
1000301c:	3c 0a                	cmp    al,0xa
1000301e:	75 04                	jne    10003024 <firstRun(bool)+0x685>
10003020:	b0 01                	mov    al,0x1
10003022:	eb 02                	jmp    10003026 <firstRun(bool)+0x687>
10003024:	b0 00                	mov    al,0x0
10003026:	84 c0                	test   al,al
10003028:	0f 84 93 00 00 00    	je     100030c1 <firstRun(bool)+0x722>
1000302e:	83 7d dc 04          	cmp    DWORD PTR [ebp-0x24],0x4
10003032:	75 0d                	jne    10003041 <firstRun(bool)+0x6a2>
10003034:	a0 00 00 00 00       	mov    al,ds:0x0	10003035: R_386_32	installKey
10003039:	3c 0a                	cmp    al,0xa
1000303b:	75 04                	jne    10003041 <firstRun(bool)+0x6a2>
1000303d:	b0 01                	mov    al,0x1
1000303f:	eb 02                	jmp    10003043 <firstRun(bool)+0x6a4>
10003041:	b0 00                	mov    al,0x0
10003043:	84 c0                	test   al,al
10003045:	74 55                	je     1000309c <firstRun(bool)+0x6fd>
10003047:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10003049: R_386_32	installKey
1000304e:	83 ec 08             	sub    esp,0x8
10003051:	68 00 00 00 00       	push   0x0	10003052: R_386_32	passwbufB
10003056:	68 00 00 00 00       	push   0x0	10003057: R_386_32	passwbufA
1000305b:	e8 fc ff ff ff       	call   1000305c <firstRun(bool)+0x6bd>	1000305c: R_386_PC32	strcmp
10003060:	83 c4 10             	add    esp,0x10
10003063:	85 c0                	test   eax,eax
10003065:	0f 84 73 02 00 00    	je     100032de <firstRun(bool)+0x93f>
1000306b:	c7 45 dc 02 00 00 00 	mov    DWORD PTR [ebp-0x24],0x2
10003072:	83 ec 04             	sub    esp,0x4
10003075:	6a 30                	push   0x30
10003077:	6a 00                	push   0x0
10003079:	68 00 00 00 00       	push   0x0	1000307a: R_386_32	passwbufA
1000307e:	e8 fc ff ff ff       	call   1000307f <firstRun(bool)+0x6e0>	1000307f: R_386_PC32	memset
10003083:	83 c4 10             	add    esp,0x10
10003086:	83 ec 04             	sub    esp,0x4
10003089:	6a 30                	push   0x30
1000308b:	6a 00                	push   0x0
1000308d:	68 00 00 00 00       	push   0x0	1000308e: R_386_32	passwbufB
10003092:	e8 fc ff ff ff       	call   10003093 <firstRun(bool)+0x6f4>	10003093: R_386_PC32	memset
10003097:	83 c4 10             	add    esp,0x10
1000309a:	eb 10                	jmp    100030ac <firstRun(bool)+0x70d>
1000309c:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
1000309f:	83 7d dc 05          	cmp    DWORD PTR [ebp-0x24],0x5
100030a3:	75 07                	jne    100030ac <firstRun(bool)+0x70d>
100030a5:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
100030ac:	83 ec 0c             	sub    esp,0xc
100030af:	68 2c 01 00 00       	push   0x12c
100030b4:	e8 fc ff ff ff       	call   100030b5 <firstRun(bool)+0x716>	100030b5: R_386_PC32	milliTenthSleep(unsigned int)
100030b9:	83 c4 10             	add    esp,0x10
100030bc:	e9 11 02 00 00       	jmp    100032d2 <firstRun(bool)+0x933>
100030c1:	a0 00 00 00 00       	mov    al,ds:0x0	100030c2: R_386_32	installKey
100030c6:	3c 1f                	cmp    al,0x1f
100030c8:	7e 0d                	jle    100030d7 <firstRun(bool)+0x738>
100030ca:	a0 00 00 00 00       	mov    al,ds:0x0	100030cb: R_386_32	installKey
100030cf:	3c 7f                	cmp    al,0x7f
100030d1:	74 04                	je     100030d7 <firstRun(bool)+0x738>
100030d3:	b0 01                	mov    al,0x1
100030d5:	eb 02                	jmp    100030d9 <firstRun(bool)+0x73a>
100030d7:	b0 00                	mov    al,0x0
100030d9:	84 c0                	test   al,al
100030db:	0f 84 e7 00 00 00    	je     100031c8 <firstRun(bool)+0x829>
100030e1:	a0 00 00 00 00       	mov    al,ds:0x0	100030e2: R_386_32	installKey
100030e6:	88 85 c6 fe ff ff    	mov    BYTE PTR [ebp-0x13a],al
100030ec:	c6 85 c7 fe ff ff 00 	mov    BYTE PTR [ebp-0x139],0x0
100030f3:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
100030f7:	75 2c                	jne    10003125 <firstRun(bool)+0x786>
100030f9:	83 ec 0c             	sub    esp,0xc
100030fc:	68 00 00 00 00       	push   0x0	100030fd: R_386_32	currName
10003101:	e8 fc ff ff ff       	call   10003102 <firstRun(bool)+0x763>	10003102: R_386_PC32	strlen
10003106:	83 c4 10             	add    esp,0x10
10003109:	83 f8 22             	cmp    eax,0x22
1000310c:	77 17                	ja     10003125 <firstRun(bool)+0x786>
1000310e:	83 ec 08             	sub    esp,0x8
10003111:	8d 85 c6 fe ff ff    	lea    eax,[ebp-0x13a]
10003117:	50                   	push   eax
10003118:	68 00 00 00 00       	push   0x0	10003119: R_386_32	currName
1000311d:	e8 fc ff ff ff       	call   1000311e <firstRun(bool)+0x77f>	1000311e: R_386_PC32	strcat
10003122:	83 c4 10             	add    esp,0x10
10003125:	83 7d dc 01          	cmp    DWORD PTR [ebp-0x24],0x1
10003129:	75 2c                	jne    10003157 <firstRun(bool)+0x7b8>
1000312b:	83 ec 0c             	sub    esp,0xc
1000312e:	68 00 00 00 00       	push   0x0	1000312f: R_386_32	currComp
10003133:	e8 fc ff ff ff       	call   10003134 <firstRun(bool)+0x795>	10003134: R_386_PC32	strlen
10003138:	83 c4 10             	add    esp,0x10
1000313b:	83 f8 22             	cmp    eax,0x22
1000313e:	77 17                	ja     10003157 <firstRun(bool)+0x7b8>
10003140:	83 ec 08             	sub    esp,0x8
10003143:	8d 85 c6 fe ff ff    	lea    eax,[ebp-0x13a]
10003149:	50                   	push   eax
1000314a:	68 00 00 00 00       	push   0x0	1000314b: R_386_32	currComp
1000314f:	e8 fc ff ff ff       	call   10003150 <firstRun(bool)+0x7b1>	10003150: R_386_PC32	strcat
10003154:	83 c4 10             	add    esp,0x10
10003157:	83 7d dc 02          	cmp    DWORD PTR [ebp-0x24],0x2
1000315b:	75 2c                	jne    10003189 <firstRun(bool)+0x7ea>
1000315d:	83 ec 0c             	sub    esp,0xc
10003160:	68 00 00 00 00       	push   0x0	10003161: R_386_32	passwbufA
10003165:	e8 fc ff ff ff       	call   10003166 <firstRun(bool)+0x7c7>	10003166: R_386_PC32	strlen
1000316a:	83 c4 10             	add    esp,0x10
1000316d:	83 f8 22             	cmp    eax,0x22
10003170:	77 17                	ja     10003189 <firstRun(bool)+0x7ea>
10003172:	83 ec 08             	sub    esp,0x8
10003175:	8d 85 c6 fe ff ff    	lea    eax,[ebp-0x13a]
1000317b:	50                   	push   eax
1000317c:	68 00 00 00 00       	push   0x0	1000317d: R_386_32	passwbufA
10003181:	e8 fc ff ff ff       	call   10003182 <firstRun(bool)+0x7e3>	10003182: R_386_PC32	strcat
10003186:	83 c4 10             	add    esp,0x10
10003189:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
1000318d:	0f 85 3f 01 00 00    	jne    100032d2 <firstRun(bool)+0x933>
10003193:	83 ec 0c             	sub    esp,0xc
10003196:	68 00 00 00 00       	push   0x0	10003197: R_386_32	passwbufB
1000319b:	e8 fc ff ff ff       	call   1000319c <firstRun(bool)+0x7fd>	1000319c: R_386_PC32	strlen
100031a0:	83 c4 10             	add    esp,0x10
100031a3:	83 f8 22             	cmp    eax,0x22
100031a6:	0f 87 26 01 00 00    	ja     100032d2 <firstRun(bool)+0x933>
100031ac:	83 ec 08             	sub    esp,0x8
100031af:	8d 85 c6 fe ff ff    	lea    eax,[ebp-0x13a]
100031b5:	50                   	push   eax
100031b6:	68 00 00 00 00       	push   0x0	100031b7: R_386_32	passwbufB
100031bb:	e8 fc ff ff ff       	call   100031bc <firstRun(bool)+0x81d>	100031bc: R_386_PC32	strcat
100031c0:	83 c4 10             	add    esp,0x10
100031c3:	e9 0a 01 00 00       	jmp    100032d2 <firstRun(bool)+0x933>
100031c8:	a0 00 00 00 00       	mov    al,ds:0x0	100031c9: R_386_32	installKey
100031cd:	3c 08                	cmp    al,0x8
100031cf:	0f 94 c0             	sete   al
100031d2:	84 c0                	test   al,al
100031d4:	0f 84 ca 00 00 00    	je     100032a4 <firstRun(bool)+0x905>
100031da:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
100031de:	75 2c                	jne    1000320c <firstRun(bool)+0x86d>
100031e0:	83 ec 0c             	sub    esp,0xc
100031e3:	68 00 00 00 00       	push   0x0	100031e4: R_386_32	currName
100031e8:	e8 fc ff ff ff       	call   100031e9 <firstRun(bool)+0x84a>	100031e9: R_386_PC32	strlen
100031ed:	83 c4 10             	add    esp,0x10
100031f0:	85 c0                	test   eax,eax
100031f2:	74 18                	je     1000320c <firstRun(bool)+0x86d>
100031f4:	83 ec 0c             	sub    esp,0xc
100031f7:	68 00 00 00 00       	push   0x0	100031f8: R_386_32	currName
100031fc:	e8 fc ff ff ff       	call   100031fd <firstRun(bool)+0x85e>	100031fd: R_386_PC32	strlen
10003201:	83 c4 10             	add    esp,0x10
10003204:	48                   	dec    eax
10003205:	c6 80 00 00 00 00 00 	mov    BYTE PTR [eax+0x0],0x0	10003207: R_386_32	currName
1000320c:	83 7d dc 01          	cmp    DWORD PTR [ebp-0x24],0x1
10003210:	75 2c                	jne    1000323e <firstRun(bool)+0x89f>
10003212:	83 ec 0c             	sub    esp,0xc
10003215:	68 00 00 00 00       	push   0x0	10003216: R_386_32	currComp
1000321a:	e8 fc ff ff ff       	call   1000321b <firstRun(bool)+0x87c>	1000321b: R_386_PC32	strlen
1000321f:	83 c4 10             	add    esp,0x10
10003222:	85 c0                	test   eax,eax
10003224:	74 18                	je     1000323e <firstRun(bool)+0x89f>
10003226:	83 ec 0c             	sub    esp,0xc
10003229:	68 00 00 00 00       	push   0x0	1000322a: R_386_32	currComp
1000322e:	e8 fc ff ff ff       	call   1000322f <firstRun(bool)+0x890>	1000322f: R_386_PC32	strlen
10003233:	83 c4 10             	add    esp,0x10
10003236:	48                   	dec    eax
10003237:	c6 80 00 00 00 00 00 	mov    BYTE PTR [eax+0x0],0x0	10003239: R_386_32	currComp
1000323e:	83 7d dc 02          	cmp    DWORD PTR [ebp-0x24],0x2
10003242:	75 2c                	jne    10003270 <firstRun(bool)+0x8d1>
10003244:	83 ec 0c             	sub    esp,0xc
10003247:	68 00 00 00 00       	push   0x0	10003248: R_386_32	passwbufA
1000324c:	e8 fc ff ff ff       	call   1000324d <firstRun(bool)+0x8ae>	1000324d: R_386_PC32	strlen
10003251:	83 c4 10             	add    esp,0x10
10003254:	85 c0                	test   eax,eax
10003256:	74 18                	je     10003270 <firstRun(bool)+0x8d1>
10003258:	83 ec 0c             	sub    esp,0xc
1000325b:	68 00 00 00 00       	push   0x0	1000325c: R_386_32	passwbufA
10003260:	e8 fc ff ff ff       	call   10003261 <firstRun(bool)+0x8c2>	10003261: R_386_PC32	strlen
10003265:	83 c4 10             	add    esp,0x10
10003268:	48                   	dec    eax
10003269:	c6 80 00 00 00 00 00 	mov    BYTE PTR [eax+0x0],0x0	1000326b: R_386_32	passwbufA
10003270:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
10003274:	75 5c                	jne    100032d2 <firstRun(bool)+0x933>
10003276:	83 ec 0c             	sub    esp,0xc
10003279:	68 00 00 00 00       	push   0x0	1000327a: R_386_32	passwbufB
1000327e:	e8 fc ff ff ff       	call   1000327f <firstRun(bool)+0x8e0>	1000327f: R_386_PC32	strlen
10003283:	83 c4 10             	add    esp,0x10
10003286:	85 c0                	test   eax,eax
10003288:	74 48                	je     100032d2 <firstRun(bool)+0x933>
1000328a:	83 ec 0c             	sub    esp,0xc
1000328d:	68 00 00 00 00       	push   0x0	1000328e: R_386_32	passwbufB
10003292:	e8 fc ff ff ff       	call   10003293 <firstRun(bool)+0x8f4>	10003293: R_386_PC32	strlen
10003297:	83 c4 10             	add    esp,0x10
1000329a:	48                   	dec    eax
1000329b:	c6 80 00 00 00 00 00 	mov    BYTE PTR [eax+0x0],0x0	1000329d: R_386_32	passwbufB
100032a2:	eb 2e                	jmp    100032d2 <firstRun(bool)+0x933>
100032a4:	a0 00 00 00 00       	mov    al,ds:0x0	100032a5: R_386_32	installKey
100032a9:	3c 7f                	cmp    al,0x7f
100032ab:	0f 94 c0             	sete   al
100032ae:	84 c0                	test   al,al
100032b0:	74 20                	je     100032d2 <firstRun(bool)+0x933>
100032b2:	ff 4d dc             	dec    DWORD PTR [ebp-0x24]
100032b5:	83 7d dc ff          	cmp    DWORD PTR [ebp-0x24],0xffffffff
100032b9:	75 07                	jne    100032c2 <firstRun(bool)+0x923>
100032bb:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
100032c2:	83 ec 0c             	sub    esp,0xc
100032c5:	68 2c 01 00 00       	push   0x12c
100032ca:	e8 fc ff ff ff       	call   100032cb <firstRun(bool)+0x92c>	100032cb: R_386_PC32	milliTenthSleep(unsigned int)
100032cf:	83 c4 10             	add    esp,0x10
100032d2:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100032d4: R_386_32	installKey
100032d9:	e9 39 f9 ff ff       	jmp    10002c17 <firstRun(bool)+0x278>
100032de:	90                   	nop
100032df:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100032e1: R_386_32	installKey
100032e6:	83 ec 0c             	sub    esp,0xc
100032e9:	68 d0 07 00 00       	push   0x7d0
100032ee:	e8 fc ff ff ff       	call   100032ef <firstRun(bool)+0x950>	100032ef: R_386_PC32	milliTenthSleep(unsigned int)
100032f3:	83 c4 10             	add    esp,0x10
100032f6:	e8 fc ff ff ff       	call   100032f7 <firstRun(bool)+0x958>	100032f7: R_386_PC32	drawBootScreen()
100032fb:	c7 45 e0 07 00 00 00 	mov    DWORD PTR [ebp-0x20],0x7
10003302:	a1 00 00 00 00       	mov    eax,ds:0x0	10003303: R_386_32	Krnl::computer
10003307:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
1000330d:	83 e0 20             	and    eax,0x20
10003310:	84 c0                	test   al,al
10003312:	75 12                	jne    10003326 <firstRun(bool)+0x987>
10003314:	a1 00 00 00 00       	mov    eax,ds:0x0	10003315: R_386_32	Krnl::computer
10003319:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
1000331f:	83 e0 40             	and    eax,0x40
10003322:	84 c0                	test   al,al
10003324:	74 07                	je     1000332d <firstRun(bool)+0x98e>
10003326:	c7 45 e0 08 00 00 00 	mov    DWORD PTR [ebp-0x20],0x8
1000332d:	a1 00 00 00 00       	mov    eax,ds:0x0	1000332e: R_386_32	Krnl::computer
10003332:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
10003338:	83 e0 80             	and    eax,0xffffff80
1000333b:	84 c0                	test   al,al
1000333d:	74 07                	je     10003346 <firstRun(bool)+0x9a7>
1000333f:	c7 45 e0 09 00 00 00 	mov    DWORD PTR [ebp-0x20],0x9
10003346:	a1 00 00 00 00       	mov    eax,ds:0x0	10003347: R_386_32	Krnl::computer
1000334b:	8a 80 6e 01 00 00    	mov    al,BYTE PTR [eax+0x16e]
10003351:	83 e0 02             	and    eax,0x2
10003354:	84 c0                	test   al,al
10003356:	75 12                	jne    1000336a <firstRun(bool)+0x9cb>
10003358:	a1 00 00 00 00       	mov    eax,ds:0x0	10003359: R_386_32	Krnl::computer
1000335d:	8a 80 6d 01 00 00    	mov    al,BYTE PTR [eax+0x16d]
10003363:	83 e0 01             	and    eax,0x1
10003366:	84 c0                	test   al,al
10003368:	74 07                	je     10003371 <firstRun(bool)+0x9d2>
1000336a:	c7 45 e0 0a 00 00 00 	mov    DWORD PTR [ebp-0x20],0xa
10003371:	a1 00 00 00 00       	mov    eax,ds:0x0	10003372: R_386_32	Krnl::computer
10003376:	8a 80 6d 01 00 00    	mov    al,BYTE PTR [eax+0x16d]
1000337c:	83 e0 20             	and    eax,0x20
1000337f:	84 c0                	test   al,al
10003381:	74 07                	je     1000338a <firstRun(bool)+0x9eb>
10003383:	c7 45 e0 0b 00 00 00 	mov    DWORD PTR [ebp-0x20],0xb
1000338a:	a1 00 00 00 00       	mov    eax,ds:0x0	1000338b: R_386_32	Krnl::computer
1000338f:	8a 80 6d 01 00 00    	mov    al,BYTE PTR [eax+0x16d]
10003395:	83 e0 40             	and    eax,0x40
10003398:	84 c0                	test   al,al
1000339a:	74 07                	je     100033a3 <firstRun(bool)+0xa04>
1000339c:	c7 45 e0 0c 00 00 00 	mov    DWORD PTR [ebp-0x20],0xc
100033a3:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	100033a5: R_386_32	_bcrypt_errno
100033ad:	83 ec 08             	sub    esp,0x8
100033b0:	8d 85 dc fe ff ff    	lea    eax,[ebp-0x124]
100033b6:	50                   	push   eax
100033b7:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
100033ba:	e8 fc ff ff ff       	call   100033bb <firstRun(bool)+0xa1c>	100033bb: R_386_PC32	bcrypt_gensalt
100033bf:	83 c4 10             	add    esp,0x10
100033c2:	89 45 b8             	mov    DWORD PTR [ebp-0x48],eax
100033c5:	83 7d b8 00          	cmp    DWORD PTR [ebp-0x48],0x0
100033c9:	75 09                	jne    100033d4 <firstRun(bool)+0xa35>
100033cb:	a1 00 00 00 00       	mov    eax,ds:0x0	100033cc: R_386_32	_bcrypt_errno
100033d0:	85 c0                	test   eax,eax
100033d2:	74 5e                	je     10003432 <firstRun(bool)+0xa93>
100033d4:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
100033db:	83 ec 08             	sub    esp,0x8
100033de:	68 88 8e 00 10       	push   0x10008e88	100033df: R_386_32	.text
100033e3:	68 00 00 00 00       	push   0x0	100033e4: R_386_32	currName
100033e8:	e8 fc ff ff ff       	call   100033e9 <firstRun(bool)+0xa4a>	100033e9: R_386_PC32	strcpy
100033ed:	83 c4 10             	add    esp,0x10
100033f0:	83 ec 08             	sub    esp,0x8
100033f3:	68 97 8e 00 10       	push   0x10008e97	100033f4: R_386_32	.text
100033f8:	68 00 00 00 00       	push   0x0	100033f9: R_386_32	currComp
100033fd:	e8 fc ff ff ff       	call   100033fe <firstRun(bool)+0xa5f>	100033fe: R_386_PC32	strcpy
10003402:	83 c4 10             	add    esp,0x10
10003405:	83 ec 04             	sub    esp,0x4
10003408:	6a 50                	push   0x50
1000340a:	6a 00                	push   0x0
1000340c:	68 00 00 00 00       	push   0x0	1000340d: R_386_32	passwbufA
10003411:	e8 fc ff ff ff       	call   10003412 <firstRun(bool)+0xa73>	10003412: R_386_PC32	memset
10003416:	83 c4 10             	add    esp,0x10
10003419:	83 ec 04             	sub    esp,0x4
1000341c:	6a 50                	push   0x50
1000341e:	6a 00                	push   0x0
10003420:	68 00 00 00 00       	push   0x0	10003421: R_386_32	passwbufB
10003425:	e8 fc ff ff ff       	call   10003426 <firstRun(bool)+0xa87>	10003426: R_386_PC32	memset
1000342a:	83 c4 10             	add    esp,0x10
1000342d:	e9 8d f6 ff ff       	jmp    10002abf <firstRun(bool)+0x120>
10003432:	83 ec 04             	sub    esp,0x4
10003435:	68 00 00 00 00       	push   0x0	10003436: R_386_32	passwhash
1000343a:	8d 85 dc fe ff ff    	lea    eax,[ebp-0x124]
10003440:	50                   	push   eax
10003441:	68 00 00 00 00       	push   0x0	10003442: R_386_32	passwbufA
10003446:	e8 fc ff ff ff       	call   10003447 <firstRun(bool)+0xaa8>	10003447: R_386_PC32	bcrypt_hashpw
1000344b:	83 c4 10             	add    esp,0x10
1000344e:	89 45 b8             	mov    DWORD PTR [ebp-0x48],eax
10003451:	83 7d b8 00          	cmp    DWORD PTR [ebp-0x48],0x0
10003455:	75 09                	jne    10003460 <firstRun(bool)+0xac1>
10003457:	a1 00 00 00 00       	mov    eax,ds:0x0	10003458: R_386_32	_bcrypt_errno
1000345c:	85 c0                	test   eax,eax
1000345e:	74 5e                	je     100034be <firstRun(bool)+0xb1f>
10003460:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
10003467:	83 ec 08             	sub    esp,0x8
1000346a:	68 88 8e 00 10       	push   0x10008e88	1000346b: R_386_32	.text
1000346f:	68 00 00 00 00       	push   0x0	10003470: R_386_32	currName
10003474:	e8 fc ff ff ff       	call   10003475 <firstRun(bool)+0xad6>	10003475: R_386_PC32	strcpy
10003479:	83 c4 10             	add    esp,0x10
1000347c:	83 ec 08             	sub    esp,0x8
1000347f:	68 a9 8e 00 10       	push   0x10008ea9	10003480: R_386_32	.text
10003484:	68 00 00 00 00       	push   0x0	10003485: R_386_32	currComp
10003489:	e8 fc ff ff ff       	call   1000348a <firstRun(bool)+0xaeb>	1000348a: R_386_PC32	strcpy
1000348e:	83 c4 10             	add    esp,0x10
10003491:	83 ec 04             	sub    esp,0x4
10003494:	6a 50                	push   0x50
10003496:	6a 00                	push   0x0
10003498:	68 00 00 00 00       	push   0x0	10003499: R_386_32	passwbufA
1000349d:	e8 fc ff ff ff       	call   1000349e <firstRun(bool)+0xaff>	1000349e: R_386_PC32	memset
100034a2:	83 c4 10             	add    esp,0x10
100034a5:	83 ec 04             	sub    esp,0x4
100034a8:	6a 50                	push   0x50
100034aa:	6a 00                	push   0x0
100034ac:	68 00 00 00 00       	push   0x0	100034ad: R_386_32	passwbufB
100034b1:	e8 fc ff ff ff       	call   100034b2 <firstRun(bool)+0xb13>	100034b2: R_386_PC32	memset
100034b6:	83 c4 10             	add    esp,0x10
100034b9:	e9 01 f6 ff ff       	jmp    10002abf <firstRun(bool)+0x120>
100034be:	83 ec 04             	sub    esp,0x4
100034c1:	6a 50                	push   0x50
100034c3:	6a 00                	push   0x0
100034c5:	68 00 00 00 00       	push   0x0	100034c6: R_386_32	passwbufA
100034ca:	e8 fc ff ff ff       	call   100034cb <firstRun(bool)+0xb2c>	100034cb: R_386_PC32	memset
100034cf:	83 c4 10             	add    esp,0x10
100034d2:	83 ec 04             	sub    esp,0x4
100034d5:	6a 50                	push   0x50
100034d7:	6a 00                	push   0x0
100034d9:	68 00 00 00 00       	push   0x0	100034da: R_386_32	passwbufB
100034de:	e8 fc ff ff ff       	call   100034df <firstRun(bool)+0xb40>	100034df: R_386_PC32	memset
100034e3:	83 c4 10             	add    esp,0x10
100034e6:	83 ec 0c             	sub    esp,0xc
100034e9:	68 d0 07 00 00       	push   0x7d0
100034ee:	e8 fc ff ff ff       	call   100034ef <firstRun(bool)+0xb50>	100034ef: R_386_PC32	milliTenthSleep(unsigned int)
100034f3:	83 c4 10             	add    esp,0x10
100034f6:	eb 01                	jmp    100034f9 <firstRun(bool)+0xb5a>
100034f8:	90                   	nop
100034f9:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100034fb: R_386_32	installKey
10003500:	e8 fc ff ff ff       	call   10003501 <firstRun(bool)+0xb62>	10003501: R_386_PC32	drawBootScreen()
10003505:	83 ec 0c             	sub    esp,0xc
10003508:	68 bb 8e 00 10       	push   0x10008ebb	10003509: R_386_32	.text
1000350d:	6a 0d                	push   0xd
1000350f:	6a 32                	push   0x32
10003511:	6a 02                	push   0x2
10003513:	6a 16                	push   0x16
10003515:	e8 fc ff ff ff       	call   10003516 <firstRun(bool)+0xb77>	10003516: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
1000351a:	83 c4 20             	add    esp,0x20
1000351d:	a1 00 00 00 00       	mov    eax,ds:0x0	1000351e: R_386_32	Krnl::computer
10003522:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
10003528:	a1 00 00 00 00       	mov    eax,ds:0x0	10003529: R_386_32	Krnl::computer
1000352d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
10003533:	8b 00                	mov    eax,DWORD PTR [eax]
10003535:	83 c0 28             	add    eax,0x28
10003538:	8b 00                	mov    eax,DWORD PTR [eax]
1000353a:	8d 95 98 fe ff ff    	lea    edx,[ebp-0x168]
10003540:	83 ec 08             	sub    esp,0x8
10003543:	51                   	push   ecx
10003544:	52                   	push   edx
10003545:	ff d0                	call   eax
10003547:	83 c4 0c             	add    esp,0xc
1000354a:	8b 85 98 fe ff ff    	mov    eax,DWORD PTR [ebp-0x168]
10003550:	8b 95 9c fe ff ff    	mov    edx,DWORD PTR [ebp-0x164]
10003556:	89 85 d4 fe ff ff    	mov    DWORD PTR [ebp-0x12c],eax
1000355c:	89 95 d8 fe ff ff    	mov    DWORD PTR [ebp-0x128],edx
10003562:	83 ec 08             	sub    esp,0x8
10003565:	68 c9 8e 00 10       	push   0x10008ec9	10003566: R_386_32	.text
1000356a:	8d 85 40 ff ff ff    	lea    eax,[ebp-0xc0]
10003570:	50                   	push   eax
10003571:	e8 fc ff ff ff       	call   10003572 <firstRun(bool)+0xbd3>	10003572: R_386_PC32	strcpy
10003576:	83 c4 10             	add    esp,0x10
10003579:	8a 85 d4 fe ff ff    	mov    al,BYTE PTR [ebp-0x12c]
1000357f:	0f b6 d0             	movzx  edx,al
10003582:	89 d0                	mov    eax,edx
10003584:	c1 e0 02             	shl    eax,0x2
10003587:	01 d0                	add    eax,edx
10003589:	c1 e0 03             	shl    eax,0x3
1000358c:	01 d0                	add    eax,edx
1000358e:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10003595:	01 d0                	add    eax,edx
10003597:	66 c1 e8 08          	shr    ax,0x8
1000359b:	c0 e8 03             	shr    al,0x3
1000359e:	83 c0 30             	add    eax,0x30
100035a1:	88 85 40 ff ff ff    	mov    BYTE PTR [ebp-0xc0],al
100035a7:	8a 8d d4 fe ff ff    	mov    cl,BYTE PTR [ebp-0x12c]
100035ad:	0f b6 d1             	movzx  edx,cl
100035b0:	89 d0                	mov    eax,edx
100035b2:	c1 e0 02             	shl    eax,0x2
100035b5:	01 d0                	add    eax,edx
100035b7:	c1 e0 03             	shl    eax,0x3
100035ba:	01 d0                	add    eax,edx
100035bc:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
100035c3:	01 d0                	add    eax,edx
100035c5:	66 c1 e8 08          	shr    ax,0x8
100035c9:	88 c2                	mov    dl,al
100035cb:	c0 ea 03             	shr    dl,0x3
100035ce:	88 d0                	mov    al,dl
100035d0:	c1 e0 02             	shl    eax,0x2
100035d3:	01 d0                	add    eax,edx
100035d5:	d1 e0                	shl    eax,1
100035d7:	29 c1                	sub    ecx,eax
100035d9:	88 ca                	mov    dl,cl
100035db:	8d 42 30             	lea    eax,[edx+0x30]
100035de:	88 85 41 ff ff ff    	mov    BYTE PTR [ebp-0xbf],al
100035e4:	8a 85 d5 fe ff ff    	mov    al,BYTE PTR [ebp-0x12b]
100035ea:	0f b6 c8             	movzx  ecx,al
100035ed:	b8 67 66 66 66       	mov    eax,0x66666667
100035f2:	f7 e9                	imul   ecx
100035f4:	c1 fa 02             	sar    edx,0x2
100035f7:	89 c8                	mov    eax,ecx
100035f9:	c1 f8 1f             	sar    eax,0x1f
100035fc:	29 c2                	sub    edx,eax
100035fe:	89 d0                	mov    eax,edx
10003600:	83 c0 30             	add    eax,0x30
10003603:	88 85 43 ff ff ff    	mov    BYTE PTR [ebp-0xbd],al
10003609:	8a 85 d5 fe ff ff    	mov    al,BYTE PTR [ebp-0x12b]
1000360f:	0f b6 c8             	movzx  ecx,al
10003612:	b8 67 66 66 66       	mov    eax,0x66666667
10003617:	f7 e9                	imul   ecx
10003619:	c1 fa 02             	sar    edx,0x2
1000361c:	89 c8                	mov    eax,ecx
1000361e:	c1 f8 1f             	sar    eax,0x1f
10003621:	29 c2                	sub    edx,eax
10003623:	89 d0                	mov    eax,edx
10003625:	c1 e0 02             	shl    eax,0x2
10003628:	01 d0                	add    eax,edx
1000362a:	01 c0                	add    eax,eax
1000362c:	29 c1                	sub    ecx,eax
1000362e:	89 ca                	mov    edx,ecx
10003630:	88 d0                	mov    al,dl
10003632:	83 c0 30             	add    eax,0x30
10003635:	88 85 44 ff ff ff    	mov    BYTE PTR [ebp-0xbc],al
1000363b:	66 8b 85 d6 fe ff ff 	mov    ax,WORD PTR [ebp-0x12a]
10003642:	0f b7 c8             	movzx  ecx,ax
10003645:	b8 d3 4d 62 10       	mov    eax,0x10624dd3
1000364a:	f7 e9                	imul   ecx
1000364c:	c1 fa 06             	sar    edx,0x6
1000364f:	89 c8                	mov    eax,ecx
10003651:	c1 f8 1f             	sar    eax,0x1f
10003654:	29 c2                	sub    edx,eax
10003656:	89 d0                	mov    eax,edx
10003658:	b9 0a 00 00 00       	mov    ecx,0xa
1000365d:	99                   	cdq    
1000365e:	f7 f9                	idiv   ecx
10003660:	89 d0                	mov    eax,edx
10003662:	83 c0 30             	add    eax,0x30
10003665:	88 85 46 ff ff ff    	mov    BYTE PTR [ebp-0xba],al
1000366b:	66 8b 85 d6 fe ff ff 	mov    ax,WORD PTR [ebp-0x12a]
10003672:	0f b7 c8             	movzx  ecx,ax
10003675:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
1000367a:	f7 e9                	imul   ecx
1000367c:	c1 fa 05             	sar    edx,0x5
1000367f:	89 c8                	mov    eax,ecx
10003681:	c1 f8 1f             	sar    eax,0x1f
10003684:	29 c2                	sub    edx,eax
10003686:	89 d0                	mov    eax,edx
10003688:	b9 0a 00 00 00       	mov    ecx,0xa
1000368d:	99                   	cdq    
1000368e:	f7 f9                	idiv   ecx
10003690:	89 d0                	mov    eax,edx
10003692:	83 c0 30             	add    eax,0x30
10003695:	88 85 47 ff ff ff    	mov    BYTE PTR [ebp-0xb9],al
1000369b:	66 8b 85 d6 fe ff ff 	mov    ax,WORD PTR [ebp-0x12a]
100036a2:	0f b7 c8             	movzx  ecx,ax
100036a5:	b8 67 66 66 66       	mov    eax,0x66666667
100036aa:	f7 e9                	imul   ecx
100036ac:	c1 fa 02             	sar    edx,0x2
100036af:	89 c8                	mov    eax,ecx
100036b1:	c1 f8 1f             	sar    eax,0x1f
100036b4:	89 d1                	mov    ecx,edx
100036b6:	29 c1                	sub    ecx,eax
100036b8:	b8 67 66 66 66       	mov    eax,0x66666667
100036bd:	f7 e9                	imul   ecx
100036bf:	c1 fa 02             	sar    edx,0x2
100036c2:	89 c8                	mov    eax,ecx
100036c4:	c1 f8 1f             	sar    eax,0x1f
100036c7:	29 c2                	sub    edx,eax
100036c9:	89 d0                	mov    eax,edx
100036cb:	c1 e0 02             	shl    eax,0x2
100036ce:	01 d0                	add    eax,edx
100036d0:	01 c0                	add    eax,eax
100036d2:	29 c1                	sub    ecx,eax
100036d4:	89 ca                	mov    edx,ecx
100036d6:	88 d0                	mov    al,dl
100036d8:	83 c0 30             	add    eax,0x30
100036db:	88 85 48 ff ff ff    	mov    BYTE PTR [ebp-0xb8],al
100036e1:	66 8b 85 d6 fe ff ff 	mov    ax,WORD PTR [ebp-0x12a]
100036e8:	0f b7 c0             	movzx  eax,ax
100036eb:	b9 0a 00 00 00       	mov    ecx,0xa
100036f0:	99                   	cdq    
100036f1:	f7 f9                	idiv   ecx
100036f3:	89 d0                	mov    eax,edx
100036f5:	83 c0 30             	add    eax,0x30
100036f8:	88 85 49 ff ff ff    	mov    BYTE PTR [ebp-0xb7],al
100036fe:	8a 85 d8 fe ff ff    	mov    al,BYTE PTR [ebp-0x128]
10003704:	0f b6 d0             	movzx  edx,al
10003707:	89 d0                	mov    eax,edx
10003709:	c1 e0 02             	shl    eax,0x2
1000370c:	01 d0                	add    eax,edx
1000370e:	c1 e0 03             	shl    eax,0x3
10003711:	01 d0                	add    eax,edx
10003713:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
1000371a:	01 d0                	add    eax,edx
1000371c:	66 c1 e8 08          	shr    ax,0x8
10003720:	c0 e8 03             	shr    al,0x3
10003723:	83 c0 30             	add    eax,0x30
10003726:	88 85 4b ff ff ff    	mov    BYTE PTR [ebp-0xb5],al
1000372c:	8a 8d d8 fe ff ff    	mov    cl,BYTE PTR [ebp-0x128]
10003732:	0f b6 d1             	movzx  edx,cl
10003735:	89 d0                	mov    eax,edx
10003737:	c1 e0 02             	shl    eax,0x2
1000373a:	01 d0                	add    eax,edx
1000373c:	c1 e0 03             	shl    eax,0x3
1000373f:	01 d0                	add    eax,edx
10003741:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10003748:	01 d0                	add    eax,edx
1000374a:	66 c1 e8 08          	shr    ax,0x8
1000374e:	88 c2                	mov    dl,al
10003750:	c0 ea 03             	shr    dl,0x3
10003753:	88 d0                	mov    al,dl
10003755:	c1 e0 02             	shl    eax,0x2
10003758:	01 d0                	add    eax,edx
1000375a:	d1 e0                	shl    eax,1
1000375c:	29 c1                	sub    ecx,eax
1000375e:	88 ca                	mov    dl,cl
10003760:	8d 42 30             	lea    eax,[edx+0x30]
10003763:	88 85 4c ff ff ff    	mov    BYTE PTR [ebp-0xb4],al
10003769:	8a 85 d9 fe ff ff    	mov    al,BYTE PTR [ebp-0x127]
1000376f:	0f b6 d0             	movzx  edx,al
10003772:	89 d0                	mov    eax,edx
10003774:	c1 e0 02             	shl    eax,0x2
10003777:	01 d0                	add    eax,edx
10003779:	c1 e0 03             	shl    eax,0x3
1000377c:	01 d0                	add    eax,edx
1000377e:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10003785:	01 d0                	add    eax,edx
10003787:	66 c1 e8 08          	shr    ax,0x8
1000378b:	c0 e8 03             	shr    al,0x3
1000378e:	83 c0 30             	add    eax,0x30
10003791:	88 85 4e ff ff ff    	mov    BYTE PTR [ebp-0xb2],al
10003797:	8a 8d d9 fe ff ff    	mov    cl,BYTE PTR [ebp-0x127]
1000379d:	0f b6 d1             	movzx  edx,cl
100037a0:	89 d0                	mov    eax,edx
100037a2:	c1 e0 02             	shl    eax,0x2
100037a5:	01 d0                	add    eax,edx
100037a7:	c1 e0 03             	shl    eax,0x3
100037aa:	01 d0                	add    eax,edx
100037ac:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
100037b3:	01 d0                	add    eax,edx
100037b5:	66 c1 e8 08          	shr    ax,0x8
100037b9:	88 c2                	mov    dl,al
100037bb:	c0 ea 03             	shr    dl,0x3
100037be:	88 d0                	mov    al,dl
100037c0:	c1 e0 02             	shl    eax,0x2
100037c3:	01 d0                	add    eax,edx
100037c5:	d1 e0                	shl    eax,1
100037c7:	29 c1                	sub    ecx,eax
100037c9:	88 ca                	mov    dl,cl
100037cb:	8d 42 30             	lea    eax,[edx+0x30]
100037ce:	88 85 4f ff ff ff    	mov    BYTE PTR [ebp-0xb1],al
100037d4:	8a 85 da fe ff ff    	mov    al,BYTE PTR [ebp-0x126]
100037da:	0f b6 d0             	movzx  edx,al
100037dd:	89 d0                	mov    eax,edx
100037df:	c1 e0 02             	shl    eax,0x2
100037e2:	01 d0                	add    eax,edx
100037e4:	c1 e0 03             	shl    eax,0x3
100037e7:	01 d0                	add    eax,edx
100037e9:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
100037f0:	01 d0                	add    eax,edx
100037f2:	66 c1 e8 08          	shr    ax,0x8
100037f6:	c0 e8 03             	shr    al,0x3
100037f9:	83 c0 30             	add    eax,0x30
100037fc:	88 85 51 ff ff ff    	mov    BYTE PTR [ebp-0xaf],al
10003802:	8a 8d da fe ff ff    	mov    cl,BYTE PTR [ebp-0x126]
10003808:	0f b6 d1             	movzx  edx,cl
1000380b:	89 d0                	mov    eax,edx
1000380d:	c1 e0 02             	shl    eax,0x2
10003810:	01 d0                	add    eax,edx
10003812:	c1 e0 03             	shl    eax,0x3
10003815:	01 d0                	add    eax,edx
10003817:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
1000381e:	01 d0                	add    eax,edx
10003820:	66 c1 e8 08          	shr    ax,0x8
10003824:	88 c2                	mov    dl,al
10003826:	c0 ea 03             	shr    dl,0x3
10003829:	88 d0                	mov    al,dl
1000382b:	c1 e0 02             	shl    eax,0x2
1000382e:	01 d0                	add    eax,edx
10003830:	d1 e0                	shl    eax,1
10003832:	29 c1                	sub    ecx,eax
10003834:	88 ca                	mov    dl,cl
10003836:	8d 42 30             	lea    eax,[edx+0x30]
10003839:	88 85 52 ff ff ff    	mov    BYTE PTR [ebp-0xae],al
1000383f:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
10003846:	a1 00 00 00 00       	mov    eax,ds:0x0	10003847: R_386_32	term
1000384b:	83 ec 04             	sub    esp,0x4
1000384e:	6a 05                	push   0x5
10003850:	6a 18                	push   0x18
10003852:	50                   	push   eax
10003853:	e8 fc ff ff ff       	call   10003854 <firstRun(bool)+0xeb5>	10003854: R_386_PC32	VgaText::setCursor(int, int)
10003858:	83 c4 10             	add    esp,0x10
1000385b:	a1 00 00 00 00       	mov    eax,ds:0x0	1000385c: R_386_32	term
10003860:	83 ec 08             	sub    esp,0x8
10003863:	68 e0 8e 00 10       	push   0x10008ee0	10003864: R_386_32	.text
10003868:	50                   	push   eax
10003869:	e8 fc ff ff ff       	call   1000386a <firstRun(bool)+0xecb>	1000386a: R_386_PC32	VgaText::puts(char const*)
1000386e:	83 c4 10             	add    esp,0x10
10003871:	a1 00 00 00 00       	mov    eax,ds:0x0	10003872: R_386_32	term
10003876:	83 ec 04             	sub    esp,0x4
10003879:	6a 06                	push   0x6
1000387b:	6a 18                	push   0x18
1000387d:	50                   	push   eax
1000387e:	e8 fc ff ff ff       	call   1000387f <firstRun(bool)+0xee0>	1000387f: R_386_PC32	VgaText::setCursor(int, int)
10003883:	83 c4 10             	add    esp,0x10
10003886:	a1 00 00 00 00       	mov    eax,ds:0x0	10003887: R_386_32	term
1000388b:	83 ec 08             	sub    esp,0x8
1000388e:	68 08 8f 00 10       	push   0x10008f08	1000388f: R_386_32	.text
10003893:	50                   	push   eax
10003894:	e8 fc ff ff ff       	call   10003895 <firstRun(bool)+0xef6>	10003895: R_386_PC32	VgaText::puts(char const*)
10003899:	83 c4 10             	add    esp,0x10
1000389c:	a1 00 00 00 00       	mov    eax,ds:0x0	1000389d: R_386_32	term
100038a1:	83 ec 04             	sub    esp,0x4
100038a4:	6a 09                	push   0x9
100038a6:	6a 1a                	push   0x1a
100038a8:	50                   	push   eax
100038a9:	e8 fc ff ff ff       	call   100038aa <firstRun(bool)+0xf0b>	100038aa: R_386_PC32	VgaText::setCursor(int, int)
100038ae:	83 c4 10             	add    esp,0x10
100038b1:	a1 00 00 00 00       	mov    eax,ds:0x0	100038b2: R_386_32	term
100038b6:	6a 0f                	push   0xf
100038b8:	6a 07                	push   0x7
100038ba:	68 1e 8f 00 10       	push   0x10008f1e	100038bb: R_386_32	.text
100038bf:	50                   	push   eax
100038c0:	e8 fc ff ff ff       	call   100038c1 <firstRun(bool)+0xf22>	100038c1: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
100038c5:	83 c4 10             	add    esp,0x10
100038c8:	a1 00 00 00 00       	mov    eax,ds:0x0	100038c9: R_386_32	term
100038cd:	83 ec 04             	sub    esp,0x4
100038d0:	6a 18                	push   0x18
100038d2:	6a 11                	push   0x11
100038d4:	50                   	push   eax
100038d5:	e8 fc ff ff ff       	call   100038d6 <firstRun(bool)+0xf37>	100038d6: R_386_PC32	VgaText::setCursor(int, int)
100038da:	83 c4 10             	add    esp,0x10
100038dd:	a1 00 00 00 00       	mov    eax,ds:0x0	100038de: R_386_32	term
100038e2:	6a 0b                	push   0xb
100038e4:	6a 03                	push   0x3
100038e6:	68 32 8f 00 10       	push   0x10008f32	100038e7: R_386_32	.text
100038eb:	50                   	push   eax
100038ec:	e8 fc ff ff ff       	call   100038ed <firstRun(bool)+0xf4e>	100038ed: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
100038f1:	83 c4 10             	add    esp,0x10
100038f4:	a1 00 00 00 00       	mov    eax,ds:0x0	100038f5: R_386_32	term
100038f9:	83 ec 04             	sub    esp,0x4
100038fc:	6a 08                	push   0x8
100038fe:	6a 1a                	push   0x1a
10003900:	50                   	push   eax
10003901:	e8 fc ff ff ff       	call   10003902 <firstRun(bool)+0xf63>	10003902: R_386_PC32	VgaText::setCursor(int, int)
10003906:	83 c4 10             	add    esp,0x10
10003909:	a1 00 00 00 00       	mov    eax,ds:0x0	1000390a: R_386_32	term
1000390e:	83 ec 08             	sub    esp,0x8
10003911:	8d 95 40 ff ff ff    	lea    edx,[ebp-0xc0]
10003917:	52                   	push   edx
10003918:	50                   	push   eax
10003919:	e8 fc ff ff ff       	call   1000391a <firstRun(bool)+0xf7b>	1000391a: R_386_PC32	VgaText::puts(char const*)
1000391e:	83 c4 10             	add    esp,0x10
10003921:	a1 00 00 00 00       	mov    eax,ds:0x0	10003922: R_386_32	term
10003926:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10003929:	83 c2 1a             	add    edx,0x1a
1000392c:	83 ec 04             	sub    esp,0x4
1000392f:	6a 08                	push   0x8
10003931:	52                   	push   edx
10003932:	50                   	push   eax
10003933:	e8 fc ff ff ff       	call   10003934 <firstRun(bool)+0xf95>	10003934: R_386_PC32	VgaText::setCursor(int, int)
10003938:	83 c4 10             	add    esp,0x10
1000393b:	a1 00 00 00 00       	mov    eax,ds:0x0	1000393c: R_386_32	term
10003940:	8d 8d 40 ff ff ff    	lea    ecx,[ebp-0xc0]
10003946:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10003949:	01 ca                	add    edx,ecx
1000394b:	8a 12                	mov    dl,BYTE PTR [edx]
1000394d:	0f be d2             	movsx  edx,dl
10003950:	6a 00                	push   0x0
10003952:	6a 0f                	push   0xf
10003954:	52                   	push   edx
10003955:	50                   	push   eax
10003956:	e8 fc ff ff ff       	call   10003957 <firstRun(bool)+0xfb8>	10003957: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
1000395b:	83 c4 10             	add    esp,0x10
1000395e:	8a 85 4b ff ff ff    	mov    al,BYTE PTR [ebp-0xb5]
10003964:	0f be c0             	movsx  eax,al
10003967:	8d 50 d0             	lea    edx,[eax-0x30]
1000396a:	89 d0                	mov    eax,edx
1000396c:	c1 e0 02             	shl    eax,0x2
1000396f:	01 d0                	add    eax,edx
10003971:	01 c0                	add    eax,eax
10003973:	89 c2                	mov    edx,eax
10003975:	8a 85 4c ff ff ff    	mov    al,BYTE PTR [ebp-0xb4]
1000397b:	0f be c0             	movsx  eax,al
1000397e:	83 e8 30             	sub    eax,0x30
10003981:	01 d0                	add    eax,edx
10003983:	89 45 b4             	mov    DWORD PTR [ebp-0x4c],eax
10003986:	8b 45 b4             	mov    eax,DWORD PTR [ebp-0x4c]
10003989:	b9 0c 00 00 00       	mov    ecx,0xc
1000398e:	99                   	cdq    
1000398f:	f7 f9                	idiv   ecx
10003991:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
10003994:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
10003998:	75 07                	jne    100039a1 <firstRun(bool)+0x1002>
1000399a:	c7 45 cc 0c 00 00 00 	mov    DWORD PTR [ebp-0x34],0xc
100039a1:	8a 85 4e ff ff ff    	mov    al,BYTE PTR [ebp-0xb2]
100039a7:	0f be c0             	movsx  eax,al
100039aa:	8d 50 d0             	lea    edx,[eax-0x30]
100039ad:	89 d0                	mov    eax,edx
100039af:	c1 e0 02             	shl    eax,0x2
100039b2:	01 d0                	add    eax,edx
100039b4:	01 c0                	add    eax,eax
100039b6:	89 c2                	mov    edx,eax
100039b8:	8a 85 4f ff ff ff    	mov    al,BYTE PTR [ebp-0xb1]
100039be:	0f be c0             	movsx  eax,al
100039c1:	83 e8 30             	sub    eax,0x30
100039c4:	01 d0                	add    eax,edx
100039c6:	89 45 b0             	mov    DWORD PTR [ebp-0x50],eax
100039c9:	83 ec 04             	sub    esp,0x4
100039cc:	6a 10                	push   0x10
100039ce:	6a 00                	push   0x0
100039d0:	8d 85 b6 fe ff ff    	lea    eax,[ebp-0x14a]
100039d6:	50                   	push   eax
100039d7:	e8 fc ff ff ff       	call   100039d8 <firstRun(bool)+0x1039>	100039d8: R_386_PC32	memset
100039dc:	83 c4 10             	add    esp,0x10
100039df:	c7 45 ac 00 00 00 00 	mov    DWORD PTR [ebp-0x54],0x0
100039e6:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
100039e9:	8d 50 01             	lea    edx,[eax+0x1]
100039ec:	89 55 ac             	mov    DWORD PTR [ebp-0x54],edx
100039ef:	c6 84 05 b6 fe ff ff 28 	mov    BYTE PTR [ebp+eax*1-0x14a],0x28
100039f7:	8b 4d cc             	mov    ecx,DWORD PTR [ebp-0x34]
100039fa:	b8 67 66 66 66       	mov    eax,0x66666667
100039ff:	f7 e9                	imul   ecx
10003a01:	c1 fa 02             	sar    edx,0x2
10003a04:	89 c8                	mov    eax,ecx
10003a06:	c1 f8 1f             	sar    eax,0x1f
10003a09:	29 c2                	sub    edx,eax
10003a0b:	89 d0                	mov    eax,edx
10003a0d:	8d 48 30             	lea    ecx,[eax+0x30]
10003a10:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
10003a13:	8d 50 01             	lea    edx,[eax+0x1]
10003a16:	89 55 ac             	mov    DWORD PTR [ebp-0x54],edx
10003a19:	88 ca                	mov    dl,cl
10003a1b:	88 94 05 b6 fe ff ff 	mov    BYTE PTR [ebp+eax*1-0x14a],dl
10003a22:	8b 4d cc             	mov    ecx,DWORD PTR [ebp-0x34]
10003a25:	b8 67 66 66 66       	mov    eax,0x66666667
10003a2a:	f7 e9                	imul   ecx
10003a2c:	c1 fa 02             	sar    edx,0x2
10003a2f:	89 c8                	mov    eax,ecx
10003a31:	c1 f8 1f             	sar    eax,0x1f
10003a34:	29 c2                	sub    edx,eax
10003a36:	89 d0                	mov    eax,edx
10003a38:	c1 e0 02             	shl    eax,0x2
10003a3b:	01 d0                	add    eax,edx
10003a3d:	01 c0                	add    eax,eax
10003a3f:	29 c1                	sub    ecx,eax
10003a41:	89 ca                	mov    edx,ecx
10003a43:	88 d0                	mov    al,dl
10003a45:	8d 48 30             	lea    ecx,[eax+0x30]
10003a48:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
10003a4b:	8d 50 01             	lea    edx,[eax+0x1]
10003a4e:	89 55 ac             	mov    DWORD PTR [ebp-0x54],edx
10003a51:	88 ca                	mov    dl,cl
10003a53:	88 94 05 b6 fe ff ff 	mov    BYTE PTR [ebp+eax*1-0x14a],dl
10003a5a:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
10003a5d:	8d 50 01             	lea    edx,[eax+0x1]
10003a60:	89 55 ac             	mov    DWORD PTR [ebp-0x54],edx
10003a63:	c6 84 05 b6 fe ff ff 3a 	mov    BYTE PTR [ebp+eax*1-0x14a],0x3a
10003a6b:	8b 4d b0             	mov    ecx,DWORD PTR [ebp-0x50]
10003a6e:	b8 67 66 66 66       	mov    eax,0x66666667
10003a73:	f7 e9                	imul   ecx
10003a75:	c1 fa 02             	sar    edx,0x2
10003a78:	89 c8                	mov    eax,ecx
10003a7a:	c1 f8 1f             	sar    eax,0x1f
10003a7d:	29 c2                	sub    edx,eax
10003a7f:	89 d0                	mov    eax,edx
10003a81:	8d 48 30             	lea    ecx,[eax+0x30]
10003a84:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
10003a87:	8d 50 01             	lea    edx,[eax+0x1]
10003a8a:	89 55 ac             	mov    DWORD PTR [ebp-0x54],edx
10003a8d:	88 ca                	mov    dl,cl
10003a8f:	88 94 05 b6 fe ff ff 	mov    BYTE PTR [ebp+eax*1-0x14a],dl
10003a96:	8b 4d b0             	mov    ecx,DWORD PTR [ebp-0x50]
10003a99:	b8 67 66 66 66       	mov    eax,0x66666667
10003a9e:	f7 e9                	imul   ecx
10003aa0:	c1 fa 02             	sar    edx,0x2
10003aa3:	89 c8                	mov    eax,ecx
10003aa5:	c1 f8 1f             	sar    eax,0x1f
10003aa8:	29 c2                	sub    edx,eax
10003aaa:	89 d0                	mov    eax,edx
10003aac:	c1 e0 02             	shl    eax,0x2
10003aaf:	01 d0                	add    eax,edx
10003ab1:	01 c0                	add    eax,eax
10003ab3:	29 c1                	sub    ecx,eax
10003ab5:	89 ca                	mov    edx,ecx
10003ab7:	88 d0                	mov    al,dl
10003ab9:	8d 48 30             	lea    ecx,[eax+0x30]
10003abc:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
10003abf:	8d 50 01             	lea    edx,[eax+0x1]
10003ac2:	89 55 ac             	mov    DWORD PTR [ebp-0x54],edx
10003ac5:	88 ca                	mov    dl,cl
10003ac7:	88 94 05 b6 fe ff ff 	mov    BYTE PTR [ebp+eax*1-0x14a],dl
10003ace:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
10003ad1:	8d 50 01             	lea    edx,[eax+0x1]
10003ad4:	89 55 ac             	mov    DWORD PTR [ebp-0x54],edx
10003ad7:	c6 84 05 b6 fe ff ff 20 	mov    BYTE PTR [ebp+eax*1-0x14a],0x20
10003adf:	83 7d b4 0b          	cmp    DWORD PTR [ebp-0x4c],0xb
10003ae3:	7e 04                	jle    10003ae9 <firstRun(bool)+0x114a>
10003ae5:	b2 50                	mov    dl,0x50
10003ae7:	eb 02                	jmp    10003aeb <firstRun(bool)+0x114c>
10003ae9:	b2 41                	mov    dl,0x41
10003aeb:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
10003aee:	8d 48 01             	lea    ecx,[eax+0x1]
10003af1:	89 4d ac             	mov    DWORD PTR [ebp-0x54],ecx
10003af4:	88 94 05 b6 fe ff ff 	mov    BYTE PTR [ebp+eax*1-0x14a],dl
10003afb:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
10003afe:	8d 50 01             	lea    edx,[eax+0x1]
10003b01:	89 55 ac             	mov    DWORD PTR [ebp-0x54],edx
10003b04:	c6 84 05 b6 fe ff ff 4d 	mov    BYTE PTR [ebp+eax*1-0x14a],0x4d
10003b0c:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
10003b0f:	8d 50 01             	lea    edx,[eax+0x1]
10003b12:	89 55 ac             	mov    DWORD PTR [ebp-0x54],edx
10003b15:	c6 84 05 b6 fe ff ff 29 	mov    BYTE PTR [ebp+eax*1-0x14a],0x29
10003b1d:	8b 1d 00 00 00 00    	mov    ebx,DWORD PTR ds:0x0	10003b1f: R_386_32	term
10003b23:	83 ec 0c             	sub    esp,0xc
10003b26:	8d 85 40 ff ff ff    	lea    eax,[ebp-0xc0]
10003b2c:	50                   	push   eax
10003b2d:	e8 fc ff ff ff       	call   10003b2e <firstRun(bool)+0x118f>	10003b2e: R_386_PC32	strlen
10003b32:	83 c4 10             	add    esp,0x10
10003b35:	83 c0 1e             	add    eax,0x1e
10003b38:	83 ec 04             	sub    esp,0x4
10003b3b:	6a 08                	push   0x8
10003b3d:	50                   	push   eax
10003b3e:	53                   	push   ebx
10003b3f:	e8 fc ff ff ff       	call   10003b40 <firstRun(bool)+0x11a1>	10003b40: R_386_PC32	VgaText::setCursor(int, int)
10003b44:	83 c4 10             	add    esp,0x10
10003b47:	a1 00 00 00 00       	mov    eax,ds:0x0	10003b48: R_386_32	term
10003b4c:	83 ec 08             	sub    esp,0x8
10003b4f:	8d 95 b6 fe ff ff    	lea    edx,[ebp-0x14a]
10003b55:	52                   	push   edx
10003b56:	50                   	push   eax
10003b57:	e8 fc ff ff ff       	call   10003b58 <firstRun(bool)+0x11b9>	10003b58: R_386_PC32	VgaText::puts(char const*)
10003b5c:	83 c4 10             	add    esp,0x10
10003b5f:	a1 00 00 00 00       	mov    eax,ds:0x0	10003b60: R_386_32	term
10003b64:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10003b67:	83 c2 1a             	add    edx,0x1a
10003b6a:	83 ec 04             	sub    esp,0x4
10003b6d:	6a 08                	push   0x8
10003b6f:	52                   	push   edx
10003b70:	50                   	push   eax
10003b71:	e8 fc ff ff ff       	call   10003b72 <firstRun(bool)+0x11d3>	10003b72: R_386_PC32	VgaText::setCursor(int, int)
10003b76:	83 c4 10             	add    esp,0x10
10003b79:	a0 00 00 00 00       	mov    al,ds:0x0	10003b7a: R_386_32	installKey
10003b7e:	84 c0                	test   al,al
10003b80:	0f 94 c0             	sete   al
10003b83:	84 c0                	test   al,al
10003b85:	74 02                	je     10003b89 <firstRun(bool)+0x11ea>
10003b87:	eb f0                	jmp    10003b79 <firstRun(bool)+0x11da>
10003b89:	a1 00 00 00 00       	mov    eax,ds:0x0	10003b8a: R_386_32	term
10003b8e:	05 82 00 00 00       	add    eax,0x82
10003b93:	83 ec 04             	sub    esp,0x4
10003b96:	6a 10                	push   0x10
10003b98:	6a 00                	push   0x0
10003b9a:	50                   	push   eax
10003b9b:	e8 fc ff ff ff       	call   10003b9c <firstRun(bool)+0x11fd>	10003b9c: R_386_PC32	memset
10003ba0:	83 c4 10             	add    esp,0x10
10003ba3:	a1 00 00 00 00       	mov    eax,ds:0x0	10003ba4: R_386_32	term
10003ba8:	05 02 01 00 00       	add    eax,0x102
10003bad:	83 ec 04             	sub    esp,0x4
10003bb0:	6a 10                	push   0x10
10003bb2:	6a 00                	push   0x0
10003bb4:	50                   	push   eax
10003bb5:	e8 fc ff ff ff       	call   10003bb6 <firstRun(bool)+0x1217>	10003bb6: R_386_PC32	memset
10003bba:	83 c4 10             	add    esp,0x10
10003bbd:	a0 00 00 00 00       	mov    al,ds:0x0	10003bbe: R_386_32	installKey
10003bc2:	3c 03                	cmp    al,0x3
10003bc4:	74 09                	je     10003bcf <firstRun(bool)+0x1230>
10003bc6:	a0 00 00 00 00       	mov    al,ds:0x0	10003bc7: R_386_32	installKey
10003bcb:	3c 08                	cmp    al,0x8
10003bcd:	75 04                	jne    10003bd3 <firstRun(bool)+0x1234>
10003bcf:	b0 01                	mov    al,0x1
10003bd1:	eb 02                	jmp    10003bd5 <firstRun(bool)+0x1236>
10003bd3:	b0 00                	mov    al,0x0
10003bd5:	84 c0                	test   al,al
10003bd7:	74 58                	je     10003c31 <firstRun(bool)+0x1292>
10003bd9:	ff 4d e4             	dec    DWORD PTR [ebp-0x1c]
10003bdc:	83 7d e4 ff          	cmp    DWORD PTR [ebp-0x1c],0xffffffff
10003be0:	75 16                	jne    10003bf8 <firstRun(bool)+0x1259>
10003be2:	83 ec 0c             	sub    esp,0xc
10003be5:	8d 85 40 ff ff ff    	lea    eax,[ebp-0xc0]
10003beb:	50                   	push   eax
10003bec:	e8 fc ff ff ff       	call   10003bed <firstRun(bool)+0x124e>	10003bed: R_386_PC32	strlen
10003bf1:	83 c4 10             	add    esp,0x10
10003bf4:	48                   	dec    eax
10003bf5:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10003bf8:	8d 95 40 ff ff ff    	lea    edx,[ebp-0xc0]
10003bfe:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10003c01:	01 d0                	add    eax,edx
10003c03:	8a 00                	mov    al,BYTE PTR [eax]
10003c05:	3c 20                	cmp    al,0x20
10003c07:	74 d0                	je     10003bd9 <firstRun(bool)+0x123a>
10003c09:	8d 95 40 ff ff ff    	lea    edx,[ebp-0xc0]
10003c0f:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10003c12:	01 d0                	add    eax,edx
10003c14:	8a 00                	mov    al,BYTE PTR [eax]
10003c16:	3c 2f                	cmp    al,0x2f
10003c18:	74 bf                	je     10003bd9 <firstRun(bool)+0x123a>
10003c1a:	8d 95 40 ff ff ff    	lea    edx,[ebp-0xc0]
10003c20:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10003c23:	01 d0                	add    eax,edx
10003c25:	8a 00                	mov    al,BYTE PTR [eax]
10003c27:	3c 3a                	cmp    al,0x3a
10003c29:	0f 85 5e 04 00 00    	jne    1000408d <firstRun(bool)+0x16ee>
10003c2f:	eb a8                	jmp    10003bd9 <firstRun(bool)+0x123a>
10003c31:	a0 00 00 00 00       	mov    al,ds:0x0	10003c32: R_386_32	installKey
10003c36:	3c 2f                	cmp    al,0x2f
10003c38:	7e 09                	jle    10003c43 <firstRun(bool)+0x12a4>
10003c3a:	a0 00 00 00 00       	mov    al,ds:0x0	10003c3b: R_386_32	installKey
10003c3f:	3c 39                	cmp    al,0x39
10003c41:	7e 12                	jle    10003c55 <firstRun(bool)+0x12b6>
10003c43:	a0 00 00 00 00       	mov    al,ds:0x0	10003c44: R_386_32	installKey
10003c48:	3c 20                	cmp    al,0x20
10003c4a:	74 09                	je     10003c55 <firstRun(bool)+0x12b6>
10003c4c:	a0 00 00 00 00       	mov    al,ds:0x0	10003c4d: R_386_32	installKey
10003c51:	3c 04                	cmp    al,0x4
10003c53:	75 04                	jne    10003c59 <firstRun(bool)+0x12ba>
10003c55:	b0 01                	mov    al,0x1
10003c57:	eb 02                	jmp    10003c5b <firstRun(bool)+0x12bc>
10003c59:	b0 00                	mov    al,0x0
10003c5b:	84 c0                	test   al,al
10003c5d:	0f 84 cf 01 00 00    	je     10003e32 <firstRun(bool)+0x1493>
10003c63:	a0 00 00 00 00       	mov    al,ds:0x0	10003c64: R_386_32	installKey
10003c68:	3c 2f                	cmp    al,0x2f
10003c6a:	7e 0d                	jle    10003c79 <firstRun(bool)+0x12da>
10003c6c:	a0 00 00 00 00       	mov    al,ds:0x0	10003c6d: R_386_32	installKey
10003c71:	3c 39                	cmp    al,0x39
10003c73:	7f 04                	jg     10003c79 <firstRun(bool)+0x12da>
10003c75:	b0 01                	mov    al,0x1
10003c77:	eb 02                	jmp    10003c7b <firstRun(bool)+0x12dc>
10003c79:	b0 00                	mov    al,0x0
10003c7b:	84 c0                	test   al,al
10003c7d:	0f 84 51 01 00 00    	je     10003dd4 <firstRun(bool)+0x1435>
10003c83:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
10003c87:	75 0d                	jne    10003c96 <firstRun(bool)+0x12f7>
10003c89:	a0 00 00 00 00       	mov    al,ds:0x0	10003c8a: R_386_32	installKey
10003c8e:	3c 33                	cmp    al,0x33
10003c90:	7e 04                	jle    10003c96 <firstRun(bool)+0x12f7>
10003c92:	b0 01                	mov    al,0x1
10003c94:	eb 02                	jmp    10003c98 <firstRun(bool)+0x12f9>
10003c96:	b0 00                	mov    al,0x0
10003c98:	84 c0                	test   al,al
10003c9a:	74 28                	je     10003cc4 <firstRun(bool)+0x1325>
10003c9c:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10003c9f:	8d 50 01             	lea    edx,[eax+0x1]
10003ca2:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
10003ca5:	c6 84 05 40 ff ff ff 30 	mov    BYTE PTR [ebp+eax*1-0xc0],0x30
10003cad:	a0 00 00 00 00       	mov    al,ds:0x0	10003cae: R_386_32	installKey
10003cb2:	8d 8d 40 ff ff ff    	lea    ecx,[ebp-0xc0]
10003cb8:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10003cbb:	01 ca                	add    edx,ecx
10003cbd:	88 02                	mov    BYTE PTR [edx],al
10003cbf:	e9 10 01 00 00       	jmp    10003dd4 <firstRun(bool)+0x1435>
10003cc4:	83 7d e4 03          	cmp    DWORD PTR [ebp-0x1c],0x3
10003cc8:	75 0d                	jne    10003cd7 <firstRun(bool)+0x1338>
10003cca:	a0 00 00 00 00       	mov    al,ds:0x0	10003ccb: R_386_32	installKey
10003ccf:	3c 31                	cmp    al,0x31
10003cd1:	7e 04                	jle    10003cd7 <firstRun(bool)+0x1338>
10003cd3:	b0 01                	mov    al,0x1
10003cd5:	eb 02                	jmp    10003cd9 <firstRun(bool)+0x133a>
10003cd7:	b0 00                	mov    al,0x0
10003cd9:	84 c0                	test   al,al
10003cdb:	74 28                	je     10003d05 <firstRun(bool)+0x1366>
10003cdd:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10003ce0:	8d 50 01             	lea    edx,[eax+0x1]
10003ce3:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
10003ce6:	c6 84 05 40 ff ff ff 30 	mov    BYTE PTR [ebp+eax*1-0xc0],0x30
10003cee:	a0 00 00 00 00       	mov    al,ds:0x0	10003cef: R_386_32	installKey
10003cf3:	8d 8d 40 ff ff ff    	lea    ecx,[ebp-0xc0]
10003cf9:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10003cfc:	01 ca                	add    edx,ecx
10003cfe:	88 02                	mov    BYTE PTR [edx],al
10003d00:	e9 cf 00 00 00       	jmp    10003dd4 <firstRun(bool)+0x1435>
10003d05:	83 7d e4 0b          	cmp    DWORD PTR [ebp-0x1c],0xb
10003d09:	75 0d                	jne    10003d18 <firstRun(bool)+0x1379>
10003d0b:	a0 00 00 00 00       	mov    al,ds:0x0	10003d0c: R_386_32	installKey
10003d10:	3c 32                	cmp    al,0x32
10003d12:	7e 04                	jle    10003d18 <firstRun(bool)+0x1379>
10003d14:	b0 01                	mov    al,0x1
10003d16:	eb 02                	jmp    10003d1a <firstRun(bool)+0x137b>
10003d18:	b0 00                	mov    al,0x0
10003d1a:	84 c0                	test   al,al
10003d1c:	74 28                	je     10003d46 <firstRun(bool)+0x13a7>
10003d1e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10003d21:	8d 50 01             	lea    edx,[eax+0x1]
10003d24:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
10003d27:	c6 84 05 40 ff ff ff 30 	mov    BYTE PTR [ebp+eax*1-0xc0],0x30
10003d2f:	a0 00 00 00 00       	mov    al,ds:0x0	10003d30: R_386_32	installKey
10003d34:	8d 8d 40 ff ff ff    	lea    ecx,[ebp-0xc0]
10003d3a:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10003d3d:	01 ca                	add    edx,ecx
10003d3f:	88 02                	mov    BYTE PTR [edx],al
10003d41:	e9 8e 00 00 00       	jmp    10003dd4 <firstRun(bool)+0x1435>
10003d46:	83 7d e4 0e          	cmp    DWORD PTR [ebp-0x1c],0xe
10003d4a:	75 0d                	jne    10003d59 <firstRun(bool)+0x13ba>
10003d4c:	a0 00 00 00 00       	mov    al,ds:0x0	10003d4d: R_386_32	installKey
10003d51:	3c 35                	cmp    al,0x35
10003d53:	7e 04                	jle    10003d59 <firstRun(bool)+0x13ba>
10003d55:	b0 01                	mov    al,0x1
10003d57:	eb 02                	jmp    10003d5b <firstRun(bool)+0x13bc>
10003d59:	b0 00                	mov    al,0x0
10003d5b:	84 c0                	test   al,al
10003d5d:	74 25                	je     10003d84 <firstRun(bool)+0x13e5>
10003d5f:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10003d62:	8d 50 01             	lea    edx,[eax+0x1]
10003d65:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
10003d68:	c6 84 05 40 ff ff ff 30 	mov    BYTE PTR [ebp+eax*1-0xc0],0x30
10003d70:	a0 00 00 00 00       	mov    al,ds:0x0	10003d71: R_386_32	installKey
10003d75:	8d 8d 40 ff ff ff    	lea    ecx,[ebp-0xc0]
10003d7b:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10003d7e:	01 ca                	add    edx,ecx
10003d80:	88 02                	mov    BYTE PTR [edx],al
10003d82:	eb 50                	jmp    10003dd4 <firstRun(bool)+0x1435>
10003d84:	83 7d e4 11          	cmp    DWORD PTR [ebp-0x1c],0x11
10003d88:	75 0d                	jne    10003d97 <firstRun(bool)+0x13f8>
10003d8a:	a0 00 00 00 00       	mov    al,ds:0x0	10003d8b: R_386_32	installKey
10003d8f:	3c 35                	cmp    al,0x35
10003d91:	7e 04                	jle    10003d97 <firstRun(bool)+0x13f8>
10003d93:	b0 01                	mov    al,0x1
10003d95:	eb 02                	jmp    10003d99 <firstRun(bool)+0x13fa>
10003d97:	b0 00                	mov    al,0x0
10003d99:	84 c0                	test   al,al
10003d9b:	74 25                	je     10003dc2 <firstRun(bool)+0x1423>
10003d9d:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10003da0:	8d 50 01             	lea    edx,[eax+0x1]
10003da3:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
10003da6:	c6 84 05 40 ff ff ff 30 	mov    BYTE PTR [ebp+eax*1-0xc0],0x30
10003dae:	a0 00 00 00 00       	mov    al,ds:0x0	10003daf: R_386_32	installKey
10003db3:	8d 8d 40 ff ff ff    	lea    ecx,[ebp-0xc0]
10003db9:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10003dbc:	01 ca                	add    edx,ecx
10003dbe:	88 02                	mov    BYTE PTR [edx],al
10003dc0:	eb 12                	jmp    10003dd4 <firstRun(bool)+0x1435>
10003dc2:	a0 00 00 00 00       	mov    al,ds:0x0	10003dc3: R_386_32	installKey
10003dc7:	8d 8d 40 ff ff ff    	lea    ecx,[ebp-0xc0]
10003dcd:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10003dd0:	01 ca                	add    edx,ecx
10003dd2:	88 02                	mov    BYTE PTR [edx],al
10003dd4:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
10003dd7:	83 ec 0c             	sub    esp,0xc
10003dda:	8d 85 40 ff ff ff    	lea    eax,[ebp-0xc0]
10003de0:	50                   	push   eax
10003de1:	e8 fc ff ff ff       	call   10003de2 <firstRun(bool)+0x1443>	10003de2: R_386_PC32	strlen
10003de6:	83 c4 10             	add    esp,0x10
10003de9:	89 c2                	mov    edx,eax
10003deb:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10003dee:	39 c2                	cmp    edx,eax
10003df0:	77 07                	ja     10003df9 <firstRun(bool)+0x145a>
10003df2:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
10003df9:	8d 95 40 ff ff ff    	lea    edx,[ebp-0xc0]
10003dff:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10003e02:	01 d0                	add    eax,edx
10003e04:	8a 00                	mov    al,BYTE PTR [eax]
10003e06:	3c 20                	cmp    al,0x20
10003e08:	74 ca                	je     10003dd4 <firstRun(bool)+0x1435>
10003e0a:	8d 95 40 ff ff ff    	lea    edx,[ebp-0xc0]
10003e10:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10003e13:	01 d0                	add    eax,edx
10003e15:	8a 00                	mov    al,BYTE PTR [eax]
10003e17:	3c 2f                	cmp    al,0x2f
10003e19:	74 b9                	je     10003dd4 <firstRun(bool)+0x1435>
10003e1b:	8d 95 40 ff ff ff    	lea    edx,[ebp-0xc0]
10003e21:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10003e24:	01 d0                	add    eax,edx
10003e26:	8a 00                	mov    al,BYTE PTR [eax]
10003e28:	3c 3a                	cmp    al,0x3a
10003e2a:	0f 85 5d 02 00 00    	jne    1000408d <firstRun(bool)+0x16ee>
10003e30:	eb a2                	jmp    10003dd4 <firstRun(bool)+0x1435>
10003e32:	a0 00 00 00 00       	mov    al,ds:0x0	10003e33: R_386_32	installKey
10003e37:	3c 0a                	cmp    al,0xa
10003e39:	0f 94 c0             	sete   al
10003e3c:	84 c0                	test   al,al
10003e3e:	0f 84 37 02 00 00    	je     1000407b <firstRun(bool)+0x16dc>
10003e44:	8a 85 40 ff ff ff    	mov    al,BYTE PTR [ebp-0xc0]
10003e4a:	0f be c0             	movsx  eax,al
10003e4d:	8d 50 d0             	lea    edx,[eax-0x30]
10003e50:	89 d0                	mov    eax,edx
10003e52:	c1 e0 02             	shl    eax,0x2
10003e55:	01 d0                	add    eax,edx
10003e57:	01 c0                	add    eax,eax
10003e59:	89 c2                	mov    edx,eax
10003e5b:	8a 85 41 ff ff ff    	mov    al,BYTE PTR [ebp-0xbf]
10003e61:	0f be c0             	movsx  eax,al
10003e64:	83 e8 30             	sub    eax,0x30
10003e67:	01 d0                	add    eax,edx
10003e69:	89 45 a8             	mov    DWORD PTR [ebp-0x58],eax
10003e6c:	8a 85 43 ff ff ff    	mov    al,BYTE PTR [ebp-0xbd]
10003e72:	0f be c0             	movsx  eax,al
10003e75:	8d 50 d0             	lea    edx,[eax-0x30]
10003e78:	89 d0                	mov    eax,edx
10003e7a:	c1 e0 02             	shl    eax,0x2
10003e7d:	01 d0                	add    eax,edx
10003e7f:	01 c0                	add    eax,eax
10003e81:	89 c2                	mov    edx,eax
10003e83:	8a 85 44 ff ff ff    	mov    al,BYTE PTR [ebp-0xbc]
10003e89:	0f be c0             	movsx  eax,al
10003e8c:	83 e8 30             	sub    eax,0x30
10003e8f:	01 d0                	add    eax,edx
10003e91:	89 45 a4             	mov    DWORD PTR [ebp-0x5c],eax
10003e94:	8a 85 46 ff ff ff    	mov    al,BYTE PTR [ebp-0xba]
10003e9a:	0f be c0             	movsx  eax,al
10003e9d:	8d 50 d0             	lea    edx,[eax-0x30]
10003ea0:	89 d0                	mov    eax,edx
10003ea2:	c1 e0 02             	shl    eax,0x2
10003ea5:	01 d0                	add    eax,edx
10003ea7:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10003eae:	01 d0                	add    eax,edx
10003eb0:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10003eb7:	01 d0                	add    eax,edx
10003eb9:	c1 e0 03             	shl    eax,0x3
10003ebc:	89 c1                	mov    ecx,eax
10003ebe:	8a 85 47 ff ff ff    	mov    al,BYTE PTR [ebp-0xb9]
10003ec4:	0f be c0             	movsx  eax,al
10003ec7:	8d 50 d0             	lea    edx,[eax-0x30]
10003eca:	89 d0                	mov    eax,edx
10003ecc:	c1 e0 02             	shl    eax,0x2
10003ecf:	01 d0                	add    eax,edx
10003ed1:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10003ed8:	01 d0                	add    eax,edx
10003eda:	c1 e0 02             	shl    eax,0x2
10003edd:	01 c1                	add    ecx,eax
10003edf:	8a 85 48 ff ff ff    	mov    al,BYTE PTR [ebp-0xb8]
10003ee5:	0f be c0             	movsx  eax,al
10003ee8:	8d 50 d0             	lea    edx,[eax-0x30]
10003eeb:	89 d0                	mov    eax,edx
10003eed:	c1 e0 02             	shl    eax,0x2
10003ef0:	01 d0                	add    eax,edx
10003ef2:	01 c0                	add    eax,eax
10003ef4:	8d 14 01             	lea    edx,[ecx+eax*1]
10003ef7:	8a 85 49 ff ff ff    	mov    al,BYTE PTR [ebp-0xb7]
10003efd:	0f be c0             	movsx  eax,al
10003f00:	83 e8 30             	sub    eax,0x30
10003f03:	01 d0                	add    eax,edx
10003f05:	89 45 a0             	mov    DWORD PTR [ebp-0x60],eax
10003f08:	8a 85 4b ff ff ff    	mov    al,BYTE PTR [ebp-0xb5]
10003f0e:	0f be c0             	movsx  eax,al
10003f11:	8d 50 d0             	lea    edx,[eax-0x30]
10003f14:	89 d0                	mov    eax,edx
10003f16:	c1 e0 02             	shl    eax,0x2
10003f19:	01 d0                	add    eax,edx
10003f1b:	01 c0                	add    eax,eax
10003f1d:	89 c2                	mov    edx,eax
10003f1f:	8a 85 4c ff ff ff    	mov    al,BYTE PTR [ebp-0xb4]
10003f25:	0f be c0             	movsx  eax,al
10003f28:	83 e8 30             	sub    eax,0x30
10003f2b:	01 d0                	add    eax,edx
10003f2d:	89 45 9c             	mov    DWORD PTR [ebp-0x64],eax
10003f30:	8a 85 4e ff ff ff    	mov    al,BYTE PTR [ebp-0xb2]
10003f36:	0f be c0             	movsx  eax,al
10003f39:	8d 50 d0             	lea    edx,[eax-0x30]
10003f3c:	89 d0                	mov    eax,edx
10003f3e:	c1 e0 02             	shl    eax,0x2
10003f41:	01 d0                	add    eax,edx
10003f43:	01 c0                	add    eax,eax
10003f45:	89 c2                	mov    edx,eax
10003f47:	8a 85 4f ff ff ff    	mov    al,BYTE PTR [ebp-0xb1]
10003f4d:	0f be c0             	movsx  eax,al
10003f50:	83 e8 30             	sub    eax,0x30
10003f53:	01 d0                	add    eax,edx
10003f55:	89 45 98             	mov    DWORD PTR [ebp-0x68],eax
10003f58:	8a 85 51 ff ff ff    	mov    al,BYTE PTR [ebp-0xaf]
10003f5e:	0f be c0             	movsx  eax,al
10003f61:	8d 50 d0             	lea    edx,[eax-0x30]
10003f64:	89 d0                	mov    eax,edx
10003f66:	c1 e0 02             	shl    eax,0x2
10003f69:	01 d0                	add    eax,edx
10003f6b:	01 c0                	add    eax,eax
10003f6d:	89 c2                	mov    edx,eax
10003f6f:	8a 85 52 ff ff ff    	mov    al,BYTE PTR [ebp-0xae]
10003f75:	0f be c0             	movsx  eax,al
10003f78:	83 e8 30             	sub    eax,0x30
10003f7b:	01 d0                	add    eax,edx
10003f7d:	89 45 94             	mov    DWORD PTR [ebp-0x6c],eax
10003f80:	8b 45 a0             	mov    eax,DWORD PTR [ebp-0x60]
10003f83:	83 e0 03             	and    eax,0x3
10003f86:	85 c0                	test   eax,eax
10003f88:	75 1f                	jne    10003fa9 <firstRun(bool)+0x160a>
10003f8a:	8b 45 a0             	mov    eax,DWORD PTR [ebp-0x60]
10003f8d:	b9 19 00 00 00       	mov    ecx,0x19
10003f92:	99                   	cdq    
10003f93:	f7 f9                	idiv   ecx
10003f95:	89 d0                	mov    eax,edx
10003f97:	85 c0                	test   eax,eax
10003f99:	75 0a                	jne    10003fa5 <firstRun(bool)+0x1606>
10003f9b:	8b 45 a0             	mov    eax,DWORD PTR [ebp-0x60]
10003f9e:	83 e0 0f             	and    eax,0xf
10003fa1:	85 c0                	test   eax,eax
10003fa3:	75 04                	jne    10003fa9 <firstRun(bool)+0x160a>
10003fa5:	b0 01                	mov    al,0x1
10003fa7:	eb 02                	jmp    10003fab <firstRun(bool)+0x160c>
10003fa9:	b0 00                	mov    al,0x0
10003fab:	88 45 93             	mov    BYTE PTR [ebp-0x6d],al
10003fae:	83 7d a8 1f          	cmp    DWORD PTR [ebp-0x58],0x1f
10003fb2:	7e 0c                	jle    10003fc0 <firstRun(bool)+0x1621>
10003fb4:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
10003fbb:	e9 cd 00 00 00       	jmp    1000408d <firstRun(bool)+0x16ee>
10003fc0:	83 7d a8 1e          	cmp    DWORD PTR [ebp-0x58],0x1e
10003fc4:	7e 2a                	jle    10003ff0 <firstRun(bool)+0x1651>
10003fc6:	83 7d a4 02          	cmp    DWORD PTR [ebp-0x5c],0x2
10003fca:	74 18                	je     10003fe4 <firstRun(bool)+0x1645>
10003fcc:	83 7d a4 04          	cmp    DWORD PTR [ebp-0x5c],0x4
10003fd0:	74 12                	je     10003fe4 <firstRun(bool)+0x1645>
10003fd2:	83 7d a4 06          	cmp    DWORD PTR [ebp-0x5c],0x6
10003fd6:	74 0c                	je     10003fe4 <firstRun(bool)+0x1645>
10003fd8:	83 7d a4 09          	cmp    DWORD PTR [ebp-0x5c],0x9
10003fdc:	74 06                	je     10003fe4 <firstRun(bool)+0x1645>
10003fde:	83 7d a4 0b          	cmp    DWORD PTR [ebp-0x5c],0xb
10003fe2:	75 0c                	jne    10003ff0 <firstRun(bool)+0x1651>
10003fe4:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
10003feb:	e9 9d 00 00 00       	jmp    1000408d <firstRun(bool)+0x16ee>
10003ff0:	83 7d a8 1d          	cmp    DWORD PTR [ebp-0x58],0x1d
10003ff4:	75 19                	jne    1000400f <firstRun(bool)+0x1670>
10003ff6:	83 7d a4 02          	cmp    DWORD PTR [ebp-0x5c],0x2
10003ffa:	75 13                	jne    1000400f <firstRun(bool)+0x1670>
10003ffc:	8a 45 93             	mov    al,BYTE PTR [ebp-0x6d]
10003fff:	83 f0 01             	xor    eax,0x1
10004002:	84 c0                	test   al,al
10004004:	74 09                	je     1000400f <firstRun(bool)+0x1670>
10004006:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
1000400d:	eb 7e                	jmp    1000408d <firstRun(bool)+0x16ee>
1000400f:	83 7d a8 00          	cmp    DWORD PTR [ebp-0x58],0x0
10004013:	75 09                	jne    1000401e <firstRun(bool)+0x167f>
10004015:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
1000401c:	eb 6f                	jmp    1000408d <firstRun(bool)+0x16ee>
1000401e:	83 7d a4 0c          	cmp    DWORD PTR [ebp-0x5c],0xc
10004022:	7f 06                	jg     1000402a <firstRun(bool)+0x168b>
10004024:	83 7d a4 00          	cmp    DWORD PTR [ebp-0x5c],0x0
10004028:	75 09                	jne    10004033 <firstRun(bool)+0x1694>
1000402a:	c7 45 e4 03 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x3
10004031:	eb 5a                	jmp    1000408d <firstRun(bool)+0x16ee>
10004033:	81 7d a0 b7 0b 00 00 	cmp    DWORD PTR [ebp-0x60],0xbb7
1000403a:	7f 09                	jg     10004045 <firstRun(bool)+0x16a6>
1000403c:	81 7d a0 b1 07 00 00 	cmp    DWORD PTR [ebp-0x60],0x7b1
10004043:	7f 09                	jg     1000404e <firstRun(bool)+0x16af>
10004045:	c7 45 e4 06 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x6
1000404c:	eb 3f                	jmp    1000408d <firstRun(bool)+0x16ee>
1000404e:	83 7d 9c 17          	cmp    DWORD PTR [ebp-0x64],0x17
10004052:	7e 09                	jle    1000405d <firstRun(bool)+0x16be>
10004054:	c7 45 e4 0b 00 00 00 	mov    DWORD PTR [ebp-0x1c],0xb
1000405b:	eb 30                	jmp    1000408d <firstRun(bool)+0x16ee>
1000405d:	83 7d 98 3b          	cmp    DWORD PTR [ebp-0x68],0x3b
10004061:	7e 09                	jle    1000406c <firstRun(bool)+0x16cd>
10004063:	c7 45 e4 0e 00 00 00 	mov    DWORD PTR [ebp-0x1c],0xe
1000406a:	eb 21                	jmp    1000408d <firstRun(bool)+0x16ee>
1000406c:	83 7d 94 3b          	cmp    DWORD PTR [ebp-0x6c],0x3b
10004070:	7e 37                	jle    100040a9 <firstRun(bool)+0x170a>
10004072:	c7 45 e4 11 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x11
10004079:	eb 12                	jmp    1000408d <firstRun(bool)+0x16ee>
1000407b:	a0 00 00 00 00       	mov    al,ds:0x0	1000407c: R_386_32	installKey
10004080:	3c 1b                	cmp    al,0x1b
10004082:	0f 94 c0             	sete   al
10004085:	84 c0                	test   al,al
10004087:	0f 85 31 ea ff ff    	jne    10002abe <firstRun(bool)+0x11f>
1000408d:	83 ec 0c             	sub    esp,0xc
10004090:	68 4c 04 00 00       	push   0x44c
10004095:	e8 fc ff ff ff       	call   10004096 <firstRun(bool)+0x16f7>	10004096: R_386_PC32	milliTenthSleep(unsigned int)
1000409a:	83 c4 10             	add    esp,0x10
1000409d:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	1000409f: R_386_32	installKey
100040a4:	e9 4b f8 ff ff       	jmp    100038f4 <firstRun(bool)+0xf55>
100040a9:	90                   	nop
100040aa:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100040ac: R_386_32	installKey
100040b1:	83 ec 0c             	sub    esp,0xc
100040b4:	68 a0 0f 00 00       	push   0xfa0
100040b9:	e8 fc ff ff ff       	call   100040ba <firstRun(bool)+0x171b>	100040ba: R_386_PC32	milliTenthSleep(unsigned int)
100040be:	83 c4 10             	add    esp,0x10
100040c1:	eb 01                	jmp    100040c4 <firstRun(bool)+0x1725>
100040c3:	90                   	nop
100040c4:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100040c6: R_386_32	installKey
100040cb:	e8 fc ff ff ff       	call   100040cc <firstRun(bool)+0x172d>	100040cc: R_386_PC32	drawBootScreen()
100040d0:	83 ec 0c             	sub    esp,0xc
100040d3:	68 bb 8e 00 10       	push   0x10008ebb	100040d4: R_386_32	.text
100040d8:	6a 14                	push   0x14
100040da:	6a 3c                	push   0x3c
100040dc:	6a 01                	push   0x1
100040de:	6a 12                	push   0x12
100040e0:	e8 fc ff ff ff       	call   100040e1 <firstRun(bool)+0x1742>	100040e1: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
100040e5:	83 c4 20             	add    esp,0x20
100040e8:	a1 00 00 00 00       	mov    eax,ds:0x0	100040e9: R_386_32	term
100040ed:	83 ec 04             	sub    esp,0x4
100040f0:	6a 04                	push   0x4
100040f2:	6a 14                	push   0x14
100040f4:	50                   	push   eax
100040f5:	e8 fc ff ff ff       	call   100040f6 <firstRun(bool)+0x1757>	100040f6: R_386_PC32	VgaText::setCursor(int, int)
100040fa:	83 c4 10             	add    esp,0x10
100040fd:	a1 00 00 00 00       	mov    eax,ds:0x0	100040fe: R_386_32	term
10004102:	83 ec 08             	sub    esp,0x8
10004105:	68 48 8f 00 10       	push   0x10008f48	10004106: R_386_32	.text
1000410a:	50                   	push   eax
1000410b:	e8 fc ff ff ff       	call   1000410c <firstRun(bool)+0x176d>	1000410c: R_386_PC32	VgaText::puts(char const*)
10004110:	83 c4 10             	add    esp,0x10
10004113:	a1 00 00 00 00       	mov    eax,ds:0x0	10004114: R_386_32	term
10004118:	83 ec 04             	sub    esp,0x4
1000411b:	6a 18                	push   0x18
1000411d:	6a 11                	push   0x11
1000411f:	50                   	push   eax
10004120:	e8 fc ff ff ff       	call   10004121 <firstRun(bool)+0x1782>	10004121: R_386_PC32	VgaText::setCursor(int, int)
10004125:	83 c4 10             	add    esp,0x10
10004128:	a1 00 00 00 00       	mov    eax,ds:0x0	10004129: R_386_32	term
1000412d:	6a 0b                	push   0xb
1000412f:	6a 03                	push   0x3
10004131:	68 32 8f 00 10       	push   0x10008f32	10004132: R_386_32	.text
10004136:	50                   	push   eax
10004137:	e8 fc ff ff ff       	call   10004138 <firstRun(bool)+0x1799>	10004138: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
1000413c:	83 c4 10             	add    esp,0x10
1000413f:	e8 fc ff ff ff       	call   10004140 <firstRun(bool)+0x17a1>	10004140: R_386_PC32	loadTimezoneStrings()
10004144:	89 45 8c             	mov    DWORD PTR [ebp-0x74],eax
10004147:	b8 d2 00 00 00       	mov    eax,0xd2
1000414c:	99                   	cdq    
1000414d:	f7 7d 8c             	idiv   DWORD PTR [ebp-0x74]
10004150:	89 45 88             	mov    DWORD PTR [ebp-0x78],eax
10004153:	c7 45 c8 00 00 00 00 	mov    DWORD PTR [ebp-0x38],0x0
1000415a:	83 7d c8 0d          	cmp    DWORD PTR [ebp-0x38],0xd
1000415e:	7f 32                	jg     10004192 <firstRun(bool)+0x17f3>
10004160:	a1 00 00 00 00       	mov    eax,ds:0x0	10004161: R_386_32	term
10004165:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
10004168:	83 c2 07             	add    edx,0x7
1000416b:	83 ec 04             	sub    esp,0x4
1000416e:	52                   	push   edx
1000416f:	6a 4b                	push   0x4b
10004171:	50                   	push   eax
10004172:	e8 fc ff ff ff       	call   10004173 <firstRun(bool)+0x17d4>	10004173: R_386_PC32	VgaText::setCursor(int, int)
10004177:	83 c4 10             	add    esp,0x10
1000417a:	a1 00 00 00 00       	mov    eax,ds:0x0	1000417b: R_386_32	term
1000417f:	83 ec 08             	sub    esp,0x8
10004182:	6a 20                	push   0x20
10004184:	50                   	push   eax
10004185:	e8 fc ff ff ff       	call   10004186 <firstRun(bool)+0x17e7>	10004186: R_386_PC32	VgaText::putchar(char)
1000418a:	83 c4 10             	add    esp,0x10
1000418d:	ff 45 c8             	inc    DWORD PTR [ebp-0x38]
10004190:	eb c8                	jmp    1000415a <firstRun(bool)+0x17bb>
10004192:	c7 45 c4 00 00 00 00 	mov    DWORD PTR [ebp-0x3c],0x0
10004199:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
1000419c:	3b 45 88             	cmp    eax,DWORD PTR [ebp-0x78]
1000419f:	7d 48                	jge    100041e9 <firstRun(bool)+0x184a>
100041a1:	8b 0d 00 00 00 00    	mov    ecx,DWORD PTR ds:0x0	100041a3: R_386_32	term
100041a7:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
100041aa:	8d 58 07             	lea    ebx,[eax+0x7]
100041ad:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
100041b0:	89 d0                	mov    eax,edx
100041b2:	01 c0                	add    eax,eax
100041b4:	01 d0                	add    eax,edx
100041b6:	01 c0                	add    eax,eax
100041b8:	01 d0                	add    eax,edx
100041ba:	01 c0                	add    eax,eax
100041bc:	99                   	cdq    
100041bd:	f7 7d 8c             	idiv   DWORD PTR [ebp-0x74]
100041c0:	01 d8                	add    eax,ebx
100041c2:	83 ec 04             	sub    esp,0x4
100041c5:	50                   	push   eax
100041c6:	6a 4b                	push   0x4b
100041c8:	51                   	push   ecx
100041c9:	e8 fc ff ff ff       	call   100041ca <firstRun(bool)+0x182b>	100041ca: R_386_PC32	VgaText::setCursor(int, int)
100041ce:	83 c4 10             	add    esp,0x10
100041d1:	a1 00 00 00 00       	mov    eax,ds:0x0	100041d2: R_386_32	term
100041d6:	83 ec 08             	sub    esp,0x8
100041d9:	6a db                	push   0xffffffdb
100041db:	50                   	push   eax
100041dc:	e8 fc ff ff ff       	call   100041dd <firstRun(bool)+0x183e>	100041dd: R_386_PC32	VgaText::putchar(char)
100041e1:	83 c4 10             	add    esp,0x10
100041e4:	ff 45 c4             	inc    DWORD PTR [ebp-0x3c]
100041e7:	eb b0                	jmp    10004199 <firstRun(bool)+0x17fa>
100041e9:	a1 00 00 00 00       	mov    eax,ds:0x0	100041ea: R_386_32	term
100041ee:	83 ec 04             	sub    esp,0x4
100041f1:	6a 06                	push   0x6
100041f3:	6a 4b                	push   0x4b
100041f5:	50                   	push   eax
100041f6:	e8 fc ff ff ff       	call   100041f7 <firstRun(bool)+0x1858>	100041f7: R_386_PC32	VgaText::setCursor(int, int)
100041fb:	83 c4 10             	add    esp,0x10
100041fe:	a1 00 00 00 00       	mov    eax,ds:0x0	100041ff: R_386_32	term
10004203:	83 ec 08             	sub    esp,0x8
10004206:	6a 1e                	push   0x1e
10004208:	50                   	push   eax
10004209:	e8 fc ff ff ff       	call   1000420a <firstRun(bool)+0x186b>	1000420a: R_386_PC32	VgaText::putchar(char)
1000420e:	83 c4 10             	add    esp,0x10
10004211:	a1 00 00 00 00       	mov    eax,ds:0x0	10004212: R_386_32	term
10004216:	83 ec 04             	sub    esp,0x4
10004219:	6a 14                	push   0x14
1000421b:	6a 4b                	push   0x4b
1000421d:	50                   	push   eax
1000421e:	e8 fc ff ff ff       	call   1000421f <firstRun(bool)+0x1880>	1000421f: R_386_PC32	VgaText::setCursor(int, int)
10004223:	83 c4 10             	add    esp,0x10
10004226:	a1 00 00 00 00       	mov    eax,ds:0x0	10004227: R_386_32	term
1000422b:	83 ec 08             	sub    esp,0x8
1000422e:	6a 1f                	push   0x1f
10004230:	50                   	push   eax
10004231:	e8 fc ff ff ff       	call   10004232 <firstRun(bool)+0x1893>	10004232: R_386_PC32	VgaText::putchar(char)
10004236:	83 c4 10             	add    esp,0x10
10004239:	c7 45 c0 00 00 00 00 	mov    DWORD PTR [ebp-0x40],0x0
10004240:	83 7d c0 0e          	cmp    DWORD PTR [ebp-0x40],0xe
10004244:	7f 7e                	jg     100042c4 <firstRun(bool)+0x1925>
10004246:	a1 00 00 00 00       	mov    eax,ds:0x0	10004247: R_386_32	term
1000424b:	8b 55 c0             	mov    edx,DWORD PTR [ebp-0x40]
1000424e:	83 c2 06             	add    edx,0x6
10004251:	83 ec 04             	sub    esp,0x4
10004254:	52                   	push   edx
10004255:	6a 14                	push   0x14
10004257:	50                   	push   eax
10004258:	e8 fc ff ff ff       	call   10004259 <firstRun(bool)+0x18ba>	10004259: R_386_PC32	VgaText::setCursor(int, int)
1000425d:	83 c4 10             	add    esp,0x10
10004260:	a1 00 00 00 00       	mov    eax,ds:0x0	10004261: R_386_32	term
10004265:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
10004268:	8b 55 c0             	mov    edx,DWORD PTR [ebp-0x40]
1000426b:	01 d1                	add    ecx,edx
1000426d:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	1000426f: R_386_32	tzsel
10004273:	39 d1                	cmp    ecx,edx
10004275:	75 07                	jne    1000427e <firstRun(bool)+0x18df>
10004277:	bb 00 00 00 00       	mov    ebx,0x0
1000427c:	eb 05                	jmp    10004283 <firstRun(bool)+0x18e4>
1000427e:	bb 0f 00 00 00       	mov    ebx,0xf
10004283:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
10004286:	8b 55 c0             	mov    edx,DWORD PTR [ebp-0x40]
10004289:	01 d1                	add    ecx,edx
1000428b:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	1000428d: R_386_32	tzsel
10004291:	39 d1                	cmp    ecx,edx
10004293:	75 07                	jne    1000429c <firstRun(bool)+0x18fd>
10004295:	b9 0f 00 00 00       	mov    ecx,0xf
1000429a:	eb 05                	jmp    100042a1 <firstRun(bool)+0x1902>
1000429c:	b9 00 00 00 00       	mov    ecx,0x0
100042a1:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
100042a4:	8b 55 c0             	mov    edx,DWORD PTR [ebp-0x40]
100042a7:	01 f2                	add    edx,esi
100042a9:	8b 14 95 00 00 00 00 	mov    edx,DWORD PTR [edx*4+0x0]	100042ac: R_386_32	timezoneStrings
100042b0:	53                   	push   ebx
100042b1:	51                   	push   ecx
100042b2:	52                   	push   edx
100042b3:	50                   	push   eax
100042b4:	e8 fc ff ff ff       	call   100042b5 <firstRun(bool)+0x1916>	100042b5: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
100042b9:	83 c4 10             	add    esp,0x10
100042bc:	ff 45 c0             	inc    DWORD PTR [ebp-0x40]
100042bf:	e9 7c ff ff ff       	jmp    10004240 <firstRun(bool)+0x18a1>
100042c4:	a0 00 00 00 00       	mov    al,ds:0x0	100042c5: R_386_32	installKey
100042c9:	84 c0                	test   al,al
100042cb:	0f 94 c0             	sete   al
100042ce:	84 c0                	test   al,al
100042d0:	74 02                	je     100042d4 <firstRun(bool)+0x1935>
100042d2:	eb f0                	jmp    100042c4 <firstRun(bool)+0x1925>
100042d4:	a1 00 00 00 00       	mov    eax,ds:0x0	100042d5: R_386_32	term
100042d9:	05 82 00 00 00       	add    eax,0x82
100042de:	83 ec 04             	sub    esp,0x4
100042e1:	6a 04                	push   0x4
100042e3:	6a 00                	push   0x0
100042e5:	50                   	push   eax
100042e6:	e8 fc ff ff ff       	call   100042e7 <firstRun(bool)+0x1948>	100042e7: R_386_PC32	memset
100042eb:	83 c4 10             	add    esp,0x10
100042ee:	a1 00 00 00 00       	mov    eax,ds:0x0	100042ef: R_386_32	term
100042f3:	05 02 01 00 00       	add    eax,0x102
100042f8:	83 ec 04             	sub    esp,0x4
100042fb:	6a 04                	push   0x4
100042fd:	6a 00                	push   0x0
100042ff:	50                   	push   eax
10004300:	e8 fc ff ff ff       	call   10004301 <firstRun(bool)+0x1962>	10004301: R_386_PC32	memset
10004305:	83 c4 10             	add    esp,0x10
10004308:	a0 00 00 00 00       	mov    al,ds:0x0	10004309: R_386_32	installKey
1000430d:	3c 01                	cmp    al,0x1
1000430f:	0f 94 c0             	sete   al
10004312:	84 c0                	test   al,al
10004314:	74 41                	je     10004357 <firstRun(bool)+0x19b8>
10004316:	a1 00 00 00 00       	mov    eax,ds:0x0	10004317: R_386_32	tzsel
1000431b:	48                   	dec    eax
1000431c:	a3 00 00 00 00       	mov    ds:0x0,eax	1000431d: R_386_32	tzsel
10004321:	a1 00 00 00 00       	mov    eax,ds:0x0	10004322: R_386_32	tzsel
10004326:	2b 45 d8             	sub    eax,DWORD PTR [ebp-0x28]
10004329:	83 f8 04             	cmp    eax,0x4
1000432c:	7f 03                	jg     10004331 <firstRun(bool)+0x1992>
1000432e:	ff 4d d8             	dec    DWORD PTR [ebp-0x28]
10004331:	a1 00 00 00 00       	mov    eax,ds:0x0	10004332: R_386_32	tzsel
10004336:	85 c0                	test   eax,eax
10004338:	79 0a                	jns    10004344 <firstRun(bool)+0x19a5>
1000433a:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	1000433c: R_386_32	tzsel
10004344:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
10004348:	0f 89 82 00 00 00    	jns    100043d0 <firstRun(bool)+0x1a31>
1000434e:	c7 45 d8 00 00 00 00 	mov    DWORD PTR [ebp-0x28],0x0
10004355:	eb 79                	jmp    100043d0 <firstRun(bool)+0x1a31>
10004357:	a0 00 00 00 00       	mov    al,ds:0x0	10004358: R_386_32	installKey
1000435c:	3c 02                	cmp    al,0x2
1000435e:	0f 94 c0             	sete   al
10004361:	84 c0                	test   al,al
10004363:	74 4b                	je     100043b0 <firstRun(bool)+0x1a11>
10004365:	a1 00 00 00 00       	mov    eax,ds:0x0	10004366: R_386_32	tzsel
1000436a:	40                   	inc    eax
1000436b:	a3 00 00 00 00       	mov    ds:0x0,eax	1000436c: R_386_32	tzsel
10004370:	a1 00 00 00 00       	mov    eax,ds:0x0	10004371: R_386_32	tzsel
10004375:	2b 45 d8             	sub    eax,DWORD PTR [ebp-0x28]
10004378:	83 f8 0a             	cmp    eax,0xa
1000437b:	7e 03                	jle    10004380 <firstRun(bool)+0x19e1>
1000437d:	ff 45 d8             	inc    DWORD PTR [ebp-0x28]
10004380:	8b 45 8c             	mov    eax,DWORD PTR [ebp-0x74]
10004383:	8d 50 ff             	lea    edx,[eax-0x1]
10004386:	a1 00 00 00 00       	mov    eax,ds:0x0	10004387: R_386_32	tzsel
1000438b:	39 c2                	cmp    edx,eax
1000438d:	7f 0b                	jg     1000439a <firstRun(bool)+0x19fb>
1000438f:	8b 45 8c             	mov    eax,DWORD PTR [ebp-0x74]
10004392:	83 e8 02             	sub    eax,0x2
10004395:	a3 00 00 00 00       	mov    ds:0x0,eax	10004396: R_386_32	tzsel
1000439a:	8b 45 8c             	mov    eax,DWORD PTR [ebp-0x74]
1000439d:	83 e8 0f             	sub    eax,0xf
100043a0:	39 45 d8             	cmp    DWORD PTR [ebp-0x28],eax
100043a3:	7c 2b                	jl     100043d0 <firstRun(bool)+0x1a31>
100043a5:	8b 45 8c             	mov    eax,DWORD PTR [ebp-0x74]
100043a8:	83 e8 10             	sub    eax,0x10
100043ab:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
100043ae:	eb 20                	jmp    100043d0 <firstRun(bool)+0x1a31>
100043b0:	a0 00 00 00 00       	mov    al,ds:0x0	100043b1: R_386_32	installKey
100043b5:	3c 0a                	cmp    al,0xa
100043b7:	0f 94 c0             	sete   al
100043ba:	84 c0                	test   al,al
100043bc:	75 2e                	jne    100043ec <firstRun(bool)+0x1a4d>
100043be:	a0 00 00 00 00       	mov    al,ds:0x0	100043bf: R_386_32	installKey
100043c3:	3c 1b                	cmp    al,0x1b
100043c5:	0f 94 c0             	sete   al
100043c8:	84 c0                	test   al,al
100043ca:	0f 85 28 f1 ff ff    	jne    100034f8 <firstRun(bool)+0xb59>
100043d0:	83 ec 0c             	sub    esp,0xc
100043d3:	68 f4 01 00 00       	push   0x1f4
100043d8:	e8 fc ff ff ff       	call   100043d9 <firstRun(bool)+0x1a3a>	100043d9: R_386_PC32	milliTenthSleep(unsigned int)
100043dd:	83 c4 10             	add    esp,0x10
100043e0:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100043e2: R_386_32	installKey
100043e7:	e9 67 fd ff ff       	jmp    10004153 <firstRun(bool)+0x17b4>
100043ec:	90                   	nop
100043ed:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100043ef: R_386_32	installKey
100043f4:	83 ec 0c             	sub    esp,0xc
100043f7:	68 a0 0f 00 00       	push   0xfa0
100043fc:	e8 fc ff ff ff       	call   100043fd <firstRun(bool)+0x1a5e>	100043fd: R_386_PC32	milliTenthSleep(unsigned int)
10004401:	83 c4 10             	add    esp,0x10
10004404:	eb 01                	jmp    10004407 <firstRun(bool)+0x1a68>
10004406:	90                   	nop
10004407:	e8 fc ff ff ff       	call   10004408 <firstRun(bool)+0x1a69>	10004408: R_386_PC32	drawBootScreen()
1000440c:	83 ec 0c             	sub    esp,0xc
1000440f:	68 58 1b 00 00       	push   0x1b58
10004414:	e8 fc ff ff ff       	call   10004415 <firstRun(bool)+0x1a76>	10004415: R_386_PC32	milliTenthSleep(unsigned int)
10004419:	83 c4 10             	add    esp,0x10
1000441c:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	1000441e: R_386_32	installKey
10004423:	e8 fc ff ff ff       	call   10004424 <firstRun(bool)+0x1a85>	10004424: R_386_PC32	drawBootScreen()
10004428:	83 ec 0c             	sub    esp,0xc
1000442b:	68 7a 8f 00 10       	push   0x10008f7a	1000442c: R_386_32	.text
10004430:	6a 10                	push   0x10
10004432:	6a 37                	push   0x37
10004434:	6a 03                	push   0x3
10004436:	6a 14                	push   0x14
10004438:	e8 fc ff ff ff       	call   10004439 <firstRun(bool)+0x1a9a>	10004439: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
1000443d:	83 c4 20             	add    esp,0x20
10004440:	a1 00 00 00 00       	mov    eax,ds:0x0	10004441: R_386_32	term
10004445:	83 ec 04             	sub    esp,0x4
10004448:	6a 06                	push   0x6
1000444a:	6a 16                	push   0x16
1000444c:	50                   	push   eax
1000444d:	e8 fc ff ff ff       	call   1000444e <firstRun(bool)+0x1aaf>	1000444e: R_386_PC32	VgaText::setCursor(int, int)
10004452:	83 c4 10             	add    esp,0x10
10004455:	a1 00 00 00 00       	mov    eax,ds:0x0	10004456: R_386_32	term
1000445a:	83 ec 08             	sub    esp,0x8
1000445d:	68 8c 8f 00 10       	push   0x10008f8c	1000445e: R_386_32	.text
10004462:	50                   	push   eax
10004463:	e8 fc ff ff ff       	call   10004464 <firstRun(bool)+0x1ac5>	10004464: R_386_PC32	VgaText::puts(char const*)
10004468:	83 c4 10             	add    esp,0x10
1000446b:	a1 00 00 00 00       	mov    eax,ds:0x0	1000446c: R_386_32	term
10004470:	83 ec 04             	sub    esp,0x4
10004473:	6a 07                	push   0x7
10004475:	6a 16                	push   0x16
10004477:	50                   	push   eax
10004478:	e8 fc ff ff ff       	call   10004479 <firstRun(bool)+0x1ada>	10004479: R_386_PC32	VgaText::setCursor(int, int)
1000447d:	83 c4 10             	add    esp,0x10
10004480:	a1 00 00 00 00       	mov    eax,ds:0x0	10004481: R_386_32	term
10004485:	83 ec 08             	sub    esp,0x8
10004488:	68 c0 8f 00 10       	push   0x10008fc0	10004489: R_386_32	.text
1000448d:	50                   	push   eax
1000448e:	e8 fc ff ff ff       	call   1000448f <firstRun(bool)+0x1af0>	1000448f: R_386_PC32	VgaText::puts(char const*)
10004493:	83 c4 10             	add    esp,0x10
10004496:	a1 00 00 00 00       	mov    eax,ds:0x0	10004497: R_386_32	term
1000449b:	83 ec 04             	sub    esp,0x4
1000449e:	6a 18                	push   0x18
100044a0:	6a 11                	push   0x11
100044a2:	50                   	push   eax
100044a3:	e8 fc ff ff ff       	call   100044a4 <firstRun(bool)+0x1b05>	100044a4: R_386_PC32	VgaText::setCursor(int, int)
100044a8:	83 c4 10             	add    esp,0x10
100044ab:	a1 00 00 00 00       	mov    eax,ds:0x0	100044ac: R_386_32	term
100044b0:	6a 0b                	push   0xb
100044b2:	6a 03                	push   0x3
100044b4:	68 32 8f 00 10       	push   0x10008f32	100044b5: R_386_32	.text
100044b9:	50                   	push   eax
100044ba:	e8 fc ff ff ff       	call   100044bb <firstRun(bool)+0x1b1c>	100044bb: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
100044bf:	83 c4 10             	add    esp,0x10
100044c2:	c7 45 8c 03 00 00 00 	mov    DWORD PTR [ebp-0x74],0x3
100044c9:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
100044cf:	bb 38 92 00 10       	mov    ebx,0x10009238	100044d0: R_386_32	.text
100044d4:	ba 03 00 00 00       	mov    edx,0x3
100044d9:	89 c7                	mov    edi,eax
100044db:	89 de                	mov    esi,ebx
100044dd:	89 d1                	mov    ecx,edx
100044df:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100044e1:	c7 45 bc 00 00 00 00 	mov    DWORD PTR [ebp-0x44],0x0
100044e8:	8b 45 bc             	mov    eax,DWORD PTR [ebp-0x44]
100044eb:	3b 45 8c             	cmp    eax,DWORD PTR [ebp-0x74]
100044ee:	7d 68                	jge    10004558 <firstRun(bool)+0x1bb9>
100044f0:	a1 00 00 00 00       	mov    eax,ds:0x0	100044f1: R_386_32	term
100044f5:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
100044f8:	83 c2 09             	add    edx,0x9
100044fb:	83 ec 04             	sub    esp,0x4
100044fe:	52                   	push   edx
100044ff:	6a 16                	push   0x16
10004501:	50                   	push   eax
10004502:	e8 fc ff ff ff       	call   10004503 <firstRun(bool)+0x1b64>	10004503: R_386_PC32	VgaText::setCursor(int, int)
10004507:	83 c4 10             	add    esp,0x10
1000450a:	a1 00 00 00 00       	mov    eax,ds:0x0	1000450b: R_386_32	term
1000450f:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10004511: R_386_32	modesel
10004515:	39 55 bc             	cmp    DWORD PTR [ebp-0x44],edx
10004518:	75 07                	jne    10004521 <firstRun(bool)+0x1b82>
1000451a:	bb 00 00 00 00       	mov    ebx,0x0
1000451f:	eb 05                	jmp    10004526 <firstRun(bool)+0x1b87>
10004521:	bb 0f 00 00 00       	mov    ebx,0xf
10004526:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10004528: R_386_32	modesel
1000452c:	39 55 bc             	cmp    DWORD PTR [ebp-0x44],edx
1000452f:	75 07                	jne    10004538 <firstRun(bool)+0x1b99>
10004531:	b9 0f 00 00 00       	mov    ecx,0xf
10004536:	eb 05                	jmp    1000453d <firstRun(bool)+0x1b9e>
10004538:	b9 00 00 00 00       	mov    ecx,0x0
1000453d:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
10004540:	8b 94 95 c8 fe ff ff 	mov    edx,DWORD PTR [ebp+edx*4-0x138]
10004547:	53                   	push   ebx
10004548:	51                   	push   ecx
10004549:	52                   	push   edx
1000454a:	50                   	push   eax
1000454b:	e8 fc ff ff ff       	call   1000454c <firstRun(bool)+0x1bad>	1000454c: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10004550:	83 c4 10             	add    esp,0x10
10004553:	ff 45 bc             	inc    DWORD PTR [ebp-0x44]
10004556:	eb 90                	jmp    100044e8 <firstRun(bool)+0x1b49>
10004558:	a0 00 00 00 00       	mov    al,ds:0x0	10004559: R_386_32	installKey
1000455d:	84 c0                	test   al,al
1000455f:	0f 94 c0             	sete   al
10004562:	84 c0                	test   al,al
10004564:	74 02                	je     10004568 <firstRun(bool)+0x1bc9>
10004566:	eb f0                	jmp    10004558 <firstRun(bool)+0x1bb9>
10004568:	a1 00 00 00 00       	mov    eax,ds:0x0	10004569: R_386_32	term
1000456d:	05 82 00 00 00       	add    eax,0x82
10004572:	83 ec 04             	sub    esp,0x4
10004575:	6a 04                	push   0x4
10004577:	6a 00                	push   0x0
10004579:	50                   	push   eax
1000457a:	e8 fc ff ff ff       	call   1000457b <firstRun(bool)+0x1bdc>	1000457b: R_386_PC32	memset
1000457f:	83 c4 10             	add    esp,0x10
10004582:	a1 00 00 00 00       	mov    eax,ds:0x0	10004583: R_386_32	term
10004587:	05 02 01 00 00       	add    eax,0x102
1000458c:	83 ec 04             	sub    esp,0x4
1000458f:	6a 04                	push   0x4
10004591:	6a 00                	push   0x0
10004593:	50                   	push   eax
10004594:	e8 fc ff ff ff       	call   10004595 <firstRun(bool)+0x1bf6>	10004595: R_386_PC32	memset
10004599:	83 c4 10             	add    esp,0x10
1000459c:	a0 00 00 00 00       	mov    al,ds:0x0	1000459d: R_386_32	installKey
100045a1:	3c 01                	cmp    al,0x1
100045a3:	0f 94 c0             	sete   al
100045a6:	84 c0                	test   al,al
100045a8:	74 20                	je     100045ca <firstRun(bool)+0x1c2b>
100045aa:	a1 00 00 00 00       	mov    eax,ds:0x0	100045ab: R_386_32	modesel
100045af:	48                   	dec    eax
100045b0:	a3 00 00 00 00       	mov    ds:0x0,eax	100045b1: R_386_32	modesel
100045b5:	a1 00 00 00 00       	mov    eax,ds:0x0	100045b6: R_386_32	modesel
100045ba:	85 c0                	test   eax,eax
100045bc:	79 5a                	jns    10004618 <firstRun(bool)+0x1c79>
100045be:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	100045c0: R_386_32	modesel
100045c8:	eb 4e                	jmp    10004618 <firstRun(bool)+0x1c79>
100045ca:	a0 00 00 00 00       	mov    al,ds:0x0	100045cb: R_386_32	installKey
100045cf:	3c 02                	cmp    al,0x2
100045d1:	0f 94 c0             	sete   al
100045d4:	84 c0                	test   al,al
100045d6:	74 20                	je     100045f8 <firstRun(bool)+0x1c59>
100045d8:	a1 00 00 00 00       	mov    eax,ds:0x0	100045d9: R_386_32	modesel
100045dd:	40                   	inc    eax
100045de:	a3 00 00 00 00       	mov    ds:0x0,eax	100045df: R_386_32	modesel
100045e3:	a1 00 00 00 00       	mov    eax,ds:0x0	100045e4: R_386_32	modesel
100045e8:	39 45 8c             	cmp    DWORD PTR [ebp-0x74],eax
100045eb:	7f 2b                	jg     10004618 <firstRun(bool)+0x1c79>
100045ed:	8b 45 8c             	mov    eax,DWORD PTR [ebp-0x74]
100045f0:	48                   	dec    eax
100045f1:	a3 00 00 00 00       	mov    ds:0x0,eax	100045f2: R_386_32	modesel
100045f6:	eb 20                	jmp    10004618 <firstRun(bool)+0x1c79>
100045f8:	a0 00 00 00 00       	mov    al,ds:0x0	100045f9: R_386_32	installKey
100045fd:	3c 0a                	cmp    al,0xa
100045ff:	0f 94 c0             	sete   al
10004602:	84 c0                	test   al,al
10004604:	75 2e                	jne    10004634 <firstRun(bool)+0x1c95>
10004606:	a0 00 00 00 00       	mov    al,ds:0x0	10004607: R_386_32	installKey
1000460b:	3c 1b                	cmp    al,0x1b
1000460d:	0f 94 c0             	sete   al
10004610:	84 c0                	test   al,al
10004612:	0f 85 ab fa ff ff    	jne    100040c3 <firstRun(bool)+0x1724>
10004618:	83 ec 0c             	sub    esp,0xc
1000461b:	68 f4 01 00 00       	push   0x1f4
10004620:	e8 fc ff ff ff       	call   10004621 <firstRun(bool)+0x1c82>	10004621: R_386_PC32	milliTenthSleep(unsigned int)
10004625:	83 c4 10             	add    esp,0x10
10004628:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	1000462a: R_386_32	installKey
1000462f:	e9 ad fe ff ff       	jmp    100044e1 <firstRun(bool)+0x1b42>
10004634:	90                   	nop
10004635:	80 bd a4 fe ff ff 00 	cmp    BYTE PTR [ebp-0x15c],0x0
1000463c:	0f 84 ff 00 00 00    	je     10004741 <firstRun(bool)+0x1da2>
10004642:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10004644: R_386_32	showSidebar
10004649:	a1 00 00 00 00       	mov    eax,ds:0x0	1000464a: R_386_32	term
1000464e:	83 ec 0c             	sub    esp,0xc
10004651:	50                   	push   eax
10004652:	e8 fc ff ff ff       	call   10004653 <firstRun(bool)+0x1cb4>	10004653: R_386_PC32	setActiveTerminal(VgaText*)
10004657:	83 c4 10             	add    esp,0x10
1000465a:	e8 fc ff ff ff       	call   1000465b <firstRun(bool)+0x1cbc>	1000465b: R_386_PC32	drawBootScreen()
1000465f:	83 ec 0c             	sub    esp,0xc
10004662:	68 f5 8f 00 10       	push   0x10008ff5	10004663: R_386_32	.text
10004667:	6a 0d                	push   0xd
10004669:	6a 32                	push   0x32
1000466b:	6a 05                	push   0x5
1000466d:	6a 16                	push   0x16
1000466f:	e8 fc ff ff ff       	call   10004670 <firstRun(bool)+0x1cd1>	10004670: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
10004674:	83 c4 20             	add    esp,0x20
10004677:	a1 00 00 00 00       	mov    eax,ds:0x0	10004678: R_386_32	term
1000467c:	83 ec 04             	sub    esp,0x4
1000467f:	6a 08                	push   0x8
10004681:	6a 18                	push   0x18
10004683:	50                   	push   eax
10004684:	e8 fc ff ff ff       	call   10004685 <firstRun(bool)+0x1ce6>	10004685: R_386_PC32	VgaText::setCursor(int, int)
10004689:	83 c4 10             	add    esp,0x10
1000468c:	a1 00 00 00 00       	mov    eax,ds:0x0	1000468d: R_386_32	term
10004691:	83 ec 08             	sub    esp,0x8
10004694:	68 0c 90 00 10       	push   0x1000900c	10004695: R_386_32	.text
10004699:	50                   	push   eax
1000469a:	e8 fc ff ff ff       	call   1000469b <firstRun(bool)+0x1cfc>	1000469b: R_386_PC32	VgaText::puts(char const*)
1000469f:	83 c4 10             	add    esp,0x10
100046a2:	a1 00 00 00 00       	mov    eax,ds:0x0	100046a3: R_386_32	term
100046a7:	83 ec 04             	sub    esp,0x4
100046aa:	6a 0a                	push   0xa
100046ac:	6a 18                	push   0x18
100046ae:	50                   	push   eax
100046af:	e8 fc ff ff ff       	call   100046b0 <firstRun(bool)+0x1d11>	100046b0: R_386_PC32	VgaText::setCursor(int, int)
100046b4:	83 c4 10             	add    esp,0x10
100046b7:	a1 00 00 00 00       	mov    eax,ds:0x0	100046b8: R_386_32	term
100046bc:	83 ec 08             	sub    esp,0x8
100046bf:	68 34 90 00 10       	push   0x10009034	100046c0: R_386_32	.text
100046c4:	50                   	push   eax
100046c5:	e8 fc ff ff ff       	call   100046c6 <firstRun(bool)+0x1d27>	100046c6: R_386_PC32	VgaText::puts(char const*)
100046ca:	83 c4 10             	add    esp,0x10
100046cd:	a1 00 00 00 00       	mov    eax,ds:0x0	100046ce: R_386_32	term
100046d2:	83 ec 04             	sub    esp,0x4
100046d5:	6a 0b                	push   0xb
100046d7:	6a 18                	push   0x18
100046d9:	50                   	push   eax
100046da:	e8 fc ff ff ff       	call   100046db <firstRun(bool)+0x1d3c>	100046db: R_386_PC32	VgaText::setCursor(int, int)
100046df:	83 c4 10             	add    esp,0x10
100046e2:	a1 00 00 00 00       	mov    eax,ds:0x0	100046e3: R_386_32	term
100046e7:	83 ec 08             	sub    esp,0x8
100046ea:	68 5d 90 00 10       	push   0x1000905d	100046eb: R_386_32	.text
100046ef:	50                   	push   eax
100046f0:	e8 fc ff ff ff       	call   100046f1 <firstRun(bool)+0x1d52>	100046f1: R_386_PC32	VgaText::puts(char const*)
100046f5:	83 c4 10             	add    esp,0x10
100046f8:	a1 00 00 00 00       	mov    eax,ds:0x0	100046f9: R_386_32	term
100046fd:	83 ec 04             	sub    esp,0x4
10004700:	6a 0e                	push   0xe
10004702:	6a 18                	push   0x18
10004704:	50                   	push   eax
10004705:	e8 fc ff ff ff       	call   10004706 <firstRun(bool)+0x1d67>	10004706: R_386_PC32	VgaText::setCursor(int, int)
1000470a:	83 c4 10             	add    esp,0x10
1000470d:	a1 00 00 00 00       	mov    eax,ds:0x0	1000470e: R_386_32	term
10004712:	83 ec 08             	sub    esp,0x8
10004715:	68 6c 90 00 10       	push   0x1000906c	10004716: R_386_32	.text
1000471a:	50                   	push   eax
1000471b:	e8 fc ff ff ff       	call   1000471c <firstRun(bool)+0x1d7d>	1000471c: R_386_PC32	VgaText::puts(char const*)
10004720:	83 c4 10             	add    esp,0x10
10004723:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10004725: R_386_32	installKey
1000472a:	a0 00 00 00 00       	mov    al,ds:0x0	1000472b: R_386_32	installKey
1000472f:	84 c0                	test   al,al
10004731:	0f 94 c0             	sete   al
10004734:	84 c0                	test   al,al
10004736:	74 02                	je     1000473a <firstRun(bool)+0x1d9b>
10004738:	eb f0                	jmp    1000472a <firstRun(bool)+0x1d8b>
1000473a:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	1000473c: R_386_32	installKey
10004741:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10004743: R_386_32	installKey
10004748:	83 ec 0c             	sub    esp,0xc
1000474b:	68 84 03 00 00       	push   0x384
10004750:	e8 fc ff ff ff       	call   10004751 <firstRun(bool)+0x1db2>	10004751: R_386_PC32	milliTenthSleep(unsigned int)
10004755:	83 c4 10             	add    esp,0x10
10004758:	e8 fc ff ff ff       	call   10004759 <firstRun(bool)+0x1dba>	10004759: R_386_PC32	drawBootScreen()
1000475d:	83 ec 0c             	sub    esp,0xc
10004760:	68 18 2e 00 00       	push   0x2e18
10004765:	e8 fc ff ff ff       	call   10004766 <firstRun(bool)+0x1dc7>	10004766: R_386_PC32	milliTenthSleep(unsigned int)
1000476a:	83 c4 10             	add    esp,0x10
1000476d:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
10004774:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10004776: R_386_32	installKey
1000477b:	e8 fc ff ff ff       	call   1000477c <firstRun(bool)+0x1ddd>	1000477c: R_386_PC32	drawBootScreen()
10004780:	83 ec 0c             	sub    esp,0xc
10004783:	68 96 90 00 10       	push   0x10009096	10004784: R_386_32	.text
10004788:	6a 0e                	push   0xe
1000478a:	6a 32                	push   0x32
1000478c:	6a 02                	push   0x2
1000478e:	6a 16                	push   0x16
10004790:	e8 fc ff ff ff       	call   10004791 <firstRun(bool)+0x1df2>	10004791: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
10004795:	83 c4 20             	add    esp,0x20
10004798:	a1 00 00 00 00       	mov    eax,ds:0x0	10004799: R_386_32	term
1000479d:	83 ec 04             	sub    esp,0x4
100047a0:	6a 18                	push   0x18
100047a2:	6a 11                	push   0x11
100047a4:	50                   	push   eax
100047a5:	e8 fc ff ff ff       	call   100047a6 <firstRun(bool)+0x1e07>	100047a6: R_386_PC32	VgaText::setCursor(int, int)
100047aa:	83 c4 10             	add    esp,0x10
100047ad:	a1 00 00 00 00       	mov    eax,ds:0x0	100047ae: R_386_32	term
100047b2:	6a 0b                	push   0xb
100047b4:	6a 03                	push   0x3
100047b6:	68 32 8f 00 10       	push   0x10008f32	100047b7: R_386_32	.text
100047bb:	50                   	push   eax
100047bc:	e8 fc ff ff ff       	call   100047bd <firstRun(bool)+0x1e1e>	100047bd: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
100047c1:	83 c4 10             	add    esp,0x10
100047c4:	a1 00 00 00 00       	mov    eax,ds:0x0	100047c5: R_386_32	term
100047c9:	83 ec 04             	sub    esp,0x4
100047cc:	6a 05                	push   0x5
100047ce:	6a 18                	push   0x18
100047d0:	50                   	push   eax
100047d1:	e8 fc ff ff ff       	call   100047d2 <firstRun(bool)+0x1e33>	100047d2: R_386_PC32	VgaText::setCursor(int, int)
100047d6:	83 c4 10             	add    esp,0x10
100047d9:	a1 00 00 00 00       	mov    eax,ds:0x0	100047da: R_386_32	term
100047de:	83 ec 08             	sub    esp,0x8
100047e1:	68 a4 90 00 10       	push   0x100090a4	100047e2: R_386_32	.text
100047e6:	50                   	push   eax
100047e7:	e8 fc ff ff ff       	call   100047e8 <firstRun(bool)+0x1e49>	100047e8: R_386_PC32	VgaText::puts(char const*)
100047ec:	83 c4 10             	add    esp,0x10
100047ef:	a1 00 00 00 00       	mov    eax,ds:0x0	100047f0: R_386_32	term
100047f4:	83 ec 04             	sub    esp,0x4
100047f7:	6a 06                	push   0x6
100047f9:	6a 18                	push   0x18
100047fb:	50                   	push   eax
100047fc:	e8 fc ff ff ff       	call   100047fd <firstRun(bool)+0x1e5e>	100047fd: R_386_PC32	VgaText::setCursor(int, int)
10004801:	83 c4 10             	add    esp,0x10
10004804:	a1 00 00 00 00       	mov    eax,ds:0x0	10004805: R_386_32	term
10004809:	83 ec 08             	sub    esp,0x8
1000480c:	68 08 8f 00 10       	push   0x10008f08	1000480d: R_386_32	.text
10004811:	50                   	push   eax
10004812:	e8 fc ff ff ff       	call   10004813 <firstRun(bool)+0x1e74>	10004813: R_386_PC32	VgaText::puts(char const*)
10004817:	83 c4 10             	add    esp,0x10
1000481a:	c6 05 10 00 00 00 00 	mov    BYTE PTR ds:0x10,0x0	1000481c: R_386_32	pkeybuf
10004821:	c6 05 11 00 00 00 00 	mov    BYTE PTR ds:0x11,0x0	10004823: R_386_32	pkeybuf
10004828:	a1 00 00 00 00       	mov    eax,ds:0x0	10004829: R_386_32	term
1000482d:	83 ec 04             	sub    esp,0x4
10004830:	6a 08                	push   0x8
10004832:	6a 1c                	push   0x1c
10004834:	50                   	push   eax
10004835:	e8 fc ff ff ff       	call   10004836 <firstRun(bool)+0x1e97>	10004836: R_386_PC32	VgaText::setCursor(int, int)
1000483a:	83 c4 10             	add    esp,0x10
1000483d:	a1 00 00 00 00       	mov    eax,ds:0x0	1000483e: R_386_32	term
10004842:	83 ec 08             	sub    esp,0x8
10004845:	68 00 00 00 00       	push   0x0	10004846: R_386_32	pkeybuf
1000484a:	50                   	push   eax
1000484b:	e8 fc ff ff ff       	call   1000484c <firstRun(bool)+0x1ead>	1000484c: R_386_PC32	VgaText::puts(char const*)
10004850:	83 c4 10             	add    esp,0x10
10004853:	a1 00 00 00 00       	mov    eax,ds:0x0	10004854: R_386_32	term
10004858:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
1000485b:	83 c2 1c             	add    edx,0x1c
1000485e:	83 ec 04             	sub    esp,0x4
10004861:	6a 08                	push   0x8
10004863:	52                   	push   edx
10004864:	50                   	push   eax
10004865:	e8 fc ff ff ff       	call   10004866 <firstRun(bool)+0x1ec7>	10004866: R_386_PC32	VgaText::setCursor(int, int)
1000486a:	83 c4 10             	add    esp,0x10
1000486d:	a1 00 00 00 00       	mov    eax,ds:0x0	1000486e: R_386_32	term
10004872:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10004875:	81 c2 00 00 00 00    	add    edx,0x0	10004877: R_386_32	pkeybuf
1000487b:	8a 12                	mov    dl,BYTE PTR [edx]
1000487d:	0f be d2             	movsx  edx,dl
10004880:	6a 00                	push   0x0
10004882:	6a 0f                	push   0xf
10004884:	52                   	push   edx
10004885:	50                   	push   eax
10004886:	e8 fc ff ff ff       	call   10004887 <firstRun(bool)+0x1ee8>	10004887: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
1000488b:	83 c4 10             	add    esp,0x10
1000488e:	a1 00 00 00 00       	mov    eax,ds:0x0	1000488f: R_386_32	term
10004893:	83 ec 04             	sub    esp,0x4
10004896:	6a 08                	push   0x8
10004898:	6a 2c                	push   0x2c
1000489a:	50                   	push   eax
1000489b:	e8 fc ff ff ff       	call   1000489c <firstRun(bool)+0x1efd>	1000489c: R_386_PC32	VgaText::setCursor(int, int)
100048a0:	83 c4 10             	add    esp,0x10
100048a3:	a1 00 00 00 00       	mov    eax,ds:0x0	100048a4: R_386_32	term
100048a8:	6a 0f                	push   0xf
100048aa:	6a 0f                	push   0xf
100048ac:	6a 20                	push   0x20
100048ae:	50                   	push   eax
100048af:	e8 fc ff ff ff       	call   100048b0 <firstRun(bool)+0x1f11>	100048b0: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
100048b4:	83 c4 10             	add    esp,0x10
100048b7:	a1 00 00 00 00       	mov    eax,ds:0x0	100048b8: R_386_32	term
100048bc:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
100048bf:	83 c2 1c             	add    edx,0x1c
100048c2:	83 ec 04             	sub    esp,0x4
100048c5:	6a 08                	push   0x8
100048c7:	52                   	push   edx
100048c8:	50                   	push   eax
100048c9:	e8 fc ff ff ff       	call   100048ca <firstRun(bool)+0x1f2b>	100048ca: R_386_PC32	VgaText::setCursor(int, int)
100048ce:	83 c4 10             	add    esp,0x10
100048d1:	a0 00 00 00 00       	mov    al,ds:0x0	100048d2: R_386_32	installKey
100048d6:	84 c0                	test   al,al
100048d8:	0f 94 c0             	sete   al
100048db:	84 c0                	test   al,al
100048dd:	74 02                	je     100048e1 <firstRun(bool)+0x1f42>
100048df:	eb f0                	jmp    100048d1 <firstRun(bool)+0x1f32>
100048e1:	a1 00 00 00 00       	mov    eax,ds:0x0	100048e2: R_386_32	term
100048e6:	05 82 00 00 00       	add    eax,0x82
100048eb:	83 ec 04             	sub    esp,0x4
100048ee:	6a 10                	push   0x10
100048f0:	6a 00                	push   0x0
100048f2:	50                   	push   eax
100048f3:	e8 fc ff ff ff       	call   100048f4 <firstRun(bool)+0x1f55>	100048f4: R_386_PC32	memset
100048f8:	83 c4 10             	add    esp,0x10
100048fb:	a1 00 00 00 00       	mov    eax,ds:0x0	100048fc: R_386_32	term
10004900:	05 02 01 00 00       	add    eax,0x102
10004905:	83 ec 04             	sub    esp,0x4
10004908:	6a 10                	push   0x10
1000490a:	6a 00                	push   0x0
1000490c:	50                   	push   eax
1000490d:	e8 fc ff ff ff       	call   1000490e <firstRun(bool)+0x1f6f>	1000490e: R_386_PC32	memset
10004912:	83 c4 10             	add    esp,0x10
10004915:	a0 00 00 00 00       	mov    al,ds:0x0	10004916: R_386_32	installKey
1000491a:	3c 03                	cmp    al,0x3
1000491c:	74 09                	je     10004927 <firstRun(bool)+0x1f88>
1000491e:	a0 00 00 00 00       	mov    al,ds:0x0	1000491f: R_386_32	installKey
10004923:	3c 08                	cmp    al,0x8
10004925:	75 04                	jne    1000492b <firstRun(bool)+0x1f8c>
10004927:	b0 01                	mov    al,0x1
10004929:	eb 02                	jmp    1000492d <firstRun(bool)+0x1f8e>
1000492b:	b0 00                	mov    al,0x0
1000492d:	84 c0                	test   al,al
1000492f:	74 31                	je     10004962 <firstRun(bool)+0x1fc3>
10004931:	ff 4d e4             	dec    DWORD PTR [ebp-0x1c]
10004934:	83 7d e4 ff          	cmp    DWORD PTR [ebp-0x1c],0xffffffff
10004938:	75 14                	jne    1000494e <firstRun(bool)+0x1faf>
1000493a:	83 ec 0c             	sub    esp,0xc
1000493d:	68 00 00 00 00       	push   0x0	1000493e: R_386_32	pkeybuf
10004942:	e8 fc ff ff ff       	call   10004943 <firstRun(bool)+0x1fa4>	10004943: R_386_PC32	strlen
10004947:	83 c4 10             	add    esp,0x10
1000494a:	48                   	dec    eax
1000494b:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
1000494e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10004951:	05 00 00 00 00       	add    eax,0x0	10004952: R_386_32	pkeybuf
10004956:	8a 00                	mov    al,BYTE PTR [eax]
10004958:	3c 2d                	cmp    al,0x2d
1000495a:	0f 85 6f 03 00 00    	jne    10004ccf <firstRun(bool)+0x2330>
10004960:	eb cf                	jmp    10004931 <firstRun(bool)+0x1f92>
10004962:	a0 00 00 00 00       	mov    al,ds:0x0	10004963: R_386_32	installKey
10004967:	3c 2f                	cmp    al,0x2f
10004969:	7e 09                	jle    10004974 <firstRun(bool)+0x1fd5>
1000496b:	a0 00 00 00 00       	mov    al,ds:0x0	1000496c: R_386_32	installKey
10004970:	3c 39                	cmp    al,0x39
10004972:	7e 36                	jle    100049aa <firstRun(bool)+0x200b>
10004974:	a0 00 00 00 00       	mov    al,ds:0x0	10004975: R_386_32	installKey
10004979:	3c 40                	cmp    al,0x40
1000497b:	7e 09                	jle    10004986 <firstRun(bool)+0x1fe7>
1000497d:	a0 00 00 00 00       	mov    al,ds:0x0	1000497e: R_386_32	installKey
10004982:	3c 5a                	cmp    al,0x5a
10004984:	7e 24                	jle    100049aa <firstRun(bool)+0x200b>
10004986:	a0 00 00 00 00       	mov    al,ds:0x0	10004987: R_386_32	installKey
1000498b:	3c 60                	cmp    al,0x60
1000498d:	7e 09                	jle    10004998 <firstRun(bool)+0x1ff9>
1000498f:	a0 00 00 00 00       	mov    al,ds:0x0	10004990: R_386_32	installKey
10004994:	3c 7a                	cmp    al,0x7a
10004996:	7e 12                	jle    100049aa <firstRun(bool)+0x200b>
10004998:	a0 00 00 00 00       	mov    al,ds:0x0	10004999: R_386_32	installKey
1000499d:	3c 20                	cmp    al,0x20
1000499f:	74 09                	je     100049aa <firstRun(bool)+0x200b>
100049a1:	a0 00 00 00 00       	mov    al,ds:0x0	100049a2: R_386_32	installKey
100049a6:	3c 04                	cmp    al,0x4
100049a8:	75 04                	jne    100049ae <firstRun(bool)+0x200f>
100049aa:	b0 01                	mov    al,0x1
100049ac:	eb 02                	jmp    100049b0 <firstRun(bool)+0x2011>
100049ae:	b0 00                	mov    al,0x0
100049b0:	84 c0                	test   al,al
100049b2:	0f 84 a3 00 00 00    	je     10004a5b <firstRun(bool)+0x20bc>
100049b8:	a0 00 00 00 00       	mov    al,ds:0x0	100049b9: R_386_32	installKey
100049bd:	3c 2f                	cmp    al,0x2f
100049bf:	7e 09                	jle    100049ca <firstRun(bool)+0x202b>
100049c1:	a0 00 00 00 00       	mov    al,ds:0x0	100049c2: R_386_32	installKey
100049c6:	3c 39                	cmp    al,0x39
100049c8:	7e 24                	jle    100049ee <firstRun(bool)+0x204f>
100049ca:	a0 00 00 00 00       	mov    al,ds:0x0	100049cb: R_386_32	installKey
100049cf:	3c 40                	cmp    al,0x40
100049d1:	7e 09                	jle    100049dc <firstRun(bool)+0x203d>
100049d3:	a0 00 00 00 00       	mov    al,ds:0x0	100049d4: R_386_32	installKey
100049d8:	3c 5a                	cmp    al,0x5a
100049da:	7e 12                	jle    100049ee <firstRun(bool)+0x204f>
100049dc:	a0 00 00 00 00       	mov    al,ds:0x0	100049dd: R_386_32	installKey
100049e1:	3c 60                	cmp    al,0x60
100049e3:	7e 0d                	jle    100049f2 <firstRun(bool)+0x2053>
100049e5:	a0 00 00 00 00       	mov    al,ds:0x0	100049e6: R_386_32	installKey
100049ea:	3c 7a                	cmp    al,0x7a
100049ec:	7f 04                	jg     100049f2 <firstRun(bool)+0x2053>
100049ee:	b0 01                	mov    al,0x1
100049f0:	eb 02                	jmp    100049f4 <firstRun(bool)+0x2055>
100049f2:	b0 00                	mov    al,0x0
100049f4:	84 c0                	test   al,al
100049f6:	74 2c                	je     10004a24 <firstRun(bool)+0x2085>
100049f8:	a0 00 00 00 00       	mov    al,ds:0x0	100049f9: R_386_32	installKey
100049fd:	3c 60                	cmp    al,0x60
100049ff:	7e 13                	jle    10004a14 <firstRun(bool)+0x2075>
10004a01:	a0 00 00 00 00       	mov    al,ds:0x0	10004a02: R_386_32	installKey
10004a06:	3c 7a                	cmp    al,0x7a
10004a08:	7f 0a                	jg     10004a14 <firstRun(bool)+0x2075>
10004a0a:	a0 00 00 00 00       	mov    al,ds:0x0	10004a0b: R_386_32	installKey
10004a0f:	83 e8 20             	sub    eax,0x20
10004a12:	eb 05                	jmp    10004a19 <firstRun(bool)+0x207a>
10004a14:	a0 00 00 00 00       	mov    al,ds:0x0	10004a15: R_386_32	installKey
10004a19:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10004a1c:	81 c2 00 00 00 00    	add    edx,0x0	10004a1e: R_386_32	pkeybuf
10004a22:	88 02                	mov    BYTE PTR [edx],al
10004a24:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
10004a27:	83 ec 0c             	sub    esp,0xc
10004a2a:	68 00 00 00 00       	push   0x0	10004a2b: R_386_32	pkeybuf
10004a2f:	e8 fc ff ff ff       	call   10004a30 <firstRun(bool)+0x2091>	10004a30: R_386_PC32	strlen
10004a34:	83 c4 10             	add    esp,0x10
10004a37:	89 c2                	mov    edx,eax
10004a39:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10004a3c:	39 c2                	cmp    edx,eax
10004a3e:	77 07                	ja     10004a47 <firstRun(bool)+0x20a8>
10004a40:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
10004a47:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10004a4a:	05 00 00 00 00       	add    eax,0x0	10004a4b: R_386_32	pkeybuf
10004a4f:	8a 00                	mov    al,BYTE PTR [eax]
10004a51:	3c 2d                	cmp    al,0x2d
10004a53:	0f 85 76 02 00 00    	jne    10004ccf <firstRun(bool)+0x2330>
10004a59:	eb c9                	jmp    10004a24 <firstRun(bool)+0x2085>
10004a5b:	a0 00 00 00 00       	mov    al,ds:0x0	10004a5c: R_386_32	installKey
10004a60:	3c 1b                	cmp    al,0x1b
10004a62:	0f 94 c0             	sete   al
10004a65:	84 c0                	test   al,al
10004a67:	0f 85 99 f9 ff ff    	jne    10004406 <firstRun(bool)+0x1a67>
10004a6d:	a0 00 00 00 00       	mov    al,ds:0x0	10004a6e: R_386_32	installKey
10004a72:	3c 0a                	cmp    al,0xa
10004a74:	0f 94 c0             	sete   al
10004a77:	84 c0                	test   al,al
10004a79:	0f 84 50 02 00 00    	je     10004ccf <firstRun(bool)+0x2330>
10004a7f:	83 ec 0c             	sub    esp,0xc
10004a82:	68 00 00 00 00       	push   0x0	10004a83: R_386_32	pkeybuf
10004a87:	e8 fc ff ff ff       	call   10004a88 <firstRun(bool)+0x20e9>	10004a88: R_386_PC32	checkExtendedKey(char*)
10004a8c:	83 c4 10             	add    esp,0x10
10004a8f:	85 c0                	test   eax,eax
10004a91:	0f 95 c0             	setne  al
10004a94:	88 45 87             	mov    BYTE PTR [ebp-0x79],al
10004a97:	80 7d 87 00          	cmp    BYTE PTR [ebp-0x79],0x0
10004a9b:	74 5b                	je     10004af8 <firstRun(bool)+0x2159>
10004a9d:	83 ec 0c             	sub    esp,0xc
10004aa0:	68 f0 0a 00 00       	push   0xaf0
10004aa5:	e8 fc ff ff ff       	call   10004aa6 <firstRun(bool)+0x2107>	10004aa6: R_386_PC32	milliTenthSleep(unsigned int)
10004aaa:	83 c4 10             	add    esp,0x10
10004aad:	e8 fc ff ff ff       	call   10004aae <firstRun(bool)+0x210f>	10004aae: R_386_PC32	drawBootScreen()
10004ab2:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10004ab4: R_386_32	installKey
10004ab9:	83 ec 0c             	sub    esp,0xc
10004abc:	68 84 03 00 00       	push   0x384
10004ac1:	e8 fc ff ff ff       	call   10004ac2 <firstRun(bool)+0x2123>	10004ac2: R_386_PC32	milliTenthSleep(unsigned int)
10004ac6:	83 c4 10             	add    esp,0x10
10004ac9:	e8 fc ff ff ff       	call   10004aca <firstRun(bool)+0x212b>	10004aca: R_386_PC32	drawBootScreen()
10004ace:	83 ec 0c             	sub    esp,0xc
10004ad1:	68 c0 12 00 00       	push   0x12c0
10004ad6:	e8 fc ff ff ff       	call   10004ad7 <firstRun(bool)+0x2138>	10004ad7: R_386_PC32	milliTenthSleep(unsigned int)
10004adb:	83 c4 10             	add    esp,0x10
10004ade:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10004ae0: R_386_32	installKey
10004ae5:	90                   	nop
10004ae6:	80 bd a4 fe ff ff 00 	cmp    BYTE PTR [ebp-0x15c],0x0
10004aed:	0f 84 e8 01 00 00    	je     10004cdb <firstRun(bool)+0x233c>
10004af3:	e9 d2 02 00 00       	jmp    10004dca <firstRun(bool)+0x242b>
10004af8:	83 ec 0c             	sub    esp,0xc
10004afb:	68 f0 0a 00 00       	push   0xaf0
10004b00:	e8 fc ff ff ff       	call   10004b01 <firstRun(bool)+0x2162>	10004b01: R_386_PC32	milliTenthSleep(unsigned int)
10004b05:	83 c4 10             	add    esp,0x10
10004b08:	e8 fc ff ff ff       	call   10004b09 <firstRun(bool)+0x216a>	10004b09: R_386_PC32	drawBootScreen()
10004b0d:	83 ec 08             	sub    esp,0x8
10004b10:	6a 01                	push   0x1
10004b12:	68 96 90 00 10       	push   0x10009096	10004b13: R_386_32	.text
10004b17:	6a 0e                	push   0xe
10004b19:	6a 32                	push   0x32
10004b1b:	6a 02                	push   0x2
10004b1d:	6a 16                	push   0x16
10004b1f:	e8 fc ff ff ff       	call   10004b20 <firstRun(bool)+0x2181>	10004b20: R_386_PC32	drawBasicWindowX(int, int, int, int, char const*, bool)
10004b24:	83 c4 20             	add    esp,0x20
10004b27:	a1 00 00 00 00       	mov    eax,ds:0x0	10004b28: R_386_32	term
10004b2c:	83 ec 04             	sub    esp,0x4
10004b2f:	6a 05                	push   0x5
10004b31:	6a 18                	push   0x18
10004b33:	50                   	push   eax
10004b34:	e8 fc ff ff ff       	call   10004b35 <firstRun(bool)+0x2196>	10004b35: R_386_PC32	VgaText::setCursor(int, int)
10004b39:	83 c4 10             	add    esp,0x10
10004b3c:	a1 00 00 00 00       	mov    eax,ds:0x0	10004b3d: R_386_32	term
10004b41:	6a 07                	push   0x7
10004b43:	6a 00                	push   0x0
10004b45:	68 a4 90 00 10       	push   0x100090a4	10004b46: R_386_32	.text
10004b4a:	50                   	push   eax
10004b4b:	e8 fc ff ff ff       	call   10004b4c <firstRun(bool)+0x21ad>	10004b4c: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10004b50:	83 c4 10             	add    esp,0x10
10004b53:	a1 00 00 00 00       	mov    eax,ds:0x0	10004b54: R_386_32	term
10004b58:	83 ec 04             	sub    esp,0x4
10004b5b:	6a 06                	push   0x6
10004b5d:	6a 18                	push   0x18
10004b5f:	50                   	push   eax
10004b60:	e8 fc ff ff ff       	call   10004b61 <firstRun(bool)+0x21c2>	10004b61: R_386_PC32	VgaText::setCursor(int, int)
10004b65:	83 c4 10             	add    esp,0x10
10004b68:	a1 00 00 00 00       	mov    eax,ds:0x0	10004b69: R_386_32	term
10004b6d:	6a 07                	push   0x7
10004b6f:	6a 00                	push   0x0
10004b71:	68 08 8f 00 10       	push   0x10008f08	10004b72: R_386_32	.text
10004b76:	50                   	push   eax
10004b77:	e8 fc ff ff ff       	call   10004b78 <firstRun(bool)+0x21d9>	10004b78: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10004b7c:	83 c4 10             	add    esp,0x10
10004b7f:	a1 00 00 00 00       	mov    eax,ds:0x0	10004b80: R_386_32	term
10004b84:	83 ec 04             	sub    esp,0x4
10004b87:	6a 08                	push   0x8
10004b89:	6a 1c                	push   0x1c
10004b8b:	50                   	push   eax
10004b8c:	e8 fc ff ff ff       	call   10004b8d <firstRun(bool)+0x21ee>	10004b8d: R_386_PC32	VgaText::setCursor(int, int)
10004b91:	83 c4 10             	add    esp,0x10
10004b94:	a1 00 00 00 00       	mov    eax,ds:0x0	10004b95: R_386_32	term
10004b99:	6a 07                	push   0x7
10004b9b:	6a 00                	push   0x0
10004b9d:	68 00 00 00 00       	push   0x0	10004b9e: R_386_32	pkeybuf
10004ba2:	50                   	push   eax
10004ba3:	e8 fc ff ff ff       	call   10004ba4 <firstRun(bool)+0x2205>	10004ba4: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10004ba8:	83 c4 10             	add    esp,0x10
10004bab:	a1 00 00 00 00       	mov    eax,ds:0x0	10004bac: R_386_32	term
10004bb0:	83 ec 04             	sub    esp,0x4
10004bb3:	6a 08                	push   0x8
10004bb5:	6a 2c                	push   0x2c
10004bb7:	50                   	push   eax
10004bb8:	e8 fc ff ff ff       	call   10004bb9 <firstRun(bool)+0x221a>	10004bb9: R_386_PC32	VgaText::setCursor(int, int)
10004bbd:	83 c4 10             	add    esp,0x10
10004bc0:	a1 00 00 00 00       	mov    eax,ds:0x0	10004bc1: R_386_32	term
10004bc5:	6a 07                	push   0x7
10004bc7:	6a 07                	push   0x7
10004bc9:	6a 20                	push   0x20
10004bcb:	50                   	push   eax
10004bcc:	e8 fc ff ff ff       	call   10004bcd <firstRun(bool)+0x222e>	10004bcd: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
10004bd1:	83 c4 10             	add    esp,0x10
10004bd4:	a1 00 00 00 00       	mov    eax,ds:0x0	10004bd5: R_386_32	term
10004bd9:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10004bdc:	83 c2 1c             	add    edx,0x1c
10004bdf:	83 ec 04             	sub    esp,0x4
10004be2:	6a 08                	push   0x8
10004be4:	52                   	push   edx
10004be5:	50                   	push   eax
10004be6:	e8 fc ff ff ff       	call   10004be7 <firstRun(bool)+0x2248>	10004be7: R_386_PC32	VgaText::setCursor(int, int)
10004beb:	83 c4 10             	add    esp,0x10
10004bee:	83 ec 0c             	sub    esp,0xc
10004bf1:	68 f5 8f 00 10       	push   0x10008ff5	10004bf2: R_386_32	.text
10004bf6:	6a 0b                	push   0xb
10004bf8:	6a 2b                	push   0x2b
10004bfa:	6a 0a                	push   0xa
10004bfc:	6a 22                	push   0x22
10004bfe:	e8 fc ff ff ff       	call   10004bff <firstRun(bool)+0x2260>	10004bff: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
10004c03:	83 c4 20             	add    esp,0x20
10004c06:	a1 00 00 00 00       	mov    eax,ds:0x0	10004c07: R_386_32	term
10004c0b:	83 ec 04             	sub    esp,0x4
10004c0e:	6a 0d                	push   0xd
10004c10:	6a 24                	push   0x24
10004c12:	50                   	push   eax
10004c13:	e8 fc ff ff ff       	call   10004c14 <firstRun(bool)+0x2275>	10004c14: R_386_PC32	VgaText::setCursor(int, int)
10004c18:	83 c4 10             	add    esp,0x10
10004c1b:	a1 00 00 00 00       	mov    eax,ds:0x0	10004c1c: R_386_32	term
10004c20:	83 ec 08             	sub    esp,0x8
10004c23:	68 cc 90 00 10       	push   0x100090cc	10004c24: R_386_32	.text
10004c28:	50                   	push   eax
10004c29:	e8 fc ff ff ff       	call   10004c2a <firstRun(bool)+0x228b>	10004c2a: R_386_PC32	VgaText::puts(char const*)
10004c2e:	83 c4 10             	add    esp,0x10
10004c31:	a1 00 00 00 00       	mov    eax,ds:0x0	10004c32: R_386_32	term
10004c36:	83 ec 04             	sub    esp,0x4
10004c39:	6a 0f                	push   0xf
10004c3b:	6a 24                	push   0x24
10004c3d:	50                   	push   eax
10004c3e:	e8 fc ff ff ff       	call   10004c3f <firstRun(bool)+0x22a0>	10004c3f: R_386_PC32	VgaText::setCursor(int, int)
10004c43:	83 c4 10             	add    esp,0x10
10004c46:	a1 00 00 00 00       	mov    eax,ds:0x0	10004c47: R_386_32	term
10004c4b:	83 ec 08             	sub    esp,0x8
10004c4e:	68 f4 90 00 10       	push   0x100090f4	10004c4f: R_386_32	.text
10004c53:	50                   	push   eax
10004c54:	e8 fc ff ff ff       	call   10004c55 <firstRun(bool)+0x22b6>	10004c55: R_386_PC32	VgaText::puts(char const*)
10004c59:	83 c4 10             	add    esp,0x10
10004c5c:	a1 00 00 00 00       	mov    eax,ds:0x0	10004c5d: R_386_32	term
10004c61:	83 ec 04             	sub    esp,0x4
10004c64:	6a 10                	push   0x10
10004c66:	6a 24                	push   0x24
10004c68:	50                   	push   eax
10004c69:	e8 fc ff ff ff       	call   10004c6a <firstRun(bool)+0x22cb>	10004c6a: R_386_PC32	VgaText::setCursor(int, int)
10004c6e:	83 c4 10             	add    esp,0x10
10004c71:	a1 00 00 00 00       	mov    eax,ds:0x0	10004c72: R_386_32	term
10004c76:	83 ec 08             	sub    esp,0x8
10004c79:	68 18 91 00 10       	push   0x10009118	10004c7a: R_386_32	.text
10004c7e:	50                   	push   eax
10004c7f:	e8 fc ff ff ff       	call   10004c80 <firstRun(bool)+0x22e1>	10004c80: R_386_PC32	VgaText::puts(char const*)
10004c84:	83 c4 10             	add    esp,0x10
10004c87:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10004c89: R_386_32	installKey
10004c8e:	83 ec 0c             	sub    esp,0xc
10004c91:	68 94 11 00 00       	push   0x1194
10004c96:	e8 fc ff ff ff       	call   10004c97 <firstRun(bool)+0x22f8>	10004c97: R_386_PC32	milliTenthSleep(unsigned int)
10004c9b:	83 c4 10             	add    esp,0x10
10004c9e:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10004ca0: R_386_32	installKey
10004ca5:	a0 00 00 00 00       	mov    al,ds:0x0	10004ca6: R_386_32	installKey
10004caa:	84 c0                	test   al,al
10004cac:	0f 94 c0             	sete   al
10004caf:	84 c0                	test   al,al
10004cb1:	74 02                	je     10004cb5 <firstRun(bool)+0x2316>
10004cb3:	eb f0                	jmp    10004ca5 <firstRun(bool)+0x2306>
10004cb5:	e8 fc ff ff ff       	call   10004cb6 <firstRun(bool)+0x2317>	10004cb6: R_386_PC32	drawBootScreen()
10004cba:	83 ec 0c             	sub    esp,0xc
10004cbd:	68 9c 18 00 00       	push   0x189c
10004cc2:	e8 fc ff ff ff       	call   10004cc3 <firstRun(bool)+0x2324>	10004cc3: R_386_PC32	milliTenthSleep(unsigned int)
10004cc7:	83 c4 10             	add    esp,0x10
10004cca:	e9 a5 fa ff ff       	jmp    10004774 <firstRun(bool)+0x1dd5>
10004ccf:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10004cd1: R_386_32	installKey
10004cd6:	e9 3f fb ff ff       	jmp    1000481a <firstRun(bool)+0x1e7b>
10004cdb:	e8 fc ff ff ff       	call   10004cdc <firstRun(bool)+0x233d>	10004cdc: R_386_PC32	drawBootScreen()
10004ce0:	83 ec 0c             	sub    esp,0xc
10004ce3:	68 39 91 00 10       	push   0x10009139	10004ce4: R_386_32	.text
10004ce8:	6a 0d                	push   0xd
10004cea:	6a 32                	push   0x32
10004cec:	6a 05                	push   0x5
10004cee:	6a 16                	push   0x16
10004cf0:	e8 fc ff ff ff       	call   10004cf1 <firstRun(bool)+0x2352>	10004cf1: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
10004cf5:	83 c4 20             	add    esp,0x20
10004cf8:	83 ec 0c             	sub    esp,0xc
10004cfb:	6a 00                	push   0x0
10004cfd:	e8 fc ff ff ff       	call   10004cfe <firstRun(bool)+0x235f>	10004cfe: R_386_PC32	bootInstallTasks(int)
10004d02:	83 c4 10             	add    esp,0x10
10004d05:	83 ec 04             	sub    esp,0x4
10004d08:	6a 0c                	push   0xc
10004d0a:	68 51 91 00 10       	push   0x10009151	10004d0b: R_386_32	.text
10004d0f:	68 62 91 00 10       	push   0x10009162	10004d10: R_386_32	.text
10004d14:	e8 fc ff ff ff       	call   10004d15 <firstRun(bool)+0x2376>	10004d15: R_386_PC32	Reg::readIntWithDefault(char*, char*, int)
10004d19:	83 c4 10             	add    esp,0x10
10004d1c:	89 45 80             	mov    DWORD PTR [ebp-0x80],eax
10004d1f:	83 ec 0c             	sub    esp,0xc
10004d22:	ff 75 80             	push   DWORD PTR [ebp-0x80]
10004d25:	e8 fc ff ff ff       	call   10004d26 <firstRun(bool)+0x2387>	10004d26: R_386_PC32	Virt::setupPageSwapping(int)
10004d2a:	83 c4 10             	add    esp,0x10
10004d2d:	83 ec 0c             	sub    esp,0xc
10004d30:	6a 01                	push   0x1
10004d32:	e8 fc ff ff ff       	call   10004d33 <firstRun(bool)+0x2394>	10004d33: R_386_PC32	bootInstallTasks(int)
10004d37:	83 c4 10             	add    esp,0x10
10004d3a:	83 ec 0c             	sub    esp,0xc
10004d3d:	68 69 91 00 10       	push   0x10009169	10004d3e: R_386_32	.text
10004d42:	e8 fc ff ff ff       	call   10004d43 <firstRun(bool)+0x23a4>	10004d43: R_386_PC32	rmtree(char*)
10004d47:	83 c4 10             	add    esp,0x10
10004d4a:	83 ec 0c             	sub    esp,0xc
10004d4d:	68 83 91 00 10       	push   0x10009183	10004d4e: R_386_32	.text
10004d52:	e8 fc ff ff ff       	call   10004d53 <firstRun(bool)+0x23b4>	10004d53: R_386_PC32	rmtree(char*)
10004d57:	83 c4 10             	add    esp,0x10
10004d5a:	83 ec 08             	sub    esp,0x8
10004d5d:	68 c0 01 00 00       	push   0x1c0
10004d62:	68 69 91 00 10       	push   0x10009169	10004d63: R_386_32	.text
10004d67:	e8 fc ff ff ff       	call   10004d68 <firstRun(bool)+0x23c9>	10004d68: R_386_PC32	mkdir(char const*, int)
10004d6c:	83 c4 10             	add    esp,0x10
10004d6f:	83 ec 08             	sub    esp,0x8
10004d72:	68 c0 01 00 00       	push   0x1c0
10004d77:	68 83 91 00 10       	push   0x10009183	10004d78: R_386_32	.text
10004d7c:	e8 fc ff ff ff       	call   10004d7d <firstRun(bool)+0x23de>	10004d7d: R_386_PC32	mkdir(char const*, int)
10004d81:	83 c4 10             	add    esp,0x10
10004d84:	83 ec 08             	sub    esp,0x8
10004d87:	68 69 91 00 10       	push   0x10009169	10004d88: R_386_32	.text
10004d8c:	68 9c 91 00 10       	push   0x1000919c	10004d8d: R_386_32	.text
10004d91:	e8 fc ff ff ff       	call   10004d92 <firstRun(bool)+0x23f3>	10004d92: R_386_PC32	copytree(char*, char*)
10004d96:	83 c4 10             	add    esp,0x10
10004d99:	83 ec 0c             	sub    esp,0xc
10004d9c:	6a 02                	push   0x2
10004d9e:	e8 fc ff ff ff       	call   10004d9f <firstRun(bool)+0x2400>	10004d9f: R_386_PC32	bootInstallTasks(int)
10004da3:	83 c4 10             	add    esp,0x10
10004da6:	83 ec 0c             	sub    esp,0xc
10004da9:	68 00 00 00 00       	push   0x0	10004daa: R_386_32	currName
10004dae:	e8 fc ff ff ff       	call   10004daf <firstRun(bool)+0x2410>	10004daf: R_386_PC32	createUser(char const*)
10004db3:	83 c4 10             	add    esp,0x10
10004db6:	83 ec 0c             	sub    esp,0xc
10004db9:	6a 03                	push   0x3
10004dbb:	e8 fc ff ff ff       	call   10004dbc <firstRun(bool)+0x241d>	10004dbc: R_386_PC32	bootInstallTasks(int)
10004dc0:	83 c4 10             	add    esp,0x10
10004dc3:	c6 05 00 00 00 00 01 	mov    BYTE PTR ds:0x0,0x1	10004dc5: R_386_32	VgaText::hiddenOut
10004dca:	8d 65 f4             	lea    esp,[ebp-0xc]
10004dcd:	5b                   	pop    ebx
10004dce:	5e                   	pop    esi
10004dcf:	5f                   	pop    edi
10004dd0:	5d                   	pop    ebp
10004dd1:	c3                   	ret    

10004dd2 <loadExtensions()>:
10004dd2:	55                   	push   ebp
10004dd3:	89 e5                	mov    ebp,esp
10004dd5:	83 ec 08             	sub    esp,0x8
10004dd8:	83 ec 0c             	sub    esp,0xc
10004ddb:	68 44 92 00 10       	push   0x10009244	10004ddc: R_386_32	.text
10004de0:	e8 fc ff ff ff       	call   10004de1 <loadExtensions()+0xf>	10004de1: R_386_PC32	KeSetBootMessage(char const*)
10004de5:	83 c4 10             	add    esp,0x10
10004de8:	90                   	nop
10004de9:	c9                   	leave  
10004dea:	c3                   	ret    

10004deb <rgtree(Reghive_Tag*, int, int)>:
10004deb:	55                   	push   ebp
10004dec:	89 e5                	mov    ebp,esp
10004dee:	53                   	push   ebx
10004def:	83 ec 44             	sub    esp,0x44
10004df2:	83 7d 0c 01          	cmp    DWORD PTR [ebp+0xc],0x1
10004df6:	75 16                	jne    10004e0e <rgtree(Reghive_Tag*, int, int)+0x23>
10004df8:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
10004dfc:	75 10                	jne    10004e0e <rgtree(Reghive_Tag*, int, int)+0x23>
10004dfe:	83 ec 0c             	sub    esp,0xc
10004e01:	68 5a 92 00 10       	push   0x1000925a	10004e02: R_386_32	.text
10004e06:	e8 fc ff ff ff       	call   10004e07 <rgtree(Reghive_Tag*, int, int)+0x1c>	10004e07: R_386_PC32	Dbg::kprintf(char const*, ...)
10004e0b:	83 c4 10             	add    esp,0x10
10004e0e:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
10004e12:	0f 8e a9 00 00 00    	jle    10004ec1 <rgtree(Reghive_Tag*, int, int)+0xd6>
10004e18:	83 ec 04             	sub    esp,0x4
10004e1b:	6a 32                	push   0x32
10004e1d:	6a 00                	push   0x0
10004e1f:	8d 45 be             	lea    eax,[ebp-0x42]
10004e22:	50                   	push   eax
10004e23:	e8 fc ff ff ff       	call   10004e24 <rgtree(Reghive_Tag*, int, int)+0x39>	10004e24: R_386_PC32	memset
10004e28:	83 c4 10             	add    esp,0x10
10004e2b:	83 ec 04             	sub    esp,0x4
10004e2e:	8d 45 be             	lea    eax,[ebp-0x42]
10004e31:	50                   	push   eax
10004e32:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10004e35:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10004e38:	e8 fc ff ff ff       	call   10004e39 <rgtree(Reghive_Tag*, int, int)+0x4e>	10004e39: R_386_PC32	CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)
10004e3d:	83 c4 10             	add    esp,0x10
10004e40:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10004e43:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
10004e4a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10004e4d:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
10004e50:	7d 15                	jge    10004e67 <rgtree(Reghive_Tag*, int, int)+0x7c>
10004e52:	83 ec 0c             	sub    esp,0xc
10004e55:	68 45 8d 00 10       	push   0x10008d45	10004e56: R_386_32	.text
10004e5a:	e8 fc ff ff ff       	call   10004e5b <rgtree(Reghive_Tag*, int, int)+0x70>	10004e5b: R_386_PC32	Dbg::kprintf(char const*, ...)
10004e5f:	83 c4 10             	add    esp,0x10
10004e62:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10004e65:	eb e3                	jmp    10004e4a <rgtree(Reghive_Tag*, int, int)+0x5f>
10004e67:	83 ec 08             	sub    esp,0x8
10004e6a:	8d 45 be             	lea    eax,[ebp-0x42]
10004e6d:	50                   	push   eax
10004e6e:	68 5f 92 00 10       	push   0x1000925f	10004e6f: R_386_32	.text
10004e73:	e8 fc ff ff ff       	call   10004e74 <rgtree(Reghive_Tag*, int, int)+0x89>	10004e74: R_386_PC32	Dbg::kprintf(char const*, ...)
10004e78:	83 c4 10             	add    esp,0x10
10004e7b:	83 7d f0 4e          	cmp    DWORD PTR [ebp-0x10],0x4e
10004e7f:	75 27                	jne    10004ea8 <rgtree(Reghive_Tag*, int, int)+0xbd>
10004e81:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
10004e84:	8d 58 04             	lea    ebx,[eax+0x4]
10004e87:	83 ec 08             	sub    esp,0x8
10004e8a:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10004e8d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10004e90:	e8 fc ff ff ff       	call   10004e91 <rgtree(Reghive_Tag*, int, int)+0xa6>	10004e91: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10004e95:	83 c4 10             	add    esp,0x10
10004e98:	83 ec 04             	sub    esp,0x4
10004e9b:	53                   	push   ebx
10004e9c:	50                   	push   eax
10004e9d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10004ea0:	e8 fc ff ff ff       	call   10004ea1 <rgtree(Reghive_Tag*, int, int)+0xb6>	10004ea1: R_386_PC32	rgtree(Reghive_Tag*, int, int)
10004ea5:	83 c4 10             	add    esp,0x10
10004ea8:	83 ec 08             	sub    esp,0x8
10004eab:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10004eae:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10004eb1:	e8 fc ff ff ff       	call   10004eb2 <rgtree(Reghive_Tag*, int, int)+0xc7>	10004eb2: R_386_PC32	CmGetNext(Reghive_Tag*, int)
10004eb6:	83 c4 10             	add    esp,0x10
10004eb9:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
10004ebc:	e9 4d ff ff ff       	jmp    10004e0e <rgtree(Reghive_Tag*, int, int)+0x23>
10004ec1:	90                   	nop
10004ec2:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
10004ec5:	c9                   	leave  
10004ec6:	c3                   	ret    

10004ec7 <begin(void*)>:
10004ec7:	55                   	push   ebp
10004ec8:	89 e5                	mov    ebp,esp
10004eca:	57                   	push   edi
10004ecb:	56                   	push   esi
10004ecc:	53                   	push   ebx
10004ecd:	81 ec 5c 02 00 00    	sub    esp,0x25c
10004ed3:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
10004ed7:	83 ec 0c             	sub    esp,0xc
10004eda:	68 14 01 00 00       	push   0x114
10004edf:	e8 fc ff ff ff       	call   10004ee0 <begin(void*)+0x19>	10004ee0: R_386_PC32	operator new(unsigned long)
10004ee4:	83 c4 10             	add    esp,0x10
10004ee7:	89 c3                	mov    ebx,eax
10004ee9:	a1 00 00 00 00       	mov    eax,ds:0x0	10004eea: R_386_32	kernelProcess
10004eee:	83 ec 04             	sub    esp,0x4
10004ef1:	50                   	push   eax
10004ef2:	68 64 92 00 10       	push   0x10009264	10004ef3: R_386_32	.text
10004ef7:	53                   	push   ebx
10004ef8:	e8 fc ff ff ff       	call   10004ef9 <begin(void*)+0x32>	10004ef9: R_386_PC32	File::File(char const*, Process*)
10004efd:	83 c4 10             	add    esp,0x10
10004f00:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
10004f03:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
10004f07:	75 10                	jne    10004f19 <begin(void*)+0x52>
10004f09:	83 ec 0c             	sub    esp,0xc
10004f0c:	68 82 92 00 10       	push   0x10009282	10004f0d: R_386_32	.text
10004f11:	e8 fc ff ff ff       	call   10004f12 <begin(void*)+0x4b>	10004f12: R_386_PC32	KePanic(char const*)
10004f16:	83 c4 10             	add    esp,0x10
10004f19:	83 ec 08             	sub    esp,0x8
10004f1c:	6a 01                	push   0x1
10004f1e:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10004f21:	e8 fc ff ff ff       	call   10004f22 <begin(void*)+0x5b>	10004f22: R_386_PC32	File::open(FileOpenMode)
10004f26:	83 c4 10             	add    esp,0x10
10004f29:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
10004f2c:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
10004f30:	75 10                	jne    10004f42 <begin(void*)+0x7b>
10004f32:	83 ec 0c             	sub    esp,0xc
10004f35:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10004f38:	e8 fc ff ff ff       	call   10004f39 <begin(void*)+0x72>	10004f39: R_386_PC32	File::close()
10004f3d:	83 c4 10             	add    esp,0x10
10004f40:	eb 04                	jmp    10004f46 <begin(void*)+0x7f>
10004f42:	c6 45 e7 01          	mov    BYTE PTR [ebp-0x19],0x1
10004f46:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
10004f4a:	74 15                	je     10004f61 <begin(void*)+0x9a>
10004f4c:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10004f4f:	8b 00                	mov    eax,DWORD PTR [eax]
10004f51:	83 c0 08             	add    eax,0x8
10004f54:	8b 00                	mov    eax,DWORD PTR [eax]
10004f56:	83 ec 0c             	sub    esp,0xc
10004f59:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10004f5c:	ff d0                	call   eax
10004f5e:	83 c4 10             	add    esp,0x10
10004f61:	c6 05 00 00 00 00 01 	mov    BYTE PTR ds:0x0,0x1	10004f63: R_386_32	KeIsPreemptionOn
10004f68:	80 7d e7 00          	cmp    BYTE PTR [ebp-0x19],0x0
10004f6c:	74 0f                	je     10004f7d <begin(void*)+0xb6>
10004f6e:	83 ec 0c             	sub    esp,0xc
10004f71:	6a 00                	push   0x0
10004f73:	e8 fc ff ff ff       	call   10004f74 <begin(void*)+0xad>	10004f74: R_386_PC32	firstRun(bool)
10004f78:	83 c4 10             	add    esp,0x10
10004f7b:	eb 05                	jmp    10004f82 <begin(void*)+0xbb>
10004f7d:	e8 fc ff ff ff       	call   10004f7e <begin(void*)+0xb7>	10004f7e: R_386_PC32	loadExtensions()
10004f82:	8d 45 b0             	lea    eax,[ebp-0x50]
10004f85:	bb 10 95 00 10       	mov    ebx,0x10009510	10004f86: R_386_32	.text
10004f8a:	ba 04 00 00 00       	mov    edx,0x4
10004f8f:	89 c7                	mov    edi,eax
10004f91:	89 de                	mov    esi,ebx
10004f93:	89 d1                	mov    ecx,edx
10004f95:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10004f97:	80 7d e7 00          	cmp    BYTE PTR [ebp-0x19],0x0
10004f9b:	0f 84 ab 05 00 00    	je     1000554c <begin(void*)+0x685>
10004fa1:	83 ec 0c             	sub    esp,0xc
10004fa4:	68 24 07 00 00       	push   0x724
10004fa9:	e8 fc ff ff ff       	call   10004faa <begin(void*)+0xe3>	10004faa: R_386_PC32	operator new(unsigned long)
10004fae:	83 c4 10             	add    esp,0x10
10004fb1:	89 c3                	mov    ebx,eax
10004fb3:	8d 45 b0             	lea    eax,[ebp-0x50]
10004fb6:	50                   	push   eax
10004fb7:	6a 00                	push   0x0
10004fb9:	68 92 92 00 10       	push   0x10009292	10004fba: R_386_32	.text
10004fbe:	53                   	push   ebx
10004fbf:	e8 fc ff ff ff       	call   10004fc0 <begin(void*)+0xf9>	10004fc0: R_386_PC32	Process::Process(char const*, Process*, char**)
10004fc4:	83 c4 10             	add    esp,0x10
10004fc7:	89 5d d0             	mov    DWORD PTR [ebp-0x30],ebx
10004fca:	83 ec 0c             	sub    esp,0xc
10004fcd:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10004fd0:	e8 fc ff ff ff       	call   10004fd1 <begin(void*)+0x10a>	10004fd1: R_386_PC32	Process::createUserThread()
10004fd5:	83 c4 10             	add    esp,0x10
10004fd8:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10004fda: R_386_32	VgaText::hiddenOut
10004fdf:	a1 00 00 00 00       	mov    eax,ds:0x0	10004fe0: R_386_32	term
10004fe4:	83 ec 0c             	sub    esp,0xc
10004fe7:	50                   	push   eax
10004fe8:	e8 fc ff ff ff       	call   10004fe9 <begin(void*)+0x122>	10004fe9: R_386_PC32	setActiveTerminal(VgaText*)
10004fed:	83 c4 10             	add    esp,0x10
10004ff0:	e8 fc ff ff ff       	call   10004ff1 <begin(void*)+0x12a>	10004ff1: R_386_PC32	drawBootScreen()
10004ff5:	83 ec 0c             	sub    esp,0xc
10004ff8:	68 39 91 00 10       	push   0x10009139	10004ff9: R_386_32	.text
10004ffd:	6a 0d                	push   0xd
10004fff:	6a 32                	push   0x32
10005001:	6a 05                	push   0x5
10005003:	6a 16                	push   0x16
10005005:	e8 fc ff ff ff       	call   10005006 <begin(void*)+0x13f>	10005006: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
1000500a:	83 c4 20             	add    esp,0x20
1000500d:	83 ec 0c             	sub    esp,0xc
10005010:	6a 03                	push   0x3
10005012:	e8 fc ff ff ff       	call   10005013 <begin(void*)+0x14c>	10005013: R_386_PC32	bootInstallTasks(int)
10005017:	83 c4 10             	add    esp,0x10
1000501a:	c6 05 00 00 00 00 01 	mov    BYTE PTR ds:0x0,0x1	1000501c: R_386_32	VgaText::hiddenOut
10005021:	83 ec 0c             	sub    esp,0xc
10005024:	68 14 01 00 00       	push   0x114
10005029:	e8 fc ff ff ff       	call   1000502a <begin(void*)+0x163>	1000502a: R_386_PC32	operator new(unsigned long)
1000502e:	83 c4 10             	add    esp,0x10
10005031:	89 c3                	mov    ebx,eax
10005033:	a1 00 00 00 00       	mov    eax,ds:0x0	10005034: R_386_32	kernelProcess
10005038:	83 ec 04             	sub    esp,0x4
1000503b:	50                   	push   eax
1000503c:	68 af 92 00 10       	push   0x100092af	1000503d: R_386_32	.text
10005041:	53                   	push   ebx
10005042:	e8 fc ff ff ff       	call   10005043 <begin(void*)+0x17c>	10005043: R_386_PC32	File::File(char const*, Process*)
10005047:	83 c4 10             	add    esp,0x10
1000504a:	89 5d cc             	mov    DWORD PTR [ebp-0x34],ebx
1000504d:	83 ec 08             	sub    esp,0x8
10005050:	6a 01                	push   0x1
10005052:	ff 75 cc             	push   DWORD PTR [ebp-0x34]
10005055:	e8 fc ff ff ff       	call   10005056 <begin(void*)+0x18f>	10005056: R_386_PC32	File::open(FileOpenMode)
1000505a:	83 c4 10             	add    esp,0x10
1000505d:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
10005060:	83 7d c8 00          	cmp    DWORD PTR [ebp-0x38],0x0
10005064:	75 39                	jne    1000509f <begin(void*)+0x1d8>
10005066:	83 ec 0c             	sub    esp,0xc
10005069:	ff 75 cc             	push   DWORD PTR [ebp-0x34]
1000506c:	e8 fc ff ff ff       	call   1000506d <begin(void*)+0x1a6>	1000506d: R_386_PC32	File::close()
10005071:	83 c4 10             	add    esp,0x10
10005074:	83 ec 0c             	sub    esp,0xc
10005077:	ff 75 cc             	push   DWORD PTR [ebp-0x34]
1000507a:	e8 fc ff ff ff       	call   1000507b <begin(void*)+0x1b4>	1000507b: R_386_PC32	File::unlink()
1000507f:	83 c4 10             	add    esp,0x10
10005082:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
10005086:	74 44                	je     100050cc <begin(void*)+0x205>
10005088:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
1000508b:	8b 00                	mov    eax,DWORD PTR [eax]
1000508d:	83 c0 08             	add    eax,0x8
10005090:	8b 00                	mov    eax,DWORD PTR [eax]
10005092:	83 ec 0c             	sub    esp,0xc
10005095:	ff 75 cc             	push   DWORD PTR [ebp-0x34]
10005098:	ff d0                	call   eax
1000509a:	83 c4 10             	add    esp,0x10
1000509d:	eb 2d                	jmp    100050cc <begin(void*)+0x205>
1000509f:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
100050a3:	74 15                	je     100050ba <begin(void*)+0x1f3>
100050a5:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
100050a8:	8b 00                	mov    eax,DWORD PTR [eax]
100050aa:	83 c0 08             	add    eax,0x8
100050ad:	8b 00                	mov    eax,DWORD PTR [eax]
100050af:	83 ec 0c             	sub    esp,0xc
100050b2:	ff 75 cc             	push   DWORD PTR [ebp-0x34]
100050b5:	ff d0                	call   eax
100050b7:	83 c4 10             	add    esp,0x10
100050ba:	83 ec 0c             	sub    esp,0xc
100050bd:	6a 01                	push   0x1
100050bf:	e8 fc ff ff ff       	call   100050c0 <begin(void*)+0x1f9>	100050c0: R_386_PC32	sleep(unsigned int)
100050c4:	83 c4 10             	add    esp,0x10
100050c7:	e9 55 ff ff ff       	jmp    10005021 <begin(void*)+0x15a>
100050cc:	90                   	nop
100050cd:	83 ec 0c             	sub    esp,0xc
100050d0:	6a 02                	push   0x2
100050d2:	e8 fc ff ff ff       	call   100050d3 <begin(void*)+0x20c>	100050d3: R_386_PC32	sleep(unsigned int)
100050d7:	83 c4 10             	add    esp,0x10
100050da:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100050dc: R_386_32	VgaText::hiddenOut
100050e1:	a1 00 00 00 00       	mov    eax,ds:0x0	100050e2: R_386_32	term
100050e6:	83 ec 0c             	sub    esp,0xc
100050e9:	50                   	push   eax
100050ea:	e8 fc ff ff ff       	call   100050eb <begin(void*)+0x224>	100050eb: R_386_PC32	setActiveTerminal(VgaText*)
100050ef:	83 c4 10             	add    esp,0x10
100050f2:	e8 fc ff ff ff       	call   100050f3 <begin(void*)+0x22c>	100050f3: R_386_PC32	drawBootScreen()
100050f7:	83 ec 0c             	sub    esp,0xc
100050fa:	68 39 91 00 10       	push   0x10009139	100050fb: R_386_32	.text
100050ff:	6a 0d                	push   0xd
10005101:	6a 32                	push   0x32
10005103:	6a 05                	push   0x5
10005105:	6a 16                	push   0x16
10005107:	e8 fc ff ff ff       	call   10005108 <begin(void*)+0x241>	10005108: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
1000510c:	83 c4 20             	add    esp,0x20
1000510f:	83 ec 0c             	sub    esp,0xc
10005112:	6a 04                	push   0x4
10005114:	e8 fc ff ff ff       	call   10005115 <begin(void*)+0x24e>	10005115: R_386_PC32	bootInstallTasks(int)
10005119:	83 c4 10             	add    esp,0x10
1000511c:	83 ec 08             	sub    esp,0x8
1000511f:	68 dd dd 00 00       	push   0xdddd
10005124:	68 b9 92 00 10       	push   0x100092b9	10005125: R_386_32	.text
10005129:	e8 fc ff ff ff       	call   1000512a <begin(void*)+0x263>	1000512a: R_386_PC32	backupTree(char*, unsigned short)
1000512e:	83 c4 10             	add    esp,0x10
10005131:	83 ec 08             	sub    esp,0x8
10005134:	68 ee ee 00 00       	push   0xeeee
10005139:	68 cc 92 00 10       	push   0x100092cc	1000513a: R_386_32	.text
1000513e:	e8 fc ff ff ff       	call   1000513f <begin(void*)+0x278>	1000513f: R_386_PC32	backupTree(char*, unsigned short)
10005143:	83 c4 10             	add    esp,0x10
10005146:	83 ec 08             	sub    esp,0x8
10005149:	68 ff ff 00 00       	push   0xffff
1000514e:	68 de 92 00 10       	push   0x100092de	1000514f: R_386_32	.text
10005153:	e8 fc ff ff ff       	call   10005154 <begin(void*)+0x28d>	10005154: R_386_PC32	backupTree(char*, unsigned short)
10005158:	83 c4 10             	add    esp,0x10
1000515b:	83 ec 0c             	sub    esp,0xc
1000515e:	6a 05                	push   0x5
10005160:	e8 fc ff ff ff       	call   10005161 <begin(void*)+0x29a>	10005161: R_386_PC32	bootInstallTasks(int)
10005165:	83 c4 10             	add    esp,0x10
10005168:	83 ec 0c             	sub    esp,0xc
1000516b:	68 f4 92 00 10       	push   0x100092f4	1000516c: R_386_32	.text
10005170:	e8 fc ff ff ff       	call   10005171 <begin(void*)+0x2aa>	10005171: R_386_PC32	CmOpen(char const*)
10005175:	83 c4 10             	add    esp,0x10
10005178:	89 45 c4             	mov    DWORD PTR [ebp-0x3c],eax
1000517b:	83 ec 04             	sub    esp,0x4
1000517e:	68 19 93 00 10       	push   0x10009319	1000517f: R_386_32	.text
10005183:	6a 00                	push   0x0
10005185:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
10005188:	e8 fc ff ff ff       	call   10005189 <begin(void*)+0x2c2>	10005189: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
1000518d:	83 c4 10             	add    esp,0x10
10005190:	83 ec 08             	sub    esp,0x8
10005193:	68 19 93 00 10       	push   0x10009319	10005194: R_386_32	.text
10005198:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
1000519b:	e8 fc ff ff ff       	call   1000519c <begin(void*)+0x2d5>	1000519c: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100051a0:	83 c4 10             	add    esp,0x10
100051a3:	83 ec 08             	sub    esp,0x8
100051a6:	50                   	push   eax
100051a7:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
100051aa:	e8 fc ff ff ff       	call   100051ab <begin(void*)+0x2e4>	100051ab: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
100051af:	83 c4 10             	add    esp,0x10
100051b2:	83 ec 04             	sub    esp,0x4
100051b5:	68 20 93 00 10       	push   0x10009320	100051b6: R_386_32	.text
100051ba:	50                   	push   eax
100051bb:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
100051be:	e8 fc ff ff ff       	call   100051bf <begin(void*)+0x2f8>	100051bf: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
100051c3:	83 c4 10             	add    esp,0x10
100051c6:	83 ec 08             	sub    esp,0x8
100051c9:	68 19 93 00 10       	push   0x10009319	100051ca: R_386_32	.text
100051ce:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
100051d1:	e8 fc ff ff ff       	call   100051d2 <begin(void*)+0x30b>	100051d2: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100051d6:	83 c4 10             	add    esp,0x10
100051d9:	83 ec 08             	sub    esp,0x8
100051dc:	50                   	push   eax
100051dd:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
100051e0:	e8 fc ff ff ff       	call   100051e1 <begin(void*)+0x31a>	100051e1: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
100051e5:	83 c4 10             	add    esp,0x10
100051e8:	83 ec 04             	sub    esp,0x4
100051eb:	68 26 93 00 10       	push   0x10009326	100051ec: R_386_32	.text
100051f0:	50                   	push   eax
100051f1:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
100051f4:	e8 fc ff ff ff       	call   100051f5 <begin(void*)+0x32e>	100051f5: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
100051f9:	83 c4 10             	add    esp,0x10
100051fc:	83 ec 08             	sub    esp,0x8
100051ff:	68 19 93 00 10       	push   0x10009319	10005200: R_386_32	.text
10005204:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
10005207:	e8 fc ff ff ff       	call   10005208 <begin(void*)+0x341>	10005208: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
1000520c:	83 c4 10             	add    esp,0x10
1000520f:	83 ec 08             	sub    esp,0x8
10005212:	50                   	push   eax
10005213:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
10005216:	e8 fc ff ff ff       	call   10005217 <begin(void*)+0x350>	10005217: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
1000521b:	83 c4 10             	add    esp,0x10
1000521e:	83 ec 04             	sub    esp,0x4
10005221:	68 2b 93 00 10       	push   0x1000932b	10005222: R_386_32	.text
10005226:	50                   	push   eax
10005227:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
1000522a:	e8 fc ff ff ff       	call   1000522b <begin(void*)+0x364>	1000522b: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
1000522f:	83 c4 10             	add    esp,0x10
10005232:	83 ec 08             	sub    esp,0x8
10005235:	68 31 93 00 10       	push   0x10009331	10005236: R_386_32	.text
1000523a:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
1000523d:	e8 fc ff ff ff       	call   1000523e <begin(void*)+0x377>	1000523e: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005242:	83 c4 10             	add    esp,0x10
10005245:	83 ec 08             	sub    esp,0x8
10005248:	50                   	push   eax
10005249:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
1000524c:	e8 fc ff ff ff       	call   1000524d <begin(void*)+0x386>	1000524d: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005251:	83 c4 10             	add    esp,0x10
10005254:	83 ec 04             	sub    esp,0x4
10005257:	68 3e 93 00 10       	push   0x1000933e	10005258: R_386_32	.text
1000525c:	50                   	push   eax
1000525d:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
10005260:	e8 fc ff ff ff       	call   10005261 <begin(void*)+0x39a>	10005261: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
10005265:	83 c4 10             	add    esp,0x10
10005268:	83 ec 08             	sub    esp,0x8
1000526b:	68 43 93 00 10       	push   0x10009343	1000526c: R_386_32	.text
10005270:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
10005273:	e8 fc ff ff ff       	call   10005274 <begin(void*)+0x3ad>	10005274: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005278:	83 c4 10             	add    esp,0x10
1000527b:	83 ec 08             	sub    esp,0x8
1000527e:	50                   	push   eax
1000527f:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
10005282:	e8 fc ff ff ff       	call   10005283 <begin(void*)+0x3bc>	10005283: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005287:	83 c4 10             	add    esp,0x10
1000528a:	83 ec 04             	sub    esp,0x4
1000528d:	68 50 93 00 10       	push   0x10009350	1000528e: R_386_32	.text
10005292:	50                   	push   eax
10005293:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
10005296:	e8 fc ff ff ff       	call   10005297 <begin(void*)+0x3d0>	10005297: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
1000529b:	83 c4 10             	add    esp,0x10
1000529e:	83 ec 08             	sub    esp,0x8
100052a1:	68 43 93 00 10       	push   0x10009343	100052a2: R_386_32	.text
100052a6:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
100052a9:	e8 fc ff ff ff       	call   100052aa <begin(void*)+0x3e3>	100052aa: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100052ae:	83 c4 10             	add    esp,0x10
100052b1:	83 ec 08             	sub    esp,0x8
100052b4:	50                   	push   eax
100052b5:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
100052b8:	e8 fc ff ff ff       	call   100052b9 <begin(void*)+0x3f2>	100052b9: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
100052bd:	83 c4 10             	add    esp,0x10
100052c0:	83 ec 04             	sub    esp,0x4
100052c3:	68 55 93 00 10       	push   0x10009355	100052c4: R_386_32	.text
100052c8:	50                   	push   eax
100052c9:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
100052cc:	e8 fc ff ff ff       	call   100052cd <begin(void*)+0x406>	100052cd: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
100052d1:	83 c4 10             	add    esp,0x10
100052d4:	83 ec 08             	sub    esp,0x8
100052d7:	68 43 93 00 10       	push   0x10009343	100052d8: R_386_32	.text
100052dc:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
100052df:	e8 fc ff ff ff       	call   100052e0 <begin(void*)+0x419>	100052e0: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100052e4:	83 c4 10             	add    esp,0x10
100052e7:	83 ec 08             	sub    esp,0x8
100052ea:	50                   	push   eax
100052eb:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
100052ee:	e8 fc ff ff ff       	call   100052ef <begin(void*)+0x428>	100052ef: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
100052f3:	83 c4 10             	add    esp,0x10
100052f6:	83 ec 04             	sub    esp,0x4
100052f9:	68 5d 93 00 10       	push   0x1000935d	100052fa: R_386_32	.text
100052fe:	50                   	push   eax
100052ff:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
10005302:	e8 fc ff ff ff       	call   10005303 <begin(void*)+0x43c>	10005303: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
10005307:	83 c4 10             	add    esp,0x10
1000530a:	83 ec 08             	sub    esp,0x8
1000530d:	68 68 93 00 10       	push   0x10009368	1000530e: R_386_32	.text
10005312:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
10005315:	e8 fc ff ff ff       	call   10005316 <begin(void*)+0x44f>	10005316: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
1000531a:	83 c4 10             	add    esp,0x10
1000531d:	83 ec 08             	sub    esp,0x8
10005320:	50                   	push   eax
10005321:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
10005324:	e8 fc ff ff ff       	call   10005325 <begin(void*)+0x45e>	10005325: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005329:	83 c4 10             	add    esp,0x10
1000532c:	83 ec 04             	sub    esp,0x4
1000532f:	68 7a 93 00 10       	push   0x1000937a	10005330: R_386_32	.text
10005334:	50                   	push   eax
10005335:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
10005338:	e8 fc ff ff ff       	call   10005339 <begin(void*)+0x472>	10005339: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
1000533d:	83 c4 10             	add    esp,0x10
10005340:	a1 00 00 00 00       	mov    eax,ds:0x0	10005341: R_386_32	modesel
10005345:	89 c3                	mov    ebx,eax
10005347:	89 c6                	mov    esi,eax
10005349:	c1 fe 1f             	sar    esi,0x1f
1000534c:	83 ec 08             	sub    esp,0x8
1000534f:	68 83 93 00 10       	push   0x10009383	10005350: R_386_32	.text
10005354:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
10005357:	e8 fc ff ff ff       	call   10005358 <begin(void*)+0x491>	10005358: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
1000535c:	83 c4 10             	add    esp,0x10
1000535f:	83 ec 08             	sub    esp,0x8
10005362:	50                   	push   eax
10005363:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
10005366:	e8 fc ff ff ff       	call   10005367 <begin(void*)+0x4a0>	10005367: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
1000536b:	83 c4 10             	add    esp,0x10
1000536e:	83 ec 08             	sub    esp,0x8
10005371:	6a 6a                	push   0x6a
10005373:	56                   	push   esi
10005374:	53                   	push   ebx
10005375:	68 8f 93 00 10       	push   0x1000938f	10005376: R_386_32	.text
1000537a:	50                   	push   eax
1000537b:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
1000537e:	e8 fc ff ff ff       	call   1000537f <begin(void*)+0x4b8>	1000537f: R_386_PC32	CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)
10005383:	83 c4 20             	add    esp,0x20
10005386:	83 ec 08             	sub    esp,0x8
10005389:	68 97 93 00 10       	push   0x10009397	1000538a: R_386_32	.text
1000538e:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
10005391:	e8 fc ff ff ff       	call   10005392 <begin(void*)+0x4cb>	10005392: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005396:	83 c4 10             	add    esp,0x10
10005399:	83 ec 04             	sub    esp,0x4
1000539c:	68 00 00 00 00       	push   0x0	1000539d: R_386_32	currName
100053a1:	50                   	push   eax
100053a2:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
100053a5:	e8 fc ff ff ff       	call   100053a6 <begin(void*)+0x4df>	100053a6: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
100053aa:	83 c4 10             	add    esp,0x10
100053ad:	83 ec 08             	sub    esp,0x8
100053b0:	68 a9 93 00 10       	push   0x100093a9	100053b1: R_386_32	.text
100053b5:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
100053b8:	e8 fc ff ff ff       	call   100053b9 <begin(void*)+0x4f2>	100053b9: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100053bd:	83 c4 10             	add    esp,0x10
100053c0:	83 ec 04             	sub    esp,0x4
100053c3:	68 00 00 00 00       	push   0x0	100053c4: R_386_32	currComp
100053c8:	50                   	push   eax
100053c9:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
100053cc:	e8 fc ff ff ff       	call   100053cd <begin(void*)+0x506>	100053cd: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
100053d1:	83 c4 10             	add    esp,0x10
100053d4:	83 ec 08             	sub    esp,0x8
100053d7:	68 be 93 00 10       	push   0x100093be	100053d8: R_386_32	.text
100053dc:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
100053df:	e8 fc ff ff ff       	call   100053e0 <begin(void*)+0x519>	100053e0: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100053e4:	83 c4 10             	add    esp,0x10
100053e7:	83 ec 04             	sub    esp,0x4
100053ea:	68 00 00 00 00       	push   0x0	100053eb: R_386_32	pkeybuf
100053ef:	50                   	push   eax
100053f0:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
100053f3:	e8 fc ff ff ff       	call   100053f4 <begin(void*)+0x52d>	100053f4: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
100053f8:	83 c4 10             	add    esp,0x10
100053fb:	83 ec 08             	sub    esp,0x8
100053fe:	68 d6 93 00 10       	push   0x100093d6	100053ff: R_386_32	.text
10005403:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
10005406:	e8 fc ff ff ff       	call   10005407 <begin(void*)+0x540>	10005407: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
1000540b:	83 c4 10             	add    esp,0x10
1000540e:	83 ec 04             	sub    esp,0x4
10005411:	68 00 00 00 00       	push   0x0	10005412: R_386_32	passwhash
10005416:	50                   	push   eax
10005417:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
1000541a:	e8 fc ff ff ff       	call   1000541b <begin(void*)+0x554>	1000541b: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
1000541f:	83 c4 10             	add    esp,0x10
10005422:	83 ec 0c             	sub    esp,0xc
10005425:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
10005428:	e8 fc ff ff ff       	call   10005429 <begin(void*)+0x562>	10005429: R_386_PC32	CmClose(Reghive_Tag*)
1000542d:	83 c4 10             	add    esp,0x10
10005430:	a1 00 00 00 00       	mov    eax,ds:0x0	10005431: R_386_32	term
10005435:	83 ec 0c             	sub    esp,0xc
10005438:	50                   	push   eax
10005439:	e8 fc ff ff ff       	call   1000543a <begin(void*)+0x573>	1000543a: R_386_PC32	setActiveTerminal(VgaText*)
1000543e:	83 c4 10             	add    esp,0x10
10005441:	e8 fc ff ff ff       	call   10005442 <begin(void*)+0x57b>	10005442: R_386_PC32	drawBootScreen()
10005446:	83 ec 0c             	sub    esp,0xc
10005449:	68 39 91 00 10       	push   0x10009139	1000544a: R_386_32	.text
1000544e:	6a 0d                	push   0xd
10005450:	6a 32                	push   0x32
10005452:	6a 05                	push   0x5
10005454:	6a 16                	push   0x16
10005456:	e8 fc ff ff ff       	call   10005457 <begin(void*)+0x590>	10005457: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
1000545b:	83 c4 20             	add    esp,0x20
1000545e:	a1 00 00 00 00       	mov    eax,ds:0x0	1000545f: R_386_32	term
10005463:	83 ec 04             	sub    esp,0x4
10005466:	6a 08                	push   0x8
10005468:	6a 18                	push   0x18
1000546a:	50                   	push   eax
1000546b:	e8 fc ff ff ff       	call   1000546c <begin(void*)+0x5a5>	1000546c: R_386_PC32	VgaText::setCursor(int, int)
10005470:	83 c4 10             	add    esp,0x10
10005473:	a1 00 00 00 00       	mov    eax,ds:0x0	10005474: R_386_32	term
10005478:	83 ec 08             	sub    esp,0x8
1000547b:	68 f4 93 00 10       	push   0x100093f4	1000547c: R_386_32	.text
10005480:	50                   	push   eax
10005481:	e8 fc ff ff ff       	call   10005482 <begin(void*)+0x5bb>	10005482: R_386_PC32	VgaText::puts(char const*)
10005486:	83 c4 10             	add    esp,0x10
10005489:	a1 00 00 00 00       	mov    eax,ds:0x0	1000548a: R_386_32	term
1000548e:	83 ec 04             	sub    esp,0x4
10005491:	6a 0a                	push   0xa
10005493:	6a 18                	push   0x18
10005495:	50                   	push   eax
10005496:	e8 fc ff ff ff       	call   10005497 <begin(void*)+0x5d0>	10005497: R_386_PC32	VgaText::setCursor(int, int)
1000549b:	83 c4 10             	add    esp,0x10
1000549e:	a1 00 00 00 00       	mov    eax,ds:0x0	1000549f: R_386_32	term
100054a3:	83 ec 08             	sub    esp,0x8
100054a6:	68 1c 94 00 10       	push   0x1000941c	100054a7: R_386_32	.text
100054ab:	50                   	push   eax
100054ac:	e8 fc ff ff ff       	call   100054ad <begin(void*)+0x5e6>	100054ad: R_386_PC32	VgaText::puts(char const*)
100054b1:	83 c4 10             	add    esp,0x10
100054b4:	a1 00 00 00 00       	mov    eax,ds:0x0	100054b5: R_386_32	term
100054b9:	83 ec 04             	sub    esp,0x4
100054bc:	6a 0b                	push   0xb
100054be:	6a 18                	push   0x18
100054c0:	50                   	push   eax
100054c1:	e8 fc ff ff ff       	call   100054c2 <begin(void*)+0x5fb>	100054c2: R_386_PC32	VgaText::setCursor(int, int)
100054c6:	83 c4 10             	add    esp,0x10
100054c9:	a1 00 00 00 00       	mov    eax,ds:0x0	100054ca: R_386_32	term
100054ce:	83 ec 08             	sub    esp,0x8
100054d1:	68 48 94 00 10       	push   0x10009448	100054d2: R_386_32	.text
100054d6:	50                   	push   eax
100054d7:	e8 fc ff ff ff       	call   100054d8 <begin(void*)+0x611>	100054d8: R_386_PC32	VgaText::puts(char const*)
100054dc:	83 c4 10             	add    esp,0x10
100054df:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100054e1: R_386_32	installKey
100054e6:	a0 00 00 00 00       	mov    al,ds:0x0	100054e7: R_386_32	installKey
100054eb:	84 c0                	test   al,al
100054ed:	0f 94 c0             	sete   al
100054f0:	84 c0                	test   al,al
100054f2:	74 02                	je     100054f6 <begin(void*)+0x62f>
100054f4:	eb f0                	jmp    100054e6 <begin(void*)+0x61f>
100054f6:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100054f8: R_386_32	installKey
100054fd:	a1 00 00 00 00       	mov    eax,ds:0x0	100054fe: R_386_32	term
10005502:	83 ec 04             	sub    esp,0x4
10005505:	6a 0c                	push   0xc
10005507:	6a 18                	push   0x18
10005509:	50                   	push   eax
1000550a:	e8 fc ff ff ff       	call   1000550b <begin(void*)+0x644>	1000550b: R_386_PC32	VgaText::setCursor(int, int)
1000550f:	83 c4 10             	add    esp,0x10
10005512:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10005514: R_386_32	Krnl::computer
10005518:	a1 00 00 00 00       	mov    eax,ds:0x0	10005519: R_386_32	Krnl::computer
1000551d:	8b 00                	mov    eax,DWORD PTR [eax]
1000551f:	83 c0 0c             	add    eax,0xc
10005522:	8b 00                	mov    eax,DWORD PTR [eax]
10005524:	6a 00                	push   0x0
10005526:	6a 00                	push   0x0
10005528:	6a 01                	push   0x1
1000552a:	52                   	push   edx
1000552b:	ff d0                	call   eax
1000552d:	83 c4 10             	add    esp,0x10
10005530:	a1 00 00 00 00       	mov    eax,ds:0x0	10005531: R_386_32	term
10005535:	6a 0f                	push   0xf
10005537:	6a 0c                	push   0xc
10005539:	68 5c 94 00 10       	push   0x1000945c	1000553a: R_386_32	.text
1000553e:	50                   	push   eax
1000553f:	e8 fc ff ff ff       	call   10005540 <begin(void*)+0x679>	10005540: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10005544:	83 c4 10             	add    esp,0x10
10005547:	e9 ad 03 00 00       	jmp    100058f9 <begin(void*)+0xa32>
1000554c:	83 ec 0c             	sub    esp,0xc
1000554f:	68 f4 92 00 10       	push   0x100092f4	10005550: R_386_32	.text
10005554:	e8 fc ff ff ff       	call   10005555 <begin(void*)+0x68e>	10005555: R_386_PC32	CmOpen(char const*)
10005559:	83 c4 10             	add    esp,0x10
1000555c:	89 45 c0             	mov    DWORD PTR [ebp-0x40],eax
1000555f:	83 ec 08             	sub    esp,0x8
10005562:	68 be 93 00 10       	push   0x100093be	10005563: R_386_32	.text
10005567:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
1000556a:	e8 fc ff ff ff       	call   1000556b <begin(void*)+0x6a4>	1000556b: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
1000556f:	83 c4 10             	add    esp,0x10
10005572:	83 ec 04             	sub    esp,0x4
10005575:	8d 95 b0 fd ff ff    	lea    edx,[ebp-0x250]
1000557b:	52                   	push   edx
1000557c:	50                   	push   eax
1000557d:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
10005580:	e8 fc ff ff ff       	call   10005581 <begin(void*)+0x6ba>	10005581: R_386_PC32	CmGetString(Reghive_Tag*, int, char*)
10005585:	83 c4 10             	add    esp,0x10
10005588:	83 ec 08             	sub    esp,0x8
1000558b:	68 82 94 00 10       	push   0x10009482	1000558c: R_386_32	.text
10005590:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
10005593:	e8 fc ff ff ff       	call   10005594 <begin(void*)+0x6cd>	10005594: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005598:	83 c4 10             	add    esp,0x10
1000559b:	83 ec 04             	sub    esp,0x4
1000559e:	8d 55 a8             	lea    edx,[ebp-0x58]
100055a1:	52                   	push   edx
100055a2:	50                   	push   eax
100055a3:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
100055a6:	e8 fc ff ff ff       	call   100055a7 <begin(void*)+0x6e0>	100055a7: R_386_PC32	CmGetInteger(Reghive_Tag*, int, unsigned long long*)
100055ab:	83 c4 10             	add    esp,0x10
100055ae:	83 ec 0c             	sub    esp,0xc
100055b1:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
100055b4:	e8 fc ff ff ff       	call   100055b5 <begin(void*)+0x6ee>	100055b5: R_386_PC32	CmClose(Reghive_Tag*)
100055b9:	83 c4 10             	add    esp,0x10
100055bc:	83 ec 0c             	sub    esp,0xc
100055bf:	8d 85 b0 fd ff ff    	lea    eax,[ebp-0x250]
100055c5:	50                   	push   eax
100055c6:	e8 fc ff ff ff       	call   100055c7 <begin(void*)+0x700>	100055c7: R_386_PC32	checkExtendedKey(char*)
100055cb:	83 c4 10             	add    esp,0x10
100055ce:	85 c0                	test   eax,eax
100055d0:	0f 94 c0             	sete   al
100055d3:	84 c0                	test   al,al
100055d5:	0f 84 ed 01 00 00    	je     100057c8 <begin(void*)+0x901>
100055db:	83 ec 0c             	sub    esp,0xc
100055de:	6a 01                	push   0x1
100055e0:	e8 fc ff ff ff       	call   100055e1 <begin(void*)+0x71a>	100055e1: R_386_PC32	firstRun(bool)
100055e5:	83 c4 10             	add    esp,0x10
100055e8:	83 ec 0c             	sub    esp,0xc
100055eb:	68 f4 92 00 10       	push   0x100092f4	100055ec: R_386_32	.text
100055f0:	e8 fc ff ff ff       	call   100055f1 <begin(void*)+0x72a>	100055f1: R_386_PC32	CmOpen(char const*)
100055f5:	83 c4 10             	add    esp,0x10
100055f8:	89 45 c0             	mov    DWORD PTR [ebp-0x40],eax
100055fb:	83 ec 04             	sub    esp,0x4
100055fe:	68 19 93 00 10       	push   0x10009319	100055ff: R_386_32	.text
10005603:	6a 00                	push   0x0
10005605:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
10005608:	e8 fc ff ff ff       	call   10005609 <begin(void*)+0x742>	10005609: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
1000560d:	83 c4 10             	add    esp,0x10
10005610:	83 ec 08             	sub    esp,0x8
10005613:	68 19 93 00 10       	push   0x10009319	10005614: R_386_32	.text
10005618:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
1000561b:	e8 fc ff ff ff       	call   1000561c <begin(void*)+0x755>	1000561c: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005620:	83 c4 10             	add    esp,0x10
10005623:	83 ec 08             	sub    esp,0x8
10005626:	50                   	push   eax
10005627:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
1000562a:	e8 fc ff ff ff       	call   1000562b <begin(void*)+0x764>	1000562b: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
1000562f:	83 c4 10             	add    esp,0x10
10005632:	83 ec 04             	sub    esp,0x4
10005635:	68 20 93 00 10       	push   0x10009320	10005636: R_386_32	.text
1000563a:	50                   	push   eax
1000563b:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
1000563e:	e8 fc ff ff ff       	call   1000563f <begin(void*)+0x778>	1000563f: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
10005643:	83 c4 10             	add    esp,0x10
10005646:	83 ec 08             	sub    esp,0x8
10005649:	68 43 93 00 10       	push   0x10009343	1000564a: R_386_32	.text
1000564e:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
10005651:	e8 fc ff ff ff       	call   10005652 <begin(void*)+0x78b>	10005652: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005656:	83 c4 10             	add    esp,0x10
10005659:	83 ec 08             	sub    esp,0x8
1000565c:	50                   	push   eax
1000565d:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
10005660:	e8 fc ff ff ff       	call   10005661 <begin(void*)+0x79a>	10005661: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005665:	83 c4 10             	add    esp,0x10
10005668:	83 ec 04             	sub    esp,0x4
1000566b:	68 5d 93 00 10       	push   0x1000935d	1000566c: R_386_32	.text
10005670:	50                   	push   eax
10005671:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
10005674:	e8 fc ff ff ff       	call   10005675 <begin(void*)+0x7ae>	10005675: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
10005679:	83 c4 10             	add    esp,0x10
1000567c:	83 ec 08             	sub    esp,0x8
1000567f:	68 be 93 00 10       	push   0x100093be	10005680: R_386_32	.text
10005684:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
10005687:	e8 fc ff ff ff       	call   10005688 <begin(void*)+0x7c1>	10005688: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
1000568c:	83 c4 10             	add    esp,0x10
1000568f:	83 ec 04             	sub    esp,0x4
10005692:	68 00 00 00 00       	push   0x0	10005693: R_386_32	pkeybuf
10005697:	50                   	push   eax
10005698:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
1000569b:	e8 fc ff ff ff       	call   1000569c <begin(void*)+0x7d5>	1000569c: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
100056a0:	83 c4 10             	add    esp,0x10
100056a3:	83 ec 0c             	sub    esp,0xc
100056a6:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
100056a9:	e8 fc ff ff ff       	call   100056aa <begin(void*)+0x7e3>	100056aa: R_386_PC32	CmClose(Reghive_Tag*)
100056ae:	83 c4 10             	add    esp,0x10
100056b1:	a1 00 00 00 00       	mov    eax,ds:0x0	100056b2: R_386_32	term
100056b6:	83 ec 0c             	sub    esp,0xc
100056b9:	50                   	push   eax
100056ba:	e8 fc ff ff ff       	call   100056bb <begin(void*)+0x7f4>	100056bb: R_386_PC32	setActiveTerminal(VgaText*)
100056bf:	83 c4 10             	add    esp,0x10
100056c2:	e8 fc ff ff ff       	call   100056c3 <begin(void*)+0x7fc>	100056c3: R_386_PC32	drawBootScreen()
100056c7:	83 ec 0c             	sub    esp,0xc
100056ca:	68 96 94 00 10       	push   0x10009496	100056cb: R_386_32	.text
100056cf:	6a 0d                	push   0xd
100056d1:	6a 32                	push   0x32
100056d3:	6a 05                	push   0x5
100056d5:	6a 16                	push   0x16
100056d7:	e8 fc ff ff ff       	call   100056d8 <begin(void*)+0x811>	100056d8: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
100056dc:	83 c4 20             	add    esp,0x20
100056df:	a1 00 00 00 00       	mov    eax,ds:0x0	100056e0: R_386_32	term
100056e4:	83 ec 04             	sub    esp,0x4
100056e7:	6a 08                	push   0x8
100056e9:	6a 18                	push   0x18
100056eb:	50                   	push   eax
100056ec:	e8 fc ff ff ff       	call   100056ed <begin(void*)+0x826>	100056ed: R_386_PC32	VgaText::setCursor(int, int)
100056f1:	83 c4 10             	add    esp,0x10
100056f4:	a1 00 00 00 00       	mov    eax,ds:0x0	100056f5: R_386_32	term
100056f9:	83 ec 08             	sub    esp,0x8
100056fc:	68 ac 94 00 10       	push   0x100094ac	100056fd: R_386_32	.text
10005701:	50                   	push   eax
10005702:	e8 fc ff ff ff       	call   10005703 <begin(void*)+0x83c>	10005703: R_386_PC32	VgaText::puts(char const*)
10005707:	83 c4 10             	add    esp,0x10
1000570a:	a1 00 00 00 00       	mov    eax,ds:0x0	1000570b: R_386_32	term
1000570f:	83 ec 04             	sub    esp,0x4
10005712:	6a 0a                	push   0xa
10005714:	6a 18                	push   0x18
10005716:	50                   	push   eax
10005717:	e8 fc ff ff ff       	call   10005718 <begin(void*)+0x851>	10005718: R_386_PC32	VgaText::setCursor(int, int)
1000571c:	83 c4 10             	add    esp,0x10
1000571f:	a1 00 00 00 00       	mov    eax,ds:0x0	10005720: R_386_32	term
10005724:	83 ec 08             	sub    esp,0x8
10005727:	68 1c 94 00 10       	push   0x1000941c	10005728: R_386_32	.text
1000572c:	50                   	push   eax
1000572d:	e8 fc ff ff ff       	call   1000572e <begin(void*)+0x867>	1000572e: R_386_PC32	VgaText::puts(char const*)
10005732:	83 c4 10             	add    esp,0x10
10005735:	a1 00 00 00 00       	mov    eax,ds:0x0	10005736: R_386_32	term
1000573a:	83 ec 04             	sub    esp,0x4
1000573d:	6a 0b                	push   0xb
1000573f:	6a 18                	push   0x18
10005741:	50                   	push   eax
10005742:	e8 fc ff ff ff       	call   10005743 <begin(void*)+0x87c>	10005743: R_386_PC32	VgaText::setCursor(int, int)
10005747:	83 c4 10             	add    esp,0x10
1000574a:	a1 00 00 00 00       	mov    eax,ds:0x0	1000574b: R_386_32	term
1000574f:	83 ec 08             	sub    esp,0x8
10005752:	68 48 94 00 10       	push   0x10009448	10005753: R_386_32	.text
10005757:	50                   	push   eax
10005758:	e8 fc ff ff ff       	call   10005759 <begin(void*)+0x892>	10005759: R_386_PC32	VgaText::puts(char const*)
1000575d:	83 c4 10             	add    esp,0x10
10005760:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10005762: R_386_32	installKey
10005767:	a0 00 00 00 00       	mov    al,ds:0x0	10005768: R_386_32	installKey
1000576c:	84 c0                	test   al,al
1000576e:	0f 94 c0             	sete   al
10005771:	84 c0                	test   al,al
10005773:	74 02                	je     10005777 <begin(void*)+0x8b0>
10005775:	eb f0                	jmp    10005767 <begin(void*)+0x8a0>
10005777:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10005779: R_386_32	installKey
1000577e:	a1 00 00 00 00       	mov    eax,ds:0x0	1000577f: R_386_32	term
10005783:	83 ec 04             	sub    esp,0x4
10005786:	6a 0c                	push   0xc
10005788:	6a 18                	push   0x18
1000578a:	50                   	push   eax
1000578b:	e8 fc ff ff ff       	call   1000578c <begin(void*)+0x8c5>	1000578c: R_386_PC32	VgaText::setCursor(int, int)
10005790:	83 c4 10             	add    esp,0x10
10005793:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10005795: R_386_32	Krnl::computer
10005799:	a1 00 00 00 00       	mov    eax,ds:0x0	1000579a: R_386_32	Krnl::computer
1000579e:	8b 00                	mov    eax,DWORD PTR [eax]
100057a0:	83 c0 0c             	add    eax,0xc
100057a3:	8b 00                	mov    eax,DWORD PTR [eax]
100057a5:	6a 00                	push   0x0
100057a7:	6a 00                	push   0x0
100057a9:	6a 01                	push   0x1
100057ab:	52                   	push   edx
100057ac:	ff d0                	call   eax
100057ae:	83 c4 10             	add    esp,0x10
100057b1:	a1 00 00 00 00       	mov    eax,ds:0x0	100057b2: R_386_32	term
100057b6:	6a 0f                	push   0xf
100057b8:	6a 0c                	push   0xc
100057ba:	68 5c 94 00 10       	push   0x1000945c	100057bb: R_386_32	.text
100057bf:	50                   	push   eax
100057c0:	e8 fc ff ff ff       	call   100057c1 <begin(void*)+0x8fa>	100057c1: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
100057c5:	83 c4 10             	add    esp,0x10
100057c8:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100057ca: R_386_32	VgaText::hiddenOut
100057cf:	83 ec 0c             	sub    esp,0xc
100057d2:	68 24 07 00 00       	push   0x724
100057d7:	e8 fc ff ff ff       	call   100057d8 <begin(void*)+0x911>	100057d8: R_386_PC32	operator new(unsigned long)
100057dc:	83 c4 10             	add    esp,0x10
100057df:	89 c3                	mov    ebx,eax
100057e1:	6a 00                	push   0x0
100057e3:	6a 00                	push   0x0
100057e5:	68 92 92 00 10       	push   0x10009292	100057e6: R_386_32	.text
100057ea:	53                   	push   ebx
100057eb:	e8 fc ff ff ff       	call   100057ec <begin(void*)+0x925>	100057ec: R_386_PC32	Process::Process(char const*, Process*, char**)
100057f0:	83 c4 10             	add    esp,0x10
100057f3:	89 5d d0             	mov    DWORD PTR [ebp-0x30],ebx
100057f6:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
100057f9:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
100057ff:	83 ec 0c             	sub    esp,0xc
10005802:	50                   	push   eax
10005803:	e8 fc ff ff ff       	call   10005804 <begin(void*)+0x93d>	10005804: R_386_PC32	setActiveTerminal(VgaText*)
10005808:	83 c4 10             	add    esp,0x10
1000580b:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
10005812:	83 7d e0 18          	cmp    DWORD PTR [ebp-0x20],0x18
10005816:	7f 2e                	jg     10005846 <begin(void*)+0x97f>
10005818:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
1000581f:	83 7d dc 4f          	cmp    DWORD PTR [ebp-0x24],0x4f
10005823:	7f 1c                	jg     10005841 <begin(void*)+0x97a>
10005825:	83 ec 0c             	sub    esp,0xc
10005828:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
1000582b:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
1000582e:	6a 00                	push   0x0
10005830:	6a 07                	push   0x7
10005832:	6a 20                	push   0x20
10005834:	e8 fc ff ff ff       	call   10005835 <begin(void*)+0x96e>	10005835: R_386_PC32	HalConsoleWriteCharacter(char, int, int, int, int)
10005839:	83 c4 20             	add    esp,0x20
1000583c:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
1000583f:	eb de                	jmp    1000581f <begin(void*)+0x958>
10005841:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
10005844:	eb cc                	jmp    10005812 <begin(void*)+0x94b>
10005846:	83 ec 0c             	sub    esp,0xc
10005849:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
1000584c:	e8 fc ff ff ff       	call   1000584d <begin(void*)+0x986>	1000584d: R_386_PC32	Process::createUserThread()
10005851:	83 c4 10             	add    esp,0x10
10005854:	8b 45 a8             	mov    eax,DWORD PTR [ebp-0x58]
10005857:	8b 55 ac             	mov    edx,DWORD PTR [ebp-0x54]
1000585a:	89 c1                	mov    ecx,eax
1000585c:	83 f1 01             	xor    ecx,0x1
1000585f:	89 8d a0 fd ff ff    	mov    DWORD PTR [ebp-0x260],ecx
10005865:	89 d0                	mov    eax,edx
10005867:	80 f4 00             	xor    ah,0x0
1000586a:	89 85 a4 fd ff ff    	mov    DWORD PTR [ebp-0x25c],eax
10005870:	8b 8d a0 fd ff ff    	mov    ecx,DWORD PTR [ebp-0x260]
10005876:	8b 9d a4 fd ff ff    	mov    ebx,DWORD PTR [ebp-0x25c]
1000587c:	89 d8                	mov    eax,ebx
1000587e:	09 c8                	or     eax,ecx
10005880:	85 c0                	test   eax,eax
10005882:	75 17                	jne    1000589b <begin(void*)+0x9d4>
10005884:	a1 00 00 00 00       	mov    eax,ds:0x0	10005885: R_386_32	kernelProcess
10005889:	6a 01                	push   0x1
1000588b:	6a 00                	push   0x0
1000588d:	68 00 00 00 00       	push   0x0	1000588e: R_386_32	startGUI(void*)
10005892:	50                   	push   eax
10005893:	e8 fc ff ff ff       	call   10005894 <begin(void*)+0x9cd>	10005894: R_386_PC32	Process::createThread(void (*)(void*), void*, int)
10005898:	83 c4 10             	add    esp,0x10
1000589b:	8b 45 a8             	mov    eax,DWORD PTR [ebp-0x58]
1000589e:	8b 55 ac             	mov    edx,DWORD PTR [ebp-0x54]
100058a1:	89 c6                	mov    esi,eax
100058a3:	83 f6 02             	xor    esi,0x2
100058a6:	89 b5 98 fd ff ff    	mov    DWORD PTR [ebp-0x268],esi
100058ac:	89 d0                	mov    eax,edx
100058ae:	80 f4 00             	xor    ah,0x0
100058b1:	89 85 9c fd ff ff    	mov    DWORD PTR [ebp-0x264],eax
100058b7:	8b b5 98 fd ff ff    	mov    esi,DWORD PTR [ebp-0x268]
100058bd:	8b bd 9c fd ff ff    	mov    edi,DWORD PTR [ebp-0x264]
100058c3:	89 f8                	mov    eax,edi
100058c5:	09 f0                	or     eax,esi
100058c7:	85 c0                	test   eax,eax
100058c9:	75 17                	jne    100058e2 <begin(void*)+0xa1b>
100058cb:	a1 00 00 00 00       	mov    eax,ds:0x0	100058cc: R_386_32	kernelProcess
100058d0:	6a 01                	push   0x1
100058d2:	6a 00                	push   0x0
100058d4:	68 00 00 00 00       	push   0x0	100058d5: R_386_32	startGUIVESA(void*)
100058d9:	50                   	push   eax
100058da:	e8 fc ff ff ff       	call   100058db <begin(void*)+0xa14>	100058db: R_386_PC32	Process::createThread(void (*)(void*), void*, int)
100058df:	83 c4 10             	add    esp,0x10
100058e2:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
100058e5:	8b 00                	mov    eax,DWORD PTR [eax]
100058e7:	83 ec 04             	sub    esp,0x4
100058ea:	6a 00                	push   0x0
100058ec:	8d 55 a4             	lea    edx,[ebp-0x5c]
100058ef:	52                   	push   edx
100058f0:	50                   	push   eax
100058f1:	e8 fc ff ff ff       	call   100058f2 <begin(void*)+0xa2b>	100058f2: R_386_PC32	waitTask(int, int*, int)
100058f6:	83 c4 10             	add    esp,0x10
100058f9:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	100058fb: R_386_32	Krnl::computer
100058ff:	a1 00 00 00 00       	mov    eax,ds:0x0	10005900: R_386_32	Krnl::computer
10005904:	8b 00                	mov    eax,DWORD PTR [eax]
10005906:	83 c0 0c             	add    eax,0xc
10005909:	8b 00                	mov    eax,DWORD PTR [eax]
1000590b:	6a 00                	push   0x0
1000590d:	6a 00                	push   0x0
1000590f:	6a 00                	push   0x0
10005911:	52                   	push   edx
10005912:	ff d0                	call   eax
10005914:	83 c4 10             	add    esp,0x10
10005917:	83 ec 0c             	sub    esp,0xc
1000591a:	68 d0 94 00 10       	push   0x100094d0	1000591b: R_386_32	.text
1000591f:	e8 fc ff ff ff       	call   10005920 <begin(void*)+0xa59>	10005920: R_386_PC32	KePanic(char const*)
10005924:	83 c4 10             	add    esp,0x10
10005927:	eb fe                	jmp    10005927 <begin(void*)+0xa60>

10005929 <clean>:
10005929:	57                   	push   edi
1000592a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
1000592e:	b0 00                	mov    al,0x0
10005930:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
10005934:	f3 aa                	rep stos BYTE PTR es:[edi],al
10005936:	5f                   	pop    edi
10005937:	c3                   	ret    

10005938 <BF_decode>:
10005938:	55                   	push   ebp
10005939:	57                   	push   edi
1000593a:	56                   	push   esi
1000593b:	53                   	push   ebx
1000593c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
10005940:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
10005944:	89 d6                	mov    esi,edx
10005946:	03 74 24 1c          	add    esi,DWORD PTR [esp+0x1c]
1000594a:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
1000594d:	83 e8 20             	sub    eax,0x20
10005950:	83 f8 5f             	cmp    eax,0x5f
10005953:	0f 87 a3 00 00 00    	ja     100059fc <BF_decode+0xc4>
10005959:	8a 80 c0 a6 00 10    	mov    al,BYTE PTR [eax+0x1000a6c0]	1000595b: R_386_32	.data
1000595f:	3c 3f                	cmp    al,0x3f
10005961:	0f 87 9f 00 00 00    	ja     10005a06 <BF_decode+0xce>
10005967:	0f b6 4b 01          	movzx  ecx,BYTE PTR [ebx+0x1]
1000596b:	83 e9 20             	sub    ecx,0x20
1000596e:	83 f9 5f             	cmp    ecx,0x5f
10005971:	0f 87 96 00 00 00    	ja     10005a0d <BF_decode+0xd5>
10005977:	8a 89 c0 a6 00 10    	mov    cl,BYTE PTR [ecx+0x1000a6c0]	10005979: R_386_32	.data
1000597d:	0f b6 f9             	movzx  edi,cl
10005980:	83 ff 3f             	cmp    edi,0x3f
10005983:	0f 87 8b 00 00 00    	ja     10005a14 <BF_decode+0xdc>
10005989:	c1 e0 02             	shl    eax,0x2
1000598c:	c1 ef 04             	shr    edi,0x4
1000598f:	09 f8                	or     eax,edi
10005991:	88 02                	mov    BYTE PTR [edx],al
10005993:	89 d7                	mov    edi,edx
10005995:	8d 42 01             	lea    eax,[edx+0x1]
10005998:	39 c6                	cmp    esi,eax
1000599a:	76 7f                	jbe    10005a1b <BF_decode+0xe3>
1000599c:	0f b6 43 02          	movzx  eax,BYTE PTR [ebx+0x2]
100059a0:	83 e8 20             	sub    eax,0x20
100059a3:	83 f8 5f             	cmp    eax,0x5f
100059a6:	77 7a                	ja     10005a22 <BF_decode+0xea>
100059a8:	8a 80 c0 a6 00 10    	mov    al,BYTE PTR [eax+0x1000a6c0]	100059aa: R_386_32	.data
100059ae:	0f b6 e8             	movzx  ebp,al
100059b1:	83 fd 3f             	cmp    ebp,0x3f
100059b4:	77 73                	ja     10005a29 <BF_decode+0xf1>
100059b6:	c1 e1 04             	shl    ecx,0x4
100059b9:	c1 ed 02             	shr    ebp,0x2
100059bc:	09 e9                	or     ecx,ebp
100059be:	88 4a 01             	mov    BYTE PTR [edx+0x1],cl
100059c1:	8d 52 02             	lea    edx,[edx+0x2]
100059c4:	39 d6                	cmp    esi,edx
100059c6:	76 68                	jbe    10005a30 <BF_decode+0xf8>
100059c8:	83 c3 04             	add    ebx,0x4
100059cb:	0f b6 53 ff          	movzx  edx,BYTE PTR [ebx-0x1]
100059cf:	83 ea 20             	sub    edx,0x20
100059d2:	83 fa 5f             	cmp    edx,0x5f
100059d5:	77 60                	ja     10005a37 <BF_decode+0xff>
100059d7:	8a 8a c0 a6 00 10    	mov    cl,BYTE PTR [edx+0x1000a6c0]	100059d9: R_386_32	.data
100059dd:	80 f9 3f             	cmp    cl,0x3f
100059e0:	77 5c                	ja     10005a3e <BF_decode+0x106>
100059e2:	8d 57 03             	lea    edx,[edi+0x3]
100059e5:	c1 e0 06             	shl    eax,0x6
100059e8:	09 c1                	or     ecx,eax
100059ea:	88 4a ff             	mov    BYTE PTR [edx-0x1],cl
100059ed:	39 d6                	cmp    esi,edx
100059ef:	0f 87 55 ff ff ff    	ja     1000594a <BF_decode+0x12>
100059f5:	b8 00 00 00 00       	mov    eax,0x0
100059fa:	eb 05                	jmp    10005a01 <BF_decode+0xc9>
100059fc:	b8 ff ff ff ff       	mov    eax,0xffffffff
10005a01:	5b                   	pop    ebx
10005a02:	5e                   	pop    esi
10005a03:	5f                   	pop    edi
10005a04:	5d                   	pop    ebp
10005a05:	c3                   	ret    
10005a06:	b8 ff ff ff ff       	mov    eax,0xffffffff
10005a0b:	eb f4                	jmp    10005a01 <BF_decode+0xc9>
10005a0d:	b8 ff ff ff ff       	mov    eax,0xffffffff
10005a12:	eb ed                	jmp    10005a01 <BF_decode+0xc9>
10005a14:	b8 ff ff ff ff       	mov    eax,0xffffffff
10005a19:	eb e6                	jmp    10005a01 <BF_decode+0xc9>
10005a1b:	b8 00 00 00 00       	mov    eax,0x0
10005a20:	eb df                	jmp    10005a01 <BF_decode+0xc9>
10005a22:	b8 ff ff ff ff       	mov    eax,0xffffffff
10005a27:	eb d8                	jmp    10005a01 <BF_decode+0xc9>
10005a29:	b8 ff ff ff ff       	mov    eax,0xffffffff
10005a2e:	eb d1                	jmp    10005a01 <BF_decode+0xc9>
10005a30:	b8 00 00 00 00       	mov    eax,0x0
10005a35:	eb ca                	jmp    10005a01 <BF_decode+0xc9>
10005a37:	b8 ff ff ff ff       	mov    eax,0xffffffff
10005a3c:	eb c3                	jmp    10005a01 <BF_decode+0xc9>
10005a3e:	b8 ff ff ff ff       	mov    eax,0xffffffff
10005a43:	eb bc                	jmp    10005a01 <BF_decode+0xc9>

10005a45 <BF_encode>:
10005a45:	55                   	push   ebp
10005a46:	57                   	push   edi
10005a47:	56                   	push   esi
10005a48:	53                   	push   ebx
10005a49:	83 ec 04             	sub    esp,0x4
10005a4c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
10005a50:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
10005a54:	89 c7                	mov    edi,eax
10005a56:	03 7c 24 20          	add    edi,DWORD PTR [esp+0x20]
10005a5a:	89 3c 24             	mov    DWORD PTR [esp],edi
10005a5d:	0f b6 10             	movzx  edx,BYTE PTR [eax]
10005a60:	89 d6                	mov    esi,edx
10005a62:	c1 ee 02             	shr    esi,0x2
10005a65:	8a 9e 60 a6 00 10    	mov    bl,BYTE PTR [esi+0x1000a660]	10005a67: R_386_32	.data
10005a6b:	88 19                	mov    BYTE PTR [ecx],bl
10005a6d:	c1 e2 04             	shl    edx,0x4
10005a70:	83 e2 30             	and    edx,0x30
10005a73:	89 c7                	mov    edi,eax
10005a75:	8d 70 01             	lea    esi,[eax+0x1]
10005a78:	39 34 24             	cmp    DWORD PTR [esp],esi
10005a7b:	76 51                	jbe    10005ace <BF_encode+0x89>
10005a7d:	0f b6 70 01          	movzx  esi,BYTE PTR [eax+0x1]
10005a81:	89 f5                	mov    ebp,esi
10005a83:	c1 ed 04             	shr    ebp,0x4
10005a86:	09 ea                	or     edx,ebp
10005a88:	8a 9a 60 a6 00 10    	mov    bl,BYTE PTR [edx+0x1000a660]	10005a8a: R_386_32	.data
10005a8e:	88 59 01             	mov    BYTE PTR [ecx+0x1],bl
10005a91:	c1 e6 02             	shl    esi,0x2
10005a94:	83 e6 3c             	and    esi,0x3c
10005a97:	83 c0 02             	add    eax,0x2
10005a9a:	39 04 24             	cmp    DWORD PTR [esp],eax
10005a9d:	76 40                	jbe    10005adf <BF_encode+0x9a>
10005a9f:	8d 47 03             	lea    eax,[edi+0x3]
10005aa2:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
10005aa5:	0f b6 d3             	movzx  edx,bl
10005aa8:	c1 ea 06             	shr    edx,0x6
10005aab:	09 f2                	or     edx,esi
10005aad:	8a 92 60 a6 00 10    	mov    dl,BYTE PTR [edx+0x1000a660]	10005aaf: R_386_32	.data
10005ab3:	88 51 02             	mov    BYTE PTR [ecx+0x2],dl
10005ab6:	83 c1 04             	add    ecx,0x4
10005ab9:	89 da                	mov    edx,ebx
10005abb:	83 e2 3f             	and    edx,0x3f
10005abe:	8a 9a 60 a6 00 10    	mov    bl,BYTE PTR [edx+0x1000a660]	10005ac0: R_386_32	.data
10005ac4:	88 59 ff             	mov    BYTE PTR [ecx-0x1],bl
10005ac7:	39 04 24             	cmp    DWORD PTR [esp],eax
10005aca:	77 91                	ja     10005a5d <BF_encode+0x18>
10005acc:	eb 09                	jmp    10005ad7 <BF_encode+0x92>
10005ace:	8a 82 60 a6 00 10    	mov    al,BYTE PTR [edx+0x1000a660]	10005ad0: R_386_32	.data
10005ad4:	88 41 01             	mov    BYTE PTR [ecx+0x1],al
10005ad7:	83 c4 04             	add    esp,0x4
10005ada:	5b                   	pop    ebx
10005adb:	5e                   	pop    esi
10005adc:	5f                   	pop    edi
10005add:	5d                   	pop    ebp
10005ade:	c3                   	ret    
10005adf:	8a 86 60 a6 00 10    	mov    al,BYTE PTR [esi+0x1000a660]	10005ae1: R_386_32	.data
10005ae5:	88 41 02             	mov    BYTE PTR [ecx+0x2],al
10005ae8:	eb ed                	jmp    10005ad7 <BF_encode+0x92>

10005aea <BF_swap>:
10005aea:	53                   	push   ebx
10005aeb:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
10005aef:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
10005af3:	80 3d 20 a7 00 10 00 	cmp    BYTE PTR ds:0x1000a720,0x0	10005af5: R_386_32	.data
10005afa:	74 23                	je     10005b1f <BF_swap+0x35>
10005afc:	8b 01                	mov    eax,DWORD PTR [ecx]
10005afe:	c1 c0 10             	rol    eax,0x10
10005b01:	83 c1 04             	add    ecx,0x4
10005b04:	89 c2                	mov    edx,eax
10005b06:	c1 e2 08             	shl    edx,0x8
10005b09:	81 e2 00 ff 00 ff    	and    edx,0xff00ff00
10005b0f:	c1 e8 08             	shr    eax,0x8
10005b12:	25 ff 00 ff 00       	and    eax,0xff00ff
10005b17:	09 d0                	or     eax,edx
10005b19:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
10005b1c:	4b                   	dec    ebx
10005b1d:	75 dd                	jne    10005afc <BF_swap+0x12>
10005b1f:	5b                   	pop    ebx
10005b20:	c3                   	ret    

10005b21 <BF_set_key>:
10005b21:	55                   	push   ebp
10005b22:	57                   	push   edi
10005b23:	56                   	push   esi
10005b24:	53                   	push   ebx
10005b25:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
10005b29:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
10005b2d:	89 f9                	mov    ecx,edi
10005b2f:	be 00 00 00 00       	mov    esi,0x0
10005b34:	eb 2d                	jmp    10005b63 <BF_set_key+0x42>
10005b36:	89 f9                	mov    ecx,edi
10005b38:	4a                   	dec    edx
10005b39:	74 10                	je     10005b4b <BF_set_key+0x2a>
10005b3b:	c1 e0 08             	shl    eax,0x8
10005b3e:	0f b6 19             	movzx  ebx,BYTE PTR [ecx]
10005b41:	09 d8                	or     eax,ebx
10005b43:	80 39 00             	cmp    BYTE PTR [ecx],0x0
10005b46:	74 ee                	je     10005b36 <BF_set_key+0x15>
10005b48:	41                   	inc    ecx
10005b49:	eb ed                	jmp    10005b38 <BF_set_key+0x17>
10005b4b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
10005b4f:	89 04 b2             	mov    DWORD PTR [edx+esi*4],eax
10005b52:	33 04 b5 00 a6 00 10 	xor    eax,DWORD PTR [esi*4+0x1000a600]	10005b55: R_386_32	.data
10005b59:	89 44 b5 00          	mov    DWORD PTR [ebp+esi*4+0x0],eax
10005b5d:	46                   	inc    esi
10005b5e:	83 fe 12             	cmp    esi,0x12
10005b61:	74 0c                	je     10005b6f <BF_set_key+0x4e>
10005b63:	ba 04 00 00 00       	mov    edx,0x4
10005b68:	b8 00 00 00 00       	mov    eax,0x0
10005b6d:	eb cc                	jmp    10005b3b <BF_set_key+0x1a>
10005b6f:	5b                   	pop    ebx
10005b70:	5e                   	pop    esi
10005b71:	5f                   	pop    edi
10005b72:	5d                   	pop    ebp
10005b73:	c3                   	ret    

10005b74 <_crypt_blowfish_rn>:
10005b74:	55                   	push   ebp
10005b75:	57                   	push   edi
10005b76:	56                   	push   esi
10005b77:	53                   	push   ebx
10005b78:	81 ec 00 11 00 00    	sub    esp,0x1100
10005b7e:	83 bc 24 20 11 00 00 3c 	cmp    DWORD PTR [esp+0x1120],0x3c
10005b86:	0f 8e 9e 2d 00 00    	jle    1000892a <_crypt_blowfish_rn+0x2db6>
10005b8c:	8b 84 24 18 11 00 00 	mov    eax,DWORD PTR [esp+0x1118]
10005b93:	80 38 24             	cmp    BYTE PTR [eax],0x24
10005b96:	0f 85 a8 2d 00 00    	jne    10008944 <_crypt_blowfish_rn+0x2dd0>
10005b9c:	80 78 01 32          	cmp    BYTE PTR [eax+0x1],0x32
10005ba0:	0f 85 9e 2d 00 00    	jne    10008944 <_crypt_blowfish_rn+0x2dd0>
10005ba6:	80 78 02 61          	cmp    BYTE PTR [eax+0x2],0x61
10005baa:	0f 85 94 2d 00 00    	jne    10008944 <_crypt_blowfish_rn+0x2dd0>
10005bb0:	80 78 03 24          	cmp    BYTE PTR [eax+0x3],0x24
10005bb4:	0f 85 8a 2d 00 00    	jne    10008944 <_crypt_blowfish_rn+0x2dd0>
10005bba:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
10005bbd:	8d 50 d0             	lea    edx,[eax-0x30]
10005bc0:	80 fa 03             	cmp    dl,0x3
10005bc3:	0f 87 7b 2d 00 00    	ja     10008944 <_crypt_blowfish_rn+0x2dd0>
10005bc9:	8b 9c 24 18 11 00 00 	mov    ebx,DWORD PTR [esp+0x1118]
10005bd0:	8a 53 05             	mov    dl,BYTE PTR [ebx+0x5]
10005bd3:	8d 4a d0             	lea    ecx,[edx-0x30]
10005bd6:	80 f9 09             	cmp    cl,0x9
10005bd9:	0f 87 65 2d 00 00    	ja     10008944 <_crypt_blowfish_rn+0x2dd0>
10005bdf:	3c 33                	cmp    al,0x33
10005be1:	0f 84 54 2d 00 00    	je     1000893b <_crypt_blowfish_rn+0x2dc7>
10005be7:	8b 9c 24 18 11 00 00 	mov    ebx,DWORD PTR [esp+0x1118]
10005bee:	80 7b 06 24          	cmp    BYTE PTR [ebx+0x6],0x24
10005bf2:	0f 85 4c 2d 00 00    	jne    10008944 <_crypt_blowfish_rn+0x2dd0>
10005bf8:	0f be c0             	movsx  eax,al
10005bfb:	8d 84 80 10 ff ff ff 	lea    eax,[eax+eax*4-0xf0]
10005c02:	01 c0                	add    eax,eax
10005c04:	0f be d2             	movsx  edx,dl
10005c07:	8d 4c 10 d0          	lea    ecx,[eax+edx*1-0x30]
10005c0b:	b8 01 00 00 00       	mov    eax,0x1
10005c10:	d3 e0                	shl    eax,cl
10005c12:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
10005c16:	83 f8 0f             	cmp    eax,0xf
10005c19:	0f 86 3f 2d 00 00    	jbe    1000895e <_crypt_blowfish_rn+0x2dea>
10005c1f:	6a 10                	push   0x10
10005c21:	8b 84 24 1c 11 00 00 	mov    eax,DWORD PTR [esp+0x111c]
10005c28:	83 c0 07             	add    eax,0x7
10005c2b:	50                   	push   eax
10005c2c:	8d 84 24 f0 10 00 00 	lea    eax,[esp+0x10f0]
10005c33:	50                   	push   eax
10005c34:	e8 ff fc ff ff       	call   10005938 <BF_decode>
10005c39:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
10005c3d:	83 c4 0c             	add    esp,0xc
10005c40:	85 c0                	test   eax,eax
10005c42:	0f 85 16 2d 00 00    	jne    1000895e <_crypt_blowfish_rn+0x2dea>
10005c48:	6a 04                	push   0x4
10005c4a:	8d 5c 24 5c          	lea    ebx,[esp+0x5c]
10005c4e:	8d 84 24 ec 10 00 00 	lea    eax,[esp+0x10ec]
10005c55:	50                   	push   eax
10005c56:	e8 8f fe ff ff       	call   10005aea <BF_swap>
10005c5b:	8d 84 24 60 10 00 00 	lea    eax,[esp+0x1060]
10005c62:	50                   	push   eax
10005c63:	8d 84 24 ac 10 00 00 	lea    eax,[esp+0x10ac]
10005c6a:	50                   	push   eax
10005c6b:	ff b4 24 24 11 00 00 	push   DWORD PTR [esp+0x1124]
10005c72:	e8 aa fe ff ff       	call   10005b21 <BF_set_key>
10005c77:	be 00 96 00 10       	mov    esi,0x10009600	10005c78: R_386_32	.data
10005c7c:	b9 00 04 00 00       	mov    ecx,0x400
10005c81:	89 df                	mov    edi,ebx
10005c83:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10005c85:	83 c4 14             	add    esp,0x14
10005c88:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
10005c8c:	89 04 24             	mov    DWORD PTR [esp],eax
10005c8f:	bb 00 00 00 00       	mov    ebx,0x0
10005c94:	b8 00 00 00 00       	mov    eax,0x0
10005c99:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
10005c9c:	83 e1 02             	and    ecx,0x2
10005c9f:	8d 91 24 04 00 00    	lea    edx,[ecx+0x424]
10005ca5:	8b 54 94 58          	mov    edx,DWORD PTR [esp+edx*4+0x58]
10005ca9:	33 94 24 58 10 00 00 	xor    edx,DWORD PTR [esp+0x1058]
10005cb0:	31 c2                	xor    edx,eax
10005cb2:	89 d7                	mov    edi,edx
10005cb4:	c1 ef 06             	shr    edi,0x6
10005cb7:	89 d5                	mov    ebp,edx
10005cb9:	c1 ed 0e             	shr    ebp,0xe
10005cbc:	89 d0                	mov    eax,edx
10005cbe:	c1 e8 16             	shr    eax,0x16
10005cc1:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10005cc8:	81 e6 fc 03 00 00    	and    esi,0x3fc
10005cce:	81 e7 fc 03 00 00    	and    edi,0x3fc
10005cd4:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10005cda:	25 fc 03 00 00       	and    eax,0x3fc
10005cdf:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10005ce3:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
10005cea:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
10005cf1:	81 c1 25 04 00 00    	add    ecx,0x425
10005cf7:	8b 4c 8c 58          	mov    ecx,DWORD PTR [esp+ecx*4+0x58]
10005cfb:	33 8c 24 5c 10 00 00 	xor    ecx,DWORD PTR [esp+0x105c]
10005d02:	03 84 34 58 0c 00 00 	add    eax,DWORD PTR [esp+esi*1+0xc58]
10005d09:	31 c8                	xor    eax,ecx
10005d0b:	31 c3                	xor    ebx,eax
10005d0d:	89 d8                	mov    eax,ebx
10005d0f:	c1 e8 06             	shr    eax,0x6
10005d12:	89 c1                	mov    ecx,eax
10005d14:	89 df                	mov    edi,ebx
10005d16:	c1 ef 0e             	shr    edi,0xe
10005d19:	89 d8                	mov    eax,ebx
10005d1b:	c1 e8 16             	shr    eax,0x16
10005d1e:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
10005d25:	81 e6 fc 03 00 00    	and    esi,0x3fc
10005d2b:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10005d31:	81 e7 fc 03 00 00    	and    edi,0x3fc
10005d37:	25 fc 03 00 00       	and    eax,0x3fc
10005d3c:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10005d40:	03 84 3c 58 04 00 00 	add    eax,DWORD PTR [esp+edi*1+0x458]
10005d47:	33 84 0c 58 08 00 00 	xor    eax,DWORD PTR [esp+ecx*1+0x858]
10005d4e:	33 94 24 60 10 00 00 	xor    edx,DWORD PTR [esp+0x1060]
10005d55:	03 84 34 58 0c 00 00 	add    eax,DWORD PTR [esp+esi*1+0xc58]
10005d5c:	89 c1                	mov    ecx,eax
10005d5e:	31 d1                	xor    ecx,edx
10005d60:	89 ca                	mov    edx,ecx
10005d62:	c1 ea 06             	shr    edx,0x6
10005d65:	89 cf                	mov    edi,ecx
10005d67:	c1 ef 0e             	shr    edi,0xe
10005d6a:	89 c8                	mov    eax,ecx
10005d6c:	c1 e8 16             	shr    eax,0x16
10005d6f:	8d 34 8d 00 00 00 00 	lea    esi,[ecx*4+0x0]
10005d76:	81 e6 fc 03 00 00    	and    esi,0x3fc
10005d7c:	81 e2 fc 03 00 00    	and    edx,0x3fc
10005d82:	81 e7 fc 03 00 00    	and    edi,0x3fc
10005d88:	25 fc 03 00 00       	and    eax,0x3fc
10005d8d:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10005d91:	03 84 3c 58 04 00 00 	add    eax,DWORD PTR [esp+edi*1+0x458]
10005d98:	33 84 14 58 08 00 00 	xor    eax,DWORD PTR [esp+edx*1+0x858]
10005d9f:	33 9c 24 64 10 00 00 	xor    ebx,DWORD PTR [esp+0x1064]
10005da6:	03 84 34 58 0c 00 00 	add    eax,DWORD PTR [esp+esi*1+0xc58]
10005dad:	89 c2                	mov    edx,eax
10005daf:	31 da                	xor    edx,ebx
10005db1:	89 d6                	mov    esi,edx
10005db3:	c1 ee 06             	shr    esi,0x6
10005db6:	89 d7                	mov    edi,edx
10005db8:	c1 ef 0e             	shr    edi,0xe
10005dbb:	89 d0                	mov    eax,edx
10005dbd:	c1 e8 16             	shr    eax,0x16
10005dc0:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
10005dc7:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10005dcd:	81 e6 fc 03 00 00    	and    esi,0x3fc
10005dd3:	81 e7 fc 03 00 00    	and    edi,0x3fc
10005dd9:	25 fc 03 00 00       	and    eax,0x3fc
10005dde:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10005de2:	03 84 3c 58 04 00 00 	add    eax,DWORD PTR [esp+edi*1+0x458]
10005de9:	33 84 34 58 08 00 00 	xor    eax,DWORD PTR [esp+esi*1+0x858]
10005df0:	33 8c 24 68 10 00 00 	xor    ecx,DWORD PTR [esp+0x1068]
10005df7:	03 84 1c 58 0c 00 00 	add    eax,DWORD PTR [esp+ebx*1+0xc58]
10005dfe:	31 c8                	xor    eax,ecx
10005e00:	89 c3                	mov    ebx,eax
10005e02:	c1 eb 06             	shr    ebx,0x6
10005e05:	89 c7                	mov    edi,eax
10005e07:	c1 ef 0e             	shr    edi,0xe
10005e0a:	89 c6                	mov    esi,eax
10005e0c:	c1 ee 16             	shr    esi,0x16
10005e0f:	89 f1                	mov    ecx,esi
10005e11:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10005e18:	81 e6 fc 03 00 00    	and    esi,0x3fc
10005e1e:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10005e24:	81 e7 fc 03 00 00    	and    edi,0x3fc
10005e2a:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10005e30:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10005e34:	03 8c 3c 58 04 00 00 	add    ecx,DWORD PTR [esp+edi*1+0x458]
10005e3b:	33 8c 1c 58 08 00 00 	xor    ecx,DWORD PTR [esp+ebx*1+0x858]
10005e42:	33 94 24 6c 10 00 00 	xor    edx,DWORD PTR [esp+0x106c]
10005e49:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10005e50:	31 ca                	xor    edx,ecx
10005e52:	89 d6                	mov    esi,edx
10005e54:	c1 ee 06             	shr    esi,0x6
10005e57:	89 d7                	mov    edi,edx
10005e59:	c1 ef 0e             	shr    edi,0xe
10005e5c:	89 d3                	mov    ebx,edx
10005e5e:	c1 eb 16             	shr    ebx,0x16
10005e61:	89 d9                	mov    ecx,ebx
10005e63:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
10005e6a:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10005e70:	81 e6 fc 03 00 00    	and    esi,0x3fc
10005e76:	81 e7 fc 03 00 00    	and    edi,0x3fc
10005e7c:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10005e82:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10005e86:	03 8c 3c 58 04 00 00 	add    ecx,DWORD PTR [esp+edi*1+0x458]
10005e8d:	33 8c 34 58 08 00 00 	xor    ecx,DWORD PTR [esp+esi*1+0x858]
10005e94:	33 84 24 70 10 00 00 	xor    eax,DWORD PTR [esp+0x1070]
10005e9b:	03 8c 1c 58 0c 00 00 	add    ecx,DWORD PTR [esp+ebx*1+0xc58]
10005ea2:	31 c8                	xor    eax,ecx
10005ea4:	89 c6                	mov    esi,eax
10005ea6:	c1 ee 06             	shr    esi,0x6
10005ea9:	89 c7                	mov    edi,eax
10005eab:	c1 ef 0e             	shr    edi,0xe
10005eae:	89 c3                	mov    ebx,eax
10005eb0:	c1 eb 16             	shr    ebx,0x16
10005eb3:	89 d9                	mov    ecx,ebx
10005eb5:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
10005ebc:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10005ec2:	81 e6 fc 03 00 00    	and    esi,0x3fc
10005ec8:	81 e7 fc 03 00 00    	and    edi,0x3fc
10005ece:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10005ed4:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10005ed8:	03 8c 3c 58 04 00 00 	add    ecx,DWORD PTR [esp+edi*1+0x458]
10005edf:	33 8c 34 58 08 00 00 	xor    ecx,DWORD PTR [esp+esi*1+0x858]
10005ee6:	33 94 24 74 10 00 00 	xor    edx,DWORD PTR [esp+0x1074]
10005eed:	03 8c 1c 58 0c 00 00 	add    ecx,DWORD PTR [esp+ebx*1+0xc58]
10005ef4:	31 ca                	xor    edx,ecx
10005ef6:	89 d6                	mov    esi,edx
10005ef8:	c1 ee 06             	shr    esi,0x6
10005efb:	89 d7                	mov    edi,edx
10005efd:	c1 ef 0e             	shr    edi,0xe
10005f00:	89 d3                	mov    ebx,edx
10005f02:	c1 eb 16             	shr    ebx,0x16
10005f05:	89 d9                	mov    ecx,ebx
10005f07:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
10005f0e:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10005f14:	81 e6 fc 03 00 00    	and    esi,0x3fc
10005f1a:	81 e7 fc 03 00 00    	and    edi,0x3fc
10005f20:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10005f26:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10005f2a:	03 8c 3c 58 04 00 00 	add    ecx,DWORD PTR [esp+edi*1+0x458]
10005f31:	33 8c 34 58 08 00 00 	xor    ecx,DWORD PTR [esp+esi*1+0x858]
10005f38:	33 84 24 78 10 00 00 	xor    eax,DWORD PTR [esp+0x1078]
10005f3f:	03 8c 1c 58 0c 00 00 	add    ecx,DWORD PTR [esp+ebx*1+0xc58]
10005f46:	31 c8                	xor    eax,ecx
10005f48:	89 c6                	mov    esi,eax
10005f4a:	c1 ee 06             	shr    esi,0x6
10005f4d:	89 c7                	mov    edi,eax
10005f4f:	c1 ef 0e             	shr    edi,0xe
10005f52:	89 c3                	mov    ebx,eax
10005f54:	c1 eb 16             	shr    ebx,0x16
10005f57:	89 d9                	mov    ecx,ebx
10005f59:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
10005f60:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10005f66:	81 e6 fc 03 00 00    	and    esi,0x3fc
10005f6c:	81 e7 fc 03 00 00    	and    edi,0x3fc
10005f72:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10005f78:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10005f7c:	03 8c 3c 58 04 00 00 	add    ecx,DWORD PTR [esp+edi*1+0x458]
10005f83:	33 8c 34 58 08 00 00 	xor    ecx,DWORD PTR [esp+esi*1+0x858]
10005f8a:	33 94 24 7c 10 00 00 	xor    edx,DWORD PTR [esp+0x107c]
10005f91:	03 8c 1c 58 0c 00 00 	add    ecx,DWORD PTR [esp+ebx*1+0xc58]
10005f98:	31 ca                	xor    edx,ecx
10005f9a:	89 d6                	mov    esi,edx
10005f9c:	c1 ee 06             	shr    esi,0x6
10005f9f:	89 d7                	mov    edi,edx
10005fa1:	c1 ef 0e             	shr    edi,0xe
10005fa4:	89 d3                	mov    ebx,edx
10005fa6:	c1 eb 16             	shr    ebx,0x16
10005fa9:	89 d9                	mov    ecx,ebx
10005fab:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
10005fb2:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10005fb8:	81 e6 fc 03 00 00    	and    esi,0x3fc
10005fbe:	81 e7 fc 03 00 00    	and    edi,0x3fc
10005fc4:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10005fca:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10005fce:	03 8c 3c 58 04 00 00 	add    ecx,DWORD PTR [esp+edi*1+0x458]
10005fd5:	33 8c 34 58 08 00 00 	xor    ecx,DWORD PTR [esp+esi*1+0x858]
10005fdc:	33 84 24 80 10 00 00 	xor    eax,DWORD PTR [esp+0x1080]
10005fe3:	03 8c 1c 58 0c 00 00 	add    ecx,DWORD PTR [esp+ebx*1+0xc58]
10005fea:	31 c8                	xor    eax,ecx
10005fec:	89 c6                	mov    esi,eax
10005fee:	c1 ee 06             	shr    esi,0x6
10005ff1:	89 c7                	mov    edi,eax
10005ff3:	c1 ef 0e             	shr    edi,0xe
10005ff6:	89 c3                	mov    ebx,eax
10005ff8:	c1 eb 16             	shr    ebx,0x16
10005ffb:	89 d9                	mov    ecx,ebx
10005ffd:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
10006004:	81 e3 fc 03 00 00    	and    ebx,0x3fc
1000600a:	81 e6 fc 03 00 00    	and    esi,0x3fc
10006010:	81 e7 fc 03 00 00    	and    edi,0x3fc
10006016:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000601c:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10006020:	03 8c 3c 58 04 00 00 	add    ecx,DWORD PTR [esp+edi*1+0x458]
10006027:	33 8c 34 58 08 00 00 	xor    ecx,DWORD PTR [esp+esi*1+0x858]
1000602e:	33 94 24 84 10 00 00 	xor    edx,DWORD PTR [esp+0x1084]
10006035:	03 8c 1c 58 0c 00 00 	add    ecx,DWORD PTR [esp+ebx*1+0xc58]
1000603c:	31 ca                	xor    edx,ecx
1000603e:	89 d6                	mov    esi,edx
10006040:	c1 ee 06             	shr    esi,0x6
10006043:	89 d7                	mov    edi,edx
10006045:	c1 ef 0e             	shr    edi,0xe
10006048:	89 d3                	mov    ebx,edx
1000604a:	c1 eb 16             	shr    ebx,0x16
1000604d:	89 d9                	mov    ecx,ebx
1000604f:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
10006056:	81 e3 fc 03 00 00    	and    ebx,0x3fc
1000605c:	81 e6 fc 03 00 00    	and    esi,0x3fc
10006062:	81 e7 fc 03 00 00    	and    edi,0x3fc
10006068:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000606e:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10006072:	03 8c 3c 58 04 00 00 	add    ecx,DWORD PTR [esp+edi*1+0x458]
10006079:	33 8c 34 58 08 00 00 	xor    ecx,DWORD PTR [esp+esi*1+0x858]
10006080:	33 84 24 88 10 00 00 	xor    eax,DWORD PTR [esp+0x1088]
10006087:	03 8c 1c 58 0c 00 00 	add    ecx,DWORD PTR [esp+ebx*1+0xc58]
1000608e:	31 c8                	xor    eax,ecx
10006090:	89 c6                	mov    esi,eax
10006092:	c1 ee 06             	shr    esi,0x6
10006095:	89 c7                	mov    edi,eax
10006097:	c1 ef 0e             	shr    edi,0xe
1000609a:	89 c3                	mov    ebx,eax
1000609c:	c1 eb 16             	shr    ebx,0x16
1000609f:	89 d9                	mov    ecx,ebx
100060a1:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
100060a8:	81 e3 fc 03 00 00    	and    ebx,0x3fc
100060ae:	81 e6 fc 03 00 00    	and    esi,0x3fc
100060b4:	81 e7 fc 03 00 00    	and    edi,0x3fc
100060ba:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100060c0:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
100060c4:	03 8c 3c 58 04 00 00 	add    ecx,DWORD PTR [esp+edi*1+0x458]
100060cb:	33 8c 34 58 08 00 00 	xor    ecx,DWORD PTR [esp+esi*1+0x858]
100060d2:	33 94 24 8c 10 00 00 	xor    edx,DWORD PTR [esp+0x108c]
100060d9:	03 8c 1c 58 0c 00 00 	add    ecx,DWORD PTR [esp+ebx*1+0xc58]
100060e0:	31 ca                	xor    edx,ecx
100060e2:	89 d3                	mov    ebx,edx
100060e4:	c1 eb 06             	shr    ebx,0x6
100060e7:	89 d7                	mov    edi,edx
100060e9:	c1 ef 0e             	shr    edi,0xe
100060ec:	89 d6                	mov    esi,edx
100060ee:	c1 ee 16             	shr    esi,0x16
100060f1:	89 f1                	mov    ecx,esi
100060f3:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
100060fa:	81 e6 fc 03 00 00    	and    esi,0x3fc
10006100:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10006106:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000610c:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10006112:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10006116:	03 8c 3c 58 04 00 00 	add    ecx,DWORD PTR [esp+edi*1+0x458]
1000611d:	33 8c 1c 58 08 00 00 	xor    ecx,DWORD PTR [esp+ebx*1+0x858]
10006124:	33 84 24 90 10 00 00 	xor    eax,DWORD PTR [esp+0x1090]
1000612b:	89 cb                	mov    ebx,ecx
1000612d:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
10006134:	31 d8                	xor    eax,ebx
10006136:	89 c6                	mov    esi,eax
10006138:	c1 ee 06             	shr    esi,0x6
1000613b:	89 c7                	mov    edi,eax
1000613d:	c1 ef 0e             	shr    edi,0xe
10006140:	89 c3                	mov    ebx,eax
10006142:	c1 eb 16             	shr    ebx,0x16
10006145:	89 d9                	mov    ecx,ebx
10006147:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
1000614e:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10006154:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000615a:	81 e7 fc 03 00 00    	and    edi,0x3fc
10006160:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10006166:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
1000616a:	03 8c 3c 58 04 00 00 	add    ecx,DWORD PTR [esp+edi*1+0x458]
10006171:	33 8c 34 58 08 00 00 	xor    ecx,DWORD PTR [esp+esi*1+0x858]
10006178:	33 94 24 94 10 00 00 	xor    edx,DWORD PTR [esp+0x1094]
1000617f:	03 8c 1c 58 0c 00 00 	add    ecx,DWORD PTR [esp+ebx*1+0xc58]
10006186:	31 ca                	xor    edx,ecx
10006188:	89 d3                	mov    ebx,edx
1000618a:	c1 eb 06             	shr    ebx,0x6
1000618d:	89 d7                	mov    edi,edx
1000618f:	c1 ef 0e             	shr    edi,0xe
10006192:	89 d6                	mov    esi,edx
10006194:	c1 ee 16             	shr    esi,0x16
10006197:	89 f1                	mov    ecx,esi
10006199:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
100061a0:	81 e6 fc 03 00 00    	and    esi,0x3fc
100061a6:	81 e3 fc 03 00 00    	and    ebx,0x3fc
100061ac:	81 e7 fc 03 00 00    	and    edi,0x3fc
100061b2:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100061b8:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
100061bc:	03 8c 3c 58 04 00 00 	add    ecx,DWORD PTR [esp+edi*1+0x458]
100061c3:	33 8c 1c 58 08 00 00 	xor    ecx,DWORD PTR [esp+ebx*1+0x858]
100061ca:	33 84 24 98 10 00 00 	xor    eax,DWORD PTR [esp+0x1098]
100061d1:	89 cb                	mov    ebx,ecx
100061d3:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
100061da:	31 c3                	xor    ebx,eax
100061dc:	89 d0                	mov    eax,edx
100061de:	33 84 24 9c 10 00 00 	xor    eax,DWORD PTR [esp+0x109c]
100061e5:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
100061e8:	89 84 8c 58 10 00 00 	mov    DWORD PTR [esp+ecx*4+0x1058],eax
100061ef:	89 9c 8c 5c 10 00 00 	mov    DWORD PTR [esp+ecx*4+0x105c],ebx
100061f6:	83 c1 02             	add    ecx,0x2
100061f9:	89 0c 24             	mov    DWORD PTR [esp],ecx
100061fc:	83 f9 12             	cmp    ecx,0x12
100061ff:	0f 85 94 fa ff ff    	jne    10005c99 <_crypt_blowfish_rn+0x125>
10006205:	8d 4c 24 58          	lea    ecx,[esp+0x58]
10006209:	83 c1 10             	add    ecx,0x10
1000620c:	8b 94 24 f0 10 00 00 	mov    edx,DWORD PTR [esp+0x10f0]
10006213:	33 94 24 58 10 00 00 	xor    edx,DWORD PTR [esp+0x1058]
1000621a:	31 c2                	xor    edx,eax
1000621c:	89 d7                	mov    edi,edx
1000621e:	c1 ef 06             	shr    edi,0x6
10006221:	89 d5                	mov    ebp,edx
10006223:	c1 ed 0e             	shr    ebp,0xe
10006226:	89 d0                	mov    eax,edx
10006228:	c1 e8 16             	shr    eax,0x16
1000622b:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10006232:	81 e6 fc 03 00 00    	and    esi,0x3fc
10006238:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000623e:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10006244:	25 fc 03 00 00       	and    eax,0x3fc
10006249:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
1000624d:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
10006254:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
1000625b:	89 c7                	mov    edi,eax
1000625d:	8b 84 24 f4 10 00 00 	mov    eax,DWORD PTR [esp+0x10f4]
10006264:	33 84 24 5c 10 00 00 	xor    eax,DWORD PTR [esp+0x105c]
1000626b:	03 bc 34 58 0c 00 00 	add    edi,DWORD PTR [esp+esi*1+0xc58]
10006272:	31 f8                	xor    eax,edi
10006274:	31 d8                	xor    eax,ebx
10006276:	89 c7                	mov    edi,eax
10006278:	c1 ef 06             	shr    edi,0x6
1000627b:	89 c5                	mov    ebp,eax
1000627d:	c1 ed 0e             	shr    ebp,0xe
10006280:	89 c3                	mov    ebx,eax
10006282:	c1 eb 16             	shr    ebx,0x16
10006285:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
1000628c:	81 e6 fc 03 00 00    	and    esi,0x3fc
10006292:	81 e7 fc 03 00 00    	and    edi,0x3fc
10006298:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000629e:	81 e3 fc 03 00 00    	and    ebx,0x3fc
100062a4:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
100062a8:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
100062af:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
100062b6:	33 94 24 60 10 00 00 	xor    edx,DWORD PTR [esp+0x1060]
100062bd:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
100062c4:	31 da                	xor    edx,ebx
100062c6:	89 d7                	mov    edi,edx
100062c8:	c1 ef 06             	shr    edi,0x6
100062cb:	89 d5                	mov    ebp,edx
100062cd:	c1 ed 0e             	shr    ebp,0xe
100062d0:	89 d3                	mov    ebx,edx
100062d2:	c1 eb 16             	shr    ebx,0x16
100062d5:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
100062dc:	81 e6 fc 03 00 00    	and    esi,0x3fc
100062e2:	81 e7 fc 03 00 00    	and    edi,0x3fc
100062e8:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100062ee:	81 e3 fc 03 00 00    	and    ebx,0x3fc
100062f4:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
100062f8:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
100062ff:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
10006306:	33 84 24 64 10 00 00 	xor    eax,DWORD PTR [esp+0x1064]
1000630d:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
10006314:	31 d8                	xor    eax,ebx
10006316:	89 c7                	mov    edi,eax
10006318:	c1 ef 06             	shr    edi,0x6
1000631b:	89 c5                	mov    ebp,eax
1000631d:	c1 ed 0e             	shr    ebp,0xe
10006320:	89 c3                	mov    ebx,eax
10006322:	c1 eb 16             	shr    ebx,0x16
10006325:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
1000632c:	81 e6 fc 03 00 00    	and    esi,0x3fc
10006332:	81 e7 fc 03 00 00    	and    edi,0x3fc
10006338:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000633e:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10006344:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
10006348:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
1000634f:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
10006356:	33 94 24 68 10 00 00 	xor    edx,DWORD PTR [esp+0x1068]
1000635d:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
10006364:	31 da                	xor    edx,ebx
10006366:	89 d7                	mov    edi,edx
10006368:	c1 ef 06             	shr    edi,0x6
1000636b:	89 d5                	mov    ebp,edx
1000636d:	c1 ed 0e             	shr    ebp,0xe
10006370:	89 d3                	mov    ebx,edx
10006372:	c1 eb 16             	shr    ebx,0x16
10006375:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
1000637c:	81 e6 fc 03 00 00    	and    esi,0x3fc
10006382:	81 e7 fc 03 00 00    	and    edi,0x3fc
10006388:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000638e:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10006394:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
10006398:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
1000639f:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
100063a6:	33 84 24 6c 10 00 00 	xor    eax,DWORD PTR [esp+0x106c]
100063ad:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
100063b4:	31 d8                	xor    eax,ebx
100063b6:	89 c7                	mov    edi,eax
100063b8:	c1 ef 06             	shr    edi,0x6
100063bb:	89 c5                	mov    ebp,eax
100063bd:	c1 ed 0e             	shr    ebp,0xe
100063c0:	89 c3                	mov    ebx,eax
100063c2:	c1 eb 16             	shr    ebx,0x16
100063c5:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
100063cc:	81 e6 fc 03 00 00    	and    esi,0x3fc
100063d2:	81 e7 fc 03 00 00    	and    edi,0x3fc
100063d8:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100063de:	81 e3 fc 03 00 00    	and    ebx,0x3fc
100063e4:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
100063e8:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
100063ef:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
100063f6:	33 94 24 70 10 00 00 	xor    edx,DWORD PTR [esp+0x1070]
100063fd:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
10006404:	31 da                	xor    edx,ebx
10006406:	89 d7                	mov    edi,edx
10006408:	c1 ef 06             	shr    edi,0x6
1000640b:	89 d5                	mov    ebp,edx
1000640d:	c1 ed 0e             	shr    ebp,0xe
10006410:	89 d3                	mov    ebx,edx
10006412:	c1 eb 16             	shr    ebx,0x16
10006415:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
1000641c:	81 e6 fc 03 00 00    	and    esi,0x3fc
10006422:	81 e7 fc 03 00 00    	and    edi,0x3fc
10006428:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000642e:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10006434:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
10006438:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
1000643f:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
10006446:	33 84 24 74 10 00 00 	xor    eax,DWORD PTR [esp+0x1074]
1000644d:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
10006454:	31 d8                	xor    eax,ebx
10006456:	89 c7                	mov    edi,eax
10006458:	c1 ef 06             	shr    edi,0x6
1000645b:	89 c5                	mov    ebp,eax
1000645d:	c1 ed 0e             	shr    ebp,0xe
10006460:	89 c3                	mov    ebx,eax
10006462:	c1 eb 16             	shr    ebx,0x16
10006465:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
1000646c:	81 e6 fc 03 00 00    	and    esi,0x3fc
10006472:	81 e7 fc 03 00 00    	and    edi,0x3fc
10006478:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000647e:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10006484:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
10006488:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
1000648f:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
10006496:	33 94 24 78 10 00 00 	xor    edx,DWORD PTR [esp+0x1078]
1000649d:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
100064a4:	31 da                	xor    edx,ebx
100064a6:	89 d7                	mov    edi,edx
100064a8:	c1 ef 06             	shr    edi,0x6
100064ab:	89 d5                	mov    ebp,edx
100064ad:	c1 ed 0e             	shr    ebp,0xe
100064b0:	89 d3                	mov    ebx,edx
100064b2:	c1 eb 16             	shr    ebx,0x16
100064b5:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
100064bc:	81 e6 fc 03 00 00    	and    esi,0x3fc
100064c2:	81 e7 fc 03 00 00    	and    edi,0x3fc
100064c8:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100064ce:	81 e3 fc 03 00 00    	and    ebx,0x3fc
100064d4:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
100064d8:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
100064df:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
100064e6:	33 84 24 7c 10 00 00 	xor    eax,DWORD PTR [esp+0x107c]
100064ed:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
100064f4:	31 d8                	xor    eax,ebx
100064f6:	89 c7                	mov    edi,eax
100064f8:	c1 ef 06             	shr    edi,0x6
100064fb:	89 c5                	mov    ebp,eax
100064fd:	c1 ed 0e             	shr    ebp,0xe
10006500:	89 c3                	mov    ebx,eax
10006502:	c1 eb 16             	shr    ebx,0x16
10006505:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
1000650c:	81 e6 fc 03 00 00    	and    esi,0x3fc
10006512:	81 e7 fc 03 00 00    	and    edi,0x3fc
10006518:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000651e:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10006524:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
10006528:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
1000652f:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
10006536:	33 94 24 80 10 00 00 	xor    edx,DWORD PTR [esp+0x1080]
1000653d:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
10006544:	31 da                	xor    edx,ebx
10006546:	89 d7                	mov    edi,edx
10006548:	c1 ef 06             	shr    edi,0x6
1000654b:	89 d5                	mov    ebp,edx
1000654d:	c1 ed 0e             	shr    ebp,0xe
10006550:	89 d3                	mov    ebx,edx
10006552:	c1 eb 16             	shr    ebx,0x16
10006555:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
1000655c:	81 e6 fc 03 00 00    	and    esi,0x3fc
10006562:	81 e7 fc 03 00 00    	and    edi,0x3fc
10006568:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000656e:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10006574:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
10006578:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
1000657f:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
10006586:	33 84 24 84 10 00 00 	xor    eax,DWORD PTR [esp+0x1084]
1000658d:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
10006594:	31 d8                	xor    eax,ebx
10006596:	89 c7                	mov    edi,eax
10006598:	c1 ef 06             	shr    edi,0x6
1000659b:	89 c5                	mov    ebp,eax
1000659d:	c1 ed 0e             	shr    ebp,0xe
100065a0:	89 c3                	mov    ebx,eax
100065a2:	c1 eb 16             	shr    ebx,0x16
100065a5:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
100065ac:	81 e6 fc 03 00 00    	and    esi,0x3fc
100065b2:	81 e7 fc 03 00 00    	and    edi,0x3fc
100065b8:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100065be:	81 e3 fc 03 00 00    	and    ebx,0x3fc
100065c4:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
100065c8:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
100065cf:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
100065d6:	33 94 24 88 10 00 00 	xor    edx,DWORD PTR [esp+0x1088]
100065dd:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
100065e4:	31 da                	xor    edx,ebx
100065e6:	89 d7                	mov    edi,edx
100065e8:	c1 ef 06             	shr    edi,0x6
100065eb:	89 d5                	mov    ebp,edx
100065ed:	c1 ed 0e             	shr    ebp,0xe
100065f0:	89 d3                	mov    ebx,edx
100065f2:	c1 eb 16             	shr    ebx,0x16
100065f5:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
100065fc:	81 e6 fc 03 00 00    	and    esi,0x3fc
10006602:	81 e7 fc 03 00 00    	and    edi,0x3fc
10006608:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000660e:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10006614:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
10006618:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
1000661f:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
10006626:	33 84 24 8c 10 00 00 	xor    eax,DWORD PTR [esp+0x108c]
1000662d:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
10006634:	31 d8                	xor    eax,ebx
10006636:	89 c7                	mov    edi,eax
10006638:	c1 ef 06             	shr    edi,0x6
1000663b:	89 c5                	mov    ebp,eax
1000663d:	c1 ed 0e             	shr    ebp,0xe
10006640:	89 c3                	mov    ebx,eax
10006642:	c1 eb 16             	shr    ebx,0x16
10006645:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
1000664c:	81 e6 fc 03 00 00    	and    esi,0x3fc
10006652:	81 e7 fc 03 00 00    	and    edi,0x3fc
10006658:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000665e:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10006664:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
10006668:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
1000666f:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
10006676:	33 94 24 90 10 00 00 	xor    edx,DWORD PTR [esp+0x1090]
1000667d:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
10006684:	31 da                	xor    edx,ebx
10006686:	89 d7                	mov    edi,edx
10006688:	c1 ef 06             	shr    edi,0x6
1000668b:	89 d5                	mov    ebp,edx
1000668d:	c1 ed 0e             	shr    ebp,0xe
10006690:	89 d3                	mov    ebx,edx
10006692:	c1 eb 16             	shr    ebx,0x16
10006695:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
1000669c:	81 e6 fc 03 00 00    	and    esi,0x3fc
100066a2:	81 e7 fc 03 00 00    	and    edi,0x3fc
100066a8:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100066ae:	81 e3 fc 03 00 00    	and    ebx,0x3fc
100066b4:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
100066b8:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
100066bf:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
100066c6:	33 84 24 94 10 00 00 	xor    eax,DWORD PTR [esp+0x1094]
100066cd:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
100066d4:	31 d8                	xor    eax,ebx
100066d6:	89 c6                	mov    esi,eax
100066d8:	c1 ee 06             	shr    esi,0x6
100066db:	89 c5                	mov    ebp,eax
100066dd:	c1 ed 0e             	shr    ebp,0xe
100066e0:	89 c3                	mov    ebx,eax
100066e2:	c1 eb 16             	shr    ebx,0x16
100066e5:	8d 3c 85 00 00 00 00 	lea    edi,[eax*4+0x0]
100066ec:	81 e7 fc 03 00 00    	and    edi,0x3fc
100066f2:	81 e6 fc 03 00 00    	and    esi,0x3fc
100066f8:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100066fe:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10006704:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
10006708:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
1000670f:	33 9c 34 58 08 00 00 	xor    ebx,DWORD PTR [esp+esi*1+0x858]
10006716:	33 94 24 98 10 00 00 	xor    edx,DWORD PTR [esp+0x1098]
1000671d:	03 9c 3c 58 0c 00 00 	add    ebx,DWORD PTR [esp+edi*1+0xc58]
10006724:	31 da                	xor    edx,ebx
10006726:	33 84 24 9c 10 00 00 	xor    eax,DWORD PTR [esp+0x109c]
1000672d:	89 41 f0             	mov    DWORD PTR [ecx-0x10],eax
10006730:	89 51 f4             	mov    DWORD PTR [ecx-0xc],edx
10006733:	8b 9c 24 e8 10 00 00 	mov    ebx,DWORD PTR [esp+0x10e8]
1000673a:	33 9c 24 58 10 00 00 	xor    ebx,DWORD PTR [esp+0x1058]
10006741:	31 d8                	xor    eax,ebx
10006743:	89 c5                	mov    ebp,eax
10006745:	c1 ed 06             	shr    ebp,0x6
10006748:	89 c6                	mov    esi,eax
1000674a:	c1 ee 0e             	shr    esi,0xe
1000674d:	89 c3                	mov    ebx,eax
1000674f:	c1 eb 16             	shr    ebx,0x16
10006752:	8d 3c 85 00 00 00 00 	lea    edi,[eax*4+0x0]
10006759:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000675f:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10006765:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000676b:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10006771:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
10006775:	03 9c 34 58 04 00 00 	add    ebx,DWORD PTR [esp+esi*1+0x458]
1000677c:	33 9c 2c 58 08 00 00 	xor    ebx,DWORD PTR [esp+ebp*1+0x858]
10006783:	8b b4 24 ec 10 00 00 	mov    esi,DWORD PTR [esp+0x10ec]
1000678a:	33 b4 24 5c 10 00 00 	xor    esi,DWORD PTR [esp+0x105c]
10006791:	31 f2                	xor    edx,esi
10006793:	03 9c 3c 58 0c 00 00 	add    ebx,DWORD PTR [esp+edi*1+0xc58]
1000679a:	89 de                	mov    esi,ebx
1000679c:	31 d6                	xor    esi,edx
1000679e:	89 f5                	mov    ebp,esi
100067a0:	c1 ed 06             	shr    ebp,0x6
100067a3:	89 f3                	mov    ebx,esi
100067a5:	c1 eb 0e             	shr    ebx,0xe
100067a8:	89 f2                	mov    edx,esi
100067aa:	c1 ea 16             	shr    edx,0x16
100067ad:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
100067b4:	81 e7 fc 03 00 00    	and    edi,0x3fc
100067ba:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100067c0:	81 e3 fc 03 00 00    	and    ebx,0x3fc
100067c6:	81 e2 fc 03 00 00    	and    edx,0x3fc
100067cc:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
100067d0:	03 94 1c 58 04 00 00 	add    edx,DWORD PTR [esp+ebx*1+0x458]
100067d7:	33 94 2c 58 08 00 00 	xor    edx,DWORD PTR [esp+ebp*1+0x858]
100067de:	33 84 24 60 10 00 00 	xor    eax,DWORD PTR [esp+0x1060]
100067e5:	89 d3                	mov    ebx,edx
100067e7:	03 9c 3c 58 0c 00 00 	add    ebx,DWORD PTR [esp+edi*1+0xc58]
100067ee:	31 c3                	xor    ebx,eax
100067f0:	89 df                	mov    edi,ebx
100067f2:	c1 ef 06             	shr    edi,0x6
100067f5:	89 dd                	mov    ebp,ebx
100067f7:	c1 ed 0e             	shr    ebp,0xe
100067fa:	89 da                	mov    edx,ebx
100067fc:	c1 ea 16             	shr    edx,0x16
100067ff:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
10006806:	25 fc 03 00 00       	and    eax,0x3fc
1000680b:	81 e7 fc 03 00 00    	and    edi,0x3fc
10006811:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10006817:	81 e2 fc 03 00 00    	and    edx,0x3fc
1000681d:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10006821:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10006828:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
1000682f:	33 b4 24 64 10 00 00 	xor    esi,DWORD PTR [esp+0x1064]
10006836:	03 94 04 58 0c 00 00 	add    edx,DWORD PTR [esp+eax*1+0xc58]
1000683d:	31 d6                	xor    esi,edx
1000683f:	89 f0                	mov    eax,esi
10006841:	c1 e8 06             	shr    eax,0x6
10006844:	89 f5                	mov    ebp,esi
10006846:	c1 ed 0e             	shr    ebp,0xe
10006849:	89 f2                	mov    edx,esi
1000684b:	c1 ea 16             	shr    edx,0x16
1000684e:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
10006855:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000685b:	25 fc 03 00 00       	and    eax,0x3fc
10006860:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10006866:	81 e2 fc 03 00 00    	and    edx,0x3fc
1000686c:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10006870:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10006877:	33 94 04 58 08 00 00 	xor    edx,DWORD PTR [esp+eax*1+0x858]
1000687e:	33 9c 24 68 10 00 00 	xor    ebx,DWORD PTR [esp+0x1068]
10006885:	03 94 3c 58 0c 00 00 	add    edx,DWORD PTR [esp+edi*1+0xc58]
1000688c:	31 d3                	xor    ebx,edx
1000688e:	89 dd                	mov    ebp,ebx
10006890:	c1 ed 06             	shr    ebp,0x6
10006893:	89 da                	mov    edx,ebx
10006895:	c1 ea 0e             	shr    edx,0xe
10006898:	89 d8                	mov    eax,ebx
1000689a:	c1 e8 16             	shr    eax,0x16
1000689d:	8d 3c 9d 00 00 00 00 	lea    edi,[ebx*4+0x0]
100068a4:	81 e7 fc 03 00 00    	and    edi,0x3fc
100068aa:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100068b0:	81 e2 fc 03 00 00    	and    edx,0x3fc
100068b6:	25 fc 03 00 00       	and    eax,0x3fc
100068bb:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
100068bf:	03 84 14 58 04 00 00 	add    eax,DWORD PTR [esp+edx*1+0x458]
100068c6:	33 84 2c 58 08 00 00 	xor    eax,DWORD PTR [esp+ebp*1+0x858]
100068cd:	33 b4 24 6c 10 00 00 	xor    esi,DWORD PTR [esp+0x106c]
100068d4:	03 84 3c 58 0c 00 00 	add    eax,DWORD PTR [esp+edi*1+0xc58]
100068db:	89 c2                	mov    edx,eax
100068dd:	31 f2                	xor    edx,esi
100068df:	89 d7                	mov    edi,edx
100068e1:	c1 ef 06             	shr    edi,0x6
100068e4:	89 d5                	mov    ebp,edx
100068e6:	c1 ed 0e             	shr    ebp,0xe
100068e9:	89 d0                	mov    eax,edx
100068eb:	c1 e8 16             	shr    eax,0x16
100068ee:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
100068f5:	81 e6 fc 03 00 00    	and    esi,0x3fc
100068fb:	81 e7 fc 03 00 00    	and    edi,0x3fc
10006901:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10006907:	25 fc 03 00 00       	and    eax,0x3fc
1000690c:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10006910:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
10006917:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
1000691e:	33 9c 24 70 10 00 00 	xor    ebx,DWORD PTR [esp+0x1070]
10006925:	03 84 34 58 0c 00 00 	add    eax,DWORD PTR [esp+esi*1+0xc58]
1000692c:	31 c3                	xor    ebx,eax
1000692e:	89 df                	mov    edi,ebx
10006930:	c1 ef 06             	shr    edi,0x6
10006933:	89 dd                	mov    ebp,ebx
10006935:	c1 ed 0e             	shr    ebp,0xe
10006938:	89 d8                	mov    eax,ebx
1000693a:	c1 e8 16             	shr    eax,0x16
1000693d:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
10006944:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000694a:	81 e7 fc 03 00 00    	and    edi,0x3fc
10006950:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10006956:	25 fc 03 00 00       	and    eax,0x3fc
1000695b:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
1000695f:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
10006966:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
1000696d:	33 94 24 74 10 00 00 	xor    edx,DWORD PTR [esp+0x1074]
10006974:	03 84 34 58 0c 00 00 	add    eax,DWORD PTR [esp+esi*1+0xc58]
1000697b:	31 c2                	xor    edx,eax
1000697d:	89 d7                	mov    edi,edx
1000697f:	c1 ef 06             	shr    edi,0x6
10006982:	89 d5                	mov    ebp,edx
10006984:	c1 ed 0e             	shr    ebp,0xe
10006987:	89 d0                	mov    eax,edx
10006989:	c1 e8 16             	shr    eax,0x16
1000698c:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10006993:	81 e6 fc 03 00 00    	and    esi,0x3fc
10006999:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000699f:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100069a5:	25 fc 03 00 00       	and    eax,0x3fc
100069aa:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
100069ae:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
100069b5:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
100069bc:	33 9c 24 78 10 00 00 	xor    ebx,DWORD PTR [esp+0x1078]
100069c3:	03 84 34 58 0c 00 00 	add    eax,DWORD PTR [esp+esi*1+0xc58]
100069ca:	31 c3                	xor    ebx,eax
100069cc:	89 df                	mov    edi,ebx
100069ce:	c1 ef 06             	shr    edi,0x6
100069d1:	89 dd                	mov    ebp,ebx
100069d3:	c1 ed 0e             	shr    ebp,0xe
100069d6:	89 d8                	mov    eax,ebx
100069d8:	c1 e8 16             	shr    eax,0x16
100069db:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
100069e2:	81 e6 fc 03 00 00    	and    esi,0x3fc
100069e8:	81 e7 fc 03 00 00    	and    edi,0x3fc
100069ee:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100069f4:	25 fc 03 00 00       	and    eax,0x3fc
100069f9:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
100069fd:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
10006a04:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
10006a0b:	33 94 24 7c 10 00 00 	xor    edx,DWORD PTR [esp+0x107c]
10006a12:	03 84 34 58 0c 00 00 	add    eax,DWORD PTR [esp+esi*1+0xc58]
10006a19:	31 c2                	xor    edx,eax
10006a1b:	89 d7                	mov    edi,edx
10006a1d:	c1 ef 06             	shr    edi,0x6
10006a20:	89 d5                	mov    ebp,edx
10006a22:	c1 ed 0e             	shr    ebp,0xe
10006a25:	89 d0                	mov    eax,edx
10006a27:	c1 e8 16             	shr    eax,0x16
10006a2a:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10006a31:	81 e6 fc 03 00 00    	and    esi,0x3fc
10006a37:	81 e7 fc 03 00 00    	and    edi,0x3fc
10006a3d:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10006a43:	25 fc 03 00 00       	and    eax,0x3fc
10006a48:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10006a4c:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
10006a53:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
10006a5a:	33 9c 24 80 10 00 00 	xor    ebx,DWORD PTR [esp+0x1080]
10006a61:	03 84 34 58 0c 00 00 	add    eax,DWORD PTR [esp+esi*1+0xc58]
10006a68:	31 c3                	xor    ebx,eax
10006a6a:	89 df                	mov    edi,ebx
10006a6c:	c1 ef 06             	shr    edi,0x6
10006a6f:	89 dd                	mov    ebp,ebx
10006a71:	c1 ed 0e             	shr    ebp,0xe
10006a74:	89 d8                	mov    eax,ebx
10006a76:	c1 e8 16             	shr    eax,0x16
10006a79:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
10006a80:	81 e6 fc 03 00 00    	and    esi,0x3fc
10006a86:	81 e7 fc 03 00 00    	and    edi,0x3fc
10006a8c:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10006a92:	25 fc 03 00 00       	and    eax,0x3fc
10006a97:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10006a9b:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
10006aa2:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
10006aa9:	33 94 24 84 10 00 00 	xor    edx,DWORD PTR [esp+0x1084]
10006ab0:	03 84 34 58 0c 00 00 	add    eax,DWORD PTR [esp+esi*1+0xc58]
10006ab7:	31 d0                	xor    eax,edx
10006ab9:	89 c7                	mov    edi,eax
10006abb:	c1 ef 06             	shr    edi,0x6
10006abe:	89 c5                	mov    ebp,eax
10006ac0:	c1 ed 0e             	shr    ebp,0xe
10006ac3:	89 c2                	mov    edx,eax
10006ac5:	c1 ea 16             	shr    edx,0x16
10006ac8:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10006acf:	81 e6 fc 03 00 00    	and    esi,0x3fc
10006ad5:	81 e7 fc 03 00 00    	and    edi,0x3fc
10006adb:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10006ae1:	81 e2 fc 03 00 00    	and    edx,0x3fc
10006ae7:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10006aeb:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10006af2:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10006af9:	33 9c 24 88 10 00 00 	xor    ebx,DWORD PTR [esp+0x1088]
10006b00:	03 94 34 58 0c 00 00 	add    edx,DWORD PTR [esp+esi*1+0xc58]
10006b07:	31 d3                	xor    ebx,edx
10006b09:	89 df                	mov    edi,ebx
10006b0b:	c1 ef 06             	shr    edi,0x6
10006b0e:	89 dd                	mov    ebp,ebx
10006b10:	c1 ed 0e             	shr    ebp,0xe
10006b13:	89 da                	mov    edx,ebx
10006b15:	c1 ea 16             	shr    edx,0x16
10006b18:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
10006b1f:	81 e6 fc 03 00 00    	and    esi,0x3fc
10006b25:	81 e7 fc 03 00 00    	and    edi,0x3fc
10006b2b:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10006b31:	81 e2 fc 03 00 00    	and    edx,0x3fc
10006b37:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10006b3b:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10006b42:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10006b49:	33 84 24 8c 10 00 00 	xor    eax,DWORD PTR [esp+0x108c]
10006b50:	03 94 34 58 0c 00 00 	add    edx,DWORD PTR [esp+esi*1+0xc58]
10006b57:	31 d0                	xor    eax,edx
10006b59:	89 c7                	mov    edi,eax
10006b5b:	c1 ef 06             	shr    edi,0x6
10006b5e:	89 c5                	mov    ebp,eax
10006b60:	c1 ed 0e             	shr    ebp,0xe
10006b63:	89 c2                	mov    edx,eax
10006b65:	c1 ea 16             	shr    edx,0x16
10006b68:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10006b6f:	81 e6 fc 03 00 00    	and    esi,0x3fc
10006b75:	81 e7 fc 03 00 00    	and    edi,0x3fc
10006b7b:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10006b81:	81 e2 fc 03 00 00    	and    edx,0x3fc
10006b87:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10006b8b:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10006b92:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10006b99:	33 9c 24 90 10 00 00 	xor    ebx,DWORD PTR [esp+0x1090]
10006ba0:	03 94 34 58 0c 00 00 	add    edx,DWORD PTR [esp+esi*1+0xc58]
10006ba7:	31 d3                	xor    ebx,edx
10006ba9:	89 df                	mov    edi,ebx
10006bab:	c1 ef 06             	shr    edi,0x6
10006bae:	89 dd                	mov    ebp,ebx
10006bb0:	c1 ed 0e             	shr    ebp,0xe
10006bb3:	89 da                	mov    edx,ebx
10006bb5:	c1 ea 16             	shr    edx,0x16
10006bb8:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
10006bbf:	81 e6 fc 03 00 00    	and    esi,0x3fc
10006bc5:	81 e7 fc 03 00 00    	and    edi,0x3fc
10006bcb:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10006bd1:	81 e2 fc 03 00 00    	and    edx,0x3fc
10006bd7:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10006bdb:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10006be2:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10006be9:	33 84 24 94 10 00 00 	xor    eax,DWORD PTR [esp+0x1094]
10006bf0:	03 94 34 58 0c 00 00 	add    edx,DWORD PTR [esp+esi*1+0xc58]
10006bf7:	31 d0                	xor    eax,edx
10006bf9:	89 c7                	mov    edi,eax
10006bfb:	c1 ef 06             	shr    edi,0x6
10006bfe:	89 c5                	mov    ebp,eax
10006c00:	c1 ed 0e             	shr    ebp,0xe
10006c03:	89 c2                	mov    edx,eax
10006c05:	c1 ea 16             	shr    edx,0x16
10006c08:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10006c0f:	81 e6 fc 03 00 00    	and    esi,0x3fc
10006c15:	81 e7 fc 03 00 00    	and    edi,0x3fc
10006c1b:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10006c21:	81 e2 fc 03 00 00    	and    edx,0x3fc
10006c27:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10006c2b:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10006c32:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10006c39:	33 9c 24 98 10 00 00 	xor    ebx,DWORD PTR [esp+0x1098]
10006c40:	03 94 34 58 0c 00 00 	add    edx,DWORD PTR [esp+esi*1+0xc58]
10006c47:	31 d3                	xor    ebx,edx
10006c49:	33 84 24 9c 10 00 00 	xor    eax,DWORD PTR [esp+0x109c]
10006c50:	89 41 f8             	mov    DWORD PTR [ecx-0x8],eax
10006c53:	89 59 fc             	mov    DWORD PTR [ecx-0x4],ebx
10006c56:	8d 94 24 58 10 00 00 	lea    edx,[esp+0x1058]
10006c5d:	39 d1                	cmp    ecx,edx
10006c5f:	0f 85 a4 f5 ff ff    	jne    10006209 <_crypt_blowfish_rn+0x695>
10006c65:	8b 84 24 a0 10 00 00 	mov    eax,DWORD PTR [esp+0x10a0]
10006c6c:	31 84 24 58 10 00 00 	xor    DWORD PTR [esp+0x1058],eax
10006c73:	8b 84 24 a4 10 00 00 	mov    eax,DWORD PTR [esp+0x10a4]
10006c7a:	31 84 24 5c 10 00 00 	xor    DWORD PTR [esp+0x105c],eax
10006c81:	8b 84 24 a8 10 00 00 	mov    eax,DWORD PTR [esp+0x10a8]
10006c88:	31 84 24 60 10 00 00 	xor    DWORD PTR [esp+0x1060],eax
10006c8f:	8b 84 24 ac 10 00 00 	mov    eax,DWORD PTR [esp+0x10ac]
10006c96:	31 84 24 64 10 00 00 	xor    DWORD PTR [esp+0x1064],eax
10006c9d:	8b 84 24 b0 10 00 00 	mov    eax,DWORD PTR [esp+0x10b0]
10006ca4:	31 84 24 68 10 00 00 	xor    DWORD PTR [esp+0x1068],eax
10006cab:	8b 84 24 b4 10 00 00 	mov    eax,DWORD PTR [esp+0x10b4]
10006cb2:	31 84 24 6c 10 00 00 	xor    DWORD PTR [esp+0x106c],eax
10006cb9:	8b 84 24 b8 10 00 00 	mov    eax,DWORD PTR [esp+0x10b8]
10006cc0:	31 84 24 70 10 00 00 	xor    DWORD PTR [esp+0x1070],eax
10006cc7:	8b 84 24 bc 10 00 00 	mov    eax,DWORD PTR [esp+0x10bc]
10006cce:	31 84 24 74 10 00 00 	xor    DWORD PTR [esp+0x1074],eax
10006cd5:	8b 84 24 c0 10 00 00 	mov    eax,DWORD PTR [esp+0x10c0]
10006cdc:	31 84 24 78 10 00 00 	xor    DWORD PTR [esp+0x1078],eax
10006ce3:	8b 84 24 c4 10 00 00 	mov    eax,DWORD PTR [esp+0x10c4]
10006cea:	31 84 24 7c 10 00 00 	xor    DWORD PTR [esp+0x107c],eax
10006cf1:	8b 84 24 c8 10 00 00 	mov    eax,DWORD PTR [esp+0x10c8]
10006cf8:	31 84 24 80 10 00 00 	xor    DWORD PTR [esp+0x1080],eax
10006cff:	8b 84 24 cc 10 00 00 	mov    eax,DWORD PTR [esp+0x10cc]
10006d06:	31 84 24 84 10 00 00 	xor    DWORD PTR [esp+0x1084],eax
10006d0d:	8b 84 24 d0 10 00 00 	mov    eax,DWORD PTR [esp+0x10d0]
10006d14:	31 84 24 88 10 00 00 	xor    DWORD PTR [esp+0x1088],eax
10006d1b:	8b 84 24 d4 10 00 00 	mov    eax,DWORD PTR [esp+0x10d4]
10006d22:	31 84 24 8c 10 00 00 	xor    DWORD PTR [esp+0x108c],eax
10006d29:	8b 84 24 d8 10 00 00 	mov    eax,DWORD PTR [esp+0x10d8]
10006d30:	31 84 24 90 10 00 00 	xor    DWORD PTR [esp+0x1090],eax
10006d37:	8b 84 24 dc 10 00 00 	mov    eax,DWORD PTR [esp+0x10dc]
10006d3e:	31 84 24 94 10 00 00 	xor    DWORD PTR [esp+0x1094],eax
10006d45:	8b 84 24 e0 10 00 00 	mov    eax,DWORD PTR [esp+0x10e0]
10006d4c:	31 84 24 98 10 00 00 	xor    DWORD PTR [esp+0x1098],eax
10006d53:	8b 84 24 e4 10 00 00 	mov    eax,DWORD PTR [esp+0x10e4]
10006d5a:	31 84 24 9c 10 00 00 	xor    DWORD PTR [esp+0x109c],eax
10006d61:	8d 9c 24 58 10 00 00 	lea    ebx,[esp+0x1058]
10006d68:	b9 00 00 00 00       	mov    ecx,0x0
10006d6d:	b8 00 00 00 00       	mov    eax,0x0
10006d72:	83 c3 08             	add    ebx,0x8
10006d75:	33 84 24 58 10 00 00 	xor    eax,DWORD PTR [esp+0x1058]
10006d7c:	89 c7                	mov    edi,eax
10006d7e:	c1 ef 06             	shr    edi,0x6
10006d81:	89 c5                	mov    ebp,eax
10006d83:	c1 ed 0e             	shr    ebp,0xe
10006d86:	89 c2                	mov    edx,eax
10006d88:	c1 ea 16             	shr    edx,0x16
10006d8b:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10006d92:	81 e6 fc 03 00 00    	and    esi,0x3fc
10006d98:	81 e7 fc 03 00 00    	and    edi,0x3fc
10006d9e:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10006da4:	81 e2 fc 03 00 00    	and    edx,0x3fc
10006daa:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10006dae:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10006db5:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10006dbc:	03 94 34 58 0c 00 00 	add    edx,DWORD PTR [esp+esi*1+0xc58]
10006dc3:	33 94 24 5c 10 00 00 	xor    edx,DWORD PTR [esp+0x105c]
10006dca:	31 ca                	xor    edx,ecx
10006dcc:	89 d5                	mov    ebp,edx
10006dce:	c1 ed 06             	shr    ebp,0x6
10006dd1:	89 d6                	mov    esi,edx
10006dd3:	c1 ee 0e             	shr    esi,0xe
10006dd6:	89 d1                	mov    ecx,edx
10006dd8:	c1 e9 16             	shr    ecx,0x16
10006ddb:	8d 3c 95 00 00 00 00 	lea    edi,[edx*4+0x0]
10006de2:	81 e7 fc 03 00 00    	and    edi,0x3fc
10006de8:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10006dee:	81 e6 fc 03 00 00    	and    esi,0x3fc
10006df4:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10006dfa:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10006dfe:	03 8c 34 58 04 00 00 	add    ecx,DWORD PTR [esp+esi*1+0x458]
10006e05:	33 8c 2c 58 08 00 00 	xor    ecx,DWORD PTR [esp+ebp*1+0x858]
10006e0c:	33 84 24 60 10 00 00 	xor    eax,DWORD PTR [esp+0x1060]
10006e13:	03 8c 3c 58 0c 00 00 	add    ecx,DWORD PTR [esp+edi*1+0xc58]
10006e1a:	31 c8                	xor    eax,ecx
10006e1c:	89 c7                	mov    edi,eax
10006e1e:	c1 ef 06             	shr    edi,0x6
10006e21:	89 c5                	mov    ebp,eax
10006e23:	c1 ed 0e             	shr    ebp,0xe
10006e26:	89 c1                	mov    ecx,eax
10006e28:	c1 e9 16             	shr    ecx,0x16
10006e2b:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10006e32:	81 e6 fc 03 00 00    	and    esi,0x3fc
10006e38:	81 e7 fc 03 00 00    	and    edi,0x3fc
10006e3e:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10006e44:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10006e4a:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10006e4e:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10006e55:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10006e5c:	33 94 24 64 10 00 00 	xor    edx,DWORD PTR [esp+0x1064]
10006e63:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10006e6a:	31 d1                	xor    ecx,edx
10006e6c:	89 cd                	mov    ebp,ecx
10006e6e:	c1 ed 06             	shr    ebp,0x6
10006e71:	89 ce                	mov    esi,ecx
10006e73:	c1 ee 0e             	shr    esi,0xe
10006e76:	89 ca                	mov    edx,ecx
10006e78:	c1 ea 16             	shr    edx,0x16
10006e7b:	8d 3c 8d 00 00 00 00 	lea    edi,[ecx*4+0x0]
10006e82:	81 e7 fc 03 00 00    	and    edi,0x3fc
10006e88:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10006e8e:	81 e6 fc 03 00 00    	and    esi,0x3fc
10006e94:	81 e2 fc 03 00 00    	and    edx,0x3fc
10006e9a:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10006e9e:	03 94 34 58 04 00 00 	add    edx,DWORD PTR [esp+esi*1+0x458]
10006ea5:	33 94 2c 58 08 00 00 	xor    edx,DWORD PTR [esp+ebp*1+0x858]
10006eac:	33 84 24 68 10 00 00 	xor    eax,DWORD PTR [esp+0x1068]
10006eb3:	89 d6                	mov    esi,edx
10006eb5:	03 b4 3c 58 0c 00 00 	add    esi,DWORD PTR [esp+edi*1+0xc58]
10006ebc:	31 c6                	xor    esi,eax
10006ebe:	89 f2                	mov    edx,esi
10006ec0:	c1 ea 06             	shr    edx,0x6
10006ec3:	89 f5                	mov    ebp,esi
10006ec5:	c1 ed 0e             	shr    ebp,0xe
10006ec8:	89 f0                	mov    eax,esi
10006eca:	c1 e8 16             	shr    eax,0x16
10006ecd:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
10006ed4:	81 e7 fc 03 00 00    	and    edi,0x3fc
10006eda:	81 e2 fc 03 00 00    	and    edx,0x3fc
10006ee0:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10006ee6:	25 fc 03 00 00       	and    eax,0x3fc
10006eeb:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10006eef:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
10006ef6:	33 84 14 58 08 00 00 	xor    eax,DWORD PTR [esp+edx*1+0x858]
10006efd:	33 8c 24 6c 10 00 00 	xor    ecx,DWORD PTR [esp+0x106c]
10006f04:	03 84 3c 58 0c 00 00 	add    eax,DWORD PTR [esp+edi*1+0xc58]
10006f0b:	31 c8                	xor    eax,ecx
10006f0d:	89 c7                	mov    edi,eax
10006f0f:	c1 ef 06             	shr    edi,0x6
10006f12:	89 c5                	mov    ebp,eax
10006f14:	c1 ed 0e             	shr    ebp,0xe
10006f17:	89 c2                	mov    edx,eax
10006f19:	c1 ea 16             	shr    edx,0x16
10006f1c:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
10006f23:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10006f29:	81 e7 fc 03 00 00    	and    edi,0x3fc
10006f2f:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10006f35:	81 e2 fc 03 00 00    	and    edx,0x3fc
10006f3b:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10006f3f:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10006f46:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10006f4d:	33 b4 24 70 10 00 00 	xor    esi,DWORD PTR [esp+0x1070]
10006f54:	03 94 0c 58 0c 00 00 	add    edx,DWORD PTR [esp+ecx*1+0xc58]
10006f5b:	31 f2                	xor    edx,esi
10006f5d:	89 d7                	mov    edi,edx
10006f5f:	c1 ef 06             	shr    edi,0x6
10006f62:	89 d5                	mov    ebp,edx
10006f64:	c1 ed 0e             	shr    ebp,0xe
10006f67:	89 d1                	mov    ecx,edx
10006f69:	c1 e9 16             	shr    ecx,0x16
10006f6c:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10006f73:	81 e6 fc 03 00 00    	and    esi,0x3fc
10006f79:	81 e7 fc 03 00 00    	and    edi,0x3fc
10006f7f:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10006f85:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10006f8b:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10006f8f:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10006f96:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10006f9d:	33 84 24 74 10 00 00 	xor    eax,DWORD PTR [esp+0x1074]
10006fa4:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10006fab:	31 c8                	xor    eax,ecx
10006fad:	89 c7                	mov    edi,eax
10006faf:	c1 ef 06             	shr    edi,0x6
10006fb2:	89 c5                	mov    ebp,eax
10006fb4:	c1 ed 0e             	shr    ebp,0xe
10006fb7:	89 c1                	mov    ecx,eax
10006fb9:	c1 e9 16             	shr    ecx,0x16
10006fbc:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10006fc3:	81 e6 fc 03 00 00    	and    esi,0x3fc
10006fc9:	81 e7 fc 03 00 00    	and    edi,0x3fc
10006fcf:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10006fd5:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10006fdb:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10006fdf:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10006fe6:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10006fed:	33 94 24 78 10 00 00 	xor    edx,DWORD PTR [esp+0x1078]
10006ff4:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10006ffb:	31 ca                	xor    edx,ecx
10006ffd:	89 d7                	mov    edi,edx
10006fff:	c1 ef 06             	shr    edi,0x6
10007002:	89 d5                	mov    ebp,edx
10007004:	c1 ed 0e             	shr    ebp,0xe
10007007:	89 d1                	mov    ecx,edx
10007009:	c1 e9 16             	shr    ecx,0x16
1000700c:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10007013:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007019:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000701f:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007025:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000702b:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
1000702f:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10007036:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
1000703d:	33 84 24 7c 10 00 00 	xor    eax,DWORD PTR [esp+0x107c]
10007044:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
1000704b:	31 c8                	xor    eax,ecx
1000704d:	89 c7                	mov    edi,eax
1000704f:	c1 ef 06             	shr    edi,0x6
10007052:	89 c5                	mov    ebp,eax
10007054:	c1 ed 0e             	shr    ebp,0xe
10007057:	89 c1                	mov    ecx,eax
10007059:	c1 e9 16             	shr    ecx,0x16
1000705c:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10007063:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007069:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000706f:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007075:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000707b:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
1000707f:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10007086:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
1000708d:	33 94 24 80 10 00 00 	xor    edx,DWORD PTR [esp+0x1080]
10007094:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
1000709b:	31 ca                	xor    edx,ecx
1000709d:	89 d7                	mov    edi,edx
1000709f:	c1 ef 06             	shr    edi,0x6
100070a2:	89 d5                	mov    ebp,edx
100070a4:	c1 ed 0e             	shr    ebp,0xe
100070a7:	89 d1                	mov    ecx,edx
100070a9:	c1 e9 16             	shr    ecx,0x16
100070ac:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
100070b3:	81 e6 fc 03 00 00    	and    esi,0x3fc
100070b9:	81 e7 fc 03 00 00    	and    edi,0x3fc
100070bf:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100070c5:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100070cb:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
100070cf:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
100070d6:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
100070dd:	33 84 24 84 10 00 00 	xor    eax,DWORD PTR [esp+0x1084]
100070e4:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
100070eb:	31 c8                	xor    eax,ecx
100070ed:	89 c7                	mov    edi,eax
100070ef:	c1 ef 06             	shr    edi,0x6
100070f2:	89 c5                	mov    ebp,eax
100070f4:	c1 ed 0e             	shr    ebp,0xe
100070f7:	89 c1                	mov    ecx,eax
100070f9:	c1 e9 16             	shr    ecx,0x16
100070fc:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10007103:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007109:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000710f:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007115:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000711b:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
1000711f:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10007126:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
1000712d:	33 94 24 88 10 00 00 	xor    edx,DWORD PTR [esp+0x1088]
10007134:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
1000713b:	31 ca                	xor    edx,ecx
1000713d:	89 d7                	mov    edi,edx
1000713f:	c1 ef 06             	shr    edi,0x6
10007142:	89 d5                	mov    ebp,edx
10007144:	c1 ed 0e             	shr    ebp,0xe
10007147:	89 d1                	mov    ecx,edx
10007149:	c1 e9 16             	shr    ecx,0x16
1000714c:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10007153:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007159:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000715f:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007165:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000716b:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
1000716f:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10007176:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
1000717d:	33 84 24 8c 10 00 00 	xor    eax,DWORD PTR [esp+0x108c]
10007184:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
1000718b:	31 c8                	xor    eax,ecx
1000718d:	89 c7                	mov    edi,eax
1000718f:	c1 ef 06             	shr    edi,0x6
10007192:	89 c5                	mov    ebp,eax
10007194:	c1 ed 0e             	shr    ebp,0xe
10007197:	89 c1                	mov    ecx,eax
10007199:	c1 e9 16             	shr    ecx,0x16
1000719c:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
100071a3:	81 e6 fc 03 00 00    	and    esi,0x3fc
100071a9:	81 e7 fc 03 00 00    	and    edi,0x3fc
100071af:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100071b5:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100071bb:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
100071bf:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
100071c6:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
100071cd:	33 94 24 90 10 00 00 	xor    edx,DWORD PTR [esp+0x1090]
100071d4:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
100071db:	31 ca                	xor    edx,ecx
100071dd:	89 d7                	mov    edi,edx
100071df:	c1 ef 06             	shr    edi,0x6
100071e2:	89 d5                	mov    ebp,edx
100071e4:	c1 ed 0e             	shr    ebp,0xe
100071e7:	89 d6                	mov    esi,edx
100071e9:	c1 ee 16             	shr    esi,0x16
100071ec:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
100071f3:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100071f9:	81 e7 fc 03 00 00    	and    edi,0x3fc
100071ff:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007205:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000720b:	8b 74 34 58          	mov    esi,DWORD PTR [esp+esi*1+0x58]
1000720f:	03 b4 2c 58 04 00 00 	add    esi,DWORD PTR [esp+ebp*1+0x458]
10007216:	33 b4 3c 58 08 00 00 	xor    esi,DWORD PTR [esp+edi*1+0x858]
1000721d:	33 84 24 94 10 00 00 	xor    eax,DWORD PTR [esp+0x1094]
10007224:	03 b4 0c 58 0c 00 00 	add    esi,DWORD PTR [esp+ecx*1+0xc58]
1000722b:	31 f0                	xor    eax,esi
1000722d:	89 c5                	mov    ebp,eax
1000722f:	c1 ed 06             	shr    ebp,0x6
10007232:	89 c1                	mov    ecx,eax
10007234:	c1 e9 0e             	shr    ecx,0xe
10007237:	89 c6                	mov    esi,eax
10007239:	c1 ee 16             	shr    esi,0x16
1000723c:	8d 3c 85 00 00 00 00 	lea    edi,[eax*4+0x0]
10007243:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007249:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000724f:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10007255:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000725b:	8b 74 34 58          	mov    esi,DWORD PTR [esp+esi*1+0x58]
1000725f:	03 b4 0c 58 04 00 00 	add    esi,DWORD PTR [esp+ecx*1+0x458]
10007266:	33 b4 2c 58 08 00 00 	xor    esi,DWORD PTR [esp+ebp*1+0x858]
1000726d:	33 94 24 98 10 00 00 	xor    edx,DWORD PTR [esp+0x1098]
10007274:	03 b4 3c 58 0c 00 00 	add    esi,DWORD PTR [esp+edi*1+0xc58]
1000727b:	89 f1                	mov    ecx,esi
1000727d:	31 d1                	xor    ecx,edx
1000727f:	33 84 24 9c 10 00 00 	xor    eax,DWORD PTR [esp+0x109c]
10007286:	89 43 f8             	mov    DWORD PTR [ebx-0x8],eax
10007289:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
1000728c:	8d b4 24 a0 10 00 00 	lea    esi,[esp+0x10a0]
10007293:	39 f3                	cmp    ebx,esi
10007295:	0f 85 d7 fa ff ff    	jne    10006d72 <_crypt_blowfish_rn+0x11fe>
1000729b:	8d 5c 24 58          	lea    ebx,[esp+0x58]
1000729f:	83 c3 08             	add    ebx,0x8
100072a2:	33 84 24 58 10 00 00 	xor    eax,DWORD PTR [esp+0x1058]
100072a9:	89 c7                	mov    edi,eax
100072ab:	c1 ef 06             	shr    edi,0x6
100072ae:	89 c5                	mov    ebp,eax
100072b0:	c1 ed 0e             	shr    ebp,0xe
100072b3:	89 c2                	mov    edx,eax
100072b5:	c1 ea 16             	shr    edx,0x16
100072b8:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
100072bf:	81 e6 fc 03 00 00    	and    esi,0x3fc
100072c5:	81 e7 fc 03 00 00    	and    edi,0x3fc
100072cb:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100072d1:	81 e2 fc 03 00 00    	and    edx,0x3fc
100072d7:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
100072db:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
100072e2:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
100072e9:	03 94 34 58 0c 00 00 	add    edx,DWORD PTR [esp+esi*1+0xc58]
100072f0:	33 94 24 5c 10 00 00 	xor    edx,DWORD PTR [esp+0x105c]
100072f7:	31 ca                	xor    edx,ecx
100072f9:	89 d7                	mov    edi,edx
100072fb:	c1 ef 06             	shr    edi,0x6
100072fe:	89 d5                	mov    ebp,edx
10007300:	c1 ed 0e             	shr    ebp,0xe
10007303:	89 d1                	mov    ecx,edx
10007305:	c1 e9 16             	shr    ecx,0x16
10007308:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
1000730f:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007315:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000731b:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007321:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10007327:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
1000732b:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10007332:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10007339:	33 84 24 60 10 00 00 	xor    eax,DWORD PTR [esp+0x1060]
10007340:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10007347:	31 c1                	xor    ecx,eax
10007349:	89 cd                	mov    ebp,ecx
1000734b:	c1 ed 06             	shr    ebp,0x6
1000734e:	89 c8                	mov    eax,ecx
10007350:	c1 e8 0e             	shr    eax,0xe
10007353:	89 ce                	mov    esi,ecx
10007355:	c1 ee 16             	shr    esi,0x16
10007358:	8d 3c 8d 00 00 00 00 	lea    edi,[ecx*4+0x0]
1000735f:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007365:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000736b:	25 fc 03 00 00       	and    eax,0x3fc
10007370:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007376:	8b 74 34 58          	mov    esi,DWORD PTR [esp+esi*1+0x58]
1000737a:	03 b4 04 58 04 00 00 	add    esi,DWORD PTR [esp+eax*1+0x458]
10007381:	33 b4 2c 58 08 00 00 	xor    esi,DWORD PTR [esp+ebp*1+0x858]
10007388:	33 94 24 64 10 00 00 	xor    edx,DWORD PTR [esp+0x1064]
1000738f:	03 b4 3c 58 0c 00 00 	add    esi,DWORD PTR [esp+edi*1+0xc58]
10007396:	31 d6                	xor    esi,edx
10007398:	89 f5                	mov    ebp,esi
1000739a:	c1 ed 06             	shr    ebp,0x6
1000739d:	89 f2                	mov    edx,esi
1000739f:	c1 ea 0e             	shr    edx,0xe
100073a2:	89 f0                	mov    eax,esi
100073a4:	c1 e8 16             	shr    eax,0x16
100073a7:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
100073ae:	81 e7 fc 03 00 00    	and    edi,0x3fc
100073b4:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100073ba:	81 e2 fc 03 00 00    	and    edx,0x3fc
100073c0:	25 fc 03 00 00       	and    eax,0x3fc
100073c5:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
100073c9:	03 84 14 58 04 00 00 	add    eax,DWORD PTR [esp+edx*1+0x458]
100073d0:	33 84 2c 58 08 00 00 	xor    eax,DWORD PTR [esp+ebp*1+0x858]
100073d7:	33 8c 24 68 10 00 00 	xor    ecx,DWORD PTR [esp+0x1068]
100073de:	03 84 3c 58 0c 00 00 	add    eax,DWORD PTR [esp+edi*1+0xc58]
100073e5:	31 c1                	xor    ecx,eax
100073e7:	89 ca                	mov    edx,ecx
100073e9:	c1 ea 06             	shr    edx,0x6
100073ec:	89 cd                	mov    ebp,ecx
100073ee:	c1 ed 0e             	shr    ebp,0xe
100073f1:	89 c8                	mov    eax,ecx
100073f3:	c1 e8 16             	shr    eax,0x16
100073f6:	8d 3c 8d 00 00 00 00 	lea    edi,[ecx*4+0x0]
100073fd:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007403:	81 e2 fc 03 00 00    	and    edx,0x3fc
10007409:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000740f:	25 fc 03 00 00       	and    eax,0x3fc
10007414:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10007418:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
1000741f:	33 84 14 58 08 00 00 	xor    eax,DWORD PTR [esp+edx*1+0x858]
10007426:	33 b4 24 6c 10 00 00 	xor    esi,DWORD PTR [esp+0x106c]
1000742d:	03 84 3c 58 0c 00 00 	add    eax,DWORD PTR [esp+edi*1+0xc58]
10007434:	31 f0                	xor    eax,esi
10007436:	89 c7                	mov    edi,eax
10007438:	c1 ef 06             	shr    edi,0x6
1000743b:	89 c5                	mov    ebp,eax
1000743d:	c1 ed 0e             	shr    ebp,0xe
10007440:	89 c2                	mov    edx,eax
10007442:	c1 ea 16             	shr    edx,0x16
10007445:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
1000744c:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007452:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007458:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000745e:	81 e2 fc 03 00 00    	and    edx,0x3fc
10007464:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10007468:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
1000746f:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10007476:	33 8c 24 70 10 00 00 	xor    ecx,DWORD PTR [esp+0x1070]
1000747d:	03 94 34 58 0c 00 00 	add    edx,DWORD PTR [esp+esi*1+0xc58]
10007484:	31 ca                	xor    edx,ecx
10007486:	89 d7                	mov    edi,edx
10007488:	c1 ef 06             	shr    edi,0x6
1000748b:	89 d5                	mov    ebp,edx
1000748d:	c1 ed 0e             	shr    ebp,0xe
10007490:	89 d1                	mov    ecx,edx
10007492:	c1 e9 16             	shr    ecx,0x16
10007495:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
1000749c:	81 e6 fc 03 00 00    	and    esi,0x3fc
100074a2:	81 e7 fc 03 00 00    	and    edi,0x3fc
100074a8:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100074ae:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100074b4:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
100074b8:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
100074bf:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
100074c6:	33 84 24 74 10 00 00 	xor    eax,DWORD PTR [esp+0x1074]
100074cd:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
100074d4:	31 c8                	xor    eax,ecx
100074d6:	89 c7                	mov    edi,eax
100074d8:	c1 ef 06             	shr    edi,0x6
100074db:	89 c5                	mov    ebp,eax
100074dd:	c1 ed 0e             	shr    ebp,0xe
100074e0:	89 c1                	mov    ecx,eax
100074e2:	c1 e9 16             	shr    ecx,0x16
100074e5:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
100074ec:	81 e6 fc 03 00 00    	and    esi,0x3fc
100074f2:	81 e7 fc 03 00 00    	and    edi,0x3fc
100074f8:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100074fe:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10007504:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10007508:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
1000750f:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10007516:	33 94 24 78 10 00 00 	xor    edx,DWORD PTR [esp+0x1078]
1000751d:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10007524:	31 ca                	xor    edx,ecx
10007526:	89 d7                	mov    edi,edx
10007528:	c1 ef 06             	shr    edi,0x6
1000752b:	89 d5                	mov    ebp,edx
1000752d:	c1 ed 0e             	shr    ebp,0xe
10007530:	89 d1                	mov    ecx,edx
10007532:	c1 e9 16             	shr    ecx,0x16
10007535:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
1000753c:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007542:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007548:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000754e:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10007554:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10007558:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
1000755f:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10007566:	33 84 24 7c 10 00 00 	xor    eax,DWORD PTR [esp+0x107c]
1000756d:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10007574:	31 c8                	xor    eax,ecx
10007576:	89 c7                	mov    edi,eax
10007578:	c1 ef 06             	shr    edi,0x6
1000757b:	89 c5                	mov    ebp,eax
1000757d:	c1 ed 0e             	shr    ebp,0xe
10007580:	89 c1                	mov    ecx,eax
10007582:	c1 e9 16             	shr    ecx,0x16
10007585:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
1000758c:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007592:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007598:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000759e:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100075a4:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
100075a8:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
100075af:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
100075b6:	33 94 24 80 10 00 00 	xor    edx,DWORD PTR [esp+0x1080]
100075bd:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
100075c4:	31 ca                	xor    edx,ecx
100075c6:	89 d7                	mov    edi,edx
100075c8:	c1 ef 06             	shr    edi,0x6
100075cb:	89 d5                	mov    ebp,edx
100075cd:	c1 ed 0e             	shr    ebp,0xe
100075d0:	89 d1                	mov    ecx,edx
100075d2:	c1 e9 16             	shr    ecx,0x16
100075d5:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
100075dc:	81 e6 fc 03 00 00    	and    esi,0x3fc
100075e2:	81 e7 fc 03 00 00    	and    edi,0x3fc
100075e8:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100075ee:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100075f4:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
100075f8:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
100075ff:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10007606:	33 84 24 84 10 00 00 	xor    eax,DWORD PTR [esp+0x1084]
1000760d:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10007614:	31 c8                	xor    eax,ecx
10007616:	89 c7                	mov    edi,eax
10007618:	c1 ef 06             	shr    edi,0x6
1000761b:	89 c5                	mov    ebp,eax
1000761d:	c1 ed 0e             	shr    ebp,0xe
10007620:	89 c1                	mov    ecx,eax
10007622:	c1 e9 16             	shr    ecx,0x16
10007625:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
1000762c:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007632:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007638:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000763e:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10007644:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10007648:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
1000764f:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10007656:	33 94 24 88 10 00 00 	xor    edx,DWORD PTR [esp+0x1088]
1000765d:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10007664:	31 ca                	xor    edx,ecx
10007666:	89 d7                	mov    edi,edx
10007668:	c1 ef 06             	shr    edi,0x6
1000766b:	89 d5                	mov    ebp,edx
1000766d:	c1 ed 0e             	shr    ebp,0xe
10007670:	89 d1                	mov    ecx,edx
10007672:	c1 e9 16             	shr    ecx,0x16
10007675:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
1000767c:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007682:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007688:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000768e:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10007694:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10007698:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
1000769f:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
100076a6:	33 84 24 8c 10 00 00 	xor    eax,DWORD PTR [esp+0x108c]
100076ad:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
100076b4:	31 c8                	xor    eax,ecx
100076b6:	89 c7                	mov    edi,eax
100076b8:	c1 ef 06             	shr    edi,0x6
100076bb:	89 c5                	mov    ebp,eax
100076bd:	c1 ed 0e             	shr    ebp,0xe
100076c0:	89 c1                	mov    ecx,eax
100076c2:	c1 e9 16             	shr    ecx,0x16
100076c5:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
100076cc:	81 e6 fc 03 00 00    	and    esi,0x3fc
100076d2:	81 e7 fc 03 00 00    	and    edi,0x3fc
100076d8:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100076de:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100076e4:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
100076e8:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
100076ef:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
100076f6:	33 94 24 90 10 00 00 	xor    edx,DWORD PTR [esp+0x1090]
100076fd:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10007704:	31 ca                	xor    edx,ecx
10007706:	89 d7                	mov    edi,edx
10007708:	c1 ef 06             	shr    edi,0x6
1000770b:	89 d5                	mov    ebp,edx
1000770d:	c1 ed 0e             	shr    ebp,0xe
10007710:	89 d6                	mov    esi,edx
10007712:	c1 ee 16             	shr    esi,0x16
10007715:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
1000771c:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10007722:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007728:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000772e:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007734:	8b 74 34 58          	mov    esi,DWORD PTR [esp+esi*1+0x58]
10007738:	03 b4 2c 58 04 00 00 	add    esi,DWORD PTR [esp+ebp*1+0x458]
1000773f:	33 b4 3c 58 08 00 00 	xor    esi,DWORD PTR [esp+edi*1+0x858]
10007746:	33 84 24 94 10 00 00 	xor    eax,DWORD PTR [esp+0x1094]
1000774d:	03 b4 0c 58 0c 00 00 	add    esi,DWORD PTR [esp+ecx*1+0xc58]
10007754:	31 f0                	xor    eax,esi
10007756:	89 c5                	mov    ebp,eax
10007758:	c1 ed 06             	shr    ebp,0x6
1000775b:	89 c1                	mov    ecx,eax
1000775d:	c1 e9 0e             	shr    ecx,0xe
10007760:	89 c6                	mov    esi,eax
10007762:	c1 ee 16             	shr    esi,0x16
10007765:	8d 3c 85 00 00 00 00 	lea    edi,[eax*4+0x0]
1000776c:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007772:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007778:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000777e:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007784:	8b 74 34 58          	mov    esi,DWORD PTR [esp+esi*1+0x58]
10007788:	03 b4 0c 58 04 00 00 	add    esi,DWORD PTR [esp+ecx*1+0x458]
1000778f:	33 b4 2c 58 08 00 00 	xor    esi,DWORD PTR [esp+ebp*1+0x858]
10007796:	33 94 24 98 10 00 00 	xor    edx,DWORD PTR [esp+0x1098]
1000779d:	03 b4 3c 58 0c 00 00 	add    esi,DWORD PTR [esp+edi*1+0xc58]
100077a4:	89 f1                	mov    ecx,esi
100077a6:	31 d1                	xor    ecx,edx
100077a8:	33 84 24 9c 10 00 00 	xor    eax,DWORD PTR [esp+0x109c]
100077af:	89 43 f8             	mov    DWORD PTR [ebx-0x8],eax
100077b2:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
100077b5:	8d 94 24 58 10 00 00 	lea    edx,[esp+0x1058]
100077bc:	39 d3                	cmp    ebx,edx
100077be:	0f 85 db fa ff ff    	jne    1000729f <_crypt_blowfish_rn+0x172b>
100077c4:	8b 94 24 e8 10 00 00 	mov    edx,DWORD PTR [esp+0x10e8]
100077cb:	8b 84 24 ec 10 00 00 	mov    eax,DWORD PTR [esp+0x10ec]
100077d2:	8b 9c 24 f0 10 00 00 	mov    ebx,DWORD PTR [esp+0x10f0]
100077d9:	8b 8c 24 f4 10 00 00 	mov    ecx,DWORD PTR [esp+0x10f4]
100077e0:	31 94 24 58 10 00 00 	xor    DWORD PTR [esp+0x1058],edx
100077e7:	31 84 24 5c 10 00 00 	xor    DWORD PTR [esp+0x105c],eax
100077ee:	31 9c 24 60 10 00 00 	xor    DWORD PTR [esp+0x1060],ebx
100077f5:	31 8c 24 64 10 00 00 	xor    DWORD PTR [esp+0x1064],ecx
100077fc:	31 94 24 68 10 00 00 	xor    DWORD PTR [esp+0x1068],edx
10007803:	31 84 24 6c 10 00 00 	xor    DWORD PTR [esp+0x106c],eax
1000780a:	31 9c 24 70 10 00 00 	xor    DWORD PTR [esp+0x1070],ebx
10007811:	31 8c 24 74 10 00 00 	xor    DWORD PTR [esp+0x1074],ecx
10007818:	31 94 24 78 10 00 00 	xor    DWORD PTR [esp+0x1078],edx
1000781f:	31 84 24 7c 10 00 00 	xor    DWORD PTR [esp+0x107c],eax
10007826:	31 9c 24 80 10 00 00 	xor    DWORD PTR [esp+0x1080],ebx
1000782d:	31 8c 24 84 10 00 00 	xor    DWORD PTR [esp+0x1084],ecx
10007834:	31 94 24 88 10 00 00 	xor    DWORD PTR [esp+0x1088],edx
1000783b:	31 84 24 8c 10 00 00 	xor    DWORD PTR [esp+0x108c],eax
10007842:	31 9c 24 90 10 00 00 	xor    DWORD PTR [esp+0x1090],ebx
10007849:	31 8c 24 94 10 00 00 	xor    DWORD PTR [esp+0x1094],ecx
10007850:	31 94 24 98 10 00 00 	xor    DWORD PTR [esp+0x1098],edx
10007857:	31 84 24 9c 10 00 00 	xor    DWORD PTR [esp+0x109c],eax
1000785e:	8d 9c 24 58 10 00 00 	lea    ebx,[esp+0x1058]
10007865:	be 00 00 00 00       	mov    esi,0x0
1000786a:	b8 00 00 00 00       	mov    eax,0x0
1000786f:	83 c3 08             	add    ebx,0x8
10007872:	33 84 24 58 10 00 00 	xor    eax,DWORD PTR [esp+0x1058]
10007879:	89 c7                	mov    edi,eax
1000787b:	c1 ef 06             	shr    edi,0x6
1000787e:	89 c5                	mov    ebp,eax
10007880:	c1 ed 0e             	shr    ebp,0xe
10007883:	89 c2                	mov    edx,eax
10007885:	c1 ea 16             	shr    edx,0x16
10007888:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
1000788f:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10007895:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000789b:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100078a1:	81 e2 fc 03 00 00    	and    edx,0x3fc
100078a7:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
100078ab:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
100078b2:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
100078b9:	03 94 0c 58 0c 00 00 	add    edx,DWORD PTR [esp+ecx*1+0xc58]
100078c0:	33 94 24 5c 10 00 00 	xor    edx,DWORD PTR [esp+0x105c]
100078c7:	31 d6                	xor    esi,edx
100078c9:	89 f7                	mov    edi,esi
100078cb:	c1 ef 06             	shr    edi,0x6
100078ce:	89 f5                	mov    ebp,esi
100078d0:	c1 ed 0e             	shr    ebp,0xe
100078d3:	89 f1                	mov    ecx,esi
100078d5:	c1 e9 16             	shr    ecx,0x16
100078d8:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
100078df:	81 e2 fc 03 00 00    	and    edx,0x3fc
100078e5:	81 e7 fc 03 00 00    	and    edi,0x3fc
100078eb:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100078f1:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100078f7:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
100078fb:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10007902:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10007909:	33 84 24 60 10 00 00 	xor    eax,DWORD PTR [esp+0x1060]
10007910:	03 8c 14 58 0c 00 00 	add    ecx,DWORD PTR [esp+edx*1+0xc58]
10007917:	31 c8                	xor    eax,ecx
10007919:	89 c5                	mov    ebp,eax
1000791b:	c1 ed 06             	shr    ebp,0x6
1000791e:	89 c2                	mov    edx,eax
10007920:	c1 ea 0e             	shr    edx,0xe
10007923:	89 c1                	mov    ecx,eax
10007925:	c1 e9 16             	shr    ecx,0x16
10007928:	8d 3c 85 00 00 00 00 	lea    edi,[eax*4+0x0]
1000792f:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007935:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000793b:	81 e2 fc 03 00 00    	and    edx,0x3fc
10007941:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10007947:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
1000794b:	03 8c 14 58 04 00 00 	add    ecx,DWORD PTR [esp+edx*1+0x458]
10007952:	33 8c 2c 58 08 00 00 	xor    ecx,DWORD PTR [esp+ebp*1+0x858]
10007959:	33 b4 24 64 10 00 00 	xor    esi,DWORD PTR [esp+0x1064]
10007960:	89 ca                	mov    edx,ecx
10007962:	03 94 3c 58 0c 00 00 	add    edx,DWORD PTR [esp+edi*1+0xc58]
10007969:	31 d6                	xor    esi,edx
1000796b:	89 f7                	mov    edi,esi
1000796d:	c1 ef 06             	shr    edi,0x6
10007970:	89 f5                	mov    ebp,esi
10007972:	c1 ed 0e             	shr    ebp,0xe
10007975:	89 f1                	mov    ecx,esi
10007977:	c1 e9 16             	shr    ecx,0x16
1000797a:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
10007981:	81 e2 fc 03 00 00    	and    edx,0x3fc
10007987:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000798d:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007993:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10007999:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
1000799d:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
100079a4:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
100079ab:	33 84 24 68 10 00 00 	xor    eax,DWORD PTR [esp+0x1068]
100079b2:	03 8c 14 58 0c 00 00 	add    ecx,DWORD PTR [esp+edx*1+0xc58]
100079b9:	31 c1                	xor    ecx,eax
100079bb:	89 cd                	mov    ebp,ecx
100079bd:	c1 ed 06             	shr    ebp,0x6
100079c0:	89 ca                	mov    edx,ecx
100079c2:	c1 ea 0e             	shr    edx,0xe
100079c5:	89 c8                	mov    eax,ecx
100079c7:	c1 e8 16             	shr    eax,0x16
100079ca:	8d 3c 8d 00 00 00 00 	lea    edi,[ecx*4+0x0]
100079d1:	81 e7 fc 03 00 00    	and    edi,0x3fc
100079d7:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100079dd:	81 e2 fc 03 00 00    	and    edx,0x3fc
100079e3:	25 fc 03 00 00       	and    eax,0x3fc
100079e8:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
100079ec:	03 84 14 58 04 00 00 	add    eax,DWORD PTR [esp+edx*1+0x458]
100079f3:	33 84 2c 58 08 00 00 	xor    eax,DWORD PTR [esp+ebp*1+0x858]
100079fa:	33 b4 24 6c 10 00 00 	xor    esi,DWORD PTR [esp+0x106c]
10007a01:	03 84 3c 58 0c 00 00 	add    eax,DWORD PTR [esp+edi*1+0xc58]
10007a08:	89 c2                	mov    edx,eax
10007a0a:	31 f2                	xor    edx,esi
10007a0c:	89 d5                	mov    ebp,edx
10007a0e:	c1 ed 06             	shr    ebp,0x6
10007a11:	89 d6                	mov    esi,edx
10007a13:	c1 ee 0e             	shr    esi,0xe
10007a16:	89 d0                	mov    eax,edx
10007a18:	c1 e8 16             	shr    eax,0x16
10007a1b:	8d 3c 95 00 00 00 00 	lea    edi,[edx*4+0x0]
10007a22:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007a28:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007a2e:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007a34:	25 fc 03 00 00       	and    eax,0x3fc
10007a39:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10007a3d:	03 84 34 58 04 00 00 	add    eax,DWORD PTR [esp+esi*1+0x458]
10007a44:	33 84 2c 58 08 00 00 	xor    eax,DWORD PTR [esp+ebp*1+0x858]
10007a4b:	33 8c 24 70 10 00 00 	xor    ecx,DWORD PTR [esp+0x1070]
10007a52:	03 84 3c 58 0c 00 00 	add    eax,DWORD PTR [esp+edi*1+0xc58]
10007a59:	89 c6                	mov    esi,eax
10007a5b:	31 ce                	xor    esi,ecx
10007a5d:	89 f7                	mov    edi,esi
10007a5f:	c1 ef 06             	shr    edi,0x6
10007a62:	89 f5                	mov    ebp,esi
10007a64:	c1 ed 0e             	shr    ebp,0xe
10007a67:	89 f0                	mov    eax,esi
10007a69:	c1 e8 16             	shr    eax,0x16
10007a6c:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
10007a73:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10007a79:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007a7f:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007a85:	25 fc 03 00 00       	and    eax,0x3fc
10007a8a:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10007a8e:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
10007a95:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
10007a9c:	33 94 24 74 10 00 00 	xor    edx,DWORD PTR [esp+0x1074]
10007aa3:	03 84 0c 58 0c 00 00 	add    eax,DWORD PTR [esp+ecx*1+0xc58]
10007aaa:	31 c2                	xor    edx,eax
10007aac:	89 d7                	mov    edi,edx
10007aae:	c1 ef 06             	shr    edi,0x6
10007ab1:	89 d5                	mov    ebp,edx
10007ab3:	c1 ed 0e             	shr    ebp,0xe
10007ab6:	89 d0                	mov    eax,edx
10007ab8:	c1 e8 16             	shr    eax,0x16
10007abb:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
10007ac2:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10007ac8:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007ace:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007ad4:	25 fc 03 00 00       	and    eax,0x3fc
10007ad9:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10007add:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
10007ae4:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
10007aeb:	33 b4 24 78 10 00 00 	xor    esi,DWORD PTR [esp+0x1078]
10007af2:	03 84 0c 58 0c 00 00 	add    eax,DWORD PTR [esp+ecx*1+0xc58]
10007af9:	31 c6                	xor    esi,eax
10007afb:	89 f7                	mov    edi,esi
10007afd:	c1 ef 06             	shr    edi,0x6
10007b00:	89 f5                	mov    ebp,esi
10007b02:	c1 ed 0e             	shr    ebp,0xe
10007b05:	89 f0                	mov    eax,esi
10007b07:	c1 e8 16             	shr    eax,0x16
10007b0a:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
10007b11:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10007b17:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007b1d:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007b23:	25 fc 03 00 00       	and    eax,0x3fc
10007b28:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10007b2c:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
10007b33:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
10007b3a:	33 94 24 7c 10 00 00 	xor    edx,DWORD PTR [esp+0x107c]
10007b41:	03 84 0c 58 0c 00 00 	add    eax,DWORD PTR [esp+ecx*1+0xc58]
10007b48:	31 c2                	xor    edx,eax
10007b4a:	89 d7                	mov    edi,edx
10007b4c:	c1 ef 06             	shr    edi,0x6
10007b4f:	89 d5                	mov    ebp,edx
10007b51:	c1 ed 0e             	shr    ebp,0xe
10007b54:	89 d0                	mov    eax,edx
10007b56:	c1 e8 16             	shr    eax,0x16
10007b59:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
10007b60:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10007b66:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007b6c:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007b72:	25 fc 03 00 00       	and    eax,0x3fc
10007b77:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10007b7b:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
10007b82:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
10007b89:	33 b4 24 80 10 00 00 	xor    esi,DWORD PTR [esp+0x1080]
10007b90:	03 84 0c 58 0c 00 00 	add    eax,DWORD PTR [esp+ecx*1+0xc58]
10007b97:	31 c6                	xor    esi,eax
10007b99:	89 f7                	mov    edi,esi
10007b9b:	c1 ef 06             	shr    edi,0x6
10007b9e:	89 f5                	mov    ebp,esi
10007ba0:	c1 ed 0e             	shr    ebp,0xe
10007ba3:	89 f0                	mov    eax,esi
10007ba5:	c1 e8 16             	shr    eax,0x16
10007ba8:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
10007baf:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10007bb5:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007bbb:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007bc1:	25 fc 03 00 00       	and    eax,0x3fc
10007bc6:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10007bca:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
10007bd1:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
10007bd8:	33 94 24 84 10 00 00 	xor    edx,DWORD PTR [esp+0x1084]
10007bdf:	03 84 0c 58 0c 00 00 	add    eax,DWORD PTR [esp+ecx*1+0xc58]
10007be6:	31 d0                	xor    eax,edx
10007be8:	89 c7                	mov    edi,eax
10007bea:	c1 ef 06             	shr    edi,0x6
10007bed:	89 c5                	mov    ebp,eax
10007bef:	c1 ed 0e             	shr    ebp,0xe
10007bf2:	89 c2                	mov    edx,eax
10007bf4:	c1 ea 16             	shr    edx,0x16
10007bf7:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
10007bfe:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10007c04:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007c0a:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007c10:	81 e2 fc 03 00 00    	and    edx,0x3fc
10007c16:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10007c1a:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10007c21:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10007c28:	33 b4 24 88 10 00 00 	xor    esi,DWORD PTR [esp+0x1088]
10007c2f:	03 94 0c 58 0c 00 00 	add    edx,DWORD PTR [esp+ecx*1+0xc58]
10007c36:	31 d6                	xor    esi,edx
10007c38:	89 f7                	mov    edi,esi
10007c3a:	c1 ef 06             	shr    edi,0x6
10007c3d:	89 f5                	mov    ebp,esi
10007c3f:	c1 ed 0e             	shr    ebp,0xe
10007c42:	89 f2                	mov    edx,esi
10007c44:	c1 ea 16             	shr    edx,0x16
10007c47:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
10007c4e:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10007c54:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007c5a:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007c60:	81 e2 fc 03 00 00    	and    edx,0x3fc
10007c66:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10007c6a:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10007c71:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10007c78:	33 84 24 8c 10 00 00 	xor    eax,DWORD PTR [esp+0x108c]
10007c7f:	03 94 0c 58 0c 00 00 	add    edx,DWORD PTR [esp+ecx*1+0xc58]
10007c86:	31 d0                	xor    eax,edx
10007c88:	89 c7                	mov    edi,eax
10007c8a:	c1 ef 06             	shr    edi,0x6
10007c8d:	89 c5                	mov    ebp,eax
10007c8f:	c1 ed 0e             	shr    ebp,0xe
10007c92:	89 c2                	mov    edx,eax
10007c94:	c1 ea 16             	shr    edx,0x16
10007c97:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
10007c9e:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10007ca4:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007caa:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007cb0:	81 e2 fc 03 00 00    	and    edx,0x3fc
10007cb6:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10007cba:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10007cc1:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10007cc8:	33 b4 24 90 10 00 00 	xor    esi,DWORD PTR [esp+0x1090]
10007ccf:	03 94 0c 58 0c 00 00 	add    edx,DWORD PTR [esp+ecx*1+0xc58]
10007cd6:	31 d6                	xor    esi,edx
10007cd8:	89 f2                	mov    edx,esi
10007cda:	c1 ea 06             	shr    edx,0x6
10007cdd:	89 f5                	mov    ebp,esi
10007cdf:	c1 ed 0e             	shr    ebp,0xe
10007ce2:	89 f1                	mov    ecx,esi
10007ce4:	c1 e9 16             	shr    ecx,0x16
10007ce7:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
10007cee:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007cf4:	81 e2 fc 03 00 00    	and    edx,0x3fc
10007cfa:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007d00:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10007d06:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10007d0a:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10007d11:	33 8c 14 58 08 00 00 	xor    ecx,DWORD PTR [esp+edx*1+0x858]
10007d18:	33 84 24 94 10 00 00 	xor    eax,DWORD PTR [esp+0x1094]
10007d1f:	03 8c 3c 58 0c 00 00 	add    ecx,DWORD PTR [esp+edi*1+0xc58]
10007d26:	31 c8                	xor    eax,ecx
10007d28:	89 c5                	mov    ebp,eax
10007d2a:	c1 ed 06             	shr    ebp,0x6
10007d2d:	89 c2                	mov    edx,eax
10007d2f:	c1 ea 0e             	shr    edx,0xe
10007d32:	89 c1                	mov    ecx,eax
10007d34:	c1 e9 16             	shr    ecx,0x16
10007d37:	8d 3c 85 00 00 00 00 	lea    edi,[eax*4+0x0]
10007d3e:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007d44:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007d4a:	81 e2 fc 03 00 00    	and    edx,0x3fc
10007d50:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10007d56:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10007d5a:	03 8c 14 58 04 00 00 	add    ecx,DWORD PTR [esp+edx*1+0x458]
10007d61:	33 8c 2c 58 08 00 00 	xor    ecx,DWORD PTR [esp+ebp*1+0x858]
10007d68:	33 b4 24 98 10 00 00 	xor    esi,DWORD PTR [esp+0x1098]
10007d6f:	89 ca                	mov    edx,ecx
10007d71:	03 94 3c 58 0c 00 00 	add    edx,DWORD PTR [esp+edi*1+0xc58]
10007d78:	31 d6                	xor    esi,edx
10007d7a:	33 84 24 9c 10 00 00 	xor    eax,DWORD PTR [esp+0x109c]
10007d81:	89 43 f8             	mov    DWORD PTR [ebx-0x8],eax
10007d84:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
10007d87:	8d bc 24 a0 10 00 00 	lea    edi,[esp+0x10a0]
10007d8e:	39 fb                	cmp    ebx,edi
10007d90:	0f 85 d9 fa ff ff    	jne    1000786f <_crypt_blowfish_rn+0x1cfb>
10007d96:	8d 5c 24 58          	lea    ebx,[esp+0x58]
10007d9a:	83 c3 08             	add    ebx,0x8
10007d9d:	33 84 24 58 10 00 00 	xor    eax,DWORD PTR [esp+0x1058]
10007da4:	89 c7                	mov    edi,eax
10007da6:	c1 ef 06             	shr    edi,0x6
10007da9:	89 c5                	mov    ebp,eax
10007dab:	c1 ed 0e             	shr    ebp,0xe
10007dae:	89 c2                	mov    edx,eax
10007db0:	c1 ea 16             	shr    edx,0x16
10007db3:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
10007dba:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10007dc0:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007dc6:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007dcc:	81 e2 fc 03 00 00    	and    edx,0x3fc
10007dd2:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10007dd6:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10007ddd:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10007de4:	03 94 0c 58 0c 00 00 	add    edx,DWORD PTR [esp+ecx*1+0xc58]
10007deb:	33 94 24 5c 10 00 00 	xor    edx,DWORD PTR [esp+0x105c]
10007df2:	31 f2                	xor    edx,esi
10007df4:	89 d7                	mov    edi,edx
10007df6:	c1 ef 06             	shr    edi,0x6
10007df9:	89 d5                	mov    ebp,edx
10007dfb:	c1 ed 0e             	shr    ebp,0xe
10007dfe:	89 d6                	mov    esi,edx
10007e00:	c1 ee 16             	shr    esi,0x16
10007e03:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
10007e0a:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10007e10:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007e16:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007e1c:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007e22:	8b 74 34 58          	mov    esi,DWORD PTR [esp+esi*1+0x58]
10007e26:	03 b4 2c 58 04 00 00 	add    esi,DWORD PTR [esp+ebp*1+0x458]
10007e2d:	33 b4 3c 58 08 00 00 	xor    esi,DWORD PTR [esp+edi*1+0x858]
10007e34:	33 84 24 60 10 00 00 	xor    eax,DWORD PTR [esp+0x1060]
10007e3b:	03 b4 0c 58 0c 00 00 	add    esi,DWORD PTR [esp+ecx*1+0xc58]
10007e42:	31 c6                	xor    esi,eax
10007e44:	89 f7                	mov    edi,esi
10007e46:	c1 ef 06             	shr    edi,0x6
10007e49:	89 f5                	mov    ebp,esi
10007e4b:	c1 ed 0e             	shr    ebp,0xe
10007e4e:	89 f1                	mov    ecx,esi
10007e50:	c1 e9 16             	shr    ecx,0x16
10007e53:	8d 04 b5 00 00 00 00 	lea    eax,[esi*4+0x0]
10007e5a:	25 fc 03 00 00       	and    eax,0x3fc
10007e5f:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007e65:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007e6b:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10007e71:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10007e75:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10007e7c:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10007e83:	33 94 24 64 10 00 00 	xor    edx,DWORD PTR [esp+0x1064]
10007e8a:	03 8c 04 58 0c 00 00 	add    ecx,DWORD PTR [esp+eax*1+0xc58]
10007e91:	31 d1                	xor    ecx,edx
10007e93:	89 c8                	mov    eax,ecx
10007e95:	c1 e8 06             	shr    eax,0x6
10007e98:	89 cd                	mov    ebp,ecx
10007e9a:	c1 ed 0e             	shr    ebp,0xe
10007e9d:	89 ca                	mov    edx,ecx
10007e9f:	c1 ea 16             	shr    edx,0x16
10007ea2:	8d 3c 8d 00 00 00 00 	lea    edi,[ecx*4+0x0]
10007ea9:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007eaf:	25 fc 03 00 00       	and    eax,0x3fc
10007eb4:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007eba:	81 e2 fc 03 00 00    	and    edx,0x3fc
10007ec0:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10007ec4:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10007ecb:	33 94 04 58 08 00 00 	xor    edx,DWORD PTR [esp+eax*1+0x858]
10007ed2:	33 b4 24 68 10 00 00 	xor    esi,DWORD PTR [esp+0x1068]
10007ed9:	03 94 3c 58 0c 00 00 	add    edx,DWORD PTR [esp+edi*1+0xc58]
10007ee0:	31 d6                	xor    esi,edx
10007ee2:	89 f2                	mov    edx,esi
10007ee4:	c1 ea 06             	shr    edx,0x6
10007ee7:	89 f5                	mov    ebp,esi
10007ee9:	c1 ed 0e             	shr    ebp,0xe
10007eec:	89 f0                	mov    eax,esi
10007eee:	c1 e8 16             	shr    eax,0x16
10007ef1:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
10007ef8:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007efe:	81 e2 fc 03 00 00    	and    edx,0x3fc
10007f04:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007f0a:	25 fc 03 00 00       	and    eax,0x3fc
10007f0f:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10007f13:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
10007f1a:	33 84 14 58 08 00 00 	xor    eax,DWORD PTR [esp+edx*1+0x858]
10007f21:	33 8c 24 6c 10 00 00 	xor    ecx,DWORD PTR [esp+0x106c]
10007f28:	03 84 3c 58 0c 00 00 	add    eax,DWORD PTR [esp+edi*1+0xc58]
10007f2f:	31 c1                	xor    ecx,eax
10007f31:	89 c8                	mov    eax,ecx
10007f33:	c1 e8 06             	shr    eax,0x6
10007f36:	89 cd                	mov    ebp,ecx
10007f38:	c1 ed 0e             	shr    ebp,0xe
10007f3b:	89 ca                	mov    edx,ecx
10007f3d:	c1 ea 16             	shr    edx,0x16
10007f40:	8d 3c 8d 00 00 00 00 	lea    edi,[ecx*4+0x0]
10007f47:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007f4d:	25 fc 03 00 00       	and    eax,0x3fc
10007f52:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007f58:	81 e2 fc 03 00 00    	and    edx,0x3fc
10007f5e:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10007f62:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10007f69:	33 94 04 58 08 00 00 	xor    edx,DWORD PTR [esp+eax*1+0x858]
10007f70:	33 b4 24 70 10 00 00 	xor    esi,DWORD PTR [esp+0x1070]
10007f77:	03 94 3c 58 0c 00 00 	add    edx,DWORD PTR [esp+edi*1+0xc58]
10007f7e:	31 d6                	xor    esi,edx
10007f80:	89 f2                	mov    edx,esi
10007f82:	c1 ea 06             	shr    edx,0x6
10007f85:	89 f5                	mov    ebp,esi
10007f87:	c1 ed 0e             	shr    ebp,0xe
10007f8a:	89 f0                	mov    eax,esi
10007f8c:	c1 e8 16             	shr    eax,0x16
10007f8f:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
10007f96:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007f9c:	81 e2 fc 03 00 00    	and    edx,0x3fc
10007fa2:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007fa8:	25 fc 03 00 00       	and    eax,0x3fc
10007fad:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10007fb1:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
10007fb8:	33 84 14 58 08 00 00 	xor    eax,DWORD PTR [esp+edx*1+0x858]
10007fbf:	33 8c 24 74 10 00 00 	xor    ecx,DWORD PTR [esp+0x1074]
10007fc6:	03 84 3c 58 0c 00 00 	add    eax,DWORD PTR [esp+edi*1+0xc58]
10007fcd:	31 c1                	xor    ecx,eax
10007fcf:	89 cf                	mov    edi,ecx
10007fd1:	c1 ef 06             	shr    edi,0x6
10007fd4:	89 cd                	mov    ebp,ecx
10007fd6:	c1 ed 0e             	shr    ebp,0xe
10007fd9:	89 ca                	mov    edx,ecx
10007fdb:	c1 ea 16             	shr    edx,0x16
10007fde:	8d 04 8d 00 00 00 00 	lea    eax,[ecx*4+0x0]
10007fe5:	25 fc 03 00 00       	and    eax,0x3fc
10007fea:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007ff0:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007ff6:	81 e2 fc 03 00 00    	and    edx,0x3fc
10007ffc:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10008000:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10008007:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
1000800e:	33 b4 24 78 10 00 00 	xor    esi,DWORD PTR [esp+0x1078]
10008015:	03 94 04 58 0c 00 00 	add    edx,DWORD PTR [esp+eax*1+0xc58]
1000801c:	31 d6                	xor    esi,edx
1000801e:	89 f2                	mov    edx,esi
10008020:	c1 ea 06             	shr    edx,0x6
10008023:	89 f5                	mov    ebp,esi
10008025:	c1 ed 0e             	shr    ebp,0xe
10008028:	89 f0                	mov    eax,esi
1000802a:	c1 e8 16             	shr    eax,0x16
1000802d:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
10008034:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000803a:	81 e2 fc 03 00 00    	and    edx,0x3fc
10008040:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008046:	25 fc 03 00 00       	and    eax,0x3fc
1000804b:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
1000804f:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
10008056:	33 84 14 58 08 00 00 	xor    eax,DWORD PTR [esp+edx*1+0x858]
1000805d:	33 8c 24 7c 10 00 00 	xor    ecx,DWORD PTR [esp+0x107c]
10008064:	03 84 3c 58 0c 00 00 	add    eax,DWORD PTR [esp+edi*1+0xc58]
1000806b:	31 c8                	xor    eax,ecx
1000806d:	89 c7                	mov    edi,eax
1000806f:	c1 ef 06             	shr    edi,0x6
10008072:	89 c5                	mov    ebp,eax
10008074:	c1 ed 0e             	shr    ebp,0xe
10008077:	89 c2                	mov    edx,eax
10008079:	c1 ea 16             	shr    edx,0x16
1000807c:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
10008083:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10008089:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000808f:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008095:	81 e2 fc 03 00 00    	and    edx,0x3fc
1000809b:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
1000809f:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
100080a6:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
100080ad:	33 b4 24 80 10 00 00 	xor    esi,DWORD PTR [esp+0x1080]
100080b4:	03 94 0c 58 0c 00 00 	add    edx,DWORD PTR [esp+ecx*1+0xc58]
100080bb:	31 d6                	xor    esi,edx
100080bd:	89 f7                	mov    edi,esi
100080bf:	c1 ef 06             	shr    edi,0x6
100080c2:	89 f5                	mov    ebp,esi
100080c4:	c1 ed 0e             	shr    ebp,0xe
100080c7:	89 f1                	mov    ecx,esi
100080c9:	c1 e9 16             	shr    ecx,0x16
100080cc:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
100080d3:	81 e2 fc 03 00 00    	and    edx,0x3fc
100080d9:	81 e7 fc 03 00 00    	and    edi,0x3fc
100080df:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100080e5:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100080eb:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
100080ef:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
100080f6:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
100080fd:	33 84 24 84 10 00 00 	xor    eax,DWORD PTR [esp+0x1084]
10008104:	03 8c 14 58 0c 00 00 	add    ecx,DWORD PTR [esp+edx*1+0xc58]
1000810b:	31 c8                	xor    eax,ecx
1000810d:	89 c7                	mov    edi,eax
1000810f:	c1 ef 06             	shr    edi,0x6
10008112:	89 c5                	mov    ebp,eax
10008114:	c1 ed 0e             	shr    ebp,0xe
10008117:	89 c2                	mov    edx,eax
10008119:	c1 ea 16             	shr    edx,0x16
1000811c:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
10008123:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10008129:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000812f:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008135:	81 e2 fc 03 00 00    	and    edx,0x3fc
1000813b:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
1000813f:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10008146:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
1000814d:	33 b4 24 88 10 00 00 	xor    esi,DWORD PTR [esp+0x1088]
10008154:	03 94 0c 58 0c 00 00 	add    edx,DWORD PTR [esp+ecx*1+0xc58]
1000815b:	31 d6                	xor    esi,edx
1000815d:	89 f7                	mov    edi,esi
1000815f:	c1 ef 06             	shr    edi,0x6
10008162:	89 f5                	mov    ebp,esi
10008164:	c1 ed 0e             	shr    ebp,0xe
10008167:	89 f1                	mov    ecx,esi
10008169:	c1 e9 16             	shr    ecx,0x16
1000816c:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
10008173:	81 e2 fc 03 00 00    	and    edx,0x3fc
10008179:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000817f:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008185:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000818b:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
1000818f:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10008196:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
1000819d:	33 84 24 8c 10 00 00 	xor    eax,DWORD PTR [esp+0x108c]
100081a4:	03 8c 14 58 0c 00 00 	add    ecx,DWORD PTR [esp+edx*1+0xc58]
100081ab:	31 c8                	xor    eax,ecx
100081ad:	89 c7                	mov    edi,eax
100081af:	c1 ef 06             	shr    edi,0x6
100081b2:	89 c5                	mov    ebp,eax
100081b4:	c1 ed 0e             	shr    ebp,0xe
100081b7:	89 c2                	mov    edx,eax
100081b9:	c1 ea 16             	shr    edx,0x16
100081bc:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
100081c3:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100081c9:	81 e7 fc 03 00 00    	and    edi,0x3fc
100081cf:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100081d5:	81 e2 fc 03 00 00    	and    edx,0x3fc
100081db:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
100081df:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
100081e6:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
100081ed:	33 b4 24 90 10 00 00 	xor    esi,DWORD PTR [esp+0x1090]
100081f4:	03 94 0c 58 0c 00 00 	add    edx,DWORD PTR [esp+ecx*1+0xc58]
100081fb:	31 d6                	xor    esi,edx
100081fd:	89 f7                	mov    edi,esi
100081ff:	c1 ef 06             	shr    edi,0x6
10008202:	89 f5                	mov    ebp,esi
10008204:	c1 ed 0e             	shr    ebp,0xe
10008207:	89 f1                	mov    ecx,esi
10008209:	c1 e9 16             	shr    ecx,0x16
1000820c:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
10008213:	81 e2 fc 03 00 00    	and    edx,0x3fc
10008219:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000821f:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008225:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000822b:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
1000822f:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10008236:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
1000823d:	33 84 24 94 10 00 00 	xor    eax,DWORD PTR [esp+0x1094]
10008244:	03 8c 14 58 0c 00 00 	add    ecx,DWORD PTR [esp+edx*1+0xc58]
1000824b:	31 c8                	xor    eax,ecx
1000824d:	89 c7                	mov    edi,eax
1000824f:	c1 ef 06             	shr    edi,0x6
10008252:	89 c5                	mov    ebp,eax
10008254:	c1 ed 0e             	shr    ebp,0xe
10008257:	89 c2                	mov    edx,eax
10008259:	c1 ea 16             	shr    edx,0x16
1000825c:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
10008263:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10008269:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000826f:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008275:	81 e2 fc 03 00 00    	and    edx,0x3fc
1000827b:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
1000827f:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10008286:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
1000828d:	33 b4 24 98 10 00 00 	xor    esi,DWORD PTR [esp+0x1098]
10008294:	03 94 0c 58 0c 00 00 	add    edx,DWORD PTR [esp+ecx*1+0xc58]
1000829b:	31 d6                	xor    esi,edx
1000829d:	33 84 24 9c 10 00 00 	xor    eax,DWORD PTR [esp+0x109c]
100082a4:	89 43 f8             	mov    DWORD PTR [ebx-0x8],eax
100082a7:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
100082aa:	8d 94 24 58 10 00 00 	lea    edx,[esp+0x1058]
100082b1:	39 d3                	cmp    ebx,edx
100082b3:	0f 85 e1 fa ff ff    	jne    10007d9a <_crypt_blowfish_rn+0x2226>
100082b9:	ff 4c 24 04          	dec    DWORD PTR [esp+0x4]
100082bd:	0f 85 a2 e9 ff ff    	jne    10006c65 <_crypt_blowfish_rn+0x10f1>
100082c3:	8b 84 24 58 10 00 00 	mov    eax,DWORD PTR [esp+0x1058]
100082ca:	89 04 24             	mov    DWORD PTR [esp],eax
100082cd:	8b 84 24 5c 10 00 00 	mov    eax,DWORD PTR [esp+0x105c]
100082d4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
100082d8:	8b 84 24 60 10 00 00 	mov    eax,DWORD PTR [esp+0x1060]
100082df:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
100082e3:	8b 84 24 64 10 00 00 	mov    eax,DWORD PTR [esp+0x1064]
100082ea:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
100082ee:	8b 84 24 68 10 00 00 	mov    eax,DWORD PTR [esp+0x1068]
100082f5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
100082f9:	8b 84 24 6c 10 00 00 	mov    eax,DWORD PTR [esp+0x106c]
10008300:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
10008304:	8b 84 24 70 10 00 00 	mov    eax,DWORD PTR [esp+0x1070]
1000830b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
1000830f:	8b 84 24 74 10 00 00 	mov    eax,DWORD PTR [esp+0x1074]
10008316:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
1000831a:	8b 84 24 78 10 00 00 	mov    eax,DWORD PTR [esp+0x1078]
10008321:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
10008325:	8b 84 24 7c 10 00 00 	mov    eax,DWORD PTR [esp+0x107c]
1000832c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
10008330:	8b 84 24 80 10 00 00 	mov    eax,DWORD PTR [esp+0x1080]
10008337:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
1000833b:	8b 84 24 84 10 00 00 	mov    eax,DWORD PTR [esp+0x1084]
10008342:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
10008346:	8b 84 24 88 10 00 00 	mov    eax,DWORD PTR [esp+0x1088]
1000834d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
10008351:	8b 84 24 8c 10 00 00 	mov    eax,DWORD PTR [esp+0x108c]
10008358:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
1000835c:	8b 84 24 90 10 00 00 	mov    eax,DWORD PTR [esp+0x1090]
10008363:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
10008367:	8b 84 24 94 10 00 00 	mov    eax,DWORD PTR [esp+0x1094]
1000836e:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
10008372:	8b 84 24 98 10 00 00 	mov    eax,DWORD PTR [esp+0x1098]
10008379:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
1000837d:	8b 84 24 9c 10 00 00 	mov    eax,DWORD PTR [esp+0x109c]
10008384:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
10008388:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
1000838c:	89 5c 24 4c          	mov    DWORD PTR [esp+0x4c],ebx
10008390:	8b 04 9d e0 95 00 10 	mov    eax,DWORD PTR [ebx*4+0x100095e0]	10008393: R_386_32	.data
10008397:	8b 0c 9d e4 95 00 10 	mov    ecx,DWORD PTR [ebx*4+0x100095e4]	1000839a: R_386_32	.data
1000839e:	bb 40 00 00 00       	mov    ebx,0x40
100083a3:	33 04 24             	xor    eax,DWORD PTR [esp]
100083a6:	89 c7                	mov    edi,eax
100083a8:	c1 ef 06             	shr    edi,0x6
100083ab:	89 c5                	mov    ebp,eax
100083ad:	c1 ed 0e             	shr    ebp,0xe
100083b0:	89 c2                	mov    edx,eax
100083b2:	c1 ea 16             	shr    edx,0x16
100083b5:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
100083bc:	81 e6 fc 03 00 00    	and    esi,0x3fc
100083c2:	81 e7 fc 03 00 00    	and    edi,0x3fc
100083c8:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100083ce:	81 e2 fc 03 00 00    	and    edx,0x3fc
100083d4:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
100083d8:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
100083df:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
100083e6:	03 94 34 58 0c 00 00 	add    edx,DWORD PTR [esp+esi*1+0xc58]
100083ed:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
100083f1:	31 ca                	xor    edx,ecx
100083f3:	89 d7                	mov    edi,edx
100083f5:	c1 ef 06             	shr    edi,0x6
100083f8:	89 d5                	mov    ebp,edx
100083fa:	c1 ed 0e             	shr    ebp,0xe
100083fd:	89 d1                	mov    ecx,edx
100083ff:	c1 e9 16             	shr    ecx,0x16
10008402:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10008409:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000840f:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008415:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000841b:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10008421:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10008425:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
1000842c:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10008433:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
10008437:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
1000843e:	31 c1                	xor    ecx,eax
10008440:	89 cd                	mov    ebp,ecx
10008442:	c1 ed 06             	shr    ebp,0x6
10008445:	89 ce                	mov    esi,ecx
10008447:	c1 ee 0e             	shr    esi,0xe
1000844a:	89 c8                	mov    eax,ecx
1000844c:	c1 e8 16             	shr    eax,0x16
1000844f:	8d 3c 8d 00 00 00 00 	lea    edi,[ecx*4+0x0]
10008456:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000845c:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008462:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008468:	25 fc 03 00 00       	and    eax,0x3fc
1000846d:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10008471:	03 84 34 58 04 00 00 	add    eax,DWORD PTR [esp+esi*1+0x458]
10008478:	33 84 2c 58 08 00 00 	xor    eax,DWORD PTR [esp+ebp*1+0x858]
1000847f:	33 54 24 0c          	xor    edx,DWORD PTR [esp+0xc]
10008483:	03 84 3c 58 0c 00 00 	add    eax,DWORD PTR [esp+edi*1+0xc58]
1000848a:	89 c6                	mov    esi,eax
1000848c:	31 d6                	xor    esi,edx
1000848e:	89 f5                	mov    ebp,esi
10008490:	c1 ed 06             	shr    ebp,0x6
10008493:	89 f2                	mov    edx,esi
10008495:	c1 ea 0e             	shr    edx,0xe
10008498:	89 f0                	mov    eax,esi
1000849a:	c1 e8 16             	shr    eax,0x16
1000849d:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
100084a4:	81 e7 fc 03 00 00    	and    edi,0x3fc
100084aa:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100084b0:	81 e2 fc 03 00 00    	and    edx,0x3fc
100084b6:	25 fc 03 00 00       	and    eax,0x3fc
100084bb:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
100084bf:	03 84 14 58 04 00 00 	add    eax,DWORD PTR [esp+edx*1+0x458]
100084c6:	33 84 2c 58 08 00 00 	xor    eax,DWORD PTR [esp+ebp*1+0x858]
100084cd:	33 4c 24 10          	xor    ecx,DWORD PTR [esp+0x10]
100084d1:	03 84 3c 58 0c 00 00 	add    eax,DWORD PTR [esp+edi*1+0xc58]
100084d8:	31 c1                	xor    ecx,eax
100084da:	89 ca                	mov    edx,ecx
100084dc:	c1 ea 06             	shr    edx,0x6
100084df:	89 cd                	mov    ebp,ecx
100084e1:	c1 ed 0e             	shr    ebp,0xe
100084e4:	89 c8                	mov    eax,ecx
100084e6:	c1 e8 16             	shr    eax,0x16
100084e9:	8d 3c 8d 00 00 00 00 	lea    edi,[ecx*4+0x0]
100084f0:	81 e7 fc 03 00 00    	and    edi,0x3fc
100084f6:	81 e2 fc 03 00 00    	and    edx,0x3fc
100084fc:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008502:	25 fc 03 00 00       	and    eax,0x3fc
10008507:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
1000850b:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
10008512:	33 84 14 58 08 00 00 	xor    eax,DWORD PTR [esp+edx*1+0x858]
10008519:	33 74 24 14          	xor    esi,DWORD PTR [esp+0x14]
1000851d:	03 84 3c 58 0c 00 00 	add    eax,DWORD PTR [esp+edi*1+0xc58]
10008524:	31 f0                	xor    eax,esi
10008526:	89 c7                	mov    edi,eax
10008528:	c1 ef 06             	shr    edi,0x6
1000852b:	89 c5                	mov    ebp,eax
1000852d:	c1 ed 0e             	shr    ebp,0xe
10008530:	89 c2                	mov    edx,eax
10008532:	c1 ea 16             	shr    edx,0x16
10008535:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
1000853c:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008542:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008548:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000854e:	81 e2 fc 03 00 00    	and    edx,0x3fc
10008554:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10008558:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
1000855f:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10008566:	33 4c 24 18          	xor    ecx,DWORD PTR [esp+0x18]
1000856a:	03 94 34 58 0c 00 00 	add    edx,DWORD PTR [esp+esi*1+0xc58]
10008571:	31 ca                	xor    edx,ecx
10008573:	89 d7                	mov    edi,edx
10008575:	c1 ef 06             	shr    edi,0x6
10008578:	89 d5                	mov    ebp,edx
1000857a:	c1 ed 0e             	shr    ebp,0xe
1000857d:	89 d1                	mov    ecx,edx
1000857f:	c1 e9 16             	shr    ecx,0x16
10008582:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10008589:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000858f:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008595:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000859b:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100085a1:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
100085a5:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
100085ac:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
100085b3:	33 44 24 1c          	xor    eax,DWORD PTR [esp+0x1c]
100085b7:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
100085be:	31 c8                	xor    eax,ecx
100085c0:	89 c7                	mov    edi,eax
100085c2:	c1 ef 06             	shr    edi,0x6
100085c5:	89 c5                	mov    ebp,eax
100085c7:	c1 ed 0e             	shr    ebp,0xe
100085ca:	89 c1                	mov    ecx,eax
100085cc:	c1 e9 16             	shr    ecx,0x16
100085cf:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
100085d6:	81 e6 fc 03 00 00    	and    esi,0x3fc
100085dc:	81 e7 fc 03 00 00    	and    edi,0x3fc
100085e2:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100085e8:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100085ee:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
100085f2:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
100085f9:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10008600:	33 54 24 20          	xor    edx,DWORD PTR [esp+0x20]
10008604:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
1000860b:	31 ca                	xor    edx,ecx
1000860d:	89 d7                	mov    edi,edx
1000860f:	c1 ef 06             	shr    edi,0x6
10008612:	89 d5                	mov    ebp,edx
10008614:	c1 ed 0e             	shr    ebp,0xe
10008617:	89 d1                	mov    ecx,edx
10008619:	c1 e9 16             	shr    ecx,0x16
1000861c:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10008623:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008629:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000862f:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008635:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000863b:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
1000863f:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10008646:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
1000864d:	33 44 24 24          	xor    eax,DWORD PTR [esp+0x24]
10008651:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10008658:	31 c8                	xor    eax,ecx
1000865a:	89 c7                	mov    edi,eax
1000865c:	c1 ef 06             	shr    edi,0x6
1000865f:	89 c5                	mov    ebp,eax
10008661:	c1 ed 0e             	shr    ebp,0xe
10008664:	89 c1                	mov    ecx,eax
10008666:	c1 e9 16             	shr    ecx,0x16
10008669:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10008670:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008676:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000867c:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008682:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10008688:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
1000868c:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10008693:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
1000869a:	33 54 24 28          	xor    edx,DWORD PTR [esp+0x28]
1000869e:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
100086a5:	31 ca                	xor    edx,ecx
100086a7:	89 d7                	mov    edi,edx
100086a9:	c1 ef 06             	shr    edi,0x6
100086ac:	89 d5                	mov    ebp,edx
100086ae:	c1 ed 0e             	shr    ebp,0xe
100086b1:	89 d1                	mov    ecx,edx
100086b3:	c1 e9 16             	shr    ecx,0x16
100086b6:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
100086bd:	81 e6 fc 03 00 00    	and    esi,0x3fc
100086c3:	81 e7 fc 03 00 00    	and    edi,0x3fc
100086c9:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100086cf:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100086d5:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
100086d9:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
100086e0:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
100086e7:	33 44 24 2c          	xor    eax,DWORD PTR [esp+0x2c]
100086eb:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
100086f2:	31 c8                	xor    eax,ecx
100086f4:	89 c7                	mov    edi,eax
100086f6:	c1 ef 06             	shr    edi,0x6
100086f9:	89 c5                	mov    ebp,eax
100086fb:	c1 ed 0e             	shr    ebp,0xe
100086fe:	89 c1                	mov    ecx,eax
10008700:	c1 e9 16             	shr    ecx,0x16
10008703:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
1000870a:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008710:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008716:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000871c:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10008722:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10008726:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
1000872d:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10008734:	33 54 24 30          	xor    edx,DWORD PTR [esp+0x30]
10008738:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
1000873f:	31 ca                	xor    edx,ecx
10008741:	89 d7                	mov    edi,edx
10008743:	c1 ef 06             	shr    edi,0x6
10008746:	89 d5                	mov    ebp,edx
10008748:	c1 ed 0e             	shr    ebp,0xe
1000874b:	89 d1                	mov    ecx,edx
1000874d:	c1 e9 16             	shr    ecx,0x16
10008750:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10008757:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000875d:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008763:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008769:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000876f:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10008773:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
1000877a:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10008781:	33 44 24 34          	xor    eax,DWORD PTR [esp+0x34]
10008785:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
1000878c:	31 c8                	xor    eax,ecx
1000878e:	89 c7                	mov    edi,eax
10008790:	c1 ef 06             	shr    edi,0x6
10008793:	89 c5                	mov    ebp,eax
10008795:	c1 ed 0e             	shr    ebp,0xe
10008798:	89 c1                	mov    ecx,eax
1000879a:	c1 e9 16             	shr    ecx,0x16
1000879d:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
100087a4:	81 e6 fc 03 00 00    	and    esi,0x3fc
100087aa:	81 e7 fc 03 00 00    	and    edi,0x3fc
100087b0:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100087b6:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100087bc:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
100087c0:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
100087c7:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
100087ce:	33 54 24 38          	xor    edx,DWORD PTR [esp+0x38]
100087d2:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
100087d9:	31 ca                	xor    edx,ecx
100087db:	89 d7                	mov    edi,edx
100087dd:	c1 ef 06             	shr    edi,0x6
100087e0:	89 d5                	mov    ebp,edx
100087e2:	c1 ed 0e             	shr    ebp,0xe
100087e5:	89 d6                	mov    esi,edx
100087e7:	c1 ee 16             	shr    esi,0x16
100087ea:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
100087f1:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100087f7:	81 e7 fc 03 00 00    	and    edi,0x3fc
100087fd:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008803:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008809:	8b 74 34 58          	mov    esi,DWORD PTR [esp+esi*1+0x58]
1000880d:	03 b4 2c 58 04 00 00 	add    esi,DWORD PTR [esp+ebp*1+0x458]
10008814:	33 b4 3c 58 08 00 00 	xor    esi,DWORD PTR [esp+edi*1+0x858]
1000881b:	33 44 24 3c          	xor    eax,DWORD PTR [esp+0x3c]
1000881f:	03 b4 0c 58 0c 00 00 	add    esi,DWORD PTR [esp+ecx*1+0xc58]
10008826:	31 f0                	xor    eax,esi
10008828:	89 c5                	mov    ebp,eax
1000882a:	c1 ed 06             	shr    ebp,0x6
1000882d:	89 c1                	mov    ecx,eax
1000882f:	c1 e9 0e             	shr    ecx,0xe
10008832:	89 c6                	mov    esi,eax
10008834:	c1 ee 16             	shr    esi,0x16
10008837:	8d 3c 85 00 00 00 00 	lea    edi,[eax*4+0x0]
1000883e:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008844:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000884a:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10008850:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008856:	8b 74 34 58          	mov    esi,DWORD PTR [esp+esi*1+0x58]
1000885a:	03 b4 0c 58 04 00 00 	add    esi,DWORD PTR [esp+ecx*1+0x458]
10008861:	33 b4 2c 58 08 00 00 	xor    esi,DWORD PTR [esp+ebp*1+0x858]
10008868:	33 54 24 40          	xor    edx,DWORD PTR [esp+0x40]
1000886c:	03 b4 3c 58 0c 00 00 	add    esi,DWORD PTR [esp+edi*1+0xc58]
10008873:	89 f1                	mov    ecx,esi
10008875:	31 d1                	xor    ecx,edx
10008877:	33 44 24 44          	xor    eax,DWORD PTR [esp+0x44]
1000887b:	4b                   	dec    ebx
1000887c:	0f 85 21 fb ff ff    	jne    100083a3 <_crypt_blowfish_rn+0x282f>
10008882:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
10008886:	89 84 9c e8 10 00 00 	mov    DWORD PTR [esp+ebx*4+0x10e8],eax
1000888d:	89 8c 9c ec 10 00 00 	mov    DWORD PTR [esp+ebx*4+0x10ec],ecx
10008894:	83 44 24 48 02       	add    DWORD PTR [esp+0x48],0x2
10008899:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
1000889d:	83 f8 06             	cmp    eax,0x6
100088a0:	0f 85 e2 fa ff ff    	jne    10008388 <_crypt_blowfish_rn+0x2814>
100088a6:	b9 07 00 00 00       	mov    ecx,0x7
100088ab:	8b bc 24 1c 11 00 00 	mov    edi,DWORD PTR [esp+0x111c]
100088b2:	8b b4 24 18 11 00 00 	mov    esi,DWORD PTR [esp+0x1118]
100088b9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100088bb:	8b 84 24 18 11 00 00 	mov    eax,DWORD PTR [esp+0x1118]
100088c2:	0f be 40 1c          	movsx  eax,BYTE PTR [eax+0x1c]
100088c6:	8a 80 a0 a6 00 10    	mov    al,BYTE PTR [eax+0x1000a6a0]	100088c8: R_386_32	.data
100088cc:	83 e0 30             	and    eax,0x30
100088cf:	8a 80 60 a6 00 10    	mov    al,BYTE PTR [eax+0x1000a660]	100088d1: R_386_32	.data
100088d5:	88 04 24             	mov    BYTE PTR [esp],al
100088d8:	8b 9c 24 1c 11 00 00 	mov    ebx,DWORD PTR [esp+0x111c]
100088df:	88 43 1c             	mov    BYTE PTR [ebx+0x1c],al
100088e2:	6a 06                	push   0x6
100088e4:	8d 74 24 5c          	lea    esi,[esp+0x5c]
100088e8:	8d 9c 24 ec 10 00 00 	lea    ebx,[esp+0x10ec]
100088ef:	53                   	push   ebx
100088f0:	e8 f5 d1 ff ff       	call   10005aea <BF_swap>
100088f5:	6a 17                	push   0x17
100088f7:	53                   	push   ebx
100088f8:	8b 84 24 2c 11 00 00 	mov    eax,DWORD PTR [esp+0x112c]
100088ff:	83 c0 1d             	add    eax,0x1d
10008902:	50                   	push   eax
10008903:	e8 3d d1 ff ff       	call   10005a45 <BF_encode>
10008908:	8b 84 24 30 11 00 00 	mov    eax,DWORD PTR [esp+0x1130]
1000890f:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
10008913:	68 a8 10 00 00       	push   0x10a8
10008918:	56                   	push   esi
10008919:	e8 0b d0 ff ff       	call   10005929 <clean>
1000891e:	83 c4 1c             	add    esp,0x1c
10008921:	8b 84 24 1c 11 00 00 	mov    eax,DWORD PTR [esp+0x111c]
10008928:	eb 29                	jmp    10008953 <_crypt_blowfish_rn+0x2ddf>
1000892a:	c7 05 00 00 00 00 22 00 00 00 	mov    DWORD PTR ds:0x0,0x22	1000892c: R_386_32	_bcrypt_errno
10008934:	b8 00 00 00 00       	mov    eax,0x0
10008939:	eb 18                	jmp    10008953 <_crypt_blowfish_rn+0x2ddf>
1000893b:	80 fa 31             	cmp    dl,0x31
1000893e:	0f 8e a3 d2 ff ff    	jle    10005be7 <_crypt_blowfish_rn+0x73>
10008944:	c7 05 00 00 00 00 16 00 00 00 	mov    DWORD PTR ds:0x0,0x16	10008946: R_386_32	_bcrypt_errno
1000894e:	b8 00 00 00 00       	mov    eax,0x0
10008953:	81 c4 00 11 00 00    	add    esp,0x1100
10008959:	5b                   	pop    ebx
1000895a:	5e                   	pop    esi
1000895b:	5f                   	pop    edi
1000895c:	5d                   	pop    ebp
1000895d:	c3                   	ret    
1000895e:	6a 10                	push   0x10
10008960:	8d 84 24 ec 10 00 00 	lea    eax,[esp+0x10ec]
10008967:	50                   	push   eax
10008968:	e8 bc cf ff ff       	call   10005929 <clean>
1000896d:	c7 05 00 00 00 00 16 00 00 00 	mov    DWORD PTR ds:0x0,0x16	1000896f: R_386_32	_bcrypt_errno
10008977:	83 c4 08             	add    esp,0x8
1000897a:	b8 00 00 00 00       	mov    eax,0x0
1000897f:	eb d2                	jmp    10008953 <_crypt_blowfish_rn+0x2ddf>

10008981 <_crypt_gensalt_blowfish_rn>:
10008981:	53                   	push   ebx
10008982:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
10008986:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
1000898a:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
1000898f:	7e 19                	jle    100089aa <_crypt_gensalt_blowfish_rn+0x29>
10008991:	83 7c 24 18 1d       	cmp    DWORD PTR [esp+0x18],0x1d
10008996:	0f 8e 88 00 00 00    	jle    10008a24 <_crypt_gensalt_blowfish_rn+0xa3>
1000899c:	85 c9                	test   ecx,ecx
1000899e:	74 33                	je     100089d3 <_crypt_gensalt_blowfish_rn+0x52>
100089a0:	8d 41 fc             	lea    eax,[ecx-0x4]
100089a3:	83 f8 1b             	cmp    eax,0x1b
100089a6:	76 30                	jbe    100089d8 <_crypt_gensalt_blowfish_rn+0x57>
100089a8:	eb 07                	jmp    100089b1 <_crypt_gensalt_blowfish_rn+0x30>
100089aa:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
100089af:	7e 03                	jle    100089b4 <_crypt_gensalt_blowfish_rn+0x33>
100089b1:	c6 03 00             	mov    BYTE PTR [ebx],0x0
100089b4:	83 7c 24 18 1d       	cmp    DWORD PTR [esp+0x18],0x1d
100089b9:	7e 11                	jle    100089cc <_crypt_gensalt_blowfish_rn+0x4b>
100089bb:	b8 16 00 00 00       	mov    eax,0x16
100089c0:	a3 00 00 00 00       	mov    ds:0x0,eax	100089c1: R_386_32	_bcrypt_errno
100089c5:	b8 00 00 00 00       	mov    eax,0x0
100089ca:	eb 56                	jmp    10008a22 <_crypt_gensalt_blowfish_rn+0xa1>
100089cc:	b8 22 00 00 00       	mov    eax,0x22
100089d1:	eb ed                	jmp    100089c0 <_crypt_gensalt_blowfish_rn+0x3f>
100089d3:	b9 05 00 00 00       	mov    ecx,0x5
100089d8:	c6 03 24             	mov    BYTE PTR [ebx],0x24
100089db:	c6 43 01 32          	mov    BYTE PTR [ebx+0x1],0x32
100089df:	c6 43 02 61          	mov    BYTE PTR [ebx+0x2],0x61
100089e3:	c6 43 03 24          	mov    BYTE PTR [ebx+0x3],0x24
100089e7:	b8 cd cc cc cc       	mov    eax,0xcccccccd
100089ec:	f7 e1                	mul    ecx
100089ee:	89 d0                	mov    eax,edx
100089f0:	c1 e8 03             	shr    eax,0x3
100089f3:	8d 50 30             	lea    edx,[eax+0x30]
100089f6:	88 53 04             	mov    BYTE PTR [ebx+0x4],dl
100089f9:	8d 04 80             	lea    eax,[eax+eax*4]
100089fc:	01 c0                	add    eax,eax
100089fe:	29 c1                	sub    ecx,eax
10008a00:	83 c1 30             	add    ecx,0x30
10008a03:	88 4b 05             	mov    BYTE PTR [ebx+0x5],cl
10008a06:	c6 43 06 24          	mov    BYTE PTR [ebx+0x6],0x24
10008a0a:	6a 10                	push   0x10
10008a0c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
10008a10:	8d 43 07             	lea    eax,[ebx+0x7]
10008a13:	50                   	push   eax
10008a14:	e8 2c d0 ff ff       	call   10005a45 <BF_encode>
10008a19:	c6 43 1d 00          	mov    BYTE PTR [ebx+0x1d],0x0
10008a1d:	83 c4 0c             	add    esp,0xc
10008a20:	89 d8                	mov    eax,ebx
10008a22:	5b                   	pop    ebx
10008a23:	c3                   	ret    
10008a24:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
10008a29:	7f 86                	jg     100089b1 <_crypt_gensalt_blowfish_rn+0x30>
10008a2b:	b8 22 00 00 00       	mov    eax,0x22
10008a30:	eb 8e                	jmp    100089c0 <_crypt_gensalt_blowfish_rn+0x3f>

10008a32 <bcrypt_gensalt>:
10008a32:	57                   	push   edi
10008a33:	56                   	push   esi
10008a34:	53                   	push   ebx
10008a35:	83 ec 10             	sub    esp,0x10
10008a38:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
10008a3c:	89 e3                	mov    ebx,esp
10008a3e:	8d 74 24 10          	lea    esi,[esp+0x10]
10008a42:	e8 fc ff ff ff       	call   10008a43 <bcrypt_gensalt+0x11>	10008a43: R_386_PC32	_bcrypt_rand
10008a47:	88 03                	mov    BYTE PTR [ebx],al
10008a49:	43                   	inc    ebx
10008a4a:	39 f3                	cmp    ebx,esi
10008a4c:	75 f4                	jne    10008a42 <bcrypt_gensalt+0x10>
10008a4e:	8d 47 fc             	lea    eax,[edi-0x4]
10008a51:	83 f8 1b             	cmp    eax,0x1b
10008a54:	76 05                	jbe    10008a5b <bcrypt_gensalt+0x29>
10008a56:	bf 0c 00 00 00       	mov    edi,0xc
10008a5b:	83 ec 0c             	sub    esp,0xc
10008a5e:	6a 40                	push   0x40
10008a60:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
10008a64:	6a 10                	push   0x10
10008a66:	8d 44 24 18          	lea    eax,[esp+0x18]
10008a6a:	50                   	push   eax
10008a6b:	57                   	push   edi
10008a6c:	e8 10 ff ff ff       	call   10008981 <_crypt_gensalt_blowfish_rn>
10008a71:	85 c0                	test   eax,eax
10008a73:	0f 94 c0             	sete   al
10008a76:	0f b6 c0             	movzx  eax,al
10008a79:	83 c4 30             	add    esp,0x30
10008a7c:	5b                   	pop    ebx
10008a7d:	5e                   	pop    esi
10008a7e:	5f                   	pop    edi
10008a7f:	c3                   	ret    

10008a80 <bcrypt_hashpw>:
10008a80:	6a 40                	push   0x40
10008a82:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
10008a86:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
10008a8a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
10008a8e:	e8 e1 d0 ff ff       	call   10005b74 <_crypt_blowfish_rn>
10008a93:	83 c4 10             	add    esp,0x10
10008a96:	85 c0                	test   eax,eax
10008a98:	0f 94 c0             	sete   al
10008a9b:	0f b6 c0             	movzx  eax,al
10008a9e:	c3                   	ret    
10008a9f:	90                   	nop

10008aa0 <TERMINAL_KEYBUFFER_IN_SIZE>:
10008aa0:	80 00 00 00                                         ....

10008aa4 <TERMINAL_KEYBUFFER_OUT_SIZE>:
10008aa4:	80 00 00 00 2e 00 2e 2e 00 2f 00 43 6f 75 6c 64     ........./.Could
10008ab4:	6e 27 74 20 6f 70 65 6e 20 62 61 73 65 20 70 61     n't open base pa
10008ac4:	74 68 2e 0a 00 25 73 20 2d 3e 20 25 73 0a 00 43     th...%s -> %s..C
10008ad4:	4f 55 4c 44 20 4e 4f 54 20 43 52 45 41 54 45 00     OULD NOT CREATE.
10008ae4:	43 4f 55 4c 44 20 4e 4f 54 20 43 4f 50 59 00 4e     COULD NOT COPY.N
10008af4:	4f 20 4d 45 4d 4f 52 59 00 42 61 63 6b 75 70 00     O MEMORY.Backup.
10008b04:	43 3a 2f 42 61 6e 61 6e 61 2f 53 79 73 74 65 6d     C:/Banana/System
10008b14:	2f 42 61 63 6b 75 70 2f 00 30 31 32 33 34 35 36     /Backup/.0123456
10008b24:	37 38 39 41 42 43 44 45 46 00 43 3a 2f 55 73 65     789ABCDEF.C:/Use
10008b34:	72 73 2f 00 2f 44 65 73 6b 74 6f 70 00 2f 44 6f     rs/./Desktop./Do
10008b44:	63 75 6d 65 6e 74 73 00 2f 44 6f 77 6e 6c 6f 61     cuments./Downloa
10008b54:	64 73 00 2f 50 68 6f 74 6f 73 00 2f 54 72 61 73     ds./Photos./Tras
10008b64:	68 20 42 69 6e 00 2f 4d 75 73 69 63 00 2f 4d 6f     h Bin./Music./Mo
10008b74:	76 69 65 73 00 43 3a 2f 42 61 6e 61 6e 61 2f 52     vies.C:/Banana/R
10008b84:	65 67 69 73 74 72 79 2f 55 73 65 72 2f 00 00 00     egistry/User/...
10008b94:	43 3a 2f 42 61 6e 61 6e 61 2f 52 65 67 69 73 74     C:/Banana/Regist
10008ba4:	72 79 2f 44 65 66 61 75 6c 74 55 73 65 72 00 00     ry/DefaultUser..
10008bb4:	43 68 65 63 6b 69 6e 67 0a 20 73 79 73 74 65 6d     Checking. system
10008bc4:	0a 20 72 65 71 75 69 72 65 6d 65 6e 74 73 0a 0a     . requirements..
10008bd4:	20 4c 65 67 61 6c 0a 20 6e 6f 74 69 63 65 73 0a      Legal. notices.
10008be4:	0a 20 43 68 6f 6f 73 69 6e 67 20 61 0a 20 70 61     . Choosing a. pa
10008bf4:	72 74 69 74 69 6f 6e 0a 0a 20 46 6f 72 6d 61 74     rtition.. Format
10008c04:	74 69 6e 67 0a 0a 20 43 6f 70 79 69 6e 67 20 66     ting.. Copying f
10008c14:	69 6c 65 73 0a 0a 20 52 65 73 74 61 72 74 69 6e     iles.. Restartin
10008c24:	67 0a 20 79 6f 75 72 20 63 6f 6d 70 75 74 65 72     g. your computer
10008c34:	0a 0a 00 20 46 69 6e 61 6c 69 73 69 6e 67 20 74     ... Finalising t
10008c44:	68 65 0a 20 69 6e 73 74 61 6c 6c 61 74 69 6f 6e     he. installation
10008c54:	00 00 00 00 50 6c 65 61 73 65 20 77 61 69 74 20     ....Please wait 
10008c64:	77 68 69 6c 65 20 74 68 65 20 69 6e 73 74 61 6c     while the instal
10008c74:	6c 20 66 69 6e 69 73 68 65 73 2e 00 10 20 00 20     l finishes... . 
10008c84:	20 00 41 6c 6c 6f 63 61 74 69 6e 67 20 74 68 65      .Allocating the
10008c94:	20 73 77 61 70 66 69 6c 65 00 55 70 64 61 74 69      swapfile.Updati
10008ca4:	6e 67 20 74 68 65 20 72 65 67 69 73 74 72 79 00     ng the registry.
10008cb4:	43 72 65 61 74 69 6e 67 20 75 73 65 72 20 61 63     Creating user ac
10008cc4:	63 6f 75 6e 74 00 49 6e 73 74 61 6c 6c 69 6e 67     count.Installing
10008cd4:	20 70 61 63 6b 61 67 65 73 00 42 61 63 6b 69 6e      packages.Backin
10008ce4:	67 20 75 70 20 73 79 73 74 65 6d 20 66 69 6c 65     g up system file
10008cf4:	73 00 46 69 6e 69 73 68 69 6e 67 20 74 6f 75 63     s.Finishing touc
10008d04:	68 65 73 00 51 51 2d 30 30 30 2d 30 30 30 2d 30     hes.QQ-000-000-0
10008d14:	30 30 2d 51 00 00 00 00 43 3a 2f 42 61 6e 61 6e     00-Q....C:/Banan
10008d24:	61 2f 53 79 73 74 65 6d 2f 74 69 6d 65 7a 6f 6e     a/System/timezon
10008d34:	65 73 2e 74 78 74 00 73 69 7a 20 3d 20 25 64 0a     es.txt.siz = %d.
10008d44:	00 20 00 2e 2e 2e 20 00 25 64 3b 20 25 73 0a 00     . .... .%d; %s..
10008d54:	53 65 74 74 69 6e 67 20 75 70 20 74 68 65 20 73     Setting up the s
10008d64:	79 73 74 65 6d 20 66 6f 72 20 74 68 65 20 66 69     ystem for the fi
10008d74:	72 73 74 20 74 69 6d 65 00 0a 0a 0a 0a 0a 0a 00     rst time........
10008d84:	54 65 73 74 00 41 41 2d 30 30 30 30 30 2d 30 30     Test.AA-00000-00
10008d94:	30 30 30 2d 41 00 57 57 2d 38 38 33 38 38 2d 35     000-A.WW-88388-5
10008da4:	35 35 35 35 2d 4e 00 42 61 6e 61 6e 61 20 53 65     5555-N.Banana Se
10008db4:	74 75 70 00 50 6c 65 61 73 65 20 65 6e 74 65 72     tup.Please enter
10008dc4:	20 79 6f 75 72 20 64 65 74 61 69 6c 73 2e 20 50      your details. P
10008dd4:	72 65 73 73 20 54 41 42 20 74 6f 20 73 77 69 74     ress TAB to swit
10008de4:	63 68 00 62 65 74 77 65 65 6e 20 66 69 65 6c 64     ch.between field
10008df4:	73 2e 00 4e 61 6d 65 00 43 6f 6d 70 61 6e 79 00     s..Name.Company.
10008e04:	50 61 73 73 77 6f 72 64 00 43 6f 6e 66 69 72 6d     Password.Confirm
10008e14:	00 70 61 73 73 77 6f 72 64 00 00 00 20 20 20 20     .password...    
10008e24:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
10008e34:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
10008e44:	00 20 11 00 20 20 20 00 2a 00 50 72 65 73 73 20     . ..   .*.Press 
10008e54:	45 4e 54 45 52 20 74 6f 20 73 75 62 6d 69 74 00     ENTER to submit.
10008e64:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
10008e74:	20 20 20 20 20 20 00 20 20 20 4f 4b 20 20 20 00           .   OK   .
10008e84:	20 20 11 00 43 4f 55 4c 44 20 4e 4f 54 20 53 41       ..COULD NOT SA
10008e94:	56 45 00 59 4f 55 52 20 50 41 53 53 57 4f 52 44     VE.YOUR PASSWORD
10008ea4:	20 28 41 29 00 59 4f 55 52 20 50 41 53 53 57 4f      (A).YOUR PASSWO
10008eb4:	52 44 20 28 42 29 00 44 61 74 65 20 61 6e 64 20     RD (B).Date and 
10008ec4:	54 69 6d 65 00 31 34 2f 30 35 2f 32 30 32 31 20     Time.14/05/2021 
10008ed4:	31 38 3a 35 35 3a 30 30 00 00 00 00 50 6c 65 61     18:55:00....Plea
10008ee4:	73 65 20 65 6e 74 65 72 20 74 68 65 20 63 75 72     se enter the cur
10008ef4:	72 65 6e 74 20 64 61 74 65 20 61 6e 64 20 74 69     rent date and ti
10008f04:	6d 65 2c 00 61 6e 64 20 74 68 65 6e 20 70 72 65     me,.and then pre
10008f14:	73 73 20 45 4e 54 45 52 2e 00 44 44 2f 4d 4d 2f     ss ENTER..DD/MM/
10008f24:	59 59 59 59 20 48 48 3a 4d 4d 3a 53 53 00 45 53     YYYY HH:MM:SS.ES
10008f34:	43 3a 20 47 6f 20 62 61 63 6b 20 61 20 73 63 72     C: Go back a scr
10008f44:	65 65 6e 00 50 6c 65 61 73 65 20 73 65 6c 65 63     een.Please selec
10008f54:	74 20 79 6f 75 72 20 74 69 6d 65 7a 6f 6e 65 20     t your timezone 
10008f64:	61 6e 64 20 74 68 65 6e 20 70 72 65 73 73 20 45     and then press E
10008f74:	4e 54 45 52 2e 00 55 73 65 72 20 49 6e 74 65 72     NTER..User Inter
10008f84:	66 61 63 65 00 00 00 00 50 6c 65 61 73 65 20 73     face....Please s
10008f94:	65 6c 65 63 74 20 74 68 65 20 75 73 65 72 20 69     elect the user i
10008fa4:	6e 74 65 72 66 61 63 65 20 79 6f 75 20 77 61 6e     nterface you wan
10008fb4:	74 20 42 61 6e 61 6e 61 00 00 00 00 74 6f 20 62     t Banana....to b
10008fc4:	6f 6f 74 20 69 6e 74 6f 20 62 79 20 64 65 66 61     oot into by defa
10008fd4:	75 6c 74 20 77 68 65 6e 20 79 6f 75 20 73 74 61     ult when you sta
10008fe4:	72 74 20 74 68 65 20 63 6f 6d 70 75 74 65 72 2e     rt the computer.
10008ff4:	00 49 6e 76 61 6c 69 64 20 50 72 6f 64 75 63 74     .Invalid Product
10009004:	20 4b 65 79 00 00 00 00 59 6f 75 20 64 6f 20 6e      Key....You do n
10009014:	6f 74 20 68 61 76 65 20 61 20 76 61 6c 69 64 20     ot have a valid 
10009024:	70 72 6f 64 75 63 74 20 6b 65 79 2e 0a 00 00 00     product key.....
10009034:	59 6f 75 20 6e 65 65 64 20 61 20 76 61 6c 69 64     You need a valid
10009044:	20 70 72 6f 64 75 63 74 20 6b 65 79 20 69 6e 20      product key in 
10009054:	6f 72 64 65 72 20 74 6f 00 75 73 65 20 42 61 6e     order to.use Ban
10009064:	61 6e 61 2e 00 00 00 00 50 72 65 73 73 20 45 4e     ana.....Press EN
10009074:	54 45 52 20 74 6f 20 72 65 2d 65 6e 74 65 72 20     TER to re-enter 
10009084:	79 6f 75 72 20 70 72 6f 64 75 63 74 20 6b 65 79     your product key
10009094:	2e 00 50 72 6f 64 75 63 74 20 4b 65 79 00 00 00     ..Product Key...
100090a4:	50 6c 65 61 73 65 20 65 6e 74 65 72 20 79 6f 75     Please enter you
100090b4:	72 20 70 72 6f 64 75 63 74 20 6b 65 79 20 62 65     r product key be
100090c4:	6c 6f 77 2c 00 00 00 00 54 68 65 20 65 6e 74 65     low,....The ente
100090d4:	72 65 64 20 70 72 6f 64 75 63 74 20 6b 65 79 20     red product key 
100090e4:	77 61 73 20 69 6e 76 61 6c 69 64 2e 00 00 00 00     was invalid.....
100090f4:	50 72 65 73 73 20 61 6e 79 20 6b 65 79 20 74 6f     Press any key to
10009104:	20 63 6f 6e 74 69 6e 75 65 20 61 6e 64 20 74 68      continue and th
10009114:	65 6e 00 00 65 6e 74 65 72 20 74 68 65 20 70 72     en..enter the pr
10009124:	6f 64 75 63 74 20 6b 65 79 20 63 6f 72 72 65 63     oduct key correc
10009134:	74 6c 79 2e 00 46 69 6e 61 6c 69 73 69 6e 67 20     tly..Finalising 
10009144:	49 6e 73 74 61 6c 6c 61 74 69 6f 6e 00 40 6d 65     Installation.@me
10009154:	6d 6f 72 79 3a 73 77 61 70 66 69 6c 65 00 73 79     mory:swapfile.sy
10009164:	73 74 65 6d 00 43 3a 2f 42 61 6e 61 6e 61 2f 52     stem.C:/Banana/R
10009174:	65 67 69 73 74 72 79 2f 53 79 73 74 65 6d 00 43     egistry/System.C
10009184:	3a 2f 42 61 6e 61 6e 61 2f 52 65 67 69 73 74 72     :/Banana/Registr
10009194:	79 2f 55 73 65 72 00 00 43 3a 2f 42 61 6e 61 6e     y/User..C:/Banan
100091a4:	61 2f 52 65 67 69 73 74 72 79 2f 44 65 66 61 75     a/Registry/Defau
100091b4:	6c 74 53 79 73 74 65 6d 00 00 00 00 20 42 6f 6f     ltSystem.... Boo
100091c4:	74 20 74 6f 20 63 6f 6d 6d 61 6e 64 20 6c 69 6e     t to command lin
100091d4:	65 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20     e               
100091e4:	00 00 00 00 20 42 6f 6f 74 20 74 6f 20 67 72 61     .... Boot to gra
100091f4:	70 68 69 63 61 6c 20 69 6e 74 65 72 66 61 63 65     phical interface
10009204:	20 28 56 47 41 29 20 20 00 00 00 00 20 42 6f 6f      (VGA)  .... Boo
10009214:	74 20 74 6f 20 67 72 61 70 68 69 63 61 6c 20 69     t to graphical i
10009224:	6e 74 65 72 66 61 63 65 20 28 56 45 53 41 29 20     nterface (VESA) 
10009234:	00 00 00 00 c0 91 00 10 e8 91 00 10 10 92 00 10     ................	10009238: R_386_32	.text
	1000923c: R_386_32	.text
	10009240: R_386_32	.text
10009244:	4c 6f 61 64 69 6e 67 20 65 78 74 65 6e 73 69 6f     Loading extensio
10009254:	6e 73 2e 2e 2e 00 0a 0a 3a 0a 00 2f 25 73 0a 00     ns......:../%s..
10009264:	43 3a 2f 42 61 6e 61 6e 61 2f 53 79 73 74 65 6d     C:/Banana/System
10009274:	2f 73 65 74 75 70 69 73 64 2e 6f 6e 65 00 53 59     /setupisd.one.SY
10009284:	53 49 4e 49 54 20 46 41 49 4c 55 52 45 00 43 3a     SINIT FAILURE.C:
10009294:	2f 42 61 6e 61 6e 61 2f 53 79 73 74 65 6d 2f 63     /Banana/System/c
100092a4:	6f 6d 6d 61 6e 64 2e 65 78 65 00 43 3a 2f 44 45     ommand.exe.C:/DE
100092b4:	2e 42 55 47 00 43 3a 2f 42 61 6e 61 6e 61 2f 44     .BUG.C:/Banana/D
100092c4:	72 69 76 65 72 73 2f 00 43 3a 2f 42 61 6e 61 6e     rivers/.C:/Banan
100092d4:	61 2f 53 79 73 74 65 6d 2f 00 43 3a 2f 42 61 6e     a/System/.C:/Ban
100092e4:	61 6e 61 2f 52 65 67 69 73 74 72 79 2f 00 00 00     ana/Registry/...
100092f4:	43 3a 2f 42 61 6e 61 6e 61 2f 52 65 67 69 73 74     C:/Banana/Regist
10009304:	72 79 2f 53 79 73 74 65 6d 2f 53 59 53 54 45 4d     ry/System/SYSTEM
10009314:	2e 52 45 47 00 42 41 4e 41 4e 41 00 53 45 54 55     .REG.BANANA.SETU
10009324:	50 00 42 4f 4f 54 00 55 53 45 52 53 00 42 41 4e     P.BOOT.USERS.BAN
10009334:	41 4e 41 2f 55 53 45 52 53 00 41 4c 45 58 00 42     ANA/USERS.ALEX.B
10009344:	41 4e 41 4e 41 2f 53 45 54 55 50 00 4e 41 4d 45     ANANA/SETUP.NAME
10009354:	00 43 4f 4d 50 41 4e 59 00 50 52 4f 44 55 43 54     .COMPANY.PRODUCT
10009364:	4b 45 59 00 42 41 4e 41 4e 41 2f 55 53 45 52 53     KEY.BANANA/USERS
10009374:	2f 41 4c 45 58 00 50 41 53 53 57 4f 52 44 00 42     /ALEX.PASSWORD.B
10009384:	41 4e 41 4e 41 2f 42 4f 4f 54 00 41 55 54 4f 47     ANANA/BOOT.AUTOG
10009394:	55 49 00 42 41 4e 41 4e 41 2f 53 45 54 55 50 2f     UI.BANANA/SETUP/
100093a4:	4e 41 4d 45 00 42 41 4e 41 4e 41 2f 53 45 54 55     NAME.BANANA/SETU
100093b4:	50 2f 43 4f 4d 50 41 4e 59 00 42 41 4e 41 4e 41     P/COMPANY.BANANA
100093c4:	2f 53 45 54 55 50 2f 50 52 4f 44 55 43 54 4b 45     /SETUP/PRODUCTKE
100093d4:	59 00 42 41 4e 41 4e 41 2f 55 53 45 52 53 2f 41     Y.BANANA/USERS/A
100093e4:	4c 45 58 2f 50 41 53 53 57 4f 52 44 00 00 00 00     LEX/PASSWORD....
100093f4:	54 68 65 20 69 6e 73 74 61 6c 6c 61 74 69 6f 6e     The installation
10009404:	20 68 61 73 20 62 65 65 6e 20 63 6f 6d 70 6c 65      has been comple
10009414:	74 65 64 2e 0a 00 00 00 50 6c 65 61 73 65 20 70     ted.....Please p
10009424:	72 65 73 73 20 45 4e 54 45 52 20 74 6f 20 72 65     ress ENTER to re
10009434:	73 74 61 72 74 20 79 6f 75 72 20 63 6f 6d 70 75     start your compu
10009444:	74 65 72 00 61 6e 64 20 73 74 61 72 74 20 42 61     ter.and start Ba
10009454:	6e 61 6e 61 2e 00 00 00 50 4c 45 41 53 45 20 4d     nana....PLEASE M
10009464:	41 4e 55 41 4c 4c 59 20 52 45 53 54 41 52 54 20     ANUALLY RESTART 
10009474:	59 4f 55 52 20 43 4f 4d 50 55 54 45 52 00 42 41     YOUR COMPUTER.BA
10009484:	4e 41 4e 41 2f 42 4f 4f 54 2f 41 55 54 4f 47 55     NANA/BOOT/AUTOGU
10009494:	49 00 50 72 6f 64 75 63 74 20 4b 65 79 20 55 70     I.Product Key Up
100094a4:	64 61 74 65 64 00 00 00 59 6f 75 72 20 70 72 6f     dated...Your pro
100094b4:	64 75 63 74 20 6b 65 79 20 68 61 73 20 62 65 65     duct key has bee
100094c4:	6e 20 75 70 64 61 74 65 64 2e 0a 00 49 74 20 69     n updated...It i
100094d4:	73 20 73 61 66 65 20 74 6f 20 74 75 72 6e 20 6f     s safe to turn o
100094e4:	66 66 20 79 6f 75 72 20 50 43 00 63 61 6c 6c 00     ff your PC.call.
100094f4:	43 3a 2f 42 61 6e 61 6e 61 2f 53 79 73 74 65 6d     C:/Banana/System
10009504:	2f 69 6e 69 74 2e 62 61 74 00 00 00 92 92 00 10     /init.bat.......	10009510: R_386_32	.text
10009514:	ef 94 00 10 f4 94 00 10 00 00 00 00                 ............	10009514: R_386_32	.text
	10009518: R_386_32	.text
