
packages/system/32/0001/system.dll:     file format elf32-i386


Disassembly of section .text:

10000000 <beginx(void*)>:
10000000:	55                   	push   ebp
10000001:	89 e5                	mov    ebp,esp
10000003:	83 ec 08             	sub    esp,0x8
10000006:	83 ec 0c             	sub    esp,0xc
10000009:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000000c:	e8 fc ff ff ff       	call   1000000d <beginx(void*)+0xd>	1000000d: R_386_PC32	begin(void*)
10000011:	83 c4 10             	add    esp,0x10
10000014:	90                   	nop
10000015:	c9                   	leave  
10000016:	c3                   	ret    

10000017 <memcmp(void*, void*, unsigned long)>:
10000017:	55                   	push   ebp
10000018:	89 e5                	mov    ebp,esp
1000001a:	83 ec 10             	sub    esp,0x10
1000001d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000020:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
10000023:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000026:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
10000029:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
1000002c:	8d 50 ff             	lea    edx,[eax-0x1]
1000002f:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
10000032:	85 c0                	test   eax,eax
10000034:	74 12                	je     10000048 <memcmp(void*, void*, unsigned long)+0x31>
10000036:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000039:	8a 10                	mov    dl,BYTE PTR [eax]
1000003b:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
1000003e:	8a 00                	mov    al,BYTE PTR [eax]
10000040:	38 c2                	cmp    dl,al
10000042:	75 04                	jne    10000048 <memcmp(void*, void*, unsigned long)+0x31>
10000044:	b0 01                	mov    al,0x1
10000046:	eb 02                	jmp    1000004a <memcmp(void*, void*, unsigned long)+0x33>
10000048:	b0 00                	mov    al,0x0
1000004a:	84 c0                	test   al,al
1000004c:	74 08                	je     10000056 <memcmp(void*, void*, unsigned long)+0x3f>
1000004e:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
10000051:	ff 45 f8             	inc    DWORD PTR [ebp-0x8]
10000054:	eb d3                	jmp    10000029 <memcmp(void*, void*, unsigned long)+0x12>
10000056:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000059:	8a 00                	mov    al,BYTE PTR [eax]
1000005b:	0f b6 d0             	movzx  edx,al
1000005e:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
10000061:	8a 00                	mov    al,BYTE PTR [eax]
10000063:	0f b6 c0             	movzx  eax,al
10000066:	29 c2                	sub    edx,eax
10000068:	89 d0                	mov    eax,edx
1000006a:	c9                   	leave  
1000006b:	c3                   	ret    

1000006c <memmove>:
1000006c:	55                   	push   ebp
1000006d:	89 e5                	mov    ebp,esp
1000006f:	83 ec 10             	sub    esp,0x10
10000072:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000075:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
10000078:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
1000007b:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
1000007e:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
10000081:	3b 45 fc             	cmp    eax,DWORD PTR [ebp-0x4]
10000084:	76 1b                	jbe    100000a1 <memmove+0x35>
10000086:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
1000008a:	74 46                	je     100000d2 <memmove+0x66>
1000008c:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
1000008f:	8a 10                	mov    dl,BYTE PTR [eax]
10000091:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000094:	88 10                	mov    BYTE PTR [eax],dl
10000096:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
10000099:	ff 45 f8             	inc    DWORD PTR [ebp-0x8]
1000009c:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
1000009f:	eb e5                	jmp    10000086 <memmove+0x1a>
100000a1:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
100000a4:	3b 45 fc             	cmp    eax,DWORD PTR [ebp-0x4]
100000a7:	73 29                	jae    100000d2 <memmove+0x66>
100000a9:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
100000ac:	48                   	dec    eax
100000ad:	01 45 fc             	add    DWORD PTR [ebp-0x4],eax
100000b0:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
100000b3:	48                   	dec    eax
100000b4:	01 45 f8             	add    DWORD PTR [ebp-0x8],eax
100000b7:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
100000bb:	74 15                	je     100000d2 <memmove+0x66>
100000bd:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
100000c0:	8a 10                	mov    dl,BYTE PTR [eax]
100000c2:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100000c5:	88 10                	mov    BYTE PTR [eax],dl
100000c7:	ff 4d fc             	dec    DWORD PTR [ebp-0x4]
100000ca:	ff 4d f8             	dec    DWORD PTR [ebp-0x8]
100000cd:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
100000d0:	eb e5                	jmp    100000b7 <memmove+0x4b>
100000d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100000d5:	c9                   	leave  
100000d6:	c3                   	ret    

100000d7 <memset>:
100000d7:	55                   	push   ebp
100000d8:	89 e5                	mov    ebp,esp
100000da:	83 ec 10             	sub    esp,0x10
100000dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100000e0:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
100000e3:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
100000e7:	74 12                	je     100000fb <memset+0x24>
100000e9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100000ec:	88 c2                	mov    dl,al
100000ee:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100000f1:	88 10                	mov    BYTE PTR [eax],dl
100000f3:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
100000f6:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
100000f9:	eb e8                	jmp    100000e3 <memset+0xc>
100000fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100000fe:	c9                   	leave  
100000ff:	c3                   	ret    

10000100 <strlen>:
10000100:	55                   	push   ebp
10000101:	89 e5                	mov    ebp,esp
10000103:	83 ec 10             	sub    esp,0x10
10000106:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
1000010d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000110:	8a 00                	mov    al,BYTE PTR [eax]
10000112:	84 c0                	test   al,al
10000114:	74 0c                	je     10000122 <strlen+0x22>
10000116:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000119:	40                   	inc    eax
1000011a:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
1000011d:	ff 45 08             	inc    DWORD PTR [ebp+0x8]
10000120:	eb eb                	jmp    1000010d <strlen+0xd>
10000122:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000125:	c9                   	leave  
10000126:	c3                   	ret    

10000127 <strpbrk(char const*, char const*)>:
10000127:	55                   	push   ebp
10000128:	89 e5                	mov    ebp,esp
1000012a:	83 ec 10             	sub    esp,0x10
1000012d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000130:	8a 00                	mov    al,BYTE PTR [eax]
10000132:	84 c0                	test   al,al
10000134:	74 30                	je     10000166 <strpbrk(char const*, char const*)+0x3f>
10000136:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000139:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
1000013c:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000013f:	8a 00                	mov    al,BYTE PTR [eax]
10000141:	84 c0                	test   al,al
10000143:	74 18                	je     1000015d <strpbrk(char const*, char const*)+0x36>
10000145:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000148:	8a 10                	mov    dl,BYTE PTR [eax]
1000014a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000014d:	8a 00                	mov    al,BYTE PTR [eax]
1000014f:	38 c2                	cmp    dl,al
10000151:	75 05                	jne    10000158 <strpbrk(char const*, char const*)+0x31>
10000153:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000156:	eb 13                	jmp    1000016b <strpbrk(char const*, char const*)+0x44>
10000158:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
1000015b:	eb df                	jmp    1000013c <strpbrk(char const*, char const*)+0x15>
1000015d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000160:	40                   	inc    eax
10000161:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
10000164:	eb c7                	jmp    1000012d <strpbrk(char const*, char const*)+0x6>
10000166:	b8 00 00 00 00       	mov    eax,0x0
1000016b:	c9                   	leave  
1000016c:	c3                   	ret    

1000016d <strtok>:
1000016d:	55                   	push   ebp
1000016e:	89 e5                	mov    ebp,esp
10000170:	83 ec 10             	sub    esp,0x10
10000173:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000176:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
10000179:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000017c:	85 c0                	test   eax,eax
1000017e:	75 18                	jne    10000198 <strtok+0x2b>
10000180:	a1 00 00 00 00       	mov    eax,ds:0x0	10000181: R_386_32	SavedPtr
10000185:	85 c0                	test   eax,eax
10000187:	75 07                	jne    10000190 <strtok+0x23>
10000189:	b8 00 00 00 00       	mov    eax,0x0
1000018e:	eb 6f                	jmp    100001ff <strtok+0x92>
10000190:	a1 00 00 00 00       	mov    eax,ds:0x0	10000191: R_386_32	SavedPtr
10000195:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
10000198:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000019b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
1000019e:	50                   	push   eax
1000019f:	e8 fc ff ff ff       	call   100001a0 <strtok+0x33>	100001a0: R_386_PC32	strpbrk(char const*, char const*)
100001a4:	83 c4 08             	add    esp,0x8
100001a7:	a3 00 00 00 00       	mov    ds:0x0,eax	100001a8: R_386_32	SavedPtr
100001ac:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	100001ae: R_386_32	SavedPtr
100001b2:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100001b5:	39 c2                	cmp    edx,eax
100001b7:	75 22                	jne    100001db <strtok+0x6e>
100001b9:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100001bc:	8d 50 01             	lea    edx,[eax+0x1]
100001bf:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
100001c2:	c6 00 00             	mov    BYTE PTR [eax],0x0
100001c5:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100001c8:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
100001cb:	50                   	push   eax
100001cc:	e8 fc ff ff ff       	call   100001cd <strtok+0x60>	100001cd: R_386_PC32	strpbrk(char const*, char const*)
100001d1:	83 c4 08             	add    esp,0x8
100001d4:	a3 00 00 00 00       	mov    ds:0x0,eax	100001d5: R_386_32	SavedPtr
100001d9:	eb d1                	jmp    100001ac <strtok+0x3f>
100001db:	a1 00 00 00 00       	mov    eax,ds:0x0	100001dc: R_386_32	SavedPtr
100001e0:	85 c0                	test   eax,eax
100001e2:	74 16                	je     100001fa <strtok+0x8d>
100001e4:	a1 00 00 00 00       	mov    eax,ds:0x0	100001e5: R_386_32	SavedPtr
100001e9:	8d 50 01             	lea    edx,[eax+0x1]
100001ec:	89 15 00 00 00 00    	mov    DWORD PTR ds:0x0,edx	100001ee: R_386_32	SavedPtr
100001f2:	c6 00 00             	mov    BYTE PTR [eax],0x0
100001f5:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100001f8:	eb 05                	jmp    100001ff <strtok+0x92>
100001fa:	b8 00 00 00 00       	mov    eax,0x0
100001ff:	c9                   	leave  
10000200:	c3                   	ret    

10000201 <strcpy>:
10000201:	55                   	push   ebp
10000202:	89 e5                	mov    ebp,esp
10000204:	83 ec 10             	sub    esp,0x10
10000207:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000020a:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
1000020d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000210:	8a 00                	mov    al,BYTE PTR [eax]
10000212:	84 c0                	test   al,al
10000214:	74 12                	je     10000228 <strcpy+0x27>
10000216:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000219:	8a 10                	mov    dl,BYTE PTR [eax]
1000021b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000021e:	88 10                	mov    BYTE PTR [eax],dl
10000220:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
10000223:	ff 45 0c             	inc    DWORD PTR [ebp+0xc]
10000226:	eb e5                	jmp    1000020d <strcpy+0xc>
10000228:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000022b:	c6 00 00             	mov    BYTE PTR [eax],0x0
1000022e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000231:	c9                   	leave  
10000232:	c3                   	ret    

10000233 <strncpyxx(char*, char const*, unsigned long)>:
10000233:	55                   	push   ebp
10000234:	89 e5                	mov    ebp,esp
10000236:	83 ec 10             	sub    esp,0x10
10000239:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000023c:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
1000023f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000242:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
10000245:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
10000249:	74 23                	je     1000026e <strncpyxx(char*, char const*, unsigned long)+0x3b>
1000024b:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
1000024e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10000251:	8d 42 01             	lea    eax,[edx+0x1]
10000254:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
10000257:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000025a:	8d 48 01             	lea    ecx,[eax+0x1]
1000025d:	89 4d fc             	mov    DWORD PTR [ebp-0x4],ecx
10000260:	8a 12                	mov    dl,BYTE PTR [edx]
10000262:	88 10                	mov    BYTE PTR [eax],dl
10000264:	8a 00                	mov    al,BYTE PTR [eax]
10000266:	84 c0                	test   al,al
10000268:	74 04                	je     1000026e <strncpyxx(char*, char const*, unsigned long)+0x3b>
1000026a:	b0 01                	mov    al,0x1
1000026c:	eb 02                	jmp    10000270 <strncpyxx(char*, char const*, unsigned long)+0x3d>
1000026e:	b0 00                	mov    al,0x0
10000270:	84 c0                	test   al,al
10000272:	74 02                	je     10000276 <strncpyxx(char*, char const*, unsigned long)+0x43>
10000274:	eb cf                	jmp    10000245 <strncpyxx(char*, char const*, unsigned long)+0x12>
10000276:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
10000279:	8d 50 ff             	lea    edx,[eax-0x1]
1000027c:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
1000027f:	85 c0                	test   eax,eax
10000281:	0f 95 c0             	setne  al
10000284:	84 c0                	test   al,al
10000286:	74 0b                	je     10000293 <strncpyxx(char*, char const*, unsigned long)+0x60>
10000288:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000028b:	c6 00 00             	mov    BYTE PTR [eax],0x0
1000028e:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
10000291:	eb e3                	jmp    10000276 <strncpyxx(char*, char const*, unsigned long)+0x43>
10000293:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000296:	c9                   	leave  
10000297:	c3                   	ret    

10000298 <strcmp>:
10000298:	55                   	push   ebp
10000299:	89 e5                	mov    ebp,esp
1000029b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000029e:	8a 10                	mov    dl,BYTE PTR [eax]
100002a0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100002a3:	8a 00                	mov    al,BYTE PTR [eax]
100002a5:	38 c2                	cmp    dl,al
100002a7:	75 20                	jne    100002c9 <strcmp+0x31>
100002a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002ac:	8d 50 01             	lea    edx,[eax+0x1]
100002af:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
100002b2:	8a 00                	mov    al,BYTE PTR [eax]
100002b4:	84 c0                	test   al,al
100002b6:	0f 94 c0             	sete   al
100002b9:	84 c0                	test   al,al
100002bb:	74 07                	je     100002c4 <strcmp+0x2c>
100002bd:	b8 00 00 00 00       	mov    eax,0x0
100002c2:	eb 19                	jmp    100002dd <strcmp+0x45>
100002c4:	ff 45 0c             	inc    DWORD PTR [ebp+0xc]
100002c7:	eb d2                	jmp    1000029b <strcmp+0x3>
100002c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002cc:	8a 00                	mov    al,BYTE PTR [eax]
100002ce:	0f b6 d0             	movzx  edx,al
100002d1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100002d4:	8a 00                	mov    al,BYTE PTR [eax]
100002d6:	0f b6 c0             	movzx  eax,al
100002d9:	29 c2                	sub    edx,eax
100002db:	89 d0                	mov    eax,edx
100002dd:	5d                   	pop    ebp
100002de:	c3                   	ret    

100002df <strchr(char const*, int)>:
100002df:	55                   	push   ebp
100002e0:	89 e5                	mov    ebp,esp
100002e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002e5:	8a 00                	mov    al,BYTE PTR [eax]
100002e7:	84 c0                	test   al,al
100002e9:	74 16                	je     10000301 <strchr(char const*, int)+0x22>
100002eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002ee:	8a 00                	mov    al,BYTE PTR [eax]
100002f0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
100002f3:	38 d0                	cmp    al,dl
100002f5:	75 05                	jne    100002fc <strchr(char const*, int)+0x1d>
100002f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002fa:	eb 0a                	jmp    10000306 <strchr(char const*, int)+0x27>
100002fc:	ff 45 08             	inc    DWORD PTR [ebp+0x8]
100002ff:	eb e1                	jmp    100002e2 <strchr(char const*, int)+0x3>
10000301:	b8 00 00 00 00       	mov    eax,0x0
10000306:	5d                   	pop    ebp
10000307:	c3                   	ret    

10000308 <strncmp>:
10000308:	55                   	push   ebp
10000309:	89 e5                	mov    ebp,esp
1000030b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
1000030e:	8d 50 ff             	lea    edx,[eax-0x1]
10000311:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
10000314:	85 c0                	test   eax,eax
10000316:	74 12                	je     1000032a <strncmp+0x22>
10000318:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000031b:	8a 10                	mov    dl,BYTE PTR [eax]
1000031d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000320:	8a 00                	mov    al,BYTE PTR [eax]
10000322:	38 c2                	cmp    dl,al
10000324:	75 04                	jne    1000032a <strncmp+0x22>
10000326:	b0 01                	mov    al,0x1
10000328:	eb 02                	jmp    1000032c <strncmp+0x24>
1000032a:	b0 00                	mov    al,0x0
1000032c:	84 c0                	test   al,al
1000032e:	74 20                	je     10000350 <strncmp+0x48>
10000330:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000333:	8d 50 01             	lea    edx,[eax+0x1]
10000336:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
10000339:	8a 00                	mov    al,BYTE PTR [eax]
1000033b:	84 c0                	test   al,al
1000033d:	0f 94 c0             	sete   al
10000340:	84 c0                	test   al,al
10000342:	74 07                	je     1000034b <strncmp+0x43>
10000344:	b8 00 00 00 00       	mov    eax,0x0
10000349:	eb 19                	jmp    10000364 <strncmp+0x5c>
1000034b:	ff 45 0c             	inc    DWORD PTR [ebp+0xc]
1000034e:	eb bb                	jmp    1000030b <strncmp+0x3>
10000350:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000353:	8a 00                	mov    al,BYTE PTR [eax]
10000355:	0f b6 d0             	movzx  edx,al
10000358:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
1000035b:	8a 00                	mov    al,BYTE PTR [eax]
1000035d:	0f b6 c0             	movzx  eax,al
10000360:	29 c2                	sub    edx,eax
10000362:	89 d0                	mov    eax,edx
10000364:	5d                   	pop    ebp
10000365:	c3                   	ret    

10000366 <strcat>:
10000366:	55                   	push   ebp
10000367:	89 e5                	mov    ebp,esp
10000369:	83 ec 10             	sub    esp,0x10
1000036c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000036f:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
10000372:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000375:	8d 50 01             	lea    edx,[eax+0x1]
10000378:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
1000037b:	8a 00                	mov    al,BYTE PTR [eax]
1000037d:	84 c0                	test   al,al
1000037f:	0f 95 c0             	setne  al
10000382:	84 c0                	test   al,al
10000384:	74 02                	je     10000388 <strcat+0x22>
10000386:	eb ea                	jmp    10000372 <strcat+0xc>
10000388:	ff 4d fc             	dec    DWORD PTR [ebp-0x4]
1000038b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
1000038e:	8d 42 01             	lea    eax,[edx+0x1]
10000391:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
10000394:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000397:	8d 48 01             	lea    ecx,[eax+0x1]
1000039a:	89 4d fc             	mov    DWORD PTR [ebp-0x4],ecx
1000039d:	8a 12                	mov    dl,BYTE PTR [edx]
1000039f:	88 10                	mov    BYTE PTR [eax],dl
100003a1:	8a 00                	mov    al,BYTE PTR [eax]
100003a3:	84 c0                	test   al,al
100003a5:	0f 95 c0             	setne  al
100003a8:	84 c0                	test   al,al
100003aa:	74 02                	je     100003ae <strcat+0x48>
100003ac:	eb dd                	jmp    1000038b <strcat+0x25>
100003ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100003b1:	c9                   	leave  
100003b2:	c3                   	ret    

100003b3 <strncat(char*, char const*, unsigned long)>:
100003b3:	55                   	push   ebp
100003b4:	89 e5                	mov    ebp,esp
100003b6:	83 ec 10             	sub    esp,0x10
100003b9:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
100003bd:	74 5c                	je     1000041b <strncat(char*, char const*, unsigned long)+0x68>
100003bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100003c2:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
100003c5:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100003c8:	8d 50 01             	lea    edx,[eax+0x1]
100003cb:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
100003ce:	8a 00                	mov    al,BYTE PTR [eax]
100003d0:	84 c0                	test   al,al
100003d2:	0f 95 c0             	setne  al
100003d5:	84 c0                	test   al,al
100003d7:	74 02                	je     100003db <strncat(char*, char const*, unsigned long)+0x28>
100003d9:	eb ea                	jmp    100003c5 <strncat(char*, char const*, unsigned long)+0x12>
100003db:	ff 4d fc             	dec    DWORD PTR [ebp-0x4]
100003de:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
100003e1:	8d 42 01             	lea    eax,[edx+0x1]
100003e4:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
100003e7:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100003ea:	8d 48 01             	lea    ecx,[eax+0x1]
100003ed:	89 4d fc             	mov    DWORD PTR [ebp-0x4],ecx
100003f0:	8a 12                	mov    dl,BYTE PTR [edx]
100003f2:	88 10                	mov    BYTE PTR [eax],dl
100003f4:	8a 00                	mov    al,BYTE PTR [eax]
100003f6:	84 c0                	test   al,al
100003f8:	74 0d                	je     10000407 <strncat(char*, char const*, unsigned long)+0x54>
100003fa:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
100003fd:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
10000401:	74 04                	je     10000407 <strncat(char*, char const*, unsigned long)+0x54>
10000403:	b0 01                	mov    al,0x1
10000405:	eb 02                	jmp    10000409 <strncat(char*, char const*, unsigned long)+0x56>
10000407:	b0 00                	mov    al,0x0
10000409:	84 c0                	test   al,al
1000040b:	74 02                	je     1000040f <strncat(char*, char const*, unsigned long)+0x5c>
1000040d:	eb cf                	jmp    100003de <strncat(char*, char const*, unsigned long)+0x2b>
1000040f:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
10000413:	75 06                	jne    1000041b <strncat(char*, char const*, unsigned long)+0x68>
10000415:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000418:	c6 00 00             	mov    BYTE PTR [eax],0x0
1000041b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000041e:	c9                   	leave  
1000041f:	c3                   	ret    

10000420 <strstr(char*, char*)>:
10000420:	55                   	push   ebp
10000421:	89 e5                	mov    ebp,esp
10000423:	83 ec 10             	sub    esp,0x10
10000426:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10000429:	e8 fc ff ff ff       	call   1000042a <strstr(char*, char*)+0xa>	1000042a: R_386_PC32	strlen
1000042e:	83 c4 04             	add    esp,0x4
10000431:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
10000434:	83 7d fc 00          	cmp    DWORD PTR [ebp-0x4],0x0
10000438:	75 05                	jne    1000043f <strstr(char*, char*)+0x1f>
1000043a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000043d:	eb 3f                	jmp    1000047e <strstr(char*, char*)+0x5e>
1000043f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000442:	50                   	push   eax
10000443:	e8 fc ff ff ff       	call   10000444 <strstr(char*, char*)+0x24>	10000444: R_386_PC32	strlen
10000448:	83 c4 04             	add    esp,0x4
1000044b:	39 45 fc             	cmp    DWORD PTR [ebp-0x4],eax
1000044e:	77 29                	ja     10000479 <strstr(char*, char*)+0x59>
10000450:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000453:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
10000456:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10000459:	50                   	push   eax
1000045a:	e8 fc ff ff ff       	call   1000045b <strstr(char*, char*)+0x3b>	1000045b: R_386_PC32	memcmp(void*, void*, unsigned long)
1000045f:	83 c4 0c             	add    esp,0xc
10000462:	85 c0                	test   eax,eax
10000464:	0f 94 c0             	sete   al
10000467:	84 c0                	test   al,al
10000469:	74 05                	je     10000470 <strstr(char*, char*)+0x50>
1000046b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000046e:	eb 0e                	jmp    1000047e <strstr(char*, char*)+0x5e>
10000470:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000473:	40                   	inc    eax
10000474:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
10000477:	eb c6                	jmp    1000043f <strstr(char*, char*)+0x1f>
10000479:	b8 00 00 00 00       	mov    eax,0x0
1000047e:	c9                   	leave  
1000047f:	c3                   	ret    

10000480 <rmtree(char*)>:
10000480:	55                   	push   ebp
10000481:	89 e5                	mov    ebp,esp
10000483:	53                   	push   ebx
10000484:	81 ec 64 02 00 00    	sub    esp,0x264
1000048a:	68 2c 01 00 00       	push   0x12c
1000048f:	6a 00                	push   0x0
10000491:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
10000497:	50                   	push   eax
10000498:	e8 fc ff ff ff       	call   10000499 <rmtree(char*)+0x19>	10000499: R_386_PC32	memset
1000049d:	83 c4 0c             	add    esp,0xc
100004a0:	8d 85 a8 fd ff ff    	lea    eax,[ebp-0x258]
100004a6:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
100004a9:	83 ec 0c             	sub    esp,0xc
100004ac:	68 14 01 00 00       	push   0x114
100004b1:	e8 fc ff ff ff       	call   100004b2 <rmtree(char*)+0x32>	100004b2: R_386_PC32	operator new(unsigned long)
100004b6:	83 c4 10             	add    esp,0x10
100004b9:	89 c3                	mov    ebx,eax
100004bb:	b8 00 20 00 c2       	mov    eax,0xc2002000
100004c0:	8b 00                	mov    eax,DWORD PTR [eax]
100004c2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
100004c5:	83 ec 04             	sub    esp,0x4
100004c8:	50                   	push   eax
100004c9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100004cc:	53                   	push   ebx
100004cd:	e8 fc ff ff ff       	call   100004ce <rmtree(char*)+0x4e>	100004ce: R_386_PC32	Directory::Directory(char const*, Process*)
100004d2:	83 c4 10             	add    esp,0x10
100004d5:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
100004d8:	83 ec 0c             	sub    esp,0xc
100004db:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
100004de:	e8 fc ff ff ff       	call   100004df <rmtree(char*)+0x5f>	100004df: R_386_PC32	Directory::open()
100004e3:	83 c4 10             	add    esp,0x10
100004e6:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
100004e9:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
100004ed:	74 24                	je     10000513 <rmtree(char*)+0x93>
100004ef:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
100004f3:	0f 84 8b 01 00 00    	je     10000684 <rmtree(char*)+0x204>
100004f9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100004fc:	8b 00                	mov    eax,DWORD PTR [eax]
100004fe:	83 c0 08             	add    eax,0x8
10000501:	8b 00                	mov    eax,DWORD PTR [eax]
10000503:	83 ec 0c             	sub    esp,0xc
10000506:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000509:	ff d0                	call   eax
1000050b:	83 c4 10             	add    esp,0x10
1000050e:	e9 72 01 00 00       	jmp    10000685 <rmtree(char*)+0x205>
10000513:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10000516:	8b 00                	mov    eax,DWORD PTR [eax]
10000518:	83 c0 0c             	add    eax,0xc
1000051b:	8b 00                	mov    eax,DWORD PTR [eax]
1000051d:	83 ec 0c             	sub    esp,0xc
10000520:	8d 95 a4 fd ff ff    	lea    edx,[ebp-0x25c]
10000526:	52                   	push   edx
10000527:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
1000052a:	6a 00                	push   0x0
1000052c:	68 10 01 00 00       	push   0x110
10000531:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000534:	ff d0                	call   eax
10000536:	83 c4 20             	add    esp,0x20
10000539:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
1000053c:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
10000540:	0f 85 04 01 00 00    	jne    1000064a <rmtree(char*)+0x1ca>
10000546:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10000549:	83 c0 10             	add    eax,0x10
1000054c:	83 ec 08             	sub    esp,0x8
1000054f:	68 a0 97 00 10       	push   0x100097a0	10000550: R_386_32	.text
10000554:	50                   	push   eax
10000555:	e8 fc ff ff ff       	call   10000556 <rmtree(char*)+0xd6>	10000556: R_386_PC32	strcmp
1000055a:	83 c4 10             	add    esp,0x10
1000055d:	85 c0                	test   eax,eax
1000055f:	74 b2                	je     10000513 <rmtree(char*)+0x93>
10000561:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10000564:	83 c0 10             	add    eax,0x10
10000567:	83 ec 08             	sub    esp,0x8
1000056a:	68 a2 97 00 10       	push   0x100097a2	1000056b: R_386_32	.text
1000056f:	50                   	push   eax
10000570:	e8 fc ff ff ff       	call   10000571 <rmtree(char*)+0xf1>	10000571: R_386_PC32	strcmp
10000575:	83 c4 10             	add    esp,0x10
10000578:	85 c0                	test   eax,eax
1000057a:	74 97                	je     10000513 <rmtree(char*)+0x93>
1000057c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
1000057f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
10000582:	83 e0 02             	and    eax,0x2
10000585:	85 c0                	test   eax,eax
10000587:	74 17                	je     100005a0 <rmtree(char*)+0x120>
10000589:	83 ec 0c             	sub    esp,0xc
1000058c:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
10000592:	50                   	push   eax
10000593:	e8 fc ff ff ff       	call   10000594 <rmtree(char*)+0x114>	10000594: R_386_PC32	rmtree(char*)
10000598:	83 c4 10             	add    esp,0x10
1000059b:	e9 73 ff ff ff       	jmp    10000513 <rmtree(char*)+0x93>
100005a0:	83 ec 08             	sub    esp,0x8
100005a3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100005a6:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
100005ac:	50                   	push   eax
100005ad:	e8 fc ff ff ff       	call   100005ae <rmtree(char*)+0x12e>	100005ae: R_386_PC32	strcpy
100005b2:	83 c4 10             	add    esp,0x10
100005b5:	83 ec 08             	sub    esp,0x8
100005b8:	68 a5 97 00 10       	push   0x100097a5	100005b9: R_386_32	.text
100005bd:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
100005c3:	50                   	push   eax
100005c4:	e8 fc ff ff ff       	call   100005c5 <rmtree(char*)+0x145>	100005c5: R_386_PC32	strcat
100005c9:	83 c4 10             	add    esp,0x10
100005cc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
100005cf:	83 c0 10             	add    eax,0x10
100005d2:	83 ec 08             	sub    esp,0x8
100005d5:	50                   	push   eax
100005d6:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
100005dc:	50                   	push   eax
100005dd:	e8 fc ff ff ff       	call   100005de <rmtree(char*)+0x15e>	100005de: R_386_PC32	strcat
100005e2:	83 c4 10             	add    esp,0x10
100005e5:	83 ec 0c             	sub    esp,0xc
100005e8:	68 14 01 00 00       	push   0x114
100005ed:	e8 fc ff ff ff       	call   100005ee <rmtree(char*)+0x16e>	100005ee: R_386_PC32	operator new(unsigned long)
100005f2:	83 c4 10             	add    esp,0x10
100005f5:	89 c3                	mov    ebx,eax
100005f7:	b8 00 20 00 c2       	mov    eax,0xc2002000
100005fc:	8b 00                	mov    eax,DWORD PTR [eax]
100005fe:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
10000601:	83 ec 04             	sub    esp,0x4
10000604:	50                   	push   eax
10000605:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
1000060b:	50                   	push   eax
1000060c:	53                   	push   ebx
1000060d:	e8 fc ff ff ff       	call   1000060e <rmtree(char*)+0x18e>	1000060e: R_386_PC32	File::File(char const*, Process*)
10000612:	83 c4 10             	add    esp,0x10
10000615:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
10000618:	83 ec 0c             	sub    esp,0xc
1000061b:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
1000061e:	e8 fc ff ff ff       	call   1000061f <rmtree(char*)+0x19f>	1000061f: R_386_PC32	File::unlink()
10000623:	83 c4 10             	add    esp,0x10
10000626:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
1000062a:	0f 84 e3 fe ff ff    	je     10000513 <rmtree(char*)+0x93>
10000630:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10000633:	8b 00                	mov    eax,DWORD PTR [eax]
10000635:	83 c0 08             	add    eax,0x8
10000638:	8b 00                	mov    eax,DWORD PTR [eax]
1000063a:	83 ec 0c             	sub    esp,0xc
1000063d:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
10000640:	ff d0                	call   eax
10000642:	83 c4 10             	add    esp,0x10
10000645:	e9 c9 fe ff ff       	jmp    10000513 <rmtree(char*)+0x93>
1000064a:	90                   	nop
1000064b:	83 ec 0c             	sub    esp,0xc
1000064e:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000651:	e8 fc ff ff ff       	call   10000652 <rmtree(char*)+0x1d2>	10000652: R_386_PC32	Directory::close()
10000656:	83 c4 10             	add    esp,0x10
10000659:	83 ec 0c             	sub    esp,0xc
1000065c:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
1000065f:	e8 fc ff ff ff       	call   10000660 <rmtree(char*)+0x1e0>	10000660: R_386_PC32	Directory::unlink()
10000664:	83 c4 10             	add    esp,0x10
10000667:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
1000066b:	74 18                	je     10000685 <rmtree(char*)+0x205>
1000066d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10000670:	8b 00                	mov    eax,DWORD PTR [eax]
10000672:	83 c0 08             	add    eax,0x8
10000675:	8b 00                	mov    eax,DWORD PTR [eax]
10000677:	83 ec 0c             	sub    esp,0xc
1000067a:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
1000067d:	ff d0                	call   eax
1000067f:	83 c4 10             	add    esp,0x10
10000682:	eb 01                	jmp    10000685 <rmtree(char*)+0x205>
10000684:	90                   	nop
10000685:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
10000688:	c9                   	leave  
10000689:	c3                   	ret    

1000068a <mkdir(char const*, int)>:
1000068a:	55                   	push   ebp
1000068b:	89 e5                	mov    ebp,esp
1000068d:	53                   	push   ebx
1000068e:	83 ec 14             	sub    esp,0x14
10000691:	83 ec 0c             	sub    esp,0xc
10000694:	68 14 01 00 00       	push   0x114
10000699:	e8 fc ff ff ff       	call   1000069a <mkdir(char const*, int)+0x10>	1000069a: R_386_PC32	operator new(unsigned long)
1000069e:	83 c4 10             	add    esp,0x10
100006a1:	89 c3                	mov    ebx,eax
100006a3:	a1 00 00 00 00       	mov    eax,ds:0x0	100006a4: R_386_32	kernelProcess
100006a8:	83 ec 04             	sub    esp,0x4
100006ab:	50                   	push   eax
100006ac:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100006af:	53                   	push   ebx
100006b0:	e8 fc ff ff ff       	call   100006b1 <mkdir(char const*, int)+0x27>	100006b1: R_386_PC32	Directory::Directory(char const*, Process*)
100006b5:	83 c4 10             	add    esp,0x10
100006b8:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
100006bb:	83 ec 0c             	sub    esp,0xc
100006be:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
100006c1:	e8 fc ff ff ff       	call   100006c2 <mkdir(char const*, int)+0x38>	100006c2: R_386_PC32	Directory::create()
100006c6:	83 c4 10             	add    esp,0x10
100006c9:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
100006cd:	74 15                	je     100006e4 <mkdir(char const*, int)+0x5a>
100006cf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
100006d2:	8b 00                	mov    eax,DWORD PTR [eax]
100006d4:	83 c0 08             	add    eax,0x8
100006d7:	8b 00                	mov    eax,DWORD PTR [eax]
100006d9:	83 ec 0c             	sub    esp,0xc
100006dc:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
100006df:	ff d0                	call   eax
100006e1:	83 c4 10             	add    esp,0x10
100006e4:	b8 00 00 00 00       	mov    eax,0x0
100006e9:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
100006ec:	c9                   	leave  
100006ed:	c3                   	ret    

100006ee <copytree(char*, char*)>:
100006ee:	55                   	push   ebp
100006ef:	89 e5                	mov    ebp,esp
100006f1:	53                   	push   ebx
100006f2:	81 ec 54 01 00 00    	sub    esp,0x154
100006f8:	83 ec 0c             	sub    esp,0xc
100006fb:	68 90 01 00 00       	push   0x190
10000700:	e8 fc ff ff ff       	call   10000701 <copytree(char*, char*)+0x13>	10000701: R_386_PC32	malloc
10000705:	83 c4 10             	add    esp,0x10
10000708:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
1000070b:	83 ec 0c             	sub    esp,0xc
1000070e:	68 90 01 00 00       	push   0x190
10000713:	e8 fc ff ff ff       	call   10000714 <copytree(char*, char*)+0x26>	10000714: R_386_PC32	malloc
10000718:	83 c4 10             	add    esp,0x10
1000071b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
1000071e:	83 ec 04             	sub    esp,0x4
10000721:	68 90 01 00 00       	push   0x190
10000726:	6a 00                	push   0x0
10000728:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
1000072b:	e8 fc ff ff ff       	call   1000072c <copytree(char*, char*)+0x3e>	1000072c: R_386_PC32	memset
10000730:	83 c4 10             	add    esp,0x10
10000733:	83 ec 04             	sub    esp,0x4
10000736:	68 90 01 00 00       	push   0x190
1000073b:	6a 00                	push   0x0
1000073d:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000740:	e8 fc ff ff ff       	call   10000741 <copytree(char*, char*)+0x53>	10000741: R_386_PC32	memset
10000745:	83 c4 10             	add    esp,0x10
10000748:	8d 85 bc fe ff ff    	lea    eax,[ebp-0x144]
1000074e:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
10000751:	83 ec 0c             	sub    esp,0xc
10000754:	68 14 01 00 00       	push   0x114
10000759:	e8 fc ff ff ff       	call   1000075a <copytree(char*, char*)+0x6c>	1000075a: R_386_PC32	operator new(unsigned long)
1000075e:	83 c4 10             	add    esp,0x10
10000761:	89 c3                	mov    ebx,eax
10000763:	b8 00 20 00 c2       	mov    eax,0xc2002000
10000768:	8b 00                	mov    eax,DWORD PTR [eax]
1000076a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
1000076d:	83 ec 04             	sub    esp,0x4
10000770:	50                   	push   eax
10000771:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000774:	53                   	push   ebx
10000775:	e8 fc ff ff ff       	call   10000776 <copytree(char*, char*)+0x88>	10000776: R_386_PC32	Directory::Directory(char const*, Process*)
1000077a:	83 c4 10             	add    esp,0x10
1000077d:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
10000780:	83 ec 0c             	sub    esp,0xc
10000783:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
10000786:	e8 fc ff ff ff       	call   10000787 <copytree(char*, char*)+0x99>	10000787: R_386_PC32	Directory::open()
1000078b:	83 c4 10             	add    esp,0x10
1000078e:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10000791:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
10000795:	74 34                	je     100007cb <copytree(char*, char*)+0xdd>
10000797:	83 ec 0c             	sub    esp,0xc
1000079a:	68 a7 97 00 10       	push   0x100097a7	1000079b: R_386_32	.text
1000079f:	e8 fc ff ff ff       	call   100007a0 <copytree(char*, char*)+0xb2>	100007a0: R_386_PC32	Dbg::kprintf(char const*, ...)
100007a4:	83 c4 10             	add    esp,0x10
100007a7:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
100007ab:	0f 84 90 03 00 00    	je     10000b41 <copytree(char*, char*)+0x453>
100007b1:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
100007b4:	8b 00                	mov    eax,DWORD PTR [eax]
100007b6:	83 c0 08             	add    eax,0x8
100007b9:	8b 00                	mov    eax,DWORD PTR [eax]
100007bb:	83 ec 0c             	sub    esp,0xc
100007be:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
100007c1:	ff d0                	call   eax
100007c3:	83 c4 10             	add    esp,0x10
100007c6:	e9 76 03 00 00       	jmp    10000b41 <copytree(char*, char*)+0x453>
100007cb:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
100007ce:	8b 00                	mov    eax,DWORD PTR [eax]
100007d0:	83 c0 0c             	add    eax,0xc
100007d3:	8b 00                	mov    eax,DWORD PTR [eax]
100007d5:	83 ec 0c             	sub    esp,0xc
100007d8:	8d 95 b8 fe ff ff    	lea    edx,[ebp-0x148]
100007de:	52                   	push   edx
100007df:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
100007e2:	6a 00                	push   0x0
100007e4:	68 10 01 00 00       	push   0x110
100007e9:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
100007ec:	ff d0                	call   eax
100007ee:	83 c4 20             	add    esp,0x20
100007f1:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
100007f4:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
100007f8:	0f 85 fb 02 00 00    	jne    10000af9 <copytree(char*, char*)+0x40b>
100007fe:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
10000801:	83 c0 10             	add    eax,0x10
10000804:	83 ec 08             	sub    esp,0x8
10000807:	68 a0 97 00 10       	push   0x100097a0	10000808: R_386_32	.text
1000080c:	50                   	push   eax
1000080d:	e8 fc ff ff ff       	call   1000080e <copytree(char*, char*)+0x120>	1000080e: R_386_PC32	strcmp
10000812:	83 c4 10             	add    esp,0x10
10000815:	85 c0                	test   eax,eax
10000817:	74 b2                	je     100007cb <copytree(char*, char*)+0xdd>
10000819:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
1000081c:	83 c0 10             	add    eax,0x10
1000081f:	83 ec 08             	sub    esp,0x8
10000822:	68 a2 97 00 10       	push   0x100097a2	10000823: R_386_32	.text
10000827:	50                   	push   eax
10000828:	e8 fc ff ff ff       	call   10000829 <copytree(char*, char*)+0x13b>	10000829: R_386_PC32	strcmp
1000082d:	83 c4 10             	add    esp,0x10
10000830:	85 c0                	test   eax,eax
10000832:	74 97                	je     100007cb <copytree(char*, char*)+0xdd>
10000834:	83 ec 08             	sub    esp,0x8
10000837:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000083a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
1000083d:	e8 fc ff ff ff       	call   1000083e <copytree(char*, char*)+0x150>	1000083e: R_386_PC32	strcpy
10000842:	83 c4 10             	add    esp,0x10
10000845:	83 ec 08             	sub    esp,0x8
10000848:	68 a5 97 00 10       	push   0x100097a5	10000849: R_386_32	.text
1000084d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10000850:	e8 fc ff ff ff       	call   10000851 <copytree(char*, char*)+0x163>	10000851: R_386_PC32	strcat
10000855:	83 c4 10             	add    esp,0x10
10000858:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
1000085b:	83 c0 10             	add    eax,0x10
1000085e:	83 ec 08             	sub    esp,0x8
10000861:	50                   	push   eax
10000862:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10000865:	e8 fc ff ff ff       	call   10000866 <copytree(char*, char*)+0x178>	10000866: R_386_PC32	strcat
1000086a:	83 c4 10             	add    esp,0x10
1000086d:	83 ec 08             	sub    esp,0x8
10000870:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10000873:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000876:	e8 fc ff ff ff       	call   10000877 <copytree(char*, char*)+0x189>	10000877: R_386_PC32	strcpy
1000087b:	83 c4 10             	add    esp,0x10
1000087e:	83 ec 08             	sub    esp,0x8
10000881:	68 a5 97 00 10       	push   0x100097a5	10000882: R_386_32	.text
10000886:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000889:	e8 fc ff ff ff       	call   1000088a <copytree(char*, char*)+0x19c>	1000088a: R_386_PC32	strcat
1000088e:	83 c4 10             	add    esp,0x10
10000891:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
10000894:	83 c0 10             	add    eax,0x10
10000897:	83 ec 08             	sub    esp,0x8
1000089a:	50                   	push   eax
1000089b:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
1000089e:	e8 fc ff ff ff       	call   1000089f <copytree(char*, char*)+0x1b1>	1000089f: R_386_PC32	strcat
100008a3:	83 c4 10             	add    esp,0x10
100008a6:	83 ec 04             	sub    esp,0x4
100008a9:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
100008ac:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
100008af:	68 c1 97 00 10       	push   0x100097c1	100008b0: R_386_32	.text
100008b4:	e8 fc ff ff ff       	call   100008b5 <copytree(char*, char*)+0x1c7>	100008b5: R_386_PC32	Dbg::kprintf(char const*, ...)
100008b9:	83 c4 10             	add    esp,0x10
100008bc:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
100008bf:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
100008c2:	83 e0 02             	and    eax,0x2
100008c5:	85 c0                	test   eax,eax
100008c7:	74 47                	je     10000910 <copytree(char*, char*)+0x222>
100008c9:	83 ec 08             	sub    esp,0x8
100008cc:	68 c0 01 00 00       	push   0x1c0
100008d1:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
100008d4:	e8 fc ff ff ff       	call   100008d5 <copytree(char*, char*)+0x1e7>	100008d5: R_386_PC32	mkdir(char const*, int)
100008d9:	83 c4 10             	add    esp,0x10
100008dc:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
100008df:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
100008e3:	74 15                	je     100008fa <copytree(char*, char*)+0x20c>
100008e5:	83 ec 0c             	sub    esp,0xc
100008e8:	68 cb 97 00 10       	push   0x100097cb	100008e9: R_386_32	.text
100008ed:	e8 fc ff ff ff       	call   100008ee <copytree(char*, char*)+0x200>	100008ee: R_386_PC32	KePanic(char const*)
100008f2:	83 c4 10             	add    esp,0x10
100008f5:	e9 d1 fe ff ff       	jmp    100007cb <copytree(char*, char*)+0xdd>
100008fa:	83 ec 08             	sub    esp,0x8
100008fd:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000900:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10000903:	e8 fc ff ff ff       	call   10000904 <copytree(char*, char*)+0x216>	10000904: R_386_PC32	copytree(char*, char*)
10000908:	83 c4 10             	add    esp,0x10
1000090b:	e9 bb fe ff ff       	jmp    100007cb <copytree(char*, char*)+0xdd>
10000910:	83 ec 0c             	sub    esp,0xc
10000913:	68 14 01 00 00       	push   0x114
10000918:	e8 fc ff ff ff       	call   10000919 <copytree(char*, char*)+0x22b>	10000919: R_386_PC32	operator new(unsigned long)
1000091d:	83 c4 10             	add    esp,0x10
10000920:	89 c3                	mov    ebx,eax
10000922:	b8 00 20 00 c2       	mov    eax,0xc2002000
10000927:	8b 00                	mov    eax,DWORD PTR [eax]
10000929:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
1000092c:	83 ec 04             	sub    esp,0x4
1000092f:	50                   	push   eax
10000930:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10000933:	53                   	push   ebx
10000934:	e8 fc ff ff ff       	call   10000935 <copytree(char*, char*)+0x247>	10000935: R_386_PC32	File::File(char const*, Process*)
10000939:	83 c4 10             	add    esp,0x10
1000093c:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
1000093f:	83 ec 08             	sub    esp,0x8
10000942:	6a 01                	push   0x1
10000944:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000947:	e8 fc ff ff ff       	call   10000948 <copytree(char*, char*)+0x25a>	10000948: R_386_PC32	File::open(FileOpenMode)
1000094c:	83 c4 10             	add    esp,0x10
1000094f:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
10000953:	75 15                	jne    1000096a <copytree(char*, char*)+0x27c>
10000955:	83 ec 0c             	sub    esp,0xc
10000958:	68 dc 97 00 10       	push   0x100097dc	10000959: R_386_32	.text
1000095d:	e8 fc ff ff ff       	call   1000095e <copytree(char*, char*)+0x270>	1000095e: R_386_PC32	KePanic(char const*)
10000962:	83 c4 10             	add    esp,0x10
10000965:	e9 8a 01 00 00       	jmp    10000af4 <copytree(char*, char*)+0x406>
1000096a:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
1000096e:	0f 84 57 fe ff ff    	je     100007cb <copytree(char*, char*)+0xdd>
10000974:	83 ec 0c             	sub    esp,0xc
10000977:	68 14 01 00 00       	push   0x114
1000097c:	e8 fc ff ff ff       	call   1000097d <copytree(char*, char*)+0x28f>	1000097d: R_386_PC32	operator new(unsigned long)
10000981:	83 c4 10             	add    esp,0x10
10000984:	89 c3                	mov    ebx,eax
10000986:	b8 00 20 00 c2       	mov    eax,0xc2002000
1000098b:	8b 00                	mov    eax,DWORD PTR [eax]
1000098d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
10000990:	83 ec 04             	sub    esp,0x4
10000993:	50                   	push   eax
10000994:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000997:	53                   	push   ebx
10000998:	e8 fc ff ff ff       	call   10000999 <copytree(char*, char*)+0x2ab>	10000999: R_386_PC32	File::File(char const*, Process*)
1000099d:	83 c4 10             	add    esp,0x10
100009a0:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
100009a3:	83 ec 08             	sub    esp,0x8
100009a6:	6a 12                	push   0x12
100009a8:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
100009ab:	e8 fc ff ff ff       	call   100009ac <copytree(char*, char*)+0x2be>	100009ac: R_386_PC32	File::open(FileOpenMode)
100009b0:	83 c4 10             	add    esp,0x10
100009b3:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
100009b7:	75 23                	jne    100009dc <copytree(char*, char*)+0x2ee>
100009b9:	83 ec 0c             	sub    esp,0xc
100009bc:	68 dc 97 00 10       	push   0x100097dc	100009bd: R_386_32	.text
100009c1:	e8 fc ff ff ff       	call   100009c2 <copytree(char*, char*)+0x2d4>	100009c2: R_386_PC32	KePanic(char const*)
100009c6:	83 c4 10             	add    esp,0x10
100009c9:	83 ec 0c             	sub    esp,0xc
100009cc:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
100009cf:	e8 fc ff ff ff       	call   100009d0 <copytree(char*, char*)+0x2e2>	100009d0: R_386_PC32	File::close()
100009d4:	83 c4 10             	add    esp,0x10
100009d7:	e9 18 01 00 00       	jmp    10000af4 <copytree(char*, char*)+0x406>
100009dc:	83 ec 0c             	sub    esp,0xc
100009df:	68 00 10 00 00       	push   0x1000
100009e4:	e8 fc ff ff ff       	call   100009e5 <copytree(char*, char*)+0x2f7>	100009e5: R_386_PC32	malloc
100009e9:	83 c4 10             	add    esp,0x10
100009ec:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
100009ef:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
100009f3:	75 31                	jne    10000a26 <copytree(char*, char*)+0x338>
100009f5:	83 ec 0c             	sub    esp,0xc
100009f8:	68 eb 97 00 10       	push   0x100097eb	100009f9: R_386_32	.text
100009fd:	e8 fc ff ff ff       	call   100009fe <copytree(char*, char*)+0x310>	100009fe: R_386_PC32	KePanic(char const*)
10000a02:	83 c4 10             	add    esp,0x10
10000a05:	83 ec 0c             	sub    esp,0xc
10000a08:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10000a0b:	e8 fc ff ff ff       	call   10000a0c <copytree(char*, char*)+0x31e>	10000a0c: R_386_PC32	free
10000a10:	83 c4 10             	add    esp,0x10
10000a13:	83 ec 0c             	sub    esp,0xc
10000a16:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000a19:	e8 fc ff ff ff       	call   10000a1a <copytree(char*, char*)+0x32c>	10000a1a: R_386_PC32	free
10000a1e:	83 c4 10             	add    esp,0x10
10000a21:	e9 1c 01 00 00       	jmp    10000b42 <copytree(char*, char*)+0x454>
10000a26:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10000a29:	8b 00                	mov    eax,DWORD PTR [eax]
10000a2b:	83 c0 0c             	add    eax,0xc
10000a2e:	8b 00                	mov    eax,DWORD PTR [eax]
10000a30:	83 ec 0c             	sub    esp,0xc
10000a33:	8d 95 b4 fe ff ff    	lea    edx,[ebp-0x14c]
10000a39:	52                   	push   edx
10000a3a:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10000a3d:	6a 00                	push   0x0
10000a3f:	68 00 10 00 00       	push   0x1000
10000a44:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000a47:	ff d0                	call   eax
10000a49:	83 c4 20             	add    esp,0x20
10000a4c:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
10000a4f:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
10000a53:	75 37                	jne    10000a8c <copytree(char*, char*)+0x39e>
10000a55:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000a58:	8b 00                	mov    eax,DWORD PTR [eax]
10000a5a:	83 c0 10             	add    eax,0x10
10000a5d:	8b 08                	mov    ecx,DWORD PTR [eax]
10000a5f:	8b 85 b4 fe ff ff    	mov    eax,DWORD PTR [ebp-0x14c]
10000a65:	99                   	cdq    
10000a66:	83 ec 0c             	sub    esp,0xc
10000a69:	8d 9d b0 fe ff ff    	lea    ebx,[ebp-0x150]
10000a6f:	53                   	push   ebx
10000a70:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10000a73:	52                   	push   edx
10000a74:	50                   	push   eax
10000a75:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
10000a78:	ff d1                	call   ecx
10000a7a:	83 c4 20             	add    esp,0x20
10000a7d:	8b 85 b4 fe ff ff    	mov    eax,DWORD PTR [ebp-0x14c]
10000a83:	3d 00 10 00 00       	cmp    eax,0x1000
10000a88:	75 05                	jne    10000a8f <copytree(char*, char*)+0x3a1>
10000a8a:	eb 9a                	jmp    10000a26 <copytree(char*, char*)+0x338>
10000a8c:	90                   	nop
10000a8d:	eb 01                	jmp    10000a90 <copytree(char*, char*)+0x3a2>
10000a8f:	90                   	nop
10000a90:	83 ec 0c             	sub    esp,0xc
10000a93:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10000a96:	e8 fc ff ff ff       	call   10000a97 <copytree(char*, char*)+0x3a9>	10000a97: R_386_PC32	free
10000a9b:	83 c4 10             	add    esp,0x10
10000a9e:	83 ec 0c             	sub    esp,0xc
10000aa1:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000aa4:	e8 fc ff ff ff       	call   10000aa5 <copytree(char*, char*)+0x3b7>	10000aa5: R_386_PC32	File::close()
10000aa9:	83 c4 10             	add    esp,0x10
10000aac:	83 ec 0c             	sub    esp,0xc
10000aaf:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
10000ab2:	e8 fc ff ff ff       	call   10000ab3 <copytree(char*, char*)+0x3c5>	10000ab3: R_386_PC32	File::close()
10000ab7:	83 c4 10             	add    esp,0x10
10000aba:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
10000abe:	74 15                	je     10000ad5 <copytree(char*, char*)+0x3e7>
10000ac0:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10000ac3:	8b 00                	mov    eax,DWORD PTR [eax]
10000ac5:	83 c0 08             	add    eax,0x8
10000ac8:	8b 00                	mov    eax,DWORD PTR [eax]
10000aca:	83 ec 0c             	sub    esp,0xc
10000acd:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000ad0:	ff d0                	call   eax
10000ad2:	83 c4 10             	add    esp,0x10
10000ad5:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
10000ad9:	0f 84 ec fc ff ff    	je     100007cb <copytree(char*, char*)+0xdd>
10000adf:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000ae2:	8b 00                	mov    eax,DWORD PTR [eax]
10000ae4:	83 c0 08             	add    eax,0x8
10000ae7:	8b 00                	mov    eax,DWORD PTR [eax]
10000ae9:	83 ec 0c             	sub    esp,0xc
10000aec:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
10000aef:	ff d0                	call   eax
10000af1:	83 c4 10             	add    esp,0x10
10000af4:	e9 d2 fc ff ff       	jmp    100007cb <copytree(char*, char*)+0xdd>
10000af9:	90                   	nop
10000afa:	83 ec 0c             	sub    esp,0xc
10000afd:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10000b00:	e8 fc ff ff ff       	call   10000b01 <copytree(char*, char*)+0x413>	10000b01: R_386_PC32	free
10000b05:	83 c4 10             	add    esp,0x10
10000b08:	83 ec 0c             	sub    esp,0xc
10000b0b:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000b0e:	e8 fc ff ff ff       	call   10000b0f <copytree(char*, char*)+0x421>	10000b0f: R_386_PC32	free
10000b13:	83 c4 10             	add    esp,0x10
10000b16:	83 ec 0c             	sub    esp,0xc
10000b19:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
10000b1c:	e8 fc ff ff ff       	call   10000b1d <copytree(char*, char*)+0x42f>	10000b1d: R_386_PC32	Directory::close()
10000b21:	83 c4 10             	add    esp,0x10
10000b24:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
10000b28:	74 18                	je     10000b42 <copytree(char*, char*)+0x454>
10000b2a:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
10000b2d:	8b 00                	mov    eax,DWORD PTR [eax]
10000b2f:	83 c0 08             	add    eax,0x8
10000b32:	8b 00                	mov    eax,DWORD PTR [eax]
10000b34:	83 ec 0c             	sub    esp,0xc
10000b37:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
10000b3a:	ff d0                	call   eax
10000b3c:	83 c4 10             	add    esp,0x10
10000b3f:	eb 01                	jmp    10000b42 <copytree(char*, char*)+0x454>
10000b41:	90                   	nop
10000b42:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
10000b45:	c9                   	leave  
10000b46:	c3                   	ret    

10000b47 <backupTree(char*, unsigned short)>:
10000b47:	55                   	push   ebp
10000b48:	89 e5                	mov    ebp,esp
10000b4a:	57                   	push   edi
10000b4b:	56                   	push   esi
10000b4c:	53                   	push   ebx
10000b4d:	81 ec 8c 12 00 00    	sub    esp,0x128c
10000b53:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000b56:	66 89 85 74 ed ff ff 	mov    WORD PTR [ebp-0x128c],ax
10000b5d:	83 ec 0c             	sub    esp,0xc
10000b60:	68 90 01 00 00       	push   0x190
10000b65:	e8 fc ff ff ff       	call   10000b66 <backupTree(char*, unsigned short)+0x1f>	10000b66: R_386_PC32	malloc
10000b6a:	83 c4 10             	add    esp,0x10
10000b6d:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
10000b70:	83 ec 04             	sub    esp,0x4
10000b73:	68 90 01 00 00       	push   0x190
10000b78:	6a 00                	push   0x0
10000b7a:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000b7d:	e8 fc ff ff ff       	call   10000b7e <backupTree(char*, unsigned short)+0x37>	10000b7e: R_386_PC32	memset
10000b82:	83 c4 10             	add    esp,0x10
10000b85:	8d 85 a8 fe ff ff    	lea    eax,[ebp-0x158]
10000b8b:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
10000b8e:	83 ec 0c             	sub    esp,0xc
10000b91:	68 14 01 00 00       	push   0x114
10000b96:	e8 fc ff ff ff       	call   10000b97 <backupTree(char*, unsigned short)+0x50>	10000b97: R_386_PC32	operator new(unsigned long)
10000b9b:	83 c4 10             	add    esp,0x10
10000b9e:	89 c3                	mov    ebx,eax
10000ba0:	b8 00 20 00 c2       	mov    eax,0xc2002000
10000ba5:	8b 00                	mov    eax,DWORD PTR [eax]
10000ba7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
10000baa:	83 ec 04             	sub    esp,0x4
10000bad:	50                   	push   eax
10000bae:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000bb1:	53                   	push   ebx
10000bb2:	e8 fc ff ff ff       	call   10000bb3 <backupTree(char*, unsigned short)+0x6c>	10000bb3: R_386_PC32	Directory::Directory(char const*, Process*)
10000bb7:	83 c4 10             	add    esp,0x10
10000bba:	89 5d d0             	mov    DWORD PTR [ebp-0x30],ebx
10000bbd:	83 ec 0c             	sub    esp,0xc
10000bc0:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10000bc3:	e8 fc ff ff ff       	call   10000bc4 <backupTree(char*, unsigned short)+0x7d>	10000bc4: R_386_PC32	Directory::open()
10000bc8:	83 c4 10             	add    esp,0x10
10000bcb:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
10000bce:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
10000bd2:	74 34                	je     10000c08 <backupTree(char*, unsigned short)+0xc1>
10000bd4:	83 ec 0c             	sub    esp,0xc
10000bd7:	68 a7 97 00 10       	push   0x100097a7	10000bd8: R_386_32	.text
10000bdc:	e8 fc ff ff ff       	call   10000bdd <backupTree(char*, unsigned short)+0x96>	10000bdd: R_386_PC32	Dbg::kprintf(char const*, ...)
10000be1:	83 c4 10             	add    esp,0x10
10000be4:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
10000be8:	0f 84 c8 05 00 00    	je     100011b6 <backupTree(char*, unsigned short)+0x66f>
10000bee:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
10000bf1:	8b 00                	mov    eax,DWORD PTR [eax]
10000bf3:	83 c0 08             	add    eax,0x8
10000bf6:	8b 00                	mov    eax,DWORD PTR [eax]
10000bf8:	83 ec 0c             	sub    esp,0xc
10000bfb:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10000bfe:	ff d0                	call   eax
10000c00:	83 c4 10             	add    esp,0x10
10000c03:	e9 af 05 00 00       	jmp    100011b7 <backupTree(char*, unsigned short)+0x670>
10000c08:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
10000c0b:	8b 00                	mov    eax,DWORD PTR [eax]
10000c0d:	83 c0 0c             	add    eax,0xc
10000c10:	8b 00                	mov    eax,DWORD PTR [eax]
10000c12:	83 ec 0c             	sub    esp,0xc
10000c15:	8d 95 a4 fe ff ff    	lea    edx,[ebp-0x15c]
10000c1b:	52                   	push   edx
10000c1c:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
10000c1f:	6a 00                	push   0x0
10000c21:	68 10 01 00 00       	push   0x110
10000c26:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10000c29:	ff d0                	call   eax
10000c2b:	83 c4 20             	add    esp,0x20
10000c2e:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
10000c31:	83 7d c8 00          	cmp    DWORD PTR [ebp-0x38],0x0
10000c35:	0f 85 41 05 00 00    	jne    1000117c <backupTree(char*, unsigned short)+0x635>
10000c3b:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000c3e:	83 c0 10             	add    eax,0x10
10000c41:	83 ec 08             	sub    esp,0x8
10000c44:	68 a0 97 00 10       	push   0x100097a0	10000c45: R_386_32	.text
10000c49:	50                   	push   eax
10000c4a:	e8 fc ff ff ff       	call   10000c4b <backupTree(char*, unsigned short)+0x104>	10000c4b: R_386_PC32	strcmp
10000c4f:	83 c4 10             	add    esp,0x10
10000c52:	85 c0                	test   eax,eax
10000c54:	74 b2                	je     10000c08 <backupTree(char*, unsigned short)+0xc1>
10000c56:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000c59:	83 c0 10             	add    eax,0x10
10000c5c:	83 ec 08             	sub    esp,0x8
10000c5f:	68 a2 97 00 10       	push   0x100097a2	10000c60: R_386_32	.text
10000c64:	50                   	push   eax
10000c65:	e8 fc ff ff ff       	call   10000c66 <backupTree(char*, unsigned short)+0x11f>	10000c66: R_386_PC32	strcmp
10000c6a:	83 c4 10             	add    esp,0x10
10000c6d:	85 c0                	test   eax,eax
10000c6f:	74 97                	je     10000c08 <backupTree(char*, unsigned short)+0xc1>
10000c71:	83 ec 08             	sub    esp,0x8
10000c74:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000c77:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000c7a:	e8 fc ff ff ff       	call   10000c7b <backupTree(char*, unsigned short)+0x134>	10000c7b: R_386_PC32	strcpy
10000c7f:	83 c4 10             	add    esp,0x10
10000c82:	83 ec 08             	sub    esp,0x8
10000c85:	68 a5 97 00 10       	push   0x100097a5	10000c86: R_386_32	.text
10000c8a:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000c8d:	e8 fc ff ff ff       	call   10000c8e <backupTree(char*, unsigned short)+0x147>	10000c8e: R_386_PC32	strcat
10000c92:	83 c4 10             	add    esp,0x10
10000c95:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000c98:	83 c0 10             	add    eax,0x10
10000c9b:	83 ec 08             	sub    esp,0x8
10000c9e:	50                   	push   eax
10000c9f:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000ca2:	e8 fc ff ff ff       	call   10000ca3 <backupTree(char*, unsigned short)+0x15c>	10000ca3: R_386_PC32	strcat
10000ca7:	83 c4 10             	add    esp,0x10
10000caa:	66 c7 45 e6 bc ad    	mov    WORD PTR [ebp-0x1a],0xadbc
10000cb0:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
10000cb7:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
10000cba:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10000cbd:	01 d0                	add    eax,edx
10000cbf:	83 c0 10             	add    eax,0x10
10000cc2:	8a 00                	mov    al,BYTE PTR [eax]
10000cc4:	84 c0                	test   al,al
10000cc6:	74 3c                	je     10000d04 <backupTree(char*, unsigned short)+0x1bd>
10000cc8:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
10000ccb:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10000cce:	01 d0                	add    eax,edx
10000cd0:	83 c0 10             	add    eax,0x10
10000cd3:	8a 00                	mov    al,BYTE PTR [eax]
10000cd5:	66 0f be d0          	movsx  dx,al
10000cd9:	66 8b 45 e6          	mov    ax,WORD PTR [ebp-0x1a]
10000cdd:	31 d0                	xor    eax,edx
10000cdf:	66 89 45 e6          	mov    WORD PTR [ebp-0x1a],ax
10000ce3:	0f b7 45 e6          	movzx  eax,WORD PTR [ebp-0x1a]
10000ce7:	c1 e0 03             	shl    eax,0x3
10000cea:	89 c2                	mov    edx,eax
10000cec:	0f b7 45 e6          	movzx  eax,WORD PTR [ebp-0x1a]
10000cf0:	c1 f8 0d             	sar    eax,0xd
10000cf3:	09 d0                	or     eax,edx
10000cf5:	66 89 45 e6          	mov    WORD PTR [ebp-0x1a],ax
10000cf9:	66 81 6d e6 f1 06    	sub    WORD PTR [ebp-0x1a],0x6f1
10000cff:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
10000d02:	eb b3                	jmp    10000cb7 <backupTree(char*, unsigned short)+0x170>
10000d04:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000d07:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
10000d0a:	83 e0 02             	and    eax,0x2
10000d0d:	85 c0                	test   eax,eax
10000d0f:	74 37                	je     10000d48 <backupTree(char*, unsigned short)+0x201>
10000d11:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000d14:	83 c0 10             	add    eax,0x10
10000d17:	83 ec 08             	sub    esp,0x8
10000d1a:	68 f5 97 00 10       	push   0x100097f5	10000d1b: R_386_32	.text
10000d1f:	50                   	push   eax
10000d20:	e8 fc ff ff ff       	call   10000d21 <backupTree(char*, unsigned short)+0x1da>	10000d21: R_386_PC32	strcmp
10000d25:	83 c4 10             	add    esp,0x10
10000d28:	85 c0                	test   eax,eax
10000d2a:	0f 84 d8 fe ff ff    	je     10000c08 <backupTree(char*, unsigned short)+0xc1>
10000d30:	0f b7 45 e6          	movzx  eax,WORD PTR [ebp-0x1a]
10000d34:	83 ec 08             	sub    esp,0x8
10000d37:	50                   	push   eax
10000d38:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000d3b:	e8 fc ff ff ff       	call   10000d3c <backupTree(char*, unsigned short)+0x1f5>	10000d3c: R_386_PC32	backupTree(char*, unsigned short)
10000d40:	83 c4 10             	add    esp,0x10
10000d43:	e9 c0 fe ff ff       	jmp    10000c08 <backupTree(char*, unsigned short)+0xc1>
10000d48:	c6 85 a3 fe ff ff 00 	mov    BYTE PTR [ebp-0x15d],0x0
10000d4f:	83 ec 08             	sub    esp,0x8
10000d52:	68 fc 97 00 10       	push   0x100097fc	10000d53: R_386_32	.text
10000d57:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000d5d:	50                   	push   eax
10000d5e:	e8 fc ff ff ff       	call   10000d5f <backupTree(char*, unsigned short)+0x218>	10000d5f: R_386_PC32	strcpy
10000d63:	83 c4 10             	add    esp,0x10
10000d66:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000d69:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
10000d6c:	88 85 a2 fe ff ff    	mov    BYTE PTR [ebp-0x15e],al
10000d72:	83 ec 08             	sub    esp,0x8
10000d75:	8d 85 a2 fe ff ff    	lea    eax,[ebp-0x15e]
10000d7b:	50                   	push   eax
10000d7c:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000d82:	50                   	push   eax
10000d83:	e8 fc ff ff ff       	call   10000d84 <backupTree(char*, unsigned short)+0x23d>	10000d84: R_386_PC32	strcat
10000d88:	83 c4 10             	add    esp,0x10
10000d8b:	83 ec 04             	sub    esp,0x4
10000d8e:	6a 09                	push   0x9
10000d90:	6a 00                	push   0x0
10000d92:	8d 85 99 fe ff ff    	lea    eax,[ebp-0x167]
10000d98:	50                   	push   eax
10000d99:	e8 fc ff ff ff       	call   10000d9a <backupTree(char*, unsigned short)+0x253>	10000d9a: R_386_PC32	memset
10000d9e:	83 c4 10             	add    esp,0x10
10000da1:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000da4:	83 c0 10             	add    eax,0x10
10000da7:	83 ec 04             	sub    esp,0x4
10000daa:	6a 08                	push   0x8
10000dac:	50                   	push   eax
10000dad:	8d 85 99 fe ff ff    	lea    eax,[ebp-0x167]
10000db3:	50                   	push   eax
10000db4:	e8 fc ff ff ff       	call   10000db5 <backupTree(char*, unsigned short)+0x26e>	10000db5: R_386_PC32	strncpyxx(char*, char const*, unsigned long)
10000db9:	83 c4 10             	add    esp,0x10
10000dbc:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
10000dc3:	83 7d dc 07          	cmp    DWORD PTR [ebp-0x24],0x7
10000dc7:	0f 8f c5 00 00 00    	jg     10000e92 <backupTree(char*, unsigned short)+0x34b>
10000dcd:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000dd3:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000dd6:	01 d0                	add    eax,edx
10000dd8:	8a 00                	mov    al,BYTE PTR [eax]
10000dda:	3c 60                	cmp    al,0x60
10000ddc:	7e 30                	jle    10000e0e <backupTree(char*, unsigned short)+0x2c7>
10000dde:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000de4:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000de7:	01 d0                	add    eax,edx
10000de9:	8a 00                	mov    al,BYTE PTR [eax]
10000deb:	3c 7a                	cmp    al,0x7a
10000ded:	7f 1f                	jg     10000e0e <backupTree(char*, unsigned short)+0x2c7>
10000def:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000df5:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000df8:	01 d0                	add    eax,edx
10000dfa:	8a 00                	mov    al,BYTE PTR [eax]
10000dfc:	83 e8 20             	sub    eax,0x20
10000dff:	88 c2                	mov    dl,al
10000e01:	8d 8d 99 fe ff ff    	lea    ecx,[ebp-0x167]
10000e07:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e0a:	01 c8                	add    eax,ecx
10000e0c:	88 10                	mov    BYTE PTR [eax],dl
10000e0e:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000e14:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e17:	01 d0                	add    eax,edx
10000e19:	8a 00                	mov    al,BYTE PTR [eax]
10000e1b:	3c 59                	cmp    al,0x59
10000e1d:	75 0e                	jne    10000e2d <backupTree(char*, unsigned short)+0x2e6>
10000e1f:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000e25:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e28:	01 d0                	add    eax,edx
10000e2a:	c6 00 51             	mov    BYTE PTR [eax],0x51
10000e2d:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000e33:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e36:	01 d0                	add    eax,edx
10000e38:	8a 00                	mov    al,BYTE PTR [eax]
10000e3a:	3c 5a                	cmp    al,0x5a
10000e3c:	75 0e                	jne    10000e4c <backupTree(char*, unsigned short)+0x305>
10000e3e:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000e44:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e47:	01 d0                	add    eax,edx
10000e49:	c6 00 51             	mov    BYTE PTR [eax],0x51
10000e4c:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000e52:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e55:	01 d0                	add    eax,edx
10000e57:	8a 00                	mov    al,BYTE PTR [eax]
10000e59:	3c 20                	cmp    al,0x20
10000e5b:	75 0e                	jne    10000e6b <backupTree(char*, unsigned short)+0x324>
10000e5d:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000e63:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e66:	01 d0                	add    eax,edx
10000e68:	c6 00 59             	mov    BYTE PTR [eax],0x59
10000e6b:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000e71:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e74:	01 d0                	add    eax,edx
10000e76:	8a 00                	mov    al,BYTE PTR [eax]
10000e78:	3c 2e                	cmp    al,0x2e
10000e7a:	75 0e                	jne    10000e8a <backupTree(char*, unsigned short)+0x343>
10000e7c:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000e82:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e85:	01 d0                	add    eax,edx
10000e87:	c6 00 5a             	mov    BYTE PTR [eax],0x5a
10000e8a:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
10000e8d:	e9 31 ff ff ff       	jmp    10000dc3 <backupTree(char*, unsigned short)+0x27c>
10000e92:	83 ec 08             	sub    esp,0x8
10000e95:	8d 85 99 fe ff ff    	lea    eax,[ebp-0x167]
10000e9b:	50                   	push   eax
10000e9c:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000ea2:	50                   	push   eax
10000ea3:	e8 fc ff ff ff       	call   10000ea4 <backupTree(char*, unsigned short)+0x35d>	10000ea4: R_386_PC32	strcat
10000ea8:	83 c4 10             	add    esp,0x10
10000eab:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000eae:	83 c0 10             	add    eax,0x10
10000eb1:	83 ec 0c             	sub    esp,0xc
10000eb4:	50                   	push   eax
10000eb5:	e8 fc ff ff ff       	call   10000eb6 <backupTree(char*, unsigned short)+0x36f>	10000eb6: R_386_PC32	strlen
10000eba:	83 c4 10             	add    esp,0x10
10000ebd:	83 c0 41             	add    eax,0x41
10000ec0:	88 85 a2 fe ff ff    	mov    BYTE PTR [ebp-0x15e],al
10000ec6:	83 ec 08             	sub    esp,0x8
10000ec9:	8d 85 a2 fe ff ff    	lea    eax,[ebp-0x15e]
10000ecf:	50                   	push   eax
10000ed0:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000ed6:	50                   	push   eax
10000ed7:	e8 fc ff ff ff       	call   10000ed8 <backupTree(char*, unsigned short)+0x391>	10000ed8: R_386_PC32	strcat
10000edc:	83 c4 10             	add    esp,0x10
10000edf:	83 ec 08             	sub    esp,0x8
10000ee2:	68 a0 97 00 10       	push   0x100097a0	10000ee3: R_386_32	.text
10000ee7:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000eed:	50                   	push   eax
10000eee:	e8 fc ff ff ff       	call   10000eef <backupTree(char*, unsigned short)+0x3a8>	10000eef: R_386_PC32	strcat
10000ef3:	83 c4 10             	add    esp,0x10
10000ef6:	66 8b 45 e6          	mov    ax,WORD PTR [ebp-0x1a]
10000efa:	25 65 07 00 00       	and    eax,0x765
10000eff:	33 85 74 ed ff ff    	xor    eax,DWORD PTR [ebp-0x128c]
10000f05:	66 89 45 c6          	mov    WORD PTR [ebp-0x3a],ax
10000f09:	8d 85 88 fe ff ff    	lea    eax,[ebp-0x178]
10000f0f:	bb 15 98 00 10       	mov    ebx,0x10009815	10000f10: R_386_32	.text
10000f14:	ba 11 00 00 00       	mov    edx,0x11
10000f19:	89 c7                	mov    edi,eax
10000f1b:	89 de                	mov    esi,ebx
10000f1d:	89 d1                	mov    ecx,edx
10000f1f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
10000f21:	0f b7 45 c6          	movzx  eax,WORD PTR [ebp-0x3a]
10000f25:	83 e0 0f             	and    eax,0xf
10000f28:	8a 84 05 88 fe ff ff 	mov    al,BYTE PTR [ebp+eax*1-0x178]
10000f2f:	88 85 a2 fe ff ff    	mov    BYTE PTR [ebp-0x15e],al
10000f35:	83 ec 08             	sub    esp,0x8
10000f38:	8d 85 a2 fe ff ff    	lea    eax,[ebp-0x15e]
10000f3e:	50                   	push   eax
10000f3f:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000f45:	50                   	push   eax
10000f46:	e8 fc ff ff ff       	call   10000f47 <backupTree(char*, unsigned short)+0x400>	10000f47: R_386_PC32	strcat
10000f4b:	83 c4 10             	add    esp,0x10
10000f4e:	0f b7 45 c6          	movzx  eax,WORD PTR [ebp-0x3a]
10000f52:	c1 f8 04             	sar    eax,0x4
10000f55:	83 e0 0f             	and    eax,0xf
10000f58:	8a 84 05 88 fe ff ff 	mov    al,BYTE PTR [ebp+eax*1-0x178]
10000f5f:	88 85 a2 fe ff ff    	mov    BYTE PTR [ebp-0x15e],al
10000f65:	83 ec 08             	sub    esp,0x8
10000f68:	8d 85 a2 fe ff ff    	lea    eax,[ebp-0x15e]
10000f6e:	50                   	push   eax
10000f6f:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000f75:	50                   	push   eax
10000f76:	e8 fc ff ff ff       	call   10000f77 <backupTree(char*, unsigned short)+0x430>	10000f77: R_386_PC32	strcat
10000f7b:	83 c4 10             	add    esp,0x10
10000f7e:	0f b7 45 c6          	movzx  eax,WORD PTR [ebp-0x3a]
10000f82:	c1 f8 08             	sar    eax,0x8
10000f85:	83 e0 0f             	and    eax,0xf
10000f88:	8a 84 05 88 fe ff ff 	mov    al,BYTE PTR [ebp+eax*1-0x178]
10000f8f:	88 85 a2 fe ff ff    	mov    BYTE PTR [ebp-0x15e],al
10000f95:	83 ec 08             	sub    esp,0x8
10000f98:	8d 85 a2 fe ff ff    	lea    eax,[ebp-0x15e]
10000f9e:	50                   	push   eax
10000f9f:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000fa5:	50                   	push   eax
10000fa6:	e8 fc ff ff ff       	call   10000fa7 <backupTree(char*, unsigned short)+0x460>	10000fa7: R_386_PC32	strcat
10000fab:	83 c4 10             	add    esp,0x10
10000fae:	66 8b 45 c6          	mov    ax,WORD PTR [ebp-0x3a]
10000fb2:	66 c1 e8 0c          	shr    ax,0xc
10000fb6:	0f b7 c0             	movzx  eax,ax
10000fb9:	8a 84 05 88 fe ff ff 	mov    al,BYTE PTR [ebp+eax*1-0x178]
10000fc0:	88 85 a2 fe ff ff    	mov    BYTE PTR [ebp-0x15e],al
10000fc6:	83 ec 08             	sub    esp,0x8
10000fc9:	8d 85 a2 fe ff ff    	lea    eax,[ebp-0x15e]
10000fcf:	50                   	push   eax
10000fd0:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000fd6:	50                   	push   eax
10000fd7:	e8 fc ff ff ff       	call   10000fd8 <backupTree(char*, unsigned short)+0x491>	10000fd8: R_386_PC32	strcat
10000fdc:	83 c4 10             	add    esp,0x10
10000fdf:	83 ec 0c             	sub    esp,0xc
10000fe2:	68 14 01 00 00       	push   0x114
10000fe7:	e8 fc ff ff ff       	call   10000fe8 <backupTree(char*, unsigned short)+0x4a1>	10000fe8: R_386_PC32	operator new(unsigned long)
10000fec:	83 c4 10             	add    esp,0x10
10000fef:	89 c3                	mov    ebx,eax
10000ff1:	b8 00 20 00 c2       	mov    eax,0xc2002000
10000ff6:	8b 00                	mov    eax,DWORD PTR [eax]
10000ff8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
10000ffb:	83 ec 04             	sub    esp,0x4
10000ffe:	50                   	push   eax
10000fff:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10001002:	53                   	push   ebx
10001003:	e8 fc ff ff ff       	call   10001004 <backupTree(char*, unsigned short)+0x4bd>	10001004: R_386_PC32	File::File(char const*, Process*)
10001008:	83 c4 10             	add    esp,0x10
1000100b:	89 5d c0             	mov    DWORD PTR [ebp-0x40],ebx
1000100e:	83 ec 08             	sub    esp,0x8
10001011:	6a 01                	push   0x1
10001013:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
10001016:	e8 fc ff ff ff       	call   10001017 <backupTree(char*, unsigned short)+0x4d0>	10001017: R_386_PC32	File::open(FileOpenMode)
1000101b:	83 c4 10             	add    esp,0x10
1000101e:	83 7d c0 00          	cmp    DWORD PTR [ebp-0x40],0x0
10001022:	75 15                	jne    10001039 <backupTree(char*, unsigned short)+0x4f2>
10001024:	83 ec 0c             	sub    esp,0xc
10001027:	68 dc 97 00 10       	push   0x100097dc	10001028: R_386_32	.text
1000102c:	e8 fc ff ff ff       	call   1000102d <backupTree(char*, unsigned short)+0x4e6>	1000102d: R_386_PC32	KePanic(char const*)
10001031:	83 c4 10             	add    esp,0x10
10001034:	e9 3e 01 00 00       	jmp    10001177 <backupTree(char*, unsigned short)+0x630>
10001039:	83 7d c0 00          	cmp    DWORD PTR [ebp-0x40],0x0
1000103d:	0f 84 c5 fb ff ff    	je     10000c08 <backupTree(char*, unsigned short)+0xc1>
10001043:	83 ec 0c             	sub    esp,0xc
10001046:	68 14 01 00 00       	push   0x114
1000104b:	e8 fc ff ff ff       	call   1000104c <backupTree(char*, unsigned short)+0x505>	1000104c: R_386_PC32	operator new(unsigned long)
10001050:	83 c4 10             	add    esp,0x10
10001053:	89 c3                	mov    ebx,eax
10001055:	b8 00 20 00 c2       	mov    eax,0xc2002000
1000105a:	8b 00                	mov    eax,DWORD PTR [eax]
1000105c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
1000105f:	83 ec 04             	sub    esp,0x4
10001062:	50                   	push   eax
10001063:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10001069:	50                   	push   eax
1000106a:	53                   	push   ebx
1000106b:	e8 fc ff ff ff       	call   1000106c <backupTree(char*, unsigned short)+0x525>	1000106c: R_386_PC32	File::File(char const*, Process*)
10001070:	83 c4 10             	add    esp,0x10
10001073:	89 5d bc             	mov    DWORD PTR [ebp-0x44],ebx
10001076:	83 ec 08             	sub    esp,0x8
10001079:	6a 12                	push   0x12
1000107b:	ff 75 bc             	push   DWORD PTR [ebp-0x44]
1000107e:	e8 fc ff ff ff       	call   1000107f <backupTree(char*, unsigned short)+0x538>	1000107f: R_386_PC32	File::open(FileOpenMode)
10001083:	83 c4 10             	add    esp,0x10
10001086:	83 7d bc 00          	cmp    DWORD PTR [ebp-0x44],0x0
1000108a:	75 23                	jne    100010af <backupTree(char*, unsigned short)+0x568>
1000108c:	83 ec 0c             	sub    esp,0xc
1000108f:	68 dc 97 00 10       	push   0x100097dc	10001090: R_386_32	.text
10001094:	e8 fc ff ff ff       	call   10001095 <backupTree(char*, unsigned short)+0x54e>	10001095: R_386_PC32	KePanic(char const*)
10001099:	83 c4 10             	add    esp,0x10
1000109c:	83 ec 0c             	sub    esp,0xc
1000109f:	ff 75 bc             	push   DWORD PTR [ebp-0x44]
100010a2:	e8 fc ff ff ff       	call   100010a3 <backupTree(char*, unsigned short)+0x55c>	100010a3: R_386_PC32	File::close()
100010a7:	83 c4 10             	add    esp,0x10
100010aa:	e9 c8 00 00 00       	jmp    10001177 <backupTree(char*, unsigned short)+0x630>
100010af:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
100010b2:	8b 00                	mov    eax,DWORD PTR [eax]
100010b4:	83 c0 0c             	add    eax,0xc
100010b7:	8b 00                	mov    eax,DWORD PTR [eax]
100010b9:	83 ec 0c             	sub    esp,0xc
100010bc:	8d 95 84 fe ff ff    	lea    edx,[ebp-0x17c]
100010c2:	52                   	push   edx
100010c3:	8d 95 80 ee ff ff    	lea    edx,[ebp-0x1180]
100010c9:	52                   	push   edx
100010ca:	6a 00                	push   0x0
100010cc:	68 00 10 00 00       	push   0x1000
100010d1:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
100010d4:	ff d0                	call   eax
100010d6:	83 c4 20             	add    esp,0x20
100010d9:	89 45 b8             	mov    DWORD PTR [ebp-0x48],eax
100010dc:	83 7d b8 00          	cmp    DWORD PTR [ebp-0x48],0x0
100010e0:	75 3b                	jne    1000111d <backupTree(char*, unsigned short)+0x5d6>
100010e2:	8b 45 bc             	mov    eax,DWORD PTR [ebp-0x44]
100010e5:	8b 00                	mov    eax,DWORD PTR [eax]
100010e7:	83 c0 10             	add    eax,0x10
100010ea:	8b 08                	mov    ecx,DWORD PTR [eax]
100010ec:	8b 85 84 fe ff ff    	mov    eax,DWORD PTR [ebp-0x17c]
100010f2:	99                   	cdq    
100010f3:	83 ec 0c             	sub    esp,0xc
100010f6:	8d 9d 80 fe ff ff    	lea    ebx,[ebp-0x180]
100010fc:	53                   	push   ebx
100010fd:	8d 9d 80 ee ff ff    	lea    ebx,[ebp-0x1180]
10001103:	53                   	push   ebx
10001104:	52                   	push   edx
10001105:	50                   	push   eax
10001106:	ff 75 bc             	push   DWORD PTR [ebp-0x44]
10001109:	ff d1                	call   ecx
1000110b:	83 c4 20             	add    esp,0x20
1000110e:	8b 85 84 fe ff ff    	mov    eax,DWORD PTR [ebp-0x17c]
10001114:	3d 00 10 00 00       	cmp    eax,0x1000
10001119:	75 05                	jne    10001120 <backupTree(char*, unsigned short)+0x5d9>
1000111b:	eb 92                	jmp    100010af <backupTree(char*, unsigned short)+0x568>
1000111d:	90                   	nop
1000111e:	eb 01                	jmp    10001121 <backupTree(char*, unsigned short)+0x5da>
10001120:	90                   	nop
10001121:	83 ec 0c             	sub    esp,0xc
10001124:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
10001127:	e8 fc ff ff ff       	call   10001128 <backupTree(char*, unsigned short)+0x5e1>	10001128: R_386_PC32	File::close()
1000112c:	83 c4 10             	add    esp,0x10
1000112f:	83 ec 0c             	sub    esp,0xc
10001132:	ff 75 bc             	push   DWORD PTR [ebp-0x44]
10001135:	e8 fc ff ff ff       	call   10001136 <backupTree(char*, unsigned short)+0x5ef>	10001136: R_386_PC32	File::close()
1000113a:	83 c4 10             	add    esp,0x10
1000113d:	83 7d c0 00          	cmp    DWORD PTR [ebp-0x40],0x0
10001141:	74 15                	je     10001158 <backupTree(char*, unsigned short)+0x611>
10001143:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
10001146:	8b 00                	mov    eax,DWORD PTR [eax]
10001148:	83 c0 08             	add    eax,0x8
1000114b:	8b 00                	mov    eax,DWORD PTR [eax]
1000114d:	83 ec 0c             	sub    esp,0xc
10001150:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
10001153:	ff d0                	call   eax
10001155:	83 c4 10             	add    esp,0x10
10001158:	83 7d bc 00          	cmp    DWORD PTR [ebp-0x44],0x0
1000115c:	0f 84 a6 fa ff ff    	je     10000c08 <backupTree(char*, unsigned short)+0xc1>
10001162:	8b 45 bc             	mov    eax,DWORD PTR [ebp-0x44]
10001165:	8b 00                	mov    eax,DWORD PTR [eax]
10001167:	83 c0 08             	add    eax,0x8
1000116a:	8b 00                	mov    eax,DWORD PTR [eax]
1000116c:	83 ec 0c             	sub    esp,0xc
1000116f:	ff 75 bc             	push   DWORD PTR [ebp-0x44]
10001172:	ff d0                	call   eax
10001174:	83 c4 10             	add    esp,0x10
10001177:	e9 8c fa ff ff       	jmp    10000c08 <backupTree(char*, unsigned short)+0xc1>
1000117c:	90                   	nop
1000117d:	83 ec 0c             	sub    esp,0xc
10001180:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10001183:	e8 fc ff ff ff       	call   10001184 <backupTree(char*, unsigned short)+0x63d>	10001184: R_386_PC32	free
10001188:	83 c4 10             	add    esp,0x10
1000118b:	83 ec 0c             	sub    esp,0xc
1000118e:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10001191:	e8 fc ff ff ff       	call   10001192 <backupTree(char*, unsigned short)+0x64b>	10001192: R_386_PC32	Directory::close()
10001196:	83 c4 10             	add    esp,0x10
10001199:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
1000119d:	74 18                	je     100011b7 <backupTree(char*, unsigned short)+0x670>
1000119f:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
100011a2:	8b 00                	mov    eax,DWORD PTR [eax]
100011a4:	83 c0 08             	add    eax,0x8
100011a7:	8b 00                	mov    eax,DWORD PTR [eax]
100011a9:	83 ec 0c             	sub    esp,0xc
100011ac:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
100011af:	ff d0                	call   eax
100011b1:	83 c4 10             	add    esp,0x10
100011b4:	eb 01                	jmp    100011b7 <backupTree(char*, unsigned short)+0x670>
100011b6:	90                   	nop
100011b7:	8d 65 f4             	lea    esp,[ebp-0xc]
100011ba:	5b                   	pop    ebx
100011bb:	5e                   	pop    esi
100011bc:	5f                   	pop    edi
100011bd:	5d                   	pop    ebp
100011be:	c3                   	ret    

100011bf <createUser(char const*)>:
100011bf:	55                   	push   ebp
100011c0:	89 e5                	mov    ebp,esp
100011c2:	81 ec 08 01 00 00    	sub    esp,0x108
100011c8:	68 26 98 00 10       	push   0x10009826	100011c9: R_386_32	.text
100011cd:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100011d3:	50                   	push   eax
100011d4:	e8 fc ff ff ff       	call   100011d5 <createUser(char const*)+0x16>	100011d5: R_386_PC32	strcpy
100011d9:	83 c4 08             	add    esp,0x8
100011dc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100011df:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100011e5:	50                   	push   eax
100011e6:	e8 fc ff ff ff       	call   100011e7 <createUser(char const*)+0x28>	100011e7: R_386_PC32	strcat
100011eb:	83 c4 08             	add    esp,0x8
100011ee:	83 ec 08             	sub    esp,0x8
100011f1:	68 c0 01 00 00       	push   0x1c0
100011f6:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100011fc:	50                   	push   eax
100011fd:	e8 fc ff ff ff       	call   100011fe <createUser(char const*)+0x3f>	100011fe: R_386_PC32	mkdir(char const*, int)
10001202:	83 c4 10             	add    esp,0x10
10001205:	83 ec 08             	sub    esp,0x8
10001208:	68 30 98 00 10       	push   0x10009830	10001209: R_386_32	.text
1000120d:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001213:	50                   	push   eax
10001214:	e8 fc ff ff ff       	call   10001215 <createUser(char const*)+0x56>	10001215: R_386_PC32	strcat
10001219:	83 c4 10             	add    esp,0x10
1000121c:	83 ec 08             	sub    esp,0x8
1000121f:	68 c0 01 00 00       	push   0x1c0
10001224:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000122a:	50                   	push   eax
1000122b:	e8 fc ff ff ff       	call   1000122c <createUser(char const*)+0x6d>	1000122c: R_386_PC32	mkdir(char const*, int)
10001230:	83 c4 10             	add    esp,0x10
10001233:	83 ec 08             	sub    esp,0x8
10001236:	68 26 98 00 10       	push   0x10009826	10001237: R_386_32	.text
1000123b:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001241:	50                   	push   eax
10001242:	e8 fc ff ff ff       	call   10001243 <createUser(char const*)+0x84>	10001243: R_386_PC32	strcpy
10001247:	83 c4 10             	add    esp,0x10
1000124a:	83 ec 08             	sub    esp,0x8
1000124d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001250:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001256:	50                   	push   eax
10001257:	e8 fc ff ff ff       	call   10001258 <createUser(char const*)+0x99>	10001258: R_386_PC32	strcat
1000125c:	83 c4 10             	add    esp,0x10
1000125f:	83 ec 08             	sub    esp,0x8
10001262:	68 39 98 00 10       	push   0x10009839	10001263: R_386_32	.text
10001267:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000126d:	50                   	push   eax
1000126e:	e8 fc ff ff ff       	call   1000126f <createUser(char const*)+0xb0>	1000126f: R_386_PC32	strcat
10001273:	83 c4 10             	add    esp,0x10
10001276:	83 ec 08             	sub    esp,0x8
10001279:	68 c0 01 00 00       	push   0x1c0
1000127e:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001284:	50                   	push   eax
10001285:	e8 fc ff ff ff       	call   10001286 <createUser(char const*)+0xc7>	10001286: R_386_PC32	mkdir(char const*, int)
1000128a:	83 c4 10             	add    esp,0x10
1000128d:	83 ec 08             	sub    esp,0x8
10001290:	68 26 98 00 10       	push   0x10009826	10001291: R_386_32	.text
10001295:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000129b:	50                   	push   eax
1000129c:	e8 fc ff ff ff       	call   1000129d <createUser(char const*)+0xde>	1000129d: R_386_PC32	strcpy
100012a1:	83 c4 10             	add    esp,0x10
100012a4:	83 ec 08             	sub    esp,0x8
100012a7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100012aa:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100012b0:	50                   	push   eax
100012b1:	e8 fc ff ff ff       	call   100012b2 <createUser(char const*)+0xf3>	100012b2: R_386_PC32	strcat
100012b6:	83 c4 10             	add    esp,0x10
100012b9:	83 ec 08             	sub    esp,0x8
100012bc:	68 44 98 00 10       	push   0x10009844	100012bd: R_386_32	.text
100012c1:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100012c7:	50                   	push   eax
100012c8:	e8 fc ff ff ff       	call   100012c9 <createUser(char const*)+0x10a>	100012c9: R_386_PC32	strcat
100012cd:	83 c4 10             	add    esp,0x10
100012d0:	83 ec 08             	sub    esp,0x8
100012d3:	68 c0 01 00 00       	push   0x1c0
100012d8:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100012de:	50                   	push   eax
100012df:	e8 fc ff ff ff       	call   100012e0 <createUser(char const*)+0x121>	100012e0: R_386_PC32	mkdir(char const*, int)
100012e4:	83 c4 10             	add    esp,0x10
100012e7:	83 ec 08             	sub    esp,0x8
100012ea:	68 26 98 00 10       	push   0x10009826	100012eb: R_386_32	.text
100012ef:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100012f5:	50                   	push   eax
100012f6:	e8 fc ff ff ff       	call   100012f7 <createUser(char const*)+0x138>	100012f7: R_386_PC32	strcpy
100012fb:	83 c4 10             	add    esp,0x10
100012fe:	83 ec 08             	sub    esp,0x8
10001301:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001304:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000130a:	50                   	push   eax
1000130b:	e8 fc ff ff ff       	call   1000130c <createUser(char const*)+0x14d>	1000130c: R_386_PC32	strcat
10001310:	83 c4 10             	add    esp,0x10
10001313:	83 ec 08             	sub    esp,0x8
10001316:	68 4f 98 00 10       	push   0x1000984f	10001317: R_386_32	.text
1000131b:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001321:	50                   	push   eax
10001322:	e8 fc ff ff ff       	call   10001323 <createUser(char const*)+0x164>	10001323: R_386_PC32	strcat
10001327:	83 c4 10             	add    esp,0x10
1000132a:	83 ec 08             	sub    esp,0x8
1000132d:	68 c0 01 00 00       	push   0x1c0
10001332:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001338:	50                   	push   eax
10001339:	e8 fc ff ff ff       	call   1000133a <createUser(char const*)+0x17b>	1000133a: R_386_PC32	mkdir(char const*, int)
1000133e:	83 c4 10             	add    esp,0x10
10001341:	83 ec 08             	sub    esp,0x8
10001344:	68 26 98 00 10       	push   0x10009826	10001345: R_386_32	.text
10001349:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000134f:	50                   	push   eax
10001350:	e8 fc ff ff ff       	call   10001351 <createUser(char const*)+0x192>	10001351: R_386_PC32	strcpy
10001355:	83 c4 10             	add    esp,0x10
10001358:	83 ec 08             	sub    esp,0x8
1000135b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000135e:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001364:	50                   	push   eax
10001365:	e8 fc ff ff ff       	call   10001366 <createUser(char const*)+0x1a7>	10001366: R_386_PC32	strcat
1000136a:	83 c4 10             	add    esp,0x10
1000136d:	83 ec 08             	sub    esp,0x8
10001370:	68 57 98 00 10       	push   0x10009857	10001371: R_386_32	.text
10001375:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000137b:	50                   	push   eax
1000137c:	e8 fc ff ff ff       	call   1000137d <createUser(char const*)+0x1be>	1000137d: R_386_PC32	strcat
10001381:	83 c4 10             	add    esp,0x10
10001384:	83 ec 08             	sub    esp,0x8
10001387:	68 c0 01 00 00       	push   0x1c0
1000138c:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001392:	50                   	push   eax
10001393:	e8 fc ff ff ff       	call   10001394 <createUser(char const*)+0x1d5>	10001394: R_386_PC32	mkdir(char const*, int)
10001398:	83 c4 10             	add    esp,0x10
1000139b:	83 ec 08             	sub    esp,0x8
1000139e:	68 26 98 00 10       	push   0x10009826	1000139f: R_386_32	.text
100013a3:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100013a9:	50                   	push   eax
100013aa:	e8 fc ff ff ff       	call   100013ab <createUser(char const*)+0x1ec>	100013ab: R_386_PC32	strcpy
100013af:	83 c4 10             	add    esp,0x10
100013b2:	83 ec 08             	sub    esp,0x8
100013b5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100013b8:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100013be:	50                   	push   eax
100013bf:	e8 fc ff ff ff       	call   100013c0 <createUser(char const*)+0x201>	100013c0: R_386_PC32	strcat
100013c4:	83 c4 10             	add    esp,0x10
100013c7:	83 ec 08             	sub    esp,0x8
100013ca:	68 62 98 00 10       	push   0x10009862	100013cb: R_386_32	.text
100013cf:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100013d5:	50                   	push   eax
100013d6:	e8 fc ff ff ff       	call   100013d7 <createUser(char const*)+0x218>	100013d7: R_386_PC32	strcat
100013db:	83 c4 10             	add    esp,0x10
100013de:	83 ec 08             	sub    esp,0x8
100013e1:	68 c0 01 00 00       	push   0x1c0
100013e6:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100013ec:	50                   	push   eax
100013ed:	e8 fc ff ff ff       	call   100013ee <createUser(char const*)+0x22f>	100013ee: R_386_PC32	mkdir(char const*, int)
100013f2:	83 c4 10             	add    esp,0x10
100013f5:	83 ec 08             	sub    esp,0x8
100013f8:	68 26 98 00 10       	push   0x10009826	100013f9: R_386_32	.text
100013fd:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001403:	50                   	push   eax
10001404:	e8 fc ff ff ff       	call   10001405 <createUser(char const*)+0x246>	10001405: R_386_PC32	strcpy
10001409:	83 c4 10             	add    esp,0x10
1000140c:	83 ec 08             	sub    esp,0x8
1000140f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001412:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001418:	50                   	push   eax
10001419:	e8 fc ff ff ff       	call   1000141a <createUser(char const*)+0x25b>	1000141a: R_386_PC32	strcat
1000141e:	83 c4 10             	add    esp,0x10
10001421:	83 ec 08             	sub    esp,0x8
10001424:	68 69 98 00 10       	push   0x10009869	10001425: R_386_32	.text
10001429:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000142f:	50                   	push   eax
10001430:	e8 fc ff ff ff       	call   10001431 <createUser(char const*)+0x272>	10001431: R_386_PC32	strcat
10001435:	83 c4 10             	add    esp,0x10
10001438:	83 ec 08             	sub    esp,0x8
1000143b:	68 c0 01 00 00       	push   0x1c0
10001440:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001446:	50                   	push   eax
10001447:	e8 fc ff ff ff       	call   10001448 <createUser(char const*)+0x289>	10001448: R_386_PC32	mkdir(char const*, int)
1000144c:	83 c4 10             	add    esp,0x10
1000144f:	83 ec 08             	sub    esp,0x8
10001452:	68 71 98 00 10       	push   0x10009871	10001453: R_386_32	.text
10001457:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000145d:	50                   	push   eax
1000145e:	e8 fc ff ff ff       	call   1000145f <createUser(char const*)+0x2a0>	1000145f: R_386_PC32	strcpy
10001463:	83 c4 10             	add    esp,0x10
10001466:	83 ec 08             	sub    esp,0x8
10001469:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000146c:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001472:	50                   	push   eax
10001473:	e8 fc ff ff ff       	call   10001474 <createUser(char const*)+0x2b5>	10001474: R_386_PC32	strcat
10001478:	83 c4 10             	add    esp,0x10
1000147b:	83 ec 08             	sub    esp,0x8
1000147e:	68 c0 01 00 00       	push   0x1c0
10001483:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001489:	50                   	push   eax
1000148a:	e8 fc ff ff ff       	call   1000148b <createUser(char const*)+0x2cc>	1000148b: R_386_PC32	mkdir(char const*, int)
1000148f:	83 c4 10             	add    esp,0x10
10001492:	83 ec 08             	sub    esp,0x8
10001495:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000149b:	50                   	push   eax
1000149c:	68 8c 98 00 10       	push   0x1000988c	1000149d: R_386_32	.text
100014a1:	e8 fc ff ff ff       	call   100014a2 <createUser(char const*)+0x2e3>	100014a2: R_386_PC32	copytree(char*, char*)
100014a6:	83 c4 10             	add    esp,0x10
100014a9:	90                   	nop
100014aa:	c9                   	leave  
100014ab:	c3                   	ret    

100014ac <drawBootScreen()>:
100014ac:	55                   	push   ebp
100014ad:	89 e5                	mov    ebp,esp
100014af:	83 ec 18             	sub    esp,0x18
100014b2:	a1 00 00 00 00       	mov    eax,ds:0x0	100014b3: R_386_32	term
100014b7:	83 ec 08             	sub    esp,0x8
100014ba:	6a 0b                	push   0xb
100014bc:	50                   	push   eax
100014bd:	e8 fc ff ff ff       	call   100014be <drawBootScreen()+0x12>	100014be: R_386_PC32	VgaText::setDefaultBgColour(VgaColour)
100014c2:	83 c4 10             	add    esp,0x10
100014c5:	a1 00 00 00 00       	mov    eax,ds:0x0	100014c6: R_386_32	term
100014ca:	83 ec 08             	sub    esp,0x8
100014cd:	6a 00                	push   0x0
100014cf:	50                   	push   eax
100014d0:	e8 fc ff ff ff       	call   100014d1 <drawBootScreen()+0x25>	100014d1: R_386_PC32	VgaText::setDefaultFgColour(VgaColour)
100014d5:	83 c4 10             	add    esp,0x10
100014d8:	a1 00 00 00 00       	mov    eax,ds:0x0	100014d9: R_386_32	term
100014dd:	83 ec 0c             	sub    esp,0xc
100014e0:	50                   	push   eax
100014e1:	e8 fc ff ff ff       	call   100014e2 <drawBootScreen()+0x36>	100014e2: R_386_PC32	VgaText::clearScreen()
100014e6:	83 c4 10             	add    esp,0x10
100014e9:	a1 00 00 00 00       	mov    eax,ds:0x0	100014ea: R_386_32	term
100014ee:	83 ec 08             	sub    esp,0x8
100014f1:	68 ab 98 00 10       	push   0x100098ab	100014f2: R_386_32	.text
100014f6:	50                   	push   eax
100014f7:	e8 fc ff ff ff       	call   100014f8 <drawBootScreen()+0x4c>	100014f8: R_386_PC32	VgaText::setTitle(char*)
100014fc:	83 c4 10             	add    esp,0x10
100014ff:	a1 00 00 00 00       	mov    eax,ds:0x0	10001500: R_386_32	term
10001504:	83 ec 08             	sub    esp,0x8
10001507:	6a 00                	push   0x0
10001509:	50                   	push   eax
1000150a:	e8 fc ff ff ff       	call   1000150b <drawBootScreen()+0x5f>	1000150b: R_386_PC32	VgaText::setTitleColour(VgaColour)
1000150f:	83 c4 10             	add    esp,0x10
10001512:	a1 00 00 00 00       	mov    eax,ds:0x0	10001513: R_386_32	term
10001517:	83 ec 08             	sub    esp,0x8
1000151a:	6a 00                	push   0x0
1000151c:	50                   	push   eax
1000151d:	e8 fc ff ff ff       	call   1000151e <drawBootScreen()+0x72>	1000151e: R_386_PC32	VgaText::setTitleTextColour(VgaColour)
10001522:	83 c4 10             	add    esp,0x10
10001525:	a1 00 00 00 00       	mov    eax,ds:0x0	10001526: R_386_32	term
1000152a:	83 ec 04             	sub    esp,0x4
1000152d:	6a 00                	push   0x0
1000152f:	6a 00                	push   0x0
10001531:	50                   	push   eax
10001532:	e8 fc ff ff ff       	call   10001533 <drawBootScreen()+0x87>	10001533: R_386_PC32	VgaText::setCursor(int, int)
10001537:	83 c4 10             	add    esp,0x10
1000153a:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
10001541:	83 7d f4 4f          	cmp    DWORD PTR [ebp-0xc],0x4f
10001545:	7f 19                	jg     10001560 <drawBootScreen()+0xb4>
10001547:	a1 00 00 00 00       	mov    eax,ds:0x0	10001548: R_386_32	term
1000154c:	6a 00                	push   0x0
1000154e:	6a 00                	push   0x0
10001550:	6a 20                	push   0x20
10001552:	50                   	push   eax
10001553:	e8 fc ff ff ff       	call   10001554 <drawBootScreen()+0xa8>	10001554: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
10001558:	83 c4 10             	add    esp,0x10
1000155b:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
1000155e:	eb e1                	jmp    10001541 <drawBootScreen()+0x95>
10001560:	a0 00 00 00 00       	mov    al,ds:0x0	10001561: R_386_32	showSidebar
10001565:	84 c0                	test   al,al
10001567:	0f 84 91 00 00 00    	je     100015fe <drawBootScreen()+0x152>
1000156d:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
10001574:	83 7d f0 18          	cmp    DWORD PTR [ebp-0x10],0x18
10001578:	7f 41                	jg     100015bb <drawBootScreen()+0x10f>
1000157a:	a1 00 00 00 00       	mov    eax,ds:0x0	1000157b: R_386_32	term
1000157f:	83 ec 04             	sub    esp,0x4
10001582:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10001585:	6a 00                	push   0x0
10001587:	50                   	push   eax
10001588:	e8 fc ff ff ff       	call   10001589 <drawBootScreen()+0xdd>	10001589: R_386_PC32	VgaText::setCursor(int, int)
1000158d:	83 c4 10             	add    esp,0x10
10001590:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
10001597:	83 7d ec 0f          	cmp    DWORD PTR [ebp-0x14],0xf
1000159b:	7f 19                	jg     100015b6 <drawBootScreen()+0x10a>
1000159d:	a1 00 00 00 00       	mov    eax,ds:0x0	1000159e: R_386_32	term
100015a2:	6a 00                	push   0x0
100015a4:	6a 00                	push   0x0
100015a6:	6a 20                	push   0x20
100015a8:	50                   	push   eax
100015a9:	e8 fc ff ff ff       	call   100015aa <drawBootScreen()+0xfe>	100015aa: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
100015ae:	83 c4 10             	add    esp,0x10
100015b1:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
100015b4:	eb e1                	jmp    10001597 <drawBootScreen()+0xeb>
100015b6:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
100015b9:	eb b9                	jmp    10001574 <drawBootScreen()+0xc8>
100015bb:	a1 00 00 00 00       	mov    eax,ds:0x0	100015bc: R_386_32	term
100015c0:	83 ec 04             	sub    esp,0x4
100015c3:	6a 01                	push   0x1
100015c5:	6a 01                	push   0x1
100015c7:	50                   	push   eax
100015c8:	e8 fc ff ff ff       	call   100015c9 <drawBootScreen()+0x11d>	100015c9: R_386_PC32	VgaText::setCursor(int, int)
100015cd:	83 c4 10             	add    esp,0x10
100015d0:	a1 00 00 00 00       	mov    eax,ds:0x0	100015d1: R_386_32	term
100015d5:	6a 00                	push   0x0
100015d7:	6a 0f                	push   0xf
100015d9:	68 ac 98 00 10       	push   0x100098ac	100015da: R_386_32	.text
100015de:	50                   	push   eax
100015df:	e8 fc ff ff ff       	call   100015e0 <drawBootScreen()+0x134>	100015e0: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
100015e4:	83 c4 10             	add    esp,0x10
100015e7:	a1 00 00 00 00       	mov    eax,ds:0x0	100015e8: R_386_32	term
100015ec:	6a 00                	push   0x0
100015ee:	6a 0e                	push   0xe
100015f0:	68 2f 99 00 10       	push   0x1000992f	100015f1: R_386_32	.text
100015f5:	50                   	push   eax
100015f6:	e8 fc ff ff ff       	call   100015f7 <drawBootScreen()+0x14b>	100015f7: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
100015fb:	83 c4 10             	add    esp,0x10
100015fe:	a1 00 00 00 00       	mov    eax,ds:0x0	100015ff: R_386_32	term
10001603:	83 ec 08             	sub    esp,0x8
10001606:	6a 0f                	push   0xf
10001608:	50                   	push   eax
10001609:	e8 fc ff ff ff       	call   1000160a <drawBootScreen()+0x15e>	1000160a: R_386_PC32	VgaText::setDefaultBgColour(VgaColour)
1000160e:	83 c4 10             	add    esp,0x10
10001611:	a1 00 00 00 00       	mov    eax,ds:0x0	10001612: R_386_32	term
10001616:	83 ec 08             	sub    esp,0x8
10001619:	6a 00                	push   0x0
1000161b:	50                   	push   eax
1000161c:	e8 fc ff ff ff       	call   1000161d <drawBootScreen()+0x171>	1000161d: R_386_PC32	VgaText::setDefaultFgColour(VgaColour)
10001621:	83 c4 10             	add    esp,0x10
10001624:	90                   	nop
10001625:	c9                   	leave  
10001626:	c3                   	ret    

10001627 <drawBasicWindowX(int, int, int, int, char const*, bool)>:
10001627:	55                   	push   ebp
10001628:	89 e5                	mov    ebp,esp
1000162a:	53                   	push   ebx
1000162b:	83 ec 34             	sub    esp,0x34
1000162e:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
10001631:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
10001634:	ff 45 0c             	inc    DWORD PTR [ebp+0xc]
10001637:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
1000163e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10001641:	3b 45 14             	cmp    eax,DWORD PTR [ebp+0x14]
10001644:	7d 6c                	jge    100016b2 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x8b>
10001646:	a1 00 00 00 00       	mov    eax,ds:0x0	10001647: R_386_32	term
1000164b:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
1000164e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001651:	01 ca                	add    edx,ecx
10001653:	83 ec 04             	sub    esp,0x4
10001656:	52                   	push   edx
10001657:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000165a:	50                   	push   eax
1000165b:	e8 fc ff ff ff       	call   1000165c <drawBasicWindowX(int, int, int, int, char const*, bool)+0x35>	1000165c: R_386_PC32	VgaText::setCursor(int, int)
10001660:	83 c4 10             	add    esp,0x10
10001663:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
1000166a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
1000166d:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
10001670:	7d 3b                	jge    100016ad <drawBasicWindowX(int, int, int, int, char const*, bool)+0x86>
10001672:	a1 00 00 00 00       	mov    eax,ds:0x0	10001673: R_386_32	term
10001677:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
1000167b:	74 07                	je     10001684 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x5d>
1000167d:	b9 07 00 00 00       	mov    ecx,0x7
10001682:	eb 05                	jmp    10001689 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x62>
10001684:	b9 0f 00 00 00       	mov    ecx,0xf
10001689:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
1000168d:	74 07                	je     10001696 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x6f>
1000168f:	ba 07 00 00 00       	mov    edx,0x7
10001694:	eb 05                	jmp    1000169b <drawBasicWindowX(int, int, int, int, char const*, bool)+0x74>
10001696:	ba 0f 00 00 00       	mov    edx,0xf
1000169b:	51                   	push   ecx
1000169c:	52                   	push   edx
1000169d:	6a 20                	push   0x20
1000169f:	50                   	push   eax
100016a0:	e8 fc ff ff ff       	call   100016a1 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x7a>	100016a1: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
100016a5:	83 c4 10             	add    esp,0x10
100016a8:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
100016ab:	eb bd                	jmp    1000166a <drawBasicWindowX(int, int, int, int, char const*, bool)+0x43>
100016ad:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
100016b0:	eb 8c                	jmp    1000163e <drawBasicWindowX(int, int, int, int, char const*, bool)+0x17>
100016b2:	a1 00 00 00 00       	mov    eax,ds:0x0	100016b3: R_386_32	term
100016b7:	83 ec 04             	sub    esp,0x4
100016ba:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
100016bd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100016c0:	50                   	push   eax
100016c1:	e8 fc ff ff ff       	call   100016c2 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x9b>	100016c2: R_386_PC32	VgaText::setCursor(int, int)
100016c6:	83 c4 10             	add    esp,0x10
100016c9:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
100016d0:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
100016d3:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
100016d6:	7d 19                	jge    100016f1 <drawBasicWindowX(int, int, int, int, char const*, bool)+0xca>
100016d8:	a1 00 00 00 00       	mov    eax,ds:0x0	100016d9: R_386_32	term
100016dd:	6a 01                	push   0x1
100016df:	6a 01                	push   0x1
100016e1:	6a 20                	push   0x20
100016e3:	50                   	push   eax
100016e4:	e8 fc ff ff ff       	call   100016e5 <drawBasicWindowX(int, int, int, int, char const*, bool)+0xbe>	100016e5: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
100016e9:	83 c4 10             	add    esp,0x10
100016ec:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
100016ef:	eb df                	jmp    100016d0 <drawBasicWindowX(int, int, int, int, char const*, bool)+0xa9>
100016f1:	a1 00 00 00 00       	mov    eax,ds:0x0	100016f2: R_386_32	term
100016f6:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
100016f9:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
100016fc:	01 d1                	add    ecx,edx
100016fe:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10001701:	42                   	inc    edx
10001702:	83 ec 04             	sub    esp,0x4
10001705:	51                   	push   ecx
10001706:	52                   	push   edx
10001707:	50                   	push   eax
10001708:	e8 fc ff ff ff       	call   10001709 <drawBasicWindowX(int, int, int, int, char const*, bool)+0xe2>	10001709: R_386_PC32	VgaText::setCursor(int, int)
1000170d:	83 c4 10             	add    esp,0x10
10001710:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
10001717:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
1000171a:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
1000171d:	7d 19                	jge    10001738 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x111>
1000171f:	a1 00 00 00 00       	mov    eax,ds:0x0	10001720: R_386_32	term
10001724:	6a 03                	push   0x3
10001726:	6a 03                	push   0x3
10001728:	6a 20                	push   0x20
1000172a:	50                   	push   eax
1000172b:	e8 fc ff ff ff       	call   1000172c <drawBasicWindowX(int, int, int, int, char const*, bool)+0x105>	1000172c: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
10001730:	83 c4 10             	add    esp,0x10
10001733:	ff 45 e8             	inc    DWORD PTR [ebp-0x18]
10001736:	eb df                	jmp    10001717 <drawBasicWindowX(int, int, int, int, char const*, bool)+0xf0>
10001738:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
1000173b:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
1000173e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10001741:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
10001744:	01 d0                	add    eax,edx
10001746:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
10001749:	0f 8d 89 00 00 00    	jge    100017d8 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x1b1>
1000174f:	a1 00 00 00 00       	mov    eax,ds:0x0	10001750: R_386_32	term
10001754:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10001757:	8d 4a 01             	lea    ecx,[edx+0x1]
1000175a:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
1000175d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10001760:	01 da                	add    edx,ebx
10001762:	83 ec 04             	sub    esp,0x4
10001765:	51                   	push   ecx
10001766:	52                   	push   edx
10001767:	50                   	push   eax
10001768:	e8 fc ff ff ff       	call   10001769 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x142>	10001769: R_386_PC32	VgaText::setCursor(int, int)
1000176d:	83 c4 10             	add    esp,0x10
10001770:	a1 00 00 00 00       	mov    eax,ds:0x0	10001771: R_386_32	term
10001775:	6a 03                	push   0x3
10001777:	6a 03                	push   0x3
10001779:	6a 20                	push   0x20
1000177b:	50                   	push   eax
1000177c:	e8 fc ff ff ff       	call   1000177d <drawBasicWindowX(int, int, int, int, char const*, bool)+0x156>	1000177d: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
10001781:	83 c4 10             	add    esp,0x10
10001784:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10001787:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
1000178a:	01 d0                	add    eax,edx
1000178c:	48                   	dec    eax
1000178d:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
10001790:	74 3e                	je     100017d0 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x1a9>
10001792:	a1 00 00 00 00       	mov    eax,ds:0x0	10001793: R_386_32	term
10001797:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
1000179a:	42                   	inc    edx
1000179b:	83 ec 04             	sub    esp,0x4
1000179e:	52                   	push   edx
1000179f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100017a2:	50                   	push   eax
100017a3:	e8 fc ff ff ff       	call   100017a4 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x17d>	100017a4: R_386_PC32	VgaText::setCursor(int, int)
100017a8:	83 c4 10             	add    esp,0x10
100017ab:	a1 00 00 00 00       	mov    eax,ds:0x0	100017ac: R_386_32	term
100017b0:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
100017b4:	74 07                	je     100017bd <drawBasicWindowX(int, int, int, int, char const*, bool)+0x196>
100017b6:	ba 07 00 00 00       	mov    edx,0x7
100017bb:	eb 05                	jmp    100017c2 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x19b>
100017bd:	ba 0f 00 00 00       	mov    edx,0xf
100017c2:	52                   	push   edx
100017c3:	6a 00                	push   0x0
100017c5:	6a dd                	push   0xffffffdd
100017c7:	50                   	push   eax
100017c8:	e8 fc ff ff ff       	call   100017c9 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x1a2>	100017c9: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
100017cd:	83 c4 10             	add    esp,0x10
100017d0:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
100017d3:	e9 66 ff ff ff       	jmp    1000173e <drawBasicWindowX(int, int, int, int, char const*, bool)+0x117>
100017d8:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
100017db:	83 ec 0c             	sub    esp,0xc
100017de:	ff 75 18             	push   DWORD PTR [ebp+0x18]
100017e1:	e8 fc ff ff ff       	call   100017e2 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x1bb>	100017e2: R_386_PC32	strlen
100017e6:	83 c4 10             	add    esp,0x10
100017e9:	29 c3                	sub    ebx,eax
100017eb:	89 d8                	mov    eax,ebx
100017ed:	d1 e8                	shr    eax,1
100017ef:	48                   	dec    eax
100017f0:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
100017f3:	a1 00 00 00 00       	mov    eax,ds:0x0	100017f4: R_386_32	term
100017f8:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
100017fb:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
100017fe:	01 ca                	add    edx,ecx
10001800:	83 ec 04             	sub    esp,0x4
10001803:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10001806:	52                   	push   edx
10001807:	50                   	push   eax
10001808:	e8 fc ff ff ff       	call   10001809 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x1e2>	10001809: R_386_PC32	VgaText::setCursor(int, int)
1000180d:	83 c4 10             	add    esp,0x10
10001810:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
10001817:	83 ec 0c             	sub    esp,0xc
1000181a:	ff 75 18             	push   DWORD PTR [ebp+0x18]
1000181d:	e8 fc ff ff ff       	call   1000181e <drawBasicWindowX(int, int, int, int, char const*, bool)+0x1f7>	1000181e: R_386_PC32	strlen
10001822:	83 c4 10             	add    esp,0x10
10001825:	89 c2                	mov    edx,eax
10001827:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
1000182a:	39 c2                	cmp    edx,eax
1000182c:	76 25                	jbe    10001853 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x22c>
1000182e:	a1 00 00 00 00       	mov    eax,ds:0x0	1000182f: R_386_32	term
10001833:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
10001836:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
10001839:	01 ca                	add    edx,ecx
1000183b:	8a 12                	mov    dl,BYTE PTR [edx]
1000183d:	0f be d2             	movsx  edx,dl
10001840:	6a 01                	push   0x1
10001842:	6a 0f                	push   0xf
10001844:	52                   	push   edx
10001845:	50                   	push   eax
10001846:	e8 fc ff ff ff       	call   10001847 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x220>	10001847: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
1000184b:	83 c4 10             	add    esp,0x10
1000184e:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
10001851:	eb c4                	jmp    10001817 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x1f0>
10001853:	90                   	nop
10001854:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
10001857:	c9                   	leave  
10001858:	c3                   	ret    

10001859 <drawBasicWindow(int, int, int, int, char const*)>:
10001859:	55                   	push   ebp
1000185a:	89 e5                	mov    ebp,esp
1000185c:	83 ec 08             	sub    esp,0x8
1000185f:	83 ec 08             	sub    esp,0x8
10001862:	6a 00                	push   0x0
10001864:	ff 75 18             	push   DWORD PTR [ebp+0x18]
10001867:	ff 75 14             	push   DWORD PTR [ebp+0x14]
1000186a:	ff 75 10             	push   DWORD PTR [ebp+0x10]
1000186d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10001870:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001873:	e8 fc ff ff ff       	call   10001874 <drawBasicWindow(int, int, int, int, char const*)+0x1b>	10001874: R_386_PC32	drawBasicWindowX(int, int, int, int, char const*, bool)
10001878:	83 c4 20             	add    esp,0x20
1000187b:	90                   	nop
1000187c:	c9                   	leave  
1000187d:	c3                   	ret    

1000187e <bootInstallKeybrd(KeyboardToken, bool*)>:
1000187e:	55                   	push   ebp
1000187f:	89 e5                	mov    ebp,esp
10001881:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
10001884:	05 04 01 00 00       	add    eax,0x104
10001889:	8a 00                	mov    al,BYTE PTR [eax]
1000188b:	84 c0                	test   al,al
1000188d:	74 15                	je     100018a4 <bootInstallKeybrd(KeyboardToken, bool*)+0x26>
1000188f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001892:	66 83 f8 09          	cmp    ax,0x9
10001896:	75 0c                	jne    100018a4 <bootInstallKeybrd(KeyboardToken, bool*)+0x26>
10001898:	c6 05 00 00 00 00 7f 	mov    BYTE PTR ds:0x0,0x7f	1000189a: R_386_32	installKey
1000189f:	e9 94 00 00 00       	jmp    10001938 <bootInstallKeybrd(KeyboardToken, bool*)+0xba>
100018a4:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
100018a7:	84 c0                	test   al,al
100018a9:	0f 85 88 00 00 00    	jne    10001937 <bootInstallKeybrd(KeyboardToken, bool*)+0xb9>
100018af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100018b2:	66 3d 0a 02          	cmp    ax,0x20a
100018b6:	75 09                	jne    100018c1 <bootInstallKeybrd(KeyboardToken, bool*)+0x43>
100018b8:	c6 05 00 00 00 00 1b 	mov    BYTE PTR ds:0x0,0x1b	100018ba: R_386_32	installKey
100018bf:	eb 77                	jmp    10001938 <bootInstallKeybrd(KeyboardToken, bool*)+0xba>
100018c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100018c4:	66 3d 0d 02          	cmp    ax,0x20d
100018c8:	75 09                	jne    100018d3 <bootInstallKeybrd(KeyboardToken, bool*)+0x55>
100018ca:	c6 05 00 00 00 00 03 	mov    BYTE PTR ds:0x0,0x3	100018cc: R_386_32	installKey
100018d1:	eb 65                	jmp    10001938 <bootInstallKeybrd(KeyboardToken, bool*)+0xba>
100018d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100018d6:	66 3d 0e 02          	cmp    ax,0x20e
100018da:	75 09                	jne    100018e5 <bootInstallKeybrd(KeyboardToken, bool*)+0x67>
100018dc:	c6 05 00 00 00 00 04 	mov    BYTE PTR ds:0x0,0x4	100018de: R_386_32	installKey
100018e3:	eb 53                	jmp    10001938 <bootInstallKeybrd(KeyboardToken, bool*)+0xba>
100018e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100018e8:	66 3d 0b 02          	cmp    ax,0x20b
100018ec:	75 09                	jne    100018f7 <bootInstallKeybrd(KeyboardToken, bool*)+0x79>
100018ee:	c6 05 00 00 00 00 01 	mov    BYTE PTR ds:0x0,0x1	100018f0: R_386_32	installKey
100018f5:	eb 41                	jmp    10001938 <bootInstallKeybrd(KeyboardToken, bool*)+0xba>
100018f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100018fa:	66 3d 0c 02          	cmp    ax,0x20c
100018fe:	75 09                	jne    10001909 <bootInstallKeybrd(KeyboardToken, bool*)+0x8b>
10001900:	c6 05 00 00 00 00 02 	mov    BYTE PTR ds:0x0,0x2	10001902: R_386_32	installKey
10001907:	eb 2f                	jmp    10001938 <bootInstallKeybrd(KeyboardToken, bool*)+0xba>
10001909:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000190c:	66 3d 05 02          	cmp    ax,0x205
10001910:	75 09                	jne    1000191b <bootInstallKeybrd(KeyboardToken, bool*)+0x9d>
10001912:	c6 05 00 00 00 00 7d 	mov    BYTE PTR ds:0x0,0x7d	10001914: R_386_32	installKey
10001919:	eb 1d                	jmp    10001938 <bootInstallKeybrd(KeyboardToken, bool*)+0xba>
1000191b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000191e:	66 3d 05 02          	cmp    ax,0x205
10001922:	75 09                	jne    1000192d <bootInstallKeybrd(KeyboardToken, bool*)+0xaf>
10001924:	c6 05 00 00 00 00 7e 	mov    BYTE PTR ds:0x0,0x7e	10001926: R_386_32	installKey
1000192b:	eb 0b                	jmp    10001938 <bootInstallKeybrd(KeyboardToken, bool*)+0xba>
1000192d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001930:	a2 00 00 00 00       	mov    ds:0x0,al	10001931: R_386_32	installKey
10001935:	eb 01                	jmp    10001938 <bootInstallKeybrd(KeyboardToken, bool*)+0xba>
10001937:	90                   	nop
10001938:	5d                   	pop    ebp
10001939:	c3                   	ret    

1000193a <bootInstallTasks(int)>:
1000193a:	55                   	push   ebp
1000193b:	89 e5                	mov    ebp,esp
1000193d:	83 ec 08             	sub    esp,0x8
10001940:	a1 00 00 00 00       	mov    eax,ds:0x0	10001941: R_386_32	term
10001945:	83 ec 04             	sub    esp,0x4
10001948:	6a 08                	push   0x8
1000194a:	6a 18                	push   0x18
1000194c:	50                   	push   eax
1000194d:	e8 fc ff ff ff       	call   1000194e <bootInstallTasks(int)+0x14>	1000194e: R_386_PC32	VgaText::setCursor(int, int)
10001952:	83 c4 10             	add    esp,0x10
10001955:	a1 00 00 00 00       	mov    eax,ds:0x0	10001956: R_386_32	term
1000195a:	83 ec 08             	sub    esp,0x8
1000195d:	68 50 99 00 10       	push   0x10009950	1000195e: R_386_32	.text
10001962:	50                   	push   eax
10001963:	e8 fc ff ff ff       	call   10001964 <bootInstallTasks(int)+0x2a>	10001964: R_386_PC32	VgaText::puts(char const*)
10001968:	83 c4 10             	add    esp,0x10
1000196b:	a1 00 00 00 00       	mov    eax,ds:0x0	1000196c: R_386_32	term
10001970:	83 ec 04             	sub    esp,0x4
10001973:	6a 0a                	push   0xa
10001975:	6a 1a                	push   0x1a
10001977:	50                   	push   eax
10001978:	e8 fc ff ff ff       	call   10001979 <bootInstallTasks(int)+0x3f>	10001979: R_386_PC32	VgaText::setCursor(int, int)
1000197d:	83 c4 10             	add    esp,0x10
10001980:	a1 00 00 00 00       	mov    eax,ds:0x0	10001981: R_386_32	term
10001985:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
10001989:	75 07                	jne    10001992 <bootInstallTasks(int)+0x58>
1000198b:	ba 78 99 00 10       	mov    edx,0x10009978	1000198c: R_386_32	.text
10001990:	eb 05                	jmp    10001997 <bootInstallTasks(int)+0x5d>
10001992:	ba 7b 99 00 10       	mov    edx,0x1000997b	10001993: R_386_32	.text
10001997:	83 ec 08             	sub    esp,0x8
1000199a:	52                   	push   edx
1000199b:	50                   	push   eax
1000199c:	e8 fc ff ff ff       	call   1000199d <bootInstallTasks(int)+0x63>	1000199d: R_386_PC32	VgaText::puts(char const*)
100019a1:	83 c4 10             	add    esp,0x10
100019a4:	a1 00 00 00 00       	mov    eax,ds:0x0	100019a5: R_386_32	term
100019a9:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
100019ad:	78 07                	js     100019b6 <bootInstallTasks(int)+0x7c>
100019af:	ba 00 00 00 00       	mov    edx,0x0
100019b4:	eb 05                	jmp    100019bb <bootInstallTasks(int)+0x81>
100019b6:	ba 07 00 00 00       	mov    edx,0x7
100019bb:	6a 0f                	push   0xf
100019bd:	52                   	push   edx
100019be:	68 7e 99 00 10       	push   0x1000997e	100019bf: R_386_32	.text
100019c3:	50                   	push   eax
100019c4:	e8 fc ff ff ff       	call   100019c5 <bootInstallTasks(int)+0x8b>	100019c5: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
100019c9:	83 c4 10             	add    esp,0x10
100019cc:	a1 00 00 00 00       	mov    eax,ds:0x0	100019cd: R_386_32	term
100019d1:	83 ec 04             	sub    esp,0x4
100019d4:	6a 0b                	push   0xb
100019d6:	6a 1a                	push   0x1a
100019d8:	50                   	push   eax
100019d9:	e8 fc ff ff ff       	call   100019da <bootInstallTasks(int)+0xa0>	100019da: R_386_PC32	VgaText::setCursor(int, int)
100019de:	83 c4 10             	add    esp,0x10
100019e1:	a1 00 00 00 00       	mov    eax,ds:0x0	100019e2: R_386_32	term
100019e6:	83 7d 08 01          	cmp    DWORD PTR [ebp+0x8],0x1
100019ea:	75 07                	jne    100019f3 <bootInstallTasks(int)+0xb9>
100019ec:	ba 78 99 00 10       	mov    edx,0x10009978	100019ed: R_386_32	.text
100019f1:	eb 05                	jmp    100019f8 <bootInstallTasks(int)+0xbe>
100019f3:	ba 7b 99 00 10       	mov    edx,0x1000997b	100019f4: R_386_32	.text
100019f8:	83 ec 08             	sub    esp,0x8
100019fb:	52                   	push   edx
100019fc:	50                   	push   eax
100019fd:	e8 fc ff ff ff       	call   100019fe <bootInstallTasks(int)+0xc4>	100019fe: R_386_PC32	VgaText::puts(char const*)
10001a02:	83 c4 10             	add    esp,0x10
10001a05:	a1 00 00 00 00       	mov    eax,ds:0x0	10001a06: R_386_32	term
10001a0a:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
10001a0e:	7e 07                	jle    10001a17 <bootInstallTasks(int)+0xdd>
10001a10:	ba 00 00 00 00       	mov    edx,0x0
10001a15:	eb 05                	jmp    10001a1c <bootInstallTasks(int)+0xe2>
10001a17:	ba 07 00 00 00       	mov    edx,0x7
10001a1c:	6a 0f                	push   0xf
10001a1e:	52                   	push   edx
10001a1f:	68 96 99 00 10       	push   0x10009996	10001a20: R_386_32	.text
10001a24:	50                   	push   eax
10001a25:	e8 fc ff ff ff       	call   10001a26 <bootInstallTasks(int)+0xec>	10001a26: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10001a2a:	83 c4 10             	add    esp,0x10
10001a2d:	a1 00 00 00 00       	mov    eax,ds:0x0	10001a2e: R_386_32	term
10001a32:	83 ec 04             	sub    esp,0x4
10001a35:	6a 0c                	push   0xc
10001a37:	6a 1a                	push   0x1a
10001a39:	50                   	push   eax
10001a3a:	e8 fc ff ff ff       	call   10001a3b <bootInstallTasks(int)+0x101>	10001a3b: R_386_PC32	VgaText::setCursor(int, int)
10001a3f:	83 c4 10             	add    esp,0x10
10001a42:	a1 00 00 00 00       	mov    eax,ds:0x0	10001a43: R_386_32	term
10001a47:	83 7d 08 02          	cmp    DWORD PTR [ebp+0x8],0x2
10001a4b:	75 07                	jne    10001a54 <bootInstallTasks(int)+0x11a>
10001a4d:	ba 78 99 00 10       	mov    edx,0x10009978	10001a4e: R_386_32	.text
10001a52:	eb 05                	jmp    10001a59 <bootInstallTasks(int)+0x11f>
10001a54:	ba 7b 99 00 10       	mov    edx,0x1000997b	10001a55: R_386_32	.text
10001a59:	83 ec 08             	sub    esp,0x8
10001a5c:	52                   	push   edx
10001a5d:	50                   	push   eax
10001a5e:	e8 fc ff ff ff       	call   10001a5f <bootInstallTasks(int)+0x125>	10001a5f: R_386_PC32	VgaText::puts(char const*)
10001a63:	83 c4 10             	add    esp,0x10
10001a66:	a1 00 00 00 00       	mov    eax,ds:0x0	10001a67: R_386_32	term
10001a6b:	83 7d 08 01          	cmp    DWORD PTR [ebp+0x8],0x1
10001a6f:	7e 07                	jle    10001a78 <bootInstallTasks(int)+0x13e>
10001a71:	ba 00 00 00 00       	mov    edx,0x0
10001a76:	eb 05                	jmp    10001a7d <bootInstallTasks(int)+0x143>
10001a78:	ba 07 00 00 00       	mov    edx,0x7
10001a7d:	6a 0f                	push   0xf
10001a7f:	52                   	push   edx
10001a80:	68 ac 99 00 10       	push   0x100099ac	10001a81: R_386_32	.text
10001a85:	50                   	push   eax
10001a86:	e8 fc ff ff ff       	call   10001a87 <bootInstallTasks(int)+0x14d>	10001a87: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10001a8b:	83 c4 10             	add    esp,0x10
10001a8e:	a1 00 00 00 00       	mov    eax,ds:0x0	10001a8f: R_386_32	term
10001a93:	83 ec 04             	sub    esp,0x4
10001a96:	6a 0d                	push   0xd
10001a98:	6a 1a                	push   0x1a
10001a9a:	50                   	push   eax
10001a9b:	e8 fc ff ff ff       	call   10001a9c <bootInstallTasks(int)+0x162>	10001a9c: R_386_PC32	VgaText::setCursor(int, int)
10001aa0:	83 c4 10             	add    esp,0x10
10001aa3:	a1 00 00 00 00       	mov    eax,ds:0x0	10001aa4: R_386_32	term
10001aa8:	83 7d 08 03          	cmp    DWORD PTR [ebp+0x8],0x3
10001aac:	75 07                	jne    10001ab5 <bootInstallTasks(int)+0x17b>
10001aae:	ba 78 99 00 10       	mov    edx,0x10009978	10001aaf: R_386_32	.text
10001ab3:	eb 05                	jmp    10001aba <bootInstallTasks(int)+0x180>
10001ab5:	ba 7b 99 00 10       	mov    edx,0x1000997b	10001ab6: R_386_32	.text
10001aba:	83 ec 08             	sub    esp,0x8
10001abd:	52                   	push   edx
10001abe:	50                   	push   eax
10001abf:	e8 fc ff ff ff       	call   10001ac0 <bootInstallTasks(int)+0x186>	10001ac0: R_386_PC32	VgaText::puts(char const*)
10001ac4:	83 c4 10             	add    esp,0x10
10001ac7:	a1 00 00 00 00       	mov    eax,ds:0x0	10001ac8: R_386_32	term
10001acc:	83 7d 08 02          	cmp    DWORD PTR [ebp+0x8],0x2
10001ad0:	7e 07                	jle    10001ad9 <bootInstallTasks(int)+0x19f>
10001ad2:	ba 00 00 00 00       	mov    edx,0x0
10001ad7:	eb 05                	jmp    10001ade <bootInstallTasks(int)+0x1a4>
10001ad9:	ba 07 00 00 00       	mov    edx,0x7
10001ade:	6a 0f                	push   0xf
10001ae0:	52                   	push   edx
10001ae1:	68 c2 99 00 10       	push   0x100099c2	10001ae2: R_386_32	.text
10001ae6:	50                   	push   eax
10001ae7:	e8 fc ff ff ff       	call   10001ae8 <bootInstallTasks(int)+0x1ae>	10001ae8: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10001aec:	83 c4 10             	add    esp,0x10
10001aef:	a1 00 00 00 00       	mov    eax,ds:0x0	10001af0: R_386_32	term
10001af4:	83 ec 04             	sub    esp,0x4
10001af7:	6a 0e                	push   0xe
10001af9:	6a 1a                	push   0x1a
10001afb:	50                   	push   eax
10001afc:	e8 fc ff ff ff       	call   10001afd <bootInstallTasks(int)+0x1c3>	10001afd: R_386_PC32	VgaText::setCursor(int, int)
10001b01:	83 c4 10             	add    esp,0x10
10001b04:	a1 00 00 00 00       	mov    eax,ds:0x0	10001b05: R_386_32	term
10001b09:	83 7d 08 04          	cmp    DWORD PTR [ebp+0x8],0x4
10001b0d:	75 07                	jne    10001b16 <bootInstallTasks(int)+0x1dc>
10001b0f:	ba 78 99 00 10       	mov    edx,0x10009978	10001b10: R_386_32	.text
10001b14:	eb 05                	jmp    10001b1b <bootInstallTasks(int)+0x1e1>
10001b16:	ba 7b 99 00 10       	mov    edx,0x1000997b	10001b17: R_386_32	.text
10001b1b:	83 ec 08             	sub    esp,0x8
10001b1e:	52                   	push   edx
10001b1f:	50                   	push   eax
10001b20:	e8 fc ff ff ff       	call   10001b21 <bootInstallTasks(int)+0x1e7>	10001b21: R_386_PC32	VgaText::puts(char const*)
10001b25:	83 c4 10             	add    esp,0x10
10001b28:	a1 00 00 00 00       	mov    eax,ds:0x0	10001b29: R_386_32	term
10001b2d:	83 7d 08 03          	cmp    DWORD PTR [ebp+0x8],0x3
10001b31:	7e 07                	jle    10001b3a <bootInstallTasks(int)+0x200>
10001b33:	ba 00 00 00 00       	mov    edx,0x0
10001b38:	eb 05                	jmp    10001b3f <bootInstallTasks(int)+0x205>
10001b3a:	ba 07 00 00 00       	mov    edx,0x7
10001b3f:	6a 0f                	push   0xf
10001b41:	52                   	push   edx
10001b42:	68 d6 99 00 10       	push   0x100099d6	10001b43: R_386_32	.text
10001b47:	50                   	push   eax
10001b48:	e8 fc ff ff ff       	call   10001b49 <bootInstallTasks(int)+0x20f>	10001b49: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10001b4d:	83 c4 10             	add    esp,0x10
10001b50:	a1 00 00 00 00       	mov    eax,ds:0x0	10001b51: R_386_32	term
10001b55:	83 ec 04             	sub    esp,0x4
10001b58:	6a 0f                	push   0xf
10001b5a:	6a 1a                	push   0x1a
10001b5c:	50                   	push   eax
10001b5d:	e8 fc ff ff ff       	call   10001b5e <bootInstallTasks(int)+0x224>	10001b5e: R_386_PC32	VgaText::setCursor(int, int)
10001b62:	83 c4 10             	add    esp,0x10
10001b65:	a1 00 00 00 00       	mov    eax,ds:0x0	10001b66: R_386_32	term
10001b6a:	83 7d 08 05          	cmp    DWORD PTR [ebp+0x8],0x5
10001b6e:	75 07                	jne    10001b77 <bootInstallTasks(int)+0x23d>
10001b70:	ba 78 99 00 10       	mov    edx,0x10009978	10001b71: R_386_32	.text
10001b75:	eb 05                	jmp    10001b7c <bootInstallTasks(int)+0x242>
10001b77:	ba 7b 99 00 10       	mov    edx,0x1000997b	10001b78: R_386_32	.text
10001b7c:	83 ec 08             	sub    esp,0x8
10001b7f:	52                   	push   edx
10001b80:	50                   	push   eax
10001b81:	e8 fc ff ff ff       	call   10001b82 <bootInstallTasks(int)+0x248>	10001b82: R_386_PC32	VgaText::puts(char const*)
10001b86:	83 c4 10             	add    esp,0x10
10001b89:	a1 00 00 00 00       	mov    eax,ds:0x0	10001b8a: R_386_32	term
10001b8e:	83 7d 08 04          	cmp    DWORD PTR [ebp+0x8],0x4
10001b92:	7e 07                	jle    10001b9b <bootInstallTasks(int)+0x261>
10001b94:	ba 00 00 00 00       	mov    edx,0x0
10001b99:	eb 05                	jmp    10001ba0 <bootInstallTasks(int)+0x266>
10001b9b:	ba 07 00 00 00       	mov    edx,0x7
10001ba0:	6a 0f                	push   0xf
10001ba2:	52                   	push   edx
10001ba3:	68 ee 99 00 10       	push   0x100099ee	10001ba4: R_386_32	.text
10001ba8:	50                   	push   eax
10001ba9:	e8 fc ff ff ff       	call   10001baa <bootInstallTasks(int)+0x270>	10001baa: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10001bae:	83 c4 10             	add    esp,0x10
10001bb1:	90                   	nop
10001bb2:	c9                   	leave  
10001bb3:	c3                   	ret    

10001bb4 <ror(unsigned long long, int, int)>:
10001bb4:	55                   	push   ebp
10001bb5:	89 e5                	mov    ebp,esp
10001bb7:	56                   	push   esi
10001bb8:	53                   	push   ebx
10001bb9:	83 ec 20             	sub    esp,0x20
10001bbc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001bbf:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
10001bc2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10001bc5:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10001bc8:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
10001bcb:	ba 01 00 00 00       	mov    edx,0x1
10001bd0:	88 c1                	mov    cl,al
10001bd2:	d3 e2                	shl    edx,cl
10001bd4:	89 d0                	mov    eax,edx
10001bd6:	48                   	dec    eax
10001bd7:	99                   	cdq    
10001bd8:	89 c1                	mov    ecx,eax
10001bda:	23 4d e0             	and    ecx,DWORD PTR [ebp-0x20]
10001bdd:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
10001be0:	89 d0                	mov    eax,edx
10001be2:	23 45 e4             	and    eax,DWORD PTR [ebp-0x1c]
10001be5:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
10001be8:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
10001beb:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10001bee:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10001bf1:	0f ad d0             	shrd   eax,edx,cl
10001bf4:	d3 ea                	shr    edx,cl
10001bf6:	f6 c1 20             	test   cl,0x20
10001bf9:	74 04                	je     10001bff <ror(unsigned long long, int, int)+0x4b>
10001bfb:	89 d0                	mov    eax,edx
10001bfd:	31 d2                	xor    edx,edx
10001bff:	89 c3                	mov    ebx,eax
10001c01:	89 d6                	mov    esi,edx
10001c03:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
10001c06:	2b 45 10             	sub    eax,DWORD PTR [ebp+0x10]
10001c09:	89 c1                	mov    ecx,eax
10001c0b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001c0e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001c11:	0f a5 c2             	shld   edx,eax,cl
10001c14:	d3 e0                	shl    eax,cl
10001c16:	f6 c1 20             	test   cl,0x20
10001c19:	74 04                	je     10001c1f <ror(unsigned long long, int, int)+0x6b>
10001c1b:	89 c2                	mov    edx,eax
10001c1d:	31 c0                	xor    eax,eax
10001c1f:	89 d1                	mov    ecx,edx
10001c21:	89 c2                	mov    edx,eax
10001c23:	89 d8                	mov    eax,ebx
10001c25:	09 d0                	or     eax,edx
10001c27:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
10001c2a:	89 f0                	mov    eax,esi
10001c2c:	09 c8                	or     eax,ecx
10001c2e:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
10001c31:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10001c34:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
10001c37:	83 c4 20             	add    esp,0x20
10001c3a:	5b                   	pop    ebx
10001c3b:	5e                   	pop    esi
10001c3c:	5d                   	pop    ebp
10001c3d:	c3                   	ret    

10001c3e <swapBits(unsigned long long, unsigned long long, unsigned long long)>:
10001c3e:	55                   	push   ebp
10001c3f:	89 e5                	mov    ebp,esp
10001c41:	56                   	push   esi
10001c42:	53                   	push   ebx
10001c43:	83 ec 40             	sub    esp,0x40
10001c46:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001c49:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10001c4c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10001c4f:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
10001c52:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
10001c55:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
10001c58:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
10001c5b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
10001c5e:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
10001c61:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
10001c64:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
10001c67:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10001c6a:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
10001c6d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001c70:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001c73:	0f ad d0             	shrd   eax,edx,cl
10001c76:	d3 ea                	shr    edx,cl
10001c78:	f6 c1 20             	test   cl,0x20
10001c7b:	74 04                	je     10001c81 <swapBits(unsigned long long, unsigned long long, unsigned long long)+0x43>
10001c7d:	89 d0                	mov    eax,edx
10001c7f:	31 d2                	xor    edx,edx
10001c81:	89 c3                	mov    ebx,eax
10001c83:	89 d6                	mov    esi,edx
10001c85:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
10001c88:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001c8b:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001c8e:	0f ad d0             	shrd   eax,edx,cl
10001c91:	d3 ea                	shr    edx,cl
10001c93:	f6 c1 20             	test   cl,0x20
10001c96:	74 04                	je     10001c9c <swapBits(unsigned long long, unsigned long long, unsigned long long)+0x5e>
10001c98:	89 d0                	mov    eax,edx
10001c9a:	31 d2                	xor    edx,edx
10001c9c:	89 d1                	mov    ecx,edx
10001c9e:	89 c2                	mov    edx,eax
10001ca0:	89 d8                	mov    eax,ebx
10001ca2:	31 d0                	xor    eax,edx
10001ca4:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
10001ca7:	89 f0                	mov    eax,esi
10001ca9:	31 c8                	xor    eax,ecx
10001cab:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
10001cae:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
10001cb1:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
10001cb4:	89 c6                	mov    esi,eax
10001cb6:	83 e6 01             	and    esi,0x1
10001cb9:	89 75 c8             	mov    DWORD PTR [ebp-0x38],esi
10001cbc:	89 d0                	mov    eax,edx
10001cbe:	83 e0 00             	and    eax,0x0
10001cc1:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
10001cc4:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
10001cc7:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
10001cca:	89 c3                	mov    ebx,eax
10001ccc:	80 f7 00             	xor    bh,0x0
10001ccf:	89 5d b8             	mov    DWORD PTR [ebp-0x48],ebx
10001cd2:	89 d0                	mov    eax,edx
10001cd4:	80 f4 00             	xor    ah,0x0
10001cd7:	89 45 bc             	mov    DWORD PTR [ebp-0x44],eax
10001cda:	8b 55 b8             	mov    edx,DWORD PTR [ebp-0x48]
10001cdd:	8b 4d bc             	mov    ecx,DWORD PTR [ebp-0x44]
10001ce0:	89 c8                	mov    eax,ecx
10001ce2:	09 d0                	or     eax,edx
10001ce4:	85 c0                	test   eax,eax
10001ce6:	74 62                	je     10001d4a <swapBits(unsigned long long, unsigned long long, unsigned long long)+0x10c>
10001ce8:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
10001ceb:	b8 01 00 00 00       	mov    eax,0x1
10001cf0:	ba 00 00 00 00       	mov    edx,0x0
10001cf5:	0f a5 c2             	shld   edx,eax,cl
10001cf8:	d3 e0                	shl    eax,cl
10001cfa:	f6 c1 20             	test   cl,0x20
10001cfd:	74 04                	je     10001d03 <swapBits(unsigned long long, unsigned long long, unsigned long long)+0xc5>
10001cff:	89 c2                	mov    edx,eax
10001d01:	31 c0                	xor    eax,eax
10001d03:	89 c3                	mov    ebx,eax
10001d05:	89 d6                	mov    esi,edx
10001d07:	89 d8                	mov    eax,ebx
10001d09:	33 45 f0             	xor    eax,DWORD PTR [ebp-0x10]
10001d0c:	89 45 c0             	mov    DWORD PTR [ebp-0x40],eax
10001d0f:	89 f0                	mov    eax,esi
10001d11:	33 45 f4             	xor    eax,DWORD PTR [ebp-0xc]
10001d14:	89 45 c4             	mov    DWORD PTR [ebp-0x3c],eax
10001d17:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
10001d1a:	b8 01 00 00 00       	mov    eax,0x1
10001d1f:	ba 00 00 00 00       	mov    edx,0x0
10001d24:	0f a5 c2             	shld   edx,eax,cl
10001d27:	d3 e0                	shl    eax,cl
10001d29:	f6 c1 20             	test   cl,0x20
10001d2c:	74 04                	je     10001d32 <swapBits(unsigned long long, unsigned long long, unsigned long long)+0xf4>
10001d2e:	89 c2                	mov    edx,eax
10001d30:	31 c0                	xor    eax,eax
10001d32:	89 c1                	mov    ecx,eax
10001d34:	89 d3                	mov    ebx,edx
10001d36:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
10001d39:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
10001d3c:	89 c6                	mov    esi,eax
10001d3e:	31 ce                	xor    esi,ecx
10001d40:	89 75 d8             	mov    DWORD PTR [ebp-0x28],esi
10001d43:	31 d3                	xor    ebx,edx
10001d45:	89 5d dc             	mov    DWORD PTR [ebp-0x24],ebx
10001d48:	eb 0c                	jmp    10001d56 <swapBits(unsigned long long, unsigned long long, unsigned long long)+0x118>
10001d4a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001d4d:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001d50:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
10001d53:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
10001d56:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10001d59:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
10001d5c:	83 c4 40             	add    esp,0x40
10001d5f:	5b                   	pop    ebx
10001d60:	5e                   	pop    esi
10001d61:	5d                   	pop    ebp
10001d62:	c3                   	ret    

10001d63 <getChecksum(unsigned int)>:
10001d63:	55                   	push   ebp
10001d64:	89 e5                	mov    ebp,esp
10001d66:	56                   	push   esi
10001d67:	53                   	push   ebx
10001d68:	83 ec 20             	sub    esp,0x20
10001d6b:	66 c7 45 f6 49 4e    	mov    WORD PTR [ebp-0xa],0x4e49
10001d71:	66 c7 45 f4 79 6e    	mov    WORD PTR [ebp-0xc],0x6e79
10001d77:	66 c7 45 f2 67 61    	mov    WORD PTR [ebp-0xe],0x6167
10001d7d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001d80:	c1 e8 10             	shr    eax,0x10
10001d83:	89 c1                	mov    ecx,eax
10001d85:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001d88:	89 c2                	mov    edx,eax
10001d8a:	89 d0                	mov    eax,edx
10001d8c:	c1 e0 06             	shl    eax,0x6
10001d8f:	29 d0                	sub    eax,edx
10001d91:	c1 e0 04             	shl    eax,0x4
10001d94:	01 d0                	add    eax,edx
10001d96:	31 c8                	xor    eax,ecx
10001d98:	66 89 45 f0          	mov    WORD PTR [ebp-0x10],ax
10001d9c:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
10001da0:	0f 84 b1 00 00 00    	je     10001e57 <getChecksum(unsigned int)+0xf4>
10001da6:	b8 f4 02 00 00       	mov    eax,0x2f4
10001dab:	ba 00 00 00 00       	mov    edx,0x0
10001db0:	f7 75 08             	div    DWORD PTR [ebp+0x8]
10001db3:	89 c3                	mov    ebx,eax
10001db5:	be 00 00 00 00       	mov    esi,0x0
10001dba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001dbd:	ba 00 00 00 00       	mov    edx,0x0
10001dc2:	6a 1d                	push   0x1d
10001dc4:	6a 05                	push   0x5
10001dc6:	52                   	push   edx
10001dc7:	50                   	push   eax
10001dc8:	e8 fc ff ff ff       	call   10001dc9 <getChecksum(unsigned int)+0x66>	10001dc9: R_386_PC32	ror(unsigned long long, int, int)
10001dcd:	83 c4 10             	add    esp,0x10
10001dd0:	05 52 3f 04 00       	add    eax,0x43f52
10001dd5:	83 d2 00             	adc    edx,0x0
10001dd8:	89 d9                	mov    ecx,ebx
10001dda:	31 c1                	xor    ecx,eax
10001ddc:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
10001ddf:	31 d6                	xor    esi,edx
10001de1:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
10001de4:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
10001de7:	66 8b 45 f6          	mov    ax,WORD PTR [ebp-0xa]
10001deb:	66 0f af c2          	imul   ax,dx
10001def:	66 89 45 f6          	mov    WORD PTR [ebp-0xa],ax
10001df3:	b8 ea 00 00 00       	mov    eax,0xea
10001df8:	ba 00 00 00 00       	mov    edx,0x0
10001dfd:	f7 75 08             	div    DWORD PTR [ebp+0x8]
10001e00:	89 c3                	mov    ebx,eax
10001e02:	be 00 00 00 00       	mov    esi,0x0
10001e07:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001e0a:	ba 00 00 00 00       	mov    edx,0x0
10001e0f:	6a 1f                	push   0x1f
10001e11:	6a 03                	push   0x3
10001e13:	52                   	push   edx
10001e14:	50                   	push   eax
10001e15:	e8 fc ff ff ff       	call   10001e16 <getChecksum(unsigned int)+0xb3>	10001e16: R_386_PC32	ror(unsigned long long, int, int)
10001e1a:	83 c4 10             	add    esp,0x10
10001e1d:	05 05 db 09 00       	add    eax,0x9db05
10001e22:	83 d2 00             	adc    edx,0x0
10001e25:	89 d9                	mov    ecx,ebx
10001e27:	31 c1                	xor    ecx,eax
10001e29:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
10001e2c:	31 d6                	xor    esi,edx
10001e2e:	89 75 dc             	mov    DWORD PTR [ebp-0x24],esi
10001e31:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10001e34:	66 29 45 f4          	sub    WORD PTR [ebp-0xc],ax
10001e38:	66 8b 45 f6          	mov    ax,WORD PTR [ebp-0xa]
10001e3c:	33 45 f4             	xor    eax,DWORD PTR [ebp-0xc]
10001e3f:	25 d2 04 00 00       	and    eax,0x4d2
10001e44:	66 01 45 f2          	add    WORD PTR [ebp-0xe],ax
10001e48:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001e4b:	66 01 45 f2          	add    WORD PTR [ebp-0xe],ax
10001e4f:	d1 6d 08             	shr    DWORD PTR [ebp+0x8],1
10001e52:	e9 45 ff ff ff       	jmp    10001d9c <getChecksum(unsigned int)+0x39>
10001e57:	66 8b 45 f6          	mov    ax,WORD PTR [ebp-0xa]
10001e5b:	33 45 f4             	xor    eax,DWORD PTR [ebp-0xc]
10001e5e:	66 33 45 f2          	xor    ax,WORD PTR [ebp-0xe]
10001e62:	33 45 f0             	xor    eax,DWORD PTR [ebp-0x10]
10001e65:	0f b7 c0             	movzx  eax,ax
10001e68:	25 ff 7f 00 00       	and    eax,0x7fff
10001e6d:	8d 65 f8             	lea    esp,[ebp-0x8]
10001e70:	5b                   	pop    ebx
10001e71:	5e                   	pop    esi
10001e72:	5d                   	pop    ebp
10001e73:	c3                   	ret    

10001e74 <createKey(char*, unsigned int)>:
10001e74:	55                   	push   ebp
10001e75:	89 e5                	mov    ebp,esp
10001e77:	53                   	push   ebx
10001e78:	83 ec 34             	sub    esp,0x34
10001e7b:	68 00 9a 00 10       	push   0x10009a00	10001e7c: R_386_32	.text
10001e80:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001e83:	e8 fc ff ff ff       	call   10001e84 <createKey(char*, unsigned int)+0x10>	10001e84: R_386_PC32	strcpy
10001e88:	83 c4 08             	add    esp,0x8
10001e8b:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
10001e8e:	bb 00 00 00 00       	mov    ebx,0x0
10001e93:	89 c8                	mov    eax,ecx
10001e95:	89 da                	mov    edx,ebx
10001e97:	0f a4 c2 0f          	shld   edx,eax,0xf
10001e9b:	c1 e0 0f             	shl    eax,0xf
10001e9e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10001ea1:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
10001ea4:	83 ec 04             	sub    esp,0x4
10001ea7:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10001eaa:	e8 fc ff ff ff       	call   10001eab <createKey(char*, unsigned int)+0x37>	10001eab: R_386_PC32	getChecksum(unsigned int)
10001eaf:	83 c4 08             	add    esp,0x8
10001eb2:	ba 00 00 00 00       	mov    edx,0x0
10001eb7:	09 45 f0             	or     DWORD PTR [ebp-0x10],eax
10001eba:	09 55 f4             	or     DWORD PTR [ebp-0xc],edx
10001ebd:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
10001ec4:	81 7d ec db 24 00 00 	cmp    DWORD PTR [ebp-0x14],0x24db
10001ecb:	7f 7f                	jg     10001f4c <createKey(char*, unsigned int)+0xd8>
10001ecd:	81 75 f0 95 38 e4 b5 	xor    DWORD PTR [ebp-0x10],0xb5e43895
10001ed4:	83 75 f4 37          	xor    DWORD PTR [ebp-0xc],0x37
10001ed8:	6a 00                	push   0x0
10001eda:	6a 08                	push   0x8
10001edc:	6a 00                	push   0x0
10001ede:	6a 03                	push   0x3
10001ee0:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10001ee3:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10001ee6:	e8 fc ff ff ff       	call   10001ee7 <createKey(char*, unsigned int)+0x73>	10001ee7: R_386_PC32	swapBits(unsigned long long, unsigned long long, unsigned long long)
10001eeb:	83 c4 18             	add    esp,0x18
10001eee:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10001ef1:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
10001ef4:	6a 00                	push   0x0
10001ef6:	6a 0c                	push   0xc
10001ef8:	6a 00                	push   0x0
10001efa:	6a 0d                	push   0xd
10001efc:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10001eff:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10001f02:	e8 fc ff ff ff       	call   10001f03 <createKey(char*, unsigned int)+0x8f>	10001f03: R_386_PC32	swapBits(unsigned long long, unsigned long long, unsigned long long)
10001f07:	83 c4 18             	add    esp,0x18
10001f0a:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10001f0d:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
10001f10:	6a 00                	push   0x0
10001f12:	6a 16                	push   0x16
10001f14:	6a 00                	push   0x0
10001f16:	6a 25                	push   0x25
10001f18:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10001f1b:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10001f1e:	e8 fc ff ff ff       	call   10001f1f <createKey(char*, unsigned int)+0xab>	10001f1f: R_386_PC32	swapBits(unsigned long long, unsigned long long, unsigned long long)
10001f23:	83 c4 18             	add    esp,0x18
10001f26:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10001f29:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
10001f2c:	6a 2a                	push   0x2a
10001f2e:	6a 13                	push   0x13
10001f30:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10001f33:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10001f36:	e8 fc ff ff ff       	call   10001f37 <createKey(char*, unsigned int)+0xc3>	10001f37: R_386_PC32	ror(unsigned long long, int, int)
10001f3b:	83 c4 10             	add    esp,0x10
10001f3e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10001f41:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
10001f44:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
10001f47:	e9 78 ff ff ff       	jmp    10001ec4 <createKey(char*, unsigned int)+0x50>
10001f4c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001f4f:	83 e0 0f             	and    eax,0xf
10001f52:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
10001f55:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001f58:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001f5b:	0f ac d0 04          	shrd   eax,edx,0x4
10001f5f:	c1 ea 04             	shr    edx,0x4
10001f62:	89 c1                	mov    ecx,eax
10001f64:	89 d3                	mov    ebx,edx
10001f66:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
10001f69:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
10001f6c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001f6f:	83 e0 0f             	and    eax,0xf
10001f72:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10001f75:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001f78:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001f7b:	0f ac d0 04          	shrd   eax,edx,0x4
10001f7f:	c1 ea 04             	shr    edx,0x4
10001f82:	89 c1                	mov    ecx,eax
10001f84:	89 d3                	mov    ebx,edx
10001f86:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
10001f89:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
10001f8c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001f8f:	83 e0 0f             	and    eax,0xf
10001f92:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
10001f95:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001f98:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001f9b:	0f ac d0 04          	shrd   eax,edx,0x4
10001f9f:	c1 ea 04             	shr    edx,0x4
10001fa2:	89 c1                	mov    ecx,eax
10001fa4:	89 d3                	mov    ebx,edx
10001fa6:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
10001fa9:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
10001fac:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001faf:	25 ff 03 00 00       	and    eax,0x3ff
10001fb4:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
10001fb7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001fba:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001fbd:	0f ac d0 0a          	shrd   eax,edx,0xa
10001fc1:	c1 ea 0a             	shr    edx,0xa
10001fc4:	89 c1                	mov    ecx,eax
10001fc6:	89 d3                	mov    ebx,edx
10001fc8:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
10001fcb:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
10001fce:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001fd1:	25 ff 03 00 00       	and    eax,0x3ff
10001fd6:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
10001fd9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001fdc:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001fdf:	0f ac d0 0a          	shrd   eax,edx,0xa
10001fe3:	c1 ea 0a             	shr    edx,0xa
10001fe6:	89 c1                	mov    ecx,eax
10001fe8:	89 d3                	mov    ebx,edx
10001fea:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
10001fed:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
10001ff0:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001ff3:	25 ff 03 00 00       	and    eax,0x3ff
10001ff8:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
10001ffb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001ffe:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10002001:	0f ac d0 0a          	shrd   eax,edx,0xa
10002005:	c1 ea 0a             	shr    edx,0xa
10002008:	89 c1                	mov    ecx,eax
1000200a:	89 d3                	mov    ebx,edx
1000200c:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
1000200f:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
10002012:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
10002015:	05 00 00 00 00       	add    eax,0x0	10002016: R_386_32	lookupA
1000201a:	8a 10                	mov    dl,BYTE PTR [eax]
1000201c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000201f:	88 10                	mov    BYTE PTR [eax],dl
10002021:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002024:	8d 50 01             	lea    edx,[eax+0x1]
10002027:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
1000202a:	05 00 00 00 00       	add    eax,0x0	1000202b: R_386_32	lookupA
1000202f:	8a 00                	mov    al,BYTE PTR [eax]
10002031:	88 02                	mov    BYTE PTR [edx],al
10002033:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002036:	8d 50 0f             	lea    edx,[eax+0xf]
10002039:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
1000203c:	05 00 00 00 00       	add    eax,0x0	1000203d: R_386_32	lookupA
10002041:	8a 00                	mov    al,BYTE PTR [eax]
10002043:	88 02                	mov    BYTE PTR [edx],al
10002045:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
10002048:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
1000204d:	f7 e9                	imul   ecx
1000204f:	c1 fa 05             	sar    edx,0x5
10002052:	89 c8                	mov    eax,ecx
10002054:	c1 f8 1f             	sar    eax,0x1f
10002057:	29 c2                	sub    edx,eax
10002059:	89 d0                	mov    eax,edx
1000205b:	b9 0a 00 00 00       	mov    ecx,0xa
10002060:	99                   	cdq    
10002061:	f7 f9                	idiv   ecx
10002063:	89 d0                	mov    eax,edx
10002065:	8d 50 30             	lea    edx,[eax+0x30]
10002068:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000206b:	83 c0 03             	add    eax,0x3
1000206e:	88 10                	mov    BYTE PTR [eax],dl
10002070:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
10002073:	b8 67 66 66 66       	mov    eax,0x66666667
10002078:	f7 e9                	imul   ecx
1000207a:	c1 fa 02             	sar    edx,0x2
1000207d:	89 c8                	mov    eax,ecx
1000207f:	c1 f8 1f             	sar    eax,0x1f
10002082:	89 d1                	mov    ecx,edx
10002084:	29 c1                	sub    ecx,eax
10002086:	b8 67 66 66 66       	mov    eax,0x66666667
1000208b:	f7 e9                	imul   ecx
1000208d:	c1 fa 02             	sar    edx,0x2
10002090:	89 c8                	mov    eax,ecx
10002092:	c1 f8 1f             	sar    eax,0x1f
10002095:	29 c2                	sub    edx,eax
10002097:	89 d0                	mov    eax,edx
10002099:	c1 e0 02             	shl    eax,0x2
1000209c:	01 d0                	add    eax,edx
1000209e:	01 c0                	add    eax,eax
100020a0:	29 c1                	sub    ecx,eax
100020a2:	89 ca                	mov    edx,ecx
100020a4:	88 d0                	mov    al,dl
100020a6:	8d 50 30             	lea    edx,[eax+0x30]
100020a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100020ac:	83 c0 04             	add    eax,0x4
100020af:	88 10                	mov    BYTE PTR [eax],dl
100020b1:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
100020b4:	b9 0a 00 00 00       	mov    ecx,0xa
100020b9:	99                   	cdq    
100020ba:	f7 f9                	idiv   ecx
100020bc:	89 d0                	mov    eax,edx
100020be:	8d 50 30             	lea    edx,[eax+0x30]
100020c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100020c4:	83 c0 05             	add    eax,0x5
100020c7:	88 10                	mov    BYTE PTR [eax],dl
100020c9:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
100020cc:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
100020d1:	f7 e9                	imul   ecx
100020d3:	c1 fa 05             	sar    edx,0x5
100020d6:	89 c8                	mov    eax,ecx
100020d8:	c1 f8 1f             	sar    eax,0x1f
100020db:	29 c2                	sub    edx,eax
100020dd:	89 d0                	mov    eax,edx
100020df:	b9 0a 00 00 00       	mov    ecx,0xa
100020e4:	99                   	cdq    
100020e5:	f7 f9                	idiv   ecx
100020e7:	89 d0                	mov    eax,edx
100020e9:	8d 50 30             	lea    edx,[eax+0x30]
100020ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100020ef:	83 c0 07             	add    eax,0x7
100020f2:	88 10                	mov    BYTE PTR [eax],dl
100020f4:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
100020f7:	b8 67 66 66 66       	mov    eax,0x66666667
100020fc:	f7 e9                	imul   ecx
100020fe:	c1 fa 02             	sar    edx,0x2
10002101:	89 c8                	mov    eax,ecx
10002103:	c1 f8 1f             	sar    eax,0x1f
10002106:	89 d1                	mov    ecx,edx
10002108:	29 c1                	sub    ecx,eax
1000210a:	b8 67 66 66 66       	mov    eax,0x66666667
1000210f:	f7 e9                	imul   ecx
10002111:	c1 fa 02             	sar    edx,0x2
10002114:	89 c8                	mov    eax,ecx
10002116:	c1 f8 1f             	sar    eax,0x1f
10002119:	29 c2                	sub    edx,eax
1000211b:	89 d0                	mov    eax,edx
1000211d:	c1 e0 02             	shl    eax,0x2
10002120:	01 d0                	add    eax,edx
10002122:	01 c0                	add    eax,eax
10002124:	29 c1                	sub    ecx,eax
10002126:	89 ca                	mov    edx,ecx
10002128:	88 d0                	mov    al,dl
1000212a:	8d 50 30             	lea    edx,[eax+0x30]
1000212d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002130:	83 c0 08             	add    eax,0x8
10002133:	88 10                	mov    BYTE PTR [eax],dl
10002135:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10002138:	b9 0a 00 00 00       	mov    ecx,0xa
1000213d:	99                   	cdq    
1000213e:	f7 f9                	idiv   ecx
10002140:	89 d0                	mov    eax,edx
10002142:	8d 50 30             	lea    edx,[eax+0x30]
10002145:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002148:	83 c0 09             	add    eax,0x9
1000214b:	88 10                	mov    BYTE PTR [eax],dl
1000214d:	8b 4d d4             	mov    ecx,DWORD PTR [ebp-0x2c]
10002150:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
10002155:	f7 e9                	imul   ecx
10002157:	c1 fa 05             	sar    edx,0x5
1000215a:	89 c8                	mov    eax,ecx
1000215c:	c1 f8 1f             	sar    eax,0x1f
1000215f:	29 c2                	sub    edx,eax
10002161:	89 d0                	mov    eax,edx
10002163:	b9 0a 00 00 00       	mov    ecx,0xa
10002168:	99                   	cdq    
10002169:	f7 f9                	idiv   ecx
1000216b:	89 d0                	mov    eax,edx
1000216d:	8d 50 30             	lea    edx,[eax+0x30]
10002170:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002173:	83 c0 0b             	add    eax,0xb
10002176:	88 10                	mov    BYTE PTR [eax],dl
10002178:	8b 4d d4             	mov    ecx,DWORD PTR [ebp-0x2c]
1000217b:	b8 67 66 66 66       	mov    eax,0x66666667
10002180:	f7 e9                	imul   ecx
10002182:	c1 fa 02             	sar    edx,0x2
10002185:	89 c8                	mov    eax,ecx
10002187:	c1 f8 1f             	sar    eax,0x1f
1000218a:	89 d1                	mov    ecx,edx
1000218c:	29 c1                	sub    ecx,eax
1000218e:	b8 67 66 66 66       	mov    eax,0x66666667
10002193:	f7 e9                	imul   ecx
10002195:	c1 fa 02             	sar    edx,0x2
10002198:	89 c8                	mov    eax,ecx
1000219a:	c1 f8 1f             	sar    eax,0x1f
1000219d:	29 c2                	sub    edx,eax
1000219f:	89 d0                	mov    eax,edx
100021a1:	c1 e0 02             	shl    eax,0x2
100021a4:	01 d0                	add    eax,edx
100021a6:	01 c0                	add    eax,eax
100021a8:	29 c1                	sub    ecx,eax
100021aa:	89 ca                	mov    edx,ecx
100021ac:	88 d0                	mov    al,dl
100021ae:	8d 50 30             	lea    edx,[eax+0x30]
100021b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100021b4:	83 c0 0c             	add    eax,0xc
100021b7:	88 10                	mov    BYTE PTR [eax],dl
100021b9:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
100021bc:	b9 0a 00 00 00       	mov    ecx,0xa
100021c1:	99                   	cdq    
100021c2:	f7 f9                	idiv   ecx
100021c4:	89 d0                	mov    eax,edx
100021c6:	8d 50 30             	lea    edx,[eax+0x30]
100021c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100021cc:	83 c0 0d             	add    eax,0xd
100021cf:	88 10                	mov    BYTE PTR [eax],dl
100021d1:	90                   	nop
100021d2:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
100021d5:	c9                   	leave  
100021d6:	c3                   	ret    

100021d7 <retrieveBits(char*)>:
100021d7:	55                   	push   ebp
100021d8:	89 e5                	mov    ebp,esp
100021da:	57                   	push   edi
100021db:	56                   	push   esi
100021dc:	53                   	push   ebx
100021dd:	83 ec 4c             	sub    esp,0x4c
100021e0:	c7 45 ec ff ff ff ff 	mov    DWORD PTR [ebp-0x14],0xffffffff
100021e7:	c7 45 e8 ff ff ff ff 	mov    DWORD PTR [ebp-0x18],0xffffffff
100021ee:	c7 45 e4 ff ff ff ff 	mov    DWORD PTR [ebp-0x1c],0xffffffff
100021f5:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
100021fc:	83 7d e0 0f          	cmp    DWORD PTR [ebp-0x20],0xf
10002200:	7f 54                	jg     10002256 <retrieveBits(char*)+0x7f>
10002202:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10002205:	05 00 00 00 00       	add    eax,0x0	10002206: R_386_32	lookupA
1000220a:	8a 10                	mov    dl,BYTE PTR [eax]
1000220c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000220f:	8a 00                	mov    al,BYTE PTR [eax]
10002211:	38 c2                	cmp    dl,al
10002213:	75 06                	jne    1000221b <retrieveBits(char*)+0x44>
10002215:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10002218:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
1000221b:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
1000221e:	05 00 00 00 00       	add    eax,0x0	1000221f: R_386_32	lookupB
10002223:	8a 10                	mov    dl,BYTE PTR [eax]
10002225:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002228:	40                   	inc    eax
10002229:	8a 00                	mov    al,BYTE PTR [eax]
1000222b:	38 c2                	cmp    dl,al
1000222d:	75 06                	jne    10002235 <retrieveBits(char*)+0x5e>
1000222f:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10002232:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
10002235:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10002238:	05 00 00 00 00       	add    eax,0x0	10002239: R_386_32	lookupC
1000223d:	8a 10                	mov    dl,BYTE PTR [eax]
1000223f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002242:	83 c0 0f             	add    eax,0xf
10002245:	8a 00                	mov    al,BYTE PTR [eax]
10002247:	38 c2                	cmp    dl,al
10002249:	75 06                	jne    10002251 <retrieveBits(char*)+0x7a>
1000224b:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
1000224e:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10002251:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
10002254:	eb a6                	jmp    100021fc <retrieveBits(char*)+0x25>
10002256:	83 7d ec ff          	cmp    DWORD PTR [ebp-0x14],0xffffffff
1000225a:	74 0c                	je     10002268 <retrieveBits(char*)+0x91>
1000225c:	83 7d e8 ff          	cmp    DWORD PTR [ebp-0x18],0xffffffff
10002260:	74 06                	je     10002268 <retrieveBits(char*)+0x91>
10002262:	83 7d e4 ff          	cmp    DWORD PTR [ebp-0x1c],0xffffffff
10002266:	75 0f                	jne    10002277 <retrieveBits(char*)+0xa0>
10002268:	b8 00 00 00 00       	mov    eax,0x0
1000226d:	ba 00 00 00 00       	mov    edx,0x0
10002272:	e9 02 02 00 00       	jmp    10002479 <retrieveBits(char*)+0x2a2>
10002277:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000227a:	83 c0 03             	add    eax,0x3
1000227d:	8a 00                	mov    al,BYTE PTR [eax]
1000227f:	0f be c0             	movsx  eax,al
10002282:	8d 50 d0             	lea    edx,[eax-0x30]
10002285:	89 d0                	mov    eax,edx
10002287:	c1 e0 02             	shl    eax,0x2
1000228a:	01 d0                	add    eax,edx
1000228c:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10002293:	01 d0                	add    eax,edx
10002295:	c1 e0 02             	shl    eax,0x2
10002298:	89 c6                	mov    esi,eax
1000229a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000229d:	83 c0 04             	add    eax,0x4
100022a0:	8a 00                	mov    al,BYTE PTR [eax]
100022a2:	0f be c0             	movsx  eax,al
100022a5:	8d 50 d0             	lea    edx,[eax-0x30]
100022a8:	89 d0                	mov    eax,edx
100022aa:	c1 e0 02             	shl    eax,0x2
100022ad:	01 d0                	add    eax,edx
100022af:	01 c0                	add    eax,eax
100022b1:	8d 14 06             	lea    edx,[esi+eax*1]
100022b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100022b7:	83 c0 05             	add    eax,0x5
100022ba:	8a 00                	mov    al,BYTE PTR [eax]
100022bc:	0f be c0             	movsx  eax,al
100022bf:	83 e8 30             	sub    eax,0x30
100022c2:	01 d0                	add    eax,edx
100022c4:	99                   	cdq    
100022c5:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
100022c8:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
100022cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100022ce:	83 c0 07             	add    eax,0x7
100022d1:	8a 00                	mov    al,BYTE PTR [eax]
100022d3:	0f be c0             	movsx  eax,al
100022d6:	8d 50 d0             	lea    edx,[eax-0x30]
100022d9:	89 d0                	mov    eax,edx
100022db:	c1 e0 02             	shl    eax,0x2
100022de:	01 d0                	add    eax,edx
100022e0:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
100022e7:	01 d0                	add    eax,edx
100022e9:	c1 e0 02             	shl    eax,0x2
100022ec:	89 c6                	mov    esi,eax
100022ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100022f1:	83 c0 08             	add    eax,0x8
100022f4:	8a 00                	mov    al,BYTE PTR [eax]
100022f6:	0f be c0             	movsx  eax,al
100022f9:	8d 50 d0             	lea    edx,[eax-0x30]
100022fc:	89 d0                	mov    eax,edx
100022fe:	c1 e0 02             	shl    eax,0x2
10002301:	01 d0                	add    eax,edx
10002303:	01 c0                	add    eax,eax
10002305:	8d 14 06             	lea    edx,[esi+eax*1]
10002308:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000230b:	83 c0 09             	add    eax,0x9
1000230e:	8a 00                	mov    al,BYTE PTR [eax]
10002310:	0f be c0             	movsx  eax,al
10002313:	83 e8 30             	sub    eax,0x30
10002316:	01 d0                	add    eax,edx
10002318:	99                   	cdq    
10002319:	89 45 c0             	mov    DWORD PTR [ebp-0x40],eax
1000231c:	89 55 c4             	mov    DWORD PTR [ebp-0x3c],edx
1000231f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002322:	83 c0 0b             	add    eax,0xb
10002325:	8a 00                	mov    al,BYTE PTR [eax]
10002327:	0f be c0             	movsx  eax,al
1000232a:	8d 50 d0             	lea    edx,[eax-0x30]
1000232d:	89 d0                	mov    eax,edx
1000232f:	c1 e0 02             	shl    eax,0x2
10002332:	01 d0                	add    eax,edx
10002334:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
1000233b:	01 d0                	add    eax,edx
1000233d:	c1 e0 02             	shl    eax,0x2
10002340:	89 c6                	mov    esi,eax
10002342:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002345:	83 c0 0c             	add    eax,0xc
10002348:	8a 00                	mov    al,BYTE PTR [eax]
1000234a:	0f be c0             	movsx  eax,al
1000234d:	8d 50 d0             	lea    edx,[eax-0x30]
10002350:	89 d0                	mov    eax,edx
10002352:	c1 e0 02             	shl    eax,0x2
10002355:	01 d0                	add    eax,edx
10002357:	01 c0                	add    eax,eax
10002359:	8d 14 06             	lea    edx,[esi+eax*1]
1000235c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000235f:	83 c0 0d             	add    eax,0xd
10002362:	8a 00                	mov    al,BYTE PTR [eax]
10002364:	0f be c0             	movsx  eax,al
10002367:	83 e8 30             	sub    eax,0x30
1000236a:	01 d0                	add    eax,edx
1000236c:	99                   	cdq    
1000236d:	89 45 b8             	mov    DWORD PTR [ebp-0x48],eax
10002370:	89 55 bc             	mov    DWORD PTR [ebp-0x44],edx
10002373:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
10002376:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
10002379:	0f a4 c2 0a          	shld   edx,eax,0xa
1000237d:	c1 e0 0a             	shl    eax,0xa
10002380:	89 c6                	mov    esi,eax
10002382:	89 d7                	mov    edi,edx
10002384:	89 f0                	mov    eax,esi
10002386:	0b 45 c8             	or     eax,DWORD PTR [ebp-0x38]
10002389:	89 c1                	mov    ecx,eax
1000238b:	89 f8                	mov    eax,edi
1000238d:	0b 45 cc             	or     eax,DWORD PTR [ebp-0x34]
10002390:	89 c3                	mov    ebx,eax
10002392:	8b 45 b8             	mov    eax,DWORD PTR [ebp-0x48]
10002395:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
10002398:	0f a4 c2 14          	shld   edx,eax,0x14
1000239c:	c1 e0 14             	shl    eax,0x14
1000239f:	89 ce                	mov    esi,ecx
100023a1:	89 45 a8             	mov    DWORD PTR [ebp-0x58],eax
100023a4:	89 55 ac             	mov    DWORD PTR [ebp-0x54],edx
100023a7:	0b 75 a8             	or     esi,DWORD PTR [ebp-0x58]
100023aa:	89 75 d8             	mov    DWORD PTR [ebp-0x28],esi
100023ad:	89 d8                	mov    eax,ebx
100023af:	0b 45 ac             	or     eax,DWORD PTR [ebp-0x54]
100023b2:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
100023b5:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
100023b8:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
100023bb:	0f a4 c2 0c          	shld   edx,eax,0xc
100023bf:	c1 e0 0c             	shl    eax,0xc
100023c2:	89 c3                	mov    ebx,eax
100023c4:	89 d6                	mov    esi,edx
100023c6:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
100023c9:	89 75 dc             	mov    DWORD PTR [ebp-0x24],esi
100023cc:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
100023cf:	c1 e0 04             	shl    eax,0x4
100023d2:	0b 45 ec             	or     eax,DWORD PTR [ebp-0x14]
100023d5:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
100023d8:	c1 e2 08             	shl    edx,0x8
100023db:	09 d0                	or     eax,edx
100023dd:	99                   	cdq    
100023de:	09 45 d8             	or     DWORD PTR [ebp-0x28],eax
100023e1:	09 55 dc             	or     DWORD PTR [ebp-0x24],edx
100023e4:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
100023eb:	81 7d d4 db 24 00 00 	cmp    DWORD PTR [ebp-0x2c],0x24db
100023f2:	7f 7f                	jg     10002473 <retrieveBits(char*)+0x29c>
100023f4:	6a 2a                	push   0x2a
100023f6:	6a 13                	push   0x13
100023f8:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
100023fb:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
100023fe:	e8 fc ff ff ff       	call   100023ff <retrieveBits(char*)+0x228>	100023ff: R_386_PC32	ror(unsigned long long, int, int)
10002403:	83 c4 10             	add    esp,0x10
10002406:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
10002409:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
1000240c:	6a 00                	push   0x0
1000240e:	6a 08                	push   0x8
10002410:	6a 00                	push   0x0
10002412:	6a 03                	push   0x3
10002414:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
10002417:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
1000241a:	e8 fc ff ff ff       	call   1000241b <retrieveBits(char*)+0x244>	1000241b: R_386_PC32	swapBits(unsigned long long, unsigned long long, unsigned long long)
1000241f:	83 c4 18             	add    esp,0x18
10002422:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
10002425:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
10002428:	6a 00                	push   0x0
1000242a:	6a 0c                	push   0xc
1000242c:	6a 00                	push   0x0
1000242e:	6a 0d                	push   0xd
10002430:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
10002433:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10002436:	e8 fc ff ff ff       	call   10002437 <retrieveBits(char*)+0x260>	10002437: R_386_PC32	swapBits(unsigned long long, unsigned long long, unsigned long long)
1000243b:	83 c4 18             	add    esp,0x18
1000243e:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
10002441:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
10002444:	6a 00                	push   0x0
10002446:	6a 16                	push   0x16
10002448:	6a 00                	push   0x0
1000244a:	6a 25                	push   0x25
1000244c:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
1000244f:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10002452:	e8 fc ff ff ff       	call   10002453 <retrieveBits(char*)+0x27c>	10002453: R_386_PC32	swapBits(unsigned long long, unsigned long long, unsigned long long)
10002457:	83 c4 18             	add    esp,0x18
1000245a:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
1000245d:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
10002460:	81 75 d8 95 38 e4 b5 	xor    DWORD PTR [ebp-0x28],0xb5e43895
10002467:	83 75 dc 37          	xor    DWORD PTR [ebp-0x24],0x37
1000246b:	ff 45 d4             	inc    DWORD PTR [ebp-0x2c]
1000246e:	e9 78 ff ff ff       	jmp    100023eb <retrieveBits(char*)+0x214>
10002473:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10002476:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
10002479:	8d 65 f4             	lea    esp,[ebp-0xc]
1000247c:	5b                   	pop    ebx
1000247d:	5e                   	pop    esi
1000247e:	5f                   	pop    edi
1000247f:	5d                   	pop    ebp
10002480:	c3                   	ret    

10002481 <checkKey(char*)>:
10002481:	55                   	push   ebp
10002482:	89 e5                	mov    ebp,esp
10002484:	53                   	push   ebx
10002485:	83 ec 14             	sub    esp,0x14
10002488:	83 ec 04             	sub    esp,0x4
1000248b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000248e:	e8 fc ff ff ff       	call   1000248f <checkKey(char*)+0xe>	1000248f: R_386_PC32	retrieveBits(char*)
10002493:	83 c4 08             	add    esp,0x8
10002496:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10002499:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
1000249c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
1000249f:	25 ff 7f 00 00       	and    eax,0x7fff
100024a4:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
100024a7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100024aa:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
100024ad:	0f ac d0 0f          	shrd   eax,edx,0xf
100024b1:	c1 ea 0f             	shr    edx,0xf
100024b4:	89 c1                	mov    ecx,eax
100024b6:	89 d3                	mov    ebx,edx
100024b8:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
100024bb:	83 ec 04             	sub    esp,0x4
100024be:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
100024c1:	e8 fc ff ff ff       	call   100024c2 <checkKey(char*)+0x41>	100024c2: R_386_PC32	getChecksum(unsigned int)
100024c6:	83 c4 08             	add    esp,0x8
100024c9:	39 45 ec             	cmp    DWORD PTR [ebp-0x14],eax
100024cc:	0f 95 c0             	setne  al
100024cf:	84 c0                	test   al,al
100024d1:	74 07                	je     100024da <checkKey(char*)+0x59>
100024d3:	b8 00 00 00 00       	mov    eax,0x0
100024d8:	eb 06                	jmp    100024e0 <checkKey(char*)+0x5f>
100024da:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100024dd:	83 e0 07             	and    eax,0x7
100024e0:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
100024e3:	c9                   	leave  
100024e4:	c3                   	ret    

100024e5 <changeKeyType(char*, int)>:
100024e5:	55                   	push   ebp
100024e6:	89 e5                	mov    ebp,esp
100024e8:	83 ec 10             	sub    esp,0x10
100024eb:	83 ec 04             	sub    esp,0x4
100024ee:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100024f1:	e8 fc ff ff ff       	call   100024f2 <changeKeyType(char*, int)+0xd>	100024f2: R_386_PC32	retrieveBits(char*)
100024f6:	83 c4 08             	add    esp,0x8
100024f9:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
100024fc:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
100024ff:	83 65 f8 f8          	and    DWORD PTR [ebp-0x8],0xfffffff8
10002503:	83 65 fc ff          	and    DWORD PTR [ebp-0x4],0xffffffff
10002507:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
1000250a:	99                   	cdq    
1000250b:	09 45 f8             	or     DWORD PTR [ebp-0x8],eax
1000250e:	09 55 fc             	or     DWORD PTR [ebp-0x4],edx
10002511:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
10002514:	50                   	push   eax
10002515:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002518:	e8 fc ff ff ff       	call   10002519 <changeKeyType(char*, int)+0x34>	10002519: R_386_PC32	createKey(char*, unsigned int)
1000251d:	83 c4 08             	add    esp,0x8
10002520:	83 ec 04             	sub    esp,0x4
10002523:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002526:	e8 fc ff ff ff       	call   10002527 <changeKeyType(char*, int)+0x42>	10002527: R_386_PC32	checkKey(char*)
1000252b:	83 c4 08             	add    esp,0x8
1000252e:	85 c0                	test   eax,eax
10002530:	0f 95 c0             	setne  al
10002533:	c9                   	leave  
10002534:	c3                   	ret    

10002535 <checkExtendedKey(char*)>:
10002535:	55                   	push   ebp
10002536:	89 e5                	mov    ebp,esp
10002538:	83 ec 20             	sub    esp,0x20
1000253b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000253e:	8a 00                	mov    al,BYTE PTR [eax]
10002540:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
10002543:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002546:	8a 40 01             	mov    al,BYTE PTR [eax+0x1]
10002549:	88 45 ed             	mov    BYTE PTR [ebp-0x13],al
1000254c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000254f:	8a 40 02             	mov    al,BYTE PTR [eax+0x2]
10002552:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
10002555:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002558:	8a 40 03             	mov    al,BYTE PTR [eax+0x3]
1000255b:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
1000255e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002561:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
10002564:	88 45 f0             	mov    BYTE PTR [ebp-0x10],al
10002567:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000256a:	8a 40 05             	mov    al,BYTE PTR [eax+0x5]
1000256d:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
10002570:	c6 45 f2 2d          	mov    BYTE PTR [ebp-0xe],0x2d
10002574:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002577:	8a 40 06             	mov    al,BYTE PTR [eax+0x6]
1000257a:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
1000257d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002580:	8a 40 07             	mov    al,BYTE PTR [eax+0x7]
10002583:	88 45 f4             	mov    BYTE PTR [ebp-0xc],al
10002586:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002589:	8a 40 09             	mov    al,BYTE PTR [eax+0x9]
1000258c:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
1000258f:	c6 45 f6 2d          	mov    BYTE PTR [ebp-0xa],0x2d
10002593:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002596:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
10002599:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
1000259c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000259f:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
100025a2:	88 45 f8             	mov    BYTE PTR [ebp-0x8],al
100025a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100025a8:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
100025ab:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
100025ae:	c6 45 fa 2d          	mov    BYTE PTR [ebp-0x6],0x2d
100025b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100025b5:	8a 40 0f             	mov    al,BYTE PTR [eax+0xf]
100025b8:	88 45 fb             	mov    BYTE PTR [ebp-0x5],al
100025bb:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
100025be:	48                   	dec    eax
100025bf:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
100025c2:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
100025c5:	3c 2f                	cmp    al,0x2f
100025c7:	75 04                	jne    100025cd <checkExtendedKey(char*)+0x98>
100025c9:	c6 45 ef 39          	mov    BYTE PTR [ebp-0x11],0x39
100025cd:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
100025d0:	48                   	dec    eax
100025d1:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
100025d4:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
100025d7:	3c 2f                	cmp    al,0x2f
100025d9:	75 04                	jne    100025df <checkExtendedKey(char*)+0xaa>
100025db:	c6 45 f5 39          	mov    BYTE PTR [ebp-0xb],0x39
100025df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100025e2:	83 c0 0d             	add    eax,0xd
100025e5:	8a 10                	mov    dl,BYTE PTR [eax]
100025e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100025ea:	83 c0 0c             	add    eax,0xc
100025ed:	8a 00                	mov    al,BYTE PTR [eax]
100025ef:	38 c2                	cmp    dl,al
100025f1:	74 0a                	je     100025fd <checkExtendedKey(char*)+0xc8>
100025f3:	b8 00 00 00 00       	mov    eax,0x0
100025f8:	e9 d6 00 00 00       	jmp    100026d3 <checkExtendedKey(char*)+0x19e>
100025fd:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
10002600:	3c 2f                	cmp    al,0x2f
10002602:	7e 07                	jle    1000260b <checkExtendedKey(char*)+0xd6>
10002604:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
10002607:	3c 39                	cmp    al,0x39
10002609:	7e 0a                	jle    10002615 <checkExtendedKey(char*)+0xe0>
1000260b:	b8 00 00 00 00       	mov    eax,0x0
10002610:	e9 be 00 00 00       	jmp    100026d3 <checkExtendedKey(char*)+0x19e>
10002615:	8a 45 f0             	mov    al,BYTE PTR [ebp-0x10]
10002618:	3c 2f                	cmp    al,0x2f
1000261a:	7e 07                	jle    10002623 <checkExtendedKey(char*)+0xee>
1000261c:	8a 45 f0             	mov    al,BYTE PTR [ebp-0x10]
1000261f:	3c 39                	cmp    al,0x39
10002621:	7e 0a                	jle    1000262d <checkExtendedKey(char*)+0xf8>
10002623:	b8 00 00 00 00       	mov    eax,0x0
10002628:	e9 a6 00 00 00       	jmp    100026d3 <checkExtendedKey(char*)+0x19e>
1000262d:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
10002630:	3c 2f                	cmp    al,0x2f
10002632:	7e 07                	jle    1000263b <checkExtendedKey(char*)+0x106>
10002634:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
10002637:	3c 39                	cmp    al,0x39
10002639:	7e 0a                	jle    10002645 <checkExtendedKey(char*)+0x110>
1000263b:	b8 00 00 00 00       	mov    eax,0x0
10002640:	e9 8e 00 00 00       	jmp    100026d3 <checkExtendedKey(char*)+0x19e>
10002645:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
10002648:	3c 2f                	cmp    al,0x2f
1000264a:	7e 07                	jle    10002653 <checkExtendedKey(char*)+0x11e>
1000264c:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
1000264f:	3c 39                	cmp    al,0x39
10002651:	7e 07                	jle    1000265a <checkExtendedKey(char*)+0x125>
10002653:	b8 00 00 00 00       	mov    eax,0x0
10002658:	eb 79                	jmp    100026d3 <checkExtendedKey(char*)+0x19e>
1000265a:	8a 45 f4             	mov    al,BYTE PTR [ebp-0xc]
1000265d:	3c 2f                	cmp    al,0x2f
1000265f:	7e 07                	jle    10002668 <checkExtendedKey(char*)+0x133>
10002661:	8a 45 f4             	mov    al,BYTE PTR [ebp-0xc]
10002664:	3c 39                	cmp    al,0x39
10002666:	7e 07                	jle    1000266f <checkExtendedKey(char*)+0x13a>
10002668:	b8 00 00 00 00       	mov    eax,0x0
1000266d:	eb 64                	jmp    100026d3 <checkExtendedKey(char*)+0x19e>
1000266f:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
10002672:	3c 2f                	cmp    al,0x2f
10002674:	7e 07                	jle    1000267d <checkExtendedKey(char*)+0x148>
10002676:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
10002679:	3c 39                	cmp    al,0x39
1000267b:	7e 07                	jle    10002684 <checkExtendedKey(char*)+0x14f>
1000267d:	b8 00 00 00 00       	mov    eax,0x0
10002682:	eb 4f                	jmp    100026d3 <checkExtendedKey(char*)+0x19e>
10002684:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
10002687:	3c 2f                	cmp    al,0x2f
10002689:	7e 07                	jle    10002692 <checkExtendedKey(char*)+0x15d>
1000268b:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
1000268e:	3c 39                	cmp    al,0x39
10002690:	7e 07                	jle    10002699 <checkExtendedKey(char*)+0x164>
10002692:	b8 00 00 00 00       	mov    eax,0x0
10002697:	eb 3a                	jmp    100026d3 <checkExtendedKey(char*)+0x19e>
10002699:	8a 45 f8             	mov    al,BYTE PTR [ebp-0x8]
1000269c:	3c 2f                	cmp    al,0x2f
1000269e:	7e 07                	jle    100026a7 <checkExtendedKey(char*)+0x172>
100026a0:	8a 45 f8             	mov    al,BYTE PTR [ebp-0x8]
100026a3:	3c 39                	cmp    al,0x39
100026a5:	7e 07                	jle    100026ae <checkExtendedKey(char*)+0x179>
100026a7:	b8 00 00 00 00       	mov    eax,0x0
100026ac:	eb 25                	jmp    100026d3 <checkExtendedKey(char*)+0x19e>
100026ae:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
100026b1:	3c 2f                	cmp    al,0x2f
100026b3:	7e 07                	jle    100026bc <checkExtendedKey(char*)+0x187>
100026b5:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
100026b8:	3c 39                	cmp    al,0x39
100026ba:	7e 07                	jle    100026c3 <checkExtendedKey(char*)+0x18e>
100026bc:	b8 00 00 00 00       	mov    eax,0x0
100026c1:	eb 10                	jmp    100026d3 <checkExtendedKey(char*)+0x19e>
100026c3:	83 ec 04             	sub    esp,0x4
100026c6:	8d 45 ec             	lea    eax,[ebp-0x14]
100026c9:	50                   	push   eax
100026ca:	e8 fc ff ff ff       	call   100026cb <checkExtendedKey(char*)+0x196>	100026cb: R_386_PC32	checkKey(char*)
100026cf:	83 c4 08             	add    esp,0x8
100026d2:	90                   	nop
100026d3:	c9                   	leave  
100026d4:	c3                   	ret    

100026d5 <loadTimezoneStrings()>:
100026d5:	55                   	push   ebp
100026d6:	89 e5                	mov    ebp,esp
100026d8:	53                   	push   ebx
100026d9:	83 ec 34             	sub    esp,0x34
100026dc:	83 ec 0c             	sub    esp,0xc
100026df:	68 14 01 00 00       	push   0x114
100026e4:	e8 fc ff ff ff       	call   100026e5 <loadTimezoneStrings()+0x10>	100026e5: R_386_PC32	operator new(unsigned long)
100026e9:	83 c4 10             	add    esp,0x10
100026ec:	89 c3                	mov    ebx,eax
100026ee:	a1 00 00 00 00       	mov    eax,ds:0x0	100026ef: R_386_32	kernelProcess
100026f3:	83 ec 04             	sub    esp,0x4
100026f6:	50                   	push   eax
100026f7:	68 14 9a 00 10       	push   0x10009a14	100026f8: R_386_32	.text
100026fc:	53                   	push   ebx
100026fd:	e8 fc ff ff ff       	call   100026fe <loadTimezoneStrings()+0x29>	100026fe: R_386_PC32	File::File(char const*, Process*)
10002702:	83 c4 10             	add    esp,0x10
10002705:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
10002708:	83 ec 08             	sub    esp,0x8
1000270b:	6a 01                	push   0x1
1000270d:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
10002710:	e8 fc ff ff ff       	call   10002711 <loadTimezoneStrings()+0x3c>	10002711: R_386_PC32	File::open(FileOpenMode)
10002715:	83 c4 10             	add    esp,0x10
10002718:	83 ec 04             	sub    esp,0x4
1000271b:	8d 45 d7             	lea    eax,[ebp-0x29]
1000271e:	50                   	push   eax
1000271f:	8d 45 d8             	lea    eax,[ebp-0x28]
10002722:	50                   	push   eax
10002723:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
10002726:	e8 fc ff ff ff       	call   10002727 <loadTimezoneStrings()+0x52>	10002727: R_386_PC32	File::stat(unsigned long long*, bool*)
1000272b:	83 c4 10             	add    esp,0x10
1000272e:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10002731:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
10002734:	83 ec 0c             	sub    esp,0xc
10002737:	50                   	push   eax
10002738:	e8 fc ff ff ff       	call   10002739 <loadTimezoneStrings()+0x64>	10002739: R_386_PC32	malloc
1000273d:	83 c4 10             	add    esp,0x10
10002740:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
10002743:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10002746:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
10002749:	83 ec 04             	sub    esp,0x4
1000274c:	50                   	push   eax
1000274d:	6a 00                	push   0x0
1000274f:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
10002752:	e8 fc ff ff ff       	call   10002753 <loadTimezoneStrings()+0x7e>	10002753: R_386_PC32	memset
10002757:	83 c4 10             	add    esp,0x10
1000275a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
1000275d:	8b 00                	mov    eax,DWORD PTR [eax]
1000275f:	83 c0 0c             	add    eax,0xc
10002762:	8b 08                	mov    ecx,DWORD PTR [eax]
10002764:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10002767:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
1000276a:	83 ec 0c             	sub    esp,0xc
1000276d:	8d 5d d0             	lea    ebx,[ebp-0x30]
10002770:	53                   	push   ebx
10002771:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
10002774:	52                   	push   edx
10002775:	50                   	push   eax
10002776:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
10002779:	ff d1                	call   ecx
1000277b:	83 c4 20             	add    esp,0x20
1000277e:	83 ec 0c             	sub    esp,0xc
10002781:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
10002784:	e8 fc ff ff ff       	call   10002785 <loadTimezoneStrings()+0xb0>	10002785: R_386_PC32	File::close()
10002789:	83 c4 10             	add    esp,0x10
1000278c:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
1000278f:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
10002792:	83 ec 08             	sub    esp,0x8
10002795:	50                   	push   eax
10002796:	68 33 9a 00 10       	push   0x10009a33	10002797: R_386_32	.text
1000279b:	e8 fc ff ff ff       	call   1000279c <loadTimezoneStrings()+0xc7>	1000279c: R_386_PC32	Dbg::kprintf(char const*, ...)
100027a0:	83 c4 10             	add    esp,0x10
100027a3:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
100027aa:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
100027b1:	81 7d f0 c7 00 00 00 	cmp    DWORD PTR [ebp-0x10],0xc7
100027b8:	7f 39                	jg     100027f3 <loadTimezoneStrings()+0x11e>
100027ba:	83 ec 0c             	sub    esp,0xc
100027bd:	6a 78                	push   0x78
100027bf:	e8 fc ff ff ff       	call   100027c0 <loadTimezoneStrings()+0xeb>	100027c0: R_386_PC32	malloc
100027c4:	83 c4 10             	add    esp,0x10
100027c7:	89 c2                	mov    edx,eax
100027c9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100027cc:	89 14 85 00 00 00 00 	mov    DWORD PTR [eax*4+0x0],edx	100027cf: R_386_32	timezoneStrings
100027d3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100027d6:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	100027d9: R_386_32	timezoneStrings
100027dd:	83 ec 08             	sub    esp,0x8
100027e0:	68 3d 9a 00 10       	push   0x10009a3d	100027e1: R_386_32	.text
100027e5:	50                   	push   eax
100027e6:	e8 fc ff ff ff       	call   100027e7 <loadTimezoneStrings()+0x112>	100027e7: R_386_PC32	strcpy
100027eb:	83 c4 10             	add    esp,0x10
100027ee:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
100027f1:	eb be                	jmp    100027b1 <loadTimezoneStrings()+0xdc>
100027f3:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
100027fa:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
100027fd:	8d 50 01             	lea    edx,[eax+0x1]
10002800:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
10002803:	89 c2                	mov    edx,eax
10002805:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10002808:	01 d0                	add    eax,edx
1000280a:	8a 00                	mov    al,BYTE PTR [eax]
1000280c:	88 45 ce             	mov    BYTE PTR [ebp-0x32],al
1000280f:	c6 45 cf 00          	mov    BYTE PTR [ebp-0x31],0x0
10002813:	8a 45 ce             	mov    al,BYTE PTR [ebp-0x32]
10002816:	3c 0d                	cmp    al,0xd
10002818:	0f 84 2e 01 00 00    	je     1000294c <loadTimezoneStrings()+0x277>
1000281e:	8a 45 ce             	mov    al,BYTE PTR [ebp-0x32]
10002821:	3c 09                	cmp    al,0x9
10002823:	75 3c                	jne    10002861 <loadTimezoneStrings()+0x18c>
10002825:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10002828:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	1000282b: R_386_32	timezoneStrings
1000282f:	83 ec 0c             	sub    esp,0xc
10002832:	50                   	push   eax
10002833:	e8 fc ff ff ff       	call   10002834 <loadTimezoneStrings()+0x15f>	10002834: R_386_PC32	strlen
10002838:	83 c4 10             	add    esp,0x10
1000283b:	83 f8 08             	cmp    eax,0x8
1000283e:	0f 87 0e 01 00 00    	ja     10002952 <loadTimezoneStrings()+0x27d>
10002844:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10002847:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	1000284a: R_386_32	timezoneStrings
1000284e:	83 ec 08             	sub    esp,0x8
10002851:	68 3d 9a 00 10       	push   0x10009a3d	10002852: R_386_32	.text
10002856:	50                   	push   eax
10002857:	e8 fc ff ff ff       	call   10002858 <loadTimezoneStrings()+0x183>	10002858: R_386_PC32	strcat
1000285c:	83 c4 10             	add    esp,0x10
1000285f:	eb c4                	jmp    10002825 <loadTimezoneStrings()+0x150>
10002861:	8a 45 ce             	mov    al,BYTE PTR [ebp-0x32]
10002864:	3c 0a                	cmp    al,0xa
10002866:	75 6b                	jne    100028d3 <loadTimezoneStrings()+0x1fe>
10002868:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
1000286b:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	1000286e: R_386_32	timezoneStrings
10002872:	83 ec 0c             	sub    esp,0xc
10002875:	50                   	push   eax
10002876:	e8 fc ff ff ff       	call   10002877 <loadTimezoneStrings()+0x1a2>	10002877: R_386_PC32	strlen
1000287b:	83 c4 10             	add    esp,0x10
1000287e:	83 f8 35             	cmp    eax,0x35
10002881:	77 1d                	ja     100028a0 <loadTimezoneStrings()+0x1cb>
10002883:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10002886:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	10002889: R_386_32	timezoneStrings
1000288d:	83 ec 08             	sub    esp,0x8
10002890:	68 3d 9a 00 10       	push   0x10009a3d	10002891: R_386_32	.text
10002895:	50                   	push   eax
10002896:	e8 fc ff ff ff       	call   10002897 <loadTimezoneStrings()+0x1c2>	10002897: R_386_PC32	strcat
1000289b:	83 c4 10             	add    esp,0x10
1000289e:	eb c8                	jmp    10002868 <loadTimezoneStrings()+0x193>
100028a0:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
100028a3:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
100028a6:	99                   	cdq    
100028a7:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
100028aa:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
100028ad:	39 c8                	cmp    eax,ecx
100028af:	89 d0                	mov    eax,edx
100028b1:	19 d8                	sbb    eax,ebx
100028b3:	0f 82 9f 00 00 00    	jb     10002958 <loadTimezoneStrings()+0x283>
100028b9:	83 ec 0c             	sub    esp,0xc
100028bc:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
100028bf:	e8 fc ff ff ff       	call   100028c0 <loadTimezoneStrings()+0x1eb>	100028c0: R_386_PC32	free
100028c4:	83 c4 10             	add    esp,0x10
100028c7:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
100028ce:	e9 8b 00 00 00       	jmp    1000295e <loadTimezoneStrings()+0x289>
100028d3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
100028d6:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	100028d9: R_386_32	timezoneStrings
100028dd:	83 ec 0c             	sub    esp,0xc
100028e0:	50                   	push   eax
100028e1:	e8 fc ff ff ff       	call   100028e2 <loadTimezoneStrings()+0x20d>	100028e2: R_386_PC32	strlen
100028e6:	83 c4 10             	add    esp,0x10
100028e9:	83 f8 31             	cmp    eax,0x31
100028ec:	77 1f                	ja     1000290d <loadTimezoneStrings()+0x238>
100028ee:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
100028f1:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	100028f4: R_386_32	timezoneStrings
100028f8:	83 ec 08             	sub    esp,0x8
100028fb:	8d 55 ce             	lea    edx,[ebp-0x32]
100028fe:	52                   	push   edx
100028ff:	50                   	push   eax
10002900:	e8 fc ff ff ff       	call   10002901 <loadTimezoneStrings()+0x22c>	10002901: R_386_PC32	strcat
10002905:	83 c4 10             	add    esp,0x10
10002908:	e9 ed fe ff ff       	jmp    100027fa <loadTimezoneStrings()+0x125>
1000290d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10002910:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	10002913: R_386_32	timezoneStrings
10002917:	83 ec 0c             	sub    esp,0xc
1000291a:	50                   	push   eax
1000291b:	e8 fc ff ff ff       	call   1000291c <loadTimezoneStrings()+0x247>	1000291c: R_386_PC32	strlen
10002920:	83 c4 10             	add    esp,0x10
10002923:	83 f8 32             	cmp    eax,0x32
10002926:	0f 85 ce fe ff ff    	jne    100027fa <loadTimezoneStrings()+0x125>
1000292c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
1000292f:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	10002932: R_386_32	timezoneStrings
10002936:	83 ec 08             	sub    esp,0x8
10002939:	68 3f 9a 00 10       	push   0x10009a3f	1000293a: R_386_32	.text
1000293e:	50                   	push   eax
1000293f:	e8 fc ff ff ff       	call   10002940 <loadTimezoneStrings()+0x26b>	10002940: R_386_PC32	strcat
10002944:	83 c4 10             	add    esp,0x10
10002947:	e9 ae fe ff ff       	jmp    100027fa <loadTimezoneStrings()+0x125>
1000294c:	90                   	nop
1000294d:	e9 a8 fe ff ff       	jmp    100027fa <loadTimezoneStrings()+0x125>
10002952:	90                   	nop
10002953:	e9 a2 fe ff ff       	jmp    100027fa <loadTimezoneStrings()+0x125>
10002958:	90                   	nop
10002959:	e9 9c fe ff ff       	jmp    100027fa <loadTimezoneStrings()+0x125>
1000295e:	81 7d e8 c7 00 00 00 	cmp    DWORD PTR [ebp-0x18],0xc7
10002965:	7f 23                	jg     1000298a <loadTimezoneStrings()+0x2b5>
10002967:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
1000296a:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	1000296d: R_386_32	timezoneStrings
10002971:	83 ec 04             	sub    esp,0x4
10002974:	50                   	push   eax
10002975:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
10002978:	68 44 9a 00 10       	push   0x10009a44	10002979: R_386_32	.text
1000297d:	e8 fc ff ff ff       	call   1000297e <loadTimezoneStrings()+0x2a9>	1000297e: R_386_PC32	Dbg::kprintf(char const*, ...)
10002982:	83 c4 10             	add    esp,0x10
10002985:	ff 45 e8             	inc    DWORD PTR [ebp-0x18]
10002988:	eb d4                	jmp    1000295e <loadTimezoneStrings()+0x289>
1000298a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
1000298d:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
10002990:	c9                   	leave  
10002991:	c3                   	ret    

10002992 <_bcrypt_rand>:
10002992:	55                   	push   ebp
10002993:	89 e5                	mov    ebp,esp
10002995:	83 ec 08             	sub    esp,0x8
10002998:	e8 fc ff ff ff       	call   10002999 <_bcrypt_rand+0x7>	10002999: R_386_PC32	KeRand()
1000299d:	c9                   	leave  
1000299e:	c3                   	ret    

1000299f <firstRun(bool)>:
1000299f:	55                   	push   ebp
100029a0:	89 e5                	mov    ebp,esp
100029a2:	57                   	push   edi
100029a3:	56                   	push   esi
100029a4:	53                   	push   ebx
100029a5:	81 ec 5c 01 00 00    	sub    esp,0x15c
100029ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100029ae:	88 85 a4 fe ff ff    	mov    BYTE PTR [ebp-0x15c],al
100029b4:	8a 85 a4 fe ff ff    	mov    al,BYTE PTR [ebp-0x15c]
100029ba:	83 f0 01             	xor    eax,0x1
100029bd:	a2 00 00 00 00       	mov    ds:0x0,al	100029be: R_386_32	showSidebar
100029c2:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	100029c4: R_386_32	guiKeyboardHandler
	100029c8: R_386_32	bootInstallKeybrd(KeyboardToken, bool*)
100029cc:	83 ec 0c             	sub    esp,0xc
100029cf:	68 4c 9a 00 10       	push   0x10009a4c	100029d0: R_386_32	.text
100029d4:	e8 fc ff ff ff       	call   100029d5 <firstRun(bool)+0x36>	100029d5: R_386_PC32	KeSetBootMessage(char const*)
100029d9:	83 c4 10             	add    esp,0x10
100029dc:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100029de: R_386_32	VgaText::hiddenOut
100029e3:	a1 00 00 00 00       	mov    eax,ds:0x0	100029e4: R_386_32	activeTerminal
100029e8:	83 ec 08             	sub    esp,0x8
100029eb:	68 75 9a 00 10       	push   0x10009a75	100029ec: R_386_32	.text
100029f0:	50                   	push   eax
100029f1:	e8 fc ff ff ff       	call   100029f2 <firstRun(bool)+0x53>	100029f2: R_386_PC32	VgaText::puts(char const*)
100029f6:	83 c4 10             	add    esp,0x10
100029f9:	a1 00 00 00 00       	mov    eax,ds:0x0	100029fa: R_386_32	kernelProcess
100029fe:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
10002a04:	83 ec 08             	sub    esp,0x8
10002a07:	68 75 9a 00 10       	push   0x10009a75	10002a08: R_386_32	.text
10002a0c:	50                   	push   eax
10002a0d:	e8 fc ff ff ff       	call   10002a0e <firstRun(bool)+0x6f>	10002a0e: R_386_PC32	VgaText::puts(char const*)
10002a12:	83 c4 10             	add    esp,0x10
10002a15:	83 ec 0c             	sub    esp,0xc
10002a18:	68 84 01 00 00       	push   0x184
10002a1d:	e8 fc ff ff ff       	call   10002a1e <firstRun(bool)+0x7f>	10002a1e: R_386_PC32	operator new(unsigned long)
10002a22:	83 c4 10             	add    esp,0x10
10002a25:	89 c3                	mov    ebx,eax
10002a27:	83 ec 08             	sub    esp,0x8
10002a2a:	68 7c 9a 00 10       	push   0x10009a7c	10002a2b: R_386_32	.text
10002a2f:	53                   	push   ebx
10002a30:	e8 fc ff ff ff       	call   10002a31 <firstRun(bool)+0x92>	10002a31: R_386_PC32	VgaText::VgaText(char const*)
10002a35:	83 c4 10             	add    esp,0x10
10002a38:	89 1d 00 00 00 00    	mov    DWORD PTR ds:0x0,ebx	10002a3a: R_386_32	term
10002a3e:	a1 00 00 00 00       	mov    eax,ds:0x0	10002a3f: R_386_32	term
10002a43:	83 ec 0c             	sub    esp,0xc
10002a46:	50                   	push   eax
10002a47:	e8 fc ff ff ff       	call   10002a48 <firstRun(bool)+0xa9>	10002a48: R_386_PC32	setActiveTerminal(VgaText*)
10002a4c:	83 c4 10             	add    esp,0x10
10002a4f:	e8 fc ff ff ff       	call   10002a50 <firstRun(bool)+0xb1>	10002a50: R_386_PC32	drawBootScreen()
10002a54:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
10002a5b:	80 bd a4 fe ff ff 00 	cmp    BYTE PTR [ebp-0x15c],0x0
10002a62:	74 17                	je     10002a7b <firstRun(bool)+0xdc>
10002a64:	83 ec 08             	sub    esp,0x8
10002a67:	68 81 9a 00 10       	push   0x10009a81	10002a68: R_386_32	.text
10002a6c:	68 00 00 00 00       	push   0x0	10002a6d: R_386_32	pkeybuf
10002a71:	e8 fc ff ff ff       	call   10002a72 <firstRun(bool)+0xd3>	10002a72: R_386_PC32	strcpy
10002a76:	83 c4 10             	add    esp,0x10
10002a79:	eb 15                	jmp    10002a90 <firstRun(bool)+0xf1>
10002a7b:	83 ec 08             	sub    esp,0x8
10002a7e:	68 92 9a 00 10       	push   0x10009a92	10002a7f: R_386_32	.text
10002a83:	68 00 00 00 00       	push   0x0	10002a84: R_386_32	pkeybuf
10002a88:	e8 fc ff ff ff       	call   10002a89 <firstRun(bool)+0xea>	10002a89: R_386_PC32	strcpy
10002a8d:	83 c4 10             	add    esp,0x10
10002a90:	8a 85 a4 fe ff ff    	mov    al,BYTE PTR [ebp-0x15c]
10002a96:	83 f0 01             	xor    eax,0x1
10002a99:	84 c0                	test   al,al
10002a9b:	0f 84 fd 1b 00 00    	je     1000469e <firstRun(bool)+0x1cff>
10002aa1:	c7 45 d8 00 00 00 00 	mov    DWORD PTR [ebp-0x28],0x0
10002aa8:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10002aaa: R_386_32	tzsel
10002ab2:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10002ab4: R_386_32	modesel
10002abc:	eb 01                	jmp    10002abf <firstRun(bool)+0x120>
10002abe:	90                   	nop
10002abf:	e8 fc ff ff ff       	call   10002ac0 <firstRun(bool)+0x121>	10002ac0: R_386_PC32	drawBootScreen()
10002ac4:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
10002acb:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10002acd: R_386_32	installKey
10002ad2:	83 ec 0c             	sub    esp,0xc
10002ad5:	68 a3 9a 00 10       	push   0x10009aa3	10002ad6: R_386_32	.text
10002ada:	6a 12                	push   0x12
10002adc:	6a 32                	push   0x32
10002ade:	6a 03                	push   0x3
10002ae0:	6a 16                	push   0x16
10002ae2:	e8 fc ff ff ff       	call   10002ae3 <firstRun(bool)+0x144>	10002ae3: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
10002ae7:	83 c4 20             	add    esp,0x20
10002aea:	a1 00 00 00 00       	mov    eax,ds:0x0	10002aeb: R_386_32	term
10002aef:	83 ec 04             	sub    esp,0x4
10002af2:	6a 06                	push   0x6
10002af4:	6a 18                	push   0x18
10002af6:	50                   	push   eax
10002af7:	e8 fc ff ff ff       	call   10002af8 <firstRun(bool)+0x159>	10002af8: R_386_PC32	VgaText::setCursor(int, int)
10002afc:	83 c4 10             	add    esp,0x10
10002aff:	a1 00 00 00 00       	mov    eax,ds:0x0	10002b00: R_386_32	term
10002b04:	83 ec 08             	sub    esp,0x8
10002b07:	68 b0 9a 00 10       	push   0x10009ab0	10002b08: R_386_32	.text
10002b0c:	50                   	push   eax
10002b0d:	e8 fc ff ff ff       	call   10002b0e <firstRun(bool)+0x16f>	10002b0e: R_386_PC32	VgaText::puts(char const*)
10002b12:	83 c4 10             	add    esp,0x10
10002b15:	a1 00 00 00 00       	mov    eax,ds:0x0	10002b16: R_386_32	term
10002b1a:	83 ec 04             	sub    esp,0x4
10002b1d:	6a 07                	push   0x7
10002b1f:	6a 18                	push   0x18
10002b21:	50                   	push   eax
10002b22:	e8 fc ff ff ff       	call   10002b23 <firstRun(bool)+0x184>	10002b23: R_386_PC32	VgaText::setCursor(int, int)
10002b27:	83 c4 10             	add    esp,0x10
10002b2a:	a1 00 00 00 00       	mov    eax,ds:0x0	10002b2b: R_386_32	term
10002b2f:	83 ec 08             	sub    esp,0x8
10002b32:	68 df 9a 00 10       	push   0x10009adf	10002b33: R_386_32	.text
10002b37:	50                   	push   eax
10002b38:	e8 fc ff ff ff       	call   10002b39 <firstRun(bool)+0x19a>	10002b39: R_386_PC32	VgaText::puts(char const*)
10002b3d:	83 c4 10             	add    esp,0x10
10002b40:	a1 00 00 00 00       	mov    eax,ds:0x0	10002b41: R_386_32	term
10002b45:	83 ec 04             	sub    esp,0x4
10002b48:	6a 09                	push   0x9
10002b4a:	6a 18                	push   0x18
10002b4c:	50                   	push   eax
10002b4d:	e8 fc ff ff ff       	call   10002b4e <firstRun(bool)+0x1af>	10002b4e: R_386_PC32	VgaText::setCursor(int, int)
10002b52:	83 c4 10             	add    esp,0x10
10002b55:	a1 00 00 00 00       	mov    eax,ds:0x0	10002b56: R_386_32	term
10002b5a:	83 ec 08             	sub    esp,0x8
10002b5d:	68 ef 9a 00 10       	push   0x10009aef	10002b5e: R_386_32	.text
10002b62:	50                   	push   eax
10002b63:	e8 fc ff ff ff       	call   10002b64 <firstRun(bool)+0x1c5>	10002b64: R_386_PC32	VgaText::puts(char const*)
10002b68:	83 c4 10             	add    esp,0x10
10002b6b:	a1 00 00 00 00       	mov    eax,ds:0x0	10002b6c: R_386_32	term
10002b70:	83 ec 04             	sub    esp,0x4
10002b73:	6a 0b                	push   0xb
10002b75:	6a 18                	push   0x18
10002b77:	50                   	push   eax
10002b78:	e8 fc ff ff ff       	call   10002b79 <firstRun(bool)+0x1da>	10002b79: R_386_PC32	VgaText::setCursor(int, int)
10002b7d:	83 c4 10             	add    esp,0x10
10002b80:	a1 00 00 00 00       	mov    eax,ds:0x0	10002b81: R_386_32	term
10002b85:	83 ec 08             	sub    esp,0x8
10002b88:	68 f4 9a 00 10       	push   0x10009af4	10002b89: R_386_32	.text
10002b8d:	50                   	push   eax
10002b8e:	e8 fc ff ff ff       	call   10002b8f <firstRun(bool)+0x1f0>	10002b8f: R_386_PC32	VgaText::puts(char const*)
10002b93:	83 c4 10             	add    esp,0x10
10002b96:	a1 00 00 00 00       	mov    eax,ds:0x0	10002b97: R_386_32	term
10002b9b:	83 ec 04             	sub    esp,0x4
10002b9e:	6a 0d                	push   0xd
10002ba0:	6a 18                	push   0x18
10002ba2:	50                   	push   eax
10002ba3:	e8 fc ff ff ff       	call   10002ba4 <firstRun(bool)+0x205>	10002ba4: R_386_PC32	VgaText::setCursor(int, int)
10002ba8:	83 c4 10             	add    esp,0x10
10002bab:	a1 00 00 00 00       	mov    eax,ds:0x0	10002bac: R_386_32	term
10002bb0:	83 ec 08             	sub    esp,0x8
10002bb3:	68 fc 9a 00 10       	push   0x10009afc	10002bb4: R_386_32	.text
10002bb8:	50                   	push   eax
10002bb9:	e8 fc ff ff ff       	call   10002bba <firstRun(bool)+0x21b>	10002bba: R_386_PC32	VgaText::puts(char const*)
10002bbe:	83 c4 10             	add    esp,0x10
10002bc1:	a1 00 00 00 00       	mov    eax,ds:0x0	10002bc2: R_386_32	term
10002bc6:	83 ec 04             	sub    esp,0x4
10002bc9:	6a 0f                	push   0xf
10002bcb:	6a 18                	push   0x18
10002bcd:	50                   	push   eax
10002bce:	e8 fc ff ff ff       	call   10002bcf <firstRun(bool)+0x230>	10002bcf: R_386_PC32	VgaText::setCursor(int, int)
10002bd3:	83 c4 10             	add    esp,0x10
10002bd6:	a1 00 00 00 00       	mov    eax,ds:0x0	10002bd7: R_386_32	term
10002bdb:	83 ec 08             	sub    esp,0x8
10002bde:	68 05 9b 00 10       	push   0x10009b05	10002bdf: R_386_32	.text
10002be3:	50                   	push   eax
10002be4:	e8 fc ff ff ff       	call   10002be5 <firstRun(bool)+0x246>	10002be5: R_386_PC32	VgaText::puts(char const*)
10002be9:	83 c4 10             	add    esp,0x10
10002bec:	a1 00 00 00 00       	mov    eax,ds:0x0	10002bed: R_386_32	term
10002bf1:	83 ec 04             	sub    esp,0x4
10002bf4:	6a 10                	push   0x10
10002bf6:	6a 18                	push   0x18
10002bf8:	50                   	push   eax
10002bf9:	e8 fc ff ff ff       	call   10002bfa <firstRun(bool)+0x25b>	10002bfa: R_386_PC32	VgaText::setCursor(int, int)
10002bfe:	83 c4 10             	add    esp,0x10
10002c01:	a1 00 00 00 00       	mov    eax,ds:0x0	10002c02: R_386_32	term
10002c06:	83 ec 08             	sub    esp,0x8
10002c09:	68 0d 9b 00 10       	push   0x10009b0d	10002c0a: R_386_32	.text
10002c0e:	50                   	push   eax
10002c0f:	e8 fc ff ff ff       	call   10002c10 <firstRun(bool)+0x271>	10002c10: R_386_PC32	VgaText::puts(char const*)
10002c14:	83 c4 10             	add    esp,0x10
10002c17:	a1 00 00 00 00       	mov    eax,ds:0x0	10002c18: R_386_32	term
10002c1c:	83 ec 04             	sub    esp,0x4
10002c1f:	6a 09                	push   0x9
10002c21:	6a 21                	push   0x21
10002c23:	50                   	push   eax
10002c24:	e8 fc ff ff ff       	call   10002c25 <firstRun(bool)+0x286>	10002c25: R_386_PC32	VgaText::setCursor(int, int)
10002c29:	83 c4 10             	add    esp,0x10
10002c2c:	a1 00 00 00 00       	mov    eax,ds:0x0	10002c2d: R_386_32	term
10002c31:	6a 07                	push   0x7
10002c33:	6a 00                	push   0x0
10002c35:	68 18 9b 00 10       	push   0x10009b18	10002c36: R_386_32	.text
10002c3a:	50                   	push   eax
10002c3b:	e8 fc ff ff ff       	call   10002c3c <firstRun(bool)+0x29d>	10002c3c: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002c40:	83 c4 10             	add    esp,0x10
10002c43:	a1 00 00 00 00       	mov    eax,ds:0x0	10002c44: R_386_32	term
10002c48:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
10002c4c:	75 07                	jne    10002c55 <firstRun(bool)+0x2b6>
10002c4e:	ba 3d 9b 00 10       	mov    edx,0x10009b3d	10002c4f: R_386_32	.text
10002c53:	eb 05                	jmp    10002c5a <firstRun(bool)+0x2bb>
10002c55:	ba 40 9b 00 10       	mov    edx,0x10009b40	10002c56: R_386_32	.text
10002c5a:	6a 0f                	push   0xf
10002c5c:	6a 00                	push   0x0
10002c5e:	52                   	push   edx
10002c5f:	50                   	push   eax
10002c60:	e8 fc ff ff ff       	call   10002c61 <firstRun(bool)+0x2c2>	10002c61: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002c65:	83 c4 10             	add    esp,0x10
10002c68:	a1 00 00 00 00       	mov    eax,ds:0x0	10002c69: R_386_32	term
10002c6d:	83 ec 08             	sub    esp,0x8
10002c70:	6a 21                	push   0x21
10002c72:	50                   	push   eax
10002c73:	e8 fc ff ff ff       	call   10002c74 <firstRun(bool)+0x2d5>	10002c74: R_386_PC32	VgaText::setCursorX(int)
10002c78:	83 c4 10             	add    esp,0x10
10002c7b:	a1 00 00 00 00       	mov    eax,ds:0x0	10002c7c: R_386_32	term
10002c80:	6a 07                	push   0x7
10002c82:	6a 00                	push   0x0
10002c84:	68 00 00 00 00       	push   0x0	10002c85: R_386_32	currName
10002c89:	50                   	push   eax
10002c8a:	e8 fc ff ff ff       	call   10002c8b <firstRun(bool)+0x2ec>	10002c8b: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002c8f:	83 c4 10             	add    esp,0x10
10002c92:	a1 00 00 00 00       	mov    eax,ds:0x0	10002c93: R_386_32	term
10002c97:	83 ec 04             	sub    esp,0x4
10002c9a:	6a 0b                	push   0xb
10002c9c:	6a 21                	push   0x21
10002c9e:	50                   	push   eax
10002c9f:	e8 fc ff ff ff       	call   10002ca0 <firstRun(bool)+0x301>	10002ca0: R_386_PC32	VgaText::setCursor(int, int)
10002ca4:	83 c4 10             	add    esp,0x10
10002ca7:	a1 00 00 00 00       	mov    eax,ds:0x0	10002ca8: R_386_32	term
10002cac:	6a 07                	push   0x7
10002cae:	6a 00                	push   0x0
10002cb0:	68 18 9b 00 10       	push   0x10009b18	10002cb1: R_386_32	.text
10002cb5:	50                   	push   eax
10002cb6:	e8 fc ff ff ff       	call   10002cb7 <firstRun(bool)+0x318>	10002cb7: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002cbb:	83 c4 10             	add    esp,0x10
10002cbe:	a1 00 00 00 00       	mov    eax,ds:0x0	10002cbf: R_386_32	term
10002cc3:	83 7d dc 01          	cmp    DWORD PTR [ebp-0x24],0x1
10002cc7:	75 07                	jne    10002cd0 <firstRun(bool)+0x331>
10002cc9:	ba 3d 9b 00 10       	mov    edx,0x10009b3d	10002cca: R_386_32	.text
10002cce:	eb 05                	jmp    10002cd5 <firstRun(bool)+0x336>
10002cd0:	ba 40 9b 00 10       	mov    edx,0x10009b40	10002cd1: R_386_32	.text
10002cd5:	6a 0f                	push   0xf
10002cd7:	6a 00                	push   0x0
10002cd9:	52                   	push   edx
10002cda:	50                   	push   eax
10002cdb:	e8 fc ff ff ff       	call   10002cdc <firstRun(bool)+0x33d>	10002cdc: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002ce0:	83 c4 10             	add    esp,0x10
10002ce3:	a1 00 00 00 00       	mov    eax,ds:0x0	10002ce4: R_386_32	term
10002ce8:	83 ec 08             	sub    esp,0x8
10002ceb:	6a 21                	push   0x21
10002ced:	50                   	push   eax
10002cee:	e8 fc ff ff ff       	call   10002cef <firstRun(bool)+0x350>	10002cef: R_386_PC32	VgaText::setCursorX(int)
10002cf3:	83 c4 10             	add    esp,0x10
10002cf6:	a1 00 00 00 00       	mov    eax,ds:0x0	10002cf7: R_386_32	term
10002cfb:	6a 07                	push   0x7
10002cfd:	6a 00                	push   0x0
10002cff:	68 00 00 00 00       	push   0x0	10002d00: R_386_32	currComp
10002d04:	50                   	push   eax
10002d05:	e8 fc ff ff ff       	call   10002d06 <firstRun(bool)+0x367>	10002d06: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002d0a:	83 c4 10             	add    esp,0x10
10002d0d:	a1 00 00 00 00       	mov    eax,ds:0x0	10002d0e: R_386_32	term
10002d12:	83 ec 04             	sub    esp,0x4
10002d15:	6a 0d                	push   0xd
10002d17:	6a 21                	push   0x21
10002d19:	50                   	push   eax
10002d1a:	e8 fc ff ff ff       	call   10002d1b <firstRun(bool)+0x37c>	10002d1b: R_386_PC32	VgaText::setCursor(int, int)
10002d1f:	83 c4 10             	add    esp,0x10
10002d22:	a1 00 00 00 00       	mov    eax,ds:0x0	10002d23: R_386_32	term
10002d27:	6a 07                	push   0x7
10002d29:	6a 00                	push   0x0
10002d2b:	68 18 9b 00 10       	push   0x10009b18	10002d2c: R_386_32	.text
10002d30:	50                   	push   eax
10002d31:	e8 fc ff ff ff       	call   10002d32 <firstRun(bool)+0x393>	10002d32: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002d36:	83 c4 10             	add    esp,0x10
10002d39:	a1 00 00 00 00       	mov    eax,ds:0x0	10002d3a: R_386_32	term
10002d3e:	83 7d dc 02          	cmp    DWORD PTR [ebp-0x24],0x2
10002d42:	75 07                	jne    10002d4b <firstRun(bool)+0x3ac>
10002d44:	ba 3d 9b 00 10       	mov    edx,0x10009b3d	10002d45: R_386_32	.text
10002d49:	eb 05                	jmp    10002d50 <firstRun(bool)+0x3b1>
10002d4b:	ba 40 9b 00 10       	mov    edx,0x10009b40	10002d4c: R_386_32	.text
10002d50:	6a 0f                	push   0xf
10002d52:	6a 00                	push   0x0
10002d54:	52                   	push   edx
10002d55:	50                   	push   eax
10002d56:	e8 fc ff ff ff       	call   10002d57 <firstRun(bool)+0x3b8>	10002d57: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002d5b:	83 c4 10             	add    esp,0x10
10002d5e:	a1 00 00 00 00       	mov    eax,ds:0x0	10002d5f: R_386_32	term
10002d63:	83 ec 08             	sub    esp,0x8
10002d66:	6a 21                	push   0x21
10002d68:	50                   	push   eax
10002d69:	e8 fc ff ff ff       	call   10002d6a <firstRun(bool)+0x3cb>	10002d6a: R_386_PC32	VgaText::setCursorX(int)
10002d6e:	83 c4 10             	add    esp,0x10
10002d71:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
10002d78:	83 ec 0c             	sub    esp,0xc
10002d7b:	68 00 00 00 00       	push   0x0	10002d7c: R_386_32	passwbufA
10002d80:	e8 fc ff ff ff       	call   10002d81 <firstRun(bool)+0x3e2>	10002d81: R_386_PC32	strlen
10002d85:	83 c4 10             	add    esp,0x10
10002d88:	89 c2                	mov    edx,eax
10002d8a:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10002d8d:	39 c2                	cmp    edx,eax
10002d8f:	76 1c                	jbe    10002dad <firstRun(bool)+0x40e>
10002d91:	a1 00 00 00 00       	mov    eax,ds:0x0	10002d92: R_386_32	term
10002d96:	6a 07                	push   0x7
10002d98:	6a 00                	push   0x0
10002d9a:	68 44 9b 00 10       	push   0x10009b44	10002d9b: R_386_32	.text
10002d9f:	50                   	push   eax
10002da0:	e8 fc ff ff ff       	call   10002da1 <firstRun(bool)+0x402>	10002da1: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002da5:	83 c4 10             	add    esp,0x10
10002da8:	ff 45 d4             	inc    DWORD PTR [ebp-0x2c]
10002dab:	eb cb                	jmp    10002d78 <firstRun(bool)+0x3d9>
10002dad:	a1 00 00 00 00       	mov    eax,ds:0x0	10002dae: R_386_32	term
10002db2:	83 ec 04             	sub    esp,0x4
10002db5:	6a 0f                	push   0xf
10002db7:	6a 21                	push   0x21
10002db9:	50                   	push   eax
10002dba:	e8 fc ff ff ff       	call   10002dbb <firstRun(bool)+0x41c>	10002dbb: R_386_PC32	VgaText::setCursor(int, int)
10002dbf:	83 c4 10             	add    esp,0x10
10002dc2:	a1 00 00 00 00       	mov    eax,ds:0x0	10002dc3: R_386_32	term
10002dc7:	6a 07                	push   0x7
10002dc9:	6a 00                	push   0x0
10002dcb:	68 18 9b 00 10       	push   0x10009b18	10002dcc: R_386_32	.text
10002dd0:	50                   	push   eax
10002dd1:	e8 fc ff ff ff       	call   10002dd2 <firstRun(bool)+0x433>	10002dd2: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002dd6:	83 c4 10             	add    esp,0x10
10002dd9:	a1 00 00 00 00       	mov    eax,ds:0x0	10002dda: R_386_32	term
10002dde:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
10002de2:	75 07                	jne    10002deb <firstRun(bool)+0x44c>
10002de4:	ba 3d 9b 00 10       	mov    edx,0x10009b3d	10002de5: R_386_32	.text
10002de9:	eb 05                	jmp    10002df0 <firstRun(bool)+0x451>
10002deb:	ba 40 9b 00 10       	mov    edx,0x10009b40	10002dec: R_386_32	.text
10002df0:	6a 0f                	push   0xf
10002df2:	6a 00                	push   0x0
10002df4:	52                   	push   edx
10002df5:	50                   	push   eax
10002df6:	e8 fc ff ff ff       	call   10002df7 <firstRun(bool)+0x458>	10002df7: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002dfb:	83 c4 10             	add    esp,0x10
10002dfe:	a1 00 00 00 00       	mov    eax,ds:0x0	10002dff: R_386_32	term
10002e03:	83 ec 08             	sub    esp,0x8
10002e06:	6a 21                	push   0x21
10002e08:	50                   	push   eax
10002e09:	e8 fc ff ff ff       	call   10002e0a <firstRun(bool)+0x46b>	10002e0a: R_386_PC32	VgaText::setCursorX(int)
10002e0e:	83 c4 10             	add    esp,0x10
10002e11:	c7 45 d0 00 00 00 00 	mov    DWORD PTR [ebp-0x30],0x0
10002e18:	83 ec 0c             	sub    esp,0xc
10002e1b:	68 00 00 00 00       	push   0x0	10002e1c: R_386_32	passwbufB
10002e20:	e8 fc ff ff ff       	call   10002e21 <firstRun(bool)+0x482>	10002e21: R_386_PC32	strlen
10002e25:	83 c4 10             	add    esp,0x10
10002e28:	89 c2                	mov    edx,eax
10002e2a:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
10002e2d:	39 c2                	cmp    edx,eax
10002e2f:	76 1c                	jbe    10002e4d <firstRun(bool)+0x4ae>
10002e31:	a1 00 00 00 00       	mov    eax,ds:0x0	10002e32: R_386_32	term
10002e36:	6a 07                	push   0x7
10002e38:	6a 00                	push   0x0
10002e3a:	68 44 9b 00 10       	push   0x10009b44	10002e3b: R_386_32	.text
10002e3f:	50                   	push   eax
10002e40:	e8 fc ff ff ff       	call   10002e41 <firstRun(bool)+0x4a2>	10002e41: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002e45:	83 c4 10             	add    esp,0x10
10002e48:	ff 45 d0             	inc    DWORD PTR [ebp-0x30]
10002e4b:	eb cb                	jmp    10002e18 <firstRun(bool)+0x479>
10002e4d:	a1 00 00 00 00       	mov    eax,ds:0x0	10002e4e: R_386_32	term
10002e52:	83 ec 04             	sub    esp,0x4
10002e55:	6a 14                	push   0x14
10002e57:	6a 18                	push   0x18
10002e59:	50                   	push   eax
10002e5a:	e8 fc ff ff ff       	call   10002e5b <firstRun(bool)+0x4bc>	10002e5b: R_386_PC32	VgaText::setCursor(int, int)
10002e5f:	83 c4 10             	add    esp,0x10
10002e62:	a1 00 00 00 00       	mov    eax,ds:0x0	10002e63: R_386_32	term
10002e67:	83 7d dc 04          	cmp    DWORD PTR [ebp-0x24],0x4
10002e6b:	75 07                	jne    10002e74 <firstRun(bool)+0x4d5>
10002e6d:	ba 46 9b 00 10       	mov    edx,0x10009b46	10002e6e: R_386_32	.text
10002e72:	eb 05                	jmp    10002e79 <firstRun(bool)+0x4da>
10002e74:	ba 5c 9b 00 10       	mov    edx,0x10009b5c	10002e75: R_386_32	.text
10002e79:	6a 0f                	push   0xf
10002e7b:	6a 08                	push   0x8
10002e7d:	52                   	push   edx
10002e7e:	50                   	push   eax
10002e7f:	e8 fc ff ff ff       	call   10002e80 <firstRun(bool)+0x4e1>	10002e80: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002e84:	83 c4 10             	add    esp,0x10
10002e87:	a1 00 00 00 00       	mov    eax,ds:0x0	10002e88: R_386_32	term
10002e8c:	83 ec 04             	sub    esp,0x4
10002e8f:	6a 14                	push   0x14
10002e91:	6a 3c                	push   0x3c
10002e93:	50                   	push   eax
10002e94:	e8 fc ff ff ff       	call   10002e95 <firstRun(bool)+0x4f6>	10002e95: R_386_PC32	VgaText::setCursor(int, int)
10002e99:	83 c4 10             	add    esp,0x10
10002e9c:	83 7d dc 04          	cmp    DWORD PTR [ebp-0x24],0x4
10002ea0:	74 19                	je     10002ebb <firstRun(bool)+0x51c>
10002ea2:	a1 00 00 00 00       	mov    eax,ds:0x0	10002ea3: R_386_32	term
10002ea7:	6a 08                	push   0x8
10002ea9:	6a 0f                	push   0xf
10002eab:	68 73 9b 00 10       	push   0x10009b73	10002eac: R_386_32	.text
10002eb0:	50                   	push   eax
10002eb1:	e8 fc ff ff ff       	call   10002eb2 <firstRun(bool)+0x513>	10002eb2: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002eb6:	83 c4 10             	add    esp,0x10
10002eb9:	eb 17                	jmp    10002ed2 <firstRun(bool)+0x533>
10002ebb:	a1 00 00 00 00       	mov    eax,ds:0x0	10002ebc: R_386_32	term
10002ec0:	6a 01                	push   0x1
10002ec2:	6a 0f                	push   0xf
10002ec4:	68 73 9b 00 10       	push   0x10009b73	10002ec5: R_386_32	.text
10002ec9:	50                   	push   eax
10002eca:	e8 fc ff ff ff       	call   10002ecb <firstRun(bool)+0x52c>	10002ecb: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002ecf:	83 c4 10             	add    esp,0x10
10002ed2:	a1 00 00 00 00       	mov    eax,ds:0x0	10002ed3: R_386_32	term
10002ed7:	83 7d dc 04          	cmp    DWORD PTR [ebp-0x24],0x4
10002edb:	75 07                	jne    10002ee4 <firstRun(bool)+0x545>
10002edd:	ba 7c 9b 00 10       	mov    edx,0x10009b7c	10002ede: R_386_32	.text
10002ee2:	eb 05                	jmp    10002ee9 <firstRun(bool)+0x54a>
10002ee4:	ba 40 9b 00 10       	mov    edx,0x10009b40	10002ee5: R_386_32	.text
10002ee9:	6a 0f                	push   0xf
10002eeb:	6a 00                	push   0x0
10002eed:	52                   	push   edx
10002eee:	50                   	push   eax
10002eef:	e8 fc ff ff ff       	call   10002ef0 <firstRun(bool)+0x551>	10002ef0: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002ef4:	83 c4 10             	add    esp,0x10
10002ef7:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
10002efb:	75 28                	jne    10002f25 <firstRun(bool)+0x586>
10002efd:	8b 1d 00 00 00 00    	mov    ebx,DWORD PTR ds:0x0	10002eff: R_386_32	term
10002f03:	83 ec 0c             	sub    esp,0xc
10002f06:	68 00 00 00 00       	push   0x0	10002f07: R_386_32	currName
10002f0b:	e8 fc ff ff ff       	call   10002f0c <firstRun(bool)+0x56d>	10002f0c: R_386_PC32	strlen
10002f10:	83 c4 10             	add    esp,0x10
10002f13:	83 c0 21             	add    eax,0x21
10002f16:	83 ec 04             	sub    esp,0x4
10002f19:	6a 09                	push   0x9
10002f1b:	50                   	push   eax
10002f1c:	53                   	push   ebx
10002f1d:	e8 fc ff ff ff       	call   10002f1e <firstRun(bool)+0x57f>	10002f1e: R_386_PC32	VgaText::setCursor(int, int)
10002f22:	83 c4 10             	add    esp,0x10
10002f25:	83 7d dc 01          	cmp    DWORD PTR [ebp-0x24],0x1
10002f29:	75 28                	jne    10002f53 <firstRun(bool)+0x5b4>
10002f2b:	8b 1d 00 00 00 00    	mov    ebx,DWORD PTR ds:0x0	10002f2d: R_386_32	term
10002f31:	83 ec 0c             	sub    esp,0xc
10002f34:	68 00 00 00 00       	push   0x0	10002f35: R_386_32	currComp
10002f39:	e8 fc ff ff ff       	call   10002f3a <firstRun(bool)+0x59b>	10002f3a: R_386_PC32	strlen
10002f3e:	83 c4 10             	add    esp,0x10
10002f41:	83 c0 21             	add    eax,0x21
10002f44:	83 ec 04             	sub    esp,0x4
10002f47:	6a 0b                	push   0xb
10002f49:	50                   	push   eax
10002f4a:	53                   	push   ebx
10002f4b:	e8 fc ff ff ff       	call   10002f4c <firstRun(bool)+0x5ad>	10002f4c: R_386_PC32	VgaText::setCursor(int, int)
10002f50:	83 c4 10             	add    esp,0x10
10002f53:	83 7d dc 02          	cmp    DWORD PTR [ebp-0x24],0x2
10002f57:	75 28                	jne    10002f81 <firstRun(bool)+0x5e2>
10002f59:	8b 1d 00 00 00 00    	mov    ebx,DWORD PTR ds:0x0	10002f5b: R_386_32	term
10002f5f:	83 ec 0c             	sub    esp,0xc
10002f62:	68 00 00 00 00       	push   0x0	10002f63: R_386_32	passwbufA
10002f67:	e8 fc ff ff ff       	call   10002f68 <firstRun(bool)+0x5c9>	10002f68: R_386_PC32	strlen
10002f6c:	83 c4 10             	add    esp,0x10
10002f6f:	83 c0 21             	add    eax,0x21
10002f72:	83 ec 04             	sub    esp,0x4
10002f75:	6a 0d                	push   0xd
10002f77:	50                   	push   eax
10002f78:	53                   	push   ebx
10002f79:	e8 fc ff ff ff       	call   10002f7a <firstRun(bool)+0x5db>	10002f7a: R_386_PC32	VgaText::setCursor(int, int)
10002f7e:	83 c4 10             	add    esp,0x10
10002f81:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
10002f85:	75 28                	jne    10002faf <firstRun(bool)+0x610>
10002f87:	8b 1d 00 00 00 00    	mov    ebx,DWORD PTR ds:0x0	10002f89: R_386_32	term
10002f8d:	83 ec 0c             	sub    esp,0xc
10002f90:	68 00 00 00 00       	push   0x0	10002f91: R_386_32	passwbufB
10002f95:	e8 fc ff ff ff       	call   10002f96 <firstRun(bool)+0x5f7>	10002f96: R_386_PC32	strlen
10002f9a:	83 c4 10             	add    esp,0x10
10002f9d:	83 c0 21             	add    eax,0x21
10002fa0:	83 ec 04             	sub    esp,0x4
10002fa3:	6a 0f                	push   0xf
10002fa5:	50                   	push   eax
10002fa6:	53                   	push   ebx
10002fa7:	e8 fc ff ff ff       	call   10002fa8 <firstRun(bool)+0x609>	10002fa8: R_386_PC32	VgaText::setCursor(int, int)
10002fac:	83 c4 10             	add    esp,0x10
10002faf:	83 7d dc 04          	cmp    DWORD PTR [ebp-0x24],0x4
10002fb3:	75 15                	jne    10002fca <firstRun(bool)+0x62b>
10002fb5:	a1 00 00 00 00       	mov    eax,ds:0x0	10002fb6: R_386_32	term
10002fba:	83 ec 04             	sub    esp,0x4
10002fbd:	6a 02                	push   0x2
10002fbf:	6a 00                	push   0x0
10002fc1:	50                   	push   eax
10002fc2:	e8 fc ff ff ff       	call   10002fc3 <firstRun(bool)+0x624>	10002fc3: R_386_PC32	VgaText::setCursor(int, int)
10002fc7:	83 c4 10             	add    esp,0x10
10002fca:	a0 00 00 00 00       	mov    al,ds:0x0	10002fcb: R_386_32	installKey
10002fcf:	84 c0                	test   al,al
10002fd1:	0f 94 c0             	sete   al
10002fd4:	84 c0                	test   al,al
10002fd6:	74 02                	je     10002fda <firstRun(bool)+0x63b>
10002fd8:	eb f0                	jmp    10002fca <firstRun(bool)+0x62b>
10002fda:	a1 00 00 00 00       	mov    eax,ds:0x0	10002fdb: R_386_32	term
10002fdf:	05 82 00 00 00       	add    eax,0x82
10002fe4:	83 ec 04             	sub    esp,0x4
10002fe7:	6a 10                	push   0x10
10002fe9:	6a 00                	push   0x0
10002feb:	50                   	push   eax
10002fec:	e8 fc ff ff ff       	call   10002fed <firstRun(bool)+0x64e>	10002fed: R_386_PC32	memset
10002ff1:	83 c4 10             	add    esp,0x10
10002ff4:	a1 00 00 00 00       	mov    eax,ds:0x0	10002ff5: R_386_32	term
10002ff9:	05 02 01 00 00       	add    eax,0x102
10002ffe:	83 ec 04             	sub    esp,0x4
10003001:	6a 10                	push   0x10
10003003:	6a 00                	push   0x0
10003005:	50                   	push   eax
10003006:	e8 fc ff ff ff       	call   10003007 <firstRun(bool)+0x668>	10003007: R_386_PC32	memset
1000300b:	83 c4 10             	add    esp,0x10
1000300e:	a0 00 00 00 00       	mov    al,ds:0x0	1000300f: R_386_32	installKey
10003013:	3c 09                	cmp    al,0x9
10003015:	74 09                	je     10003020 <firstRun(bool)+0x681>
10003017:	a0 00 00 00 00       	mov    al,ds:0x0	10003018: R_386_32	installKey
1000301c:	3c 0a                	cmp    al,0xa
1000301e:	75 04                	jne    10003024 <firstRun(bool)+0x685>
10003020:	b0 01                	mov    al,0x1
10003022:	eb 02                	jmp    10003026 <firstRun(bool)+0x687>
10003024:	b0 00                	mov    al,0x0
10003026:	84 c0                	test   al,al
10003028:	0f 84 93 00 00 00    	je     100030c1 <firstRun(bool)+0x722>
1000302e:	83 7d dc 04          	cmp    DWORD PTR [ebp-0x24],0x4
10003032:	75 0d                	jne    10003041 <firstRun(bool)+0x6a2>
10003034:	a0 00 00 00 00       	mov    al,ds:0x0	10003035: R_386_32	installKey
10003039:	3c 0a                	cmp    al,0xa
1000303b:	75 04                	jne    10003041 <firstRun(bool)+0x6a2>
1000303d:	b0 01                	mov    al,0x1
1000303f:	eb 02                	jmp    10003043 <firstRun(bool)+0x6a4>
10003041:	b0 00                	mov    al,0x0
10003043:	84 c0                	test   al,al
10003045:	74 55                	je     1000309c <firstRun(bool)+0x6fd>
10003047:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10003049: R_386_32	installKey
1000304e:	83 ec 08             	sub    esp,0x8
10003051:	68 00 00 00 00       	push   0x0	10003052: R_386_32	passwbufB
10003056:	68 00 00 00 00       	push   0x0	10003057: R_386_32	passwbufA
1000305b:	e8 fc ff ff ff       	call   1000305c <firstRun(bool)+0x6bd>	1000305c: R_386_PC32	strcmp
10003060:	83 c4 10             	add    esp,0x10
10003063:	85 c0                	test   eax,eax
10003065:	0f 84 c5 02 00 00    	je     10003330 <firstRun(bool)+0x991>
1000306b:	c7 45 dc 02 00 00 00 	mov    DWORD PTR [ebp-0x24],0x2
10003072:	83 ec 04             	sub    esp,0x4
10003075:	6a 30                	push   0x30
10003077:	6a 00                	push   0x0
10003079:	68 00 00 00 00       	push   0x0	1000307a: R_386_32	passwbufA
1000307e:	e8 fc ff ff ff       	call   1000307f <firstRun(bool)+0x6e0>	1000307f: R_386_PC32	memset
10003083:	83 c4 10             	add    esp,0x10
10003086:	83 ec 04             	sub    esp,0x4
10003089:	6a 30                	push   0x30
1000308b:	6a 00                	push   0x0
1000308d:	68 00 00 00 00       	push   0x0	1000308e: R_386_32	passwbufB
10003092:	e8 fc ff ff ff       	call   10003093 <firstRun(bool)+0x6f4>	10003093: R_386_PC32	memset
10003097:	83 c4 10             	add    esp,0x10
1000309a:	eb 10                	jmp    100030ac <firstRun(bool)+0x70d>
1000309c:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
1000309f:	83 7d dc 05          	cmp    DWORD PTR [ebp-0x24],0x5
100030a3:	75 07                	jne    100030ac <firstRun(bool)+0x70d>
100030a5:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
100030ac:	83 ec 0c             	sub    esp,0xc
100030af:	68 2c 01 00 00       	push   0x12c
100030b4:	e8 fc ff ff ff       	call   100030b5 <firstRun(bool)+0x716>	100030b5: R_386_PC32	milliTenthSleep(unsigned int)
100030b9:	83 c4 10             	add    esp,0x10
100030bc:	e9 63 02 00 00       	jmp    10003324 <firstRun(bool)+0x985>
100030c1:	a0 00 00 00 00       	mov    al,ds:0x0	100030c2: R_386_32	installKey
100030c6:	3c 1f                	cmp    al,0x1f
100030c8:	7e 0d                	jle    100030d7 <firstRun(bool)+0x738>
100030ca:	a0 00 00 00 00       	mov    al,ds:0x0	100030cb: R_386_32	installKey
100030cf:	3c 7f                	cmp    al,0x7f
100030d1:	74 04                	je     100030d7 <firstRun(bool)+0x738>
100030d3:	b0 01                	mov    al,0x1
100030d5:	eb 02                	jmp    100030d9 <firstRun(bool)+0x73a>
100030d7:	b0 00                	mov    al,0x0
100030d9:	84 c0                	test   al,al
100030db:	0f 84 39 01 00 00    	je     1000321a <firstRun(bool)+0x87b>
100030e1:	a0 00 00 00 00       	mov    al,ds:0x0	100030e2: R_386_32	installKey
100030e6:	88 85 c6 fe ff ff    	mov    BYTE PTR [ebp-0x13a],al
100030ec:	c6 85 c7 fe ff ff 00 	mov    BYTE PTR [ebp-0x139],0x0
100030f3:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
100030f7:	75 7e                	jne    10003177 <firstRun(bool)+0x7d8>
100030f9:	83 ec 0c             	sub    esp,0xc
100030fc:	68 00 00 00 00       	push   0x0	100030fd: R_386_32	currName
10003101:	e8 fc ff ff ff       	call   10003102 <firstRun(bool)+0x763>	10003102: R_386_PC32	strlen
10003106:	83 c4 10             	add    esp,0x10
10003109:	83 f8 22             	cmp    eax,0x22
1000310c:	77 69                	ja     10003177 <firstRun(bool)+0x7d8>
1000310e:	a0 00 00 00 00       	mov    al,ds:0x0	1000310f: R_386_32	installKey
10003113:	3c 40                	cmp    al,0x40
10003115:	7e 09                	jle    10003120 <firstRun(bool)+0x781>
10003117:	a0 00 00 00 00       	mov    al,ds:0x0	10003118: R_386_32	installKey
1000311c:	3c 59                	cmp    al,0x59
1000311e:	7f 36                	jg     10003156 <firstRun(bool)+0x7b7>
10003120:	a0 00 00 00 00       	mov    al,ds:0x0	10003121: R_386_32	installKey
10003125:	3c 60                	cmp    al,0x60
10003127:	7e 09                	jle    10003132 <firstRun(bool)+0x793>
10003129:	a0 00 00 00 00       	mov    al,ds:0x0	1000312a: R_386_32	installKey
1000312e:	3c 79                	cmp    al,0x79
10003130:	7f 24                	jg     10003156 <firstRun(bool)+0x7b7>
10003132:	a0 00 00 00 00       	mov    al,ds:0x0	10003133: R_386_32	installKey
10003137:	3c 2f                	cmp    al,0x2f
10003139:	7e 09                	jle    10003144 <firstRun(bool)+0x7a5>
1000313b:	a0 00 00 00 00       	mov    al,ds:0x0	1000313c: R_386_32	installKey
10003140:	3c 38                	cmp    al,0x38
10003142:	7f 12                	jg     10003156 <firstRun(bool)+0x7b7>
10003144:	a0 00 00 00 00       	mov    al,ds:0x0	10003145: R_386_32	installKey
10003149:	3c 5f                	cmp    al,0x5f
1000314b:	74 09                	je     10003156 <firstRun(bool)+0x7b7>
1000314d:	a0 00 00 00 00       	mov    al,ds:0x0	1000314e: R_386_32	installKey
10003152:	3c 20                	cmp    al,0x20
10003154:	75 04                	jne    1000315a <firstRun(bool)+0x7bb>
10003156:	b0 01                	mov    al,0x1
10003158:	eb 02                	jmp    1000315c <firstRun(bool)+0x7bd>
1000315a:	b0 00                	mov    al,0x0
1000315c:	84 c0                	test   al,al
1000315e:	74 17                	je     10003177 <firstRun(bool)+0x7d8>
10003160:	83 ec 08             	sub    esp,0x8
10003163:	8d 85 c6 fe ff ff    	lea    eax,[ebp-0x13a]
10003169:	50                   	push   eax
1000316a:	68 00 00 00 00       	push   0x0	1000316b: R_386_32	currName
1000316f:	e8 fc ff ff ff       	call   10003170 <firstRun(bool)+0x7d1>	10003170: R_386_PC32	strcat
10003174:	83 c4 10             	add    esp,0x10
10003177:	83 7d dc 01          	cmp    DWORD PTR [ebp-0x24],0x1
1000317b:	75 2c                	jne    100031a9 <firstRun(bool)+0x80a>
1000317d:	83 ec 0c             	sub    esp,0xc
10003180:	68 00 00 00 00       	push   0x0	10003181: R_386_32	currComp
10003185:	e8 fc ff ff ff       	call   10003186 <firstRun(bool)+0x7e7>	10003186: R_386_PC32	strlen
1000318a:	83 c4 10             	add    esp,0x10
1000318d:	83 f8 22             	cmp    eax,0x22
10003190:	77 17                	ja     100031a9 <firstRun(bool)+0x80a>
10003192:	83 ec 08             	sub    esp,0x8
10003195:	8d 85 c6 fe ff ff    	lea    eax,[ebp-0x13a]
1000319b:	50                   	push   eax
1000319c:	68 00 00 00 00       	push   0x0	1000319d: R_386_32	currComp
100031a1:	e8 fc ff ff ff       	call   100031a2 <firstRun(bool)+0x803>	100031a2: R_386_PC32	strcat
100031a6:	83 c4 10             	add    esp,0x10
100031a9:	83 7d dc 02          	cmp    DWORD PTR [ebp-0x24],0x2
100031ad:	75 2c                	jne    100031db <firstRun(bool)+0x83c>
100031af:	83 ec 0c             	sub    esp,0xc
100031b2:	68 00 00 00 00       	push   0x0	100031b3: R_386_32	passwbufA
100031b7:	e8 fc ff ff ff       	call   100031b8 <firstRun(bool)+0x819>	100031b8: R_386_PC32	strlen
100031bc:	83 c4 10             	add    esp,0x10
100031bf:	83 f8 22             	cmp    eax,0x22
100031c2:	77 17                	ja     100031db <firstRun(bool)+0x83c>
100031c4:	83 ec 08             	sub    esp,0x8
100031c7:	8d 85 c6 fe ff ff    	lea    eax,[ebp-0x13a]
100031cd:	50                   	push   eax
100031ce:	68 00 00 00 00       	push   0x0	100031cf: R_386_32	passwbufA
100031d3:	e8 fc ff ff ff       	call   100031d4 <firstRun(bool)+0x835>	100031d4: R_386_PC32	strcat
100031d8:	83 c4 10             	add    esp,0x10
100031db:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
100031df:	0f 85 3f 01 00 00    	jne    10003324 <firstRun(bool)+0x985>
100031e5:	83 ec 0c             	sub    esp,0xc
100031e8:	68 00 00 00 00       	push   0x0	100031e9: R_386_32	passwbufB
100031ed:	e8 fc ff ff ff       	call   100031ee <firstRun(bool)+0x84f>	100031ee: R_386_PC32	strlen
100031f2:	83 c4 10             	add    esp,0x10
100031f5:	83 f8 22             	cmp    eax,0x22
100031f8:	0f 87 26 01 00 00    	ja     10003324 <firstRun(bool)+0x985>
100031fe:	83 ec 08             	sub    esp,0x8
10003201:	8d 85 c6 fe ff ff    	lea    eax,[ebp-0x13a]
10003207:	50                   	push   eax
10003208:	68 00 00 00 00       	push   0x0	10003209: R_386_32	passwbufB
1000320d:	e8 fc ff ff ff       	call   1000320e <firstRun(bool)+0x86f>	1000320e: R_386_PC32	strcat
10003212:	83 c4 10             	add    esp,0x10
10003215:	e9 0a 01 00 00       	jmp    10003324 <firstRun(bool)+0x985>
1000321a:	a0 00 00 00 00       	mov    al,ds:0x0	1000321b: R_386_32	installKey
1000321f:	3c 08                	cmp    al,0x8
10003221:	0f 94 c0             	sete   al
10003224:	84 c0                	test   al,al
10003226:	0f 84 ca 00 00 00    	je     100032f6 <firstRun(bool)+0x957>
1000322c:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
10003230:	75 2c                	jne    1000325e <firstRun(bool)+0x8bf>
10003232:	83 ec 0c             	sub    esp,0xc
10003235:	68 00 00 00 00       	push   0x0	10003236: R_386_32	currName
1000323a:	e8 fc ff ff ff       	call   1000323b <firstRun(bool)+0x89c>	1000323b: R_386_PC32	strlen
1000323f:	83 c4 10             	add    esp,0x10
10003242:	85 c0                	test   eax,eax
10003244:	74 18                	je     1000325e <firstRun(bool)+0x8bf>
10003246:	83 ec 0c             	sub    esp,0xc
10003249:	68 00 00 00 00       	push   0x0	1000324a: R_386_32	currName
1000324e:	e8 fc ff ff ff       	call   1000324f <firstRun(bool)+0x8b0>	1000324f: R_386_PC32	strlen
10003253:	83 c4 10             	add    esp,0x10
10003256:	48                   	dec    eax
10003257:	c6 80 00 00 00 00 00 	mov    BYTE PTR [eax+0x0],0x0	10003259: R_386_32	currName
1000325e:	83 7d dc 01          	cmp    DWORD PTR [ebp-0x24],0x1
10003262:	75 2c                	jne    10003290 <firstRun(bool)+0x8f1>
10003264:	83 ec 0c             	sub    esp,0xc
10003267:	68 00 00 00 00       	push   0x0	10003268: R_386_32	currComp
1000326c:	e8 fc ff ff ff       	call   1000326d <firstRun(bool)+0x8ce>	1000326d: R_386_PC32	strlen
10003271:	83 c4 10             	add    esp,0x10
10003274:	85 c0                	test   eax,eax
10003276:	74 18                	je     10003290 <firstRun(bool)+0x8f1>
10003278:	83 ec 0c             	sub    esp,0xc
1000327b:	68 00 00 00 00       	push   0x0	1000327c: R_386_32	currComp
10003280:	e8 fc ff ff ff       	call   10003281 <firstRun(bool)+0x8e2>	10003281: R_386_PC32	strlen
10003285:	83 c4 10             	add    esp,0x10
10003288:	48                   	dec    eax
10003289:	c6 80 00 00 00 00 00 	mov    BYTE PTR [eax+0x0],0x0	1000328b: R_386_32	currComp
10003290:	83 7d dc 02          	cmp    DWORD PTR [ebp-0x24],0x2
10003294:	75 2c                	jne    100032c2 <firstRun(bool)+0x923>
10003296:	83 ec 0c             	sub    esp,0xc
10003299:	68 00 00 00 00       	push   0x0	1000329a: R_386_32	passwbufA
1000329e:	e8 fc ff ff ff       	call   1000329f <firstRun(bool)+0x900>	1000329f: R_386_PC32	strlen
100032a3:	83 c4 10             	add    esp,0x10
100032a6:	85 c0                	test   eax,eax
100032a8:	74 18                	je     100032c2 <firstRun(bool)+0x923>
100032aa:	83 ec 0c             	sub    esp,0xc
100032ad:	68 00 00 00 00       	push   0x0	100032ae: R_386_32	passwbufA
100032b2:	e8 fc ff ff ff       	call   100032b3 <firstRun(bool)+0x914>	100032b3: R_386_PC32	strlen
100032b7:	83 c4 10             	add    esp,0x10
100032ba:	48                   	dec    eax
100032bb:	c6 80 00 00 00 00 00 	mov    BYTE PTR [eax+0x0],0x0	100032bd: R_386_32	passwbufA
100032c2:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
100032c6:	75 5c                	jne    10003324 <firstRun(bool)+0x985>
100032c8:	83 ec 0c             	sub    esp,0xc
100032cb:	68 00 00 00 00       	push   0x0	100032cc: R_386_32	passwbufB
100032d0:	e8 fc ff ff ff       	call   100032d1 <firstRun(bool)+0x932>	100032d1: R_386_PC32	strlen
100032d5:	83 c4 10             	add    esp,0x10
100032d8:	85 c0                	test   eax,eax
100032da:	74 48                	je     10003324 <firstRun(bool)+0x985>
100032dc:	83 ec 0c             	sub    esp,0xc
100032df:	68 00 00 00 00       	push   0x0	100032e0: R_386_32	passwbufB
100032e4:	e8 fc ff ff ff       	call   100032e5 <firstRun(bool)+0x946>	100032e5: R_386_PC32	strlen
100032e9:	83 c4 10             	add    esp,0x10
100032ec:	48                   	dec    eax
100032ed:	c6 80 00 00 00 00 00 	mov    BYTE PTR [eax+0x0],0x0	100032ef: R_386_32	passwbufB
100032f4:	eb 2e                	jmp    10003324 <firstRun(bool)+0x985>
100032f6:	a0 00 00 00 00       	mov    al,ds:0x0	100032f7: R_386_32	installKey
100032fb:	3c 7f                	cmp    al,0x7f
100032fd:	0f 94 c0             	sete   al
10003300:	84 c0                	test   al,al
10003302:	74 20                	je     10003324 <firstRun(bool)+0x985>
10003304:	ff 4d dc             	dec    DWORD PTR [ebp-0x24]
10003307:	83 7d dc ff          	cmp    DWORD PTR [ebp-0x24],0xffffffff
1000330b:	75 07                	jne    10003314 <firstRun(bool)+0x975>
1000330d:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
10003314:	83 ec 0c             	sub    esp,0xc
10003317:	68 2c 01 00 00       	push   0x12c
1000331c:	e8 fc ff ff ff       	call   1000331d <firstRun(bool)+0x97e>	1000331d: R_386_PC32	milliTenthSleep(unsigned int)
10003321:	83 c4 10             	add    esp,0x10
10003324:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10003326: R_386_32	installKey
1000332b:	e9 e7 f8 ff ff       	jmp    10002c17 <firstRun(bool)+0x278>
10003330:	90                   	nop
10003331:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10003333: R_386_32	installKey
10003338:	83 ec 0c             	sub    esp,0xc
1000333b:	68 d0 07 00 00       	push   0x7d0
10003340:	e8 fc ff ff ff       	call   10003341 <firstRun(bool)+0x9a2>	10003341: R_386_PC32	milliTenthSleep(unsigned int)
10003345:	83 c4 10             	add    esp,0x10
10003348:	e8 fc ff ff ff       	call   10003349 <firstRun(bool)+0x9aa>	10003349: R_386_PC32	drawBootScreen()
1000334d:	c7 45 e0 07 00 00 00 	mov    DWORD PTR [ebp-0x20],0x7
10003354:	a1 00 00 00 00       	mov    eax,ds:0x0	10003355: R_386_32	Krnl::computer
10003359:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
1000335f:	83 e0 20             	and    eax,0x20
10003362:	84 c0                	test   al,al
10003364:	75 12                	jne    10003378 <firstRun(bool)+0x9d9>
10003366:	a1 00 00 00 00       	mov    eax,ds:0x0	10003367: R_386_32	Krnl::computer
1000336b:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
10003371:	83 e0 40             	and    eax,0x40
10003374:	84 c0                	test   al,al
10003376:	74 07                	je     1000337f <firstRun(bool)+0x9e0>
10003378:	c7 45 e0 08 00 00 00 	mov    DWORD PTR [ebp-0x20],0x8
1000337f:	a1 00 00 00 00       	mov    eax,ds:0x0	10003380: R_386_32	Krnl::computer
10003384:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
1000338a:	83 e0 80             	and    eax,0xffffff80
1000338d:	84 c0                	test   al,al
1000338f:	74 07                	je     10003398 <firstRun(bool)+0x9f9>
10003391:	c7 45 e0 09 00 00 00 	mov    DWORD PTR [ebp-0x20],0x9
10003398:	a1 00 00 00 00       	mov    eax,ds:0x0	10003399: R_386_32	Krnl::computer
1000339d:	8a 80 6e 01 00 00    	mov    al,BYTE PTR [eax+0x16e]
100033a3:	83 e0 02             	and    eax,0x2
100033a6:	84 c0                	test   al,al
100033a8:	75 12                	jne    100033bc <firstRun(bool)+0xa1d>
100033aa:	a1 00 00 00 00       	mov    eax,ds:0x0	100033ab: R_386_32	Krnl::computer
100033af:	8a 80 6d 01 00 00    	mov    al,BYTE PTR [eax+0x16d]
100033b5:	83 e0 01             	and    eax,0x1
100033b8:	84 c0                	test   al,al
100033ba:	74 07                	je     100033c3 <firstRun(bool)+0xa24>
100033bc:	c7 45 e0 0a 00 00 00 	mov    DWORD PTR [ebp-0x20],0xa
100033c3:	a1 00 00 00 00       	mov    eax,ds:0x0	100033c4: R_386_32	Krnl::computer
100033c8:	8a 80 6d 01 00 00    	mov    al,BYTE PTR [eax+0x16d]
100033ce:	83 e0 20             	and    eax,0x20
100033d1:	84 c0                	test   al,al
100033d3:	74 07                	je     100033dc <firstRun(bool)+0xa3d>
100033d5:	c7 45 e0 0b 00 00 00 	mov    DWORD PTR [ebp-0x20],0xb
100033dc:	a1 00 00 00 00       	mov    eax,ds:0x0	100033dd: R_386_32	Krnl::computer
100033e1:	8a 80 6d 01 00 00    	mov    al,BYTE PTR [eax+0x16d]
100033e7:	83 e0 40             	and    eax,0x40
100033ea:	84 c0                	test   al,al
100033ec:	74 07                	je     100033f5 <firstRun(bool)+0xa56>
100033ee:	c7 45 e0 0c 00 00 00 	mov    DWORD PTR [ebp-0x20],0xc
100033f5:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	100033f7: R_386_32	_bcrypt_errno
100033ff:	83 ec 08             	sub    esp,0x8
10003402:	8d 85 dc fe ff ff    	lea    eax,[ebp-0x124]
10003408:	50                   	push   eax
10003409:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
1000340c:	e8 fc ff ff ff       	call   1000340d <firstRun(bool)+0xa6e>	1000340d: R_386_PC32	bcrypt_gensalt
10003411:	83 c4 10             	add    esp,0x10
10003414:	89 45 b8             	mov    DWORD PTR [ebp-0x48],eax
10003417:	83 7d b8 00          	cmp    DWORD PTR [ebp-0x48],0x0
1000341b:	75 09                	jne    10003426 <firstRun(bool)+0xa87>
1000341d:	a1 00 00 00 00       	mov    eax,ds:0x0	1000341e: R_386_32	_bcrypt_errno
10003422:	85 c0                	test   eax,eax
10003424:	74 5e                	je     10003484 <firstRun(bool)+0xae5>
10003426:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
1000342d:	83 ec 08             	sub    esp,0x8
10003430:	68 80 9b 00 10       	push   0x10009b80	10003431: R_386_32	.text
10003435:	68 00 00 00 00       	push   0x0	10003436: R_386_32	currName
1000343a:	e8 fc ff ff ff       	call   1000343b <firstRun(bool)+0xa9c>	1000343b: R_386_PC32	strcpy
1000343f:	83 c4 10             	add    esp,0x10
10003442:	83 ec 08             	sub    esp,0x8
10003445:	68 8f 9b 00 10       	push   0x10009b8f	10003446: R_386_32	.text
1000344a:	68 00 00 00 00       	push   0x0	1000344b: R_386_32	currComp
1000344f:	e8 fc ff ff ff       	call   10003450 <firstRun(bool)+0xab1>	10003450: R_386_PC32	strcpy
10003454:	83 c4 10             	add    esp,0x10
10003457:	83 ec 04             	sub    esp,0x4
1000345a:	6a 50                	push   0x50
1000345c:	6a 00                	push   0x0
1000345e:	68 00 00 00 00       	push   0x0	1000345f: R_386_32	passwbufA
10003463:	e8 fc ff ff ff       	call   10003464 <firstRun(bool)+0xac5>	10003464: R_386_PC32	memset
10003468:	83 c4 10             	add    esp,0x10
1000346b:	83 ec 04             	sub    esp,0x4
1000346e:	6a 50                	push   0x50
10003470:	6a 00                	push   0x0
10003472:	68 00 00 00 00       	push   0x0	10003473: R_386_32	passwbufB
10003477:	e8 fc ff ff ff       	call   10003478 <firstRun(bool)+0xad9>	10003478: R_386_PC32	memset
1000347c:	83 c4 10             	add    esp,0x10
1000347f:	e9 3b f6 ff ff       	jmp    10002abf <firstRun(bool)+0x120>
10003484:	83 ec 08             	sub    esp,0x8
10003487:	8d 85 dc fe ff ff    	lea    eax,[ebp-0x124]
1000348d:	50                   	push   eax
1000348e:	68 00 00 00 00       	push   0x0	1000348f: R_386_32	passwsalt
10003493:	e8 fc ff ff ff       	call   10003494 <firstRun(bool)+0xaf5>	10003494: R_386_PC32	strcpy
10003498:	83 c4 10             	add    esp,0x10
1000349b:	83 ec 04             	sub    esp,0x4
1000349e:	68 00 00 00 00       	push   0x0	1000349f: R_386_32	passwhash
100034a3:	8d 85 dc fe ff ff    	lea    eax,[ebp-0x124]
100034a9:	50                   	push   eax
100034aa:	68 00 00 00 00       	push   0x0	100034ab: R_386_32	passwbufA
100034af:	e8 fc ff ff ff       	call   100034b0 <firstRun(bool)+0xb11>	100034b0: R_386_PC32	bcrypt_hashpw
100034b4:	83 c4 10             	add    esp,0x10
100034b7:	89 45 b8             	mov    DWORD PTR [ebp-0x48],eax
100034ba:	83 7d b8 00          	cmp    DWORD PTR [ebp-0x48],0x0
100034be:	75 09                	jne    100034c9 <firstRun(bool)+0xb2a>
100034c0:	a1 00 00 00 00       	mov    eax,ds:0x0	100034c1: R_386_32	_bcrypt_errno
100034c5:	85 c0                	test   eax,eax
100034c7:	74 5e                	je     10003527 <firstRun(bool)+0xb88>
100034c9:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
100034d0:	83 ec 08             	sub    esp,0x8
100034d3:	68 80 9b 00 10       	push   0x10009b80	100034d4: R_386_32	.text
100034d8:	68 00 00 00 00       	push   0x0	100034d9: R_386_32	currName
100034dd:	e8 fc ff ff ff       	call   100034de <firstRun(bool)+0xb3f>	100034de: R_386_PC32	strcpy
100034e2:	83 c4 10             	add    esp,0x10
100034e5:	83 ec 08             	sub    esp,0x8
100034e8:	68 a1 9b 00 10       	push   0x10009ba1	100034e9: R_386_32	.text
100034ed:	68 00 00 00 00       	push   0x0	100034ee: R_386_32	currComp
100034f2:	e8 fc ff ff ff       	call   100034f3 <firstRun(bool)+0xb54>	100034f3: R_386_PC32	strcpy
100034f7:	83 c4 10             	add    esp,0x10
100034fa:	83 ec 04             	sub    esp,0x4
100034fd:	6a 50                	push   0x50
100034ff:	6a 00                	push   0x0
10003501:	68 00 00 00 00       	push   0x0	10003502: R_386_32	passwbufA
10003506:	e8 fc ff ff ff       	call   10003507 <firstRun(bool)+0xb68>	10003507: R_386_PC32	memset
1000350b:	83 c4 10             	add    esp,0x10
1000350e:	83 ec 04             	sub    esp,0x4
10003511:	6a 50                	push   0x50
10003513:	6a 00                	push   0x0
10003515:	68 00 00 00 00       	push   0x0	10003516: R_386_32	passwbufB
1000351a:	e8 fc ff ff ff       	call   1000351b <firstRun(bool)+0xb7c>	1000351b: R_386_PC32	memset
1000351f:	83 c4 10             	add    esp,0x10
10003522:	e9 98 f5 ff ff       	jmp    10002abf <firstRun(bool)+0x120>
10003527:	83 ec 04             	sub    esp,0x4
1000352a:	6a 50                	push   0x50
1000352c:	6a 00                	push   0x0
1000352e:	68 00 00 00 00       	push   0x0	1000352f: R_386_32	passwbufA
10003533:	e8 fc ff ff ff       	call   10003534 <firstRun(bool)+0xb95>	10003534: R_386_PC32	memset
10003538:	83 c4 10             	add    esp,0x10
1000353b:	83 ec 04             	sub    esp,0x4
1000353e:	6a 50                	push   0x50
10003540:	6a 00                	push   0x0
10003542:	68 00 00 00 00       	push   0x0	10003543: R_386_32	passwbufB
10003547:	e8 fc ff ff ff       	call   10003548 <firstRun(bool)+0xba9>	10003548: R_386_PC32	memset
1000354c:	83 c4 10             	add    esp,0x10
1000354f:	83 ec 0c             	sub    esp,0xc
10003552:	68 d0 07 00 00       	push   0x7d0
10003557:	e8 fc ff ff ff       	call   10003558 <firstRun(bool)+0xbb9>	10003558: R_386_PC32	milliTenthSleep(unsigned int)
1000355c:	83 c4 10             	add    esp,0x10
1000355f:	eb 01                	jmp    10003562 <firstRun(bool)+0xbc3>
10003561:	90                   	nop
10003562:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10003564: R_386_32	installKey
10003569:	e8 fc ff ff ff       	call   1000356a <firstRun(bool)+0xbcb>	1000356a: R_386_PC32	drawBootScreen()
1000356e:	83 ec 0c             	sub    esp,0xc
10003571:	68 b3 9b 00 10       	push   0x10009bb3	10003572: R_386_32	.text
10003576:	6a 0d                	push   0xd
10003578:	6a 32                	push   0x32
1000357a:	6a 02                	push   0x2
1000357c:	6a 16                	push   0x16
1000357e:	e8 fc ff ff ff       	call   1000357f <firstRun(bool)+0xbe0>	1000357f: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
10003583:	83 c4 20             	add    esp,0x20
10003586:	a1 00 00 00 00       	mov    eax,ds:0x0	10003587: R_386_32	Krnl::computer
1000358b:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
10003591:	a1 00 00 00 00       	mov    eax,ds:0x0	10003592: R_386_32	Krnl::computer
10003596:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
1000359c:	8b 00                	mov    eax,DWORD PTR [eax]
1000359e:	83 c0 28             	add    eax,0x28
100035a1:	8b 00                	mov    eax,DWORD PTR [eax]
100035a3:	8d 95 98 fe ff ff    	lea    edx,[ebp-0x168]
100035a9:	83 ec 08             	sub    esp,0x8
100035ac:	51                   	push   ecx
100035ad:	52                   	push   edx
100035ae:	ff d0                	call   eax
100035b0:	83 c4 0c             	add    esp,0xc
100035b3:	8b 85 98 fe ff ff    	mov    eax,DWORD PTR [ebp-0x168]
100035b9:	8b 95 9c fe ff ff    	mov    edx,DWORD PTR [ebp-0x164]
100035bf:	89 85 d4 fe ff ff    	mov    DWORD PTR [ebp-0x12c],eax
100035c5:	89 95 d8 fe ff ff    	mov    DWORD PTR [ebp-0x128],edx
100035cb:	83 ec 08             	sub    esp,0x8
100035ce:	68 c1 9b 00 10       	push   0x10009bc1	100035cf: R_386_32	.text
100035d3:	8d 85 40 ff ff ff    	lea    eax,[ebp-0xc0]
100035d9:	50                   	push   eax
100035da:	e8 fc ff ff ff       	call   100035db <firstRun(bool)+0xc3c>	100035db: R_386_PC32	strcpy
100035df:	83 c4 10             	add    esp,0x10
100035e2:	8a 85 d4 fe ff ff    	mov    al,BYTE PTR [ebp-0x12c]
100035e8:	0f b6 d0             	movzx  edx,al
100035eb:	89 d0                	mov    eax,edx
100035ed:	c1 e0 02             	shl    eax,0x2
100035f0:	01 d0                	add    eax,edx
100035f2:	c1 e0 03             	shl    eax,0x3
100035f5:	01 d0                	add    eax,edx
100035f7:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
100035fe:	01 d0                	add    eax,edx
10003600:	66 c1 e8 08          	shr    ax,0x8
10003604:	c0 e8 03             	shr    al,0x3
10003607:	83 c0 30             	add    eax,0x30
1000360a:	88 85 40 ff ff ff    	mov    BYTE PTR [ebp-0xc0],al
10003610:	8a 8d d4 fe ff ff    	mov    cl,BYTE PTR [ebp-0x12c]
10003616:	0f b6 d1             	movzx  edx,cl
10003619:	89 d0                	mov    eax,edx
1000361b:	c1 e0 02             	shl    eax,0x2
1000361e:	01 d0                	add    eax,edx
10003620:	c1 e0 03             	shl    eax,0x3
10003623:	01 d0                	add    eax,edx
10003625:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
1000362c:	01 d0                	add    eax,edx
1000362e:	66 c1 e8 08          	shr    ax,0x8
10003632:	88 c2                	mov    dl,al
10003634:	c0 ea 03             	shr    dl,0x3
10003637:	88 d0                	mov    al,dl
10003639:	c1 e0 02             	shl    eax,0x2
1000363c:	01 d0                	add    eax,edx
1000363e:	d1 e0                	shl    eax,1
10003640:	29 c1                	sub    ecx,eax
10003642:	88 ca                	mov    dl,cl
10003644:	8d 42 30             	lea    eax,[edx+0x30]
10003647:	88 85 41 ff ff ff    	mov    BYTE PTR [ebp-0xbf],al
1000364d:	8a 85 d5 fe ff ff    	mov    al,BYTE PTR [ebp-0x12b]
10003653:	0f b6 c8             	movzx  ecx,al
10003656:	b8 67 66 66 66       	mov    eax,0x66666667
1000365b:	f7 e9                	imul   ecx
1000365d:	c1 fa 02             	sar    edx,0x2
10003660:	89 c8                	mov    eax,ecx
10003662:	c1 f8 1f             	sar    eax,0x1f
10003665:	29 c2                	sub    edx,eax
10003667:	89 d0                	mov    eax,edx
10003669:	83 c0 30             	add    eax,0x30
1000366c:	88 85 43 ff ff ff    	mov    BYTE PTR [ebp-0xbd],al
10003672:	8a 85 d5 fe ff ff    	mov    al,BYTE PTR [ebp-0x12b]
10003678:	0f b6 c8             	movzx  ecx,al
1000367b:	b8 67 66 66 66       	mov    eax,0x66666667
10003680:	f7 e9                	imul   ecx
10003682:	c1 fa 02             	sar    edx,0x2
10003685:	89 c8                	mov    eax,ecx
10003687:	c1 f8 1f             	sar    eax,0x1f
1000368a:	29 c2                	sub    edx,eax
1000368c:	89 d0                	mov    eax,edx
1000368e:	c1 e0 02             	shl    eax,0x2
10003691:	01 d0                	add    eax,edx
10003693:	01 c0                	add    eax,eax
10003695:	29 c1                	sub    ecx,eax
10003697:	89 ca                	mov    edx,ecx
10003699:	88 d0                	mov    al,dl
1000369b:	83 c0 30             	add    eax,0x30
1000369e:	88 85 44 ff ff ff    	mov    BYTE PTR [ebp-0xbc],al
100036a4:	66 8b 85 d6 fe ff ff 	mov    ax,WORD PTR [ebp-0x12a]
100036ab:	0f b7 c8             	movzx  ecx,ax
100036ae:	b8 d3 4d 62 10       	mov    eax,0x10624dd3
100036b3:	f7 e9                	imul   ecx
100036b5:	c1 fa 06             	sar    edx,0x6
100036b8:	89 c8                	mov    eax,ecx
100036ba:	c1 f8 1f             	sar    eax,0x1f
100036bd:	29 c2                	sub    edx,eax
100036bf:	89 d0                	mov    eax,edx
100036c1:	b9 0a 00 00 00       	mov    ecx,0xa
100036c6:	99                   	cdq    
100036c7:	f7 f9                	idiv   ecx
100036c9:	89 d0                	mov    eax,edx
100036cb:	83 c0 30             	add    eax,0x30
100036ce:	88 85 46 ff ff ff    	mov    BYTE PTR [ebp-0xba],al
100036d4:	66 8b 85 d6 fe ff ff 	mov    ax,WORD PTR [ebp-0x12a]
100036db:	0f b7 c8             	movzx  ecx,ax
100036de:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
100036e3:	f7 e9                	imul   ecx
100036e5:	c1 fa 05             	sar    edx,0x5
100036e8:	89 c8                	mov    eax,ecx
100036ea:	c1 f8 1f             	sar    eax,0x1f
100036ed:	29 c2                	sub    edx,eax
100036ef:	89 d0                	mov    eax,edx
100036f1:	b9 0a 00 00 00       	mov    ecx,0xa
100036f6:	99                   	cdq    
100036f7:	f7 f9                	idiv   ecx
100036f9:	89 d0                	mov    eax,edx
100036fb:	83 c0 30             	add    eax,0x30
100036fe:	88 85 47 ff ff ff    	mov    BYTE PTR [ebp-0xb9],al
10003704:	66 8b 85 d6 fe ff ff 	mov    ax,WORD PTR [ebp-0x12a]
1000370b:	0f b7 c8             	movzx  ecx,ax
1000370e:	b8 67 66 66 66       	mov    eax,0x66666667
10003713:	f7 e9                	imul   ecx
10003715:	c1 fa 02             	sar    edx,0x2
10003718:	89 c8                	mov    eax,ecx
1000371a:	c1 f8 1f             	sar    eax,0x1f
1000371d:	89 d1                	mov    ecx,edx
1000371f:	29 c1                	sub    ecx,eax
10003721:	b8 67 66 66 66       	mov    eax,0x66666667
10003726:	f7 e9                	imul   ecx
10003728:	c1 fa 02             	sar    edx,0x2
1000372b:	89 c8                	mov    eax,ecx
1000372d:	c1 f8 1f             	sar    eax,0x1f
10003730:	29 c2                	sub    edx,eax
10003732:	89 d0                	mov    eax,edx
10003734:	c1 e0 02             	shl    eax,0x2
10003737:	01 d0                	add    eax,edx
10003739:	01 c0                	add    eax,eax
1000373b:	29 c1                	sub    ecx,eax
1000373d:	89 ca                	mov    edx,ecx
1000373f:	88 d0                	mov    al,dl
10003741:	83 c0 30             	add    eax,0x30
10003744:	88 85 48 ff ff ff    	mov    BYTE PTR [ebp-0xb8],al
1000374a:	66 8b 85 d6 fe ff ff 	mov    ax,WORD PTR [ebp-0x12a]
10003751:	0f b7 c0             	movzx  eax,ax
10003754:	b9 0a 00 00 00       	mov    ecx,0xa
10003759:	99                   	cdq    
1000375a:	f7 f9                	idiv   ecx
1000375c:	89 d0                	mov    eax,edx
1000375e:	83 c0 30             	add    eax,0x30
10003761:	88 85 49 ff ff ff    	mov    BYTE PTR [ebp-0xb7],al
10003767:	8a 85 d8 fe ff ff    	mov    al,BYTE PTR [ebp-0x128]
1000376d:	0f b6 d0             	movzx  edx,al
10003770:	89 d0                	mov    eax,edx
10003772:	c1 e0 02             	shl    eax,0x2
10003775:	01 d0                	add    eax,edx
10003777:	c1 e0 03             	shl    eax,0x3
1000377a:	01 d0                	add    eax,edx
1000377c:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10003783:	01 d0                	add    eax,edx
10003785:	66 c1 e8 08          	shr    ax,0x8
10003789:	c0 e8 03             	shr    al,0x3
1000378c:	83 c0 30             	add    eax,0x30
1000378f:	88 85 4b ff ff ff    	mov    BYTE PTR [ebp-0xb5],al
10003795:	8a 8d d8 fe ff ff    	mov    cl,BYTE PTR [ebp-0x128]
1000379b:	0f b6 d1             	movzx  edx,cl
1000379e:	89 d0                	mov    eax,edx
100037a0:	c1 e0 02             	shl    eax,0x2
100037a3:	01 d0                	add    eax,edx
100037a5:	c1 e0 03             	shl    eax,0x3
100037a8:	01 d0                	add    eax,edx
100037aa:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
100037b1:	01 d0                	add    eax,edx
100037b3:	66 c1 e8 08          	shr    ax,0x8
100037b7:	88 c2                	mov    dl,al
100037b9:	c0 ea 03             	shr    dl,0x3
100037bc:	88 d0                	mov    al,dl
100037be:	c1 e0 02             	shl    eax,0x2
100037c1:	01 d0                	add    eax,edx
100037c3:	d1 e0                	shl    eax,1
100037c5:	29 c1                	sub    ecx,eax
100037c7:	88 ca                	mov    dl,cl
100037c9:	8d 42 30             	lea    eax,[edx+0x30]
100037cc:	88 85 4c ff ff ff    	mov    BYTE PTR [ebp-0xb4],al
100037d2:	8a 85 d9 fe ff ff    	mov    al,BYTE PTR [ebp-0x127]
100037d8:	0f b6 d0             	movzx  edx,al
100037db:	89 d0                	mov    eax,edx
100037dd:	c1 e0 02             	shl    eax,0x2
100037e0:	01 d0                	add    eax,edx
100037e2:	c1 e0 03             	shl    eax,0x3
100037e5:	01 d0                	add    eax,edx
100037e7:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
100037ee:	01 d0                	add    eax,edx
100037f0:	66 c1 e8 08          	shr    ax,0x8
100037f4:	c0 e8 03             	shr    al,0x3
100037f7:	83 c0 30             	add    eax,0x30
100037fa:	88 85 4e ff ff ff    	mov    BYTE PTR [ebp-0xb2],al
10003800:	8a 8d d9 fe ff ff    	mov    cl,BYTE PTR [ebp-0x127]
10003806:	0f b6 d1             	movzx  edx,cl
10003809:	89 d0                	mov    eax,edx
1000380b:	c1 e0 02             	shl    eax,0x2
1000380e:	01 d0                	add    eax,edx
10003810:	c1 e0 03             	shl    eax,0x3
10003813:	01 d0                	add    eax,edx
10003815:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
1000381c:	01 d0                	add    eax,edx
1000381e:	66 c1 e8 08          	shr    ax,0x8
10003822:	88 c2                	mov    dl,al
10003824:	c0 ea 03             	shr    dl,0x3
10003827:	88 d0                	mov    al,dl
10003829:	c1 e0 02             	shl    eax,0x2
1000382c:	01 d0                	add    eax,edx
1000382e:	d1 e0                	shl    eax,1
10003830:	29 c1                	sub    ecx,eax
10003832:	88 ca                	mov    dl,cl
10003834:	8d 42 30             	lea    eax,[edx+0x30]
10003837:	88 85 4f ff ff ff    	mov    BYTE PTR [ebp-0xb1],al
1000383d:	8a 85 da fe ff ff    	mov    al,BYTE PTR [ebp-0x126]
10003843:	0f b6 d0             	movzx  edx,al
10003846:	89 d0                	mov    eax,edx
10003848:	c1 e0 02             	shl    eax,0x2
1000384b:	01 d0                	add    eax,edx
1000384d:	c1 e0 03             	shl    eax,0x3
10003850:	01 d0                	add    eax,edx
10003852:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10003859:	01 d0                	add    eax,edx
1000385b:	66 c1 e8 08          	shr    ax,0x8
1000385f:	c0 e8 03             	shr    al,0x3
10003862:	83 c0 30             	add    eax,0x30
10003865:	88 85 51 ff ff ff    	mov    BYTE PTR [ebp-0xaf],al
1000386b:	8a 8d da fe ff ff    	mov    cl,BYTE PTR [ebp-0x126]
10003871:	0f b6 d1             	movzx  edx,cl
10003874:	89 d0                	mov    eax,edx
10003876:	c1 e0 02             	shl    eax,0x2
10003879:	01 d0                	add    eax,edx
1000387b:	c1 e0 03             	shl    eax,0x3
1000387e:	01 d0                	add    eax,edx
10003880:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10003887:	01 d0                	add    eax,edx
10003889:	66 c1 e8 08          	shr    ax,0x8
1000388d:	88 c2                	mov    dl,al
1000388f:	c0 ea 03             	shr    dl,0x3
10003892:	88 d0                	mov    al,dl
10003894:	c1 e0 02             	shl    eax,0x2
10003897:	01 d0                	add    eax,edx
10003899:	d1 e0                	shl    eax,1
1000389b:	29 c1                	sub    ecx,eax
1000389d:	88 ca                	mov    dl,cl
1000389f:	8d 42 30             	lea    eax,[edx+0x30]
100038a2:	88 85 52 ff ff ff    	mov    BYTE PTR [ebp-0xae],al
100038a8:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
100038af:	a1 00 00 00 00       	mov    eax,ds:0x0	100038b0: R_386_32	term
100038b4:	83 ec 04             	sub    esp,0x4
100038b7:	6a 05                	push   0x5
100038b9:	6a 18                	push   0x18
100038bb:	50                   	push   eax
100038bc:	e8 fc ff ff ff       	call   100038bd <firstRun(bool)+0xf1e>	100038bd: R_386_PC32	VgaText::setCursor(int, int)
100038c1:	83 c4 10             	add    esp,0x10
100038c4:	a1 00 00 00 00       	mov    eax,ds:0x0	100038c5: R_386_32	term
100038c9:	83 ec 08             	sub    esp,0x8
100038cc:	68 d8 9b 00 10       	push   0x10009bd8	100038cd: R_386_32	.text
100038d1:	50                   	push   eax
100038d2:	e8 fc ff ff ff       	call   100038d3 <firstRun(bool)+0xf34>	100038d3: R_386_PC32	VgaText::puts(char const*)
100038d7:	83 c4 10             	add    esp,0x10
100038da:	a1 00 00 00 00       	mov    eax,ds:0x0	100038db: R_386_32	term
100038df:	83 ec 04             	sub    esp,0x4
100038e2:	6a 06                	push   0x6
100038e4:	6a 18                	push   0x18
100038e6:	50                   	push   eax
100038e7:	e8 fc ff ff ff       	call   100038e8 <firstRun(bool)+0xf49>	100038e8: R_386_PC32	VgaText::setCursor(int, int)
100038ec:	83 c4 10             	add    esp,0x10
100038ef:	a1 00 00 00 00       	mov    eax,ds:0x0	100038f0: R_386_32	term
100038f4:	83 ec 08             	sub    esp,0x8
100038f7:	68 00 9c 00 10       	push   0x10009c00	100038f8: R_386_32	.text
100038fc:	50                   	push   eax
100038fd:	e8 fc ff ff ff       	call   100038fe <firstRun(bool)+0xf5f>	100038fe: R_386_PC32	VgaText::puts(char const*)
10003902:	83 c4 10             	add    esp,0x10
10003905:	a1 00 00 00 00       	mov    eax,ds:0x0	10003906: R_386_32	term
1000390a:	83 ec 04             	sub    esp,0x4
1000390d:	6a 09                	push   0x9
1000390f:	6a 1a                	push   0x1a
10003911:	50                   	push   eax
10003912:	e8 fc ff ff ff       	call   10003913 <firstRun(bool)+0xf74>	10003913: R_386_PC32	VgaText::setCursor(int, int)
10003917:	83 c4 10             	add    esp,0x10
1000391a:	a1 00 00 00 00       	mov    eax,ds:0x0	1000391b: R_386_32	term
1000391f:	6a 0f                	push   0xf
10003921:	6a 07                	push   0x7
10003923:	68 16 9c 00 10       	push   0x10009c16	10003924: R_386_32	.text
10003928:	50                   	push   eax
10003929:	e8 fc ff ff ff       	call   1000392a <firstRun(bool)+0xf8b>	1000392a: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
1000392e:	83 c4 10             	add    esp,0x10
10003931:	a1 00 00 00 00       	mov    eax,ds:0x0	10003932: R_386_32	term
10003936:	83 ec 04             	sub    esp,0x4
10003939:	6a 18                	push   0x18
1000393b:	6a 11                	push   0x11
1000393d:	50                   	push   eax
1000393e:	e8 fc ff ff ff       	call   1000393f <firstRun(bool)+0xfa0>	1000393f: R_386_PC32	VgaText::setCursor(int, int)
10003943:	83 c4 10             	add    esp,0x10
10003946:	a1 00 00 00 00       	mov    eax,ds:0x0	10003947: R_386_32	term
1000394b:	6a 0b                	push   0xb
1000394d:	6a 03                	push   0x3
1000394f:	68 2a 9c 00 10       	push   0x10009c2a	10003950: R_386_32	.text
10003954:	50                   	push   eax
10003955:	e8 fc ff ff ff       	call   10003956 <firstRun(bool)+0xfb7>	10003956: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
1000395a:	83 c4 10             	add    esp,0x10
1000395d:	a1 00 00 00 00       	mov    eax,ds:0x0	1000395e: R_386_32	term
10003962:	83 ec 04             	sub    esp,0x4
10003965:	6a 08                	push   0x8
10003967:	6a 1a                	push   0x1a
10003969:	50                   	push   eax
1000396a:	e8 fc ff ff ff       	call   1000396b <firstRun(bool)+0xfcc>	1000396b: R_386_PC32	VgaText::setCursor(int, int)
1000396f:	83 c4 10             	add    esp,0x10
10003972:	a1 00 00 00 00       	mov    eax,ds:0x0	10003973: R_386_32	term
10003977:	83 ec 08             	sub    esp,0x8
1000397a:	8d 95 40 ff ff ff    	lea    edx,[ebp-0xc0]
10003980:	52                   	push   edx
10003981:	50                   	push   eax
10003982:	e8 fc ff ff ff       	call   10003983 <firstRun(bool)+0xfe4>	10003983: R_386_PC32	VgaText::puts(char const*)
10003987:	83 c4 10             	add    esp,0x10
1000398a:	a1 00 00 00 00       	mov    eax,ds:0x0	1000398b: R_386_32	term
1000398f:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10003992:	83 c2 1a             	add    edx,0x1a
10003995:	83 ec 04             	sub    esp,0x4
10003998:	6a 08                	push   0x8
1000399a:	52                   	push   edx
1000399b:	50                   	push   eax
1000399c:	e8 fc ff ff ff       	call   1000399d <firstRun(bool)+0xffe>	1000399d: R_386_PC32	VgaText::setCursor(int, int)
100039a1:	83 c4 10             	add    esp,0x10
100039a4:	a1 00 00 00 00       	mov    eax,ds:0x0	100039a5: R_386_32	term
100039a9:	8d 8d 40 ff ff ff    	lea    ecx,[ebp-0xc0]
100039af:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
100039b2:	01 ca                	add    edx,ecx
100039b4:	8a 12                	mov    dl,BYTE PTR [edx]
100039b6:	0f be d2             	movsx  edx,dl
100039b9:	6a 00                	push   0x0
100039bb:	6a 0f                	push   0xf
100039bd:	52                   	push   edx
100039be:	50                   	push   eax
100039bf:	e8 fc ff ff ff       	call   100039c0 <firstRun(bool)+0x1021>	100039c0: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
100039c4:	83 c4 10             	add    esp,0x10
100039c7:	8a 85 4b ff ff ff    	mov    al,BYTE PTR [ebp-0xb5]
100039cd:	0f be c0             	movsx  eax,al
100039d0:	8d 50 d0             	lea    edx,[eax-0x30]
100039d3:	89 d0                	mov    eax,edx
100039d5:	c1 e0 02             	shl    eax,0x2
100039d8:	01 d0                	add    eax,edx
100039da:	01 c0                	add    eax,eax
100039dc:	89 c2                	mov    edx,eax
100039de:	8a 85 4c ff ff ff    	mov    al,BYTE PTR [ebp-0xb4]
100039e4:	0f be c0             	movsx  eax,al
100039e7:	83 e8 30             	sub    eax,0x30
100039ea:	01 d0                	add    eax,edx
100039ec:	89 45 b4             	mov    DWORD PTR [ebp-0x4c],eax
100039ef:	8b 45 b4             	mov    eax,DWORD PTR [ebp-0x4c]
100039f2:	b9 0c 00 00 00       	mov    ecx,0xc
100039f7:	99                   	cdq    
100039f8:	f7 f9                	idiv   ecx
100039fa:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
100039fd:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
10003a01:	75 07                	jne    10003a0a <firstRun(bool)+0x106b>
10003a03:	c7 45 cc 0c 00 00 00 	mov    DWORD PTR [ebp-0x34],0xc
10003a0a:	8a 85 4e ff ff ff    	mov    al,BYTE PTR [ebp-0xb2]
10003a10:	0f be c0             	movsx  eax,al
10003a13:	8d 50 d0             	lea    edx,[eax-0x30]
10003a16:	89 d0                	mov    eax,edx
10003a18:	c1 e0 02             	shl    eax,0x2
10003a1b:	01 d0                	add    eax,edx
10003a1d:	01 c0                	add    eax,eax
10003a1f:	89 c2                	mov    edx,eax
10003a21:	8a 85 4f ff ff ff    	mov    al,BYTE PTR [ebp-0xb1]
10003a27:	0f be c0             	movsx  eax,al
10003a2a:	83 e8 30             	sub    eax,0x30
10003a2d:	01 d0                	add    eax,edx
10003a2f:	89 45 b0             	mov    DWORD PTR [ebp-0x50],eax
10003a32:	83 ec 04             	sub    esp,0x4
10003a35:	6a 10                	push   0x10
10003a37:	6a 00                	push   0x0
10003a39:	8d 85 b6 fe ff ff    	lea    eax,[ebp-0x14a]
10003a3f:	50                   	push   eax
10003a40:	e8 fc ff ff ff       	call   10003a41 <firstRun(bool)+0x10a2>	10003a41: R_386_PC32	memset
10003a45:	83 c4 10             	add    esp,0x10
10003a48:	c7 45 ac 00 00 00 00 	mov    DWORD PTR [ebp-0x54],0x0
10003a4f:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
10003a52:	8d 50 01             	lea    edx,[eax+0x1]
10003a55:	89 55 ac             	mov    DWORD PTR [ebp-0x54],edx
10003a58:	c6 84 05 b6 fe ff ff 28 	mov    BYTE PTR [ebp+eax*1-0x14a],0x28
10003a60:	8b 4d cc             	mov    ecx,DWORD PTR [ebp-0x34]
10003a63:	b8 67 66 66 66       	mov    eax,0x66666667
10003a68:	f7 e9                	imul   ecx
10003a6a:	c1 fa 02             	sar    edx,0x2
10003a6d:	89 c8                	mov    eax,ecx
10003a6f:	c1 f8 1f             	sar    eax,0x1f
10003a72:	29 c2                	sub    edx,eax
10003a74:	89 d0                	mov    eax,edx
10003a76:	8d 48 30             	lea    ecx,[eax+0x30]
10003a79:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
10003a7c:	8d 50 01             	lea    edx,[eax+0x1]
10003a7f:	89 55 ac             	mov    DWORD PTR [ebp-0x54],edx
10003a82:	88 ca                	mov    dl,cl
10003a84:	88 94 05 b6 fe ff ff 	mov    BYTE PTR [ebp+eax*1-0x14a],dl
10003a8b:	8b 4d cc             	mov    ecx,DWORD PTR [ebp-0x34]
10003a8e:	b8 67 66 66 66       	mov    eax,0x66666667
10003a93:	f7 e9                	imul   ecx
10003a95:	c1 fa 02             	sar    edx,0x2
10003a98:	89 c8                	mov    eax,ecx
10003a9a:	c1 f8 1f             	sar    eax,0x1f
10003a9d:	29 c2                	sub    edx,eax
10003a9f:	89 d0                	mov    eax,edx
10003aa1:	c1 e0 02             	shl    eax,0x2
10003aa4:	01 d0                	add    eax,edx
10003aa6:	01 c0                	add    eax,eax
10003aa8:	29 c1                	sub    ecx,eax
10003aaa:	89 ca                	mov    edx,ecx
10003aac:	88 d0                	mov    al,dl
10003aae:	8d 48 30             	lea    ecx,[eax+0x30]
10003ab1:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
10003ab4:	8d 50 01             	lea    edx,[eax+0x1]
10003ab7:	89 55 ac             	mov    DWORD PTR [ebp-0x54],edx
10003aba:	88 ca                	mov    dl,cl
10003abc:	88 94 05 b6 fe ff ff 	mov    BYTE PTR [ebp+eax*1-0x14a],dl
10003ac3:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
10003ac6:	8d 50 01             	lea    edx,[eax+0x1]
10003ac9:	89 55 ac             	mov    DWORD PTR [ebp-0x54],edx
10003acc:	c6 84 05 b6 fe ff ff 3a 	mov    BYTE PTR [ebp+eax*1-0x14a],0x3a
10003ad4:	8b 4d b0             	mov    ecx,DWORD PTR [ebp-0x50]
10003ad7:	b8 67 66 66 66       	mov    eax,0x66666667
10003adc:	f7 e9                	imul   ecx
10003ade:	c1 fa 02             	sar    edx,0x2
10003ae1:	89 c8                	mov    eax,ecx
10003ae3:	c1 f8 1f             	sar    eax,0x1f
10003ae6:	29 c2                	sub    edx,eax
10003ae8:	89 d0                	mov    eax,edx
10003aea:	8d 48 30             	lea    ecx,[eax+0x30]
10003aed:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
10003af0:	8d 50 01             	lea    edx,[eax+0x1]
10003af3:	89 55 ac             	mov    DWORD PTR [ebp-0x54],edx
10003af6:	88 ca                	mov    dl,cl
10003af8:	88 94 05 b6 fe ff ff 	mov    BYTE PTR [ebp+eax*1-0x14a],dl
10003aff:	8b 4d b0             	mov    ecx,DWORD PTR [ebp-0x50]
10003b02:	b8 67 66 66 66       	mov    eax,0x66666667
10003b07:	f7 e9                	imul   ecx
10003b09:	c1 fa 02             	sar    edx,0x2
10003b0c:	89 c8                	mov    eax,ecx
10003b0e:	c1 f8 1f             	sar    eax,0x1f
10003b11:	29 c2                	sub    edx,eax
10003b13:	89 d0                	mov    eax,edx
10003b15:	c1 e0 02             	shl    eax,0x2
10003b18:	01 d0                	add    eax,edx
10003b1a:	01 c0                	add    eax,eax
10003b1c:	29 c1                	sub    ecx,eax
10003b1e:	89 ca                	mov    edx,ecx
10003b20:	88 d0                	mov    al,dl
10003b22:	8d 48 30             	lea    ecx,[eax+0x30]
10003b25:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
10003b28:	8d 50 01             	lea    edx,[eax+0x1]
10003b2b:	89 55 ac             	mov    DWORD PTR [ebp-0x54],edx
10003b2e:	88 ca                	mov    dl,cl
10003b30:	88 94 05 b6 fe ff ff 	mov    BYTE PTR [ebp+eax*1-0x14a],dl
10003b37:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
10003b3a:	8d 50 01             	lea    edx,[eax+0x1]
10003b3d:	89 55 ac             	mov    DWORD PTR [ebp-0x54],edx
10003b40:	c6 84 05 b6 fe ff ff 20 	mov    BYTE PTR [ebp+eax*1-0x14a],0x20
10003b48:	83 7d b4 0b          	cmp    DWORD PTR [ebp-0x4c],0xb
10003b4c:	7e 04                	jle    10003b52 <firstRun(bool)+0x11b3>
10003b4e:	b2 50                	mov    dl,0x50
10003b50:	eb 02                	jmp    10003b54 <firstRun(bool)+0x11b5>
10003b52:	b2 41                	mov    dl,0x41
10003b54:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
10003b57:	8d 48 01             	lea    ecx,[eax+0x1]
10003b5a:	89 4d ac             	mov    DWORD PTR [ebp-0x54],ecx
10003b5d:	88 94 05 b6 fe ff ff 	mov    BYTE PTR [ebp+eax*1-0x14a],dl
10003b64:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
10003b67:	8d 50 01             	lea    edx,[eax+0x1]
10003b6a:	89 55 ac             	mov    DWORD PTR [ebp-0x54],edx
10003b6d:	c6 84 05 b6 fe ff ff 4d 	mov    BYTE PTR [ebp+eax*1-0x14a],0x4d
10003b75:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
10003b78:	8d 50 01             	lea    edx,[eax+0x1]
10003b7b:	89 55 ac             	mov    DWORD PTR [ebp-0x54],edx
10003b7e:	c6 84 05 b6 fe ff ff 29 	mov    BYTE PTR [ebp+eax*1-0x14a],0x29
10003b86:	8b 1d 00 00 00 00    	mov    ebx,DWORD PTR ds:0x0	10003b88: R_386_32	term
10003b8c:	83 ec 0c             	sub    esp,0xc
10003b8f:	8d 85 40 ff ff ff    	lea    eax,[ebp-0xc0]
10003b95:	50                   	push   eax
10003b96:	e8 fc ff ff ff       	call   10003b97 <firstRun(bool)+0x11f8>	10003b97: R_386_PC32	strlen
10003b9b:	83 c4 10             	add    esp,0x10
10003b9e:	83 c0 1e             	add    eax,0x1e
10003ba1:	83 ec 04             	sub    esp,0x4
10003ba4:	6a 08                	push   0x8
10003ba6:	50                   	push   eax
10003ba7:	53                   	push   ebx
10003ba8:	e8 fc ff ff ff       	call   10003ba9 <firstRun(bool)+0x120a>	10003ba9: R_386_PC32	VgaText::setCursor(int, int)
10003bad:	83 c4 10             	add    esp,0x10
10003bb0:	a1 00 00 00 00       	mov    eax,ds:0x0	10003bb1: R_386_32	term
10003bb5:	83 ec 08             	sub    esp,0x8
10003bb8:	8d 95 b6 fe ff ff    	lea    edx,[ebp-0x14a]
10003bbe:	52                   	push   edx
10003bbf:	50                   	push   eax
10003bc0:	e8 fc ff ff ff       	call   10003bc1 <firstRun(bool)+0x1222>	10003bc1: R_386_PC32	VgaText::puts(char const*)
10003bc5:	83 c4 10             	add    esp,0x10
10003bc8:	a1 00 00 00 00       	mov    eax,ds:0x0	10003bc9: R_386_32	term
10003bcd:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10003bd0:	83 c2 1a             	add    edx,0x1a
10003bd3:	83 ec 04             	sub    esp,0x4
10003bd6:	6a 08                	push   0x8
10003bd8:	52                   	push   edx
10003bd9:	50                   	push   eax
10003bda:	e8 fc ff ff ff       	call   10003bdb <firstRun(bool)+0x123c>	10003bdb: R_386_PC32	VgaText::setCursor(int, int)
10003bdf:	83 c4 10             	add    esp,0x10
10003be2:	a0 00 00 00 00       	mov    al,ds:0x0	10003be3: R_386_32	installKey
10003be7:	84 c0                	test   al,al
10003be9:	0f 94 c0             	sete   al
10003bec:	84 c0                	test   al,al
10003bee:	74 02                	je     10003bf2 <firstRun(bool)+0x1253>
10003bf0:	eb f0                	jmp    10003be2 <firstRun(bool)+0x1243>
10003bf2:	a1 00 00 00 00       	mov    eax,ds:0x0	10003bf3: R_386_32	term
10003bf7:	05 82 00 00 00       	add    eax,0x82
10003bfc:	83 ec 04             	sub    esp,0x4
10003bff:	6a 10                	push   0x10
10003c01:	6a 00                	push   0x0
10003c03:	50                   	push   eax
10003c04:	e8 fc ff ff ff       	call   10003c05 <firstRun(bool)+0x1266>	10003c05: R_386_PC32	memset
10003c09:	83 c4 10             	add    esp,0x10
10003c0c:	a1 00 00 00 00       	mov    eax,ds:0x0	10003c0d: R_386_32	term
10003c11:	05 02 01 00 00       	add    eax,0x102
10003c16:	83 ec 04             	sub    esp,0x4
10003c19:	6a 10                	push   0x10
10003c1b:	6a 00                	push   0x0
10003c1d:	50                   	push   eax
10003c1e:	e8 fc ff ff ff       	call   10003c1f <firstRun(bool)+0x1280>	10003c1f: R_386_PC32	memset
10003c23:	83 c4 10             	add    esp,0x10
10003c26:	a0 00 00 00 00       	mov    al,ds:0x0	10003c27: R_386_32	installKey
10003c2b:	3c 03                	cmp    al,0x3
10003c2d:	74 09                	je     10003c38 <firstRun(bool)+0x1299>
10003c2f:	a0 00 00 00 00       	mov    al,ds:0x0	10003c30: R_386_32	installKey
10003c34:	3c 08                	cmp    al,0x8
10003c36:	75 04                	jne    10003c3c <firstRun(bool)+0x129d>
10003c38:	b0 01                	mov    al,0x1
10003c3a:	eb 02                	jmp    10003c3e <firstRun(bool)+0x129f>
10003c3c:	b0 00                	mov    al,0x0
10003c3e:	84 c0                	test   al,al
10003c40:	74 58                	je     10003c9a <firstRun(bool)+0x12fb>
10003c42:	ff 4d e4             	dec    DWORD PTR [ebp-0x1c]
10003c45:	83 7d e4 ff          	cmp    DWORD PTR [ebp-0x1c],0xffffffff
10003c49:	75 16                	jne    10003c61 <firstRun(bool)+0x12c2>
10003c4b:	83 ec 0c             	sub    esp,0xc
10003c4e:	8d 85 40 ff ff ff    	lea    eax,[ebp-0xc0]
10003c54:	50                   	push   eax
10003c55:	e8 fc ff ff ff       	call   10003c56 <firstRun(bool)+0x12b7>	10003c56: R_386_PC32	strlen
10003c5a:	83 c4 10             	add    esp,0x10
10003c5d:	48                   	dec    eax
10003c5e:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10003c61:	8d 95 40 ff ff ff    	lea    edx,[ebp-0xc0]
10003c67:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10003c6a:	01 d0                	add    eax,edx
10003c6c:	8a 00                	mov    al,BYTE PTR [eax]
10003c6e:	3c 20                	cmp    al,0x20
10003c70:	74 d0                	je     10003c42 <firstRun(bool)+0x12a3>
10003c72:	8d 95 40 ff ff ff    	lea    edx,[ebp-0xc0]
10003c78:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10003c7b:	01 d0                	add    eax,edx
10003c7d:	8a 00                	mov    al,BYTE PTR [eax]
10003c7f:	3c 2f                	cmp    al,0x2f
10003c81:	74 bf                	je     10003c42 <firstRun(bool)+0x12a3>
10003c83:	8d 95 40 ff ff ff    	lea    edx,[ebp-0xc0]
10003c89:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10003c8c:	01 d0                	add    eax,edx
10003c8e:	8a 00                	mov    al,BYTE PTR [eax]
10003c90:	3c 3a                	cmp    al,0x3a
10003c92:	0f 85 5e 04 00 00    	jne    100040f6 <firstRun(bool)+0x1757>
10003c98:	eb a8                	jmp    10003c42 <firstRun(bool)+0x12a3>
10003c9a:	a0 00 00 00 00       	mov    al,ds:0x0	10003c9b: R_386_32	installKey
10003c9f:	3c 2f                	cmp    al,0x2f
10003ca1:	7e 09                	jle    10003cac <firstRun(bool)+0x130d>
10003ca3:	a0 00 00 00 00       	mov    al,ds:0x0	10003ca4: R_386_32	installKey
10003ca8:	3c 39                	cmp    al,0x39
10003caa:	7e 12                	jle    10003cbe <firstRun(bool)+0x131f>
10003cac:	a0 00 00 00 00       	mov    al,ds:0x0	10003cad: R_386_32	installKey
10003cb1:	3c 20                	cmp    al,0x20
10003cb3:	74 09                	je     10003cbe <firstRun(bool)+0x131f>
10003cb5:	a0 00 00 00 00       	mov    al,ds:0x0	10003cb6: R_386_32	installKey
10003cba:	3c 04                	cmp    al,0x4
10003cbc:	75 04                	jne    10003cc2 <firstRun(bool)+0x1323>
10003cbe:	b0 01                	mov    al,0x1
10003cc0:	eb 02                	jmp    10003cc4 <firstRun(bool)+0x1325>
10003cc2:	b0 00                	mov    al,0x0
10003cc4:	84 c0                	test   al,al
10003cc6:	0f 84 cf 01 00 00    	je     10003e9b <firstRun(bool)+0x14fc>
10003ccc:	a0 00 00 00 00       	mov    al,ds:0x0	10003ccd: R_386_32	installKey
10003cd1:	3c 2f                	cmp    al,0x2f
10003cd3:	7e 0d                	jle    10003ce2 <firstRun(bool)+0x1343>
10003cd5:	a0 00 00 00 00       	mov    al,ds:0x0	10003cd6: R_386_32	installKey
10003cda:	3c 39                	cmp    al,0x39
10003cdc:	7f 04                	jg     10003ce2 <firstRun(bool)+0x1343>
10003cde:	b0 01                	mov    al,0x1
10003ce0:	eb 02                	jmp    10003ce4 <firstRun(bool)+0x1345>
10003ce2:	b0 00                	mov    al,0x0
10003ce4:	84 c0                	test   al,al
10003ce6:	0f 84 51 01 00 00    	je     10003e3d <firstRun(bool)+0x149e>
10003cec:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
10003cf0:	75 0d                	jne    10003cff <firstRun(bool)+0x1360>
10003cf2:	a0 00 00 00 00       	mov    al,ds:0x0	10003cf3: R_386_32	installKey
10003cf7:	3c 33                	cmp    al,0x33
10003cf9:	7e 04                	jle    10003cff <firstRun(bool)+0x1360>
10003cfb:	b0 01                	mov    al,0x1
10003cfd:	eb 02                	jmp    10003d01 <firstRun(bool)+0x1362>
10003cff:	b0 00                	mov    al,0x0
10003d01:	84 c0                	test   al,al
10003d03:	74 28                	je     10003d2d <firstRun(bool)+0x138e>
10003d05:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10003d08:	8d 50 01             	lea    edx,[eax+0x1]
10003d0b:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
10003d0e:	c6 84 05 40 ff ff ff 30 	mov    BYTE PTR [ebp+eax*1-0xc0],0x30
10003d16:	a0 00 00 00 00       	mov    al,ds:0x0	10003d17: R_386_32	installKey
10003d1b:	8d 8d 40 ff ff ff    	lea    ecx,[ebp-0xc0]
10003d21:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10003d24:	01 ca                	add    edx,ecx
10003d26:	88 02                	mov    BYTE PTR [edx],al
10003d28:	e9 10 01 00 00       	jmp    10003e3d <firstRun(bool)+0x149e>
10003d2d:	83 7d e4 03          	cmp    DWORD PTR [ebp-0x1c],0x3
10003d31:	75 0d                	jne    10003d40 <firstRun(bool)+0x13a1>
10003d33:	a0 00 00 00 00       	mov    al,ds:0x0	10003d34: R_386_32	installKey
10003d38:	3c 31                	cmp    al,0x31
10003d3a:	7e 04                	jle    10003d40 <firstRun(bool)+0x13a1>
10003d3c:	b0 01                	mov    al,0x1
10003d3e:	eb 02                	jmp    10003d42 <firstRun(bool)+0x13a3>
10003d40:	b0 00                	mov    al,0x0
10003d42:	84 c0                	test   al,al
10003d44:	74 28                	je     10003d6e <firstRun(bool)+0x13cf>
10003d46:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10003d49:	8d 50 01             	lea    edx,[eax+0x1]
10003d4c:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
10003d4f:	c6 84 05 40 ff ff ff 30 	mov    BYTE PTR [ebp+eax*1-0xc0],0x30
10003d57:	a0 00 00 00 00       	mov    al,ds:0x0	10003d58: R_386_32	installKey
10003d5c:	8d 8d 40 ff ff ff    	lea    ecx,[ebp-0xc0]
10003d62:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10003d65:	01 ca                	add    edx,ecx
10003d67:	88 02                	mov    BYTE PTR [edx],al
10003d69:	e9 cf 00 00 00       	jmp    10003e3d <firstRun(bool)+0x149e>
10003d6e:	83 7d e4 0b          	cmp    DWORD PTR [ebp-0x1c],0xb
10003d72:	75 0d                	jne    10003d81 <firstRun(bool)+0x13e2>
10003d74:	a0 00 00 00 00       	mov    al,ds:0x0	10003d75: R_386_32	installKey
10003d79:	3c 32                	cmp    al,0x32
10003d7b:	7e 04                	jle    10003d81 <firstRun(bool)+0x13e2>
10003d7d:	b0 01                	mov    al,0x1
10003d7f:	eb 02                	jmp    10003d83 <firstRun(bool)+0x13e4>
10003d81:	b0 00                	mov    al,0x0
10003d83:	84 c0                	test   al,al
10003d85:	74 28                	je     10003daf <firstRun(bool)+0x1410>
10003d87:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10003d8a:	8d 50 01             	lea    edx,[eax+0x1]
10003d8d:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
10003d90:	c6 84 05 40 ff ff ff 30 	mov    BYTE PTR [ebp+eax*1-0xc0],0x30
10003d98:	a0 00 00 00 00       	mov    al,ds:0x0	10003d99: R_386_32	installKey
10003d9d:	8d 8d 40 ff ff ff    	lea    ecx,[ebp-0xc0]
10003da3:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10003da6:	01 ca                	add    edx,ecx
10003da8:	88 02                	mov    BYTE PTR [edx],al
10003daa:	e9 8e 00 00 00       	jmp    10003e3d <firstRun(bool)+0x149e>
10003daf:	83 7d e4 0e          	cmp    DWORD PTR [ebp-0x1c],0xe
10003db3:	75 0d                	jne    10003dc2 <firstRun(bool)+0x1423>
10003db5:	a0 00 00 00 00       	mov    al,ds:0x0	10003db6: R_386_32	installKey
10003dba:	3c 35                	cmp    al,0x35
10003dbc:	7e 04                	jle    10003dc2 <firstRun(bool)+0x1423>
10003dbe:	b0 01                	mov    al,0x1
10003dc0:	eb 02                	jmp    10003dc4 <firstRun(bool)+0x1425>
10003dc2:	b0 00                	mov    al,0x0
10003dc4:	84 c0                	test   al,al
10003dc6:	74 25                	je     10003ded <firstRun(bool)+0x144e>
10003dc8:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10003dcb:	8d 50 01             	lea    edx,[eax+0x1]
10003dce:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
10003dd1:	c6 84 05 40 ff ff ff 30 	mov    BYTE PTR [ebp+eax*1-0xc0],0x30
10003dd9:	a0 00 00 00 00       	mov    al,ds:0x0	10003dda: R_386_32	installKey
10003dde:	8d 8d 40 ff ff ff    	lea    ecx,[ebp-0xc0]
10003de4:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10003de7:	01 ca                	add    edx,ecx
10003de9:	88 02                	mov    BYTE PTR [edx],al
10003deb:	eb 50                	jmp    10003e3d <firstRun(bool)+0x149e>
10003ded:	83 7d e4 11          	cmp    DWORD PTR [ebp-0x1c],0x11
10003df1:	75 0d                	jne    10003e00 <firstRun(bool)+0x1461>
10003df3:	a0 00 00 00 00       	mov    al,ds:0x0	10003df4: R_386_32	installKey
10003df8:	3c 35                	cmp    al,0x35
10003dfa:	7e 04                	jle    10003e00 <firstRun(bool)+0x1461>
10003dfc:	b0 01                	mov    al,0x1
10003dfe:	eb 02                	jmp    10003e02 <firstRun(bool)+0x1463>
10003e00:	b0 00                	mov    al,0x0
10003e02:	84 c0                	test   al,al
10003e04:	74 25                	je     10003e2b <firstRun(bool)+0x148c>
10003e06:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10003e09:	8d 50 01             	lea    edx,[eax+0x1]
10003e0c:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
10003e0f:	c6 84 05 40 ff ff ff 30 	mov    BYTE PTR [ebp+eax*1-0xc0],0x30
10003e17:	a0 00 00 00 00       	mov    al,ds:0x0	10003e18: R_386_32	installKey
10003e1c:	8d 8d 40 ff ff ff    	lea    ecx,[ebp-0xc0]
10003e22:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10003e25:	01 ca                	add    edx,ecx
10003e27:	88 02                	mov    BYTE PTR [edx],al
10003e29:	eb 12                	jmp    10003e3d <firstRun(bool)+0x149e>
10003e2b:	a0 00 00 00 00       	mov    al,ds:0x0	10003e2c: R_386_32	installKey
10003e30:	8d 8d 40 ff ff ff    	lea    ecx,[ebp-0xc0]
10003e36:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10003e39:	01 ca                	add    edx,ecx
10003e3b:	88 02                	mov    BYTE PTR [edx],al
10003e3d:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
10003e40:	83 ec 0c             	sub    esp,0xc
10003e43:	8d 85 40 ff ff ff    	lea    eax,[ebp-0xc0]
10003e49:	50                   	push   eax
10003e4a:	e8 fc ff ff ff       	call   10003e4b <firstRun(bool)+0x14ac>	10003e4b: R_386_PC32	strlen
10003e4f:	83 c4 10             	add    esp,0x10
10003e52:	89 c2                	mov    edx,eax
10003e54:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10003e57:	39 c2                	cmp    edx,eax
10003e59:	77 07                	ja     10003e62 <firstRun(bool)+0x14c3>
10003e5b:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
10003e62:	8d 95 40 ff ff ff    	lea    edx,[ebp-0xc0]
10003e68:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10003e6b:	01 d0                	add    eax,edx
10003e6d:	8a 00                	mov    al,BYTE PTR [eax]
10003e6f:	3c 20                	cmp    al,0x20
10003e71:	74 ca                	je     10003e3d <firstRun(bool)+0x149e>
10003e73:	8d 95 40 ff ff ff    	lea    edx,[ebp-0xc0]
10003e79:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10003e7c:	01 d0                	add    eax,edx
10003e7e:	8a 00                	mov    al,BYTE PTR [eax]
10003e80:	3c 2f                	cmp    al,0x2f
10003e82:	74 b9                	je     10003e3d <firstRun(bool)+0x149e>
10003e84:	8d 95 40 ff ff ff    	lea    edx,[ebp-0xc0]
10003e8a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10003e8d:	01 d0                	add    eax,edx
10003e8f:	8a 00                	mov    al,BYTE PTR [eax]
10003e91:	3c 3a                	cmp    al,0x3a
10003e93:	0f 85 5d 02 00 00    	jne    100040f6 <firstRun(bool)+0x1757>
10003e99:	eb a2                	jmp    10003e3d <firstRun(bool)+0x149e>
10003e9b:	a0 00 00 00 00       	mov    al,ds:0x0	10003e9c: R_386_32	installKey
10003ea0:	3c 0a                	cmp    al,0xa
10003ea2:	0f 94 c0             	sete   al
10003ea5:	84 c0                	test   al,al
10003ea7:	0f 84 37 02 00 00    	je     100040e4 <firstRun(bool)+0x1745>
10003ead:	8a 85 40 ff ff ff    	mov    al,BYTE PTR [ebp-0xc0]
10003eb3:	0f be c0             	movsx  eax,al
10003eb6:	8d 50 d0             	lea    edx,[eax-0x30]
10003eb9:	89 d0                	mov    eax,edx
10003ebb:	c1 e0 02             	shl    eax,0x2
10003ebe:	01 d0                	add    eax,edx
10003ec0:	01 c0                	add    eax,eax
10003ec2:	89 c2                	mov    edx,eax
10003ec4:	8a 85 41 ff ff ff    	mov    al,BYTE PTR [ebp-0xbf]
10003eca:	0f be c0             	movsx  eax,al
10003ecd:	83 e8 30             	sub    eax,0x30
10003ed0:	01 d0                	add    eax,edx
10003ed2:	89 45 a8             	mov    DWORD PTR [ebp-0x58],eax
10003ed5:	8a 85 43 ff ff ff    	mov    al,BYTE PTR [ebp-0xbd]
10003edb:	0f be c0             	movsx  eax,al
10003ede:	8d 50 d0             	lea    edx,[eax-0x30]
10003ee1:	89 d0                	mov    eax,edx
10003ee3:	c1 e0 02             	shl    eax,0x2
10003ee6:	01 d0                	add    eax,edx
10003ee8:	01 c0                	add    eax,eax
10003eea:	89 c2                	mov    edx,eax
10003eec:	8a 85 44 ff ff ff    	mov    al,BYTE PTR [ebp-0xbc]
10003ef2:	0f be c0             	movsx  eax,al
10003ef5:	83 e8 30             	sub    eax,0x30
10003ef8:	01 d0                	add    eax,edx
10003efa:	89 45 a4             	mov    DWORD PTR [ebp-0x5c],eax
10003efd:	8a 85 46 ff ff ff    	mov    al,BYTE PTR [ebp-0xba]
10003f03:	0f be c0             	movsx  eax,al
10003f06:	8d 50 d0             	lea    edx,[eax-0x30]
10003f09:	89 d0                	mov    eax,edx
10003f0b:	c1 e0 02             	shl    eax,0x2
10003f0e:	01 d0                	add    eax,edx
10003f10:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10003f17:	01 d0                	add    eax,edx
10003f19:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10003f20:	01 d0                	add    eax,edx
10003f22:	c1 e0 03             	shl    eax,0x3
10003f25:	89 c1                	mov    ecx,eax
10003f27:	8a 85 47 ff ff ff    	mov    al,BYTE PTR [ebp-0xb9]
10003f2d:	0f be c0             	movsx  eax,al
10003f30:	8d 50 d0             	lea    edx,[eax-0x30]
10003f33:	89 d0                	mov    eax,edx
10003f35:	c1 e0 02             	shl    eax,0x2
10003f38:	01 d0                	add    eax,edx
10003f3a:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10003f41:	01 d0                	add    eax,edx
10003f43:	c1 e0 02             	shl    eax,0x2
10003f46:	01 c1                	add    ecx,eax
10003f48:	8a 85 48 ff ff ff    	mov    al,BYTE PTR [ebp-0xb8]
10003f4e:	0f be c0             	movsx  eax,al
10003f51:	8d 50 d0             	lea    edx,[eax-0x30]
10003f54:	89 d0                	mov    eax,edx
10003f56:	c1 e0 02             	shl    eax,0x2
10003f59:	01 d0                	add    eax,edx
10003f5b:	01 c0                	add    eax,eax
10003f5d:	8d 14 01             	lea    edx,[ecx+eax*1]
10003f60:	8a 85 49 ff ff ff    	mov    al,BYTE PTR [ebp-0xb7]
10003f66:	0f be c0             	movsx  eax,al
10003f69:	83 e8 30             	sub    eax,0x30
10003f6c:	01 d0                	add    eax,edx
10003f6e:	89 45 a0             	mov    DWORD PTR [ebp-0x60],eax
10003f71:	8a 85 4b ff ff ff    	mov    al,BYTE PTR [ebp-0xb5]
10003f77:	0f be c0             	movsx  eax,al
10003f7a:	8d 50 d0             	lea    edx,[eax-0x30]
10003f7d:	89 d0                	mov    eax,edx
10003f7f:	c1 e0 02             	shl    eax,0x2
10003f82:	01 d0                	add    eax,edx
10003f84:	01 c0                	add    eax,eax
10003f86:	89 c2                	mov    edx,eax
10003f88:	8a 85 4c ff ff ff    	mov    al,BYTE PTR [ebp-0xb4]
10003f8e:	0f be c0             	movsx  eax,al
10003f91:	83 e8 30             	sub    eax,0x30
10003f94:	01 d0                	add    eax,edx
10003f96:	89 45 9c             	mov    DWORD PTR [ebp-0x64],eax
10003f99:	8a 85 4e ff ff ff    	mov    al,BYTE PTR [ebp-0xb2]
10003f9f:	0f be c0             	movsx  eax,al
10003fa2:	8d 50 d0             	lea    edx,[eax-0x30]
10003fa5:	89 d0                	mov    eax,edx
10003fa7:	c1 e0 02             	shl    eax,0x2
10003faa:	01 d0                	add    eax,edx
10003fac:	01 c0                	add    eax,eax
10003fae:	89 c2                	mov    edx,eax
10003fb0:	8a 85 4f ff ff ff    	mov    al,BYTE PTR [ebp-0xb1]
10003fb6:	0f be c0             	movsx  eax,al
10003fb9:	83 e8 30             	sub    eax,0x30
10003fbc:	01 d0                	add    eax,edx
10003fbe:	89 45 98             	mov    DWORD PTR [ebp-0x68],eax
10003fc1:	8a 85 51 ff ff ff    	mov    al,BYTE PTR [ebp-0xaf]
10003fc7:	0f be c0             	movsx  eax,al
10003fca:	8d 50 d0             	lea    edx,[eax-0x30]
10003fcd:	89 d0                	mov    eax,edx
10003fcf:	c1 e0 02             	shl    eax,0x2
10003fd2:	01 d0                	add    eax,edx
10003fd4:	01 c0                	add    eax,eax
10003fd6:	89 c2                	mov    edx,eax
10003fd8:	8a 85 52 ff ff ff    	mov    al,BYTE PTR [ebp-0xae]
10003fde:	0f be c0             	movsx  eax,al
10003fe1:	83 e8 30             	sub    eax,0x30
10003fe4:	01 d0                	add    eax,edx
10003fe6:	89 45 94             	mov    DWORD PTR [ebp-0x6c],eax
10003fe9:	8b 45 a0             	mov    eax,DWORD PTR [ebp-0x60]
10003fec:	83 e0 03             	and    eax,0x3
10003fef:	85 c0                	test   eax,eax
10003ff1:	75 1f                	jne    10004012 <firstRun(bool)+0x1673>
10003ff3:	8b 45 a0             	mov    eax,DWORD PTR [ebp-0x60]
10003ff6:	b9 19 00 00 00       	mov    ecx,0x19
10003ffb:	99                   	cdq    
10003ffc:	f7 f9                	idiv   ecx
10003ffe:	89 d0                	mov    eax,edx
10004000:	85 c0                	test   eax,eax
10004002:	75 0a                	jne    1000400e <firstRun(bool)+0x166f>
10004004:	8b 45 a0             	mov    eax,DWORD PTR [ebp-0x60]
10004007:	83 e0 0f             	and    eax,0xf
1000400a:	85 c0                	test   eax,eax
1000400c:	75 04                	jne    10004012 <firstRun(bool)+0x1673>
1000400e:	b0 01                	mov    al,0x1
10004010:	eb 02                	jmp    10004014 <firstRun(bool)+0x1675>
10004012:	b0 00                	mov    al,0x0
10004014:	88 45 93             	mov    BYTE PTR [ebp-0x6d],al
10004017:	83 7d a8 1f          	cmp    DWORD PTR [ebp-0x58],0x1f
1000401b:	7e 0c                	jle    10004029 <firstRun(bool)+0x168a>
1000401d:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
10004024:	e9 cd 00 00 00       	jmp    100040f6 <firstRun(bool)+0x1757>
10004029:	83 7d a8 1e          	cmp    DWORD PTR [ebp-0x58],0x1e
1000402d:	7e 2a                	jle    10004059 <firstRun(bool)+0x16ba>
1000402f:	83 7d a4 02          	cmp    DWORD PTR [ebp-0x5c],0x2
10004033:	74 18                	je     1000404d <firstRun(bool)+0x16ae>
10004035:	83 7d a4 04          	cmp    DWORD PTR [ebp-0x5c],0x4
10004039:	74 12                	je     1000404d <firstRun(bool)+0x16ae>
1000403b:	83 7d a4 06          	cmp    DWORD PTR [ebp-0x5c],0x6
1000403f:	74 0c                	je     1000404d <firstRun(bool)+0x16ae>
10004041:	83 7d a4 09          	cmp    DWORD PTR [ebp-0x5c],0x9
10004045:	74 06                	je     1000404d <firstRun(bool)+0x16ae>
10004047:	83 7d a4 0b          	cmp    DWORD PTR [ebp-0x5c],0xb
1000404b:	75 0c                	jne    10004059 <firstRun(bool)+0x16ba>
1000404d:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
10004054:	e9 9d 00 00 00       	jmp    100040f6 <firstRun(bool)+0x1757>
10004059:	83 7d a8 1d          	cmp    DWORD PTR [ebp-0x58],0x1d
1000405d:	75 19                	jne    10004078 <firstRun(bool)+0x16d9>
1000405f:	83 7d a4 02          	cmp    DWORD PTR [ebp-0x5c],0x2
10004063:	75 13                	jne    10004078 <firstRun(bool)+0x16d9>
10004065:	8a 45 93             	mov    al,BYTE PTR [ebp-0x6d]
10004068:	83 f0 01             	xor    eax,0x1
1000406b:	84 c0                	test   al,al
1000406d:	74 09                	je     10004078 <firstRun(bool)+0x16d9>
1000406f:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
10004076:	eb 7e                	jmp    100040f6 <firstRun(bool)+0x1757>
10004078:	83 7d a8 00          	cmp    DWORD PTR [ebp-0x58],0x0
1000407c:	75 09                	jne    10004087 <firstRun(bool)+0x16e8>
1000407e:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
10004085:	eb 6f                	jmp    100040f6 <firstRun(bool)+0x1757>
10004087:	83 7d a4 0c          	cmp    DWORD PTR [ebp-0x5c],0xc
1000408b:	7f 06                	jg     10004093 <firstRun(bool)+0x16f4>
1000408d:	83 7d a4 00          	cmp    DWORD PTR [ebp-0x5c],0x0
10004091:	75 09                	jne    1000409c <firstRun(bool)+0x16fd>
10004093:	c7 45 e4 03 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x3
1000409a:	eb 5a                	jmp    100040f6 <firstRun(bool)+0x1757>
1000409c:	81 7d a0 b7 0b 00 00 	cmp    DWORD PTR [ebp-0x60],0xbb7
100040a3:	7f 09                	jg     100040ae <firstRun(bool)+0x170f>
100040a5:	81 7d a0 b1 07 00 00 	cmp    DWORD PTR [ebp-0x60],0x7b1
100040ac:	7f 09                	jg     100040b7 <firstRun(bool)+0x1718>
100040ae:	c7 45 e4 06 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x6
100040b5:	eb 3f                	jmp    100040f6 <firstRun(bool)+0x1757>
100040b7:	83 7d 9c 17          	cmp    DWORD PTR [ebp-0x64],0x17
100040bb:	7e 09                	jle    100040c6 <firstRun(bool)+0x1727>
100040bd:	c7 45 e4 0b 00 00 00 	mov    DWORD PTR [ebp-0x1c],0xb
100040c4:	eb 30                	jmp    100040f6 <firstRun(bool)+0x1757>
100040c6:	83 7d 98 3b          	cmp    DWORD PTR [ebp-0x68],0x3b
100040ca:	7e 09                	jle    100040d5 <firstRun(bool)+0x1736>
100040cc:	c7 45 e4 0e 00 00 00 	mov    DWORD PTR [ebp-0x1c],0xe
100040d3:	eb 21                	jmp    100040f6 <firstRun(bool)+0x1757>
100040d5:	83 7d 94 3b          	cmp    DWORD PTR [ebp-0x6c],0x3b
100040d9:	7e 37                	jle    10004112 <firstRun(bool)+0x1773>
100040db:	c7 45 e4 11 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x11
100040e2:	eb 12                	jmp    100040f6 <firstRun(bool)+0x1757>
100040e4:	a0 00 00 00 00       	mov    al,ds:0x0	100040e5: R_386_32	installKey
100040e9:	3c 1b                	cmp    al,0x1b
100040eb:	0f 94 c0             	sete   al
100040ee:	84 c0                	test   al,al
100040f0:	0f 85 c8 e9 ff ff    	jne    10002abe <firstRun(bool)+0x11f>
100040f6:	83 ec 0c             	sub    esp,0xc
100040f9:	68 4c 04 00 00       	push   0x44c
100040fe:	e8 fc ff ff ff       	call   100040ff <firstRun(bool)+0x1760>	100040ff: R_386_PC32	milliTenthSleep(unsigned int)
10004103:	83 c4 10             	add    esp,0x10
10004106:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10004108: R_386_32	installKey
1000410d:	e9 4b f8 ff ff       	jmp    1000395d <firstRun(bool)+0xfbe>
10004112:	90                   	nop
10004113:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10004115: R_386_32	installKey
1000411a:	83 ec 0c             	sub    esp,0xc
1000411d:	68 a0 0f 00 00       	push   0xfa0
10004122:	e8 fc ff ff ff       	call   10004123 <firstRun(bool)+0x1784>	10004123: R_386_PC32	milliTenthSleep(unsigned int)
10004127:	83 c4 10             	add    esp,0x10
1000412a:	eb 01                	jmp    1000412d <firstRun(bool)+0x178e>
1000412c:	90                   	nop
1000412d:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	1000412f: R_386_32	installKey
10004134:	e8 fc ff ff ff       	call   10004135 <firstRun(bool)+0x1796>	10004135: R_386_PC32	drawBootScreen()
10004139:	83 ec 0c             	sub    esp,0xc
1000413c:	68 b3 9b 00 10       	push   0x10009bb3	1000413d: R_386_32	.text
10004141:	6a 14                	push   0x14
10004143:	6a 3c                	push   0x3c
10004145:	6a 01                	push   0x1
10004147:	6a 12                	push   0x12
10004149:	e8 fc ff ff ff       	call   1000414a <firstRun(bool)+0x17ab>	1000414a: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
1000414e:	83 c4 20             	add    esp,0x20
10004151:	a1 00 00 00 00       	mov    eax,ds:0x0	10004152: R_386_32	term
10004156:	83 ec 04             	sub    esp,0x4
10004159:	6a 04                	push   0x4
1000415b:	6a 14                	push   0x14
1000415d:	50                   	push   eax
1000415e:	e8 fc ff ff ff       	call   1000415f <firstRun(bool)+0x17c0>	1000415f: R_386_PC32	VgaText::setCursor(int, int)
10004163:	83 c4 10             	add    esp,0x10
10004166:	a1 00 00 00 00       	mov    eax,ds:0x0	10004167: R_386_32	term
1000416b:	83 ec 08             	sub    esp,0x8
1000416e:	68 40 9c 00 10       	push   0x10009c40	1000416f: R_386_32	.text
10004173:	50                   	push   eax
10004174:	e8 fc ff ff ff       	call   10004175 <firstRun(bool)+0x17d6>	10004175: R_386_PC32	VgaText::puts(char const*)
10004179:	83 c4 10             	add    esp,0x10
1000417c:	a1 00 00 00 00       	mov    eax,ds:0x0	1000417d: R_386_32	term
10004181:	83 ec 04             	sub    esp,0x4
10004184:	6a 18                	push   0x18
10004186:	6a 11                	push   0x11
10004188:	50                   	push   eax
10004189:	e8 fc ff ff ff       	call   1000418a <firstRun(bool)+0x17eb>	1000418a: R_386_PC32	VgaText::setCursor(int, int)
1000418e:	83 c4 10             	add    esp,0x10
10004191:	a1 00 00 00 00       	mov    eax,ds:0x0	10004192: R_386_32	term
10004196:	6a 0b                	push   0xb
10004198:	6a 03                	push   0x3
1000419a:	68 2a 9c 00 10       	push   0x10009c2a	1000419b: R_386_32	.text
1000419f:	50                   	push   eax
100041a0:	e8 fc ff ff ff       	call   100041a1 <firstRun(bool)+0x1802>	100041a1: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
100041a5:	83 c4 10             	add    esp,0x10
100041a8:	e8 fc ff ff ff       	call   100041a9 <firstRun(bool)+0x180a>	100041a9: R_386_PC32	loadTimezoneStrings()
100041ad:	89 45 8c             	mov    DWORD PTR [ebp-0x74],eax
100041b0:	b8 d2 00 00 00       	mov    eax,0xd2
100041b5:	99                   	cdq    
100041b6:	f7 7d 8c             	idiv   DWORD PTR [ebp-0x74]
100041b9:	89 45 88             	mov    DWORD PTR [ebp-0x78],eax
100041bc:	c7 45 c8 00 00 00 00 	mov    DWORD PTR [ebp-0x38],0x0
100041c3:	83 7d c8 0d          	cmp    DWORD PTR [ebp-0x38],0xd
100041c7:	7f 32                	jg     100041fb <firstRun(bool)+0x185c>
100041c9:	a1 00 00 00 00       	mov    eax,ds:0x0	100041ca: R_386_32	term
100041ce:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
100041d1:	83 c2 07             	add    edx,0x7
100041d4:	83 ec 04             	sub    esp,0x4
100041d7:	52                   	push   edx
100041d8:	6a 4b                	push   0x4b
100041da:	50                   	push   eax
100041db:	e8 fc ff ff ff       	call   100041dc <firstRun(bool)+0x183d>	100041dc: R_386_PC32	VgaText::setCursor(int, int)
100041e0:	83 c4 10             	add    esp,0x10
100041e3:	a1 00 00 00 00       	mov    eax,ds:0x0	100041e4: R_386_32	term
100041e8:	83 ec 08             	sub    esp,0x8
100041eb:	6a 20                	push   0x20
100041ed:	50                   	push   eax
100041ee:	e8 fc ff ff ff       	call   100041ef <firstRun(bool)+0x1850>	100041ef: R_386_PC32	VgaText::putchar(char)
100041f3:	83 c4 10             	add    esp,0x10
100041f6:	ff 45 c8             	inc    DWORD PTR [ebp-0x38]
100041f9:	eb c8                	jmp    100041c3 <firstRun(bool)+0x1824>
100041fb:	c7 45 c4 00 00 00 00 	mov    DWORD PTR [ebp-0x3c],0x0
10004202:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
10004205:	3b 45 88             	cmp    eax,DWORD PTR [ebp-0x78]
10004208:	7d 48                	jge    10004252 <firstRun(bool)+0x18b3>
1000420a:	8b 0d 00 00 00 00    	mov    ecx,DWORD PTR ds:0x0	1000420c: R_386_32	term
10004210:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
10004213:	8d 58 07             	lea    ebx,[eax+0x7]
10004216:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
10004219:	89 d0                	mov    eax,edx
1000421b:	01 c0                	add    eax,eax
1000421d:	01 d0                	add    eax,edx
1000421f:	01 c0                	add    eax,eax
10004221:	01 d0                	add    eax,edx
10004223:	01 c0                	add    eax,eax
10004225:	99                   	cdq    
10004226:	f7 7d 8c             	idiv   DWORD PTR [ebp-0x74]
10004229:	01 d8                	add    eax,ebx
1000422b:	83 ec 04             	sub    esp,0x4
1000422e:	50                   	push   eax
1000422f:	6a 4b                	push   0x4b
10004231:	51                   	push   ecx
10004232:	e8 fc ff ff ff       	call   10004233 <firstRun(bool)+0x1894>	10004233: R_386_PC32	VgaText::setCursor(int, int)
10004237:	83 c4 10             	add    esp,0x10
1000423a:	a1 00 00 00 00       	mov    eax,ds:0x0	1000423b: R_386_32	term
1000423f:	83 ec 08             	sub    esp,0x8
10004242:	6a db                	push   0xffffffdb
10004244:	50                   	push   eax
10004245:	e8 fc ff ff ff       	call   10004246 <firstRun(bool)+0x18a7>	10004246: R_386_PC32	VgaText::putchar(char)
1000424a:	83 c4 10             	add    esp,0x10
1000424d:	ff 45 c4             	inc    DWORD PTR [ebp-0x3c]
10004250:	eb b0                	jmp    10004202 <firstRun(bool)+0x1863>
10004252:	a1 00 00 00 00       	mov    eax,ds:0x0	10004253: R_386_32	term
10004257:	83 ec 04             	sub    esp,0x4
1000425a:	6a 06                	push   0x6
1000425c:	6a 4b                	push   0x4b
1000425e:	50                   	push   eax
1000425f:	e8 fc ff ff ff       	call   10004260 <firstRun(bool)+0x18c1>	10004260: R_386_PC32	VgaText::setCursor(int, int)
10004264:	83 c4 10             	add    esp,0x10
10004267:	a1 00 00 00 00       	mov    eax,ds:0x0	10004268: R_386_32	term
1000426c:	83 ec 08             	sub    esp,0x8
1000426f:	6a 1e                	push   0x1e
10004271:	50                   	push   eax
10004272:	e8 fc ff ff ff       	call   10004273 <firstRun(bool)+0x18d4>	10004273: R_386_PC32	VgaText::putchar(char)
10004277:	83 c4 10             	add    esp,0x10
1000427a:	a1 00 00 00 00       	mov    eax,ds:0x0	1000427b: R_386_32	term
1000427f:	83 ec 04             	sub    esp,0x4
10004282:	6a 14                	push   0x14
10004284:	6a 4b                	push   0x4b
10004286:	50                   	push   eax
10004287:	e8 fc ff ff ff       	call   10004288 <firstRun(bool)+0x18e9>	10004288: R_386_PC32	VgaText::setCursor(int, int)
1000428c:	83 c4 10             	add    esp,0x10
1000428f:	a1 00 00 00 00       	mov    eax,ds:0x0	10004290: R_386_32	term
10004294:	83 ec 08             	sub    esp,0x8
10004297:	6a 1f                	push   0x1f
10004299:	50                   	push   eax
1000429a:	e8 fc ff ff ff       	call   1000429b <firstRun(bool)+0x18fc>	1000429b: R_386_PC32	VgaText::putchar(char)
1000429f:	83 c4 10             	add    esp,0x10
100042a2:	c7 45 c0 00 00 00 00 	mov    DWORD PTR [ebp-0x40],0x0
100042a9:	83 7d c0 0e          	cmp    DWORD PTR [ebp-0x40],0xe
100042ad:	7f 7e                	jg     1000432d <firstRun(bool)+0x198e>
100042af:	a1 00 00 00 00       	mov    eax,ds:0x0	100042b0: R_386_32	term
100042b4:	8b 55 c0             	mov    edx,DWORD PTR [ebp-0x40]
100042b7:	83 c2 06             	add    edx,0x6
100042ba:	83 ec 04             	sub    esp,0x4
100042bd:	52                   	push   edx
100042be:	6a 14                	push   0x14
100042c0:	50                   	push   eax
100042c1:	e8 fc ff ff ff       	call   100042c2 <firstRun(bool)+0x1923>	100042c2: R_386_PC32	VgaText::setCursor(int, int)
100042c6:	83 c4 10             	add    esp,0x10
100042c9:	a1 00 00 00 00       	mov    eax,ds:0x0	100042ca: R_386_32	term
100042ce:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
100042d1:	8b 55 c0             	mov    edx,DWORD PTR [ebp-0x40]
100042d4:	01 d1                	add    ecx,edx
100042d6:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	100042d8: R_386_32	tzsel
100042dc:	39 d1                	cmp    ecx,edx
100042de:	75 07                	jne    100042e7 <firstRun(bool)+0x1948>
100042e0:	bb 00 00 00 00       	mov    ebx,0x0
100042e5:	eb 05                	jmp    100042ec <firstRun(bool)+0x194d>
100042e7:	bb 0f 00 00 00       	mov    ebx,0xf
100042ec:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
100042ef:	8b 55 c0             	mov    edx,DWORD PTR [ebp-0x40]
100042f2:	01 d1                	add    ecx,edx
100042f4:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	100042f6: R_386_32	tzsel
100042fa:	39 d1                	cmp    ecx,edx
100042fc:	75 07                	jne    10004305 <firstRun(bool)+0x1966>
100042fe:	b9 0f 00 00 00       	mov    ecx,0xf
10004303:	eb 05                	jmp    1000430a <firstRun(bool)+0x196b>
10004305:	b9 00 00 00 00       	mov    ecx,0x0
1000430a:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
1000430d:	8b 55 c0             	mov    edx,DWORD PTR [ebp-0x40]
10004310:	01 f2                	add    edx,esi
10004312:	8b 14 95 00 00 00 00 	mov    edx,DWORD PTR [edx*4+0x0]	10004315: R_386_32	timezoneStrings
10004319:	53                   	push   ebx
1000431a:	51                   	push   ecx
1000431b:	52                   	push   edx
1000431c:	50                   	push   eax
1000431d:	e8 fc ff ff ff       	call   1000431e <firstRun(bool)+0x197f>	1000431e: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10004322:	83 c4 10             	add    esp,0x10
10004325:	ff 45 c0             	inc    DWORD PTR [ebp-0x40]
10004328:	e9 7c ff ff ff       	jmp    100042a9 <firstRun(bool)+0x190a>
1000432d:	a0 00 00 00 00       	mov    al,ds:0x0	1000432e: R_386_32	installKey
10004332:	84 c0                	test   al,al
10004334:	0f 94 c0             	sete   al
10004337:	84 c0                	test   al,al
10004339:	74 02                	je     1000433d <firstRun(bool)+0x199e>
1000433b:	eb f0                	jmp    1000432d <firstRun(bool)+0x198e>
1000433d:	a1 00 00 00 00       	mov    eax,ds:0x0	1000433e: R_386_32	term
10004342:	05 82 00 00 00       	add    eax,0x82
10004347:	83 ec 04             	sub    esp,0x4
1000434a:	6a 04                	push   0x4
1000434c:	6a 00                	push   0x0
1000434e:	50                   	push   eax
1000434f:	e8 fc ff ff ff       	call   10004350 <firstRun(bool)+0x19b1>	10004350: R_386_PC32	memset
10004354:	83 c4 10             	add    esp,0x10
10004357:	a1 00 00 00 00       	mov    eax,ds:0x0	10004358: R_386_32	term
1000435c:	05 02 01 00 00       	add    eax,0x102
10004361:	83 ec 04             	sub    esp,0x4
10004364:	6a 04                	push   0x4
10004366:	6a 00                	push   0x0
10004368:	50                   	push   eax
10004369:	e8 fc ff ff ff       	call   1000436a <firstRun(bool)+0x19cb>	1000436a: R_386_PC32	memset
1000436e:	83 c4 10             	add    esp,0x10
10004371:	a0 00 00 00 00       	mov    al,ds:0x0	10004372: R_386_32	installKey
10004376:	3c 01                	cmp    al,0x1
10004378:	0f 94 c0             	sete   al
1000437b:	84 c0                	test   al,al
1000437d:	74 41                	je     100043c0 <firstRun(bool)+0x1a21>
1000437f:	a1 00 00 00 00       	mov    eax,ds:0x0	10004380: R_386_32	tzsel
10004384:	48                   	dec    eax
10004385:	a3 00 00 00 00       	mov    ds:0x0,eax	10004386: R_386_32	tzsel
1000438a:	a1 00 00 00 00       	mov    eax,ds:0x0	1000438b: R_386_32	tzsel
1000438f:	2b 45 d8             	sub    eax,DWORD PTR [ebp-0x28]
10004392:	83 f8 04             	cmp    eax,0x4
10004395:	7f 03                	jg     1000439a <firstRun(bool)+0x19fb>
10004397:	ff 4d d8             	dec    DWORD PTR [ebp-0x28]
1000439a:	a1 00 00 00 00       	mov    eax,ds:0x0	1000439b: R_386_32	tzsel
1000439f:	85 c0                	test   eax,eax
100043a1:	79 0a                	jns    100043ad <firstRun(bool)+0x1a0e>
100043a3:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	100043a5: R_386_32	tzsel
100043ad:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
100043b1:	0f 89 82 00 00 00    	jns    10004439 <firstRun(bool)+0x1a9a>
100043b7:	c7 45 d8 00 00 00 00 	mov    DWORD PTR [ebp-0x28],0x0
100043be:	eb 79                	jmp    10004439 <firstRun(bool)+0x1a9a>
100043c0:	a0 00 00 00 00       	mov    al,ds:0x0	100043c1: R_386_32	installKey
100043c5:	3c 02                	cmp    al,0x2
100043c7:	0f 94 c0             	sete   al
100043ca:	84 c0                	test   al,al
100043cc:	74 4b                	je     10004419 <firstRun(bool)+0x1a7a>
100043ce:	a1 00 00 00 00       	mov    eax,ds:0x0	100043cf: R_386_32	tzsel
100043d3:	40                   	inc    eax
100043d4:	a3 00 00 00 00       	mov    ds:0x0,eax	100043d5: R_386_32	tzsel
100043d9:	a1 00 00 00 00       	mov    eax,ds:0x0	100043da: R_386_32	tzsel
100043de:	2b 45 d8             	sub    eax,DWORD PTR [ebp-0x28]
100043e1:	83 f8 0a             	cmp    eax,0xa
100043e4:	7e 03                	jle    100043e9 <firstRun(bool)+0x1a4a>
100043e6:	ff 45 d8             	inc    DWORD PTR [ebp-0x28]
100043e9:	8b 45 8c             	mov    eax,DWORD PTR [ebp-0x74]
100043ec:	8d 50 ff             	lea    edx,[eax-0x1]
100043ef:	a1 00 00 00 00       	mov    eax,ds:0x0	100043f0: R_386_32	tzsel
100043f4:	39 c2                	cmp    edx,eax
100043f6:	7f 0b                	jg     10004403 <firstRun(bool)+0x1a64>
100043f8:	8b 45 8c             	mov    eax,DWORD PTR [ebp-0x74]
100043fb:	83 e8 02             	sub    eax,0x2
100043fe:	a3 00 00 00 00       	mov    ds:0x0,eax	100043ff: R_386_32	tzsel
10004403:	8b 45 8c             	mov    eax,DWORD PTR [ebp-0x74]
10004406:	83 e8 0f             	sub    eax,0xf
10004409:	39 45 d8             	cmp    DWORD PTR [ebp-0x28],eax
1000440c:	7c 2b                	jl     10004439 <firstRun(bool)+0x1a9a>
1000440e:	8b 45 8c             	mov    eax,DWORD PTR [ebp-0x74]
10004411:	83 e8 10             	sub    eax,0x10
10004414:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
10004417:	eb 20                	jmp    10004439 <firstRun(bool)+0x1a9a>
10004419:	a0 00 00 00 00       	mov    al,ds:0x0	1000441a: R_386_32	installKey
1000441e:	3c 0a                	cmp    al,0xa
10004420:	0f 94 c0             	sete   al
10004423:	84 c0                	test   al,al
10004425:	75 2e                	jne    10004455 <firstRun(bool)+0x1ab6>
10004427:	a0 00 00 00 00       	mov    al,ds:0x0	10004428: R_386_32	installKey
1000442c:	3c 1b                	cmp    al,0x1b
1000442e:	0f 94 c0             	sete   al
10004431:	84 c0                	test   al,al
10004433:	0f 85 28 f1 ff ff    	jne    10003561 <firstRun(bool)+0xbc2>
10004439:	83 ec 0c             	sub    esp,0xc
1000443c:	68 f4 01 00 00       	push   0x1f4
10004441:	e8 fc ff ff ff       	call   10004442 <firstRun(bool)+0x1aa3>	10004442: R_386_PC32	milliTenthSleep(unsigned int)
10004446:	83 c4 10             	add    esp,0x10
10004449:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	1000444b: R_386_32	installKey
10004450:	e9 67 fd ff ff       	jmp    100041bc <firstRun(bool)+0x181d>
10004455:	90                   	nop
10004456:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10004458: R_386_32	installKey
1000445d:	83 ec 0c             	sub    esp,0xc
10004460:	68 a0 0f 00 00       	push   0xfa0
10004465:	e8 fc ff ff ff       	call   10004466 <firstRun(bool)+0x1ac7>	10004466: R_386_PC32	milliTenthSleep(unsigned int)
1000446a:	83 c4 10             	add    esp,0x10
1000446d:	eb 01                	jmp    10004470 <firstRun(bool)+0x1ad1>
1000446f:	90                   	nop
10004470:	e8 fc ff ff ff       	call   10004471 <firstRun(bool)+0x1ad2>	10004471: R_386_PC32	drawBootScreen()
10004475:	83 ec 0c             	sub    esp,0xc
10004478:	68 58 1b 00 00       	push   0x1b58
1000447d:	e8 fc ff ff ff       	call   1000447e <firstRun(bool)+0x1adf>	1000447e: R_386_PC32	milliTenthSleep(unsigned int)
10004482:	83 c4 10             	add    esp,0x10
10004485:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10004487: R_386_32	installKey
1000448c:	e8 fc ff ff ff       	call   1000448d <firstRun(bool)+0x1aee>	1000448d: R_386_PC32	drawBootScreen()
10004491:	83 ec 0c             	sub    esp,0xc
10004494:	68 72 9c 00 10       	push   0x10009c72	10004495: R_386_32	.text
10004499:	6a 10                	push   0x10
1000449b:	6a 37                	push   0x37
1000449d:	6a 03                	push   0x3
1000449f:	6a 14                	push   0x14
100044a1:	e8 fc ff ff ff       	call   100044a2 <firstRun(bool)+0x1b03>	100044a2: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
100044a6:	83 c4 20             	add    esp,0x20
100044a9:	a1 00 00 00 00       	mov    eax,ds:0x0	100044aa: R_386_32	term
100044ae:	83 ec 04             	sub    esp,0x4
100044b1:	6a 06                	push   0x6
100044b3:	6a 16                	push   0x16
100044b5:	50                   	push   eax
100044b6:	e8 fc ff ff ff       	call   100044b7 <firstRun(bool)+0x1b18>	100044b7: R_386_PC32	VgaText::setCursor(int, int)
100044bb:	83 c4 10             	add    esp,0x10
100044be:	a1 00 00 00 00       	mov    eax,ds:0x0	100044bf: R_386_32	term
100044c3:	83 ec 08             	sub    esp,0x8
100044c6:	68 84 9c 00 10       	push   0x10009c84	100044c7: R_386_32	.text
100044cb:	50                   	push   eax
100044cc:	e8 fc ff ff ff       	call   100044cd <firstRun(bool)+0x1b2e>	100044cd: R_386_PC32	VgaText::puts(char const*)
100044d1:	83 c4 10             	add    esp,0x10
100044d4:	a1 00 00 00 00       	mov    eax,ds:0x0	100044d5: R_386_32	term
100044d9:	83 ec 04             	sub    esp,0x4
100044dc:	6a 07                	push   0x7
100044de:	6a 16                	push   0x16
100044e0:	50                   	push   eax
100044e1:	e8 fc ff ff ff       	call   100044e2 <firstRun(bool)+0x1b43>	100044e2: R_386_PC32	VgaText::setCursor(int, int)
100044e6:	83 c4 10             	add    esp,0x10
100044e9:	a1 00 00 00 00       	mov    eax,ds:0x0	100044ea: R_386_32	term
100044ee:	83 ec 08             	sub    esp,0x8
100044f1:	68 b8 9c 00 10       	push   0x10009cb8	100044f2: R_386_32	.text
100044f6:	50                   	push   eax
100044f7:	e8 fc ff ff ff       	call   100044f8 <firstRun(bool)+0x1b59>	100044f8: R_386_PC32	VgaText::puts(char const*)
100044fc:	83 c4 10             	add    esp,0x10
100044ff:	a1 00 00 00 00       	mov    eax,ds:0x0	10004500: R_386_32	term
10004504:	83 ec 04             	sub    esp,0x4
10004507:	6a 18                	push   0x18
10004509:	6a 11                	push   0x11
1000450b:	50                   	push   eax
1000450c:	e8 fc ff ff ff       	call   1000450d <firstRun(bool)+0x1b6e>	1000450d: R_386_PC32	VgaText::setCursor(int, int)
10004511:	83 c4 10             	add    esp,0x10
10004514:	a1 00 00 00 00       	mov    eax,ds:0x0	10004515: R_386_32	term
10004519:	6a 0b                	push   0xb
1000451b:	6a 03                	push   0x3
1000451d:	68 2a 9c 00 10       	push   0x10009c2a	1000451e: R_386_32	.text
10004522:	50                   	push   eax
10004523:	e8 fc ff ff ff       	call   10004524 <firstRun(bool)+0x1b85>	10004524: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10004528:	83 c4 10             	add    esp,0x10
1000452b:	c7 45 8c 03 00 00 00 	mov    DWORD PTR [ebp-0x74],0x3
10004532:	8d 85 c8 fe ff ff    	lea    eax,[ebp-0x138]
10004538:	bb 30 9f 00 10       	mov    ebx,0x10009f30	10004539: R_386_32	.text
1000453d:	ba 03 00 00 00       	mov    edx,0x3
10004542:	89 c7                	mov    edi,eax
10004544:	89 de                	mov    esi,ebx
10004546:	89 d1                	mov    ecx,edx
10004548:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000454a:	c7 45 bc 00 00 00 00 	mov    DWORD PTR [ebp-0x44],0x0
10004551:	8b 45 bc             	mov    eax,DWORD PTR [ebp-0x44]
10004554:	3b 45 8c             	cmp    eax,DWORD PTR [ebp-0x74]
10004557:	7d 68                	jge    100045c1 <firstRun(bool)+0x1c22>
10004559:	a1 00 00 00 00       	mov    eax,ds:0x0	1000455a: R_386_32	term
1000455e:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
10004561:	83 c2 09             	add    edx,0x9
10004564:	83 ec 04             	sub    esp,0x4
10004567:	52                   	push   edx
10004568:	6a 16                	push   0x16
1000456a:	50                   	push   eax
1000456b:	e8 fc ff ff ff       	call   1000456c <firstRun(bool)+0x1bcd>	1000456c: R_386_PC32	VgaText::setCursor(int, int)
10004570:	83 c4 10             	add    esp,0x10
10004573:	a1 00 00 00 00       	mov    eax,ds:0x0	10004574: R_386_32	term
10004578:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	1000457a: R_386_32	modesel
1000457e:	39 55 bc             	cmp    DWORD PTR [ebp-0x44],edx
10004581:	75 07                	jne    1000458a <firstRun(bool)+0x1beb>
10004583:	bb 00 00 00 00       	mov    ebx,0x0
10004588:	eb 05                	jmp    1000458f <firstRun(bool)+0x1bf0>
1000458a:	bb 0f 00 00 00       	mov    ebx,0xf
1000458f:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10004591: R_386_32	modesel
10004595:	39 55 bc             	cmp    DWORD PTR [ebp-0x44],edx
10004598:	75 07                	jne    100045a1 <firstRun(bool)+0x1c02>
1000459a:	b9 0f 00 00 00       	mov    ecx,0xf
1000459f:	eb 05                	jmp    100045a6 <firstRun(bool)+0x1c07>
100045a1:	b9 00 00 00 00       	mov    ecx,0x0
100045a6:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
100045a9:	8b 94 95 c8 fe ff ff 	mov    edx,DWORD PTR [ebp+edx*4-0x138]
100045b0:	53                   	push   ebx
100045b1:	51                   	push   ecx
100045b2:	52                   	push   edx
100045b3:	50                   	push   eax
100045b4:	e8 fc ff ff ff       	call   100045b5 <firstRun(bool)+0x1c16>	100045b5: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
100045b9:	83 c4 10             	add    esp,0x10
100045bc:	ff 45 bc             	inc    DWORD PTR [ebp-0x44]
100045bf:	eb 90                	jmp    10004551 <firstRun(bool)+0x1bb2>
100045c1:	a0 00 00 00 00       	mov    al,ds:0x0	100045c2: R_386_32	installKey
100045c6:	84 c0                	test   al,al
100045c8:	0f 94 c0             	sete   al
100045cb:	84 c0                	test   al,al
100045cd:	74 02                	je     100045d1 <firstRun(bool)+0x1c32>
100045cf:	eb f0                	jmp    100045c1 <firstRun(bool)+0x1c22>
100045d1:	a1 00 00 00 00       	mov    eax,ds:0x0	100045d2: R_386_32	term
100045d6:	05 82 00 00 00       	add    eax,0x82
100045db:	83 ec 04             	sub    esp,0x4
100045de:	6a 04                	push   0x4
100045e0:	6a 00                	push   0x0
100045e2:	50                   	push   eax
100045e3:	e8 fc ff ff ff       	call   100045e4 <firstRun(bool)+0x1c45>	100045e4: R_386_PC32	memset
100045e8:	83 c4 10             	add    esp,0x10
100045eb:	a1 00 00 00 00       	mov    eax,ds:0x0	100045ec: R_386_32	term
100045f0:	05 02 01 00 00       	add    eax,0x102
100045f5:	83 ec 04             	sub    esp,0x4
100045f8:	6a 04                	push   0x4
100045fa:	6a 00                	push   0x0
100045fc:	50                   	push   eax
100045fd:	e8 fc ff ff ff       	call   100045fe <firstRun(bool)+0x1c5f>	100045fe: R_386_PC32	memset
10004602:	83 c4 10             	add    esp,0x10
10004605:	a0 00 00 00 00       	mov    al,ds:0x0	10004606: R_386_32	installKey
1000460a:	3c 01                	cmp    al,0x1
1000460c:	0f 94 c0             	sete   al
1000460f:	84 c0                	test   al,al
10004611:	74 20                	je     10004633 <firstRun(bool)+0x1c94>
10004613:	a1 00 00 00 00       	mov    eax,ds:0x0	10004614: R_386_32	modesel
10004618:	48                   	dec    eax
10004619:	a3 00 00 00 00       	mov    ds:0x0,eax	1000461a: R_386_32	modesel
1000461e:	a1 00 00 00 00       	mov    eax,ds:0x0	1000461f: R_386_32	modesel
10004623:	85 c0                	test   eax,eax
10004625:	79 5a                	jns    10004681 <firstRun(bool)+0x1ce2>
10004627:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10004629: R_386_32	modesel
10004631:	eb 4e                	jmp    10004681 <firstRun(bool)+0x1ce2>
10004633:	a0 00 00 00 00       	mov    al,ds:0x0	10004634: R_386_32	installKey
10004638:	3c 02                	cmp    al,0x2
1000463a:	0f 94 c0             	sete   al
1000463d:	84 c0                	test   al,al
1000463f:	74 20                	je     10004661 <firstRun(bool)+0x1cc2>
10004641:	a1 00 00 00 00       	mov    eax,ds:0x0	10004642: R_386_32	modesel
10004646:	40                   	inc    eax
10004647:	a3 00 00 00 00       	mov    ds:0x0,eax	10004648: R_386_32	modesel
1000464c:	a1 00 00 00 00       	mov    eax,ds:0x0	1000464d: R_386_32	modesel
10004651:	39 45 8c             	cmp    DWORD PTR [ebp-0x74],eax
10004654:	7f 2b                	jg     10004681 <firstRun(bool)+0x1ce2>
10004656:	8b 45 8c             	mov    eax,DWORD PTR [ebp-0x74]
10004659:	48                   	dec    eax
1000465a:	a3 00 00 00 00       	mov    ds:0x0,eax	1000465b: R_386_32	modesel
1000465f:	eb 20                	jmp    10004681 <firstRun(bool)+0x1ce2>
10004661:	a0 00 00 00 00       	mov    al,ds:0x0	10004662: R_386_32	installKey
10004666:	3c 0a                	cmp    al,0xa
10004668:	0f 94 c0             	sete   al
1000466b:	84 c0                	test   al,al
1000466d:	75 2e                	jne    1000469d <firstRun(bool)+0x1cfe>
1000466f:	a0 00 00 00 00       	mov    al,ds:0x0	10004670: R_386_32	installKey
10004674:	3c 1b                	cmp    al,0x1b
10004676:	0f 94 c0             	sete   al
10004679:	84 c0                	test   al,al
1000467b:	0f 85 ab fa ff ff    	jne    1000412c <firstRun(bool)+0x178d>
10004681:	83 ec 0c             	sub    esp,0xc
10004684:	68 f4 01 00 00       	push   0x1f4
10004689:	e8 fc ff ff ff       	call   1000468a <firstRun(bool)+0x1ceb>	1000468a: R_386_PC32	milliTenthSleep(unsigned int)
1000468e:	83 c4 10             	add    esp,0x10
10004691:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10004693: R_386_32	installKey
10004698:	e9 ad fe ff ff       	jmp    1000454a <firstRun(bool)+0x1bab>
1000469d:	90                   	nop
1000469e:	80 bd a4 fe ff ff 00 	cmp    BYTE PTR [ebp-0x15c],0x0
100046a5:	0f 84 ff 00 00 00    	je     100047aa <firstRun(bool)+0x1e0b>
100046ab:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100046ad: R_386_32	showSidebar
100046b2:	a1 00 00 00 00       	mov    eax,ds:0x0	100046b3: R_386_32	term
100046b7:	83 ec 0c             	sub    esp,0xc
100046ba:	50                   	push   eax
100046bb:	e8 fc ff ff ff       	call   100046bc <firstRun(bool)+0x1d1d>	100046bc: R_386_PC32	setActiveTerminal(VgaText*)
100046c0:	83 c4 10             	add    esp,0x10
100046c3:	e8 fc ff ff ff       	call   100046c4 <firstRun(bool)+0x1d25>	100046c4: R_386_PC32	drawBootScreen()
100046c8:	83 ec 0c             	sub    esp,0xc
100046cb:	68 ed 9c 00 10       	push   0x10009ced	100046cc: R_386_32	.text
100046d0:	6a 0d                	push   0xd
100046d2:	6a 32                	push   0x32
100046d4:	6a 05                	push   0x5
100046d6:	6a 16                	push   0x16
100046d8:	e8 fc ff ff ff       	call   100046d9 <firstRun(bool)+0x1d3a>	100046d9: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
100046dd:	83 c4 20             	add    esp,0x20
100046e0:	a1 00 00 00 00       	mov    eax,ds:0x0	100046e1: R_386_32	term
100046e5:	83 ec 04             	sub    esp,0x4
100046e8:	6a 08                	push   0x8
100046ea:	6a 18                	push   0x18
100046ec:	50                   	push   eax
100046ed:	e8 fc ff ff ff       	call   100046ee <firstRun(bool)+0x1d4f>	100046ee: R_386_PC32	VgaText::setCursor(int, int)
100046f2:	83 c4 10             	add    esp,0x10
100046f5:	a1 00 00 00 00       	mov    eax,ds:0x0	100046f6: R_386_32	term
100046fa:	83 ec 08             	sub    esp,0x8
100046fd:	68 04 9d 00 10       	push   0x10009d04	100046fe: R_386_32	.text
10004702:	50                   	push   eax
10004703:	e8 fc ff ff ff       	call   10004704 <firstRun(bool)+0x1d65>	10004704: R_386_PC32	VgaText::puts(char const*)
10004708:	83 c4 10             	add    esp,0x10
1000470b:	a1 00 00 00 00       	mov    eax,ds:0x0	1000470c: R_386_32	term
10004710:	83 ec 04             	sub    esp,0x4
10004713:	6a 0a                	push   0xa
10004715:	6a 18                	push   0x18
10004717:	50                   	push   eax
10004718:	e8 fc ff ff ff       	call   10004719 <firstRun(bool)+0x1d7a>	10004719: R_386_PC32	VgaText::setCursor(int, int)
1000471d:	83 c4 10             	add    esp,0x10
10004720:	a1 00 00 00 00       	mov    eax,ds:0x0	10004721: R_386_32	term
10004725:	83 ec 08             	sub    esp,0x8
10004728:	68 2c 9d 00 10       	push   0x10009d2c	10004729: R_386_32	.text
1000472d:	50                   	push   eax
1000472e:	e8 fc ff ff ff       	call   1000472f <firstRun(bool)+0x1d90>	1000472f: R_386_PC32	VgaText::puts(char const*)
10004733:	83 c4 10             	add    esp,0x10
10004736:	a1 00 00 00 00       	mov    eax,ds:0x0	10004737: R_386_32	term
1000473b:	83 ec 04             	sub    esp,0x4
1000473e:	6a 0b                	push   0xb
10004740:	6a 18                	push   0x18
10004742:	50                   	push   eax
10004743:	e8 fc ff ff ff       	call   10004744 <firstRun(bool)+0x1da5>	10004744: R_386_PC32	VgaText::setCursor(int, int)
10004748:	83 c4 10             	add    esp,0x10
1000474b:	a1 00 00 00 00       	mov    eax,ds:0x0	1000474c: R_386_32	term
10004750:	83 ec 08             	sub    esp,0x8
10004753:	68 55 9d 00 10       	push   0x10009d55	10004754: R_386_32	.text
10004758:	50                   	push   eax
10004759:	e8 fc ff ff ff       	call   1000475a <firstRun(bool)+0x1dbb>	1000475a: R_386_PC32	VgaText::puts(char const*)
1000475e:	83 c4 10             	add    esp,0x10
10004761:	a1 00 00 00 00       	mov    eax,ds:0x0	10004762: R_386_32	term
10004766:	83 ec 04             	sub    esp,0x4
10004769:	6a 0e                	push   0xe
1000476b:	6a 18                	push   0x18
1000476d:	50                   	push   eax
1000476e:	e8 fc ff ff ff       	call   1000476f <firstRun(bool)+0x1dd0>	1000476f: R_386_PC32	VgaText::setCursor(int, int)
10004773:	83 c4 10             	add    esp,0x10
10004776:	a1 00 00 00 00       	mov    eax,ds:0x0	10004777: R_386_32	term
1000477b:	83 ec 08             	sub    esp,0x8
1000477e:	68 64 9d 00 10       	push   0x10009d64	1000477f: R_386_32	.text
10004783:	50                   	push   eax
10004784:	e8 fc ff ff ff       	call   10004785 <firstRun(bool)+0x1de6>	10004785: R_386_PC32	VgaText::puts(char const*)
10004789:	83 c4 10             	add    esp,0x10
1000478c:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	1000478e: R_386_32	installKey
10004793:	a0 00 00 00 00       	mov    al,ds:0x0	10004794: R_386_32	installKey
10004798:	84 c0                	test   al,al
1000479a:	0f 94 c0             	sete   al
1000479d:	84 c0                	test   al,al
1000479f:	74 02                	je     100047a3 <firstRun(bool)+0x1e04>
100047a1:	eb f0                	jmp    10004793 <firstRun(bool)+0x1df4>
100047a3:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100047a5: R_386_32	installKey
100047aa:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100047ac: R_386_32	installKey
100047b1:	83 ec 0c             	sub    esp,0xc
100047b4:	68 84 03 00 00       	push   0x384
100047b9:	e8 fc ff ff ff       	call   100047ba <firstRun(bool)+0x1e1b>	100047ba: R_386_PC32	milliTenthSleep(unsigned int)
100047be:	83 c4 10             	add    esp,0x10
100047c1:	e8 fc ff ff ff       	call   100047c2 <firstRun(bool)+0x1e23>	100047c2: R_386_PC32	drawBootScreen()
100047c6:	83 ec 0c             	sub    esp,0xc
100047c9:	68 18 2e 00 00       	push   0x2e18
100047ce:	e8 fc ff ff ff       	call   100047cf <firstRun(bool)+0x1e30>	100047cf: R_386_PC32	milliTenthSleep(unsigned int)
100047d3:	83 c4 10             	add    esp,0x10
100047d6:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
100047dd:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100047df: R_386_32	installKey
100047e4:	e8 fc ff ff ff       	call   100047e5 <firstRun(bool)+0x1e46>	100047e5: R_386_PC32	drawBootScreen()
100047e9:	83 ec 0c             	sub    esp,0xc
100047ec:	68 8e 9d 00 10       	push   0x10009d8e	100047ed: R_386_32	.text
100047f1:	6a 0e                	push   0xe
100047f3:	6a 32                	push   0x32
100047f5:	6a 02                	push   0x2
100047f7:	6a 16                	push   0x16
100047f9:	e8 fc ff ff ff       	call   100047fa <firstRun(bool)+0x1e5b>	100047fa: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
100047fe:	83 c4 20             	add    esp,0x20
10004801:	a1 00 00 00 00       	mov    eax,ds:0x0	10004802: R_386_32	term
10004806:	83 ec 04             	sub    esp,0x4
10004809:	6a 18                	push   0x18
1000480b:	6a 11                	push   0x11
1000480d:	50                   	push   eax
1000480e:	e8 fc ff ff ff       	call   1000480f <firstRun(bool)+0x1e70>	1000480f: R_386_PC32	VgaText::setCursor(int, int)
10004813:	83 c4 10             	add    esp,0x10
10004816:	a1 00 00 00 00       	mov    eax,ds:0x0	10004817: R_386_32	term
1000481b:	6a 0b                	push   0xb
1000481d:	6a 03                	push   0x3
1000481f:	68 2a 9c 00 10       	push   0x10009c2a	10004820: R_386_32	.text
10004824:	50                   	push   eax
10004825:	e8 fc ff ff ff       	call   10004826 <firstRun(bool)+0x1e87>	10004826: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
1000482a:	83 c4 10             	add    esp,0x10
1000482d:	a1 00 00 00 00       	mov    eax,ds:0x0	1000482e: R_386_32	term
10004832:	83 ec 04             	sub    esp,0x4
10004835:	6a 05                	push   0x5
10004837:	6a 18                	push   0x18
10004839:	50                   	push   eax
1000483a:	e8 fc ff ff ff       	call   1000483b <firstRun(bool)+0x1e9c>	1000483b: R_386_PC32	VgaText::setCursor(int, int)
1000483f:	83 c4 10             	add    esp,0x10
10004842:	a1 00 00 00 00       	mov    eax,ds:0x0	10004843: R_386_32	term
10004847:	83 ec 08             	sub    esp,0x8
1000484a:	68 9c 9d 00 10       	push   0x10009d9c	1000484b: R_386_32	.text
1000484f:	50                   	push   eax
10004850:	e8 fc ff ff ff       	call   10004851 <firstRun(bool)+0x1eb2>	10004851: R_386_PC32	VgaText::puts(char const*)
10004855:	83 c4 10             	add    esp,0x10
10004858:	a1 00 00 00 00       	mov    eax,ds:0x0	10004859: R_386_32	term
1000485d:	83 ec 04             	sub    esp,0x4
10004860:	6a 06                	push   0x6
10004862:	6a 18                	push   0x18
10004864:	50                   	push   eax
10004865:	e8 fc ff ff ff       	call   10004866 <firstRun(bool)+0x1ec7>	10004866: R_386_PC32	VgaText::setCursor(int, int)
1000486a:	83 c4 10             	add    esp,0x10
1000486d:	a1 00 00 00 00       	mov    eax,ds:0x0	1000486e: R_386_32	term
10004872:	83 ec 08             	sub    esp,0x8
10004875:	68 00 9c 00 10       	push   0x10009c00	10004876: R_386_32	.text
1000487a:	50                   	push   eax
1000487b:	e8 fc ff ff ff       	call   1000487c <firstRun(bool)+0x1edd>	1000487c: R_386_PC32	VgaText::puts(char const*)
10004880:	83 c4 10             	add    esp,0x10
10004883:	c6 05 10 00 00 00 00 	mov    BYTE PTR ds:0x10,0x0	10004885: R_386_32	pkeybuf
1000488a:	c6 05 11 00 00 00 00 	mov    BYTE PTR ds:0x11,0x0	1000488c: R_386_32	pkeybuf
10004891:	a1 00 00 00 00       	mov    eax,ds:0x0	10004892: R_386_32	term
10004896:	83 ec 04             	sub    esp,0x4
10004899:	6a 08                	push   0x8
1000489b:	6a 1c                	push   0x1c
1000489d:	50                   	push   eax
1000489e:	e8 fc ff ff ff       	call   1000489f <firstRun(bool)+0x1f00>	1000489f: R_386_PC32	VgaText::setCursor(int, int)
100048a3:	83 c4 10             	add    esp,0x10
100048a6:	a1 00 00 00 00       	mov    eax,ds:0x0	100048a7: R_386_32	term
100048ab:	83 ec 08             	sub    esp,0x8
100048ae:	68 00 00 00 00       	push   0x0	100048af: R_386_32	pkeybuf
100048b3:	50                   	push   eax
100048b4:	e8 fc ff ff ff       	call   100048b5 <firstRun(bool)+0x1f16>	100048b5: R_386_PC32	VgaText::puts(char const*)
100048b9:	83 c4 10             	add    esp,0x10
100048bc:	a1 00 00 00 00       	mov    eax,ds:0x0	100048bd: R_386_32	term
100048c1:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
100048c4:	83 c2 1c             	add    edx,0x1c
100048c7:	83 ec 04             	sub    esp,0x4
100048ca:	6a 08                	push   0x8
100048cc:	52                   	push   edx
100048cd:	50                   	push   eax
100048ce:	e8 fc ff ff ff       	call   100048cf <firstRun(bool)+0x1f30>	100048cf: R_386_PC32	VgaText::setCursor(int, int)
100048d3:	83 c4 10             	add    esp,0x10
100048d6:	a1 00 00 00 00       	mov    eax,ds:0x0	100048d7: R_386_32	term
100048db:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
100048de:	81 c2 00 00 00 00    	add    edx,0x0	100048e0: R_386_32	pkeybuf
100048e4:	8a 12                	mov    dl,BYTE PTR [edx]
100048e6:	0f be d2             	movsx  edx,dl
100048e9:	6a 00                	push   0x0
100048eb:	6a 0f                	push   0xf
100048ed:	52                   	push   edx
100048ee:	50                   	push   eax
100048ef:	e8 fc ff ff ff       	call   100048f0 <firstRun(bool)+0x1f51>	100048f0: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
100048f4:	83 c4 10             	add    esp,0x10
100048f7:	a1 00 00 00 00       	mov    eax,ds:0x0	100048f8: R_386_32	term
100048fc:	83 ec 04             	sub    esp,0x4
100048ff:	6a 08                	push   0x8
10004901:	6a 2c                	push   0x2c
10004903:	50                   	push   eax
10004904:	e8 fc ff ff ff       	call   10004905 <firstRun(bool)+0x1f66>	10004905: R_386_PC32	VgaText::setCursor(int, int)
10004909:	83 c4 10             	add    esp,0x10
1000490c:	a1 00 00 00 00       	mov    eax,ds:0x0	1000490d: R_386_32	term
10004911:	6a 0f                	push   0xf
10004913:	6a 0f                	push   0xf
10004915:	6a 20                	push   0x20
10004917:	50                   	push   eax
10004918:	e8 fc ff ff ff       	call   10004919 <firstRun(bool)+0x1f7a>	10004919: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
1000491d:	83 c4 10             	add    esp,0x10
10004920:	a1 00 00 00 00       	mov    eax,ds:0x0	10004921: R_386_32	term
10004925:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10004928:	83 c2 1c             	add    edx,0x1c
1000492b:	83 ec 04             	sub    esp,0x4
1000492e:	6a 08                	push   0x8
10004930:	52                   	push   edx
10004931:	50                   	push   eax
10004932:	e8 fc ff ff ff       	call   10004933 <firstRun(bool)+0x1f94>	10004933: R_386_PC32	VgaText::setCursor(int, int)
10004937:	83 c4 10             	add    esp,0x10
1000493a:	a0 00 00 00 00       	mov    al,ds:0x0	1000493b: R_386_32	installKey
1000493f:	84 c0                	test   al,al
10004941:	0f 94 c0             	sete   al
10004944:	84 c0                	test   al,al
10004946:	74 02                	je     1000494a <firstRun(bool)+0x1fab>
10004948:	eb f0                	jmp    1000493a <firstRun(bool)+0x1f9b>
1000494a:	a1 00 00 00 00       	mov    eax,ds:0x0	1000494b: R_386_32	term
1000494f:	05 82 00 00 00       	add    eax,0x82
10004954:	83 ec 04             	sub    esp,0x4
10004957:	6a 10                	push   0x10
10004959:	6a 00                	push   0x0
1000495b:	50                   	push   eax
1000495c:	e8 fc ff ff ff       	call   1000495d <firstRun(bool)+0x1fbe>	1000495d: R_386_PC32	memset
10004961:	83 c4 10             	add    esp,0x10
10004964:	a1 00 00 00 00       	mov    eax,ds:0x0	10004965: R_386_32	term
10004969:	05 02 01 00 00       	add    eax,0x102
1000496e:	83 ec 04             	sub    esp,0x4
10004971:	6a 10                	push   0x10
10004973:	6a 00                	push   0x0
10004975:	50                   	push   eax
10004976:	e8 fc ff ff ff       	call   10004977 <firstRun(bool)+0x1fd8>	10004977: R_386_PC32	memset
1000497b:	83 c4 10             	add    esp,0x10
1000497e:	a0 00 00 00 00       	mov    al,ds:0x0	1000497f: R_386_32	installKey
10004983:	3c 03                	cmp    al,0x3
10004985:	74 09                	je     10004990 <firstRun(bool)+0x1ff1>
10004987:	a0 00 00 00 00       	mov    al,ds:0x0	10004988: R_386_32	installKey
1000498c:	3c 08                	cmp    al,0x8
1000498e:	75 04                	jne    10004994 <firstRun(bool)+0x1ff5>
10004990:	b0 01                	mov    al,0x1
10004992:	eb 02                	jmp    10004996 <firstRun(bool)+0x1ff7>
10004994:	b0 00                	mov    al,0x0
10004996:	84 c0                	test   al,al
10004998:	74 31                	je     100049cb <firstRun(bool)+0x202c>
1000499a:	ff 4d e4             	dec    DWORD PTR [ebp-0x1c]
1000499d:	83 7d e4 ff          	cmp    DWORD PTR [ebp-0x1c],0xffffffff
100049a1:	75 14                	jne    100049b7 <firstRun(bool)+0x2018>
100049a3:	83 ec 0c             	sub    esp,0xc
100049a6:	68 00 00 00 00       	push   0x0	100049a7: R_386_32	pkeybuf
100049ab:	e8 fc ff ff ff       	call   100049ac <firstRun(bool)+0x200d>	100049ac: R_386_PC32	strlen
100049b0:	83 c4 10             	add    esp,0x10
100049b3:	48                   	dec    eax
100049b4:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
100049b7:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
100049ba:	05 00 00 00 00       	add    eax,0x0	100049bb: R_386_32	pkeybuf
100049bf:	8a 00                	mov    al,BYTE PTR [eax]
100049c1:	3c 2d                	cmp    al,0x2d
100049c3:	0f 85 6f 03 00 00    	jne    10004d38 <firstRun(bool)+0x2399>
100049c9:	eb cf                	jmp    1000499a <firstRun(bool)+0x1ffb>
100049cb:	a0 00 00 00 00       	mov    al,ds:0x0	100049cc: R_386_32	installKey
100049d0:	3c 2f                	cmp    al,0x2f
100049d2:	7e 09                	jle    100049dd <firstRun(bool)+0x203e>
100049d4:	a0 00 00 00 00       	mov    al,ds:0x0	100049d5: R_386_32	installKey
100049d9:	3c 39                	cmp    al,0x39
100049db:	7e 36                	jle    10004a13 <firstRun(bool)+0x2074>
100049dd:	a0 00 00 00 00       	mov    al,ds:0x0	100049de: R_386_32	installKey
100049e2:	3c 40                	cmp    al,0x40
100049e4:	7e 09                	jle    100049ef <firstRun(bool)+0x2050>
100049e6:	a0 00 00 00 00       	mov    al,ds:0x0	100049e7: R_386_32	installKey
100049eb:	3c 5a                	cmp    al,0x5a
100049ed:	7e 24                	jle    10004a13 <firstRun(bool)+0x2074>
100049ef:	a0 00 00 00 00       	mov    al,ds:0x0	100049f0: R_386_32	installKey
100049f4:	3c 60                	cmp    al,0x60
100049f6:	7e 09                	jle    10004a01 <firstRun(bool)+0x2062>
100049f8:	a0 00 00 00 00       	mov    al,ds:0x0	100049f9: R_386_32	installKey
100049fd:	3c 7a                	cmp    al,0x7a
100049ff:	7e 12                	jle    10004a13 <firstRun(bool)+0x2074>
10004a01:	a0 00 00 00 00       	mov    al,ds:0x0	10004a02: R_386_32	installKey
10004a06:	3c 20                	cmp    al,0x20
10004a08:	74 09                	je     10004a13 <firstRun(bool)+0x2074>
10004a0a:	a0 00 00 00 00       	mov    al,ds:0x0	10004a0b: R_386_32	installKey
10004a0f:	3c 04                	cmp    al,0x4
10004a11:	75 04                	jne    10004a17 <firstRun(bool)+0x2078>
10004a13:	b0 01                	mov    al,0x1
10004a15:	eb 02                	jmp    10004a19 <firstRun(bool)+0x207a>
10004a17:	b0 00                	mov    al,0x0
10004a19:	84 c0                	test   al,al
10004a1b:	0f 84 a3 00 00 00    	je     10004ac4 <firstRun(bool)+0x2125>
10004a21:	a0 00 00 00 00       	mov    al,ds:0x0	10004a22: R_386_32	installKey
10004a26:	3c 2f                	cmp    al,0x2f
10004a28:	7e 09                	jle    10004a33 <firstRun(bool)+0x2094>
10004a2a:	a0 00 00 00 00       	mov    al,ds:0x0	10004a2b: R_386_32	installKey
10004a2f:	3c 39                	cmp    al,0x39
10004a31:	7e 24                	jle    10004a57 <firstRun(bool)+0x20b8>
10004a33:	a0 00 00 00 00       	mov    al,ds:0x0	10004a34: R_386_32	installKey
10004a38:	3c 40                	cmp    al,0x40
10004a3a:	7e 09                	jle    10004a45 <firstRun(bool)+0x20a6>
10004a3c:	a0 00 00 00 00       	mov    al,ds:0x0	10004a3d: R_386_32	installKey
10004a41:	3c 5a                	cmp    al,0x5a
10004a43:	7e 12                	jle    10004a57 <firstRun(bool)+0x20b8>
10004a45:	a0 00 00 00 00       	mov    al,ds:0x0	10004a46: R_386_32	installKey
10004a4a:	3c 60                	cmp    al,0x60
10004a4c:	7e 0d                	jle    10004a5b <firstRun(bool)+0x20bc>
10004a4e:	a0 00 00 00 00       	mov    al,ds:0x0	10004a4f: R_386_32	installKey
10004a53:	3c 7a                	cmp    al,0x7a
10004a55:	7f 04                	jg     10004a5b <firstRun(bool)+0x20bc>
10004a57:	b0 01                	mov    al,0x1
10004a59:	eb 02                	jmp    10004a5d <firstRun(bool)+0x20be>
10004a5b:	b0 00                	mov    al,0x0
10004a5d:	84 c0                	test   al,al
10004a5f:	74 2c                	je     10004a8d <firstRun(bool)+0x20ee>
10004a61:	a0 00 00 00 00       	mov    al,ds:0x0	10004a62: R_386_32	installKey
10004a66:	3c 60                	cmp    al,0x60
10004a68:	7e 13                	jle    10004a7d <firstRun(bool)+0x20de>
10004a6a:	a0 00 00 00 00       	mov    al,ds:0x0	10004a6b: R_386_32	installKey
10004a6f:	3c 7a                	cmp    al,0x7a
10004a71:	7f 0a                	jg     10004a7d <firstRun(bool)+0x20de>
10004a73:	a0 00 00 00 00       	mov    al,ds:0x0	10004a74: R_386_32	installKey
10004a78:	83 e8 20             	sub    eax,0x20
10004a7b:	eb 05                	jmp    10004a82 <firstRun(bool)+0x20e3>
10004a7d:	a0 00 00 00 00       	mov    al,ds:0x0	10004a7e: R_386_32	installKey
10004a82:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10004a85:	81 c2 00 00 00 00    	add    edx,0x0	10004a87: R_386_32	pkeybuf
10004a8b:	88 02                	mov    BYTE PTR [edx],al
10004a8d:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
10004a90:	83 ec 0c             	sub    esp,0xc
10004a93:	68 00 00 00 00       	push   0x0	10004a94: R_386_32	pkeybuf
10004a98:	e8 fc ff ff ff       	call   10004a99 <firstRun(bool)+0x20fa>	10004a99: R_386_PC32	strlen
10004a9d:	83 c4 10             	add    esp,0x10
10004aa0:	89 c2                	mov    edx,eax
10004aa2:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10004aa5:	39 c2                	cmp    edx,eax
10004aa7:	77 07                	ja     10004ab0 <firstRun(bool)+0x2111>
10004aa9:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
10004ab0:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10004ab3:	05 00 00 00 00       	add    eax,0x0	10004ab4: R_386_32	pkeybuf
10004ab8:	8a 00                	mov    al,BYTE PTR [eax]
10004aba:	3c 2d                	cmp    al,0x2d
10004abc:	0f 85 76 02 00 00    	jne    10004d38 <firstRun(bool)+0x2399>
10004ac2:	eb c9                	jmp    10004a8d <firstRun(bool)+0x20ee>
10004ac4:	a0 00 00 00 00       	mov    al,ds:0x0	10004ac5: R_386_32	installKey
10004ac9:	3c 1b                	cmp    al,0x1b
10004acb:	0f 94 c0             	sete   al
10004ace:	84 c0                	test   al,al
10004ad0:	0f 85 99 f9 ff ff    	jne    1000446f <firstRun(bool)+0x1ad0>
10004ad6:	a0 00 00 00 00       	mov    al,ds:0x0	10004ad7: R_386_32	installKey
10004adb:	3c 0a                	cmp    al,0xa
10004add:	0f 94 c0             	sete   al
10004ae0:	84 c0                	test   al,al
10004ae2:	0f 84 50 02 00 00    	je     10004d38 <firstRun(bool)+0x2399>
10004ae8:	83 ec 0c             	sub    esp,0xc
10004aeb:	68 00 00 00 00       	push   0x0	10004aec: R_386_32	pkeybuf
10004af0:	e8 fc ff ff ff       	call   10004af1 <firstRun(bool)+0x2152>	10004af1: R_386_PC32	checkExtendedKey(char*)
10004af5:	83 c4 10             	add    esp,0x10
10004af8:	85 c0                	test   eax,eax
10004afa:	0f 95 c0             	setne  al
10004afd:	88 45 87             	mov    BYTE PTR [ebp-0x79],al
10004b00:	80 7d 87 00          	cmp    BYTE PTR [ebp-0x79],0x0
10004b04:	74 5b                	je     10004b61 <firstRun(bool)+0x21c2>
10004b06:	83 ec 0c             	sub    esp,0xc
10004b09:	68 f0 0a 00 00       	push   0xaf0
10004b0e:	e8 fc ff ff ff       	call   10004b0f <firstRun(bool)+0x2170>	10004b0f: R_386_PC32	milliTenthSleep(unsigned int)
10004b13:	83 c4 10             	add    esp,0x10
10004b16:	e8 fc ff ff ff       	call   10004b17 <firstRun(bool)+0x2178>	10004b17: R_386_PC32	drawBootScreen()
10004b1b:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10004b1d: R_386_32	installKey
10004b22:	83 ec 0c             	sub    esp,0xc
10004b25:	68 84 03 00 00       	push   0x384
10004b2a:	e8 fc ff ff ff       	call   10004b2b <firstRun(bool)+0x218c>	10004b2b: R_386_PC32	milliTenthSleep(unsigned int)
10004b2f:	83 c4 10             	add    esp,0x10
10004b32:	e8 fc ff ff ff       	call   10004b33 <firstRun(bool)+0x2194>	10004b33: R_386_PC32	drawBootScreen()
10004b37:	83 ec 0c             	sub    esp,0xc
10004b3a:	68 c0 12 00 00       	push   0x12c0
10004b3f:	e8 fc ff ff ff       	call   10004b40 <firstRun(bool)+0x21a1>	10004b40: R_386_PC32	milliTenthSleep(unsigned int)
10004b44:	83 c4 10             	add    esp,0x10
10004b47:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10004b49: R_386_32	installKey
10004b4e:	90                   	nop
10004b4f:	80 bd a4 fe ff ff 00 	cmp    BYTE PTR [ebp-0x15c],0x0
10004b56:	0f 84 e8 01 00 00    	je     10004d44 <firstRun(bool)+0x23a5>
10004b5c:	e9 d2 02 00 00       	jmp    10004e33 <firstRun(bool)+0x2494>
10004b61:	83 ec 0c             	sub    esp,0xc
10004b64:	68 f0 0a 00 00       	push   0xaf0
10004b69:	e8 fc ff ff ff       	call   10004b6a <firstRun(bool)+0x21cb>	10004b6a: R_386_PC32	milliTenthSleep(unsigned int)
10004b6e:	83 c4 10             	add    esp,0x10
10004b71:	e8 fc ff ff ff       	call   10004b72 <firstRun(bool)+0x21d3>	10004b72: R_386_PC32	drawBootScreen()
10004b76:	83 ec 08             	sub    esp,0x8
10004b79:	6a 01                	push   0x1
10004b7b:	68 8e 9d 00 10       	push   0x10009d8e	10004b7c: R_386_32	.text
10004b80:	6a 0e                	push   0xe
10004b82:	6a 32                	push   0x32
10004b84:	6a 02                	push   0x2
10004b86:	6a 16                	push   0x16
10004b88:	e8 fc ff ff ff       	call   10004b89 <firstRun(bool)+0x21ea>	10004b89: R_386_PC32	drawBasicWindowX(int, int, int, int, char const*, bool)
10004b8d:	83 c4 20             	add    esp,0x20
10004b90:	a1 00 00 00 00       	mov    eax,ds:0x0	10004b91: R_386_32	term
10004b95:	83 ec 04             	sub    esp,0x4
10004b98:	6a 05                	push   0x5
10004b9a:	6a 18                	push   0x18
10004b9c:	50                   	push   eax
10004b9d:	e8 fc ff ff ff       	call   10004b9e <firstRun(bool)+0x21ff>	10004b9e: R_386_PC32	VgaText::setCursor(int, int)
10004ba2:	83 c4 10             	add    esp,0x10
10004ba5:	a1 00 00 00 00       	mov    eax,ds:0x0	10004ba6: R_386_32	term
10004baa:	6a 07                	push   0x7
10004bac:	6a 00                	push   0x0
10004bae:	68 9c 9d 00 10       	push   0x10009d9c	10004baf: R_386_32	.text
10004bb3:	50                   	push   eax
10004bb4:	e8 fc ff ff ff       	call   10004bb5 <firstRun(bool)+0x2216>	10004bb5: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10004bb9:	83 c4 10             	add    esp,0x10
10004bbc:	a1 00 00 00 00       	mov    eax,ds:0x0	10004bbd: R_386_32	term
10004bc1:	83 ec 04             	sub    esp,0x4
10004bc4:	6a 06                	push   0x6
10004bc6:	6a 18                	push   0x18
10004bc8:	50                   	push   eax
10004bc9:	e8 fc ff ff ff       	call   10004bca <firstRun(bool)+0x222b>	10004bca: R_386_PC32	VgaText::setCursor(int, int)
10004bce:	83 c4 10             	add    esp,0x10
10004bd1:	a1 00 00 00 00       	mov    eax,ds:0x0	10004bd2: R_386_32	term
10004bd6:	6a 07                	push   0x7
10004bd8:	6a 00                	push   0x0
10004bda:	68 00 9c 00 10       	push   0x10009c00	10004bdb: R_386_32	.text
10004bdf:	50                   	push   eax
10004be0:	e8 fc ff ff ff       	call   10004be1 <firstRun(bool)+0x2242>	10004be1: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10004be5:	83 c4 10             	add    esp,0x10
10004be8:	a1 00 00 00 00       	mov    eax,ds:0x0	10004be9: R_386_32	term
10004bed:	83 ec 04             	sub    esp,0x4
10004bf0:	6a 08                	push   0x8
10004bf2:	6a 1c                	push   0x1c
10004bf4:	50                   	push   eax
10004bf5:	e8 fc ff ff ff       	call   10004bf6 <firstRun(bool)+0x2257>	10004bf6: R_386_PC32	VgaText::setCursor(int, int)
10004bfa:	83 c4 10             	add    esp,0x10
10004bfd:	a1 00 00 00 00       	mov    eax,ds:0x0	10004bfe: R_386_32	term
10004c02:	6a 07                	push   0x7
10004c04:	6a 00                	push   0x0
10004c06:	68 00 00 00 00       	push   0x0	10004c07: R_386_32	pkeybuf
10004c0b:	50                   	push   eax
10004c0c:	e8 fc ff ff ff       	call   10004c0d <firstRun(bool)+0x226e>	10004c0d: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10004c11:	83 c4 10             	add    esp,0x10
10004c14:	a1 00 00 00 00       	mov    eax,ds:0x0	10004c15: R_386_32	term
10004c19:	83 ec 04             	sub    esp,0x4
10004c1c:	6a 08                	push   0x8
10004c1e:	6a 2c                	push   0x2c
10004c20:	50                   	push   eax
10004c21:	e8 fc ff ff ff       	call   10004c22 <firstRun(bool)+0x2283>	10004c22: R_386_PC32	VgaText::setCursor(int, int)
10004c26:	83 c4 10             	add    esp,0x10
10004c29:	a1 00 00 00 00       	mov    eax,ds:0x0	10004c2a: R_386_32	term
10004c2e:	6a 07                	push   0x7
10004c30:	6a 07                	push   0x7
10004c32:	6a 20                	push   0x20
10004c34:	50                   	push   eax
10004c35:	e8 fc ff ff ff       	call   10004c36 <firstRun(bool)+0x2297>	10004c36: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
10004c3a:	83 c4 10             	add    esp,0x10
10004c3d:	a1 00 00 00 00       	mov    eax,ds:0x0	10004c3e: R_386_32	term
10004c42:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10004c45:	83 c2 1c             	add    edx,0x1c
10004c48:	83 ec 04             	sub    esp,0x4
10004c4b:	6a 08                	push   0x8
10004c4d:	52                   	push   edx
10004c4e:	50                   	push   eax
10004c4f:	e8 fc ff ff ff       	call   10004c50 <firstRun(bool)+0x22b1>	10004c50: R_386_PC32	VgaText::setCursor(int, int)
10004c54:	83 c4 10             	add    esp,0x10
10004c57:	83 ec 0c             	sub    esp,0xc
10004c5a:	68 ed 9c 00 10       	push   0x10009ced	10004c5b: R_386_32	.text
10004c5f:	6a 0b                	push   0xb
10004c61:	6a 2b                	push   0x2b
10004c63:	6a 0a                	push   0xa
10004c65:	6a 22                	push   0x22
10004c67:	e8 fc ff ff ff       	call   10004c68 <firstRun(bool)+0x22c9>	10004c68: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
10004c6c:	83 c4 20             	add    esp,0x20
10004c6f:	a1 00 00 00 00       	mov    eax,ds:0x0	10004c70: R_386_32	term
10004c74:	83 ec 04             	sub    esp,0x4
10004c77:	6a 0d                	push   0xd
10004c79:	6a 24                	push   0x24
10004c7b:	50                   	push   eax
10004c7c:	e8 fc ff ff ff       	call   10004c7d <firstRun(bool)+0x22de>	10004c7d: R_386_PC32	VgaText::setCursor(int, int)
10004c81:	83 c4 10             	add    esp,0x10
10004c84:	a1 00 00 00 00       	mov    eax,ds:0x0	10004c85: R_386_32	term
10004c89:	83 ec 08             	sub    esp,0x8
10004c8c:	68 c4 9d 00 10       	push   0x10009dc4	10004c8d: R_386_32	.text
10004c91:	50                   	push   eax
10004c92:	e8 fc ff ff ff       	call   10004c93 <firstRun(bool)+0x22f4>	10004c93: R_386_PC32	VgaText::puts(char const*)
10004c97:	83 c4 10             	add    esp,0x10
10004c9a:	a1 00 00 00 00       	mov    eax,ds:0x0	10004c9b: R_386_32	term
10004c9f:	83 ec 04             	sub    esp,0x4
10004ca2:	6a 0f                	push   0xf
10004ca4:	6a 24                	push   0x24
10004ca6:	50                   	push   eax
10004ca7:	e8 fc ff ff ff       	call   10004ca8 <firstRun(bool)+0x2309>	10004ca8: R_386_PC32	VgaText::setCursor(int, int)
10004cac:	83 c4 10             	add    esp,0x10
10004caf:	a1 00 00 00 00       	mov    eax,ds:0x0	10004cb0: R_386_32	term
10004cb4:	83 ec 08             	sub    esp,0x8
10004cb7:	68 ec 9d 00 10       	push   0x10009dec	10004cb8: R_386_32	.text
10004cbc:	50                   	push   eax
10004cbd:	e8 fc ff ff ff       	call   10004cbe <firstRun(bool)+0x231f>	10004cbe: R_386_PC32	VgaText::puts(char const*)
10004cc2:	83 c4 10             	add    esp,0x10
10004cc5:	a1 00 00 00 00       	mov    eax,ds:0x0	10004cc6: R_386_32	term
10004cca:	83 ec 04             	sub    esp,0x4
10004ccd:	6a 10                	push   0x10
10004ccf:	6a 24                	push   0x24
10004cd1:	50                   	push   eax
10004cd2:	e8 fc ff ff ff       	call   10004cd3 <firstRun(bool)+0x2334>	10004cd3: R_386_PC32	VgaText::setCursor(int, int)
10004cd7:	83 c4 10             	add    esp,0x10
10004cda:	a1 00 00 00 00       	mov    eax,ds:0x0	10004cdb: R_386_32	term
10004cdf:	83 ec 08             	sub    esp,0x8
10004ce2:	68 10 9e 00 10       	push   0x10009e10	10004ce3: R_386_32	.text
10004ce7:	50                   	push   eax
10004ce8:	e8 fc ff ff ff       	call   10004ce9 <firstRun(bool)+0x234a>	10004ce9: R_386_PC32	VgaText::puts(char const*)
10004ced:	83 c4 10             	add    esp,0x10
10004cf0:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10004cf2: R_386_32	installKey
10004cf7:	83 ec 0c             	sub    esp,0xc
10004cfa:	68 94 11 00 00       	push   0x1194
10004cff:	e8 fc ff ff ff       	call   10004d00 <firstRun(bool)+0x2361>	10004d00: R_386_PC32	milliTenthSleep(unsigned int)
10004d04:	83 c4 10             	add    esp,0x10
10004d07:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10004d09: R_386_32	installKey
10004d0e:	a0 00 00 00 00       	mov    al,ds:0x0	10004d0f: R_386_32	installKey
10004d13:	84 c0                	test   al,al
10004d15:	0f 94 c0             	sete   al
10004d18:	84 c0                	test   al,al
10004d1a:	74 02                	je     10004d1e <firstRun(bool)+0x237f>
10004d1c:	eb f0                	jmp    10004d0e <firstRun(bool)+0x236f>
10004d1e:	e8 fc ff ff ff       	call   10004d1f <firstRun(bool)+0x2380>	10004d1f: R_386_PC32	drawBootScreen()
10004d23:	83 ec 0c             	sub    esp,0xc
10004d26:	68 9c 18 00 00       	push   0x189c
10004d2b:	e8 fc ff ff ff       	call   10004d2c <firstRun(bool)+0x238d>	10004d2c: R_386_PC32	milliTenthSleep(unsigned int)
10004d30:	83 c4 10             	add    esp,0x10
10004d33:	e9 a5 fa ff ff       	jmp    100047dd <firstRun(bool)+0x1e3e>
10004d38:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10004d3a: R_386_32	installKey
10004d3f:	e9 3f fb ff ff       	jmp    10004883 <firstRun(bool)+0x1ee4>
10004d44:	e8 fc ff ff ff       	call   10004d45 <firstRun(bool)+0x23a6>	10004d45: R_386_PC32	drawBootScreen()
10004d49:	83 ec 0c             	sub    esp,0xc
10004d4c:	68 31 9e 00 10       	push   0x10009e31	10004d4d: R_386_32	.text
10004d51:	6a 0d                	push   0xd
10004d53:	6a 32                	push   0x32
10004d55:	6a 05                	push   0x5
10004d57:	6a 16                	push   0x16
10004d59:	e8 fc ff ff ff       	call   10004d5a <firstRun(bool)+0x23bb>	10004d5a: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
10004d5e:	83 c4 20             	add    esp,0x20
10004d61:	83 ec 0c             	sub    esp,0xc
10004d64:	6a 00                	push   0x0
10004d66:	e8 fc ff ff ff       	call   10004d67 <firstRun(bool)+0x23c8>	10004d67: R_386_PC32	bootInstallTasks(int)
10004d6b:	83 c4 10             	add    esp,0x10
10004d6e:	83 ec 04             	sub    esp,0x4
10004d71:	6a 0c                	push   0xc
10004d73:	68 49 9e 00 10       	push   0x10009e49	10004d74: R_386_32	.text
10004d78:	68 5a 9e 00 10       	push   0x10009e5a	10004d79: R_386_32	.text
10004d7d:	e8 fc ff ff ff       	call   10004d7e <firstRun(bool)+0x23df>	10004d7e: R_386_PC32	Reg::readIntWithDefault(char*, char*, int)
10004d82:	83 c4 10             	add    esp,0x10
10004d85:	89 45 80             	mov    DWORD PTR [ebp-0x80],eax
10004d88:	83 ec 0c             	sub    esp,0xc
10004d8b:	ff 75 80             	push   DWORD PTR [ebp-0x80]
10004d8e:	e8 fc ff ff ff       	call   10004d8f <firstRun(bool)+0x23f0>	10004d8f: R_386_PC32	Virt::setupPageSwapping(int)
10004d93:	83 c4 10             	add    esp,0x10
10004d96:	83 ec 0c             	sub    esp,0xc
10004d99:	6a 01                	push   0x1
10004d9b:	e8 fc ff ff ff       	call   10004d9c <firstRun(bool)+0x23fd>	10004d9c: R_386_PC32	bootInstallTasks(int)
10004da0:	83 c4 10             	add    esp,0x10
10004da3:	83 ec 0c             	sub    esp,0xc
10004da6:	68 61 9e 00 10       	push   0x10009e61	10004da7: R_386_32	.text
10004dab:	e8 fc ff ff ff       	call   10004dac <firstRun(bool)+0x240d>	10004dac: R_386_PC32	rmtree(char*)
10004db0:	83 c4 10             	add    esp,0x10
10004db3:	83 ec 0c             	sub    esp,0xc
10004db6:	68 7b 9e 00 10       	push   0x10009e7b	10004db7: R_386_32	.text
10004dbb:	e8 fc ff ff ff       	call   10004dbc <firstRun(bool)+0x241d>	10004dbc: R_386_PC32	rmtree(char*)
10004dc0:	83 c4 10             	add    esp,0x10
10004dc3:	83 ec 08             	sub    esp,0x8
10004dc6:	68 c0 01 00 00       	push   0x1c0
10004dcb:	68 61 9e 00 10       	push   0x10009e61	10004dcc: R_386_32	.text
10004dd0:	e8 fc ff ff ff       	call   10004dd1 <firstRun(bool)+0x2432>	10004dd1: R_386_PC32	mkdir(char const*, int)
10004dd5:	83 c4 10             	add    esp,0x10
10004dd8:	83 ec 08             	sub    esp,0x8
10004ddb:	68 c0 01 00 00       	push   0x1c0
10004de0:	68 7b 9e 00 10       	push   0x10009e7b	10004de1: R_386_32	.text
10004de5:	e8 fc ff ff ff       	call   10004de6 <firstRun(bool)+0x2447>	10004de6: R_386_PC32	mkdir(char const*, int)
10004dea:	83 c4 10             	add    esp,0x10
10004ded:	83 ec 08             	sub    esp,0x8
10004df0:	68 61 9e 00 10       	push   0x10009e61	10004df1: R_386_32	.text
10004df5:	68 94 9e 00 10       	push   0x10009e94	10004df6: R_386_32	.text
10004dfa:	e8 fc ff ff ff       	call   10004dfb <firstRun(bool)+0x245c>	10004dfb: R_386_PC32	copytree(char*, char*)
10004dff:	83 c4 10             	add    esp,0x10
10004e02:	83 ec 0c             	sub    esp,0xc
10004e05:	6a 02                	push   0x2
10004e07:	e8 fc ff ff ff       	call   10004e08 <firstRun(bool)+0x2469>	10004e08: R_386_PC32	bootInstallTasks(int)
10004e0c:	83 c4 10             	add    esp,0x10
10004e0f:	83 ec 0c             	sub    esp,0xc
10004e12:	68 00 00 00 00       	push   0x0	10004e13: R_386_32	currName
10004e17:	e8 fc ff ff ff       	call   10004e18 <firstRun(bool)+0x2479>	10004e18: R_386_PC32	createUser(char const*)
10004e1c:	83 c4 10             	add    esp,0x10
10004e1f:	83 ec 0c             	sub    esp,0xc
10004e22:	6a 03                	push   0x3
10004e24:	e8 fc ff ff ff       	call   10004e25 <firstRun(bool)+0x2486>	10004e25: R_386_PC32	bootInstallTasks(int)
10004e29:	83 c4 10             	add    esp,0x10
10004e2c:	c6 05 00 00 00 00 01 	mov    BYTE PTR ds:0x0,0x1	10004e2e: R_386_32	VgaText::hiddenOut
10004e33:	8d 65 f4             	lea    esp,[ebp-0xc]
10004e36:	5b                   	pop    ebx
10004e37:	5e                   	pop    esi
10004e38:	5f                   	pop    edi
10004e39:	5d                   	pop    ebp
10004e3a:	c3                   	ret    

10004e3b <loadExtensions()>:
10004e3b:	55                   	push   ebp
10004e3c:	89 e5                	mov    ebp,esp
10004e3e:	83 ec 08             	sub    esp,0x8
10004e41:	83 ec 0c             	sub    esp,0xc
10004e44:	68 3c 9f 00 10       	push   0x10009f3c	10004e45: R_386_32	.text
10004e49:	e8 fc ff ff ff       	call   10004e4a <loadExtensions()+0xf>	10004e4a: R_386_PC32	KeSetBootMessage(char const*)
10004e4e:	83 c4 10             	add    esp,0x10
10004e51:	90                   	nop
10004e52:	c9                   	leave  
10004e53:	c3                   	ret    

10004e54 <rgtree(Reghive_Tag*, int, int)>:
10004e54:	55                   	push   ebp
10004e55:	89 e5                	mov    ebp,esp
10004e57:	53                   	push   ebx
10004e58:	83 ec 44             	sub    esp,0x44
10004e5b:	83 7d 0c 01          	cmp    DWORD PTR [ebp+0xc],0x1
10004e5f:	75 16                	jne    10004e77 <rgtree(Reghive_Tag*, int, int)+0x23>
10004e61:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
10004e65:	75 10                	jne    10004e77 <rgtree(Reghive_Tag*, int, int)+0x23>
10004e67:	83 ec 0c             	sub    esp,0xc
10004e6a:	68 52 9f 00 10       	push   0x10009f52	10004e6b: R_386_32	.text
10004e6f:	e8 fc ff ff ff       	call   10004e70 <rgtree(Reghive_Tag*, int, int)+0x1c>	10004e70: R_386_PC32	Dbg::kprintf(char const*, ...)
10004e74:	83 c4 10             	add    esp,0x10
10004e77:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
10004e7b:	0f 8e a9 00 00 00    	jle    10004f2a <rgtree(Reghive_Tag*, int, int)+0xd6>
10004e81:	83 ec 04             	sub    esp,0x4
10004e84:	6a 32                	push   0x32
10004e86:	6a 00                	push   0x0
10004e88:	8d 45 be             	lea    eax,[ebp-0x42]
10004e8b:	50                   	push   eax
10004e8c:	e8 fc ff ff ff       	call   10004e8d <rgtree(Reghive_Tag*, int, int)+0x39>	10004e8d: R_386_PC32	memset
10004e91:	83 c4 10             	add    esp,0x10
10004e94:	83 ec 04             	sub    esp,0x4
10004e97:	8d 45 be             	lea    eax,[ebp-0x42]
10004e9a:	50                   	push   eax
10004e9b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10004e9e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10004ea1:	e8 fc ff ff ff       	call   10004ea2 <rgtree(Reghive_Tag*, int, int)+0x4e>	10004ea2: R_386_PC32	CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)
10004ea6:	83 c4 10             	add    esp,0x10
10004ea9:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10004eac:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
10004eb3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10004eb6:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
10004eb9:	7d 15                	jge    10004ed0 <rgtree(Reghive_Tag*, int, int)+0x7c>
10004ebb:	83 ec 0c             	sub    esp,0xc
10004ebe:	68 3d 9a 00 10       	push   0x10009a3d	10004ebf: R_386_32	.text
10004ec3:	e8 fc ff ff ff       	call   10004ec4 <rgtree(Reghive_Tag*, int, int)+0x70>	10004ec4: R_386_PC32	Dbg::kprintf(char const*, ...)
10004ec8:	83 c4 10             	add    esp,0x10
10004ecb:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10004ece:	eb e3                	jmp    10004eb3 <rgtree(Reghive_Tag*, int, int)+0x5f>
10004ed0:	83 ec 08             	sub    esp,0x8
10004ed3:	8d 45 be             	lea    eax,[ebp-0x42]
10004ed6:	50                   	push   eax
10004ed7:	68 57 9f 00 10       	push   0x10009f57	10004ed8: R_386_32	.text
10004edc:	e8 fc ff ff ff       	call   10004edd <rgtree(Reghive_Tag*, int, int)+0x89>	10004edd: R_386_PC32	Dbg::kprintf(char const*, ...)
10004ee1:	83 c4 10             	add    esp,0x10
10004ee4:	83 7d f0 4e          	cmp    DWORD PTR [ebp-0x10],0x4e
10004ee8:	75 27                	jne    10004f11 <rgtree(Reghive_Tag*, int, int)+0xbd>
10004eea:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
10004eed:	8d 58 04             	lea    ebx,[eax+0x4]
10004ef0:	83 ec 08             	sub    esp,0x8
10004ef3:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10004ef6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10004ef9:	e8 fc ff ff ff       	call   10004efa <rgtree(Reghive_Tag*, int, int)+0xa6>	10004efa: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10004efe:	83 c4 10             	add    esp,0x10
10004f01:	83 ec 04             	sub    esp,0x4
10004f04:	53                   	push   ebx
10004f05:	50                   	push   eax
10004f06:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10004f09:	e8 fc ff ff ff       	call   10004f0a <rgtree(Reghive_Tag*, int, int)+0xb6>	10004f0a: R_386_PC32	rgtree(Reghive_Tag*, int, int)
10004f0e:	83 c4 10             	add    esp,0x10
10004f11:	83 ec 08             	sub    esp,0x8
10004f14:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10004f17:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10004f1a:	e8 fc ff ff ff       	call   10004f1b <rgtree(Reghive_Tag*, int, int)+0xc7>	10004f1b: R_386_PC32	CmGetNext(Reghive_Tag*, int)
10004f1f:	83 c4 10             	add    esp,0x10
10004f22:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
10004f25:	e9 4d ff ff ff       	jmp    10004e77 <rgtree(Reghive_Tag*, int, int)+0x23>
10004f2a:	90                   	nop
10004f2b:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
10004f2e:	c9                   	leave  
10004f2f:	c3                   	ret    

10004f30 <getRegsafeName(char*, char*)>:
10004f30:	55                   	push   ebp
10004f31:	89 e5                	mov    ebp,esp
10004f33:	83 ec 10             	sub    esp,0x10
10004f36:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10004f39:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10004f3c:	e8 fc ff ff ff       	call   10004f3d <getRegsafeName(char*, char*)+0xd>	10004f3d: R_386_PC32	strcpy
10004f41:	83 c4 08             	add    esp,0x8
10004f44:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
10004f4b:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
10004f4e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10004f51:	01 d0                	add    eax,edx
10004f53:	8a 00                	mov    al,BYTE PTR [eax]
10004f55:	84 c0                	test   al,al
10004f57:	74 6e                	je     10004fc7 <getRegsafeName(char*, char*)+0x97>
10004f59:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
10004f5c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10004f5f:	01 d0                	add    eax,edx
10004f61:	8a 00                	mov    al,BYTE PTR [eax]
10004f63:	3c 60                	cmp    al,0x60
10004f65:	7e 42                	jle    10004fa9 <getRegsafeName(char*, char*)+0x79>
10004f67:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
10004f6a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10004f6d:	01 d0                	add    eax,edx
10004f6f:	8a 00                	mov    al,BYTE PTR [eax]
10004f71:	3c 7a                	cmp    al,0x7a
10004f73:	7f 34                	jg     10004fa9 <getRegsafeName(char*, char*)+0x79>
10004f75:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
10004f78:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10004f7b:	01 d0                	add    eax,edx
10004f7d:	8a 00                	mov    al,BYTE PTR [eax]
10004f7f:	8d 48 9f             	lea    ecx,[eax-0x61]
10004f82:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
10004f85:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10004f88:	01 d0                	add    eax,edx
10004f8a:	88 ca                	mov    dl,cl
10004f8c:	88 10                	mov    BYTE PTR [eax],dl
10004f8e:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
10004f91:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10004f94:	01 d0                	add    eax,edx
10004f96:	8a 00                	mov    al,BYTE PTR [eax]
10004f98:	8d 48 41             	lea    ecx,[eax+0x41]
10004f9b:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
10004f9e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10004fa1:	01 d0                	add    eax,edx
10004fa3:	88 ca                	mov    dl,cl
10004fa5:	88 10                	mov    BYTE PTR [eax],dl
10004fa7:	eb 19                	jmp    10004fc2 <getRegsafeName(char*, char*)+0x92>
10004fa9:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
10004fac:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10004faf:	01 d0                	add    eax,edx
10004fb1:	8a 00                	mov    al,BYTE PTR [eax]
10004fb3:	3c 20                	cmp    al,0x20
10004fb5:	75 0b                	jne    10004fc2 <getRegsafeName(char*, char*)+0x92>
10004fb7:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
10004fba:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10004fbd:	01 d0                	add    eax,edx
10004fbf:	c6 00 5f             	mov    BYTE PTR [eax],0x5f
10004fc2:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
10004fc5:	eb 84                	jmp    10004f4b <getRegsafeName(char*, char*)+0x1b>
10004fc7:	90                   	nop
10004fc8:	c9                   	leave  
10004fc9:	c3                   	ret    

10004fca <begin(void*)>:
10004fca:	55                   	push   ebp
10004fcb:	89 e5                	mov    ebp,esp
10004fcd:	57                   	push   edi
10004fce:	56                   	push   esi
10004fcf:	53                   	push   ebx
10004fd0:	81 ec 5c 05 00 00    	sub    esp,0x55c
10004fd6:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
10004fda:	83 ec 0c             	sub    esp,0xc
10004fdd:	68 14 01 00 00       	push   0x114
10004fe2:	e8 fc ff ff ff       	call   10004fe3 <begin(void*)+0x19>	10004fe3: R_386_PC32	operator new(unsigned long)
10004fe7:	83 c4 10             	add    esp,0x10
10004fea:	89 c3                	mov    ebx,eax
10004fec:	a1 00 00 00 00       	mov    eax,ds:0x0	10004fed: R_386_32	kernelProcess
10004ff1:	83 ec 04             	sub    esp,0x4
10004ff4:	50                   	push   eax
10004ff5:	68 5c 9f 00 10       	push   0x10009f5c	10004ff6: R_386_32	.text
10004ffa:	53                   	push   ebx
10004ffb:	e8 fc ff ff ff       	call   10004ffc <begin(void*)+0x32>	10004ffc: R_386_PC32	File::File(char const*, Process*)
10005000:	83 c4 10             	add    esp,0x10
10005003:	89 5d bc             	mov    DWORD PTR [ebp-0x44],ebx
10005006:	83 7d bc 00          	cmp    DWORD PTR [ebp-0x44],0x0
1000500a:	75 10                	jne    1000501c <begin(void*)+0x52>
1000500c:	83 ec 0c             	sub    esp,0xc
1000500f:	68 7a 9f 00 10       	push   0x10009f7a	10005010: R_386_32	.text
10005014:	e8 fc ff ff ff       	call   10005015 <begin(void*)+0x4b>	10005015: R_386_PC32	KePanic(char const*)
10005019:	83 c4 10             	add    esp,0x10
1000501c:	83 ec 08             	sub    esp,0x8
1000501f:	6a 01                	push   0x1
10005021:	ff 75 bc             	push   DWORD PTR [ebp-0x44]
10005024:	e8 fc ff ff ff       	call   10005025 <begin(void*)+0x5b>	10005025: R_386_PC32	File::open(FileOpenMode)
10005029:	83 c4 10             	add    esp,0x10
1000502c:	89 45 b8             	mov    DWORD PTR [ebp-0x48],eax
1000502f:	83 7d b8 00          	cmp    DWORD PTR [ebp-0x48],0x0
10005033:	75 10                	jne    10005045 <begin(void*)+0x7b>
10005035:	83 ec 0c             	sub    esp,0xc
10005038:	ff 75 bc             	push   DWORD PTR [ebp-0x44]
1000503b:	e8 fc ff ff ff       	call   1000503c <begin(void*)+0x72>	1000503c: R_386_PC32	File::close()
10005040:	83 c4 10             	add    esp,0x10
10005043:	eb 04                	jmp    10005049 <begin(void*)+0x7f>
10005045:	c6 45 e7 01          	mov    BYTE PTR [ebp-0x19],0x1
10005049:	83 7d bc 00          	cmp    DWORD PTR [ebp-0x44],0x0
1000504d:	74 15                	je     10005064 <begin(void*)+0x9a>
1000504f:	8b 45 bc             	mov    eax,DWORD PTR [ebp-0x44]
10005052:	8b 00                	mov    eax,DWORD PTR [eax]
10005054:	83 c0 08             	add    eax,0x8
10005057:	8b 00                	mov    eax,DWORD PTR [eax]
10005059:	83 ec 0c             	sub    esp,0xc
1000505c:	ff 75 bc             	push   DWORD PTR [ebp-0x44]
1000505f:	ff d0                	call   eax
10005061:	83 c4 10             	add    esp,0x10
10005064:	c6 05 00 00 00 00 01 	mov    BYTE PTR ds:0x0,0x1	10005066: R_386_32	KeIsPreemptionOn
1000506b:	80 7d e7 00          	cmp    BYTE PTR [ebp-0x19],0x0
1000506f:	74 0f                	je     10005080 <begin(void*)+0xb6>
10005071:	83 ec 0c             	sub    esp,0xc
10005074:	6a 00                	push   0x0
10005076:	e8 fc ff ff ff       	call   10005077 <begin(void*)+0xad>	10005077: R_386_PC32	firstRun(bool)
1000507b:	83 c4 10             	add    esp,0x10
1000507e:	eb 05                	jmp    10005085 <begin(void*)+0xbb>
10005080:	e8 fc ff ff ff       	call   10005081 <begin(void*)+0xb7>	10005081: R_386_PC32	loadExtensions()
10005085:	8d 45 8c             	lea    eax,[ebp-0x74]
10005088:	bb 44 a3 00 10       	mov    ebx,0x1000a344	10005089: R_386_32	.text
1000508d:	ba 04 00 00 00       	mov    edx,0x4
10005092:	89 c7                	mov    edi,eax
10005094:	89 de                	mov    esi,ebx
10005096:	89 d1                	mov    ecx,edx
10005098:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000509a:	80 7d e7 00          	cmp    BYTE PTR [ebp-0x19],0x0
1000509e:	0f 84 a0 08 00 00    	je     10005944 <begin(void*)+0x97a>
100050a4:	83 ec 0c             	sub    esp,0xc
100050a7:	68 24 07 00 00       	push   0x724
100050ac:	e8 fc ff ff ff       	call   100050ad <begin(void*)+0xe3>	100050ad: R_386_PC32	operator new(unsigned long)
100050b1:	83 c4 10             	add    esp,0x10
100050b4:	89 c3                	mov    ebx,eax
100050b6:	8d 45 8c             	lea    eax,[ebp-0x74]
100050b9:	50                   	push   eax
100050ba:	6a 00                	push   0x0
100050bc:	68 8a 9f 00 10       	push   0x10009f8a	100050bd: R_386_32	.text
100050c1:	53                   	push   ebx
100050c2:	e8 fc ff ff ff       	call   100050c3 <begin(void*)+0xf9>	100050c3: R_386_PC32	Process::Process(char const*, Process*, char**)
100050c7:	83 c4 10             	add    esp,0x10
100050ca:	89 5d b4             	mov    DWORD PTR [ebp-0x4c],ebx
100050cd:	83 ec 0c             	sub    esp,0xc
100050d0:	ff 75 b4             	push   DWORD PTR [ebp-0x4c]
100050d3:	e8 fc ff ff ff       	call   100050d4 <begin(void*)+0x10a>	100050d4: R_386_PC32	Process::createUserThread()
100050d8:	83 c4 10             	add    esp,0x10
100050db:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100050dd: R_386_32	VgaText::hiddenOut
100050e2:	a1 00 00 00 00       	mov    eax,ds:0x0	100050e3: R_386_32	term
100050e7:	83 ec 0c             	sub    esp,0xc
100050ea:	50                   	push   eax
100050eb:	e8 fc ff ff ff       	call   100050ec <begin(void*)+0x122>	100050ec: R_386_PC32	setActiveTerminal(VgaText*)
100050f0:	83 c4 10             	add    esp,0x10
100050f3:	e8 fc ff ff ff       	call   100050f4 <begin(void*)+0x12a>	100050f4: R_386_PC32	drawBootScreen()
100050f8:	83 ec 0c             	sub    esp,0xc
100050fb:	68 31 9e 00 10       	push   0x10009e31	100050fc: R_386_32	.text
10005100:	6a 0d                	push   0xd
10005102:	6a 32                	push   0x32
10005104:	6a 05                	push   0x5
10005106:	6a 16                	push   0x16
10005108:	e8 fc ff ff ff       	call   10005109 <begin(void*)+0x13f>	10005109: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
1000510d:	83 c4 20             	add    esp,0x20
10005110:	83 ec 0c             	sub    esp,0xc
10005113:	6a 03                	push   0x3
10005115:	e8 fc ff ff ff       	call   10005116 <begin(void*)+0x14c>	10005116: R_386_PC32	bootInstallTasks(int)
1000511a:	83 c4 10             	add    esp,0x10
1000511d:	c6 05 00 00 00 00 01 	mov    BYTE PTR ds:0x0,0x1	1000511f: R_386_32	VgaText::hiddenOut
10005124:	83 ec 0c             	sub    esp,0xc
10005127:	68 14 01 00 00       	push   0x114
1000512c:	e8 fc ff ff ff       	call   1000512d <begin(void*)+0x163>	1000512d: R_386_PC32	operator new(unsigned long)
10005131:	83 c4 10             	add    esp,0x10
10005134:	89 c3                	mov    ebx,eax
10005136:	a1 00 00 00 00       	mov    eax,ds:0x0	10005137: R_386_32	kernelProcess
1000513b:	83 ec 04             	sub    esp,0x4
1000513e:	50                   	push   eax
1000513f:	68 a7 9f 00 10       	push   0x10009fa7	10005140: R_386_32	.text
10005144:	53                   	push   ebx
10005145:	e8 fc ff ff ff       	call   10005146 <begin(void*)+0x17c>	10005146: R_386_PC32	File::File(char const*, Process*)
1000514a:	83 c4 10             	add    esp,0x10
1000514d:	89 5d b0             	mov    DWORD PTR [ebp-0x50],ebx
10005150:	83 ec 08             	sub    esp,0x8
10005153:	6a 01                	push   0x1
10005155:	ff 75 b0             	push   DWORD PTR [ebp-0x50]
10005158:	e8 fc ff ff ff       	call   10005159 <begin(void*)+0x18f>	10005159: R_386_PC32	File::open(FileOpenMode)
1000515d:	83 c4 10             	add    esp,0x10
10005160:	89 45 ac             	mov    DWORD PTR [ebp-0x54],eax
10005163:	83 7d ac 00          	cmp    DWORD PTR [ebp-0x54],0x0
10005167:	75 39                	jne    100051a2 <begin(void*)+0x1d8>
10005169:	83 ec 0c             	sub    esp,0xc
1000516c:	ff 75 b0             	push   DWORD PTR [ebp-0x50]
1000516f:	e8 fc ff ff ff       	call   10005170 <begin(void*)+0x1a6>	10005170: R_386_PC32	File::close()
10005174:	83 c4 10             	add    esp,0x10
10005177:	83 ec 0c             	sub    esp,0xc
1000517a:	ff 75 b0             	push   DWORD PTR [ebp-0x50]
1000517d:	e8 fc ff ff ff       	call   1000517e <begin(void*)+0x1b4>	1000517e: R_386_PC32	File::unlink()
10005182:	83 c4 10             	add    esp,0x10
10005185:	83 7d b0 00          	cmp    DWORD PTR [ebp-0x50],0x0
10005189:	74 44                	je     100051cf <begin(void*)+0x205>
1000518b:	8b 45 b0             	mov    eax,DWORD PTR [ebp-0x50]
1000518e:	8b 00                	mov    eax,DWORD PTR [eax]
10005190:	83 c0 08             	add    eax,0x8
10005193:	8b 00                	mov    eax,DWORD PTR [eax]
10005195:	83 ec 0c             	sub    esp,0xc
10005198:	ff 75 b0             	push   DWORD PTR [ebp-0x50]
1000519b:	ff d0                	call   eax
1000519d:	83 c4 10             	add    esp,0x10
100051a0:	eb 2d                	jmp    100051cf <begin(void*)+0x205>
100051a2:	83 7d b0 00          	cmp    DWORD PTR [ebp-0x50],0x0
100051a6:	74 15                	je     100051bd <begin(void*)+0x1f3>
100051a8:	8b 45 b0             	mov    eax,DWORD PTR [ebp-0x50]
100051ab:	8b 00                	mov    eax,DWORD PTR [eax]
100051ad:	83 c0 08             	add    eax,0x8
100051b0:	8b 00                	mov    eax,DWORD PTR [eax]
100051b2:	83 ec 0c             	sub    esp,0xc
100051b5:	ff 75 b0             	push   DWORD PTR [ebp-0x50]
100051b8:	ff d0                	call   eax
100051ba:	83 c4 10             	add    esp,0x10
100051bd:	83 ec 0c             	sub    esp,0xc
100051c0:	6a 01                	push   0x1
100051c2:	e8 fc ff ff ff       	call   100051c3 <begin(void*)+0x1f9>	100051c3: R_386_PC32	sleep(unsigned int)
100051c7:	83 c4 10             	add    esp,0x10
100051ca:	e9 55 ff ff ff       	jmp    10005124 <begin(void*)+0x15a>
100051cf:	90                   	nop
100051d0:	83 ec 0c             	sub    esp,0xc
100051d3:	6a 02                	push   0x2
100051d5:	e8 fc ff ff ff       	call   100051d6 <begin(void*)+0x20c>	100051d6: R_386_PC32	sleep(unsigned int)
100051da:	83 c4 10             	add    esp,0x10
100051dd:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100051df: R_386_32	VgaText::hiddenOut
100051e4:	a1 00 00 00 00       	mov    eax,ds:0x0	100051e5: R_386_32	term
100051e9:	83 ec 0c             	sub    esp,0xc
100051ec:	50                   	push   eax
100051ed:	e8 fc ff ff ff       	call   100051ee <begin(void*)+0x224>	100051ee: R_386_PC32	setActiveTerminal(VgaText*)
100051f2:	83 c4 10             	add    esp,0x10
100051f5:	e8 fc ff ff ff       	call   100051f6 <begin(void*)+0x22c>	100051f6: R_386_PC32	drawBootScreen()
100051fa:	83 ec 0c             	sub    esp,0xc
100051fd:	68 31 9e 00 10       	push   0x10009e31	100051fe: R_386_32	.text
10005202:	6a 0d                	push   0xd
10005204:	6a 32                	push   0x32
10005206:	6a 05                	push   0x5
10005208:	6a 16                	push   0x16
1000520a:	e8 fc ff ff ff       	call   1000520b <begin(void*)+0x241>	1000520b: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
1000520f:	83 c4 20             	add    esp,0x20
10005212:	83 ec 0c             	sub    esp,0xc
10005215:	6a 04                	push   0x4
10005217:	e8 fc ff ff ff       	call   10005218 <begin(void*)+0x24e>	10005218: R_386_PC32	bootInstallTasks(int)
1000521c:	83 c4 10             	add    esp,0x10
1000521f:	83 ec 08             	sub    esp,0x8
10005222:	68 dd dd 00 00       	push   0xdddd
10005227:	68 b1 9f 00 10       	push   0x10009fb1	10005228: R_386_32	.text
1000522c:	e8 fc ff ff ff       	call   1000522d <begin(void*)+0x263>	1000522d: R_386_PC32	backupTree(char*, unsigned short)
10005231:	83 c4 10             	add    esp,0x10
10005234:	83 ec 08             	sub    esp,0x8
10005237:	68 ee ee 00 00       	push   0xeeee
1000523c:	68 c4 9f 00 10       	push   0x10009fc4	1000523d: R_386_32	.text
10005241:	e8 fc ff ff ff       	call   10005242 <begin(void*)+0x278>	10005242: R_386_PC32	backupTree(char*, unsigned short)
10005246:	83 c4 10             	add    esp,0x10
10005249:	83 ec 08             	sub    esp,0x8
1000524c:	68 ff ff 00 00       	push   0xffff
10005251:	68 d6 9f 00 10       	push   0x10009fd6	10005252: R_386_32	.text
10005256:	e8 fc ff ff ff       	call   10005257 <begin(void*)+0x28d>	10005257: R_386_PC32	backupTree(char*, unsigned short)
1000525b:	83 c4 10             	add    esp,0x10
1000525e:	83 ec 0c             	sub    esp,0xc
10005261:	6a 05                	push   0x5
10005263:	e8 fc ff ff ff       	call   10005264 <begin(void*)+0x29a>	10005264: R_386_PC32	bootInstallTasks(int)
10005268:	83 c4 10             	add    esp,0x10
1000526b:	83 ec 0c             	sub    esp,0xc
1000526e:	68 ec 9f 00 10       	push   0x10009fec	1000526f: R_386_32	.text
10005273:	e8 fc ff ff ff       	call   10005274 <begin(void*)+0x2aa>	10005274: R_386_PC32	CmOpen(char const*)
10005278:	83 c4 10             	add    esp,0x10
1000527b:	89 45 a8             	mov    DWORD PTR [ebp-0x58],eax
1000527e:	83 ec 04             	sub    esp,0x4
10005281:	68 11 a0 00 10       	push   0x1000a011	10005282: R_386_32	.text
10005286:	6a 00                	push   0x0
10005288:	ff 75 a8             	push   DWORD PTR [ebp-0x58]
1000528b:	e8 fc ff ff ff       	call   1000528c <begin(void*)+0x2c2>	1000528c: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
10005290:	83 c4 10             	add    esp,0x10
10005293:	83 ec 08             	sub    esp,0x8
10005296:	8d 85 06 fd ff ff    	lea    eax,[ebp-0x2fa]
1000529c:	50                   	push   eax
1000529d:	68 00 00 00 00       	push   0x0	1000529e: R_386_32	currName
100052a2:	e8 fc ff ff ff       	call   100052a3 <begin(void*)+0x2d9>	100052a3: R_386_PC32	getRegsafeName(char*, char*)
100052a7:	83 c4 10             	add    esp,0x10
100052aa:	83 ec 08             	sub    esp,0x8
100052ad:	8d 85 06 fd ff ff    	lea    eax,[ebp-0x2fa]
100052b3:	50                   	push   eax
100052b4:	68 18 a0 00 10       	push   0x1000a018	100052b5: R_386_32	.text
100052b9:	e8 fc ff ff ff       	call   100052ba <begin(void*)+0x2f0>	100052ba: R_386_PC32	Dbg::kprintf(char const*, ...)
100052be:	83 c4 10             	add    esp,0x10
100052c1:	83 ec 08             	sub    esp,0x8
100052c4:	68 2a a0 00 10       	push   0x1000a02a	100052c5: R_386_32	.text
100052c9:	8d 85 86 fd ff ff    	lea    eax,[ebp-0x27a]
100052cf:	50                   	push   eax
100052d0:	e8 fc ff ff ff       	call   100052d1 <begin(void*)+0x307>	100052d1: R_386_PC32	strcpy
100052d5:	83 c4 10             	add    esp,0x10
100052d8:	83 ec 08             	sub    esp,0x8
100052db:	8d 85 06 fd ff ff    	lea    eax,[ebp-0x2fa]
100052e1:	50                   	push   eax
100052e2:	8d 85 86 fd ff ff    	lea    eax,[ebp-0x27a]
100052e8:	50                   	push   eax
100052e9:	e8 fc ff ff ff       	call   100052ea <begin(void*)+0x320>	100052ea: R_386_PC32	strcat
100052ee:	83 c4 10             	add    esp,0x10
100052f1:	83 ec 08             	sub    esp,0x8
100052f4:	8d 85 86 fd ff ff    	lea    eax,[ebp-0x27a]
100052fa:	50                   	push   eax
100052fb:	68 38 a0 00 10       	push   0x1000a038	100052fc: R_386_32	.text
10005300:	e8 fc ff ff ff       	call   10005301 <begin(void*)+0x337>	10005301: R_386_PC32	Dbg::kprintf(char const*, ...)
10005305:	83 c4 10             	add    esp,0x10
10005308:	83 ec 08             	sub    esp,0x8
1000530b:	68 11 a0 00 10       	push   0x1000a011	1000530c: R_386_32	.text
10005310:	ff 75 a8             	push   DWORD PTR [ebp-0x58]
10005313:	e8 fc ff ff ff       	call   10005314 <begin(void*)+0x34a>	10005314: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005318:	83 c4 10             	add    esp,0x10
1000531b:	83 ec 08             	sub    esp,0x8
1000531e:	50                   	push   eax
1000531f:	ff 75 a8             	push   DWORD PTR [ebp-0x58]
10005322:	e8 fc ff ff ff       	call   10005323 <begin(void*)+0x359>	10005323: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005327:	83 c4 10             	add    esp,0x10
1000532a:	83 ec 04             	sub    esp,0x4
1000532d:	68 4b a0 00 10       	push   0x1000a04b	1000532e: R_386_32	.text
10005332:	50                   	push   eax
10005333:	ff 75 a8             	push   DWORD PTR [ebp-0x58]
10005336:	e8 fc ff ff ff       	call   10005337 <begin(void*)+0x36d>	10005337: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
1000533b:	83 c4 10             	add    esp,0x10
1000533e:	83 ec 08             	sub    esp,0x8
10005341:	68 11 a0 00 10       	push   0x1000a011	10005342: R_386_32	.text
10005346:	ff 75 a8             	push   DWORD PTR [ebp-0x58]
10005349:	e8 fc ff ff ff       	call   1000534a <begin(void*)+0x380>	1000534a: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
1000534e:	83 c4 10             	add    esp,0x10
10005351:	83 ec 08             	sub    esp,0x8
10005354:	50                   	push   eax
10005355:	ff 75 a8             	push   DWORD PTR [ebp-0x58]
10005358:	e8 fc ff ff ff       	call   10005359 <begin(void*)+0x38f>	10005359: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
1000535d:	83 c4 10             	add    esp,0x10
10005360:	83 ec 04             	sub    esp,0x4
10005363:	68 51 a0 00 10       	push   0x1000a051	10005364: R_386_32	.text
10005368:	50                   	push   eax
10005369:	ff 75 a8             	push   DWORD PTR [ebp-0x58]
1000536c:	e8 fc ff ff ff       	call   1000536d <begin(void*)+0x3a3>	1000536d: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
10005371:	83 c4 10             	add    esp,0x10
10005374:	83 ec 08             	sub    esp,0x8
10005377:	68 11 a0 00 10       	push   0x1000a011	10005378: R_386_32	.text
1000537c:	ff 75 a8             	push   DWORD PTR [ebp-0x58]
1000537f:	e8 fc ff ff ff       	call   10005380 <begin(void*)+0x3b6>	10005380: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005384:	83 c4 10             	add    esp,0x10
10005387:	83 ec 08             	sub    esp,0x8
1000538a:	50                   	push   eax
1000538b:	ff 75 a8             	push   DWORD PTR [ebp-0x58]
1000538e:	e8 fc ff ff ff       	call   1000538f <begin(void*)+0x3c5>	1000538f: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005393:	83 c4 10             	add    esp,0x10
10005396:	83 ec 04             	sub    esp,0x4
10005399:	68 56 a0 00 10       	push   0x1000a056	1000539a: R_386_32	.text
1000539e:	50                   	push   eax
1000539f:	ff 75 a8             	push   DWORD PTR [ebp-0x58]
100053a2:	e8 fc ff ff ff       	call   100053a3 <begin(void*)+0x3d9>	100053a3: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
100053a7:	83 c4 10             	add    esp,0x10
100053aa:	83 ec 08             	sub    esp,0x8
100053ad:	68 5c a0 00 10       	push   0x1000a05c	100053ae: R_386_32	.text
100053b2:	ff 75 a8             	push   DWORD PTR [ebp-0x58]
100053b5:	e8 fc ff ff ff       	call   100053b6 <begin(void*)+0x3ec>	100053b6: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100053ba:	83 c4 10             	add    esp,0x10
100053bd:	83 ec 08             	sub    esp,0x8
100053c0:	50                   	push   eax
100053c1:	ff 75 a8             	push   DWORD PTR [ebp-0x58]
100053c4:	e8 fc ff ff ff       	call   100053c5 <begin(void*)+0x3fb>	100053c5: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
100053c9:	83 c4 10             	add    esp,0x10
100053cc:	83 ec 04             	sub    esp,0x4
100053cf:	8d 95 06 fd ff ff    	lea    edx,[ebp-0x2fa]
100053d5:	52                   	push   edx
100053d6:	50                   	push   eax
100053d7:	ff 75 a8             	push   DWORD PTR [ebp-0x58]
100053da:	e8 fc ff ff ff       	call   100053db <begin(void*)+0x411>	100053db: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
100053df:	83 c4 10             	add    esp,0x10
100053e2:	83 ec 08             	sub    esp,0x8
100053e5:	68 69 a0 00 10       	push   0x1000a069	100053e6: R_386_32	.text
100053ea:	ff 75 a8             	push   DWORD PTR [ebp-0x58]
100053ed:	e8 fc ff ff ff       	call   100053ee <begin(void*)+0x424>	100053ee: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100053f2:	83 c4 10             	add    esp,0x10
100053f5:	83 ec 08             	sub    esp,0x8
100053f8:	50                   	push   eax
100053f9:	ff 75 a8             	push   DWORD PTR [ebp-0x58]
100053fc:	e8 fc ff ff ff       	call   100053fd <begin(void*)+0x433>	100053fd: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005401:	83 c4 10             	add    esp,0x10
10005404:	83 ec 04             	sub    esp,0x4
10005407:	68 76 a0 00 10       	push   0x1000a076	10005408: R_386_32	.text
1000540c:	50                   	push   eax
1000540d:	ff 75 a8             	push   DWORD PTR [ebp-0x58]
10005410:	e8 fc ff ff ff       	call   10005411 <begin(void*)+0x447>	10005411: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
10005415:	83 c4 10             	add    esp,0x10
10005418:	83 ec 08             	sub    esp,0x8
1000541b:	68 69 a0 00 10       	push   0x1000a069	1000541c: R_386_32	.text
10005420:	ff 75 a8             	push   DWORD PTR [ebp-0x58]
10005423:	e8 fc ff ff ff       	call   10005424 <begin(void*)+0x45a>	10005424: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005428:	83 c4 10             	add    esp,0x10
1000542b:	83 ec 08             	sub    esp,0x8
1000542e:	50                   	push   eax
1000542f:	ff 75 a8             	push   DWORD PTR [ebp-0x58]
10005432:	e8 fc ff ff ff       	call   10005433 <begin(void*)+0x469>	10005433: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005437:	83 c4 10             	add    esp,0x10
1000543a:	83 ec 04             	sub    esp,0x4
1000543d:	68 7b a0 00 10       	push   0x1000a07b	1000543e: R_386_32	.text
10005442:	50                   	push   eax
10005443:	ff 75 a8             	push   DWORD PTR [ebp-0x58]
10005446:	e8 fc ff ff ff       	call   10005447 <begin(void*)+0x47d>	10005447: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
1000544b:	83 c4 10             	add    esp,0x10
1000544e:	83 ec 08             	sub    esp,0x8
10005451:	68 69 a0 00 10       	push   0x1000a069	10005452: R_386_32	.text
10005456:	ff 75 a8             	push   DWORD PTR [ebp-0x58]
10005459:	e8 fc ff ff ff       	call   1000545a <begin(void*)+0x490>	1000545a: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
1000545e:	83 c4 10             	add    esp,0x10
10005461:	83 ec 08             	sub    esp,0x8
10005464:	50                   	push   eax
10005465:	ff 75 a8             	push   DWORD PTR [ebp-0x58]
10005468:	e8 fc ff ff ff       	call   10005469 <begin(void*)+0x49f>	10005469: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
1000546d:	83 c4 10             	add    esp,0x10
10005470:	83 ec 04             	sub    esp,0x4
10005473:	68 83 a0 00 10       	push   0x1000a083	10005474: R_386_32	.text
10005478:	50                   	push   eax
10005479:	ff 75 a8             	push   DWORD PTR [ebp-0x58]
1000547c:	e8 fc ff ff ff       	call   1000547d <begin(void*)+0x4b3>	1000547d: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
10005481:	83 c4 10             	add    esp,0x10
10005484:	83 ec 08             	sub    esp,0x8
10005487:	8d 85 86 fd ff ff    	lea    eax,[ebp-0x27a]
1000548d:	50                   	push   eax
1000548e:	ff 75 a8             	push   DWORD PTR [ebp-0x58]
10005491:	e8 fc ff ff ff       	call   10005492 <begin(void*)+0x4c8>	10005492: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005496:	83 c4 10             	add    esp,0x10
10005499:	83 ec 08             	sub    esp,0x8
1000549c:	50                   	push   eax
1000549d:	ff 75 a8             	push   DWORD PTR [ebp-0x58]
100054a0:	e8 fc ff ff ff       	call   100054a1 <begin(void*)+0x4d7>	100054a1: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
100054a5:	83 c4 10             	add    esp,0x10
100054a8:	83 ec 04             	sub    esp,0x4
100054ab:	68 8e a0 00 10       	push   0x1000a08e	100054ac: R_386_32	.text
100054b0:	50                   	push   eax
100054b1:	ff 75 a8             	push   DWORD PTR [ebp-0x58]
100054b4:	e8 fc ff ff ff       	call   100054b5 <begin(void*)+0x4eb>	100054b5: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
100054b9:	83 c4 10             	add    esp,0x10
100054bc:	83 ec 08             	sub    esp,0x8
100054bf:	8d 85 86 fd ff ff    	lea    eax,[ebp-0x27a]
100054c5:	50                   	push   eax
100054c6:	ff 75 a8             	push   DWORD PTR [ebp-0x58]
100054c9:	e8 fc ff ff ff       	call   100054ca <begin(void*)+0x500>	100054ca: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100054ce:	83 c4 10             	add    esp,0x10
100054d1:	83 ec 08             	sub    esp,0x8
100054d4:	50                   	push   eax
100054d5:	ff 75 a8             	push   DWORD PTR [ebp-0x58]
100054d8:	e8 fc ff ff ff       	call   100054d9 <begin(void*)+0x50f>	100054d9: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
100054dd:	83 c4 10             	add    esp,0x10
100054e0:	83 ec 04             	sub    esp,0x4
100054e3:	68 93 a0 00 10       	push   0x1000a093	100054e4: R_386_32	.text
100054e8:	50                   	push   eax
100054e9:	ff 75 a8             	push   DWORD PTR [ebp-0x58]
100054ec:	e8 fc ff ff ff       	call   100054ed <begin(void*)+0x523>	100054ed: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
100054f1:	83 c4 10             	add    esp,0x10
100054f4:	83 ec 08             	sub    esp,0x8
100054f7:	8d 85 86 fd ff ff    	lea    eax,[ebp-0x27a]
100054fd:	50                   	push   eax
100054fe:	ff 75 a8             	push   DWORD PTR [ebp-0x58]
10005501:	e8 fc ff ff ff       	call   10005502 <begin(void*)+0x538>	10005502: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005506:	83 c4 10             	add    esp,0x10
10005509:	83 ec 08             	sub    esp,0x8
1000550c:	50                   	push   eax
1000550d:	ff 75 a8             	push   DWORD PTR [ebp-0x58]
10005510:	e8 fc ff ff ff       	call   10005511 <begin(void*)+0x547>	10005511: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005515:	83 c4 10             	add    esp,0x10
10005518:	83 ec 04             	sub    esp,0x4
1000551b:	68 9c a0 00 10       	push   0x1000a09c	1000551c: R_386_32	.text
10005520:	50                   	push   eax
10005521:	ff 75 a8             	push   DWORD PTR [ebp-0x58]
10005524:	e8 fc ff ff ff       	call   10005525 <begin(void*)+0x55b>	10005525: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
10005529:	83 c4 10             	add    esp,0x10
1000552c:	a1 00 00 00 00       	mov    eax,ds:0x0	1000552d: R_386_32	modesel
10005531:	89 c3                	mov    ebx,eax
10005533:	89 c6                	mov    esi,eax
10005535:	c1 fe 1f             	sar    esi,0x1f
10005538:	83 ec 08             	sub    esp,0x8
1000553b:	68 a8 a0 00 10       	push   0x1000a0a8	1000553c: R_386_32	.text
10005540:	ff 75 a8             	push   DWORD PTR [ebp-0x58]
10005543:	e8 fc ff ff ff       	call   10005544 <begin(void*)+0x57a>	10005544: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005548:	83 c4 10             	add    esp,0x10
1000554b:	83 ec 08             	sub    esp,0x8
1000554e:	50                   	push   eax
1000554f:	ff 75 a8             	push   DWORD PTR [ebp-0x58]
10005552:	e8 fc ff ff ff       	call   10005553 <begin(void*)+0x589>	10005553: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005557:	83 c4 10             	add    esp,0x10
1000555a:	83 ec 08             	sub    esp,0x8
1000555d:	6a 6a                	push   0x6a
1000555f:	56                   	push   esi
10005560:	53                   	push   ebx
10005561:	68 b4 a0 00 10       	push   0x1000a0b4	10005562: R_386_32	.text
10005566:	50                   	push   eax
10005567:	ff 75 a8             	push   DWORD PTR [ebp-0x58]
1000556a:	e8 fc ff ff ff       	call   1000556b <begin(void*)+0x5a1>	1000556b: R_386_PC32	CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)
1000556f:	83 c4 20             	add    esp,0x20
10005572:	83 ec 08             	sub    esp,0x8
10005575:	68 bc a0 00 10       	push   0x1000a0bc	10005576: R_386_32	.text
1000557a:	ff 75 a8             	push   DWORD PTR [ebp-0x58]
1000557d:	e8 fc ff ff ff       	call   1000557e <begin(void*)+0x5b4>	1000557e: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005582:	83 c4 10             	add    esp,0x10
10005585:	83 ec 04             	sub    esp,0x4
10005588:	68 00 00 00 00       	push   0x0	10005589: R_386_32	currName
1000558d:	50                   	push   eax
1000558e:	ff 75 a8             	push   DWORD PTR [ebp-0x58]
10005591:	e8 fc ff ff ff       	call   10005592 <begin(void*)+0x5c8>	10005592: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10005596:	83 c4 10             	add    esp,0x10
10005599:	83 ec 08             	sub    esp,0x8
1000559c:	68 ce a0 00 10       	push   0x1000a0ce	1000559d: R_386_32	.text
100055a1:	ff 75 a8             	push   DWORD PTR [ebp-0x58]
100055a4:	e8 fc ff ff ff       	call   100055a5 <begin(void*)+0x5db>	100055a5: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100055a9:	83 c4 10             	add    esp,0x10
100055ac:	83 ec 04             	sub    esp,0x4
100055af:	68 00 00 00 00       	push   0x0	100055b0: R_386_32	currComp
100055b4:	50                   	push   eax
100055b5:	ff 75 a8             	push   DWORD PTR [ebp-0x58]
100055b8:	e8 fc ff ff ff       	call   100055b9 <begin(void*)+0x5ef>	100055b9: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
100055bd:	83 c4 10             	add    esp,0x10
100055c0:	83 ec 08             	sub    esp,0x8
100055c3:	68 e3 a0 00 10       	push   0x1000a0e3	100055c4: R_386_32	.text
100055c8:	ff 75 a8             	push   DWORD PTR [ebp-0x58]
100055cb:	e8 fc ff ff ff       	call   100055cc <begin(void*)+0x602>	100055cc: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100055d0:	83 c4 10             	add    esp,0x10
100055d3:	83 ec 04             	sub    esp,0x4
100055d6:	68 00 00 00 00       	push   0x0	100055d7: R_386_32	pkeybuf
100055db:	50                   	push   eax
100055dc:	ff 75 a8             	push   DWORD PTR [ebp-0x58]
100055df:	e8 fc ff ff ff       	call   100055e0 <begin(void*)+0x616>	100055e0: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
100055e4:	83 c4 10             	add    esp,0x10
100055e7:	83 ec 08             	sub    esp,0x8
100055ea:	68 2a a0 00 10       	push   0x1000a02a	100055eb: R_386_32	.text
100055ef:	8d 85 86 fd ff ff    	lea    eax,[ebp-0x27a]
100055f5:	50                   	push   eax
100055f6:	e8 fc ff ff ff       	call   100055f7 <begin(void*)+0x62d>	100055f7: R_386_PC32	strcpy
100055fb:	83 c4 10             	add    esp,0x10
100055fe:	83 ec 08             	sub    esp,0x8
10005601:	8d 85 06 fd ff ff    	lea    eax,[ebp-0x2fa]
10005607:	50                   	push   eax
10005608:	8d 85 86 fd ff ff    	lea    eax,[ebp-0x27a]
1000560e:	50                   	push   eax
1000560f:	e8 fc ff ff ff       	call   10005610 <begin(void*)+0x646>	10005610: R_386_PC32	strcat
10005614:	83 c4 10             	add    esp,0x10
10005617:	83 ec 08             	sub    esp,0x8
1000561a:	68 fb a0 00 10       	push   0x1000a0fb	1000561b: R_386_32	.text
1000561f:	8d 85 86 fd ff ff    	lea    eax,[ebp-0x27a]
10005625:	50                   	push   eax
10005626:	e8 fc ff ff ff       	call   10005627 <begin(void*)+0x65d>	10005627: R_386_PC32	strcat
1000562b:	83 c4 10             	add    esp,0x10
1000562e:	83 ec 08             	sub    esp,0x8
10005631:	8d 85 86 fd ff ff    	lea    eax,[ebp-0x27a]
10005637:	50                   	push   eax
10005638:	ff 75 a8             	push   DWORD PTR [ebp-0x58]
1000563b:	e8 fc ff ff ff       	call   1000563c <begin(void*)+0x672>	1000563c: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005640:	83 c4 10             	add    esp,0x10
10005643:	83 ec 04             	sub    esp,0x4
10005646:	68 00 00 00 00       	push   0x0	10005647: R_386_32	passwhash
1000564b:	50                   	push   eax
1000564c:	ff 75 a8             	push   DWORD PTR [ebp-0x58]
1000564f:	e8 fc ff ff ff       	call   10005650 <begin(void*)+0x686>	10005650: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10005654:	83 c4 10             	add    esp,0x10
10005657:	83 ec 08             	sub    esp,0x8
1000565a:	68 2a a0 00 10       	push   0x1000a02a	1000565b: R_386_32	.text
1000565f:	8d 85 86 fd ff ff    	lea    eax,[ebp-0x27a]
10005665:	50                   	push   eax
10005666:	e8 fc ff ff ff       	call   10005667 <begin(void*)+0x69d>	10005667: R_386_PC32	strcpy
1000566b:	83 c4 10             	add    esp,0x10
1000566e:	83 ec 08             	sub    esp,0x8
10005671:	8d 85 06 fd ff ff    	lea    eax,[ebp-0x2fa]
10005677:	50                   	push   eax
10005678:	8d 85 86 fd ff ff    	lea    eax,[ebp-0x27a]
1000567e:	50                   	push   eax
1000567f:	e8 fc ff ff ff       	call   10005680 <begin(void*)+0x6b6>	10005680: R_386_PC32	strcat
10005684:	83 c4 10             	add    esp,0x10
10005687:	83 ec 08             	sub    esp,0x8
1000568a:	68 05 a1 00 10       	push   0x1000a105	1000568b: R_386_32	.text
1000568f:	8d 85 86 fd ff ff    	lea    eax,[ebp-0x27a]
10005695:	50                   	push   eax
10005696:	e8 fc ff ff ff       	call   10005697 <begin(void*)+0x6cd>	10005697: R_386_PC32	strcat
1000569b:	83 c4 10             	add    esp,0x10
1000569e:	83 ec 08             	sub    esp,0x8
100056a1:	8d 85 86 fd ff ff    	lea    eax,[ebp-0x27a]
100056a7:	50                   	push   eax
100056a8:	ff 75 a8             	push   DWORD PTR [ebp-0x58]
100056ab:	e8 fc ff ff ff       	call   100056ac <begin(void*)+0x6e2>	100056ac: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100056b0:	83 c4 10             	add    esp,0x10
100056b3:	83 ec 04             	sub    esp,0x4
100056b6:	68 00 00 00 00       	push   0x0	100056b7: R_386_32	passwsalt
100056bb:	50                   	push   eax
100056bc:	ff 75 a8             	push   DWORD PTR [ebp-0x58]
100056bf:	e8 fc ff ff ff       	call   100056c0 <begin(void*)+0x6f6>	100056c0: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
100056c4:	83 c4 10             	add    esp,0x10
100056c7:	83 ec 08             	sub    esp,0x8
100056ca:	68 2a a0 00 10       	push   0x1000a02a	100056cb: R_386_32	.text
100056cf:	8d 85 86 fd ff ff    	lea    eax,[ebp-0x27a]
100056d5:	50                   	push   eax
100056d6:	e8 fc ff ff ff       	call   100056d7 <begin(void*)+0x70d>	100056d7: R_386_PC32	strcpy
100056db:	83 c4 10             	add    esp,0x10
100056de:	83 ec 08             	sub    esp,0x8
100056e1:	8d 85 06 fd ff ff    	lea    eax,[ebp-0x2fa]
100056e7:	50                   	push   eax
100056e8:	8d 85 86 fd ff ff    	lea    eax,[ebp-0x27a]
100056ee:	50                   	push   eax
100056ef:	e8 fc ff ff ff       	call   100056f0 <begin(void*)+0x726>	100056f0: R_386_PC32	strcat
100056f4:	83 c4 10             	add    esp,0x10
100056f7:	83 ec 08             	sub    esp,0x8
100056fa:	68 0b a1 00 10       	push   0x1000a10b	100056fb: R_386_32	.text
100056ff:	8d 85 86 fd ff ff    	lea    eax,[ebp-0x27a]
10005705:	50                   	push   eax
10005706:	e8 fc ff ff ff       	call   10005707 <begin(void*)+0x73d>	10005707: R_386_PC32	strcat
1000570b:	83 c4 10             	add    esp,0x10
1000570e:	83 ec 08             	sub    esp,0x8
10005711:	8d 85 86 fd ff ff    	lea    eax,[ebp-0x27a]
10005717:	50                   	push   eax
10005718:	ff 75 a8             	push   DWORD PTR [ebp-0x58]
1000571b:	e8 fc ff ff ff       	call   1000571c <begin(void*)+0x752>	1000571c: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005720:	83 c4 10             	add    esp,0x10
10005723:	83 ec 04             	sub    esp,0x4
10005726:	68 00 00 00 00       	push   0x0	10005727: R_386_32	currName
1000572b:	50                   	push   eax
1000572c:	ff 75 a8             	push   DWORD PTR [ebp-0x58]
1000572f:	e8 fc ff ff ff       	call   10005730 <begin(void*)+0x766>	10005730: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10005734:	83 c4 10             	add    esp,0x10
10005737:	83 ec 0c             	sub    esp,0xc
1000573a:	ff 75 a8             	push   DWORD PTR [ebp-0x58]
1000573d:	e8 fc ff ff ff       	call   1000573e <begin(void*)+0x774>	1000573e: R_386_PC32	CmClose(Reghive_Tag*)
10005742:	83 c4 10             	add    esp,0x10
10005745:	a1 00 00 00 00       	mov    eax,ds:0x0	10005746: R_386_32	Krnl::computer
1000574a:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
10005750:	83 e0 80             	and    eax,0xffffff80
10005753:	84 c0                	test   al,al
10005755:	75 2a                	jne    10005781 <begin(void*)+0x7b7>
10005757:	a1 00 00 00 00       	mov    eax,ds:0x0	10005758: R_386_32	Krnl::computer
1000575c:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
10005762:	83 e0 20             	and    eax,0x20
10005765:	84 c0                	test   al,al
10005767:	74 1c                	je     10005785 <begin(void*)+0x7bb>
10005769:	a1 00 00 00 00       	mov    eax,ds:0x0	1000576a: R_386_32	Krnl::computer
1000576e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
10005774:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
1000577a:	83 e0 04             	and    eax,0x4
1000577d:	84 c0                	test   al,al
1000577f:	74 04                	je     10005785 <begin(void*)+0x7bb>
10005781:	b0 01                	mov    al,0x1
10005783:	eb 02                	jmp    10005787 <begin(void*)+0x7bd>
10005785:	b0 00                	mov    al,0x0
10005787:	84 c0                	test   al,al
10005789:	0f 84 99 00 00 00    	je     10005828 <begin(void*)+0x85e>
1000578f:	83 ec 0c             	sub    esp,0xc
10005792:	68 14 01 00 00       	push   0x114
10005797:	e8 fc ff ff ff       	call   10005798 <begin(void*)+0x7ce>	10005798: R_386_PC32	operator new(unsigned long)
1000579c:	83 c4 10             	add    esp,0x10
1000579f:	89 c3                	mov    ebx,eax
100057a1:	a1 00 00 00 00       	mov    eax,ds:0x0	100057a2: R_386_32	kernelProcess
100057a6:	83 ec 04             	sub    esp,0x4
100057a9:	50                   	push   eax
100057aa:	68 18 a1 00 10       	push   0x1000a118	100057ab: R_386_32	.text
100057af:	53                   	push   ebx
100057b0:	e8 fc ff ff ff       	call   100057b1 <begin(void*)+0x7e7>	100057b1: R_386_PC32	File::File(char const*, Process*)
100057b5:	83 c4 10             	add    esp,0x10
100057b8:	89 5d a4             	mov    DWORD PTR [ebp-0x5c],ebx
100057bb:	83 ec 08             	sub    esp,0x8
100057be:	68 36 a1 00 10       	push   0x1000a136	100057bf: R_386_32	.text
100057c3:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100057c6:	e8 fc ff ff ff       	call   100057c7 <begin(void*)+0x7fd>	100057c7: R_386_PC32	File::rename(char const*)
100057cb:	83 c4 10             	add    esp,0x10
100057ce:	83 7d a4 00          	cmp    DWORD PTR [ebp-0x5c],0x0
100057d2:	74 15                	je     100057e9 <begin(void*)+0x81f>
100057d4:	8b 45 a4             	mov    eax,DWORD PTR [ebp-0x5c]
100057d7:	8b 00                	mov    eax,DWORD PTR [eax]
100057d9:	83 c0 08             	add    eax,0x8
100057dc:	8b 00                	mov    eax,DWORD PTR [eax]
100057de:	83 ec 0c             	sub    esp,0xc
100057e1:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
100057e4:	ff d0                	call   eax
100057e6:	83 c4 10             	add    esp,0x10
100057e9:	83 ec 0c             	sub    esp,0xc
100057ec:	68 14 01 00 00       	push   0x114
100057f1:	e8 fc ff ff ff       	call   100057f2 <begin(void*)+0x828>	100057f2: R_386_PC32	operator new(unsigned long)
100057f6:	83 c4 10             	add    esp,0x10
100057f9:	89 c3                	mov    ebx,eax
100057fb:	a1 00 00 00 00       	mov    eax,ds:0x0	100057fc: R_386_32	kernelProcess
10005800:	83 ec 04             	sub    esp,0x4
10005803:	50                   	push   eax
10005804:	68 54 a1 00 10       	push   0x1000a154	10005805: R_386_32	.text
10005809:	53                   	push   ebx
1000580a:	e8 fc ff ff ff       	call   1000580b <begin(void*)+0x841>	1000580b: R_386_PC32	File::File(char const*, Process*)
1000580f:	83 c4 10             	add    esp,0x10
10005812:	89 5d a4             	mov    DWORD PTR [ebp-0x5c],ebx
10005815:	83 ec 08             	sub    esp,0x8
10005818:	68 18 a1 00 10       	push   0x1000a118	10005819: R_386_32	.text
1000581d:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
10005820:	e8 fc ff ff ff       	call   10005821 <begin(void*)+0x857>	10005821: R_386_PC32	File::rename(char const*)
10005825:	83 c4 10             	add    esp,0x10
10005828:	a1 00 00 00 00       	mov    eax,ds:0x0	10005829: R_386_32	term
1000582d:	83 ec 0c             	sub    esp,0xc
10005830:	50                   	push   eax
10005831:	e8 fc ff ff ff       	call   10005832 <begin(void*)+0x868>	10005832: R_386_PC32	setActiveTerminal(VgaText*)
10005836:	83 c4 10             	add    esp,0x10
10005839:	e8 fc ff ff ff       	call   1000583a <begin(void*)+0x870>	1000583a: R_386_PC32	drawBootScreen()
1000583e:	83 ec 0c             	sub    esp,0xc
10005841:	68 31 9e 00 10       	push   0x10009e31	10005842: R_386_32	.text
10005846:	6a 0d                	push   0xd
10005848:	6a 32                	push   0x32
1000584a:	6a 05                	push   0x5
1000584c:	6a 16                	push   0x16
1000584e:	e8 fc ff ff ff       	call   1000584f <begin(void*)+0x885>	1000584f: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
10005853:	83 c4 20             	add    esp,0x20
10005856:	a1 00 00 00 00       	mov    eax,ds:0x0	10005857: R_386_32	term
1000585b:	83 ec 04             	sub    esp,0x4
1000585e:	6a 08                	push   0x8
10005860:	6a 18                	push   0x18
10005862:	50                   	push   eax
10005863:	e8 fc ff ff ff       	call   10005864 <begin(void*)+0x89a>	10005864: R_386_PC32	VgaText::setCursor(int, int)
10005868:	83 c4 10             	add    esp,0x10
1000586b:	a1 00 00 00 00       	mov    eax,ds:0x0	1000586c: R_386_32	term
10005870:	83 ec 08             	sub    esp,0x8
10005873:	68 70 a1 00 10       	push   0x1000a170	10005874: R_386_32	.text
10005878:	50                   	push   eax
10005879:	e8 fc ff ff ff       	call   1000587a <begin(void*)+0x8b0>	1000587a: R_386_PC32	VgaText::puts(char const*)
1000587e:	83 c4 10             	add    esp,0x10
10005881:	a1 00 00 00 00       	mov    eax,ds:0x0	10005882: R_386_32	term
10005886:	83 ec 04             	sub    esp,0x4
10005889:	6a 0a                	push   0xa
1000588b:	6a 18                	push   0x18
1000588d:	50                   	push   eax
1000588e:	e8 fc ff ff ff       	call   1000588f <begin(void*)+0x8c5>	1000588f: R_386_PC32	VgaText::setCursor(int, int)
10005893:	83 c4 10             	add    esp,0x10
10005896:	a1 00 00 00 00       	mov    eax,ds:0x0	10005897: R_386_32	term
1000589b:	83 ec 08             	sub    esp,0x8
1000589e:	68 98 a1 00 10       	push   0x1000a198	1000589f: R_386_32	.text
100058a3:	50                   	push   eax
100058a4:	e8 fc ff ff ff       	call   100058a5 <begin(void*)+0x8db>	100058a5: R_386_PC32	VgaText::puts(char const*)
100058a9:	83 c4 10             	add    esp,0x10
100058ac:	a1 00 00 00 00       	mov    eax,ds:0x0	100058ad: R_386_32	term
100058b1:	83 ec 04             	sub    esp,0x4
100058b4:	6a 0b                	push   0xb
100058b6:	6a 18                	push   0x18
100058b8:	50                   	push   eax
100058b9:	e8 fc ff ff ff       	call   100058ba <begin(void*)+0x8f0>	100058ba: R_386_PC32	VgaText::setCursor(int, int)
100058be:	83 c4 10             	add    esp,0x10
100058c1:	a1 00 00 00 00       	mov    eax,ds:0x0	100058c2: R_386_32	term
100058c6:	83 ec 08             	sub    esp,0x8
100058c9:	68 c4 a1 00 10       	push   0x1000a1c4	100058ca: R_386_32	.text
100058ce:	50                   	push   eax
100058cf:	e8 fc ff ff ff       	call   100058d0 <begin(void*)+0x906>	100058d0: R_386_PC32	VgaText::puts(char const*)
100058d4:	83 c4 10             	add    esp,0x10
100058d7:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100058d9: R_386_32	installKey
100058de:	a0 00 00 00 00       	mov    al,ds:0x0	100058df: R_386_32	installKey
100058e3:	84 c0                	test   al,al
100058e5:	0f 94 c0             	sete   al
100058e8:	84 c0                	test   al,al
100058ea:	74 02                	je     100058ee <begin(void*)+0x924>
100058ec:	eb f0                	jmp    100058de <begin(void*)+0x914>
100058ee:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100058f0: R_386_32	installKey
100058f5:	a1 00 00 00 00       	mov    eax,ds:0x0	100058f6: R_386_32	term
100058fa:	83 ec 04             	sub    esp,0x4
100058fd:	6a 0c                	push   0xc
100058ff:	6a 18                	push   0x18
10005901:	50                   	push   eax
10005902:	e8 fc ff ff ff       	call   10005903 <begin(void*)+0x939>	10005903: R_386_PC32	VgaText::setCursor(int, int)
10005907:	83 c4 10             	add    esp,0x10
1000590a:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	1000590c: R_386_32	Krnl::computer
10005910:	a1 00 00 00 00       	mov    eax,ds:0x0	10005911: R_386_32	Krnl::computer
10005915:	8b 00                	mov    eax,DWORD PTR [eax]
10005917:	83 c0 0c             	add    eax,0xc
1000591a:	8b 00                	mov    eax,DWORD PTR [eax]
1000591c:	6a 00                	push   0x0
1000591e:	6a 00                	push   0x0
10005920:	6a 01                	push   0x1
10005922:	52                   	push   edx
10005923:	ff d0                	call   eax
10005925:	83 c4 10             	add    esp,0x10
10005928:	a1 00 00 00 00       	mov    eax,ds:0x0	10005929: R_386_32	term
1000592d:	6a 0f                	push   0xf
1000592f:	6a 0c                	push   0xc
10005931:	68 d8 a1 00 10       	push   0x1000a1d8	10005932: R_386_32	.text
10005936:	50                   	push   eax
10005937:	e8 fc ff ff ff       	call   10005938 <begin(void*)+0x96e>	10005938: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
1000593c:	83 c4 10             	add    esp,0x10
1000593f:	e9 ab 0c 00 00       	jmp    100065ef <begin(void*)+0x1625>
10005944:	83 ec 0c             	sub    esp,0xc
10005947:	68 ec 9f 00 10       	push   0x10009fec	10005948: R_386_32	.text
1000594c:	e8 fc ff ff ff       	call   1000594d <begin(void*)+0x983>	1000594d: R_386_PC32	CmOpen(char const*)
10005951:	83 c4 10             	add    esp,0x10
10005954:	89 45 a0             	mov    DWORD PTR [ebp-0x60],eax
10005957:	83 ec 08             	sub    esp,0x8
1000595a:	68 e3 a0 00 10       	push   0x1000a0e3	1000595b: R_386_32	.text
1000595f:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10005962:	e8 fc ff ff ff       	call   10005963 <begin(void*)+0x999>	10005963: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005967:	83 c4 10             	add    esp,0x10
1000596a:	83 ec 04             	sub    esp,0x4
1000596d:	8d 95 86 fd ff ff    	lea    edx,[ebp-0x27a]
10005973:	52                   	push   edx
10005974:	50                   	push   eax
10005975:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10005978:	e8 fc ff ff ff       	call   10005979 <begin(void*)+0x9af>	10005979: R_386_PC32	CmGetString(Reghive_Tag*, int, char*)
1000597d:	83 c4 10             	add    esp,0x10
10005980:	83 ec 08             	sub    esp,0x8
10005983:	68 fe a1 00 10       	push   0x1000a1fe	10005984: R_386_32	.text
10005988:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
1000598b:	e8 fc ff ff ff       	call   1000598c <begin(void*)+0x9c2>	1000598c: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005990:	83 c4 10             	add    esp,0x10
10005993:	83 ec 04             	sub    esp,0x4
10005996:	8d 55 80             	lea    edx,[ebp-0x80]
10005999:	52                   	push   edx
1000599a:	50                   	push   eax
1000599b:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
1000599e:	e8 fc ff ff ff       	call   1000599f <begin(void*)+0x9d5>	1000599f: R_386_PC32	CmGetInteger(Reghive_Tag*, int, unsigned long long*)
100059a3:	83 c4 10             	add    esp,0x10
100059a6:	83 ec 0c             	sub    esp,0xc
100059a9:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
100059ac:	e8 fc ff ff ff       	call   100059ad <begin(void*)+0x9e3>	100059ad: R_386_PC32	CmClose(Reghive_Tag*)
100059b1:	83 c4 10             	add    esp,0x10
100059b4:	83 ec 0c             	sub    esp,0xc
100059b7:	8d 85 86 fd ff ff    	lea    eax,[ebp-0x27a]
100059bd:	50                   	push   eax
100059be:	e8 fc ff ff ff       	call   100059bf <begin(void*)+0x9f5>	100059bf: R_386_PC32	checkExtendedKey(char*)
100059c3:	83 c4 10             	add    esp,0x10
100059c6:	85 c0                	test   eax,eax
100059c8:	0f 94 c0             	sete   al
100059cb:	84 c0                	test   al,al
100059cd:	0f 84 ed 01 00 00    	je     10005bc0 <begin(void*)+0xbf6>
100059d3:	83 ec 0c             	sub    esp,0xc
100059d6:	6a 01                	push   0x1
100059d8:	e8 fc ff ff ff       	call   100059d9 <begin(void*)+0xa0f>	100059d9: R_386_PC32	firstRun(bool)
100059dd:	83 c4 10             	add    esp,0x10
100059e0:	83 ec 0c             	sub    esp,0xc
100059e3:	68 ec 9f 00 10       	push   0x10009fec	100059e4: R_386_32	.text
100059e8:	e8 fc ff ff ff       	call   100059e9 <begin(void*)+0xa1f>	100059e9: R_386_PC32	CmOpen(char const*)
100059ed:	83 c4 10             	add    esp,0x10
100059f0:	89 45 a0             	mov    DWORD PTR [ebp-0x60],eax
100059f3:	83 ec 04             	sub    esp,0x4
100059f6:	68 11 a0 00 10       	push   0x1000a011	100059f7: R_386_32	.text
100059fb:	6a 00                	push   0x0
100059fd:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10005a00:	e8 fc ff ff ff       	call   10005a01 <begin(void*)+0xa37>	10005a01: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
10005a05:	83 c4 10             	add    esp,0x10
10005a08:	83 ec 08             	sub    esp,0x8
10005a0b:	68 11 a0 00 10       	push   0x1000a011	10005a0c: R_386_32	.text
10005a10:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10005a13:	e8 fc ff ff ff       	call   10005a14 <begin(void*)+0xa4a>	10005a14: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005a18:	83 c4 10             	add    esp,0x10
10005a1b:	83 ec 08             	sub    esp,0x8
10005a1e:	50                   	push   eax
10005a1f:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10005a22:	e8 fc ff ff ff       	call   10005a23 <begin(void*)+0xa59>	10005a23: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005a27:	83 c4 10             	add    esp,0x10
10005a2a:	83 ec 04             	sub    esp,0x4
10005a2d:	68 4b a0 00 10       	push   0x1000a04b	10005a2e: R_386_32	.text
10005a32:	50                   	push   eax
10005a33:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10005a36:	e8 fc ff ff ff       	call   10005a37 <begin(void*)+0xa6d>	10005a37: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
10005a3b:	83 c4 10             	add    esp,0x10
10005a3e:	83 ec 08             	sub    esp,0x8
10005a41:	68 69 a0 00 10       	push   0x1000a069	10005a42: R_386_32	.text
10005a46:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10005a49:	e8 fc ff ff ff       	call   10005a4a <begin(void*)+0xa80>	10005a4a: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005a4e:	83 c4 10             	add    esp,0x10
10005a51:	83 ec 08             	sub    esp,0x8
10005a54:	50                   	push   eax
10005a55:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10005a58:	e8 fc ff ff ff       	call   10005a59 <begin(void*)+0xa8f>	10005a59: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005a5d:	83 c4 10             	add    esp,0x10
10005a60:	83 ec 04             	sub    esp,0x4
10005a63:	68 83 a0 00 10       	push   0x1000a083	10005a64: R_386_32	.text
10005a68:	50                   	push   eax
10005a69:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10005a6c:	e8 fc ff ff ff       	call   10005a6d <begin(void*)+0xaa3>	10005a6d: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
10005a71:	83 c4 10             	add    esp,0x10
10005a74:	83 ec 08             	sub    esp,0x8
10005a77:	68 e3 a0 00 10       	push   0x1000a0e3	10005a78: R_386_32	.text
10005a7c:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10005a7f:	e8 fc ff ff ff       	call   10005a80 <begin(void*)+0xab6>	10005a80: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005a84:	83 c4 10             	add    esp,0x10
10005a87:	83 ec 04             	sub    esp,0x4
10005a8a:	68 00 00 00 00       	push   0x0	10005a8b: R_386_32	pkeybuf
10005a8f:	50                   	push   eax
10005a90:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10005a93:	e8 fc ff ff ff       	call   10005a94 <begin(void*)+0xaca>	10005a94: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10005a98:	83 c4 10             	add    esp,0x10
10005a9b:	83 ec 0c             	sub    esp,0xc
10005a9e:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10005aa1:	e8 fc ff ff ff       	call   10005aa2 <begin(void*)+0xad8>	10005aa2: R_386_PC32	CmClose(Reghive_Tag*)
10005aa6:	83 c4 10             	add    esp,0x10
10005aa9:	a1 00 00 00 00       	mov    eax,ds:0x0	10005aaa: R_386_32	term
10005aae:	83 ec 0c             	sub    esp,0xc
10005ab1:	50                   	push   eax
10005ab2:	e8 fc ff ff ff       	call   10005ab3 <begin(void*)+0xae9>	10005ab3: R_386_PC32	setActiveTerminal(VgaText*)
10005ab7:	83 c4 10             	add    esp,0x10
10005aba:	e8 fc ff ff ff       	call   10005abb <begin(void*)+0xaf1>	10005abb: R_386_PC32	drawBootScreen()
10005abf:	83 ec 0c             	sub    esp,0xc
10005ac2:	68 12 a2 00 10       	push   0x1000a212	10005ac3: R_386_32	.text
10005ac7:	6a 0d                	push   0xd
10005ac9:	6a 32                	push   0x32
10005acb:	6a 05                	push   0x5
10005acd:	6a 16                	push   0x16
10005acf:	e8 fc ff ff ff       	call   10005ad0 <begin(void*)+0xb06>	10005ad0: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
10005ad4:	83 c4 20             	add    esp,0x20
10005ad7:	a1 00 00 00 00       	mov    eax,ds:0x0	10005ad8: R_386_32	term
10005adc:	83 ec 04             	sub    esp,0x4
10005adf:	6a 08                	push   0x8
10005ae1:	6a 18                	push   0x18
10005ae3:	50                   	push   eax
10005ae4:	e8 fc ff ff ff       	call   10005ae5 <begin(void*)+0xb1b>	10005ae5: R_386_PC32	VgaText::setCursor(int, int)
10005ae9:	83 c4 10             	add    esp,0x10
10005aec:	a1 00 00 00 00       	mov    eax,ds:0x0	10005aed: R_386_32	term
10005af1:	83 ec 08             	sub    esp,0x8
10005af4:	68 28 a2 00 10       	push   0x1000a228	10005af5: R_386_32	.text
10005af9:	50                   	push   eax
10005afa:	e8 fc ff ff ff       	call   10005afb <begin(void*)+0xb31>	10005afb: R_386_PC32	VgaText::puts(char const*)
10005aff:	83 c4 10             	add    esp,0x10
10005b02:	a1 00 00 00 00       	mov    eax,ds:0x0	10005b03: R_386_32	term
10005b07:	83 ec 04             	sub    esp,0x4
10005b0a:	6a 0a                	push   0xa
10005b0c:	6a 18                	push   0x18
10005b0e:	50                   	push   eax
10005b0f:	e8 fc ff ff ff       	call   10005b10 <begin(void*)+0xb46>	10005b10: R_386_PC32	VgaText::setCursor(int, int)
10005b14:	83 c4 10             	add    esp,0x10
10005b17:	a1 00 00 00 00       	mov    eax,ds:0x0	10005b18: R_386_32	term
10005b1c:	83 ec 08             	sub    esp,0x8
10005b1f:	68 98 a1 00 10       	push   0x1000a198	10005b20: R_386_32	.text
10005b24:	50                   	push   eax
10005b25:	e8 fc ff ff ff       	call   10005b26 <begin(void*)+0xb5c>	10005b26: R_386_PC32	VgaText::puts(char const*)
10005b2a:	83 c4 10             	add    esp,0x10
10005b2d:	a1 00 00 00 00       	mov    eax,ds:0x0	10005b2e: R_386_32	term
10005b32:	83 ec 04             	sub    esp,0x4
10005b35:	6a 0b                	push   0xb
10005b37:	6a 18                	push   0x18
10005b39:	50                   	push   eax
10005b3a:	e8 fc ff ff ff       	call   10005b3b <begin(void*)+0xb71>	10005b3b: R_386_PC32	VgaText::setCursor(int, int)
10005b3f:	83 c4 10             	add    esp,0x10
10005b42:	a1 00 00 00 00       	mov    eax,ds:0x0	10005b43: R_386_32	term
10005b47:	83 ec 08             	sub    esp,0x8
10005b4a:	68 c4 a1 00 10       	push   0x1000a1c4	10005b4b: R_386_32	.text
10005b4f:	50                   	push   eax
10005b50:	e8 fc ff ff ff       	call   10005b51 <begin(void*)+0xb87>	10005b51: R_386_PC32	VgaText::puts(char const*)
10005b55:	83 c4 10             	add    esp,0x10
10005b58:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10005b5a: R_386_32	installKey
10005b5f:	a0 00 00 00 00       	mov    al,ds:0x0	10005b60: R_386_32	installKey
10005b64:	84 c0                	test   al,al
10005b66:	0f 94 c0             	sete   al
10005b69:	84 c0                	test   al,al
10005b6b:	74 02                	je     10005b6f <begin(void*)+0xba5>
10005b6d:	eb f0                	jmp    10005b5f <begin(void*)+0xb95>
10005b6f:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10005b71: R_386_32	installKey
10005b76:	a1 00 00 00 00       	mov    eax,ds:0x0	10005b77: R_386_32	term
10005b7b:	83 ec 04             	sub    esp,0x4
10005b7e:	6a 0c                	push   0xc
10005b80:	6a 18                	push   0x18
10005b82:	50                   	push   eax
10005b83:	e8 fc ff ff ff       	call   10005b84 <begin(void*)+0xbba>	10005b84: R_386_PC32	VgaText::setCursor(int, int)
10005b88:	83 c4 10             	add    esp,0x10
10005b8b:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10005b8d: R_386_32	Krnl::computer
10005b91:	a1 00 00 00 00       	mov    eax,ds:0x0	10005b92: R_386_32	Krnl::computer
10005b96:	8b 00                	mov    eax,DWORD PTR [eax]
10005b98:	83 c0 0c             	add    eax,0xc
10005b9b:	8b 00                	mov    eax,DWORD PTR [eax]
10005b9d:	6a 00                	push   0x0
10005b9f:	6a 00                	push   0x0
10005ba1:	6a 01                	push   0x1
10005ba3:	52                   	push   edx
10005ba4:	ff d0                	call   eax
10005ba6:	83 c4 10             	add    esp,0x10
10005ba9:	a1 00 00 00 00       	mov    eax,ds:0x0	10005baa: R_386_32	term
10005bae:	6a 0f                	push   0xf
10005bb0:	6a 0c                	push   0xc
10005bb2:	68 d8 a1 00 10       	push   0x1000a1d8	10005bb3: R_386_32	.text
10005bb7:	50                   	push   eax
10005bb8:	e8 fc ff ff ff       	call   10005bb9 <begin(void*)+0xbef>	10005bb9: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10005bbd:	83 c4 10             	add    esp,0x10
10005bc0:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10005bc2: R_386_32	showSidebar
10005bc7:	83 ec 0c             	sub    esp,0xc
10005bca:	68 84 01 00 00       	push   0x184
10005bcf:	e8 fc ff ff ff       	call   10005bd0 <begin(void*)+0xc06>	10005bd0: R_386_PC32	operator new(unsigned long)
10005bd4:	83 c4 10             	add    esp,0x10
10005bd7:	89 c3                	mov    ebx,eax
10005bd9:	83 ec 08             	sub    esp,0x8
10005bdc:	68 7c 9a 00 10       	push   0x10009a7c	10005bdd: R_386_32	.text
10005be1:	53                   	push   ebx
10005be2:	e8 fc ff ff ff       	call   10005be3 <begin(void*)+0xc19>	10005be3: R_386_PC32	VgaText::VgaText(char const*)
10005be7:	83 c4 10             	add    esp,0x10
10005bea:	89 1d 00 00 00 00    	mov    DWORD PTR ds:0x0,ebx	10005bec: R_386_32	term
10005bf0:	a1 00 00 00 00       	mov    eax,ds:0x0	10005bf1: R_386_32	term
10005bf5:	83 ec 0c             	sub    esp,0xc
10005bf8:	50                   	push   eax
10005bf9:	e8 fc ff ff ff       	call   10005bfa <begin(void*)+0xc30>	10005bfa: R_386_PC32	setActiveTerminal(VgaText*)
10005bfe:	83 c4 10             	add    esp,0x10
10005c01:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10005c03: R_386_32	installKey
10005c08:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
10005c0f:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
10005c16:	83 ec 04             	sub    esp,0x4
10005c19:	68 80 00 00 00       	push   0x80
10005c1e:	6a 00                	push   0x0
10005c20:	8d 85 04 fb ff ff    	lea    eax,[ebp-0x4fc]
10005c26:	50                   	push   eax
10005c27:	e8 fc ff ff ff       	call   10005c28 <begin(void*)+0xc5e>	10005c28: R_386_PC32	memset
10005c2c:	83 c4 10             	add    esp,0x10
10005c2f:	83 ec 04             	sub    esp,0x4
10005c32:	68 80 00 00 00       	push   0x80
10005c37:	6a 00                	push   0x0
10005c39:	8d 85 84 fb ff ff    	lea    eax,[ebp-0x47c]
10005c3f:	50                   	push   eax
10005c40:	e8 fc ff ff ff       	call   10005c41 <begin(void*)+0xc77>	10005c41: R_386_PC32	memset
10005c45:	83 c4 10             	add    esp,0x10
10005c48:	83 ec 0c             	sub    esp,0xc
10005c4b:	68 ec 9f 00 10       	push   0x10009fec	10005c4c: R_386_32	.text
10005c50:	e8 fc ff ff ff       	call   10005c51 <begin(void*)+0xc87>	10005c51: R_386_PC32	CmOpen(char const*)
10005c55:	83 c4 10             	add    esp,0x10
10005c58:	89 45 a0             	mov    DWORD PTR [ebp-0x60],eax
10005c5b:	83 ec 08             	sub    esp,0x8
10005c5e:	68 5c a0 00 10       	push   0x1000a05c	10005c5f: R_386_32	.text
10005c63:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10005c66:	e8 fc ff ff ff       	call   10005c67 <begin(void*)+0xc9d>	10005c67: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005c6b:	83 c4 10             	add    esp,0x10
10005c6e:	83 ec 08             	sub    esp,0x8
10005c71:	50                   	push   eax
10005c72:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10005c75:	e8 fc ff ff ff       	call   10005c76 <begin(void*)+0xcac>	10005c76: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005c7a:	83 c4 10             	add    esp,0x10
10005c7d:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
10005c80:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
10005c84:	0f 84 88 01 00 00    	je     10005e12 <begin(void*)+0xe48>
10005c8a:	83 ec 04             	sub    esp,0x4
10005c8d:	6a 50                	push   0x50
10005c8f:	6a 00                	push   0x0
10005c91:	8d 85 86 fc ff ff    	lea    eax,[ebp-0x37a]
10005c97:	50                   	push   eax
10005c98:	e8 fc ff ff ff       	call   10005c99 <begin(void*)+0xccf>	10005c99: R_386_PC32	memset
10005c9d:	83 c4 10             	add    esp,0x10
10005ca0:	83 ec 04             	sub    esp,0x4
10005ca3:	8d 85 86 fc ff ff    	lea    eax,[ebp-0x37a]
10005ca9:	50                   	push   eax
10005caa:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10005cad:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10005cb0:	e8 fc ff ff ff       	call   10005cb1 <begin(void*)+0xce7>	10005cb1: R_386_PC32	CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)
10005cb5:	83 c4 10             	add    esp,0x10
10005cb8:	89 45 9c             	mov    DWORD PTR [ebp-0x64],eax
10005cbb:	83 7d 9c 4e          	cmp    DWORD PTR [ebp-0x64],0x4e
10005cbf:	0f 85 34 01 00 00    	jne    10005df9 <begin(void*)+0xe2f>
10005cc5:	83 ec 0c             	sub    esp,0xc
10005cc8:	6a 50                	push   0x50
10005cca:	e8 fc ff ff ff       	call   10005ccb <begin(void*)+0xd01>	10005ccb: R_386_PC32	malloc
10005ccf:	83 c4 10             	add    esp,0x10
10005cd2:	89 c2                	mov    edx,eax
10005cd4:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10005cd7:	89 94 85 84 fb ff ff 	mov    DWORD PTR [ebp+eax*4-0x47c],edx
10005cde:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10005ce1:	8b 84 85 84 fb ff ff 	mov    eax,DWORD PTR [ebp+eax*4-0x47c]
10005ce8:	83 ec 08             	sub    esp,0x8
10005ceb:	8d 95 86 fc ff ff    	lea    edx,[ebp-0x37a]
10005cf1:	52                   	push   edx
10005cf2:	50                   	push   eax
10005cf3:	e8 fc ff ff ff       	call   10005cf4 <begin(void*)+0xd2a>	10005cf4: R_386_PC32	strcpy
10005cf8:	83 c4 10             	add    esp,0x10
10005cfb:	83 ec 08             	sub    esp,0x8
10005cfe:	68 2a a0 00 10       	push   0x1000a02a	10005cff: R_386_32	.text
10005d03:	8d 85 06 fd ff ff    	lea    eax,[ebp-0x2fa]
10005d09:	50                   	push   eax
10005d0a:	e8 fc ff ff ff       	call   10005d0b <begin(void*)+0xd41>	10005d0b: R_386_PC32	strcpy
10005d0f:	83 c4 10             	add    esp,0x10
10005d12:	83 ec 08             	sub    esp,0x8
10005d15:	8d 85 86 fc ff ff    	lea    eax,[ebp-0x37a]
10005d1b:	50                   	push   eax
10005d1c:	8d 85 06 fd ff ff    	lea    eax,[ebp-0x2fa]
10005d22:	50                   	push   eax
10005d23:	e8 fc ff ff ff       	call   10005d24 <begin(void*)+0xd5a>	10005d24: R_386_PC32	strcat
10005d28:	83 c4 10             	add    esp,0x10
10005d2b:	83 ec 08             	sub    esp,0x8
10005d2e:	68 0b a1 00 10       	push   0x1000a10b	10005d2f: R_386_32	.text
10005d33:	8d 85 06 fd ff ff    	lea    eax,[ebp-0x2fa]
10005d39:	50                   	push   eax
10005d3a:	e8 fc ff ff ff       	call   10005d3b <begin(void*)+0xd71>	10005d3b: R_386_PC32	strcat
10005d3f:	83 c4 10             	add    esp,0x10
10005d42:	83 ec 08             	sub    esp,0x8
10005d45:	8d 85 06 fd ff ff    	lea    eax,[ebp-0x2fa]
10005d4b:	50                   	push   eax
10005d4c:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10005d4f:	e8 fc ff ff ff       	call   10005d50 <begin(void*)+0xd86>	10005d50: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005d54:	83 c4 10             	add    esp,0x10
10005d57:	83 ec 04             	sub    esp,0x4
10005d5a:	8d 95 86 fc ff ff    	lea    edx,[ebp-0x37a]
10005d60:	52                   	push   edx
10005d61:	50                   	push   eax
10005d62:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10005d65:	e8 fc ff ff ff       	call   10005d66 <begin(void*)+0xd9c>	10005d66: R_386_PC32	CmGetString(Reghive_Tag*, int, char*)
10005d6a:	83 c4 10             	add    esp,0x10
10005d6d:	83 ec 0c             	sub    esp,0xc
10005d70:	6a 50                	push   0x50
10005d72:	e8 fc ff ff ff       	call   10005d73 <begin(void*)+0xda9>	10005d73: R_386_PC32	malloc
10005d77:	83 c4 10             	add    esp,0x10
10005d7a:	89 c2                	mov    edx,eax
10005d7c:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10005d7f:	89 94 85 04 fb ff ff 	mov    DWORD PTR [ebp+eax*4-0x4fc],edx
10005d86:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10005d89:	8b 84 85 04 fb ff ff 	mov    eax,DWORD PTR [ebp+eax*4-0x4fc]
10005d90:	83 ec 08             	sub    esp,0x8
10005d93:	68 3d 9a 00 10       	push   0x10009a3d	10005d94: R_386_32	.text
10005d98:	50                   	push   eax
10005d99:	e8 fc ff ff ff       	call   10005d9a <begin(void*)+0xdd0>	10005d9a: R_386_PC32	strcpy
10005d9e:	83 c4 10             	add    esp,0x10
10005da1:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10005da4:	8b 84 85 04 fb ff ff 	mov    eax,DWORD PTR [ebp+eax*4-0x4fc]
10005dab:	83 ec 08             	sub    esp,0x8
10005dae:	8d 95 86 fc ff ff    	lea    edx,[ebp-0x37a]
10005db4:	52                   	push   edx
10005db5:	50                   	push   eax
10005db6:	e8 fc ff ff ff       	call   10005db7 <begin(void*)+0xded>	10005db7: R_386_PC32	strcat
10005dbb:	83 c4 10             	add    esp,0x10
10005dbe:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10005dc1:	8b 84 85 04 fb ff ff 	mov    eax,DWORD PTR [ebp+eax*4-0x4fc]
10005dc8:	83 ec 0c             	sub    esp,0xc
10005dcb:	50                   	push   eax
10005dcc:	e8 fc ff ff ff       	call   10005dcd <begin(void*)+0xe03>	10005dcd: R_386_PC32	strlen
10005dd1:	83 c4 10             	add    esp,0x10
10005dd4:	83 f8 31             	cmp    eax,0x31
10005dd7:	77 1d                	ja     10005df6 <begin(void*)+0xe2c>
10005dd9:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10005ddc:	8b 84 85 04 fb ff ff 	mov    eax,DWORD PTR [ebp+eax*4-0x4fc]
10005de3:	83 ec 08             	sub    esp,0x8
10005de6:	68 3d 9a 00 10       	push   0x10009a3d	10005de7: R_386_32	.text
10005deb:	50                   	push   eax
10005dec:	e8 fc ff ff ff       	call   10005ded <begin(void*)+0xe23>	10005ded: R_386_PC32	strcat
10005df1:	83 c4 10             	add    esp,0x10
10005df4:	eb c8                	jmp    10005dbe <begin(void*)+0xdf4>
10005df6:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
10005df9:	83 ec 08             	sub    esp,0x8
10005dfc:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10005dff:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10005e02:	e8 fc ff ff ff       	call   10005e03 <begin(void*)+0xe39>	10005e03: R_386_PC32	CmGetNext(Reghive_Tag*, int)
10005e07:	83 c4 10             	add    esp,0x10
10005e0a:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
10005e0d:	e9 6e fe ff ff       	jmp    10005c80 <begin(void*)+0xcb6>
10005e12:	83 ec 0c             	sub    esp,0xc
10005e15:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10005e18:	e8 fc ff ff ff       	call   10005e19 <begin(void*)+0xe4f>	10005e19: R_386_PC32	CmClose(Reghive_Tag*)
10005e1d:	83 c4 10             	add    esp,0x10
10005e20:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10005e22: R_386_32	guiKeyboardHandler
	10005e26: R_386_32	bootInstallKeybrd(KeyboardToken, bool*)
10005e2a:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10005e2c: R_386_32	installKey
10005e31:	e8 fc ff ff ff       	call   10005e32 <begin(void*)+0xe68>	10005e32: R_386_PC32	drawBootScreen()
10005e36:	83 ec 0c             	sub    esp,0xc
10005e39:	68 4c a2 00 10       	push   0x1000a24c	10005e3a: R_386_32	.text
10005e3e:	6a 10                	push   0x10
10005e40:	6a 39                	push   0x39
10005e42:	6a 03                	push   0x3
10005e44:	6a 0c                	push   0xc
10005e46:	e8 fc ff ff ff       	call   10005e47 <begin(void*)+0xe7d>	10005e47: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
10005e4b:	83 c4 20             	add    esp,0x20
10005e4e:	a1 00 00 00 00       	mov    eax,ds:0x0	10005e4f: R_386_32	term
10005e53:	83 ec 04             	sub    esp,0x4
10005e56:	6a 06                	push   0x6
10005e58:	6a 0e                	push   0xe
10005e5a:	50                   	push   eax
10005e5b:	e8 fc ff ff ff       	call   10005e5c <begin(void*)+0xe92>	10005e5c: R_386_PC32	VgaText::setCursor(int, int)
10005e60:	83 c4 10             	add    esp,0x10
10005e63:	a1 00 00 00 00       	mov    eax,ds:0x0	10005e64: R_386_32	term
10005e68:	83 ec 08             	sub    esp,0x8
10005e6b:	68 52 a2 00 10       	push   0x1000a252	10005e6c: R_386_32	.text
10005e70:	50                   	push   eax
10005e71:	e8 fc ff ff ff       	call   10005e72 <begin(void*)+0xea8>	10005e72: R_386_PC32	VgaText::puts(char const*)
10005e76:	83 c4 10             	add    esp,0x10
10005e79:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
10005e80:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10005e83:	3b 45 e0             	cmp    eax,DWORD PTR [ebp-0x20]
10005e86:	7d 63                	jge    10005eeb <begin(void*)+0xf21>
10005e88:	a1 00 00 00 00       	mov    eax,ds:0x0	10005e89: R_386_32	term
10005e8d:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
10005e90:	83 c2 08             	add    edx,0x8
10005e93:	83 ec 04             	sub    esp,0x4
10005e96:	52                   	push   edx
10005e97:	6a 0f                	push   0xf
10005e99:	50                   	push   eax
10005e9a:	e8 fc ff ff ff       	call   10005e9b <begin(void*)+0xed1>	10005e9b: R_386_PC32	VgaText::setCursor(int, int)
10005e9f:	83 c4 10             	add    esp,0x10
10005ea2:	8b 1d 00 00 00 00    	mov    ebx,DWORD PTR ds:0x0	10005ea4: R_386_32	term
10005ea8:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10005eab:	3b 45 dc             	cmp    eax,DWORD PTR [ebp-0x24]
10005eae:	75 07                	jne    10005eb7 <begin(void*)+0xeed>
10005eb0:	b9 00 00 00 00       	mov    ecx,0x0
10005eb5:	eb 05                	jmp    10005ebc <begin(void*)+0xef2>
10005eb7:	b9 0f 00 00 00       	mov    ecx,0xf
10005ebc:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10005ebf:	3b 45 dc             	cmp    eax,DWORD PTR [ebp-0x24]
10005ec2:	75 07                	jne    10005ecb <begin(void*)+0xf01>
10005ec4:	ba 0f 00 00 00       	mov    edx,0xf
10005ec9:	eb 05                	jmp    10005ed0 <begin(void*)+0xf06>
10005ecb:	ba 00 00 00 00       	mov    edx,0x0
10005ed0:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10005ed3:	8b 84 85 04 fb ff ff 	mov    eax,DWORD PTR [ebp+eax*4-0x4fc]
10005eda:	51                   	push   ecx
10005edb:	52                   	push   edx
10005edc:	50                   	push   eax
10005edd:	53                   	push   ebx
10005ede:	e8 fc ff ff ff       	call   10005edf <begin(void*)+0xf15>	10005edf: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10005ee3:	83 c4 10             	add    esp,0x10
10005ee6:	ff 45 d4             	inc    DWORD PTR [ebp-0x2c]
10005ee9:	eb 95                	jmp    10005e80 <begin(void*)+0xeb6>
10005eeb:	a0 00 00 00 00       	mov    al,ds:0x0	10005eec: R_386_32	installKey
10005ef0:	84 c0                	test   al,al
10005ef2:	0f 94 c0             	sete   al
10005ef5:	84 c0                	test   al,al
10005ef7:	74 02                	je     10005efb <begin(void*)+0xf31>
10005ef9:	eb f0                	jmp    10005eeb <begin(void*)+0xf21>
10005efb:	a1 00 00 00 00       	mov    eax,ds:0x0	10005efc: R_386_32	term
10005f00:	05 82 00 00 00       	add    eax,0x82
10005f05:	83 ec 04             	sub    esp,0x4
10005f08:	6a 04                	push   0x4
10005f0a:	6a 00                	push   0x0
10005f0c:	50                   	push   eax
10005f0d:	e8 fc ff ff ff       	call   10005f0e <begin(void*)+0xf44>	10005f0e: R_386_PC32	memset
10005f12:	83 c4 10             	add    esp,0x10
10005f15:	a1 00 00 00 00       	mov    eax,ds:0x0	10005f16: R_386_32	term
10005f1a:	05 02 01 00 00       	add    eax,0x102
10005f1f:	83 ec 04             	sub    esp,0x4
10005f22:	6a 04                	push   0x4
10005f24:	6a 00                	push   0x0
10005f26:	50                   	push   eax
10005f27:	e8 fc ff ff ff       	call   10005f28 <begin(void*)+0xf5e>	10005f28: R_386_PC32	memset
10005f2c:	83 c4 10             	add    esp,0x10
10005f2f:	a0 00 00 00 00       	mov    al,ds:0x0	10005f30: R_386_32	installKey
10005f34:	3c 01                	cmp    al,0x1
10005f36:	0f 94 c0             	sete   al
10005f39:	84 c0                	test   al,al
10005f3b:	74 12                	je     10005f4f <begin(void*)+0xf85>
10005f3d:	ff 4d dc             	dec    DWORD PTR [ebp-0x24]
10005f40:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
10005f44:	79 39                	jns    10005f7f <begin(void*)+0xfb5>
10005f46:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
10005f4d:	eb 30                	jmp    10005f7f <begin(void*)+0xfb5>
10005f4f:	a0 00 00 00 00       	mov    al,ds:0x0	10005f50: R_386_32	installKey
10005f54:	3c 02                	cmp    al,0x2
10005f56:	0f 94 c0             	sete   al
10005f59:	84 c0                	test   al,al
10005f5b:	74 14                	je     10005f71 <begin(void*)+0xfa7>
10005f5d:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
10005f60:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10005f63:	3b 45 dc             	cmp    eax,DWORD PTR [ebp-0x24]
10005f66:	7f 17                	jg     10005f7f <begin(void*)+0xfb5>
10005f68:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10005f6b:	48                   	dec    eax
10005f6c:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
10005f6f:	eb 0e                	jmp    10005f7f <begin(void*)+0xfb5>
10005f71:	a0 00 00 00 00       	mov    al,ds:0x0	10005f72: R_386_32	installKey
10005f76:	3c 0a                	cmp    al,0xa
10005f78:	0f 94 c0             	sete   al
10005f7b:	84 c0                	test   al,al
10005f7d:	75 1c                	jne    10005f9b <begin(void*)+0xfd1>
10005f7f:	83 ec 0c             	sub    esp,0xc
10005f82:	68 f4 01 00 00       	push   0x1f4
10005f87:	e8 fc ff ff ff       	call   10005f88 <begin(void*)+0xfbe>	10005f88: R_386_PC32	milliTenthSleep(unsigned int)
10005f8c:	83 c4 10             	add    esp,0x10
10005f8f:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10005f91: R_386_32	installKey
10005f96:	e9 de fe ff ff       	jmp    10005e79 <begin(void*)+0xeaf>
10005f9b:	90                   	nop
10005f9c:	83 ec 08             	sub    esp,0x8
10005f9f:	68 2a a0 00 10       	push   0x1000a02a	10005fa0: R_386_32	.text
10005fa4:	8d 85 06 fc ff ff    	lea    eax,[ebp-0x3fa]
10005faa:	50                   	push   eax
10005fab:	e8 fc ff ff ff       	call   10005fac <begin(void*)+0xfe2>	10005fac: R_386_PC32	strcpy
10005fb0:	83 c4 10             	add    esp,0x10
10005fb3:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10005fb6:	8b 84 85 84 fb ff ff 	mov    eax,DWORD PTR [ebp+eax*4-0x47c]
10005fbd:	83 ec 08             	sub    esp,0x8
10005fc0:	50                   	push   eax
10005fc1:	8d 85 06 fc ff ff    	lea    eax,[ebp-0x3fa]
10005fc7:	50                   	push   eax
10005fc8:	e8 fc ff ff ff       	call   10005fc9 <begin(void*)+0xfff>	10005fc9: R_386_PC32	strcat
10005fcd:	83 c4 10             	add    esp,0x10
10005fd0:	83 ec 08             	sub    esp,0x8
10005fd3:	68 fb a0 00 10       	push   0x1000a0fb	10005fd4: R_386_32	.text
10005fd8:	8d 85 06 fc ff ff    	lea    eax,[ebp-0x3fa]
10005fde:	50                   	push   eax
10005fdf:	e8 fc ff ff ff       	call   10005fe0 <begin(void*)+0x1016>	10005fe0: R_386_PC32	strcat
10005fe4:	83 c4 10             	add    esp,0x10
10005fe7:	83 ec 0c             	sub    esp,0xc
10005fea:	68 ec 9f 00 10       	push   0x10009fec	10005feb: R_386_32	.text
10005fef:	e8 fc ff ff ff       	call   10005ff0 <begin(void*)+0x1026>	10005ff0: R_386_PC32	CmOpen(char const*)
10005ff4:	83 c4 10             	add    esp,0x10
10005ff7:	89 45 a0             	mov    DWORD PTR [ebp-0x60],eax
10005ffa:	83 ec 08             	sub    esp,0x8
10005ffd:	8d 85 06 fc ff ff    	lea    eax,[ebp-0x3fa]
10006003:	50                   	push   eax
10006004:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006007:	e8 fc ff ff ff       	call   10006008 <begin(void*)+0x103e>	10006008: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
1000600c:	83 c4 10             	add    esp,0x10
1000600f:	83 ec 04             	sub    esp,0x4
10006012:	8d 95 86 fc ff ff    	lea    edx,[ebp-0x37a]
10006018:	52                   	push   edx
10006019:	50                   	push   eax
1000601a:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
1000601d:	e8 fc ff ff ff       	call   1000601e <begin(void*)+0x1054>	1000601e: R_386_PC32	CmGetString(Reghive_Tag*, int, char*)
10006022:	83 c4 10             	add    esp,0x10
10006025:	83 ec 08             	sub    esp,0x8
10006028:	68 2a a0 00 10       	push   0x1000a02a	10006029: R_386_32	.text
1000602d:	8d 85 06 fc ff ff    	lea    eax,[ebp-0x3fa]
10006033:	50                   	push   eax
10006034:	e8 fc ff ff ff       	call   10006035 <begin(void*)+0x106b>	10006035: R_386_PC32	strcpy
10006039:	83 c4 10             	add    esp,0x10
1000603c:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
1000603f:	8b 84 85 84 fb ff ff 	mov    eax,DWORD PTR [ebp+eax*4-0x47c]
10006046:	83 ec 08             	sub    esp,0x8
10006049:	50                   	push   eax
1000604a:	8d 85 06 fc ff ff    	lea    eax,[ebp-0x3fa]
10006050:	50                   	push   eax
10006051:	e8 fc ff ff ff       	call   10006052 <begin(void*)+0x1088>	10006052: R_386_PC32	strcat
10006056:	83 c4 10             	add    esp,0x10
10006059:	83 ec 08             	sub    esp,0x8
1000605c:	68 05 a1 00 10       	push   0x1000a105	1000605d: R_386_32	.text
10006061:	8d 85 06 fc ff ff    	lea    eax,[ebp-0x3fa]
10006067:	50                   	push   eax
10006068:	e8 fc ff ff ff       	call   10006069 <begin(void*)+0x109f>	10006069: R_386_PC32	strcat
1000606d:	83 c4 10             	add    esp,0x10
10006070:	83 ec 08             	sub    esp,0x8
10006073:	8d 85 06 fc ff ff    	lea    eax,[ebp-0x3fa]
10006079:	50                   	push   eax
1000607a:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
1000607d:	e8 fc ff ff ff       	call   1000607e <begin(void*)+0x10b4>	1000607e: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10006082:	83 c4 10             	add    esp,0x10
10006085:	83 ec 04             	sub    esp,0x4
10006088:	8d 95 b4 fa ff ff    	lea    edx,[ebp-0x54c]
1000608e:	52                   	push   edx
1000608f:	50                   	push   eax
10006090:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10006093:	e8 fc ff ff ff       	call   10006094 <begin(void*)+0x10ca>	10006094: R_386_PC32	CmGetString(Reghive_Tag*, int, char*)
10006098:	83 c4 10             	add    esp,0x10
1000609b:	83 ec 0c             	sub    esp,0xc
1000609e:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
100060a1:	e8 fc ff ff ff       	call   100060a2 <begin(void*)+0x10d8>	100060a2: R_386_PC32	CmClose(Reghive_Tag*)
100060a6:	83 c4 10             	add    esp,0x10
100060a9:	83 ec 04             	sub    esp,0x4
100060ac:	68 80 00 00 00       	push   0x80
100060b1:	6a 00                	push   0x0
100060b3:	8d 85 06 fc ff ff    	lea    eax,[ebp-0x3fa]
100060b9:	50                   	push   eax
100060ba:	e8 fc ff ff ff       	call   100060bb <begin(void*)+0x10f1>	100060bb: R_386_PC32	memset
100060bf:	83 c4 10             	add    esp,0x10
100060c2:	e8 fc ff ff ff       	call   100060c3 <begin(void*)+0x10f9>	100060c3: R_386_PC32	drawBootScreen()
100060c7:	83 ec 08             	sub    esp,0x8
100060ca:	6a 01                	push   0x1
100060cc:	68 4c a2 00 10       	push   0x1000a24c	100060cd: R_386_32	.text
100060d1:	6a 10                	push   0x10
100060d3:	6a 39                	push   0x39
100060d5:	6a 03                	push   0x3
100060d7:	6a 0c                	push   0xc
100060d9:	e8 fc ff ff ff       	call   100060da <begin(void*)+0x1110>	100060da: R_386_PC32	drawBasicWindowX(int, int, int, int, char const*, bool)
100060de:	83 c4 20             	add    esp,0x20
100060e1:	a1 00 00 00 00       	mov    eax,ds:0x0	100060e2: R_386_32	term
100060e6:	83 ec 04             	sub    esp,0x4
100060e9:	6a 06                	push   0x6
100060eb:	6a 0e                	push   0xe
100060ed:	50                   	push   eax
100060ee:	e8 fc ff ff ff       	call   100060ef <begin(void*)+0x1125>	100060ef: R_386_PC32	VgaText::setCursor(int, int)
100060f3:	83 c4 10             	add    esp,0x10
100060f6:	a1 00 00 00 00       	mov    eax,ds:0x0	100060f7: R_386_32	term
100060fb:	6a 07                	push   0x7
100060fd:	6a 00                	push   0x0
100060ff:	68 70 a2 00 10       	push   0x1000a270	10006100: R_386_32	.text
10006104:	50                   	push   eax
10006105:	e8 fc ff ff ff       	call   10006106 <begin(void*)+0x113c>	10006106: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
1000610a:	83 c4 10             	add    esp,0x10
1000610d:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
10006111:	7e 72                	jle    10006185 <begin(void*)+0x11bb>
10006113:	c7 45 d0 00 00 00 00 	mov    DWORD PTR [ebp-0x30],0x0
1000611a:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
1000611d:	3b 45 e0             	cmp    eax,DWORD PTR [ebp-0x20]
10006120:	7d 63                	jge    10006185 <begin(void*)+0x11bb>
10006122:	a1 00 00 00 00       	mov    eax,ds:0x0	10006123: R_386_32	term
10006127:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
1000612a:	83 c2 08             	add    edx,0x8
1000612d:	83 ec 04             	sub    esp,0x4
10006130:	52                   	push   edx
10006131:	6a 0f                	push   0xf
10006133:	50                   	push   eax
10006134:	e8 fc ff ff ff       	call   10006135 <begin(void*)+0x116b>	10006135: R_386_PC32	VgaText::setCursor(int, int)
10006139:	83 c4 10             	add    esp,0x10
1000613c:	8b 1d 00 00 00 00    	mov    ebx,DWORD PTR ds:0x0	1000613e: R_386_32	term
10006142:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
10006145:	3b 45 dc             	cmp    eax,DWORD PTR [ebp-0x24]
10006148:	75 07                	jne    10006151 <begin(void*)+0x1187>
1000614a:	b9 00 00 00 00       	mov    ecx,0x0
1000614f:	eb 05                	jmp    10006156 <begin(void*)+0x118c>
10006151:	b9 07 00 00 00       	mov    ecx,0x7
10006156:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
10006159:	3b 45 dc             	cmp    eax,DWORD PTR [ebp-0x24]
1000615c:	75 07                	jne    10006165 <begin(void*)+0x119b>
1000615e:	ba 07 00 00 00       	mov    edx,0x7
10006163:	eb 05                	jmp    1000616a <begin(void*)+0x11a0>
10006165:	ba 00 00 00 00       	mov    edx,0x0
1000616a:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
1000616d:	8b 84 85 04 fb ff ff 	mov    eax,DWORD PTR [ebp+eax*4-0x4fc]
10006174:	51                   	push   ecx
10006175:	52                   	push   edx
10006176:	50                   	push   eax
10006177:	53                   	push   ebx
10006178:	e8 fc ff ff ff       	call   10006179 <begin(void*)+0x11af>	10006179: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
1000617d:	83 c4 10             	add    esp,0x10
10006180:	ff 45 d0             	inc    DWORD PTR [ebp-0x30]
10006183:	eb 95                	jmp    1000611a <begin(void*)+0x1150>
10006185:	83 ec 0c             	sub    esp,0xc
10006188:	68 4c a2 00 10       	push   0x1000a24c	10006189: R_386_32	.text
1000618d:	6a 0b                	push   0xb
1000618f:	6a 2d                	push   0x2d
10006191:	6a 0a                	push   0xa
10006193:	6a 1c                	push   0x1c
10006195:	e8 fc ff ff ff       	call   10006196 <begin(void*)+0x11cc>	10006196: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
1000619a:	83 c4 20             	add    esp,0x20
1000619d:	a1 00 00 00 00       	mov    eax,ds:0x0	1000619e: R_386_32	term
100061a2:	83 ec 04             	sub    esp,0x4
100061a5:	6a 0d                	push   0xd
100061a7:	6a 1e                	push   0x1e
100061a9:	50                   	push   eax
100061aa:	e8 fc ff ff ff       	call   100061ab <begin(void*)+0x11e1>	100061ab: R_386_PC32	VgaText::setCursor(int, int)
100061af:	83 c4 10             	add    esp,0x10
100061b2:	a1 00 00 00 00       	mov    eax,ds:0x0	100061b3: R_386_32	term
100061b7:	83 ec 08             	sub    esp,0x8
100061ba:	68 a0 a2 00 10       	push   0x1000a2a0	100061bb: R_386_32	.text
100061bf:	50                   	push   eax
100061c0:	e8 fc ff ff ff       	call   100061c1 <begin(void*)+0x11f7>	100061c1: R_386_PC32	VgaText::puts(char const*)
100061c5:	83 c4 10             	add    esp,0x10
100061c8:	a1 00 00 00 00       	mov    eax,ds:0x0	100061c9: R_386_32	term
100061cd:	83 ec 04             	sub    esp,0x4
100061d0:	6a 0e                	push   0xe
100061d2:	6a 1e                	push   0x1e
100061d4:	50                   	push   eax
100061d5:	e8 fc ff ff ff       	call   100061d6 <begin(void*)+0x120c>	100061d6: R_386_PC32	VgaText::setCursor(int, int)
100061da:	83 c4 10             	add    esp,0x10
100061dd:	a1 00 00 00 00       	mov    eax,ds:0x0	100061de: R_386_32	term
100061e2:	83 ec 08             	sub    esp,0x8
100061e5:	68 ca a2 00 10       	push   0x1000a2ca	100061e6: R_386_32	.text
100061ea:	50                   	push   eax
100061eb:	e8 fc ff ff ff       	call   100061ec <begin(void*)+0x1222>	100061ec: R_386_PC32	VgaText::puts(char const*)
100061f0:	83 c4 10             	add    esp,0x10
100061f3:	a1 00 00 00 00       	mov    eax,ds:0x0	100061f4: R_386_32	term
100061f8:	83 ec 04             	sub    esp,0x4
100061fb:	6a 10                	push   0x10
100061fd:	6a 1e                	push   0x1e
100061ff:	50                   	push   eax
10006200:	e8 fc ff ff ff       	call   10006201 <begin(void*)+0x1237>	10006201: R_386_PC32	VgaText::setCursor(int, int)
10006205:	83 c4 10             	add    esp,0x10
10006208:	a1 00 00 00 00       	mov    eax,ds:0x0	10006209: R_386_32	term
1000620d:	6a 07                	push   0x7
1000620f:	6a 00                	push   0x0
10006211:	68 18 9b 00 10       	push   0x10009b18	10006212: R_386_32	.text
10006216:	50                   	push   eax
10006217:	e8 fc ff ff ff       	call   10006218 <begin(void*)+0x124e>	10006218: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
1000621c:	83 c4 10             	add    esp,0x10
1000621f:	a1 00 00 00 00       	mov    eax,ds:0x0	10006220: R_386_32	term
10006224:	83 ec 08             	sub    esp,0x8
10006227:	6a 1e                	push   0x1e
10006229:	50                   	push   eax
1000622a:	e8 fc ff ff ff       	call   1000622b <begin(void*)+0x1261>	1000622b: R_386_PC32	VgaText::setCursorX(int)
1000622f:	83 c4 10             	add    esp,0x10
10006232:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
10006239:	83 ec 0c             	sub    esp,0xc
1000623c:	8d 85 06 fc ff ff    	lea    eax,[ebp-0x3fa]
10006242:	50                   	push   eax
10006243:	e8 fc ff ff ff       	call   10006244 <begin(void*)+0x127a>	10006244: R_386_PC32	strlen
10006248:	83 c4 10             	add    esp,0x10
1000624b:	89 c2                	mov    edx,eax
1000624d:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
10006250:	39 c2                	cmp    edx,eax
10006252:	76 1c                	jbe    10006270 <begin(void*)+0x12a6>
10006254:	a1 00 00 00 00       	mov    eax,ds:0x0	10006255: R_386_32	term
10006259:	6a 07                	push   0x7
1000625b:	6a 00                	push   0x0
1000625d:	68 44 9b 00 10       	push   0x10009b44	1000625e: R_386_32	.text
10006262:	50                   	push   eax
10006263:	e8 fc ff ff ff       	call   10006264 <begin(void*)+0x129a>	10006264: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10006268:	83 c4 10             	add    esp,0x10
1000626b:	ff 45 cc             	inc    DWORD PTR [ebp-0x34]
1000626e:	eb c9                	jmp    10006239 <begin(void*)+0x126f>
10006270:	8b 1d 00 00 00 00    	mov    ebx,DWORD PTR ds:0x0	10006272: R_386_32	term
10006276:	83 ec 0c             	sub    esp,0xc
10006279:	8d 85 06 fc ff ff    	lea    eax,[ebp-0x3fa]
1000627f:	50                   	push   eax
10006280:	e8 fc ff ff ff       	call   10006281 <begin(void*)+0x12b7>	10006281: R_386_PC32	strlen
10006285:	83 c4 10             	add    esp,0x10
10006288:	83 c0 1e             	add    eax,0x1e
1000628b:	83 ec 04             	sub    esp,0x4
1000628e:	6a 10                	push   0x10
10006290:	50                   	push   eax
10006291:	53                   	push   ebx
10006292:	e8 fc ff ff ff       	call   10006293 <begin(void*)+0x12c9>	10006293: R_386_PC32	VgaText::setCursor(int, int)
10006297:	83 c4 10             	add    esp,0x10
1000629a:	a0 00 00 00 00       	mov    al,ds:0x0	1000629b: R_386_32	installKey
1000629f:	84 c0                	test   al,al
100062a1:	0f 94 c0             	sete   al
100062a4:	84 c0                	test   al,al
100062a6:	74 02                	je     100062aa <begin(void*)+0x12e0>
100062a8:	eb f0                	jmp    1000629a <begin(void*)+0x12d0>
100062aa:	a1 00 00 00 00       	mov    eax,ds:0x0	100062ab: R_386_32	term
100062af:	05 82 00 00 00       	add    eax,0x82
100062b4:	83 ec 04             	sub    esp,0x4
100062b7:	6a 10                	push   0x10
100062b9:	6a 00                	push   0x0
100062bb:	50                   	push   eax
100062bc:	e8 fc ff ff ff       	call   100062bd <begin(void*)+0x12f3>	100062bd: R_386_PC32	memset
100062c1:	83 c4 10             	add    esp,0x10
100062c4:	a1 00 00 00 00       	mov    eax,ds:0x0	100062c5: R_386_32	term
100062c9:	05 02 01 00 00       	add    eax,0x102
100062ce:	83 ec 04             	sub    esp,0x4
100062d1:	6a 10                	push   0x10
100062d3:	6a 00                	push   0x0
100062d5:	50                   	push   eax
100062d6:	e8 fc ff ff ff       	call   100062d7 <begin(void*)+0x130d>	100062d7: R_386_PC32	memset
100062db:	83 c4 10             	add    esp,0x10
100062de:	a0 00 00 00 00       	mov    al,ds:0x0	100062df: R_386_32	installKey
100062e3:	3c 0a                	cmp    al,0xa
100062e5:	0f 94 c0             	sete   al
100062e8:	84 c0                	test   al,al
100062ea:	0f 84 9a 00 00 00    	je     1000638a <begin(void*)+0x13c0>
100062f0:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100062f2: R_386_32	installKey
100062f7:	83 ec 04             	sub    esp,0x4
100062fa:	8d 85 06 fd ff ff    	lea    eax,[ebp-0x2fa]
10006300:	50                   	push   eax
10006301:	8d 85 b4 fa ff ff    	lea    eax,[ebp-0x54c]
10006307:	50                   	push   eax
10006308:	8d 85 06 fc ff ff    	lea    eax,[ebp-0x3fa]
1000630e:	50                   	push   eax
1000630f:	e8 fc ff ff ff       	call   10006310 <begin(void*)+0x1346>	10006310: R_386_PC32	bcrypt_hashpw
10006314:	83 c4 10             	add    esp,0x10
10006317:	8d 85 b4 fa ff ff    	lea    eax,[ebp-0x54c]
1000631d:	50                   	push   eax
1000631e:	8d 85 06 fd ff ff    	lea    eax,[ebp-0x2fa]
10006324:	50                   	push   eax
10006325:	8d 85 86 fc ff ff    	lea    eax,[ebp-0x37a]
1000632b:	50                   	push   eax
1000632c:	68 e4 a2 00 10       	push   0x1000a2e4	1000632d: R_386_32	.text
10006331:	e8 fc ff ff ff       	call   10006332 <begin(void*)+0x1368>	10006332: R_386_PC32	Dbg::kprintf(char const*, ...)
10006336:	83 c4 10             	add    esp,0x10
10006339:	83 ec 08             	sub    esp,0x8
1000633c:	8d 85 06 fd ff ff    	lea    eax,[ebp-0x2fa]
10006342:	50                   	push   eax
10006343:	8d 85 86 fc ff ff    	lea    eax,[ebp-0x37a]
10006349:	50                   	push   eax
1000634a:	e8 fc ff ff ff       	call   1000634b <begin(void*)+0x1381>	1000634b: R_386_PC32	strcmp
1000634f:	83 c4 10             	add    esp,0x10
10006352:	85 c0                	test   eax,eax
10006354:	75 16                	jne    1000636c <begin(void*)+0x13a2>
10006356:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10006358: R_386_32	guiKeyboardHandler
10006360:	c7 45 c8 00 00 00 00 	mov    DWORD PTR [ebp-0x38],0x0
10006367:	e9 de 00 00 00       	jmp    1000644a <begin(void*)+0x1480>
1000636c:	83 ec 04             	sub    esp,0x4
1000636f:	68 80 00 00 00       	push   0x80
10006374:	6a 00                	push   0x0
10006376:	8d 85 06 fd ff ff    	lea    eax,[ebp-0x2fa]
1000637c:	50                   	push   eax
1000637d:	e8 fc ff ff ff       	call   1000637e <begin(void*)+0x13b4>	1000637e: R_386_PC32	memset
10006382:	83 c4 10             	add    esp,0x10
10006385:	e9 b4 00 00 00       	jmp    1000643e <begin(void*)+0x1474>
1000638a:	a0 00 00 00 00       	mov    al,ds:0x0	1000638b: R_386_32	installKey
1000638f:	3c 1f                	cmp    al,0x1f
10006391:	7e 0d                	jle    100063a0 <begin(void*)+0x13d6>
10006393:	a0 00 00 00 00       	mov    al,ds:0x0	10006394: R_386_32	installKey
10006398:	3c 7f                	cmp    al,0x7f
1000639a:	74 04                	je     100063a0 <begin(void*)+0x13d6>
1000639c:	b0 01                	mov    al,0x1
1000639e:	eb 02                	jmp    100063a2 <begin(void*)+0x13d8>
100063a0:	b0 00                	mov    al,0x0
100063a2:	84 c0                	test   al,al
100063a4:	74 44                	je     100063ea <begin(void*)+0x1420>
100063a6:	a0 00 00 00 00       	mov    al,ds:0x0	100063a7: R_386_32	installKey
100063ab:	88 85 7a ff ff ff    	mov    BYTE PTR [ebp-0x86],al
100063b1:	c6 85 7b ff ff ff 00 	mov    BYTE PTR [ebp-0x85],0x0
100063b8:	83 ec 0c             	sub    esp,0xc
100063bb:	8d 85 06 fc ff ff    	lea    eax,[ebp-0x3fa]
100063c1:	50                   	push   eax
100063c2:	e8 fc ff ff ff       	call   100063c3 <begin(void*)+0x13f9>	100063c3: R_386_PC32	strlen
100063c7:	83 c4 10             	add    esp,0x10
100063ca:	83 f8 22             	cmp    eax,0x22
100063cd:	77 6f                	ja     1000643e <begin(void*)+0x1474>
100063cf:	83 ec 08             	sub    esp,0x8
100063d2:	8d 85 7a ff ff ff    	lea    eax,[ebp-0x86]
100063d8:	50                   	push   eax
100063d9:	8d 85 06 fc ff ff    	lea    eax,[ebp-0x3fa]
100063df:	50                   	push   eax
100063e0:	e8 fc ff ff ff       	call   100063e1 <begin(void*)+0x1417>	100063e1: R_386_PC32	strcat
100063e5:	83 c4 10             	add    esp,0x10
100063e8:	eb 54                	jmp    1000643e <begin(void*)+0x1474>
100063ea:	a0 00 00 00 00       	mov    al,ds:0x0	100063eb: R_386_32	installKey
100063ef:	3c 08                	cmp    al,0x8
100063f1:	0f 94 c0             	sete   al
100063f4:	84 c0                	test   al,al
100063f6:	74 33                	je     1000642b <begin(void*)+0x1461>
100063f8:	83 ec 0c             	sub    esp,0xc
100063fb:	8d 85 06 fc ff ff    	lea    eax,[ebp-0x3fa]
10006401:	50                   	push   eax
10006402:	e8 fc ff ff ff       	call   10006403 <begin(void*)+0x1439>	10006403: R_386_PC32	strlen
10006407:	83 c4 10             	add    esp,0x10
1000640a:	85 c0                	test   eax,eax
1000640c:	74 30                	je     1000643e <begin(void*)+0x1474>
1000640e:	83 ec 0c             	sub    esp,0xc
10006411:	8d 85 06 fc ff ff    	lea    eax,[ebp-0x3fa]
10006417:	50                   	push   eax
10006418:	e8 fc ff ff ff       	call   10006419 <begin(void*)+0x144f>	10006419: R_386_PC32	strlen
1000641d:	83 c4 10             	add    esp,0x10
10006420:	48                   	dec    eax
10006421:	c6 84 05 06 fc ff ff 00 	mov    BYTE PTR [ebp+eax*1-0x3fa],0x0
10006429:	eb 13                	jmp    1000643e <begin(void*)+0x1474>
1000642b:	a0 00 00 00 00       	mov    al,ds:0x0	1000642c: R_386_32	installKey
10006430:	3c 1b                	cmp    al,0x1b
10006432:	0f 94 c0             	sete   al
10006435:	84 c0                	test   al,al
10006437:	74 05                	je     1000643e <begin(void*)+0x1474>
10006439:	e9 ec f9 ff ff       	jmp    10005e2a <begin(void*)+0xe60>
1000643e:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10006440: R_386_32	installKey
10006445:	e9 53 fd ff ff       	jmp    1000619d <begin(void*)+0x11d3>
1000644a:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
1000644d:	3b 45 e0             	cmp    eax,DWORD PTR [ebp-0x20]
10006450:	7d 69                	jge    100064bb <begin(void*)+0x14f1>
10006452:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
10006455:	8b 84 85 04 fb ff ff 	mov    eax,DWORD PTR [ebp+eax*4-0x4fc]
1000645c:	85 c0                	test   eax,eax
1000645e:	74 24                	je     10006484 <begin(void*)+0x14ba>
10006460:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
10006463:	8b 84 85 04 fb ff ff 	mov    eax,DWORD PTR [ebp+eax*4-0x4fc]
1000646a:	83 ec 0c             	sub    esp,0xc
1000646d:	50                   	push   eax
1000646e:	e8 fc ff ff ff       	call   1000646f <begin(void*)+0x14a5>	1000646f: R_386_PC32	free
10006473:	83 c4 10             	add    esp,0x10
10006476:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
10006479:	c7 84 85 04 fb ff ff 00 00 00 00 	mov    DWORD PTR [ebp+eax*4-0x4fc],0x0
10006484:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
10006487:	8b 84 85 84 fb ff ff 	mov    eax,DWORD PTR [ebp+eax*4-0x47c]
1000648e:	85 c0                	test   eax,eax
10006490:	74 24                	je     100064b6 <begin(void*)+0x14ec>
10006492:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
10006495:	8b 84 85 84 fb ff ff 	mov    eax,DWORD PTR [ebp+eax*4-0x47c]
1000649c:	83 ec 0c             	sub    esp,0xc
1000649f:	50                   	push   eax
100064a0:	e8 fc ff ff ff       	call   100064a1 <begin(void*)+0x14d7>	100064a1: R_386_PC32	free
100064a5:	83 c4 10             	add    esp,0x10
100064a8:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
100064ab:	c7 84 85 84 fb ff ff 00 00 00 00 	mov    DWORD PTR [ebp+eax*4-0x47c],0x0
100064b6:	ff 45 c8             	inc    DWORD PTR [ebp-0x38]
100064b9:	eb 8f                	jmp    1000644a <begin(void*)+0x1480>
100064bb:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100064bd: R_386_32	VgaText::hiddenOut
100064c2:	83 ec 0c             	sub    esp,0xc
100064c5:	68 24 07 00 00       	push   0x724
100064ca:	e8 fc ff ff ff       	call   100064cb <begin(void*)+0x1501>	100064cb: R_386_PC32	operator new(unsigned long)
100064cf:	83 c4 10             	add    esp,0x10
100064d2:	89 c3                	mov    ebx,eax
100064d4:	6a 00                	push   0x0
100064d6:	6a 00                	push   0x0
100064d8:	68 8a 9f 00 10       	push   0x10009f8a	100064d9: R_386_32	.text
100064dd:	53                   	push   ebx
100064de:	e8 fc ff ff ff       	call   100064df <begin(void*)+0x1515>	100064df: R_386_PC32	Process::Process(char const*, Process*, char**)
100064e3:	83 c4 10             	add    esp,0x10
100064e6:	89 5d b4             	mov    DWORD PTR [ebp-0x4c],ebx
100064e9:	8b 45 b4             	mov    eax,DWORD PTR [ebp-0x4c]
100064ec:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
100064f2:	83 ec 0c             	sub    esp,0xc
100064f5:	50                   	push   eax
100064f6:	e8 fc ff ff ff       	call   100064f7 <begin(void*)+0x152d>	100064f7: R_386_PC32	setActiveTerminal(VgaText*)
100064fb:	83 c4 10             	add    esp,0x10
100064fe:	c7 45 c4 00 00 00 00 	mov    DWORD PTR [ebp-0x3c],0x0
10006505:	83 7d c4 18          	cmp    DWORD PTR [ebp-0x3c],0x18
10006509:	7f 2e                	jg     10006539 <begin(void*)+0x156f>
1000650b:	c7 45 c0 00 00 00 00 	mov    DWORD PTR [ebp-0x40],0x0
10006512:	83 7d c0 4f          	cmp    DWORD PTR [ebp-0x40],0x4f
10006516:	7f 1c                	jg     10006534 <begin(void*)+0x156a>
10006518:	83 ec 0c             	sub    esp,0xc
1000651b:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
1000651e:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
10006521:	6a 00                	push   0x0
10006523:	6a 07                	push   0x7
10006525:	6a 20                	push   0x20
10006527:	e8 fc ff ff ff       	call   10006528 <begin(void*)+0x155e>	10006528: R_386_PC32	HalConsoleWriteCharacter(char, int, int, int, int)
1000652c:	83 c4 20             	add    esp,0x20
1000652f:	ff 45 c0             	inc    DWORD PTR [ebp-0x40]
10006532:	eb de                	jmp    10006512 <begin(void*)+0x1548>
10006534:	ff 45 c4             	inc    DWORD PTR [ebp-0x3c]
10006537:	eb cc                	jmp    10006505 <begin(void*)+0x153b>
10006539:	83 ec 0c             	sub    esp,0xc
1000653c:	ff 75 b4             	push   DWORD PTR [ebp-0x4c]
1000653f:	e8 fc ff ff ff       	call   10006540 <begin(void*)+0x1576>	10006540: R_386_PC32	Process::createUserThread()
10006544:	83 c4 10             	add    esp,0x10
10006547:	8b 45 80             	mov    eax,DWORD PTR [ebp-0x80]
1000654a:	8b 55 84             	mov    edx,DWORD PTR [ebp-0x7c]
1000654d:	89 c1                	mov    ecx,eax
1000654f:	83 f1 01             	xor    ecx,0x1
10006552:	89 8d a0 fa ff ff    	mov    DWORD PTR [ebp-0x560],ecx
10006558:	89 d0                	mov    eax,edx
1000655a:	80 f4 00             	xor    ah,0x0
1000655d:	89 85 a4 fa ff ff    	mov    DWORD PTR [ebp-0x55c],eax
10006563:	8b b5 a0 fa ff ff    	mov    esi,DWORD PTR [ebp-0x560]
10006569:	8b bd a4 fa ff ff    	mov    edi,DWORD PTR [ebp-0x55c]
1000656f:	89 f8                	mov    eax,edi
10006571:	09 f0                	or     eax,esi
10006573:	85 c0                	test   eax,eax
10006575:	75 17                	jne    1000658e <begin(void*)+0x15c4>
10006577:	a1 00 00 00 00       	mov    eax,ds:0x0	10006578: R_386_32	kernelProcess
1000657c:	6a 01                	push   0x1
1000657e:	6a 00                	push   0x0
10006580:	68 00 00 00 00       	push   0x0	10006581: R_386_32	startGUI(void*)
10006585:	50                   	push   eax
10006586:	e8 fc ff ff ff       	call   10006587 <begin(void*)+0x15bd>	10006587: R_386_PC32	Process::createThread(void (*)(void*), void*, int)
1000658b:	83 c4 10             	add    esp,0x10
1000658e:	8b 45 80             	mov    eax,DWORD PTR [ebp-0x80]
10006591:	8b 55 84             	mov    edx,DWORD PTR [ebp-0x7c]
10006594:	89 c6                	mov    esi,eax
10006596:	83 f6 02             	xor    esi,0x2
10006599:	89 b5 98 fa ff ff    	mov    DWORD PTR [ebp-0x568],esi
1000659f:	89 d0                	mov    eax,edx
100065a1:	80 f4 00             	xor    ah,0x0
100065a4:	89 85 9c fa ff ff    	mov    DWORD PTR [ebp-0x564],eax
100065aa:	8b b5 98 fa ff ff    	mov    esi,DWORD PTR [ebp-0x568]
100065b0:	8b bd 9c fa ff ff    	mov    edi,DWORD PTR [ebp-0x564]
100065b6:	89 f8                	mov    eax,edi
100065b8:	09 f0                	or     eax,esi
100065ba:	85 c0                	test   eax,eax
100065bc:	75 17                	jne    100065d5 <begin(void*)+0x160b>
100065be:	a1 00 00 00 00       	mov    eax,ds:0x0	100065bf: R_386_32	kernelProcess
100065c3:	6a 01                	push   0x1
100065c5:	6a 00                	push   0x0
100065c7:	68 00 00 00 00       	push   0x0	100065c8: R_386_32	startGUIVESA(void*)
100065cc:	50                   	push   eax
100065cd:	e8 fc ff ff ff       	call   100065ce <begin(void*)+0x1604>	100065ce: R_386_PC32	Process::createThread(void (*)(void*), void*, int)
100065d2:	83 c4 10             	add    esp,0x10
100065d5:	8b 45 b4             	mov    eax,DWORD PTR [ebp-0x4c]
100065d8:	8b 00                	mov    eax,DWORD PTR [eax]
100065da:	83 ec 04             	sub    esp,0x4
100065dd:	6a 00                	push   0x0
100065df:	8d 95 7c ff ff ff    	lea    edx,[ebp-0x84]
100065e5:	52                   	push   edx
100065e6:	50                   	push   eax
100065e7:	e8 fc ff ff ff       	call   100065e8 <begin(void*)+0x161e>	100065e8: R_386_PC32	waitTask(int, int*, int)
100065ec:	83 c4 10             	add    esp,0x10
100065ef:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	100065f1: R_386_32	Krnl::computer
100065f5:	a1 00 00 00 00       	mov    eax,ds:0x0	100065f6: R_386_32	Krnl::computer
100065fa:	8b 00                	mov    eax,DWORD PTR [eax]
100065fc:	83 c0 0c             	add    eax,0xc
100065ff:	8b 00                	mov    eax,DWORD PTR [eax]
10006601:	6a 00                	push   0x0
10006603:	6a 00                	push   0x0
10006605:	6a 00                	push   0x0
10006607:	52                   	push   edx
10006608:	ff d0                	call   eax
1000660a:	83 c4 10             	add    esp,0x10
1000660d:	83 ec 0c             	sub    esp,0xc
10006610:	68 04 a3 00 10       	push   0x1000a304	10006611: R_386_32	.text
10006615:	e8 fc ff ff ff       	call   10006616 <begin(void*)+0x164c>	10006616: R_386_PC32	KePanic(char const*)
1000661a:	83 c4 10             	add    esp,0x10
1000661d:	eb fe                	jmp    1000661d <begin(void*)+0x1653>

1000661f <clean>:
1000661f:	57                   	push   edi
10006620:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
10006624:	b0 00                	mov    al,0x0
10006626:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
1000662a:	f3 aa                	rep stos BYTE PTR es:[edi],al
1000662c:	5f                   	pop    edi
1000662d:	c3                   	ret    

1000662e <BF_decode>:
1000662e:	55                   	push   ebp
1000662f:	57                   	push   edi
10006630:	56                   	push   esi
10006631:	53                   	push   ebx
10006632:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
10006636:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
1000663a:	89 d6                	mov    esi,edx
1000663c:	03 74 24 1c          	add    esi,DWORD PTR [esp+0x1c]
10006640:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
10006643:	83 e8 20             	sub    eax,0x20
10006646:	83 f8 5f             	cmp    eax,0x5f
10006649:	0f 87 a3 00 00 00    	ja     100066f2 <BF_decode+0xc4>
1000664f:	8a 80 00 b5 00 10    	mov    al,BYTE PTR [eax+0x1000b500]	10006651: R_386_32	.data
10006655:	3c 3f                	cmp    al,0x3f
10006657:	0f 87 9f 00 00 00    	ja     100066fc <BF_decode+0xce>
1000665d:	0f b6 4b 01          	movzx  ecx,BYTE PTR [ebx+0x1]
10006661:	83 e9 20             	sub    ecx,0x20
10006664:	83 f9 5f             	cmp    ecx,0x5f
10006667:	0f 87 96 00 00 00    	ja     10006703 <BF_decode+0xd5>
1000666d:	8a 89 00 b5 00 10    	mov    cl,BYTE PTR [ecx+0x1000b500]	1000666f: R_386_32	.data
10006673:	0f b6 f9             	movzx  edi,cl
10006676:	83 ff 3f             	cmp    edi,0x3f
10006679:	0f 87 8b 00 00 00    	ja     1000670a <BF_decode+0xdc>
1000667f:	c1 e0 02             	shl    eax,0x2
10006682:	c1 ef 04             	shr    edi,0x4
10006685:	09 f8                	or     eax,edi
10006687:	88 02                	mov    BYTE PTR [edx],al
10006689:	89 d7                	mov    edi,edx
1000668b:	8d 42 01             	lea    eax,[edx+0x1]
1000668e:	39 c6                	cmp    esi,eax
10006690:	76 7f                	jbe    10006711 <BF_decode+0xe3>
10006692:	0f b6 43 02          	movzx  eax,BYTE PTR [ebx+0x2]
10006696:	83 e8 20             	sub    eax,0x20
10006699:	83 f8 5f             	cmp    eax,0x5f
1000669c:	77 7a                	ja     10006718 <BF_decode+0xea>
1000669e:	8a 80 00 b5 00 10    	mov    al,BYTE PTR [eax+0x1000b500]	100066a0: R_386_32	.data
100066a4:	0f b6 e8             	movzx  ebp,al
100066a7:	83 fd 3f             	cmp    ebp,0x3f
100066aa:	77 73                	ja     1000671f <BF_decode+0xf1>
100066ac:	c1 e1 04             	shl    ecx,0x4
100066af:	c1 ed 02             	shr    ebp,0x2
100066b2:	09 e9                	or     ecx,ebp
100066b4:	88 4a 01             	mov    BYTE PTR [edx+0x1],cl
100066b7:	8d 52 02             	lea    edx,[edx+0x2]
100066ba:	39 d6                	cmp    esi,edx
100066bc:	76 68                	jbe    10006726 <BF_decode+0xf8>
100066be:	83 c3 04             	add    ebx,0x4
100066c1:	0f b6 53 ff          	movzx  edx,BYTE PTR [ebx-0x1]
100066c5:	83 ea 20             	sub    edx,0x20
100066c8:	83 fa 5f             	cmp    edx,0x5f
100066cb:	77 60                	ja     1000672d <BF_decode+0xff>
100066cd:	8a 8a 00 b5 00 10    	mov    cl,BYTE PTR [edx+0x1000b500]	100066cf: R_386_32	.data
100066d3:	80 f9 3f             	cmp    cl,0x3f
100066d6:	77 5c                	ja     10006734 <BF_decode+0x106>
100066d8:	8d 57 03             	lea    edx,[edi+0x3]
100066db:	c1 e0 06             	shl    eax,0x6
100066de:	09 c1                	or     ecx,eax
100066e0:	88 4a ff             	mov    BYTE PTR [edx-0x1],cl
100066e3:	39 d6                	cmp    esi,edx
100066e5:	0f 87 55 ff ff ff    	ja     10006640 <BF_decode+0x12>
100066eb:	b8 00 00 00 00       	mov    eax,0x0
100066f0:	eb 05                	jmp    100066f7 <BF_decode+0xc9>
100066f2:	b8 ff ff ff ff       	mov    eax,0xffffffff
100066f7:	5b                   	pop    ebx
100066f8:	5e                   	pop    esi
100066f9:	5f                   	pop    edi
100066fa:	5d                   	pop    ebp
100066fb:	c3                   	ret    
100066fc:	b8 ff ff ff ff       	mov    eax,0xffffffff
10006701:	eb f4                	jmp    100066f7 <BF_decode+0xc9>
10006703:	b8 ff ff ff ff       	mov    eax,0xffffffff
10006708:	eb ed                	jmp    100066f7 <BF_decode+0xc9>
1000670a:	b8 ff ff ff ff       	mov    eax,0xffffffff
1000670f:	eb e6                	jmp    100066f7 <BF_decode+0xc9>
10006711:	b8 00 00 00 00       	mov    eax,0x0
10006716:	eb df                	jmp    100066f7 <BF_decode+0xc9>
10006718:	b8 ff ff ff ff       	mov    eax,0xffffffff
1000671d:	eb d8                	jmp    100066f7 <BF_decode+0xc9>
1000671f:	b8 ff ff ff ff       	mov    eax,0xffffffff
10006724:	eb d1                	jmp    100066f7 <BF_decode+0xc9>
10006726:	b8 00 00 00 00       	mov    eax,0x0
1000672b:	eb ca                	jmp    100066f7 <BF_decode+0xc9>
1000672d:	b8 ff ff ff ff       	mov    eax,0xffffffff
10006732:	eb c3                	jmp    100066f7 <BF_decode+0xc9>
10006734:	b8 ff ff ff ff       	mov    eax,0xffffffff
10006739:	eb bc                	jmp    100066f7 <BF_decode+0xc9>

1000673b <BF_encode>:
1000673b:	55                   	push   ebp
1000673c:	57                   	push   edi
1000673d:	56                   	push   esi
1000673e:	53                   	push   ebx
1000673f:	83 ec 04             	sub    esp,0x4
10006742:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
10006746:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
1000674a:	89 c7                	mov    edi,eax
1000674c:	03 7c 24 20          	add    edi,DWORD PTR [esp+0x20]
10006750:	89 3c 24             	mov    DWORD PTR [esp],edi
10006753:	0f b6 10             	movzx  edx,BYTE PTR [eax]
10006756:	89 d6                	mov    esi,edx
10006758:	c1 ee 02             	shr    esi,0x2
1000675b:	8a 9e a0 b4 00 10    	mov    bl,BYTE PTR [esi+0x1000b4a0]	1000675d: R_386_32	.data
10006761:	88 19                	mov    BYTE PTR [ecx],bl
10006763:	c1 e2 04             	shl    edx,0x4
10006766:	83 e2 30             	and    edx,0x30
10006769:	89 c7                	mov    edi,eax
1000676b:	8d 70 01             	lea    esi,[eax+0x1]
1000676e:	39 34 24             	cmp    DWORD PTR [esp],esi
10006771:	76 51                	jbe    100067c4 <BF_encode+0x89>
10006773:	0f b6 70 01          	movzx  esi,BYTE PTR [eax+0x1]
10006777:	89 f5                	mov    ebp,esi
10006779:	c1 ed 04             	shr    ebp,0x4
1000677c:	09 ea                	or     edx,ebp
1000677e:	8a 9a a0 b4 00 10    	mov    bl,BYTE PTR [edx+0x1000b4a0]	10006780: R_386_32	.data
10006784:	88 59 01             	mov    BYTE PTR [ecx+0x1],bl
10006787:	c1 e6 02             	shl    esi,0x2
1000678a:	83 e6 3c             	and    esi,0x3c
1000678d:	83 c0 02             	add    eax,0x2
10006790:	39 04 24             	cmp    DWORD PTR [esp],eax
10006793:	76 40                	jbe    100067d5 <BF_encode+0x9a>
10006795:	8d 47 03             	lea    eax,[edi+0x3]
10006798:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
1000679b:	0f b6 d3             	movzx  edx,bl
1000679e:	c1 ea 06             	shr    edx,0x6
100067a1:	09 f2                	or     edx,esi
100067a3:	8a 92 a0 b4 00 10    	mov    dl,BYTE PTR [edx+0x1000b4a0]	100067a5: R_386_32	.data
100067a9:	88 51 02             	mov    BYTE PTR [ecx+0x2],dl
100067ac:	83 c1 04             	add    ecx,0x4
100067af:	89 da                	mov    edx,ebx
100067b1:	83 e2 3f             	and    edx,0x3f
100067b4:	8a 9a a0 b4 00 10    	mov    bl,BYTE PTR [edx+0x1000b4a0]	100067b6: R_386_32	.data
100067ba:	88 59 ff             	mov    BYTE PTR [ecx-0x1],bl
100067bd:	39 04 24             	cmp    DWORD PTR [esp],eax
100067c0:	77 91                	ja     10006753 <BF_encode+0x18>
100067c2:	eb 09                	jmp    100067cd <BF_encode+0x92>
100067c4:	8a 82 a0 b4 00 10    	mov    al,BYTE PTR [edx+0x1000b4a0]	100067c6: R_386_32	.data
100067ca:	88 41 01             	mov    BYTE PTR [ecx+0x1],al
100067cd:	83 c4 04             	add    esp,0x4
100067d0:	5b                   	pop    ebx
100067d1:	5e                   	pop    esi
100067d2:	5f                   	pop    edi
100067d3:	5d                   	pop    ebp
100067d4:	c3                   	ret    
100067d5:	8a 86 a0 b4 00 10    	mov    al,BYTE PTR [esi+0x1000b4a0]	100067d7: R_386_32	.data
100067db:	88 41 02             	mov    BYTE PTR [ecx+0x2],al
100067de:	eb ed                	jmp    100067cd <BF_encode+0x92>

100067e0 <BF_swap>:
100067e0:	53                   	push   ebx
100067e1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
100067e5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
100067e9:	80 3d 60 b5 00 10 00 	cmp    BYTE PTR ds:0x1000b560,0x0	100067eb: R_386_32	.data
100067f0:	74 23                	je     10006815 <BF_swap+0x35>
100067f2:	8b 01                	mov    eax,DWORD PTR [ecx]
100067f4:	c1 c0 10             	rol    eax,0x10
100067f7:	83 c1 04             	add    ecx,0x4
100067fa:	89 c2                	mov    edx,eax
100067fc:	c1 e2 08             	shl    edx,0x8
100067ff:	81 e2 00 ff 00 ff    	and    edx,0xff00ff00
10006805:	c1 e8 08             	shr    eax,0x8
10006808:	25 ff 00 ff 00       	and    eax,0xff00ff
1000680d:	09 d0                	or     eax,edx
1000680f:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
10006812:	4b                   	dec    ebx
10006813:	75 dd                	jne    100067f2 <BF_swap+0x12>
10006815:	5b                   	pop    ebx
10006816:	c3                   	ret    

10006817 <BF_set_key>:
10006817:	55                   	push   ebp
10006818:	57                   	push   edi
10006819:	56                   	push   esi
1000681a:	53                   	push   ebx
1000681b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
1000681f:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
10006823:	89 f9                	mov    ecx,edi
10006825:	be 00 00 00 00       	mov    esi,0x0
1000682a:	eb 2d                	jmp    10006859 <BF_set_key+0x42>
1000682c:	89 f9                	mov    ecx,edi
1000682e:	4a                   	dec    edx
1000682f:	74 10                	je     10006841 <BF_set_key+0x2a>
10006831:	c1 e0 08             	shl    eax,0x8
10006834:	0f b6 19             	movzx  ebx,BYTE PTR [ecx]
10006837:	09 d8                	or     eax,ebx
10006839:	80 39 00             	cmp    BYTE PTR [ecx],0x0
1000683c:	74 ee                	je     1000682c <BF_set_key+0x15>
1000683e:	41                   	inc    ecx
1000683f:	eb ed                	jmp    1000682e <BF_set_key+0x17>
10006841:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
10006845:	89 04 b2             	mov    DWORD PTR [edx+esi*4],eax
10006848:	33 04 b5 40 b4 00 10 	xor    eax,DWORD PTR [esi*4+0x1000b440]	1000684b: R_386_32	.data
1000684f:	89 44 b5 00          	mov    DWORD PTR [ebp+esi*4+0x0],eax
10006853:	46                   	inc    esi
10006854:	83 fe 12             	cmp    esi,0x12
10006857:	74 0c                	je     10006865 <BF_set_key+0x4e>
10006859:	ba 04 00 00 00       	mov    edx,0x4
1000685e:	b8 00 00 00 00       	mov    eax,0x0
10006863:	eb cc                	jmp    10006831 <BF_set_key+0x1a>
10006865:	5b                   	pop    ebx
10006866:	5e                   	pop    esi
10006867:	5f                   	pop    edi
10006868:	5d                   	pop    ebp
10006869:	c3                   	ret    

1000686a <_crypt_blowfish_rn>:
1000686a:	55                   	push   ebp
1000686b:	57                   	push   edi
1000686c:	56                   	push   esi
1000686d:	53                   	push   ebx
1000686e:	81 ec 00 11 00 00    	sub    esp,0x1100
10006874:	83 bc 24 20 11 00 00 3c 	cmp    DWORD PTR [esp+0x1120],0x3c
1000687c:	0f 8e 9e 2d 00 00    	jle    10009620 <_crypt_blowfish_rn+0x2db6>
10006882:	8b 84 24 18 11 00 00 	mov    eax,DWORD PTR [esp+0x1118]
10006889:	80 38 24             	cmp    BYTE PTR [eax],0x24
1000688c:	0f 85 a8 2d 00 00    	jne    1000963a <_crypt_blowfish_rn+0x2dd0>
10006892:	80 78 01 32          	cmp    BYTE PTR [eax+0x1],0x32
10006896:	0f 85 9e 2d 00 00    	jne    1000963a <_crypt_blowfish_rn+0x2dd0>
1000689c:	80 78 02 61          	cmp    BYTE PTR [eax+0x2],0x61
100068a0:	0f 85 94 2d 00 00    	jne    1000963a <_crypt_blowfish_rn+0x2dd0>
100068a6:	80 78 03 24          	cmp    BYTE PTR [eax+0x3],0x24
100068aa:	0f 85 8a 2d 00 00    	jne    1000963a <_crypt_blowfish_rn+0x2dd0>
100068b0:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
100068b3:	8d 50 d0             	lea    edx,[eax-0x30]
100068b6:	80 fa 03             	cmp    dl,0x3
100068b9:	0f 87 7b 2d 00 00    	ja     1000963a <_crypt_blowfish_rn+0x2dd0>
100068bf:	8b 9c 24 18 11 00 00 	mov    ebx,DWORD PTR [esp+0x1118]
100068c6:	8a 53 05             	mov    dl,BYTE PTR [ebx+0x5]
100068c9:	8d 4a d0             	lea    ecx,[edx-0x30]
100068cc:	80 f9 09             	cmp    cl,0x9
100068cf:	0f 87 65 2d 00 00    	ja     1000963a <_crypt_blowfish_rn+0x2dd0>
100068d5:	3c 33                	cmp    al,0x33
100068d7:	0f 84 54 2d 00 00    	je     10009631 <_crypt_blowfish_rn+0x2dc7>
100068dd:	8b 9c 24 18 11 00 00 	mov    ebx,DWORD PTR [esp+0x1118]
100068e4:	80 7b 06 24          	cmp    BYTE PTR [ebx+0x6],0x24
100068e8:	0f 85 4c 2d 00 00    	jne    1000963a <_crypt_blowfish_rn+0x2dd0>
100068ee:	0f be c0             	movsx  eax,al
100068f1:	8d 84 80 10 ff ff ff 	lea    eax,[eax+eax*4-0xf0]
100068f8:	01 c0                	add    eax,eax
100068fa:	0f be d2             	movsx  edx,dl
100068fd:	8d 4c 10 d0          	lea    ecx,[eax+edx*1-0x30]
10006901:	b8 01 00 00 00       	mov    eax,0x1
10006906:	d3 e0                	shl    eax,cl
10006908:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
1000690c:	83 f8 0f             	cmp    eax,0xf
1000690f:	0f 86 3f 2d 00 00    	jbe    10009654 <_crypt_blowfish_rn+0x2dea>
10006915:	6a 10                	push   0x10
10006917:	8b 84 24 1c 11 00 00 	mov    eax,DWORD PTR [esp+0x111c]
1000691e:	83 c0 07             	add    eax,0x7
10006921:	50                   	push   eax
10006922:	8d 84 24 f0 10 00 00 	lea    eax,[esp+0x10f0]
10006929:	50                   	push   eax
1000692a:	e8 ff fc ff ff       	call   1000662e <BF_decode>
1000692f:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
10006933:	83 c4 0c             	add    esp,0xc
10006936:	85 c0                	test   eax,eax
10006938:	0f 85 16 2d 00 00    	jne    10009654 <_crypt_blowfish_rn+0x2dea>
1000693e:	6a 04                	push   0x4
10006940:	8d 5c 24 5c          	lea    ebx,[esp+0x5c]
10006944:	8d 84 24 ec 10 00 00 	lea    eax,[esp+0x10ec]
1000694b:	50                   	push   eax
1000694c:	e8 8f fe ff ff       	call   100067e0 <BF_swap>
10006951:	8d 84 24 60 10 00 00 	lea    eax,[esp+0x1060]
10006958:	50                   	push   eax
10006959:	8d 84 24 ac 10 00 00 	lea    eax,[esp+0x10ac]
10006960:	50                   	push   eax
10006961:	ff b4 24 24 11 00 00 	push   DWORD PTR [esp+0x1124]
10006968:	e8 aa fe ff ff       	call   10006817 <BF_set_key>
1000696d:	be 40 a4 00 10       	mov    esi,0x1000a440	1000696e: R_386_32	.data
10006972:	b9 00 04 00 00       	mov    ecx,0x400
10006977:	89 df                	mov    edi,ebx
10006979:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000697b:	83 c4 14             	add    esp,0x14
1000697e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
10006982:	89 04 24             	mov    DWORD PTR [esp],eax
10006985:	bb 00 00 00 00       	mov    ebx,0x0
1000698a:	b8 00 00 00 00       	mov    eax,0x0
1000698f:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
10006992:	83 e1 02             	and    ecx,0x2
10006995:	8d 91 24 04 00 00    	lea    edx,[ecx+0x424]
1000699b:	8b 54 94 58          	mov    edx,DWORD PTR [esp+edx*4+0x58]
1000699f:	33 94 24 58 10 00 00 	xor    edx,DWORD PTR [esp+0x1058]
100069a6:	31 c2                	xor    edx,eax
100069a8:	89 d7                	mov    edi,edx
100069aa:	c1 ef 06             	shr    edi,0x6
100069ad:	89 d5                	mov    ebp,edx
100069af:	c1 ed 0e             	shr    ebp,0xe
100069b2:	89 d0                	mov    eax,edx
100069b4:	c1 e8 16             	shr    eax,0x16
100069b7:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
100069be:	81 e6 fc 03 00 00    	and    esi,0x3fc
100069c4:	81 e7 fc 03 00 00    	and    edi,0x3fc
100069ca:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100069d0:	25 fc 03 00 00       	and    eax,0x3fc
100069d5:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
100069d9:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
100069e0:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
100069e7:	81 c1 25 04 00 00    	add    ecx,0x425
100069ed:	8b 4c 8c 58          	mov    ecx,DWORD PTR [esp+ecx*4+0x58]
100069f1:	33 8c 24 5c 10 00 00 	xor    ecx,DWORD PTR [esp+0x105c]
100069f8:	03 84 34 58 0c 00 00 	add    eax,DWORD PTR [esp+esi*1+0xc58]
100069ff:	31 c8                	xor    eax,ecx
10006a01:	31 c3                	xor    ebx,eax
10006a03:	89 d8                	mov    eax,ebx
10006a05:	c1 e8 06             	shr    eax,0x6
10006a08:	89 c1                	mov    ecx,eax
10006a0a:	89 df                	mov    edi,ebx
10006a0c:	c1 ef 0e             	shr    edi,0xe
10006a0f:	89 d8                	mov    eax,ebx
10006a11:	c1 e8 16             	shr    eax,0x16
10006a14:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
10006a1b:	81 e6 fc 03 00 00    	and    esi,0x3fc
10006a21:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10006a27:	81 e7 fc 03 00 00    	and    edi,0x3fc
10006a2d:	25 fc 03 00 00       	and    eax,0x3fc
10006a32:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10006a36:	03 84 3c 58 04 00 00 	add    eax,DWORD PTR [esp+edi*1+0x458]
10006a3d:	33 84 0c 58 08 00 00 	xor    eax,DWORD PTR [esp+ecx*1+0x858]
10006a44:	33 94 24 60 10 00 00 	xor    edx,DWORD PTR [esp+0x1060]
10006a4b:	03 84 34 58 0c 00 00 	add    eax,DWORD PTR [esp+esi*1+0xc58]
10006a52:	89 c1                	mov    ecx,eax
10006a54:	31 d1                	xor    ecx,edx
10006a56:	89 ca                	mov    edx,ecx
10006a58:	c1 ea 06             	shr    edx,0x6
10006a5b:	89 cf                	mov    edi,ecx
10006a5d:	c1 ef 0e             	shr    edi,0xe
10006a60:	89 c8                	mov    eax,ecx
10006a62:	c1 e8 16             	shr    eax,0x16
10006a65:	8d 34 8d 00 00 00 00 	lea    esi,[ecx*4+0x0]
10006a6c:	81 e6 fc 03 00 00    	and    esi,0x3fc
10006a72:	81 e2 fc 03 00 00    	and    edx,0x3fc
10006a78:	81 e7 fc 03 00 00    	and    edi,0x3fc
10006a7e:	25 fc 03 00 00       	and    eax,0x3fc
10006a83:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10006a87:	03 84 3c 58 04 00 00 	add    eax,DWORD PTR [esp+edi*1+0x458]
10006a8e:	33 84 14 58 08 00 00 	xor    eax,DWORD PTR [esp+edx*1+0x858]
10006a95:	33 9c 24 64 10 00 00 	xor    ebx,DWORD PTR [esp+0x1064]
10006a9c:	03 84 34 58 0c 00 00 	add    eax,DWORD PTR [esp+esi*1+0xc58]
10006aa3:	89 c2                	mov    edx,eax
10006aa5:	31 da                	xor    edx,ebx
10006aa7:	89 d6                	mov    esi,edx
10006aa9:	c1 ee 06             	shr    esi,0x6
10006aac:	89 d7                	mov    edi,edx
10006aae:	c1 ef 0e             	shr    edi,0xe
10006ab1:	89 d0                	mov    eax,edx
10006ab3:	c1 e8 16             	shr    eax,0x16
10006ab6:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
10006abd:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10006ac3:	81 e6 fc 03 00 00    	and    esi,0x3fc
10006ac9:	81 e7 fc 03 00 00    	and    edi,0x3fc
10006acf:	25 fc 03 00 00       	and    eax,0x3fc
10006ad4:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10006ad8:	03 84 3c 58 04 00 00 	add    eax,DWORD PTR [esp+edi*1+0x458]
10006adf:	33 84 34 58 08 00 00 	xor    eax,DWORD PTR [esp+esi*1+0x858]
10006ae6:	33 8c 24 68 10 00 00 	xor    ecx,DWORD PTR [esp+0x1068]
10006aed:	03 84 1c 58 0c 00 00 	add    eax,DWORD PTR [esp+ebx*1+0xc58]
10006af4:	31 c8                	xor    eax,ecx
10006af6:	89 c3                	mov    ebx,eax
10006af8:	c1 eb 06             	shr    ebx,0x6
10006afb:	89 c7                	mov    edi,eax
10006afd:	c1 ef 0e             	shr    edi,0xe
10006b00:	89 c6                	mov    esi,eax
10006b02:	c1 ee 16             	shr    esi,0x16
10006b05:	89 f1                	mov    ecx,esi
10006b07:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10006b0e:	81 e6 fc 03 00 00    	and    esi,0x3fc
10006b14:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10006b1a:	81 e7 fc 03 00 00    	and    edi,0x3fc
10006b20:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10006b26:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10006b2a:	03 8c 3c 58 04 00 00 	add    ecx,DWORD PTR [esp+edi*1+0x458]
10006b31:	33 8c 1c 58 08 00 00 	xor    ecx,DWORD PTR [esp+ebx*1+0x858]
10006b38:	33 94 24 6c 10 00 00 	xor    edx,DWORD PTR [esp+0x106c]
10006b3f:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10006b46:	31 ca                	xor    edx,ecx
10006b48:	89 d6                	mov    esi,edx
10006b4a:	c1 ee 06             	shr    esi,0x6
10006b4d:	89 d7                	mov    edi,edx
10006b4f:	c1 ef 0e             	shr    edi,0xe
10006b52:	89 d3                	mov    ebx,edx
10006b54:	c1 eb 16             	shr    ebx,0x16
10006b57:	89 d9                	mov    ecx,ebx
10006b59:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
10006b60:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10006b66:	81 e6 fc 03 00 00    	and    esi,0x3fc
10006b6c:	81 e7 fc 03 00 00    	and    edi,0x3fc
10006b72:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10006b78:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10006b7c:	03 8c 3c 58 04 00 00 	add    ecx,DWORD PTR [esp+edi*1+0x458]
10006b83:	33 8c 34 58 08 00 00 	xor    ecx,DWORD PTR [esp+esi*1+0x858]
10006b8a:	33 84 24 70 10 00 00 	xor    eax,DWORD PTR [esp+0x1070]
10006b91:	03 8c 1c 58 0c 00 00 	add    ecx,DWORD PTR [esp+ebx*1+0xc58]
10006b98:	31 c8                	xor    eax,ecx
10006b9a:	89 c6                	mov    esi,eax
10006b9c:	c1 ee 06             	shr    esi,0x6
10006b9f:	89 c7                	mov    edi,eax
10006ba1:	c1 ef 0e             	shr    edi,0xe
10006ba4:	89 c3                	mov    ebx,eax
10006ba6:	c1 eb 16             	shr    ebx,0x16
10006ba9:	89 d9                	mov    ecx,ebx
10006bab:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
10006bb2:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10006bb8:	81 e6 fc 03 00 00    	and    esi,0x3fc
10006bbe:	81 e7 fc 03 00 00    	and    edi,0x3fc
10006bc4:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10006bca:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10006bce:	03 8c 3c 58 04 00 00 	add    ecx,DWORD PTR [esp+edi*1+0x458]
10006bd5:	33 8c 34 58 08 00 00 	xor    ecx,DWORD PTR [esp+esi*1+0x858]
10006bdc:	33 94 24 74 10 00 00 	xor    edx,DWORD PTR [esp+0x1074]
10006be3:	03 8c 1c 58 0c 00 00 	add    ecx,DWORD PTR [esp+ebx*1+0xc58]
10006bea:	31 ca                	xor    edx,ecx
10006bec:	89 d6                	mov    esi,edx
10006bee:	c1 ee 06             	shr    esi,0x6
10006bf1:	89 d7                	mov    edi,edx
10006bf3:	c1 ef 0e             	shr    edi,0xe
10006bf6:	89 d3                	mov    ebx,edx
10006bf8:	c1 eb 16             	shr    ebx,0x16
10006bfb:	89 d9                	mov    ecx,ebx
10006bfd:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
10006c04:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10006c0a:	81 e6 fc 03 00 00    	and    esi,0x3fc
10006c10:	81 e7 fc 03 00 00    	and    edi,0x3fc
10006c16:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10006c1c:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10006c20:	03 8c 3c 58 04 00 00 	add    ecx,DWORD PTR [esp+edi*1+0x458]
10006c27:	33 8c 34 58 08 00 00 	xor    ecx,DWORD PTR [esp+esi*1+0x858]
10006c2e:	33 84 24 78 10 00 00 	xor    eax,DWORD PTR [esp+0x1078]
10006c35:	03 8c 1c 58 0c 00 00 	add    ecx,DWORD PTR [esp+ebx*1+0xc58]
10006c3c:	31 c8                	xor    eax,ecx
10006c3e:	89 c6                	mov    esi,eax
10006c40:	c1 ee 06             	shr    esi,0x6
10006c43:	89 c7                	mov    edi,eax
10006c45:	c1 ef 0e             	shr    edi,0xe
10006c48:	89 c3                	mov    ebx,eax
10006c4a:	c1 eb 16             	shr    ebx,0x16
10006c4d:	89 d9                	mov    ecx,ebx
10006c4f:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
10006c56:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10006c5c:	81 e6 fc 03 00 00    	and    esi,0x3fc
10006c62:	81 e7 fc 03 00 00    	and    edi,0x3fc
10006c68:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10006c6e:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10006c72:	03 8c 3c 58 04 00 00 	add    ecx,DWORD PTR [esp+edi*1+0x458]
10006c79:	33 8c 34 58 08 00 00 	xor    ecx,DWORD PTR [esp+esi*1+0x858]
10006c80:	33 94 24 7c 10 00 00 	xor    edx,DWORD PTR [esp+0x107c]
10006c87:	03 8c 1c 58 0c 00 00 	add    ecx,DWORD PTR [esp+ebx*1+0xc58]
10006c8e:	31 ca                	xor    edx,ecx
10006c90:	89 d6                	mov    esi,edx
10006c92:	c1 ee 06             	shr    esi,0x6
10006c95:	89 d7                	mov    edi,edx
10006c97:	c1 ef 0e             	shr    edi,0xe
10006c9a:	89 d3                	mov    ebx,edx
10006c9c:	c1 eb 16             	shr    ebx,0x16
10006c9f:	89 d9                	mov    ecx,ebx
10006ca1:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
10006ca8:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10006cae:	81 e6 fc 03 00 00    	and    esi,0x3fc
10006cb4:	81 e7 fc 03 00 00    	and    edi,0x3fc
10006cba:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10006cc0:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10006cc4:	03 8c 3c 58 04 00 00 	add    ecx,DWORD PTR [esp+edi*1+0x458]
10006ccb:	33 8c 34 58 08 00 00 	xor    ecx,DWORD PTR [esp+esi*1+0x858]
10006cd2:	33 84 24 80 10 00 00 	xor    eax,DWORD PTR [esp+0x1080]
10006cd9:	03 8c 1c 58 0c 00 00 	add    ecx,DWORD PTR [esp+ebx*1+0xc58]
10006ce0:	31 c8                	xor    eax,ecx
10006ce2:	89 c6                	mov    esi,eax
10006ce4:	c1 ee 06             	shr    esi,0x6
10006ce7:	89 c7                	mov    edi,eax
10006ce9:	c1 ef 0e             	shr    edi,0xe
10006cec:	89 c3                	mov    ebx,eax
10006cee:	c1 eb 16             	shr    ebx,0x16
10006cf1:	89 d9                	mov    ecx,ebx
10006cf3:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
10006cfa:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10006d00:	81 e6 fc 03 00 00    	and    esi,0x3fc
10006d06:	81 e7 fc 03 00 00    	and    edi,0x3fc
10006d0c:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10006d12:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10006d16:	03 8c 3c 58 04 00 00 	add    ecx,DWORD PTR [esp+edi*1+0x458]
10006d1d:	33 8c 34 58 08 00 00 	xor    ecx,DWORD PTR [esp+esi*1+0x858]
10006d24:	33 94 24 84 10 00 00 	xor    edx,DWORD PTR [esp+0x1084]
10006d2b:	03 8c 1c 58 0c 00 00 	add    ecx,DWORD PTR [esp+ebx*1+0xc58]
10006d32:	31 ca                	xor    edx,ecx
10006d34:	89 d6                	mov    esi,edx
10006d36:	c1 ee 06             	shr    esi,0x6
10006d39:	89 d7                	mov    edi,edx
10006d3b:	c1 ef 0e             	shr    edi,0xe
10006d3e:	89 d3                	mov    ebx,edx
10006d40:	c1 eb 16             	shr    ebx,0x16
10006d43:	89 d9                	mov    ecx,ebx
10006d45:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
10006d4c:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10006d52:	81 e6 fc 03 00 00    	and    esi,0x3fc
10006d58:	81 e7 fc 03 00 00    	and    edi,0x3fc
10006d5e:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10006d64:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10006d68:	03 8c 3c 58 04 00 00 	add    ecx,DWORD PTR [esp+edi*1+0x458]
10006d6f:	33 8c 34 58 08 00 00 	xor    ecx,DWORD PTR [esp+esi*1+0x858]
10006d76:	33 84 24 88 10 00 00 	xor    eax,DWORD PTR [esp+0x1088]
10006d7d:	03 8c 1c 58 0c 00 00 	add    ecx,DWORD PTR [esp+ebx*1+0xc58]
10006d84:	31 c8                	xor    eax,ecx
10006d86:	89 c6                	mov    esi,eax
10006d88:	c1 ee 06             	shr    esi,0x6
10006d8b:	89 c7                	mov    edi,eax
10006d8d:	c1 ef 0e             	shr    edi,0xe
10006d90:	89 c3                	mov    ebx,eax
10006d92:	c1 eb 16             	shr    ebx,0x16
10006d95:	89 d9                	mov    ecx,ebx
10006d97:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
10006d9e:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10006da4:	81 e6 fc 03 00 00    	and    esi,0x3fc
10006daa:	81 e7 fc 03 00 00    	and    edi,0x3fc
10006db0:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10006db6:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10006dba:	03 8c 3c 58 04 00 00 	add    ecx,DWORD PTR [esp+edi*1+0x458]
10006dc1:	33 8c 34 58 08 00 00 	xor    ecx,DWORD PTR [esp+esi*1+0x858]
10006dc8:	33 94 24 8c 10 00 00 	xor    edx,DWORD PTR [esp+0x108c]
10006dcf:	03 8c 1c 58 0c 00 00 	add    ecx,DWORD PTR [esp+ebx*1+0xc58]
10006dd6:	31 ca                	xor    edx,ecx
10006dd8:	89 d3                	mov    ebx,edx
10006dda:	c1 eb 06             	shr    ebx,0x6
10006ddd:	89 d7                	mov    edi,edx
10006ddf:	c1 ef 0e             	shr    edi,0xe
10006de2:	89 d6                	mov    esi,edx
10006de4:	c1 ee 16             	shr    esi,0x16
10006de7:	89 f1                	mov    ecx,esi
10006de9:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10006df0:	81 e6 fc 03 00 00    	and    esi,0x3fc
10006df6:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10006dfc:	81 e7 fc 03 00 00    	and    edi,0x3fc
10006e02:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10006e08:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10006e0c:	03 8c 3c 58 04 00 00 	add    ecx,DWORD PTR [esp+edi*1+0x458]
10006e13:	33 8c 1c 58 08 00 00 	xor    ecx,DWORD PTR [esp+ebx*1+0x858]
10006e1a:	33 84 24 90 10 00 00 	xor    eax,DWORD PTR [esp+0x1090]
10006e21:	89 cb                	mov    ebx,ecx
10006e23:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
10006e2a:	31 d8                	xor    eax,ebx
10006e2c:	89 c6                	mov    esi,eax
10006e2e:	c1 ee 06             	shr    esi,0x6
10006e31:	89 c7                	mov    edi,eax
10006e33:	c1 ef 0e             	shr    edi,0xe
10006e36:	89 c3                	mov    ebx,eax
10006e38:	c1 eb 16             	shr    ebx,0x16
10006e3b:	89 d9                	mov    ecx,ebx
10006e3d:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
10006e44:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10006e4a:	81 e6 fc 03 00 00    	and    esi,0x3fc
10006e50:	81 e7 fc 03 00 00    	and    edi,0x3fc
10006e56:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10006e5c:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10006e60:	03 8c 3c 58 04 00 00 	add    ecx,DWORD PTR [esp+edi*1+0x458]
10006e67:	33 8c 34 58 08 00 00 	xor    ecx,DWORD PTR [esp+esi*1+0x858]
10006e6e:	33 94 24 94 10 00 00 	xor    edx,DWORD PTR [esp+0x1094]
10006e75:	03 8c 1c 58 0c 00 00 	add    ecx,DWORD PTR [esp+ebx*1+0xc58]
10006e7c:	31 ca                	xor    edx,ecx
10006e7e:	89 d3                	mov    ebx,edx
10006e80:	c1 eb 06             	shr    ebx,0x6
10006e83:	89 d7                	mov    edi,edx
10006e85:	c1 ef 0e             	shr    edi,0xe
10006e88:	89 d6                	mov    esi,edx
10006e8a:	c1 ee 16             	shr    esi,0x16
10006e8d:	89 f1                	mov    ecx,esi
10006e8f:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10006e96:	81 e6 fc 03 00 00    	and    esi,0x3fc
10006e9c:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10006ea2:	81 e7 fc 03 00 00    	and    edi,0x3fc
10006ea8:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10006eae:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10006eb2:	03 8c 3c 58 04 00 00 	add    ecx,DWORD PTR [esp+edi*1+0x458]
10006eb9:	33 8c 1c 58 08 00 00 	xor    ecx,DWORD PTR [esp+ebx*1+0x858]
10006ec0:	33 84 24 98 10 00 00 	xor    eax,DWORD PTR [esp+0x1098]
10006ec7:	89 cb                	mov    ebx,ecx
10006ec9:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
10006ed0:	31 c3                	xor    ebx,eax
10006ed2:	89 d0                	mov    eax,edx
10006ed4:	33 84 24 9c 10 00 00 	xor    eax,DWORD PTR [esp+0x109c]
10006edb:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
10006ede:	89 84 8c 58 10 00 00 	mov    DWORD PTR [esp+ecx*4+0x1058],eax
10006ee5:	89 9c 8c 5c 10 00 00 	mov    DWORD PTR [esp+ecx*4+0x105c],ebx
10006eec:	83 c1 02             	add    ecx,0x2
10006eef:	89 0c 24             	mov    DWORD PTR [esp],ecx
10006ef2:	83 f9 12             	cmp    ecx,0x12
10006ef5:	0f 85 94 fa ff ff    	jne    1000698f <_crypt_blowfish_rn+0x125>
10006efb:	8d 4c 24 58          	lea    ecx,[esp+0x58]
10006eff:	83 c1 10             	add    ecx,0x10
10006f02:	8b 94 24 f0 10 00 00 	mov    edx,DWORD PTR [esp+0x10f0]
10006f09:	33 94 24 58 10 00 00 	xor    edx,DWORD PTR [esp+0x1058]
10006f10:	31 c2                	xor    edx,eax
10006f12:	89 d7                	mov    edi,edx
10006f14:	c1 ef 06             	shr    edi,0x6
10006f17:	89 d5                	mov    ebp,edx
10006f19:	c1 ed 0e             	shr    ebp,0xe
10006f1c:	89 d0                	mov    eax,edx
10006f1e:	c1 e8 16             	shr    eax,0x16
10006f21:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10006f28:	81 e6 fc 03 00 00    	and    esi,0x3fc
10006f2e:	81 e7 fc 03 00 00    	and    edi,0x3fc
10006f34:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10006f3a:	25 fc 03 00 00       	and    eax,0x3fc
10006f3f:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10006f43:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
10006f4a:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
10006f51:	89 c7                	mov    edi,eax
10006f53:	8b 84 24 f4 10 00 00 	mov    eax,DWORD PTR [esp+0x10f4]
10006f5a:	33 84 24 5c 10 00 00 	xor    eax,DWORD PTR [esp+0x105c]
10006f61:	03 bc 34 58 0c 00 00 	add    edi,DWORD PTR [esp+esi*1+0xc58]
10006f68:	31 f8                	xor    eax,edi
10006f6a:	31 d8                	xor    eax,ebx
10006f6c:	89 c7                	mov    edi,eax
10006f6e:	c1 ef 06             	shr    edi,0x6
10006f71:	89 c5                	mov    ebp,eax
10006f73:	c1 ed 0e             	shr    ebp,0xe
10006f76:	89 c3                	mov    ebx,eax
10006f78:	c1 eb 16             	shr    ebx,0x16
10006f7b:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10006f82:	81 e6 fc 03 00 00    	and    esi,0x3fc
10006f88:	81 e7 fc 03 00 00    	and    edi,0x3fc
10006f8e:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10006f94:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10006f9a:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
10006f9e:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
10006fa5:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
10006fac:	33 94 24 60 10 00 00 	xor    edx,DWORD PTR [esp+0x1060]
10006fb3:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
10006fba:	31 da                	xor    edx,ebx
10006fbc:	89 d7                	mov    edi,edx
10006fbe:	c1 ef 06             	shr    edi,0x6
10006fc1:	89 d5                	mov    ebp,edx
10006fc3:	c1 ed 0e             	shr    ebp,0xe
10006fc6:	89 d3                	mov    ebx,edx
10006fc8:	c1 eb 16             	shr    ebx,0x16
10006fcb:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10006fd2:	81 e6 fc 03 00 00    	and    esi,0x3fc
10006fd8:	81 e7 fc 03 00 00    	and    edi,0x3fc
10006fde:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10006fe4:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10006fea:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
10006fee:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
10006ff5:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
10006ffc:	33 84 24 64 10 00 00 	xor    eax,DWORD PTR [esp+0x1064]
10007003:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
1000700a:	31 d8                	xor    eax,ebx
1000700c:	89 c7                	mov    edi,eax
1000700e:	c1 ef 06             	shr    edi,0x6
10007011:	89 c5                	mov    ebp,eax
10007013:	c1 ed 0e             	shr    ebp,0xe
10007016:	89 c3                	mov    ebx,eax
10007018:	c1 eb 16             	shr    ebx,0x16
1000701b:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10007022:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007028:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000702e:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007034:	81 e3 fc 03 00 00    	and    ebx,0x3fc
1000703a:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
1000703e:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
10007045:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
1000704c:	33 94 24 68 10 00 00 	xor    edx,DWORD PTR [esp+0x1068]
10007053:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
1000705a:	31 da                	xor    edx,ebx
1000705c:	89 d7                	mov    edi,edx
1000705e:	c1 ef 06             	shr    edi,0x6
10007061:	89 d5                	mov    ebp,edx
10007063:	c1 ed 0e             	shr    ebp,0xe
10007066:	89 d3                	mov    ebx,edx
10007068:	c1 eb 16             	shr    ebx,0x16
1000706b:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10007072:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007078:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000707e:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007084:	81 e3 fc 03 00 00    	and    ebx,0x3fc
1000708a:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
1000708e:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
10007095:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
1000709c:	33 84 24 6c 10 00 00 	xor    eax,DWORD PTR [esp+0x106c]
100070a3:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
100070aa:	31 d8                	xor    eax,ebx
100070ac:	89 c7                	mov    edi,eax
100070ae:	c1 ef 06             	shr    edi,0x6
100070b1:	89 c5                	mov    ebp,eax
100070b3:	c1 ed 0e             	shr    ebp,0xe
100070b6:	89 c3                	mov    ebx,eax
100070b8:	c1 eb 16             	shr    ebx,0x16
100070bb:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
100070c2:	81 e6 fc 03 00 00    	and    esi,0x3fc
100070c8:	81 e7 fc 03 00 00    	and    edi,0x3fc
100070ce:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100070d4:	81 e3 fc 03 00 00    	and    ebx,0x3fc
100070da:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
100070de:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
100070e5:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
100070ec:	33 94 24 70 10 00 00 	xor    edx,DWORD PTR [esp+0x1070]
100070f3:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
100070fa:	31 da                	xor    edx,ebx
100070fc:	89 d7                	mov    edi,edx
100070fe:	c1 ef 06             	shr    edi,0x6
10007101:	89 d5                	mov    ebp,edx
10007103:	c1 ed 0e             	shr    ebp,0xe
10007106:	89 d3                	mov    ebx,edx
10007108:	c1 eb 16             	shr    ebx,0x16
1000710b:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10007112:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007118:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000711e:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007124:	81 e3 fc 03 00 00    	and    ebx,0x3fc
1000712a:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
1000712e:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
10007135:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
1000713c:	33 84 24 74 10 00 00 	xor    eax,DWORD PTR [esp+0x1074]
10007143:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
1000714a:	31 d8                	xor    eax,ebx
1000714c:	89 c7                	mov    edi,eax
1000714e:	c1 ef 06             	shr    edi,0x6
10007151:	89 c5                	mov    ebp,eax
10007153:	c1 ed 0e             	shr    ebp,0xe
10007156:	89 c3                	mov    ebx,eax
10007158:	c1 eb 16             	shr    ebx,0x16
1000715b:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10007162:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007168:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000716e:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007174:	81 e3 fc 03 00 00    	and    ebx,0x3fc
1000717a:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
1000717e:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
10007185:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
1000718c:	33 94 24 78 10 00 00 	xor    edx,DWORD PTR [esp+0x1078]
10007193:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
1000719a:	31 da                	xor    edx,ebx
1000719c:	89 d7                	mov    edi,edx
1000719e:	c1 ef 06             	shr    edi,0x6
100071a1:	89 d5                	mov    ebp,edx
100071a3:	c1 ed 0e             	shr    ebp,0xe
100071a6:	89 d3                	mov    ebx,edx
100071a8:	c1 eb 16             	shr    ebx,0x16
100071ab:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
100071b2:	81 e6 fc 03 00 00    	and    esi,0x3fc
100071b8:	81 e7 fc 03 00 00    	and    edi,0x3fc
100071be:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100071c4:	81 e3 fc 03 00 00    	and    ebx,0x3fc
100071ca:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
100071ce:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
100071d5:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
100071dc:	33 84 24 7c 10 00 00 	xor    eax,DWORD PTR [esp+0x107c]
100071e3:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
100071ea:	31 d8                	xor    eax,ebx
100071ec:	89 c7                	mov    edi,eax
100071ee:	c1 ef 06             	shr    edi,0x6
100071f1:	89 c5                	mov    ebp,eax
100071f3:	c1 ed 0e             	shr    ebp,0xe
100071f6:	89 c3                	mov    ebx,eax
100071f8:	c1 eb 16             	shr    ebx,0x16
100071fb:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10007202:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007208:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000720e:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007214:	81 e3 fc 03 00 00    	and    ebx,0x3fc
1000721a:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
1000721e:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
10007225:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
1000722c:	33 94 24 80 10 00 00 	xor    edx,DWORD PTR [esp+0x1080]
10007233:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
1000723a:	31 da                	xor    edx,ebx
1000723c:	89 d7                	mov    edi,edx
1000723e:	c1 ef 06             	shr    edi,0x6
10007241:	89 d5                	mov    ebp,edx
10007243:	c1 ed 0e             	shr    ebp,0xe
10007246:	89 d3                	mov    ebx,edx
10007248:	c1 eb 16             	shr    ebx,0x16
1000724b:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10007252:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007258:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000725e:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007264:	81 e3 fc 03 00 00    	and    ebx,0x3fc
1000726a:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
1000726e:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
10007275:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
1000727c:	33 84 24 84 10 00 00 	xor    eax,DWORD PTR [esp+0x1084]
10007283:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
1000728a:	31 d8                	xor    eax,ebx
1000728c:	89 c7                	mov    edi,eax
1000728e:	c1 ef 06             	shr    edi,0x6
10007291:	89 c5                	mov    ebp,eax
10007293:	c1 ed 0e             	shr    ebp,0xe
10007296:	89 c3                	mov    ebx,eax
10007298:	c1 eb 16             	shr    ebx,0x16
1000729b:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
100072a2:	81 e6 fc 03 00 00    	and    esi,0x3fc
100072a8:	81 e7 fc 03 00 00    	and    edi,0x3fc
100072ae:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100072b4:	81 e3 fc 03 00 00    	and    ebx,0x3fc
100072ba:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
100072be:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
100072c5:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
100072cc:	33 94 24 88 10 00 00 	xor    edx,DWORD PTR [esp+0x1088]
100072d3:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
100072da:	31 da                	xor    edx,ebx
100072dc:	89 d7                	mov    edi,edx
100072de:	c1 ef 06             	shr    edi,0x6
100072e1:	89 d5                	mov    ebp,edx
100072e3:	c1 ed 0e             	shr    ebp,0xe
100072e6:	89 d3                	mov    ebx,edx
100072e8:	c1 eb 16             	shr    ebx,0x16
100072eb:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
100072f2:	81 e6 fc 03 00 00    	and    esi,0x3fc
100072f8:	81 e7 fc 03 00 00    	and    edi,0x3fc
100072fe:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007304:	81 e3 fc 03 00 00    	and    ebx,0x3fc
1000730a:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
1000730e:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
10007315:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
1000731c:	33 84 24 8c 10 00 00 	xor    eax,DWORD PTR [esp+0x108c]
10007323:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
1000732a:	31 d8                	xor    eax,ebx
1000732c:	89 c7                	mov    edi,eax
1000732e:	c1 ef 06             	shr    edi,0x6
10007331:	89 c5                	mov    ebp,eax
10007333:	c1 ed 0e             	shr    ebp,0xe
10007336:	89 c3                	mov    ebx,eax
10007338:	c1 eb 16             	shr    ebx,0x16
1000733b:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10007342:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007348:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000734e:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007354:	81 e3 fc 03 00 00    	and    ebx,0x3fc
1000735a:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
1000735e:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
10007365:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
1000736c:	33 94 24 90 10 00 00 	xor    edx,DWORD PTR [esp+0x1090]
10007373:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
1000737a:	31 da                	xor    edx,ebx
1000737c:	89 d7                	mov    edi,edx
1000737e:	c1 ef 06             	shr    edi,0x6
10007381:	89 d5                	mov    ebp,edx
10007383:	c1 ed 0e             	shr    ebp,0xe
10007386:	89 d3                	mov    ebx,edx
10007388:	c1 eb 16             	shr    ebx,0x16
1000738b:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10007392:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007398:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000739e:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100073a4:	81 e3 fc 03 00 00    	and    ebx,0x3fc
100073aa:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
100073ae:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
100073b5:	33 9c 3c 58 08 00 00 	xor    ebx,DWORD PTR [esp+edi*1+0x858]
100073bc:	33 84 24 94 10 00 00 	xor    eax,DWORD PTR [esp+0x1094]
100073c3:	03 9c 34 58 0c 00 00 	add    ebx,DWORD PTR [esp+esi*1+0xc58]
100073ca:	31 d8                	xor    eax,ebx
100073cc:	89 c6                	mov    esi,eax
100073ce:	c1 ee 06             	shr    esi,0x6
100073d1:	89 c5                	mov    ebp,eax
100073d3:	c1 ed 0e             	shr    ebp,0xe
100073d6:	89 c3                	mov    ebx,eax
100073d8:	c1 eb 16             	shr    ebx,0x16
100073db:	8d 3c 85 00 00 00 00 	lea    edi,[eax*4+0x0]
100073e2:	81 e7 fc 03 00 00    	and    edi,0x3fc
100073e8:	81 e6 fc 03 00 00    	and    esi,0x3fc
100073ee:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100073f4:	81 e3 fc 03 00 00    	and    ebx,0x3fc
100073fa:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
100073fe:	03 9c 2c 58 04 00 00 	add    ebx,DWORD PTR [esp+ebp*1+0x458]
10007405:	33 9c 34 58 08 00 00 	xor    ebx,DWORD PTR [esp+esi*1+0x858]
1000740c:	33 94 24 98 10 00 00 	xor    edx,DWORD PTR [esp+0x1098]
10007413:	03 9c 3c 58 0c 00 00 	add    ebx,DWORD PTR [esp+edi*1+0xc58]
1000741a:	31 da                	xor    edx,ebx
1000741c:	33 84 24 9c 10 00 00 	xor    eax,DWORD PTR [esp+0x109c]
10007423:	89 41 f0             	mov    DWORD PTR [ecx-0x10],eax
10007426:	89 51 f4             	mov    DWORD PTR [ecx-0xc],edx
10007429:	8b 9c 24 e8 10 00 00 	mov    ebx,DWORD PTR [esp+0x10e8]
10007430:	33 9c 24 58 10 00 00 	xor    ebx,DWORD PTR [esp+0x1058]
10007437:	31 d8                	xor    eax,ebx
10007439:	89 c5                	mov    ebp,eax
1000743b:	c1 ed 06             	shr    ebp,0x6
1000743e:	89 c6                	mov    esi,eax
10007440:	c1 ee 0e             	shr    esi,0xe
10007443:	89 c3                	mov    ebx,eax
10007445:	c1 eb 16             	shr    ebx,0x16
10007448:	8d 3c 85 00 00 00 00 	lea    edi,[eax*4+0x0]
1000744f:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007455:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000745b:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007461:	81 e3 fc 03 00 00    	and    ebx,0x3fc
10007467:	8b 5c 1c 58          	mov    ebx,DWORD PTR [esp+ebx*1+0x58]
1000746b:	03 9c 34 58 04 00 00 	add    ebx,DWORD PTR [esp+esi*1+0x458]
10007472:	33 9c 2c 58 08 00 00 	xor    ebx,DWORD PTR [esp+ebp*1+0x858]
10007479:	8b b4 24 ec 10 00 00 	mov    esi,DWORD PTR [esp+0x10ec]
10007480:	33 b4 24 5c 10 00 00 	xor    esi,DWORD PTR [esp+0x105c]
10007487:	31 f2                	xor    edx,esi
10007489:	03 9c 3c 58 0c 00 00 	add    ebx,DWORD PTR [esp+edi*1+0xc58]
10007490:	89 de                	mov    esi,ebx
10007492:	31 d6                	xor    esi,edx
10007494:	89 f5                	mov    ebp,esi
10007496:	c1 ed 06             	shr    ebp,0x6
10007499:	89 f3                	mov    ebx,esi
1000749b:	c1 eb 0e             	shr    ebx,0xe
1000749e:	89 f2                	mov    edx,esi
100074a0:	c1 ea 16             	shr    edx,0x16
100074a3:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
100074aa:	81 e7 fc 03 00 00    	and    edi,0x3fc
100074b0:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100074b6:	81 e3 fc 03 00 00    	and    ebx,0x3fc
100074bc:	81 e2 fc 03 00 00    	and    edx,0x3fc
100074c2:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
100074c6:	03 94 1c 58 04 00 00 	add    edx,DWORD PTR [esp+ebx*1+0x458]
100074cd:	33 94 2c 58 08 00 00 	xor    edx,DWORD PTR [esp+ebp*1+0x858]
100074d4:	33 84 24 60 10 00 00 	xor    eax,DWORD PTR [esp+0x1060]
100074db:	89 d3                	mov    ebx,edx
100074dd:	03 9c 3c 58 0c 00 00 	add    ebx,DWORD PTR [esp+edi*1+0xc58]
100074e4:	31 c3                	xor    ebx,eax
100074e6:	89 df                	mov    edi,ebx
100074e8:	c1 ef 06             	shr    edi,0x6
100074eb:	89 dd                	mov    ebp,ebx
100074ed:	c1 ed 0e             	shr    ebp,0xe
100074f0:	89 da                	mov    edx,ebx
100074f2:	c1 ea 16             	shr    edx,0x16
100074f5:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
100074fc:	25 fc 03 00 00       	and    eax,0x3fc
10007501:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007507:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000750d:	81 e2 fc 03 00 00    	and    edx,0x3fc
10007513:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10007517:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
1000751e:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10007525:	33 b4 24 64 10 00 00 	xor    esi,DWORD PTR [esp+0x1064]
1000752c:	03 94 04 58 0c 00 00 	add    edx,DWORD PTR [esp+eax*1+0xc58]
10007533:	31 d6                	xor    esi,edx
10007535:	89 f0                	mov    eax,esi
10007537:	c1 e8 06             	shr    eax,0x6
1000753a:	89 f5                	mov    ebp,esi
1000753c:	c1 ed 0e             	shr    ebp,0xe
1000753f:	89 f2                	mov    edx,esi
10007541:	c1 ea 16             	shr    edx,0x16
10007544:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
1000754b:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007551:	25 fc 03 00 00       	and    eax,0x3fc
10007556:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000755c:	81 e2 fc 03 00 00    	and    edx,0x3fc
10007562:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10007566:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
1000756d:	33 94 04 58 08 00 00 	xor    edx,DWORD PTR [esp+eax*1+0x858]
10007574:	33 9c 24 68 10 00 00 	xor    ebx,DWORD PTR [esp+0x1068]
1000757b:	03 94 3c 58 0c 00 00 	add    edx,DWORD PTR [esp+edi*1+0xc58]
10007582:	31 d3                	xor    ebx,edx
10007584:	89 dd                	mov    ebp,ebx
10007586:	c1 ed 06             	shr    ebp,0x6
10007589:	89 da                	mov    edx,ebx
1000758b:	c1 ea 0e             	shr    edx,0xe
1000758e:	89 d8                	mov    eax,ebx
10007590:	c1 e8 16             	shr    eax,0x16
10007593:	8d 3c 9d 00 00 00 00 	lea    edi,[ebx*4+0x0]
1000759a:	81 e7 fc 03 00 00    	and    edi,0x3fc
100075a0:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100075a6:	81 e2 fc 03 00 00    	and    edx,0x3fc
100075ac:	25 fc 03 00 00       	and    eax,0x3fc
100075b1:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
100075b5:	03 84 14 58 04 00 00 	add    eax,DWORD PTR [esp+edx*1+0x458]
100075bc:	33 84 2c 58 08 00 00 	xor    eax,DWORD PTR [esp+ebp*1+0x858]
100075c3:	33 b4 24 6c 10 00 00 	xor    esi,DWORD PTR [esp+0x106c]
100075ca:	03 84 3c 58 0c 00 00 	add    eax,DWORD PTR [esp+edi*1+0xc58]
100075d1:	89 c2                	mov    edx,eax
100075d3:	31 f2                	xor    edx,esi
100075d5:	89 d7                	mov    edi,edx
100075d7:	c1 ef 06             	shr    edi,0x6
100075da:	89 d5                	mov    ebp,edx
100075dc:	c1 ed 0e             	shr    ebp,0xe
100075df:	89 d0                	mov    eax,edx
100075e1:	c1 e8 16             	shr    eax,0x16
100075e4:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
100075eb:	81 e6 fc 03 00 00    	and    esi,0x3fc
100075f1:	81 e7 fc 03 00 00    	and    edi,0x3fc
100075f7:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100075fd:	25 fc 03 00 00       	and    eax,0x3fc
10007602:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10007606:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
1000760d:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
10007614:	33 9c 24 70 10 00 00 	xor    ebx,DWORD PTR [esp+0x1070]
1000761b:	03 84 34 58 0c 00 00 	add    eax,DWORD PTR [esp+esi*1+0xc58]
10007622:	31 c3                	xor    ebx,eax
10007624:	89 df                	mov    edi,ebx
10007626:	c1 ef 06             	shr    edi,0x6
10007629:	89 dd                	mov    ebp,ebx
1000762b:	c1 ed 0e             	shr    ebp,0xe
1000762e:	89 d8                	mov    eax,ebx
10007630:	c1 e8 16             	shr    eax,0x16
10007633:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
1000763a:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007640:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007646:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000764c:	25 fc 03 00 00       	and    eax,0x3fc
10007651:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10007655:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
1000765c:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
10007663:	33 94 24 74 10 00 00 	xor    edx,DWORD PTR [esp+0x1074]
1000766a:	03 84 34 58 0c 00 00 	add    eax,DWORD PTR [esp+esi*1+0xc58]
10007671:	31 c2                	xor    edx,eax
10007673:	89 d7                	mov    edi,edx
10007675:	c1 ef 06             	shr    edi,0x6
10007678:	89 d5                	mov    ebp,edx
1000767a:	c1 ed 0e             	shr    ebp,0xe
1000767d:	89 d0                	mov    eax,edx
1000767f:	c1 e8 16             	shr    eax,0x16
10007682:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10007689:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000768f:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007695:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000769b:	25 fc 03 00 00       	and    eax,0x3fc
100076a0:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
100076a4:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
100076ab:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
100076b2:	33 9c 24 78 10 00 00 	xor    ebx,DWORD PTR [esp+0x1078]
100076b9:	03 84 34 58 0c 00 00 	add    eax,DWORD PTR [esp+esi*1+0xc58]
100076c0:	31 c3                	xor    ebx,eax
100076c2:	89 df                	mov    edi,ebx
100076c4:	c1 ef 06             	shr    edi,0x6
100076c7:	89 dd                	mov    ebp,ebx
100076c9:	c1 ed 0e             	shr    ebp,0xe
100076cc:	89 d8                	mov    eax,ebx
100076ce:	c1 e8 16             	shr    eax,0x16
100076d1:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
100076d8:	81 e6 fc 03 00 00    	and    esi,0x3fc
100076de:	81 e7 fc 03 00 00    	and    edi,0x3fc
100076e4:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100076ea:	25 fc 03 00 00       	and    eax,0x3fc
100076ef:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
100076f3:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
100076fa:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
10007701:	33 94 24 7c 10 00 00 	xor    edx,DWORD PTR [esp+0x107c]
10007708:	03 84 34 58 0c 00 00 	add    eax,DWORD PTR [esp+esi*1+0xc58]
1000770f:	31 c2                	xor    edx,eax
10007711:	89 d7                	mov    edi,edx
10007713:	c1 ef 06             	shr    edi,0x6
10007716:	89 d5                	mov    ebp,edx
10007718:	c1 ed 0e             	shr    ebp,0xe
1000771b:	89 d0                	mov    eax,edx
1000771d:	c1 e8 16             	shr    eax,0x16
10007720:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10007727:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000772d:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007733:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007739:	25 fc 03 00 00       	and    eax,0x3fc
1000773e:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10007742:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
10007749:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
10007750:	33 9c 24 80 10 00 00 	xor    ebx,DWORD PTR [esp+0x1080]
10007757:	03 84 34 58 0c 00 00 	add    eax,DWORD PTR [esp+esi*1+0xc58]
1000775e:	31 c3                	xor    ebx,eax
10007760:	89 df                	mov    edi,ebx
10007762:	c1 ef 06             	shr    edi,0x6
10007765:	89 dd                	mov    ebp,ebx
10007767:	c1 ed 0e             	shr    ebp,0xe
1000776a:	89 d8                	mov    eax,ebx
1000776c:	c1 e8 16             	shr    eax,0x16
1000776f:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
10007776:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000777c:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007782:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007788:	25 fc 03 00 00       	and    eax,0x3fc
1000778d:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10007791:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
10007798:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
1000779f:	33 94 24 84 10 00 00 	xor    edx,DWORD PTR [esp+0x1084]
100077a6:	03 84 34 58 0c 00 00 	add    eax,DWORD PTR [esp+esi*1+0xc58]
100077ad:	31 d0                	xor    eax,edx
100077af:	89 c7                	mov    edi,eax
100077b1:	c1 ef 06             	shr    edi,0x6
100077b4:	89 c5                	mov    ebp,eax
100077b6:	c1 ed 0e             	shr    ebp,0xe
100077b9:	89 c2                	mov    edx,eax
100077bb:	c1 ea 16             	shr    edx,0x16
100077be:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
100077c5:	81 e6 fc 03 00 00    	and    esi,0x3fc
100077cb:	81 e7 fc 03 00 00    	and    edi,0x3fc
100077d1:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100077d7:	81 e2 fc 03 00 00    	and    edx,0x3fc
100077dd:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
100077e1:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
100077e8:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
100077ef:	33 9c 24 88 10 00 00 	xor    ebx,DWORD PTR [esp+0x1088]
100077f6:	03 94 34 58 0c 00 00 	add    edx,DWORD PTR [esp+esi*1+0xc58]
100077fd:	31 d3                	xor    ebx,edx
100077ff:	89 df                	mov    edi,ebx
10007801:	c1 ef 06             	shr    edi,0x6
10007804:	89 dd                	mov    ebp,ebx
10007806:	c1 ed 0e             	shr    ebp,0xe
10007809:	89 da                	mov    edx,ebx
1000780b:	c1 ea 16             	shr    edx,0x16
1000780e:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
10007815:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000781b:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007821:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007827:	81 e2 fc 03 00 00    	and    edx,0x3fc
1000782d:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10007831:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10007838:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
1000783f:	33 84 24 8c 10 00 00 	xor    eax,DWORD PTR [esp+0x108c]
10007846:	03 94 34 58 0c 00 00 	add    edx,DWORD PTR [esp+esi*1+0xc58]
1000784d:	31 d0                	xor    eax,edx
1000784f:	89 c7                	mov    edi,eax
10007851:	c1 ef 06             	shr    edi,0x6
10007854:	89 c5                	mov    ebp,eax
10007856:	c1 ed 0e             	shr    ebp,0xe
10007859:	89 c2                	mov    edx,eax
1000785b:	c1 ea 16             	shr    edx,0x16
1000785e:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10007865:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000786b:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007871:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007877:	81 e2 fc 03 00 00    	and    edx,0x3fc
1000787d:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10007881:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10007888:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
1000788f:	33 9c 24 90 10 00 00 	xor    ebx,DWORD PTR [esp+0x1090]
10007896:	03 94 34 58 0c 00 00 	add    edx,DWORD PTR [esp+esi*1+0xc58]
1000789d:	31 d3                	xor    ebx,edx
1000789f:	89 df                	mov    edi,ebx
100078a1:	c1 ef 06             	shr    edi,0x6
100078a4:	89 dd                	mov    ebp,ebx
100078a6:	c1 ed 0e             	shr    ebp,0xe
100078a9:	89 da                	mov    edx,ebx
100078ab:	c1 ea 16             	shr    edx,0x16
100078ae:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
100078b5:	81 e6 fc 03 00 00    	and    esi,0x3fc
100078bb:	81 e7 fc 03 00 00    	and    edi,0x3fc
100078c1:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100078c7:	81 e2 fc 03 00 00    	and    edx,0x3fc
100078cd:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
100078d1:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
100078d8:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
100078df:	33 84 24 94 10 00 00 	xor    eax,DWORD PTR [esp+0x1094]
100078e6:	03 94 34 58 0c 00 00 	add    edx,DWORD PTR [esp+esi*1+0xc58]
100078ed:	31 d0                	xor    eax,edx
100078ef:	89 c7                	mov    edi,eax
100078f1:	c1 ef 06             	shr    edi,0x6
100078f4:	89 c5                	mov    ebp,eax
100078f6:	c1 ed 0e             	shr    ebp,0xe
100078f9:	89 c2                	mov    edx,eax
100078fb:	c1 ea 16             	shr    edx,0x16
100078fe:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10007905:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000790b:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007911:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007917:	81 e2 fc 03 00 00    	and    edx,0x3fc
1000791d:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10007921:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10007928:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
1000792f:	33 9c 24 98 10 00 00 	xor    ebx,DWORD PTR [esp+0x1098]
10007936:	03 94 34 58 0c 00 00 	add    edx,DWORD PTR [esp+esi*1+0xc58]
1000793d:	31 d3                	xor    ebx,edx
1000793f:	33 84 24 9c 10 00 00 	xor    eax,DWORD PTR [esp+0x109c]
10007946:	89 41 f8             	mov    DWORD PTR [ecx-0x8],eax
10007949:	89 59 fc             	mov    DWORD PTR [ecx-0x4],ebx
1000794c:	8d 94 24 58 10 00 00 	lea    edx,[esp+0x1058]
10007953:	39 d1                	cmp    ecx,edx
10007955:	0f 85 a4 f5 ff ff    	jne    10006eff <_crypt_blowfish_rn+0x695>
1000795b:	8b 84 24 a0 10 00 00 	mov    eax,DWORD PTR [esp+0x10a0]
10007962:	31 84 24 58 10 00 00 	xor    DWORD PTR [esp+0x1058],eax
10007969:	8b 84 24 a4 10 00 00 	mov    eax,DWORD PTR [esp+0x10a4]
10007970:	31 84 24 5c 10 00 00 	xor    DWORD PTR [esp+0x105c],eax
10007977:	8b 84 24 a8 10 00 00 	mov    eax,DWORD PTR [esp+0x10a8]
1000797e:	31 84 24 60 10 00 00 	xor    DWORD PTR [esp+0x1060],eax
10007985:	8b 84 24 ac 10 00 00 	mov    eax,DWORD PTR [esp+0x10ac]
1000798c:	31 84 24 64 10 00 00 	xor    DWORD PTR [esp+0x1064],eax
10007993:	8b 84 24 b0 10 00 00 	mov    eax,DWORD PTR [esp+0x10b0]
1000799a:	31 84 24 68 10 00 00 	xor    DWORD PTR [esp+0x1068],eax
100079a1:	8b 84 24 b4 10 00 00 	mov    eax,DWORD PTR [esp+0x10b4]
100079a8:	31 84 24 6c 10 00 00 	xor    DWORD PTR [esp+0x106c],eax
100079af:	8b 84 24 b8 10 00 00 	mov    eax,DWORD PTR [esp+0x10b8]
100079b6:	31 84 24 70 10 00 00 	xor    DWORD PTR [esp+0x1070],eax
100079bd:	8b 84 24 bc 10 00 00 	mov    eax,DWORD PTR [esp+0x10bc]
100079c4:	31 84 24 74 10 00 00 	xor    DWORD PTR [esp+0x1074],eax
100079cb:	8b 84 24 c0 10 00 00 	mov    eax,DWORD PTR [esp+0x10c0]
100079d2:	31 84 24 78 10 00 00 	xor    DWORD PTR [esp+0x1078],eax
100079d9:	8b 84 24 c4 10 00 00 	mov    eax,DWORD PTR [esp+0x10c4]
100079e0:	31 84 24 7c 10 00 00 	xor    DWORD PTR [esp+0x107c],eax
100079e7:	8b 84 24 c8 10 00 00 	mov    eax,DWORD PTR [esp+0x10c8]
100079ee:	31 84 24 80 10 00 00 	xor    DWORD PTR [esp+0x1080],eax
100079f5:	8b 84 24 cc 10 00 00 	mov    eax,DWORD PTR [esp+0x10cc]
100079fc:	31 84 24 84 10 00 00 	xor    DWORD PTR [esp+0x1084],eax
10007a03:	8b 84 24 d0 10 00 00 	mov    eax,DWORD PTR [esp+0x10d0]
10007a0a:	31 84 24 88 10 00 00 	xor    DWORD PTR [esp+0x1088],eax
10007a11:	8b 84 24 d4 10 00 00 	mov    eax,DWORD PTR [esp+0x10d4]
10007a18:	31 84 24 8c 10 00 00 	xor    DWORD PTR [esp+0x108c],eax
10007a1f:	8b 84 24 d8 10 00 00 	mov    eax,DWORD PTR [esp+0x10d8]
10007a26:	31 84 24 90 10 00 00 	xor    DWORD PTR [esp+0x1090],eax
10007a2d:	8b 84 24 dc 10 00 00 	mov    eax,DWORD PTR [esp+0x10dc]
10007a34:	31 84 24 94 10 00 00 	xor    DWORD PTR [esp+0x1094],eax
10007a3b:	8b 84 24 e0 10 00 00 	mov    eax,DWORD PTR [esp+0x10e0]
10007a42:	31 84 24 98 10 00 00 	xor    DWORD PTR [esp+0x1098],eax
10007a49:	8b 84 24 e4 10 00 00 	mov    eax,DWORD PTR [esp+0x10e4]
10007a50:	31 84 24 9c 10 00 00 	xor    DWORD PTR [esp+0x109c],eax
10007a57:	8d 9c 24 58 10 00 00 	lea    ebx,[esp+0x1058]
10007a5e:	b9 00 00 00 00       	mov    ecx,0x0
10007a63:	b8 00 00 00 00       	mov    eax,0x0
10007a68:	83 c3 08             	add    ebx,0x8
10007a6b:	33 84 24 58 10 00 00 	xor    eax,DWORD PTR [esp+0x1058]
10007a72:	89 c7                	mov    edi,eax
10007a74:	c1 ef 06             	shr    edi,0x6
10007a77:	89 c5                	mov    ebp,eax
10007a79:	c1 ed 0e             	shr    ebp,0xe
10007a7c:	89 c2                	mov    edx,eax
10007a7e:	c1 ea 16             	shr    edx,0x16
10007a81:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10007a88:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007a8e:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007a94:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007a9a:	81 e2 fc 03 00 00    	and    edx,0x3fc
10007aa0:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10007aa4:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10007aab:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10007ab2:	03 94 34 58 0c 00 00 	add    edx,DWORD PTR [esp+esi*1+0xc58]
10007ab9:	33 94 24 5c 10 00 00 	xor    edx,DWORD PTR [esp+0x105c]
10007ac0:	31 ca                	xor    edx,ecx
10007ac2:	89 d5                	mov    ebp,edx
10007ac4:	c1 ed 06             	shr    ebp,0x6
10007ac7:	89 d6                	mov    esi,edx
10007ac9:	c1 ee 0e             	shr    esi,0xe
10007acc:	89 d1                	mov    ecx,edx
10007ace:	c1 e9 16             	shr    ecx,0x16
10007ad1:	8d 3c 95 00 00 00 00 	lea    edi,[edx*4+0x0]
10007ad8:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007ade:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007ae4:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007aea:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10007af0:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10007af4:	03 8c 34 58 04 00 00 	add    ecx,DWORD PTR [esp+esi*1+0x458]
10007afb:	33 8c 2c 58 08 00 00 	xor    ecx,DWORD PTR [esp+ebp*1+0x858]
10007b02:	33 84 24 60 10 00 00 	xor    eax,DWORD PTR [esp+0x1060]
10007b09:	03 8c 3c 58 0c 00 00 	add    ecx,DWORD PTR [esp+edi*1+0xc58]
10007b10:	31 c8                	xor    eax,ecx
10007b12:	89 c7                	mov    edi,eax
10007b14:	c1 ef 06             	shr    edi,0x6
10007b17:	89 c5                	mov    ebp,eax
10007b19:	c1 ed 0e             	shr    ebp,0xe
10007b1c:	89 c1                	mov    ecx,eax
10007b1e:	c1 e9 16             	shr    ecx,0x16
10007b21:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10007b28:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007b2e:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007b34:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007b3a:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10007b40:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10007b44:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10007b4b:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10007b52:	33 94 24 64 10 00 00 	xor    edx,DWORD PTR [esp+0x1064]
10007b59:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10007b60:	31 d1                	xor    ecx,edx
10007b62:	89 cd                	mov    ebp,ecx
10007b64:	c1 ed 06             	shr    ebp,0x6
10007b67:	89 ce                	mov    esi,ecx
10007b69:	c1 ee 0e             	shr    esi,0xe
10007b6c:	89 ca                	mov    edx,ecx
10007b6e:	c1 ea 16             	shr    edx,0x16
10007b71:	8d 3c 8d 00 00 00 00 	lea    edi,[ecx*4+0x0]
10007b78:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007b7e:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007b84:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007b8a:	81 e2 fc 03 00 00    	and    edx,0x3fc
10007b90:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10007b94:	03 94 34 58 04 00 00 	add    edx,DWORD PTR [esp+esi*1+0x458]
10007b9b:	33 94 2c 58 08 00 00 	xor    edx,DWORD PTR [esp+ebp*1+0x858]
10007ba2:	33 84 24 68 10 00 00 	xor    eax,DWORD PTR [esp+0x1068]
10007ba9:	89 d6                	mov    esi,edx
10007bab:	03 b4 3c 58 0c 00 00 	add    esi,DWORD PTR [esp+edi*1+0xc58]
10007bb2:	31 c6                	xor    esi,eax
10007bb4:	89 f2                	mov    edx,esi
10007bb6:	c1 ea 06             	shr    edx,0x6
10007bb9:	89 f5                	mov    ebp,esi
10007bbb:	c1 ed 0e             	shr    ebp,0xe
10007bbe:	89 f0                	mov    eax,esi
10007bc0:	c1 e8 16             	shr    eax,0x16
10007bc3:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
10007bca:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007bd0:	81 e2 fc 03 00 00    	and    edx,0x3fc
10007bd6:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007bdc:	25 fc 03 00 00       	and    eax,0x3fc
10007be1:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10007be5:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
10007bec:	33 84 14 58 08 00 00 	xor    eax,DWORD PTR [esp+edx*1+0x858]
10007bf3:	33 8c 24 6c 10 00 00 	xor    ecx,DWORD PTR [esp+0x106c]
10007bfa:	03 84 3c 58 0c 00 00 	add    eax,DWORD PTR [esp+edi*1+0xc58]
10007c01:	31 c8                	xor    eax,ecx
10007c03:	89 c7                	mov    edi,eax
10007c05:	c1 ef 06             	shr    edi,0x6
10007c08:	89 c5                	mov    ebp,eax
10007c0a:	c1 ed 0e             	shr    ebp,0xe
10007c0d:	89 c2                	mov    edx,eax
10007c0f:	c1 ea 16             	shr    edx,0x16
10007c12:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
10007c19:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10007c1f:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007c25:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007c2b:	81 e2 fc 03 00 00    	and    edx,0x3fc
10007c31:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10007c35:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10007c3c:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10007c43:	33 b4 24 70 10 00 00 	xor    esi,DWORD PTR [esp+0x1070]
10007c4a:	03 94 0c 58 0c 00 00 	add    edx,DWORD PTR [esp+ecx*1+0xc58]
10007c51:	31 f2                	xor    edx,esi
10007c53:	89 d7                	mov    edi,edx
10007c55:	c1 ef 06             	shr    edi,0x6
10007c58:	89 d5                	mov    ebp,edx
10007c5a:	c1 ed 0e             	shr    ebp,0xe
10007c5d:	89 d1                	mov    ecx,edx
10007c5f:	c1 e9 16             	shr    ecx,0x16
10007c62:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10007c69:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007c6f:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007c75:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007c7b:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10007c81:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10007c85:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10007c8c:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10007c93:	33 84 24 74 10 00 00 	xor    eax,DWORD PTR [esp+0x1074]
10007c9a:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10007ca1:	31 c8                	xor    eax,ecx
10007ca3:	89 c7                	mov    edi,eax
10007ca5:	c1 ef 06             	shr    edi,0x6
10007ca8:	89 c5                	mov    ebp,eax
10007caa:	c1 ed 0e             	shr    ebp,0xe
10007cad:	89 c1                	mov    ecx,eax
10007caf:	c1 e9 16             	shr    ecx,0x16
10007cb2:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10007cb9:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007cbf:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007cc5:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007ccb:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10007cd1:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10007cd5:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10007cdc:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10007ce3:	33 94 24 78 10 00 00 	xor    edx,DWORD PTR [esp+0x1078]
10007cea:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10007cf1:	31 ca                	xor    edx,ecx
10007cf3:	89 d7                	mov    edi,edx
10007cf5:	c1 ef 06             	shr    edi,0x6
10007cf8:	89 d5                	mov    ebp,edx
10007cfa:	c1 ed 0e             	shr    ebp,0xe
10007cfd:	89 d1                	mov    ecx,edx
10007cff:	c1 e9 16             	shr    ecx,0x16
10007d02:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10007d09:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007d0f:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007d15:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007d1b:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10007d21:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10007d25:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10007d2c:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10007d33:	33 84 24 7c 10 00 00 	xor    eax,DWORD PTR [esp+0x107c]
10007d3a:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10007d41:	31 c8                	xor    eax,ecx
10007d43:	89 c7                	mov    edi,eax
10007d45:	c1 ef 06             	shr    edi,0x6
10007d48:	89 c5                	mov    ebp,eax
10007d4a:	c1 ed 0e             	shr    ebp,0xe
10007d4d:	89 c1                	mov    ecx,eax
10007d4f:	c1 e9 16             	shr    ecx,0x16
10007d52:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10007d59:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007d5f:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007d65:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007d6b:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10007d71:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10007d75:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10007d7c:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10007d83:	33 94 24 80 10 00 00 	xor    edx,DWORD PTR [esp+0x1080]
10007d8a:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10007d91:	31 ca                	xor    edx,ecx
10007d93:	89 d7                	mov    edi,edx
10007d95:	c1 ef 06             	shr    edi,0x6
10007d98:	89 d5                	mov    ebp,edx
10007d9a:	c1 ed 0e             	shr    ebp,0xe
10007d9d:	89 d1                	mov    ecx,edx
10007d9f:	c1 e9 16             	shr    ecx,0x16
10007da2:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10007da9:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007daf:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007db5:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007dbb:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10007dc1:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10007dc5:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10007dcc:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10007dd3:	33 84 24 84 10 00 00 	xor    eax,DWORD PTR [esp+0x1084]
10007dda:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10007de1:	31 c8                	xor    eax,ecx
10007de3:	89 c7                	mov    edi,eax
10007de5:	c1 ef 06             	shr    edi,0x6
10007de8:	89 c5                	mov    ebp,eax
10007dea:	c1 ed 0e             	shr    ebp,0xe
10007ded:	89 c1                	mov    ecx,eax
10007def:	c1 e9 16             	shr    ecx,0x16
10007df2:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10007df9:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007dff:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007e05:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007e0b:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10007e11:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10007e15:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10007e1c:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10007e23:	33 94 24 88 10 00 00 	xor    edx,DWORD PTR [esp+0x1088]
10007e2a:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10007e31:	31 ca                	xor    edx,ecx
10007e33:	89 d7                	mov    edi,edx
10007e35:	c1 ef 06             	shr    edi,0x6
10007e38:	89 d5                	mov    ebp,edx
10007e3a:	c1 ed 0e             	shr    ebp,0xe
10007e3d:	89 d1                	mov    ecx,edx
10007e3f:	c1 e9 16             	shr    ecx,0x16
10007e42:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10007e49:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007e4f:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007e55:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007e5b:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10007e61:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10007e65:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10007e6c:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10007e73:	33 84 24 8c 10 00 00 	xor    eax,DWORD PTR [esp+0x108c]
10007e7a:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10007e81:	31 c8                	xor    eax,ecx
10007e83:	89 c7                	mov    edi,eax
10007e85:	c1 ef 06             	shr    edi,0x6
10007e88:	89 c5                	mov    ebp,eax
10007e8a:	c1 ed 0e             	shr    ebp,0xe
10007e8d:	89 c1                	mov    ecx,eax
10007e8f:	c1 e9 16             	shr    ecx,0x16
10007e92:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10007e99:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007e9f:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007ea5:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007eab:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10007eb1:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10007eb5:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10007ebc:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10007ec3:	33 94 24 90 10 00 00 	xor    edx,DWORD PTR [esp+0x1090]
10007eca:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10007ed1:	31 ca                	xor    edx,ecx
10007ed3:	89 d7                	mov    edi,edx
10007ed5:	c1 ef 06             	shr    edi,0x6
10007ed8:	89 d5                	mov    ebp,edx
10007eda:	c1 ed 0e             	shr    ebp,0xe
10007edd:	89 d6                	mov    esi,edx
10007edf:	c1 ee 16             	shr    esi,0x16
10007ee2:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
10007ee9:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10007eef:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007ef5:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007efb:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007f01:	8b 74 34 58          	mov    esi,DWORD PTR [esp+esi*1+0x58]
10007f05:	03 b4 2c 58 04 00 00 	add    esi,DWORD PTR [esp+ebp*1+0x458]
10007f0c:	33 b4 3c 58 08 00 00 	xor    esi,DWORD PTR [esp+edi*1+0x858]
10007f13:	33 84 24 94 10 00 00 	xor    eax,DWORD PTR [esp+0x1094]
10007f1a:	03 b4 0c 58 0c 00 00 	add    esi,DWORD PTR [esp+ecx*1+0xc58]
10007f21:	31 f0                	xor    eax,esi
10007f23:	89 c5                	mov    ebp,eax
10007f25:	c1 ed 06             	shr    ebp,0x6
10007f28:	89 c1                	mov    ecx,eax
10007f2a:	c1 e9 0e             	shr    ecx,0xe
10007f2d:	89 c6                	mov    esi,eax
10007f2f:	c1 ee 16             	shr    esi,0x16
10007f32:	8d 3c 85 00 00 00 00 	lea    edi,[eax*4+0x0]
10007f39:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007f3f:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007f45:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10007f4b:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007f51:	8b 74 34 58          	mov    esi,DWORD PTR [esp+esi*1+0x58]
10007f55:	03 b4 0c 58 04 00 00 	add    esi,DWORD PTR [esp+ecx*1+0x458]
10007f5c:	33 b4 2c 58 08 00 00 	xor    esi,DWORD PTR [esp+ebp*1+0x858]
10007f63:	33 94 24 98 10 00 00 	xor    edx,DWORD PTR [esp+0x1098]
10007f6a:	03 b4 3c 58 0c 00 00 	add    esi,DWORD PTR [esp+edi*1+0xc58]
10007f71:	89 f1                	mov    ecx,esi
10007f73:	31 d1                	xor    ecx,edx
10007f75:	33 84 24 9c 10 00 00 	xor    eax,DWORD PTR [esp+0x109c]
10007f7c:	89 43 f8             	mov    DWORD PTR [ebx-0x8],eax
10007f7f:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
10007f82:	8d b4 24 a0 10 00 00 	lea    esi,[esp+0x10a0]
10007f89:	39 f3                	cmp    ebx,esi
10007f8b:	0f 85 d7 fa ff ff    	jne    10007a68 <_crypt_blowfish_rn+0x11fe>
10007f91:	8d 5c 24 58          	lea    ebx,[esp+0x58]
10007f95:	83 c3 08             	add    ebx,0x8
10007f98:	33 84 24 58 10 00 00 	xor    eax,DWORD PTR [esp+0x1058]
10007f9f:	89 c7                	mov    edi,eax
10007fa1:	c1 ef 06             	shr    edi,0x6
10007fa4:	89 c5                	mov    ebp,eax
10007fa6:	c1 ed 0e             	shr    ebp,0xe
10007fa9:	89 c2                	mov    edx,eax
10007fab:	c1 ea 16             	shr    edx,0x16
10007fae:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10007fb5:	81 e6 fc 03 00 00    	and    esi,0x3fc
10007fbb:	81 e7 fc 03 00 00    	and    edi,0x3fc
10007fc1:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10007fc7:	81 e2 fc 03 00 00    	and    edx,0x3fc
10007fcd:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10007fd1:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10007fd8:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10007fdf:	03 94 34 58 0c 00 00 	add    edx,DWORD PTR [esp+esi*1+0xc58]
10007fe6:	33 94 24 5c 10 00 00 	xor    edx,DWORD PTR [esp+0x105c]
10007fed:	31 ca                	xor    edx,ecx
10007fef:	89 d7                	mov    edi,edx
10007ff1:	c1 ef 06             	shr    edi,0x6
10007ff4:	89 d5                	mov    ebp,edx
10007ff6:	c1 ed 0e             	shr    ebp,0xe
10007ff9:	89 d1                	mov    ecx,edx
10007ffb:	c1 e9 16             	shr    ecx,0x16
10007ffe:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10008005:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000800b:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008011:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008017:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000801d:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10008021:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10008028:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
1000802f:	33 84 24 60 10 00 00 	xor    eax,DWORD PTR [esp+0x1060]
10008036:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
1000803d:	31 c1                	xor    ecx,eax
1000803f:	89 cd                	mov    ebp,ecx
10008041:	c1 ed 06             	shr    ebp,0x6
10008044:	89 c8                	mov    eax,ecx
10008046:	c1 e8 0e             	shr    eax,0xe
10008049:	89 ce                	mov    esi,ecx
1000804b:	c1 ee 16             	shr    esi,0x16
1000804e:	8d 3c 8d 00 00 00 00 	lea    edi,[ecx*4+0x0]
10008055:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000805b:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008061:	25 fc 03 00 00       	and    eax,0x3fc
10008066:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000806c:	8b 74 34 58          	mov    esi,DWORD PTR [esp+esi*1+0x58]
10008070:	03 b4 04 58 04 00 00 	add    esi,DWORD PTR [esp+eax*1+0x458]
10008077:	33 b4 2c 58 08 00 00 	xor    esi,DWORD PTR [esp+ebp*1+0x858]
1000807e:	33 94 24 64 10 00 00 	xor    edx,DWORD PTR [esp+0x1064]
10008085:	03 b4 3c 58 0c 00 00 	add    esi,DWORD PTR [esp+edi*1+0xc58]
1000808c:	31 d6                	xor    esi,edx
1000808e:	89 f5                	mov    ebp,esi
10008090:	c1 ed 06             	shr    ebp,0x6
10008093:	89 f2                	mov    edx,esi
10008095:	c1 ea 0e             	shr    edx,0xe
10008098:	89 f0                	mov    eax,esi
1000809a:	c1 e8 16             	shr    eax,0x16
1000809d:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
100080a4:	81 e7 fc 03 00 00    	and    edi,0x3fc
100080aa:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100080b0:	81 e2 fc 03 00 00    	and    edx,0x3fc
100080b6:	25 fc 03 00 00       	and    eax,0x3fc
100080bb:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
100080bf:	03 84 14 58 04 00 00 	add    eax,DWORD PTR [esp+edx*1+0x458]
100080c6:	33 84 2c 58 08 00 00 	xor    eax,DWORD PTR [esp+ebp*1+0x858]
100080cd:	33 8c 24 68 10 00 00 	xor    ecx,DWORD PTR [esp+0x1068]
100080d4:	03 84 3c 58 0c 00 00 	add    eax,DWORD PTR [esp+edi*1+0xc58]
100080db:	31 c1                	xor    ecx,eax
100080dd:	89 ca                	mov    edx,ecx
100080df:	c1 ea 06             	shr    edx,0x6
100080e2:	89 cd                	mov    ebp,ecx
100080e4:	c1 ed 0e             	shr    ebp,0xe
100080e7:	89 c8                	mov    eax,ecx
100080e9:	c1 e8 16             	shr    eax,0x16
100080ec:	8d 3c 8d 00 00 00 00 	lea    edi,[ecx*4+0x0]
100080f3:	81 e7 fc 03 00 00    	and    edi,0x3fc
100080f9:	81 e2 fc 03 00 00    	and    edx,0x3fc
100080ff:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008105:	25 fc 03 00 00       	and    eax,0x3fc
1000810a:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
1000810e:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
10008115:	33 84 14 58 08 00 00 	xor    eax,DWORD PTR [esp+edx*1+0x858]
1000811c:	33 b4 24 6c 10 00 00 	xor    esi,DWORD PTR [esp+0x106c]
10008123:	03 84 3c 58 0c 00 00 	add    eax,DWORD PTR [esp+edi*1+0xc58]
1000812a:	31 f0                	xor    eax,esi
1000812c:	89 c7                	mov    edi,eax
1000812e:	c1 ef 06             	shr    edi,0x6
10008131:	89 c5                	mov    ebp,eax
10008133:	c1 ed 0e             	shr    ebp,0xe
10008136:	89 c2                	mov    edx,eax
10008138:	c1 ea 16             	shr    edx,0x16
1000813b:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10008142:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008148:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000814e:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008154:	81 e2 fc 03 00 00    	and    edx,0x3fc
1000815a:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
1000815e:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10008165:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
1000816c:	33 8c 24 70 10 00 00 	xor    ecx,DWORD PTR [esp+0x1070]
10008173:	03 94 34 58 0c 00 00 	add    edx,DWORD PTR [esp+esi*1+0xc58]
1000817a:	31 ca                	xor    edx,ecx
1000817c:	89 d7                	mov    edi,edx
1000817e:	c1 ef 06             	shr    edi,0x6
10008181:	89 d5                	mov    ebp,edx
10008183:	c1 ed 0e             	shr    ebp,0xe
10008186:	89 d1                	mov    ecx,edx
10008188:	c1 e9 16             	shr    ecx,0x16
1000818b:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10008192:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008198:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000819e:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100081a4:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100081aa:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
100081ae:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
100081b5:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
100081bc:	33 84 24 74 10 00 00 	xor    eax,DWORD PTR [esp+0x1074]
100081c3:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
100081ca:	31 c8                	xor    eax,ecx
100081cc:	89 c7                	mov    edi,eax
100081ce:	c1 ef 06             	shr    edi,0x6
100081d1:	89 c5                	mov    ebp,eax
100081d3:	c1 ed 0e             	shr    ebp,0xe
100081d6:	89 c1                	mov    ecx,eax
100081d8:	c1 e9 16             	shr    ecx,0x16
100081db:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
100081e2:	81 e6 fc 03 00 00    	and    esi,0x3fc
100081e8:	81 e7 fc 03 00 00    	and    edi,0x3fc
100081ee:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100081f4:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100081fa:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
100081fe:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10008205:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
1000820c:	33 94 24 78 10 00 00 	xor    edx,DWORD PTR [esp+0x1078]
10008213:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
1000821a:	31 ca                	xor    edx,ecx
1000821c:	89 d7                	mov    edi,edx
1000821e:	c1 ef 06             	shr    edi,0x6
10008221:	89 d5                	mov    ebp,edx
10008223:	c1 ed 0e             	shr    ebp,0xe
10008226:	89 d1                	mov    ecx,edx
10008228:	c1 e9 16             	shr    ecx,0x16
1000822b:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10008232:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008238:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000823e:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008244:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000824a:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
1000824e:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10008255:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
1000825c:	33 84 24 7c 10 00 00 	xor    eax,DWORD PTR [esp+0x107c]
10008263:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
1000826a:	31 c8                	xor    eax,ecx
1000826c:	89 c7                	mov    edi,eax
1000826e:	c1 ef 06             	shr    edi,0x6
10008271:	89 c5                	mov    ebp,eax
10008273:	c1 ed 0e             	shr    ebp,0xe
10008276:	89 c1                	mov    ecx,eax
10008278:	c1 e9 16             	shr    ecx,0x16
1000827b:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10008282:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008288:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000828e:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008294:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000829a:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
1000829e:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
100082a5:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
100082ac:	33 94 24 80 10 00 00 	xor    edx,DWORD PTR [esp+0x1080]
100082b3:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
100082ba:	31 ca                	xor    edx,ecx
100082bc:	89 d7                	mov    edi,edx
100082be:	c1 ef 06             	shr    edi,0x6
100082c1:	89 d5                	mov    ebp,edx
100082c3:	c1 ed 0e             	shr    ebp,0xe
100082c6:	89 d1                	mov    ecx,edx
100082c8:	c1 e9 16             	shr    ecx,0x16
100082cb:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
100082d2:	81 e6 fc 03 00 00    	and    esi,0x3fc
100082d8:	81 e7 fc 03 00 00    	and    edi,0x3fc
100082de:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100082e4:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100082ea:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
100082ee:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
100082f5:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
100082fc:	33 84 24 84 10 00 00 	xor    eax,DWORD PTR [esp+0x1084]
10008303:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
1000830a:	31 c8                	xor    eax,ecx
1000830c:	89 c7                	mov    edi,eax
1000830e:	c1 ef 06             	shr    edi,0x6
10008311:	89 c5                	mov    ebp,eax
10008313:	c1 ed 0e             	shr    ebp,0xe
10008316:	89 c1                	mov    ecx,eax
10008318:	c1 e9 16             	shr    ecx,0x16
1000831b:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10008322:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008328:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000832e:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008334:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000833a:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
1000833e:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10008345:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
1000834c:	33 94 24 88 10 00 00 	xor    edx,DWORD PTR [esp+0x1088]
10008353:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
1000835a:	31 ca                	xor    edx,ecx
1000835c:	89 d7                	mov    edi,edx
1000835e:	c1 ef 06             	shr    edi,0x6
10008361:	89 d5                	mov    ebp,edx
10008363:	c1 ed 0e             	shr    ebp,0xe
10008366:	89 d1                	mov    ecx,edx
10008368:	c1 e9 16             	shr    ecx,0x16
1000836b:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10008372:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008378:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000837e:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008384:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000838a:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
1000838e:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10008395:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
1000839c:	33 84 24 8c 10 00 00 	xor    eax,DWORD PTR [esp+0x108c]
100083a3:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
100083aa:	31 c8                	xor    eax,ecx
100083ac:	89 c7                	mov    edi,eax
100083ae:	c1 ef 06             	shr    edi,0x6
100083b1:	89 c5                	mov    ebp,eax
100083b3:	c1 ed 0e             	shr    ebp,0xe
100083b6:	89 c1                	mov    ecx,eax
100083b8:	c1 e9 16             	shr    ecx,0x16
100083bb:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
100083c2:	81 e6 fc 03 00 00    	and    esi,0x3fc
100083c8:	81 e7 fc 03 00 00    	and    edi,0x3fc
100083ce:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100083d4:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100083da:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
100083de:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
100083e5:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
100083ec:	33 94 24 90 10 00 00 	xor    edx,DWORD PTR [esp+0x1090]
100083f3:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
100083fa:	31 ca                	xor    edx,ecx
100083fc:	89 d7                	mov    edi,edx
100083fe:	c1 ef 06             	shr    edi,0x6
10008401:	89 d5                	mov    ebp,edx
10008403:	c1 ed 0e             	shr    ebp,0xe
10008406:	89 d6                	mov    esi,edx
10008408:	c1 ee 16             	shr    esi,0x16
1000840b:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
10008412:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10008418:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000841e:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008424:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000842a:	8b 74 34 58          	mov    esi,DWORD PTR [esp+esi*1+0x58]
1000842e:	03 b4 2c 58 04 00 00 	add    esi,DWORD PTR [esp+ebp*1+0x458]
10008435:	33 b4 3c 58 08 00 00 	xor    esi,DWORD PTR [esp+edi*1+0x858]
1000843c:	33 84 24 94 10 00 00 	xor    eax,DWORD PTR [esp+0x1094]
10008443:	03 b4 0c 58 0c 00 00 	add    esi,DWORD PTR [esp+ecx*1+0xc58]
1000844a:	31 f0                	xor    eax,esi
1000844c:	89 c5                	mov    ebp,eax
1000844e:	c1 ed 06             	shr    ebp,0x6
10008451:	89 c1                	mov    ecx,eax
10008453:	c1 e9 0e             	shr    ecx,0xe
10008456:	89 c6                	mov    esi,eax
10008458:	c1 ee 16             	shr    esi,0x16
1000845b:	8d 3c 85 00 00 00 00 	lea    edi,[eax*4+0x0]
10008462:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008468:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000846e:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10008474:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000847a:	8b 74 34 58          	mov    esi,DWORD PTR [esp+esi*1+0x58]
1000847e:	03 b4 0c 58 04 00 00 	add    esi,DWORD PTR [esp+ecx*1+0x458]
10008485:	33 b4 2c 58 08 00 00 	xor    esi,DWORD PTR [esp+ebp*1+0x858]
1000848c:	33 94 24 98 10 00 00 	xor    edx,DWORD PTR [esp+0x1098]
10008493:	03 b4 3c 58 0c 00 00 	add    esi,DWORD PTR [esp+edi*1+0xc58]
1000849a:	89 f1                	mov    ecx,esi
1000849c:	31 d1                	xor    ecx,edx
1000849e:	33 84 24 9c 10 00 00 	xor    eax,DWORD PTR [esp+0x109c]
100084a5:	89 43 f8             	mov    DWORD PTR [ebx-0x8],eax
100084a8:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
100084ab:	8d 94 24 58 10 00 00 	lea    edx,[esp+0x1058]
100084b2:	39 d3                	cmp    ebx,edx
100084b4:	0f 85 db fa ff ff    	jne    10007f95 <_crypt_blowfish_rn+0x172b>
100084ba:	8b 94 24 e8 10 00 00 	mov    edx,DWORD PTR [esp+0x10e8]
100084c1:	8b 84 24 ec 10 00 00 	mov    eax,DWORD PTR [esp+0x10ec]
100084c8:	8b 9c 24 f0 10 00 00 	mov    ebx,DWORD PTR [esp+0x10f0]
100084cf:	8b 8c 24 f4 10 00 00 	mov    ecx,DWORD PTR [esp+0x10f4]
100084d6:	31 94 24 58 10 00 00 	xor    DWORD PTR [esp+0x1058],edx
100084dd:	31 84 24 5c 10 00 00 	xor    DWORD PTR [esp+0x105c],eax
100084e4:	31 9c 24 60 10 00 00 	xor    DWORD PTR [esp+0x1060],ebx
100084eb:	31 8c 24 64 10 00 00 	xor    DWORD PTR [esp+0x1064],ecx
100084f2:	31 94 24 68 10 00 00 	xor    DWORD PTR [esp+0x1068],edx
100084f9:	31 84 24 6c 10 00 00 	xor    DWORD PTR [esp+0x106c],eax
10008500:	31 9c 24 70 10 00 00 	xor    DWORD PTR [esp+0x1070],ebx
10008507:	31 8c 24 74 10 00 00 	xor    DWORD PTR [esp+0x1074],ecx
1000850e:	31 94 24 78 10 00 00 	xor    DWORD PTR [esp+0x1078],edx
10008515:	31 84 24 7c 10 00 00 	xor    DWORD PTR [esp+0x107c],eax
1000851c:	31 9c 24 80 10 00 00 	xor    DWORD PTR [esp+0x1080],ebx
10008523:	31 8c 24 84 10 00 00 	xor    DWORD PTR [esp+0x1084],ecx
1000852a:	31 94 24 88 10 00 00 	xor    DWORD PTR [esp+0x1088],edx
10008531:	31 84 24 8c 10 00 00 	xor    DWORD PTR [esp+0x108c],eax
10008538:	31 9c 24 90 10 00 00 	xor    DWORD PTR [esp+0x1090],ebx
1000853f:	31 8c 24 94 10 00 00 	xor    DWORD PTR [esp+0x1094],ecx
10008546:	31 94 24 98 10 00 00 	xor    DWORD PTR [esp+0x1098],edx
1000854d:	31 84 24 9c 10 00 00 	xor    DWORD PTR [esp+0x109c],eax
10008554:	8d 9c 24 58 10 00 00 	lea    ebx,[esp+0x1058]
1000855b:	be 00 00 00 00       	mov    esi,0x0
10008560:	b8 00 00 00 00       	mov    eax,0x0
10008565:	83 c3 08             	add    ebx,0x8
10008568:	33 84 24 58 10 00 00 	xor    eax,DWORD PTR [esp+0x1058]
1000856f:	89 c7                	mov    edi,eax
10008571:	c1 ef 06             	shr    edi,0x6
10008574:	89 c5                	mov    ebp,eax
10008576:	c1 ed 0e             	shr    ebp,0xe
10008579:	89 c2                	mov    edx,eax
1000857b:	c1 ea 16             	shr    edx,0x16
1000857e:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
10008585:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000858b:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008591:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008597:	81 e2 fc 03 00 00    	and    edx,0x3fc
1000859d:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
100085a1:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
100085a8:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
100085af:	03 94 0c 58 0c 00 00 	add    edx,DWORD PTR [esp+ecx*1+0xc58]
100085b6:	33 94 24 5c 10 00 00 	xor    edx,DWORD PTR [esp+0x105c]
100085bd:	31 d6                	xor    esi,edx
100085bf:	89 f7                	mov    edi,esi
100085c1:	c1 ef 06             	shr    edi,0x6
100085c4:	89 f5                	mov    ebp,esi
100085c6:	c1 ed 0e             	shr    ebp,0xe
100085c9:	89 f1                	mov    ecx,esi
100085cb:	c1 e9 16             	shr    ecx,0x16
100085ce:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
100085d5:	81 e2 fc 03 00 00    	and    edx,0x3fc
100085db:	81 e7 fc 03 00 00    	and    edi,0x3fc
100085e1:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100085e7:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100085ed:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
100085f1:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
100085f8:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
100085ff:	33 84 24 60 10 00 00 	xor    eax,DWORD PTR [esp+0x1060]
10008606:	03 8c 14 58 0c 00 00 	add    ecx,DWORD PTR [esp+edx*1+0xc58]
1000860d:	31 c8                	xor    eax,ecx
1000860f:	89 c5                	mov    ebp,eax
10008611:	c1 ed 06             	shr    ebp,0x6
10008614:	89 c2                	mov    edx,eax
10008616:	c1 ea 0e             	shr    edx,0xe
10008619:	89 c1                	mov    ecx,eax
1000861b:	c1 e9 16             	shr    ecx,0x16
1000861e:	8d 3c 85 00 00 00 00 	lea    edi,[eax*4+0x0]
10008625:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000862b:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008631:	81 e2 fc 03 00 00    	and    edx,0x3fc
10008637:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000863d:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10008641:	03 8c 14 58 04 00 00 	add    ecx,DWORD PTR [esp+edx*1+0x458]
10008648:	33 8c 2c 58 08 00 00 	xor    ecx,DWORD PTR [esp+ebp*1+0x858]
1000864f:	33 b4 24 64 10 00 00 	xor    esi,DWORD PTR [esp+0x1064]
10008656:	89 ca                	mov    edx,ecx
10008658:	03 94 3c 58 0c 00 00 	add    edx,DWORD PTR [esp+edi*1+0xc58]
1000865f:	31 d6                	xor    esi,edx
10008661:	89 f7                	mov    edi,esi
10008663:	c1 ef 06             	shr    edi,0x6
10008666:	89 f5                	mov    ebp,esi
10008668:	c1 ed 0e             	shr    ebp,0xe
1000866b:	89 f1                	mov    ecx,esi
1000866d:	c1 e9 16             	shr    ecx,0x16
10008670:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
10008677:	81 e2 fc 03 00 00    	and    edx,0x3fc
1000867d:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008683:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008689:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000868f:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10008693:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
1000869a:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
100086a1:	33 84 24 68 10 00 00 	xor    eax,DWORD PTR [esp+0x1068]
100086a8:	03 8c 14 58 0c 00 00 	add    ecx,DWORD PTR [esp+edx*1+0xc58]
100086af:	31 c1                	xor    ecx,eax
100086b1:	89 cd                	mov    ebp,ecx
100086b3:	c1 ed 06             	shr    ebp,0x6
100086b6:	89 ca                	mov    edx,ecx
100086b8:	c1 ea 0e             	shr    edx,0xe
100086bb:	89 c8                	mov    eax,ecx
100086bd:	c1 e8 16             	shr    eax,0x16
100086c0:	8d 3c 8d 00 00 00 00 	lea    edi,[ecx*4+0x0]
100086c7:	81 e7 fc 03 00 00    	and    edi,0x3fc
100086cd:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100086d3:	81 e2 fc 03 00 00    	and    edx,0x3fc
100086d9:	25 fc 03 00 00       	and    eax,0x3fc
100086de:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
100086e2:	03 84 14 58 04 00 00 	add    eax,DWORD PTR [esp+edx*1+0x458]
100086e9:	33 84 2c 58 08 00 00 	xor    eax,DWORD PTR [esp+ebp*1+0x858]
100086f0:	33 b4 24 6c 10 00 00 	xor    esi,DWORD PTR [esp+0x106c]
100086f7:	03 84 3c 58 0c 00 00 	add    eax,DWORD PTR [esp+edi*1+0xc58]
100086fe:	89 c2                	mov    edx,eax
10008700:	31 f2                	xor    edx,esi
10008702:	89 d5                	mov    ebp,edx
10008704:	c1 ed 06             	shr    ebp,0x6
10008707:	89 d6                	mov    esi,edx
10008709:	c1 ee 0e             	shr    esi,0xe
1000870c:	89 d0                	mov    eax,edx
1000870e:	c1 e8 16             	shr    eax,0x16
10008711:	8d 3c 95 00 00 00 00 	lea    edi,[edx*4+0x0]
10008718:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000871e:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008724:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000872a:	25 fc 03 00 00       	and    eax,0x3fc
1000872f:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10008733:	03 84 34 58 04 00 00 	add    eax,DWORD PTR [esp+esi*1+0x458]
1000873a:	33 84 2c 58 08 00 00 	xor    eax,DWORD PTR [esp+ebp*1+0x858]
10008741:	33 8c 24 70 10 00 00 	xor    ecx,DWORD PTR [esp+0x1070]
10008748:	03 84 3c 58 0c 00 00 	add    eax,DWORD PTR [esp+edi*1+0xc58]
1000874f:	89 c6                	mov    esi,eax
10008751:	31 ce                	xor    esi,ecx
10008753:	89 f7                	mov    edi,esi
10008755:	c1 ef 06             	shr    edi,0x6
10008758:	89 f5                	mov    ebp,esi
1000875a:	c1 ed 0e             	shr    ebp,0xe
1000875d:	89 f0                	mov    eax,esi
1000875f:	c1 e8 16             	shr    eax,0x16
10008762:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
10008769:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000876f:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008775:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000877b:	25 fc 03 00 00       	and    eax,0x3fc
10008780:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10008784:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
1000878b:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
10008792:	33 94 24 74 10 00 00 	xor    edx,DWORD PTR [esp+0x1074]
10008799:	03 84 0c 58 0c 00 00 	add    eax,DWORD PTR [esp+ecx*1+0xc58]
100087a0:	31 c2                	xor    edx,eax
100087a2:	89 d7                	mov    edi,edx
100087a4:	c1 ef 06             	shr    edi,0x6
100087a7:	89 d5                	mov    ebp,edx
100087a9:	c1 ed 0e             	shr    ebp,0xe
100087ac:	89 d0                	mov    eax,edx
100087ae:	c1 e8 16             	shr    eax,0x16
100087b1:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
100087b8:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100087be:	81 e7 fc 03 00 00    	and    edi,0x3fc
100087c4:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100087ca:	25 fc 03 00 00       	and    eax,0x3fc
100087cf:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
100087d3:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
100087da:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
100087e1:	33 b4 24 78 10 00 00 	xor    esi,DWORD PTR [esp+0x1078]
100087e8:	03 84 0c 58 0c 00 00 	add    eax,DWORD PTR [esp+ecx*1+0xc58]
100087ef:	31 c6                	xor    esi,eax
100087f1:	89 f7                	mov    edi,esi
100087f3:	c1 ef 06             	shr    edi,0x6
100087f6:	89 f5                	mov    ebp,esi
100087f8:	c1 ed 0e             	shr    ebp,0xe
100087fb:	89 f0                	mov    eax,esi
100087fd:	c1 e8 16             	shr    eax,0x16
10008800:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
10008807:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000880d:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008813:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008819:	25 fc 03 00 00       	and    eax,0x3fc
1000881e:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10008822:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
10008829:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
10008830:	33 94 24 7c 10 00 00 	xor    edx,DWORD PTR [esp+0x107c]
10008837:	03 84 0c 58 0c 00 00 	add    eax,DWORD PTR [esp+ecx*1+0xc58]
1000883e:	31 c2                	xor    edx,eax
10008840:	89 d7                	mov    edi,edx
10008842:	c1 ef 06             	shr    edi,0x6
10008845:	89 d5                	mov    ebp,edx
10008847:	c1 ed 0e             	shr    ebp,0xe
1000884a:	89 d0                	mov    eax,edx
1000884c:	c1 e8 16             	shr    eax,0x16
1000884f:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
10008856:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000885c:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008862:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008868:	25 fc 03 00 00       	and    eax,0x3fc
1000886d:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10008871:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
10008878:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
1000887f:	33 b4 24 80 10 00 00 	xor    esi,DWORD PTR [esp+0x1080]
10008886:	03 84 0c 58 0c 00 00 	add    eax,DWORD PTR [esp+ecx*1+0xc58]
1000888d:	31 c6                	xor    esi,eax
1000888f:	89 f7                	mov    edi,esi
10008891:	c1 ef 06             	shr    edi,0x6
10008894:	89 f5                	mov    ebp,esi
10008896:	c1 ed 0e             	shr    ebp,0xe
10008899:	89 f0                	mov    eax,esi
1000889b:	c1 e8 16             	shr    eax,0x16
1000889e:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
100088a5:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100088ab:	81 e7 fc 03 00 00    	and    edi,0x3fc
100088b1:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100088b7:	25 fc 03 00 00       	and    eax,0x3fc
100088bc:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
100088c0:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
100088c7:	33 84 3c 58 08 00 00 	xor    eax,DWORD PTR [esp+edi*1+0x858]
100088ce:	33 94 24 84 10 00 00 	xor    edx,DWORD PTR [esp+0x1084]
100088d5:	03 84 0c 58 0c 00 00 	add    eax,DWORD PTR [esp+ecx*1+0xc58]
100088dc:	31 d0                	xor    eax,edx
100088de:	89 c7                	mov    edi,eax
100088e0:	c1 ef 06             	shr    edi,0x6
100088e3:	89 c5                	mov    ebp,eax
100088e5:	c1 ed 0e             	shr    ebp,0xe
100088e8:	89 c2                	mov    edx,eax
100088ea:	c1 ea 16             	shr    edx,0x16
100088ed:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
100088f4:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100088fa:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008900:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008906:	81 e2 fc 03 00 00    	and    edx,0x3fc
1000890c:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10008910:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10008917:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
1000891e:	33 b4 24 88 10 00 00 	xor    esi,DWORD PTR [esp+0x1088]
10008925:	03 94 0c 58 0c 00 00 	add    edx,DWORD PTR [esp+ecx*1+0xc58]
1000892c:	31 d6                	xor    esi,edx
1000892e:	89 f7                	mov    edi,esi
10008930:	c1 ef 06             	shr    edi,0x6
10008933:	89 f5                	mov    ebp,esi
10008935:	c1 ed 0e             	shr    ebp,0xe
10008938:	89 f2                	mov    edx,esi
1000893a:	c1 ea 16             	shr    edx,0x16
1000893d:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
10008944:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000894a:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008950:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008956:	81 e2 fc 03 00 00    	and    edx,0x3fc
1000895c:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10008960:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10008967:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
1000896e:	33 84 24 8c 10 00 00 	xor    eax,DWORD PTR [esp+0x108c]
10008975:	03 94 0c 58 0c 00 00 	add    edx,DWORD PTR [esp+ecx*1+0xc58]
1000897c:	31 d0                	xor    eax,edx
1000897e:	89 c7                	mov    edi,eax
10008980:	c1 ef 06             	shr    edi,0x6
10008983:	89 c5                	mov    ebp,eax
10008985:	c1 ed 0e             	shr    ebp,0xe
10008988:	89 c2                	mov    edx,eax
1000898a:	c1 ea 16             	shr    edx,0x16
1000898d:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
10008994:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000899a:	81 e7 fc 03 00 00    	and    edi,0x3fc
100089a0:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100089a6:	81 e2 fc 03 00 00    	and    edx,0x3fc
100089ac:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
100089b0:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
100089b7:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
100089be:	33 b4 24 90 10 00 00 	xor    esi,DWORD PTR [esp+0x1090]
100089c5:	03 94 0c 58 0c 00 00 	add    edx,DWORD PTR [esp+ecx*1+0xc58]
100089cc:	31 d6                	xor    esi,edx
100089ce:	89 f2                	mov    edx,esi
100089d0:	c1 ea 06             	shr    edx,0x6
100089d3:	89 f5                	mov    ebp,esi
100089d5:	c1 ed 0e             	shr    ebp,0xe
100089d8:	89 f1                	mov    ecx,esi
100089da:	c1 e9 16             	shr    ecx,0x16
100089dd:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
100089e4:	81 e7 fc 03 00 00    	and    edi,0x3fc
100089ea:	81 e2 fc 03 00 00    	and    edx,0x3fc
100089f0:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100089f6:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100089fc:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10008a00:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10008a07:	33 8c 14 58 08 00 00 	xor    ecx,DWORD PTR [esp+edx*1+0x858]
10008a0e:	33 84 24 94 10 00 00 	xor    eax,DWORD PTR [esp+0x1094]
10008a15:	03 8c 3c 58 0c 00 00 	add    ecx,DWORD PTR [esp+edi*1+0xc58]
10008a1c:	31 c8                	xor    eax,ecx
10008a1e:	89 c5                	mov    ebp,eax
10008a20:	c1 ed 06             	shr    ebp,0x6
10008a23:	89 c2                	mov    edx,eax
10008a25:	c1 ea 0e             	shr    edx,0xe
10008a28:	89 c1                	mov    ecx,eax
10008a2a:	c1 e9 16             	shr    ecx,0x16
10008a2d:	8d 3c 85 00 00 00 00 	lea    edi,[eax*4+0x0]
10008a34:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008a3a:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008a40:	81 e2 fc 03 00 00    	and    edx,0x3fc
10008a46:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10008a4c:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10008a50:	03 8c 14 58 04 00 00 	add    ecx,DWORD PTR [esp+edx*1+0x458]
10008a57:	33 8c 2c 58 08 00 00 	xor    ecx,DWORD PTR [esp+ebp*1+0x858]
10008a5e:	33 b4 24 98 10 00 00 	xor    esi,DWORD PTR [esp+0x1098]
10008a65:	89 ca                	mov    edx,ecx
10008a67:	03 94 3c 58 0c 00 00 	add    edx,DWORD PTR [esp+edi*1+0xc58]
10008a6e:	31 d6                	xor    esi,edx
10008a70:	33 84 24 9c 10 00 00 	xor    eax,DWORD PTR [esp+0x109c]
10008a77:	89 43 f8             	mov    DWORD PTR [ebx-0x8],eax
10008a7a:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
10008a7d:	8d bc 24 a0 10 00 00 	lea    edi,[esp+0x10a0]
10008a84:	39 fb                	cmp    ebx,edi
10008a86:	0f 85 d9 fa ff ff    	jne    10008565 <_crypt_blowfish_rn+0x1cfb>
10008a8c:	8d 5c 24 58          	lea    ebx,[esp+0x58]
10008a90:	83 c3 08             	add    ebx,0x8
10008a93:	33 84 24 58 10 00 00 	xor    eax,DWORD PTR [esp+0x1058]
10008a9a:	89 c7                	mov    edi,eax
10008a9c:	c1 ef 06             	shr    edi,0x6
10008a9f:	89 c5                	mov    ebp,eax
10008aa1:	c1 ed 0e             	shr    ebp,0xe
10008aa4:	89 c2                	mov    edx,eax
10008aa6:	c1 ea 16             	shr    edx,0x16
10008aa9:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
10008ab0:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10008ab6:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008abc:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008ac2:	81 e2 fc 03 00 00    	and    edx,0x3fc
10008ac8:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10008acc:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10008ad3:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10008ada:	03 94 0c 58 0c 00 00 	add    edx,DWORD PTR [esp+ecx*1+0xc58]
10008ae1:	33 94 24 5c 10 00 00 	xor    edx,DWORD PTR [esp+0x105c]
10008ae8:	31 f2                	xor    edx,esi
10008aea:	89 d7                	mov    edi,edx
10008aec:	c1 ef 06             	shr    edi,0x6
10008aef:	89 d5                	mov    ebp,edx
10008af1:	c1 ed 0e             	shr    ebp,0xe
10008af4:	89 d6                	mov    esi,edx
10008af6:	c1 ee 16             	shr    esi,0x16
10008af9:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
10008b00:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10008b06:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008b0c:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008b12:	81 e6 fc 03 00 00    	and    esi,0x3fc
10008b18:	8b 74 34 58          	mov    esi,DWORD PTR [esp+esi*1+0x58]
10008b1c:	03 b4 2c 58 04 00 00 	add    esi,DWORD PTR [esp+ebp*1+0x458]
10008b23:	33 b4 3c 58 08 00 00 	xor    esi,DWORD PTR [esp+edi*1+0x858]
10008b2a:	33 84 24 60 10 00 00 	xor    eax,DWORD PTR [esp+0x1060]
10008b31:	03 b4 0c 58 0c 00 00 	add    esi,DWORD PTR [esp+ecx*1+0xc58]
10008b38:	31 c6                	xor    esi,eax
10008b3a:	89 f7                	mov    edi,esi
10008b3c:	c1 ef 06             	shr    edi,0x6
10008b3f:	89 f5                	mov    ebp,esi
10008b41:	c1 ed 0e             	shr    ebp,0xe
10008b44:	89 f1                	mov    ecx,esi
10008b46:	c1 e9 16             	shr    ecx,0x16
10008b49:	8d 04 b5 00 00 00 00 	lea    eax,[esi*4+0x0]
10008b50:	25 fc 03 00 00       	and    eax,0x3fc
10008b55:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008b5b:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008b61:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10008b67:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10008b6b:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10008b72:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10008b79:	33 94 24 64 10 00 00 	xor    edx,DWORD PTR [esp+0x1064]
10008b80:	03 8c 04 58 0c 00 00 	add    ecx,DWORD PTR [esp+eax*1+0xc58]
10008b87:	31 d1                	xor    ecx,edx
10008b89:	89 c8                	mov    eax,ecx
10008b8b:	c1 e8 06             	shr    eax,0x6
10008b8e:	89 cd                	mov    ebp,ecx
10008b90:	c1 ed 0e             	shr    ebp,0xe
10008b93:	89 ca                	mov    edx,ecx
10008b95:	c1 ea 16             	shr    edx,0x16
10008b98:	8d 3c 8d 00 00 00 00 	lea    edi,[ecx*4+0x0]
10008b9f:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008ba5:	25 fc 03 00 00       	and    eax,0x3fc
10008baa:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008bb0:	81 e2 fc 03 00 00    	and    edx,0x3fc
10008bb6:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10008bba:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10008bc1:	33 94 04 58 08 00 00 	xor    edx,DWORD PTR [esp+eax*1+0x858]
10008bc8:	33 b4 24 68 10 00 00 	xor    esi,DWORD PTR [esp+0x1068]
10008bcf:	03 94 3c 58 0c 00 00 	add    edx,DWORD PTR [esp+edi*1+0xc58]
10008bd6:	31 d6                	xor    esi,edx
10008bd8:	89 f2                	mov    edx,esi
10008bda:	c1 ea 06             	shr    edx,0x6
10008bdd:	89 f5                	mov    ebp,esi
10008bdf:	c1 ed 0e             	shr    ebp,0xe
10008be2:	89 f0                	mov    eax,esi
10008be4:	c1 e8 16             	shr    eax,0x16
10008be7:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
10008bee:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008bf4:	81 e2 fc 03 00 00    	and    edx,0x3fc
10008bfa:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008c00:	25 fc 03 00 00       	and    eax,0x3fc
10008c05:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10008c09:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
10008c10:	33 84 14 58 08 00 00 	xor    eax,DWORD PTR [esp+edx*1+0x858]
10008c17:	33 8c 24 6c 10 00 00 	xor    ecx,DWORD PTR [esp+0x106c]
10008c1e:	03 84 3c 58 0c 00 00 	add    eax,DWORD PTR [esp+edi*1+0xc58]
10008c25:	31 c1                	xor    ecx,eax
10008c27:	89 c8                	mov    eax,ecx
10008c29:	c1 e8 06             	shr    eax,0x6
10008c2c:	89 cd                	mov    ebp,ecx
10008c2e:	c1 ed 0e             	shr    ebp,0xe
10008c31:	89 ca                	mov    edx,ecx
10008c33:	c1 ea 16             	shr    edx,0x16
10008c36:	8d 3c 8d 00 00 00 00 	lea    edi,[ecx*4+0x0]
10008c3d:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008c43:	25 fc 03 00 00       	and    eax,0x3fc
10008c48:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008c4e:	81 e2 fc 03 00 00    	and    edx,0x3fc
10008c54:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10008c58:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10008c5f:	33 94 04 58 08 00 00 	xor    edx,DWORD PTR [esp+eax*1+0x858]
10008c66:	33 b4 24 70 10 00 00 	xor    esi,DWORD PTR [esp+0x1070]
10008c6d:	03 94 3c 58 0c 00 00 	add    edx,DWORD PTR [esp+edi*1+0xc58]
10008c74:	31 d6                	xor    esi,edx
10008c76:	89 f2                	mov    edx,esi
10008c78:	c1 ea 06             	shr    edx,0x6
10008c7b:	89 f5                	mov    ebp,esi
10008c7d:	c1 ed 0e             	shr    ebp,0xe
10008c80:	89 f0                	mov    eax,esi
10008c82:	c1 e8 16             	shr    eax,0x16
10008c85:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
10008c8c:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008c92:	81 e2 fc 03 00 00    	and    edx,0x3fc
10008c98:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008c9e:	25 fc 03 00 00       	and    eax,0x3fc
10008ca3:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10008ca7:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
10008cae:	33 84 14 58 08 00 00 	xor    eax,DWORD PTR [esp+edx*1+0x858]
10008cb5:	33 8c 24 74 10 00 00 	xor    ecx,DWORD PTR [esp+0x1074]
10008cbc:	03 84 3c 58 0c 00 00 	add    eax,DWORD PTR [esp+edi*1+0xc58]
10008cc3:	31 c1                	xor    ecx,eax
10008cc5:	89 cf                	mov    edi,ecx
10008cc7:	c1 ef 06             	shr    edi,0x6
10008cca:	89 cd                	mov    ebp,ecx
10008ccc:	c1 ed 0e             	shr    ebp,0xe
10008ccf:	89 ca                	mov    edx,ecx
10008cd1:	c1 ea 16             	shr    edx,0x16
10008cd4:	8d 04 8d 00 00 00 00 	lea    eax,[ecx*4+0x0]
10008cdb:	25 fc 03 00 00       	and    eax,0x3fc
10008ce0:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008ce6:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008cec:	81 e2 fc 03 00 00    	and    edx,0x3fc
10008cf2:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10008cf6:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10008cfd:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10008d04:	33 b4 24 78 10 00 00 	xor    esi,DWORD PTR [esp+0x1078]
10008d0b:	03 94 04 58 0c 00 00 	add    edx,DWORD PTR [esp+eax*1+0xc58]
10008d12:	31 d6                	xor    esi,edx
10008d14:	89 f2                	mov    edx,esi
10008d16:	c1 ea 06             	shr    edx,0x6
10008d19:	89 f5                	mov    ebp,esi
10008d1b:	c1 ed 0e             	shr    ebp,0xe
10008d1e:	89 f0                	mov    eax,esi
10008d20:	c1 e8 16             	shr    eax,0x16
10008d23:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
10008d2a:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008d30:	81 e2 fc 03 00 00    	and    edx,0x3fc
10008d36:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008d3c:	25 fc 03 00 00       	and    eax,0x3fc
10008d41:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10008d45:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
10008d4c:	33 84 14 58 08 00 00 	xor    eax,DWORD PTR [esp+edx*1+0x858]
10008d53:	33 8c 24 7c 10 00 00 	xor    ecx,DWORD PTR [esp+0x107c]
10008d5a:	03 84 3c 58 0c 00 00 	add    eax,DWORD PTR [esp+edi*1+0xc58]
10008d61:	31 c8                	xor    eax,ecx
10008d63:	89 c7                	mov    edi,eax
10008d65:	c1 ef 06             	shr    edi,0x6
10008d68:	89 c5                	mov    ebp,eax
10008d6a:	c1 ed 0e             	shr    ebp,0xe
10008d6d:	89 c2                	mov    edx,eax
10008d6f:	c1 ea 16             	shr    edx,0x16
10008d72:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
10008d79:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10008d7f:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008d85:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008d8b:	81 e2 fc 03 00 00    	and    edx,0x3fc
10008d91:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10008d95:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10008d9c:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10008da3:	33 b4 24 80 10 00 00 	xor    esi,DWORD PTR [esp+0x1080]
10008daa:	03 94 0c 58 0c 00 00 	add    edx,DWORD PTR [esp+ecx*1+0xc58]
10008db1:	31 d6                	xor    esi,edx
10008db3:	89 f7                	mov    edi,esi
10008db5:	c1 ef 06             	shr    edi,0x6
10008db8:	89 f5                	mov    ebp,esi
10008dba:	c1 ed 0e             	shr    ebp,0xe
10008dbd:	89 f1                	mov    ecx,esi
10008dbf:	c1 e9 16             	shr    ecx,0x16
10008dc2:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
10008dc9:	81 e2 fc 03 00 00    	and    edx,0x3fc
10008dcf:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008dd5:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008ddb:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10008de1:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10008de5:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10008dec:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10008df3:	33 84 24 84 10 00 00 	xor    eax,DWORD PTR [esp+0x1084]
10008dfa:	03 8c 14 58 0c 00 00 	add    ecx,DWORD PTR [esp+edx*1+0xc58]
10008e01:	31 c8                	xor    eax,ecx
10008e03:	89 c7                	mov    edi,eax
10008e05:	c1 ef 06             	shr    edi,0x6
10008e08:	89 c5                	mov    ebp,eax
10008e0a:	c1 ed 0e             	shr    ebp,0xe
10008e0d:	89 c2                	mov    edx,eax
10008e0f:	c1 ea 16             	shr    edx,0x16
10008e12:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
10008e19:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10008e1f:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008e25:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008e2b:	81 e2 fc 03 00 00    	and    edx,0x3fc
10008e31:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10008e35:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10008e3c:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10008e43:	33 b4 24 88 10 00 00 	xor    esi,DWORD PTR [esp+0x1088]
10008e4a:	03 94 0c 58 0c 00 00 	add    edx,DWORD PTR [esp+ecx*1+0xc58]
10008e51:	31 d6                	xor    esi,edx
10008e53:	89 f7                	mov    edi,esi
10008e55:	c1 ef 06             	shr    edi,0x6
10008e58:	89 f5                	mov    ebp,esi
10008e5a:	c1 ed 0e             	shr    ebp,0xe
10008e5d:	89 f1                	mov    ecx,esi
10008e5f:	c1 e9 16             	shr    ecx,0x16
10008e62:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
10008e69:	81 e2 fc 03 00 00    	and    edx,0x3fc
10008e6f:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008e75:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008e7b:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10008e81:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10008e85:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10008e8c:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10008e93:	33 84 24 8c 10 00 00 	xor    eax,DWORD PTR [esp+0x108c]
10008e9a:	03 8c 14 58 0c 00 00 	add    ecx,DWORD PTR [esp+edx*1+0xc58]
10008ea1:	31 c8                	xor    eax,ecx
10008ea3:	89 c7                	mov    edi,eax
10008ea5:	c1 ef 06             	shr    edi,0x6
10008ea8:	89 c5                	mov    ebp,eax
10008eaa:	c1 ed 0e             	shr    ebp,0xe
10008ead:	89 c2                	mov    edx,eax
10008eaf:	c1 ea 16             	shr    edx,0x16
10008eb2:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
10008eb9:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10008ebf:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008ec5:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008ecb:	81 e2 fc 03 00 00    	and    edx,0x3fc
10008ed1:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10008ed5:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10008edc:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10008ee3:	33 b4 24 90 10 00 00 	xor    esi,DWORD PTR [esp+0x1090]
10008eea:	03 94 0c 58 0c 00 00 	add    edx,DWORD PTR [esp+ecx*1+0xc58]
10008ef1:	31 d6                	xor    esi,edx
10008ef3:	89 f7                	mov    edi,esi
10008ef5:	c1 ef 06             	shr    edi,0x6
10008ef8:	89 f5                	mov    ebp,esi
10008efa:	c1 ed 0e             	shr    ebp,0xe
10008efd:	89 f1                	mov    ecx,esi
10008eff:	c1 e9 16             	shr    ecx,0x16
10008f02:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
10008f09:	81 e2 fc 03 00 00    	and    edx,0x3fc
10008f0f:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008f15:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008f1b:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10008f21:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10008f25:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10008f2c:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10008f33:	33 84 24 94 10 00 00 	xor    eax,DWORD PTR [esp+0x1094]
10008f3a:	03 8c 14 58 0c 00 00 	add    ecx,DWORD PTR [esp+edx*1+0xc58]
10008f41:	31 c8                	xor    eax,ecx
10008f43:	89 c7                	mov    edi,eax
10008f45:	c1 ef 06             	shr    edi,0x6
10008f48:	89 c5                	mov    ebp,eax
10008f4a:	c1 ed 0e             	shr    ebp,0xe
10008f4d:	89 c2                	mov    edx,eax
10008f4f:	c1 ea 16             	shr    edx,0x16
10008f52:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
10008f59:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10008f5f:	81 e7 fc 03 00 00    	and    edi,0x3fc
10008f65:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10008f6b:	81 e2 fc 03 00 00    	and    edx,0x3fc
10008f71:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
10008f75:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10008f7c:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
10008f83:	33 b4 24 98 10 00 00 	xor    esi,DWORD PTR [esp+0x1098]
10008f8a:	03 94 0c 58 0c 00 00 	add    edx,DWORD PTR [esp+ecx*1+0xc58]
10008f91:	31 d6                	xor    esi,edx
10008f93:	33 84 24 9c 10 00 00 	xor    eax,DWORD PTR [esp+0x109c]
10008f9a:	89 43 f8             	mov    DWORD PTR [ebx-0x8],eax
10008f9d:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
10008fa0:	8d 94 24 58 10 00 00 	lea    edx,[esp+0x1058]
10008fa7:	39 d3                	cmp    ebx,edx
10008fa9:	0f 85 e1 fa ff ff    	jne    10008a90 <_crypt_blowfish_rn+0x2226>
10008faf:	ff 4c 24 04          	dec    DWORD PTR [esp+0x4]
10008fb3:	0f 85 a2 e9 ff ff    	jne    1000795b <_crypt_blowfish_rn+0x10f1>
10008fb9:	8b 84 24 58 10 00 00 	mov    eax,DWORD PTR [esp+0x1058]
10008fc0:	89 04 24             	mov    DWORD PTR [esp],eax
10008fc3:	8b 84 24 5c 10 00 00 	mov    eax,DWORD PTR [esp+0x105c]
10008fca:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
10008fce:	8b 84 24 60 10 00 00 	mov    eax,DWORD PTR [esp+0x1060]
10008fd5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
10008fd9:	8b 84 24 64 10 00 00 	mov    eax,DWORD PTR [esp+0x1064]
10008fe0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10008fe4:	8b 84 24 68 10 00 00 	mov    eax,DWORD PTR [esp+0x1068]
10008feb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
10008fef:	8b 84 24 6c 10 00 00 	mov    eax,DWORD PTR [esp+0x106c]
10008ff6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
10008ffa:	8b 84 24 70 10 00 00 	mov    eax,DWORD PTR [esp+0x1070]
10009001:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
10009005:	8b 84 24 74 10 00 00 	mov    eax,DWORD PTR [esp+0x1074]
1000900c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
10009010:	8b 84 24 78 10 00 00 	mov    eax,DWORD PTR [esp+0x1078]
10009017:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
1000901b:	8b 84 24 7c 10 00 00 	mov    eax,DWORD PTR [esp+0x107c]
10009022:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
10009026:	8b 84 24 80 10 00 00 	mov    eax,DWORD PTR [esp+0x1080]
1000902d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
10009031:	8b 84 24 84 10 00 00 	mov    eax,DWORD PTR [esp+0x1084]
10009038:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
1000903c:	8b 84 24 88 10 00 00 	mov    eax,DWORD PTR [esp+0x1088]
10009043:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
10009047:	8b 84 24 8c 10 00 00 	mov    eax,DWORD PTR [esp+0x108c]
1000904e:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
10009052:	8b 84 24 90 10 00 00 	mov    eax,DWORD PTR [esp+0x1090]
10009059:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
1000905d:	8b 84 24 94 10 00 00 	mov    eax,DWORD PTR [esp+0x1094]
10009064:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
10009068:	8b 84 24 98 10 00 00 	mov    eax,DWORD PTR [esp+0x1098]
1000906f:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
10009073:	8b 84 24 9c 10 00 00 	mov    eax,DWORD PTR [esp+0x109c]
1000907a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
1000907e:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
10009082:	89 5c 24 4c          	mov    DWORD PTR [esp+0x4c],ebx
10009086:	8b 04 9d 20 a4 00 10 	mov    eax,DWORD PTR [ebx*4+0x1000a420]	10009089: R_386_32	.data
1000908d:	8b 0c 9d 24 a4 00 10 	mov    ecx,DWORD PTR [ebx*4+0x1000a424]	10009090: R_386_32	.data
10009094:	bb 40 00 00 00       	mov    ebx,0x40
10009099:	33 04 24             	xor    eax,DWORD PTR [esp]
1000909c:	89 c7                	mov    edi,eax
1000909e:	c1 ef 06             	shr    edi,0x6
100090a1:	89 c5                	mov    ebp,eax
100090a3:	c1 ed 0e             	shr    ebp,0xe
100090a6:	89 c2                	mov    edx,eax
100090a8:	c1 ea 16             	shr    edx,0x16
100090ab:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
100090b2:	81 e6 fc 03 00 00    	and    esi,0x3fc
100090b8:	81 e7 fc 03 00 00    	and    edi,0x3fc
100090be:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100090c4:	81 e2 fc 03 00 00    	and    edx,0x3fc
100090ca:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
100090ce:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
100090d5:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
100090dc:	03 94 34 58 0c 00 00 	add    edx,DWORD PTR [esp+esi*1+0xc58]
100090e3:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
100090e7:	31 ca                	xor    edx,ecx
100090e9:	89 d7                	mov    edi,edx
100090eb:	c1 ef 06             	shr    edi,0x6
100090ee:	89 d5                	mov    ebp,edx
100090f0:	c1 ed 0e             	shr    ebp,0xe
100090f3:	89 d1                	mov    ecx,edx
100090f5:	c1 e9 16             	shr    ecx,0x16
100090f8:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
100090ff:	81 e6 fc 03 00 00    	and    esi,0x3fc
10009105:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000910b:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009111:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009117:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
1000911b:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10009122:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10009129:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
1000912d:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10009134:	31 c1                	xor    ecx,eax
10009136:	89 cd                	mov    ebp,ecx
10009138:	c1 ed 06             	shr    ebp,0x6
1000913b:	89 ce                	mov    esi,ecx
1000913d:	c1 ee 0e             	shr    esi,0xe
10009140:	89 c8                	mov    eax,ecx
10009142:	c1 e8 16             	shr    eax,0x16
10009145:	8d 3c 8d 00 00 00 00 	lea    edi,[ecx*4+0x0]
1000914c:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009152:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009158:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000915e:	25 fc 03 00 00       	and    eax,0x3fc
10009163:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10009167:	03 84 34 58 04 00 00 	add    eax,DWORD PTR [esp+esi*1+0x458]
1000916e:	33 84 2c 58 08 00 00 	xor    eax,DWORD PTR [esp+ebp*1+0x858]
10009175:	33 54 24 0c          	xor    edx,DWORD PTR [esp+0xc]
10009179:	03 84 3c 58 0c 00 00 	add    eax,DWORD PTR [esp+edi*1+0xc58]
10009180:	89 c6                	mov    esi,eax
10009182:	31 d6                	xor    esi,edx
10009184:	89 f5                	mov    ebp,esi
10009186:	c1 ed 06             	shr    ebp,0x6
10009189:	89 f2                	mov    edx,esi
1000918b:	c1 ea 0e             	shr    edx,0xe
1000918e:	89 f0                	mov    eax,esi
10009190:	c1 e8 16             	shr    eax,0x16
10009193:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
1000919a:	81 e7 fc 03 00 00    	and    edi,0x3fc
100091a0:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100091a6:	81 e2 fc 03 00 00    	and    edx,0x3fc
100091ac:	25 fc 03 00 00       	and    eax,0x3fc
100091b1:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
100091b5:	03 84 14 58 04 00 00 	add    eax,DWORD PTR [esp+edx*1+0x458]
100091bc:	33 84 2c 58 08 00 00 	xor    eax,DWORD PTR [esp+ebp*1+0x858]
100091c3:	33 4c 24 10          	xor    ecx,DWORD PTR [esp+0x10]
100091c7:	03 84 3c 58 0c 00 00 	add    eax,DWORD PTR [esp+edi*1+0xc58]
100091ce:	31 c1                	xor    ecx,eax
100091d0:	89 ca                	mov    edx,ecx
100091d2:	c1 ea 06             	shr    edx,0x6
100091d5:	89 cd                	mov    ebp,ecx
100091d7:	c1 ed 0e             	shr    ebp,0xe
100091da:	89 c8                	mov    eax,ecx
100091dc:	c1 e8 16             	shr    eax,0x16
100091df:	8d 3c 8d 00 00 00 00 	lea    edi,[ecx*4+0x0]
100091e6:	81 e7 fc 03 00 00    	and    edi,0x3fc
100091ec:	81 e2 fc 03 00 00    	and    edx,0x3fc
100091f2:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100091f8:	25 fc 03 00 00       	and    eax,0x3fc
100091fd:	8b 44 04 58          	mov    eax,DWORD PTR [esp+eax*1+0x58]
10009201:	03 84 2c 58 04 00 00 	add    eax,DWORD PTR [esp+ebp*1+0x458]
10009208:	33 84 14 58 08 00 00 	xor    eax,DWORD PTR [esp+edx*1+0x858]
1000920f:	33 74 24 14          	xor    esi,DWORD PTR [esp+0x14]
10009213:	03 84 3c 58 0c 00 00 	add    eax,DWORD PTR [esp+edi*1+0xc58]
1000921a:	31 f0                	xor    eax,esi
1000921c:	89 c7                	mov    edi,eax
1000921e:	c1 ef 06             	shr    edi,0x6
10009221:	89 c5                	mov    ebp,eax
10009223:	c1 ed 0e             	shr    ebp,0xe
10009226:	89 c2                	mov    edx,eax
10009228:	c1 ea 16             	shr    edx,0x16
1000922b:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10009232:	81 e6 fc 03 00 00    	and    esi,0x3fc
10009238:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000923e:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009244:	81 e2 fc 03 00 00    	and    edx,0x3fc
1000924a:	8b 54 14 58          	mov    edx,DWORD PTR [esp+edx*1+0x58]
1000924e:	03 94 2c 58 04 00 00 	add    edx,DWORD PTR [esp+ebp*1+0x458]
10009255:	33 94 3c 58 08 00 00 	xor    edx,DWORD PTR [esp+edi*1+0x858]
1000925c:	33 4c 24 18          	xor    ecx,DWORD PTR [esp+0x18]
10009260:	03 94 34 58 0c 00 00 	add    edx,DWORD PTR [esp+esi*1+0xc58]
10009267:	31 ca                	xor    edx,ecx
10009269:	89 d7                	mov    edi,edx
1000926b:	c1 ef 06             	shr    edi,0x6
1000926e:	89 d5                	mov    ebp,edx
10009270:	c1 ed 0e             	shr    ebp,0xe
10009273:	89 d1                	mov    ecx,edx
10009275:	c1 e9 16             	shr    ecx,0x16
10009278:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
1000927f:	81 e6 fc 03 00 00    	and    esi,0x3fc
10009285:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000928b:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009291:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009297:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
1000929b:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
100092a2:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
100092a9:	33 44 24 1c          	xor    eax,DWORD PTR [esp+0x1c]
100092ad:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
100092b4:	31 c8                	xor    eax,ecx
100092b6:	89 c7                	mov    edi,eax
100092b8:	c1 ef 06             	shr    edi,0x6
100092bb:	89 c5                	mov    ebp,eax
100092bd:	c1 ed 0e             	shr    ebp,0xe
100092c0:	89 c1                	mov    ecx,eax
100092c2:	c1 e9 16             	shr    ecx,0x16
100092c5:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
100092cc:	81 e6 fc 03 00 00    	and    esi,0x3fc
100092d2:	81 e7 fc 03 00 00    	and    edi,0x3fc
100092d8:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100092de:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100092e4:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
100092e8:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
100092ef:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
100092f6:	33 54 24 20          	xor    edx,DWORD PTR [esp+0x20]
100092fa:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10009301:	31 ca                	xor    edx,ecx
10009303:	89 d7                	mov    edi,edx
10009305:	c1 ef 06             	shr    edi,0x6
10009308:	89 d5                	mov    ebp,edx
1000930a:	c1 ed 0e             	shr    ebp,0xe
1000930d:	89 d1                	mov    ecx,edx
1000930f:	c1 e9 16             	shr    ecx,0x16
10009312:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
10009319:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000931f:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009325:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000932b:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009331:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10009335:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
1000933c:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10009343:	33 44 24 24          	xor    eax,DWORD PTR [esp+0x24]
10009347:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
1000934e:	31 c8                	xor    eax,ecx
10009350:	89 c7                	mov    edi,eax
10009352:	c1 ef 06             	shr    edi,0x6
10009355:	89 c5                	mov    ebp,eax
10009357:	c1 ed 0e             	shr    ebp,0xe
1000935a:	89 c1                	mov    ecx,eax
1000935c:	c1 e9 16             	shr    ecx,0x16
1000935f:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10009366:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000936c:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009372:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009378:	81 e1 fc 03 00 00    	and    ecx,0x3fc
1000937e:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10009382:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10009389:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10009390:	33 54 24 28          	xor    edx,DWORD PTR [esp+0x28]
10009394:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
1000939b:	31 ca                	xor    edx,ecx
1000939d:	89 d7                	mov    edi,edx
1000939f:	c1 ef 06             	shr    edi,0x6
100093a2:	89 d5                	mov    ebp,edx
100093a4:	c1 ed 0e             	shr    ebp,0xe
100093a7:	89 d1                	mov    ecx,edx
100093a9:	c1 e9 16             	shr    ecx,0x16
100093ac:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
100093b3:	81 e6 fc 03 00 00    	and    esi,0x3fc
100093b9:	81 e7 fc 03 00 00    	and    edi,0x3fc
100093bf:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100093c5:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100093cb:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
100093cf:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
100093d6:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
100093dd:	33 44 24 2c          	xor    eax,DWORD PTR [esp+0x2c]
100093e1:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
100093e8:	31 c8                	xor    eax,ecx
100093ea:	89 c7                	mov    edi,eax
100093ec:	c1 ef 06             	shr    edi,0x6
100093ef:	89 c5                	mov    ebp,eax
100093f1:	c1 ed 0e             	shr    ebp,0xe
100093f4:	89 c1                	mov    ecx,eax
100093f6:	c1 e9 16             	shr    ecx,0x16
100093f9:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10009400:	81 e6 fc 03 00 00    	and    esi,0x3fc
10009406:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000940c:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009412:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009418:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
1000941c:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10009423:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
1000942a:	33 54 24 30          	xor    edx,DWORD PTR [esp+0x30]
1000942e:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10009435:	31 ca                	xor    edx,ecx
10009437:	89 d7                	mov    edi,edx
10009439:	c1 ef 06             	shr    edi,0x6
1000943c:	89 d5                	mov    ebp,edx
1000943e:	c1 ed 0e             	shr    ebp,0xe
10009441:	89 d1                	mov    ecx,edx
10009443:	c1 e9 16             	shr    ecx,0x16
10009446:	8d 34 95 00 00 00 00 	lea    esi,[edx*4+0x0]
1000944d:	81 e6 fc 03 00 00    	and    esi,0x3fc
10009453:	81 e7 fc 03 00 00    	and    edi,0x3fc
10009459:	81 e5 fc 03 00 00    	and    ebp,0x3fc
1000945f:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009465:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
10009469:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
10009470:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
10009477:	33 44 24 34          	xor    eax,DWORD PTR [esp+0x34]
1000947b:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
10009482:	31 c8                	xor    eax,ecx
10009484:	89 c7                	mov    edi,eax
10009486:	c1 ef 06             	shr    edi,0x6
10009489:	89 c5                	mov    ebp,eax
1000948b:	c1 ed 0e             	shr    ebp,0xe
1000948e:	89 c1                	mov    ecx,eax
10009490:	c1 e9 16             	shr    ecx,0x16
10009493:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
1000949a:	81 e6 fc 03 00 00    	and    esi,0x3fc
100094a0:	81 e7 fc 03 00 00    	and    edi,0x3fc
100094a6:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100094ac:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100094b2:	8b 4c 0c 58          	mov    ecx,DWORD PTR [esp+ecx*1+0x58]
100094b6:	03 8c 2c 58 04 00 00 	add    ecx,DWORD PTR [esp+ebp*1+0x458]
100094bd:	33 8c 3c 58 08 00 00 	xor    ecx,DWORD PTR [esp+edi*1+0x858]
100094c4:	33 54 24 38          	xor    edx,DWORD PTR [esp+0x38]
100094c8:	03 8c 34 58 0c 00 00 	add    ecx,DWORD PTR [esp+esi*1+0xc58]
100094cf:	31 ca                	xor    edx,ecx
100094d1:	89 d7                	mov    edi,edx
100094d3:	c1 ef 06             	shr    edi,0x6
100094d6:	89 d5                	mov    ebp,edx
100094d8:	c1 ed 0e             	shr    ebp,0xe
100094db:	89 d6                	mov    esi,edx
100094dd:	c1 ee 16             	shr    esi,0x16
100094e0:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
100094e7:	81 e1 fc 03 00 00    	and    ecx,0x3fc
100094ed:	81 e7 fc 03 00 00    	and    edi,0x3fc
100094f3:	81 e5 fc 03 00 00    	and    ebp,0x3fc
100094f9:	81 e6 fc 03 00 00    	and    esi,0x3fc
100094ff:	8b 74 34 58          	mov    esi,DWORD PTR [esp+esi*1+0x58]
10009503:	03 b4 2c 58 04 00 00 	add    esi,DWORD PTR [esp+ebp*1+0x458]
1000950a:	33 b4 3c 58 08 00 00 	xor    esi,DWORD PTR [esp+edi*1+0x858]
10009511:	33 44 24 3c          	xor    eax,DWORD PTR [esp+0x3c]
10009515:	03 b4 0c 58 0c 00 00 	add    esi,DWORD PTR [esp+ecx*1+0xc58]
1000951c:	31 f0                	xor    eax,esi
1000951e:	89 c5                	mov    ebp,eax
10009520:	c1 ed 06             	shr    ebp,0x6
10009523:	89 c1                	mov    ecx,eax
10009525:	c1 e9 0e             	shr    ecx,0xe
10009528:	89 c6                	mov    esi,eax
1000952a:	c1 ee 16             	shr    esi,0x16
1000952d:	8d 3c 85 00 00 00 00 	lea    edi,[eax*4+0x0]
10009534:	81 e7 fc 03 00 00    	and    edi,0x3fc
1000953a:	81 e5 fc 03 00 00    	and    ebp,0x3fc
10009540:	81 e1 fc 03 00 00    	and    ecx,0x3fc
10009546:	81 e6 fc 03 00 00    	and    esi,0x3fc
1000954c:	8b 74 34 58          	mov    esi,DWORD PTR [esp+esi*1+0x58]
10009550:	03 b4 0c 58 04 00 00 	add    esi,DWORD PTR [esp+ecx*1+0x458]
10009557:	33 b4 2c 58 08 00 00 	xor    esi,DWORD PTR [esp+ebp*1+0x858]
1000955e:	33 54 24 40          	xor    edx,DWORD PTR [esp+0x40]
10009562:	03 b4 3c 58 0c 00 00 	add    esi,DWORD PTR [esp+edi*1+0xc58]
10009569:	89 f1                	mov    ecx,esi
1000956b:	31 d1                	xor    ecx,edx
1000956d:	33 44 24 44          	xor    eax,DWORD PTR [esp+0x44]
10009571:	4b                   	dec    ebx
10009572:	0f 85 21 fb ff ff    	jne    10009099 <_crypt_blowfish_rn+0x282f>
10009578:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
1000957c:	89 84 9c e8 10 00 00 	mov    DWORD PTR [esp+ebx*4+0x10e8],eax
10009583:	89 8c 9c ec 10 00 00 	mov    DWORD PTR [esp+ebx*4+0x10ec],ecx
1000958a:	83 44 24 48 02       	add    DWORD PTR [esp+0x48],0x2
1000958f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
10009593:	83 f8 06             	cmp    eax,0x6
10009596:	0f 85 e2 fa ff ff    	jne    1000907e <_crypt_blowfish_rn+0x2814>
1000959c:	b9 07 00 00 00       	mov    ecx,0x7
100095a1:	8b bc 24 1c 11 00 00 	mov    edi,DWORD PTR [esp+0x111c]
100095a8:	8b b4 24 18 11 00 00 	mov    esi,DWORD PTR [esp+0x1118]
100095af:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100095b1:	8b 84 24 18 11 00 00 	mov    eax,DWORD PTR [esp+0x1118]
100095b8:	0f be 40 1c          	movsx  eax,BYTE PTR [eax+0x1c]
100095bc:	8a 80 e0 b4 00 10    	mov    al,BYTE PTR [eax+0x1000b4e0]	100095be: R_386_32	.data
100095c2:	83 e0 30             	and    eax,0x30
100095c5:	8a 80 a0 b4 00 10    	mov    al,BYTE PTR [eax+0x1000b4a0]	100095c7: R_386_32	.data
100095cb:	88 04 24             	mov    BYTE PTR [esp],al
100095ce:	8b 9c 24 1c 11 00 00 	mov    ebx,DWORD PTR [esp+0x111c]
100095d5:	88 43 1c             	mov    BYTE PTR [ebx+0x1c],al
100095d8:	6a 06                	push   0x6
100095da:	8d 74 24 5c          	lea    esi,[esp+0x5c]
100095de:	8d 9c 24 ec 10 00 00 	lea    ebx,[esp+0x10ec]
100095e5:	53                   	push   ebx
100095e6:	e8 f5 d1 ff ff       	call   100067e0 <BF_swap>
100095eb:	6a 17                	push   0x17
100095ed:	53                   	push   ebx
100095ee:	8b 84 24 2c 11 00 00 	mov    eax,DWORD PTR [esp+0x112c]
100095f5:	83 c0 1d             	add    eax,0x1d
100095f8:	50                   	push   eax
100095f9:	e8 3d d1 ff ff       	call   1000673b <BF_encode>
100095fe:	8b 84 24 30 11 00 00 	mov    eax,DWORD PTR [esp+0x1130]
10009605:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
10009609:	68 a8 10 00 00       	push   0x10a8
1000960e:	56                   	push   esi
1000960f:	e8 0b d0 ff ff       	call   1000661f <clean>
10009614:	83 c4 1c             	add    esp,0x1c
10009617:	8b 84 24 1c 11 00 00 	mov    eax,DWORD PTR [esp+0x111c]
1000961e:	eb 29                	jmp    10009649 <_crypt_blowfish_rn+0x2ddf>
10009620:	c7 05 00 00 00 00 22 00 00 00 	mov    DWORD PTR ds:0x0,0x22	10009622: R_386_32	_bcrypt_errno
1000962a:	b8 00 00 00 00       	mov    eax,0x0
1000962f:	eb 18                	jmp    10009649 <_crypt_blowfish_rn+0x2ddf>
10009631:	80 fa 31             	cmp    dl,0x31
10009634:	0f 8e a3 d2 ff ff    	jle    100068dd <_crypt_blowfish_rn+0x73>
1000963a:	c7 05 00 00 00 00 16 00 00 00 	mov    DWORD PTR ds:0x0,0x16	1000963c: R_386_32	_bcrypt_errno
10009644:	b8 00 00 00 00       	mov    eax,0x0
10009649:	81 c4 00 11 00 00    	add    esp,0x1100
1000964f:	5b                   	pop    ebx
10009650:	5e                   	pop    esi
10009651:	5f                   	pop    edi
10009652:	5d                   	pop    ebp
10009653:	c3                   	ret    
10009654:	6a 10                	push   0x10
10009656:	8d 84 24 ec 10 00 00 	lea    eax,[esp+0x10ec]
1000965d:	50                   	push   eax
1000965e:	e8 bc cf ff ff       	call   1000661f <clean>
10009663:	c7 05 00 00 00 00 16 00 00 00 	mov    DWORD PTR ds:0x0,0x16	10009665: R_386_32	_bcrypt_errno
1000966d:	83 c4 08             	add    esp,0x8
10009670:	b8 00 00 00 00       	mov    eax,0x0
10009675:	eb d2                	jmp    10009649 <_crypt_blowfish_rn+0x2ddf>

10009677 <_crypt_gensalt_blowfish_rn>:
10009677:	53                   	push   ebx
10009678:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
1000967c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
10009680:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
10009685:	7e 19                	jle    100096a0 <_crypt_gensalt_blowfish_rn+0x29>
10009687:	83 7c 24 18 1d       	cmp    DWORD PTR [esp+0x18],0x1d
1000968c:	0f 8e 88 00 00 00    	jle    1000971a <_crypt_gensalt_blowfish_rn+0xa3>
10009692:	85 c9                	test   ecx,ecx
10009694:	74 33                	je     100096c9 <_crypt_gensalt_blowfish_rn+0x52>
10009696:	8d 41 fc             	lea    eax,[ecx-0x4]
10009699:	83 f8 1b             	cmp    eax,0x1b
1000969c:	76 30                	jbe    100096ce <_crypt_gensalt_blowfish_rn+0x57>
1000969e:	eb 07                	jmp    100096a7 <_crypt_gensalt_blowfish_rn+0x30>
100096a0:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
100096a5:	7e 03                	jle    100096aa <_crypt_gensalt_blowfish_rn+0x33>
100096a7:	c6 03 00             	mov    BYTE PTR [ebx],0x0
100096aa:	83 7c 24 18 1d       	cmp    DWORD PTR [esp+0x18],0x1d
100096af:	7e 11                	jle    100096c2 <_crypt_gensalt_blowfish_rn+0x4b>
100096b1:	b8 16 00 00 00       	mov    eax,0x16
100096b6:	a3 00 00 00 00       	mov    ds:0x0,eax	100096b7: R_386_32	_bcrypt_errno
100096bb:	b8 00 00 00 00       	mov    eax,0x0
100096c0:	eb 56                	jmp    10009718 <_crypt_gensalt_blowfish_rn+0xa1>
100096c2:	b8 22 00 00 00       	mov    eax,0x22
100096c7:	eb ed                	jmp    100096b6 <_crypt_gensalt_blowfish_rn+0x3f>
100096c9:	b9 05 00 00 00       	mov    ecx,0x5
100096ce:	c6 03 24             	mov    BYTE PTR [ebx],0x24
100096d1:	c6 43 01 32          	mov    BYTE PTR [ebx+0x1],0x32
100096d5:	c6 43 02 61          	mov    BYTE PTR [ebx+0x2],0x61
100096d9:	c6 43 03 24          	mov    BYTE PTR [ebx+0x3],0x24
100096dd:	b8 cd cc cc cc       	mov    eax,0xcccccccd
100096e2:	f7 e1                	mul    ecx
100096e4:	89 d0                	mov    eax,edx
100096e6:	c1 e8 03             	shr    eax,0x3
100096e9:	8d 50 30             	lea    edx,[eax+0x30]
100096ec:	88 53 04             	mov    BYTE PTR [ebx+0x4],dl
100096ef:	8d 04 80             	lea    eax,[eax+eax*4]
100096f2:	01 c0                	add    eax,eax
100096f4:	29 c1                	sub    ecx,eax
100096f6:	83 c1 30             	add    ecx,0x30
100096f9:	88 4b 05             	mov    BYTE PTR [ebx+0x5],cl
100096fc:	c6 43 06 24          	mov    BYTE PTR [ebx+0x6],0x24
10009700:	6a 10                	push   0x10
10009702:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
10009706:	8d 43 07             	lea    eax,[ebx+0x7]
10009709:	50                   	push   eax
1000970a:	e8 2c d0 ff ff       	call   1000673b <BF_encode>
1000970f:	c6 43 1d 00          	mov    BYTE PTR [ebx+0x1d],0x0
10009713:	83 c4 0c             	add    esp,0xc
10009716:	89 d8                	mov    eax,ebx
10009718:	5b                   	pop    ebx
10009719:	c3                   	ret    
1000971a:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
1000971f:	7f 86                	jg     100096a7 <_crypt_gensalt_blowfish_rn+0x30>
10009721:	b8 22 00 00 00       	mov    eax,0x22
10009726:	eb 8e                	jmp    100096b6 <_crypt_gensalt_blowfish_rn+0x3f>

10009728 <bcrypt_gensalt>:
10009728:	57                   	push   edi
10009729:	56                   	push   esi
1000972a:	53                   	push   ebx
1000972b:	83 ec 10             	sub    esp,0x10
1000972e:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
10009732:	89 e3                	mov    ebx,esp
10009734:	8d 74 24 10          	lea    esi,[esp+0x10]
10009738:	e8 fc ff ff ff       	call   10009739 <bcrypt_gensalt+0x11>	10009739: R_386_PC32	_bcrypt_rand
1000973d:	88 03                	mov    BYTE PTR [ebx],al
1000973f:	43                   	inc    ebx
10009740:	39 f3                	cmp    ebx,esi
10009742:	75 f4                	jne    10009738 <bcrypt_gensalt+0x10>
10009744:	8d 47 fc             	lea    eax,[edi-0x4]
10009747:	83 f8 1b             	cmp    eax,0x1b
1000974a:	76 05                	jbe    10009751 <bcrypt_gensalt+0x29>
1000974c:	bf 0c 00 00 00       	mov    edi,0xc
10009751:	83 ec 0c             	sub    esp,0xc
10009754:	6a 40                	push   0x40
10009756:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
1000975a:	6a 10                	push   0x10
1000975c:	8d 44 24 18          	lea    eax,[esp+0x18]
10009760:	50                   	push   eax
10009761:	57                   	push   edi
10009762:	e8 10 ff ff ff       	call   10009677 <_crypt_gensalt_blowfish_rn>
10009767:	85 c0                	test   eax,eax
10009769:	0f 94 c0             	sete   al
1000976c:	0f b6 c0             	movzx  eax,al
1000976f:	83 c4 30             	add    esp,0x30
10009772:	5b                   	pop    ebx
10009773:	5e                   	pop    esi
10009774:	5f                   	pop    edi
10009775:	c3                   	ret    

10009776 <bcrypt_hashpw>:
10009776:	6a 40                	push   0x40
10009778:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
1000977c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
10009780:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
10009784:	e8 e1 d0 ff ff       	call   1000686a <_crypt_blowfish_rn>
10009789:	83 c4 10             	add    esp,0x10
1000978c:	85 c0                	test   eax,eax
1000978e:	0f 94 c0             	sete   al
10009791:	0f b6 c0             	movzx  eax,al
10009794:	c3                   	ret    
10009795:	66 90                	xchg   ax,ax
10009797:	90                   	nop

10009798 <TERMINAL_KEYBUFFER_IN_SIZE>:
10009798:	80 00 00 00                                         ....

1000979c <TERMINAL_KEYBUFFER_OUT_SIZE>:
1000979c:	80 00 00 00 2e 00 2e 2e 00 2f 00 43 6f 75 6c 64     ........./.Could
100097ac:	6e 27 74 20 6f 70 65 6e 20 62 61 73 65 20 70 61     n't open base pa
100097bc:	74 68 2e 0a 00 25 73 20 2d 3e 20 25 73 0a 00 43     th...%s -> %s..C
100097cc:	4f 55 4c 44 20 4e 4f 54 20 43 52 45 41 54 45 00     OULD NOT CREATE.
100097dc:	43 4f 55 4c 44 20 4e 4f 54 20 43 4f 50 59 00 4e     COULD NOT COPY.N
100097ec:	4f 20 4d 45 4d 4f 52 59 00 42 61 63 6b 75 70 00     O MEMORY.Backup.
100097fc:	43 3a 2f 42 61 6e 61 6e 61 2f 53 79 73 74 65 6d     C:/Banana/System
1000980c:	2f 42 61 63 6b 75 70 2f 00 30 31 32 33 34 35 36     /Backup/.0123456
1000981c:	37 38 39 41 42 43 44 45 46 00 43 3a 2f 55 73 65     789ABCDEF.C:/Use
1000982c:	72 73 2f 00 2f 44 65 73 6b 74 6f 70 00 2f 44 6f     rs/./Desktop./Do
1000983c:	63 75 6d 65 6e 74 73 00 2f 44 6f 77 6e 6c 6f 61     cuments./Downloa
1000984c:	64 73 00 2f 50 68 6f 74 6f 73 00 2f 54 72 61 73     ds./Photos./Tras
1000985c:	68 20 42 69 6e 00 2f 4d 75 73 69 63 00 2f 4d 6f     h Bin./Music./Mo
1000986c:	76 69 65 73 00 43 3a 2f 42 61 6e 61 6e 61 2f 52     vies.C:/Banana/R
1000987c:	65 67 69 73 74 72 79 2f 55 73 65 72 2f 00 00 00     egistry/User/...
1000988c:	43 3a 2f 42 61 6e 61 6e 61 2f 52 65 67 69 73 74     C:/Banana/Regist
1000989c:	72 79 2f 44 65 66 61 75 6c 74 55 73 65 72 00 00     ry/DefaultUser..
100098ac:	43 68 65 63 6b 69 6e 67 0a 20 73 79 73 74 65 6d     Checking. system
100098bc:	0a 20 72 65 71 75 69 72 65 6d 65 6e 74 73 0a 0a     . requirements..
100098cc:	20 4c 65 67 61 6c 0a 20 6e 6f 74 69 63 65 73 0a      Legal. notices.
100098dc:	0a 20 43 68 6f 6f 73 69 6e 67 20 61 0a 20 70 61     . Choosing a. pa
100098ec:	72 74 69 74 69 6f 6e 0a 0a 20 46 6f 72 6d 61 74     rtition.. Format
100098fc:	74 69 6e 67 0a 0a 20 43 6f 70 79 69 6e 67 20 66     ting.. Copying f
1000990c:	69 6c 65 73 0a 0a 20 52 65 73 74 61 72 74 69 6e     iles.. Restartin
1000991c:	67 0a 20 79 6f 75 72 20 63 6f 6d 70 75 74 65 72     g. your computer
1000992c:	0a 0a 00 20 46 69 6e 61 6c 69 73 69 6e 67 20 74     ... Finalising t
1000993c:	68 65 0a 20 69 6e 73 74 61 6c 6c 61 74 69 6f 6e     he. installation
1000994c:	00 00 00 00 50 6c 65 61 73 65 20 77 61 69 74 20     ....Please wait 
1000995c:	77 68 69 6c 65 20 74 68 65 20 69 6e 73 74 61 6c     while the instal
1000996c:	6c 20 66 69 6e 69 73 68 65 73 2e 00 10 20 00 20     l finishes... . 
1000997c:	20 00 41 6c 6c 6f 63 61 74 69 6e 67 20 74 68 65      .Allocating the
1000998c:	20 73 77 61 70 66 69 6c 65 00 55 70 64 61 74 69      swapfile.Updati
1000999c:	6e 67 20 74 68 65 20 72 65 67 69 73 74 72 79 00     ng the registry.
100099ac:	43 72 65 61 74 69 6e 67 20 75 73 65 72 20 61 63     Creating user ac
100099bc:	63 6f 75 6e 74 00 49 6e 73 74 61 6c 6c 69 6e 67     count.Installing
100099cc:	20 70 61 63 6b 61 67 65 73 00 42 61 63 6b 69 6e      packages.Backin
100099dc:	67 20 75 70 20 73 79 73 74 65 6d 20 66 69 6c 65     g up system file
100099ec:	73 00 46 69 6e 69 73 68 69 6e 67 20 74 6f 75 63     s.Finishing touc
100099fc:	68 65 73 00 51 51 2d 30 30 30 2d 30 30 30 2d 30     hes.QQ-000-000-0
10009a0c:	30 30 2d 51 00 00 00 00 43 3a 2f 42 61 6e 61 6e     00-Q....C:/Banan
10009a1c:	61 2f 53 79 73 74 65 6d 2f 74 69 6d 65 7a 6f 6e     a/System/timezon
10009a2c:	65 73 2e 74 78 74 00 73 69 7a 20 3d 20 25 64 0a     es.txt.siz = %d.
10009a3c:	00 20 00 2e 2e 2e 20 00 25 64 3b 20 25 73 0a 00     . .... .%d; %s..
10009a4c:	53 65 74 74 69 6e 67 20 75 70 20 74 68 65 20 73     Setting up the s
10009a5c:	79 73 74 65 6d 20 66 6f 72 20 74 68 65 20 66 69     ystem for the fi
10009a6c:	72 73 74 20 74 69 6d 65 00 0a 0a 0a 0a 0a 0a 00     rst time........
10009a7c:	54 65 73 74 00 41 41 2d 30 30 30 30 30 2d 30 30     Test.AA-00000-00
10009a8c:	30 30 30 2d 41 00 57 57 2d 38 38 33 38 38 2d 35     000-A.WW-88388-5
10009a9c:	35 35 35 35 2d 4e 00 42 61 6e 61 6e 61 20 53 65     5555-N.Banana Se
10009aac:	74 75 70 00 50 6c 65 61 73 65 20 65 6e 74 65 72     tup.Please enter
10009abc:	20 79 6f 75 72 20 64 65 74 61 69 6c 73 2e 20 50      your details. P
10009acc:	72 65 73 73 20 54 41 42 20 74 6f 20 73 77 69 74     ress TAB to swit
10009adc:	63 68 00 62 65 74 77 65 65 6e 20 66 69 65 6c 64     ch.between field
10009aec:	73 2e 00 4e 61 6d 65 00 43 6f 6d 70 61 6e 79 00     s..Name.Company.
10009afc:	50 61 73 73 77 6f 72 64 00 43 6f 6e 66 69 72 6d     Password.Confirm
10009b0c:	00 70 61 73 73 77 6f 72 64 00 00 00 20 20 20 20     .password...    
10009b1c:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
10009b2c:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
10009b3c:	00 20 11 00 20 20 20 00 2a 00 50 72 65 73 73 20     . ..   .*.Press 
10009b4c:	45 4e 54 45 52 20 74 6f 20 73 75 62 6d 69 74 00     ENTER to submit.
10009b5c:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
10009b6c:	20 20 20 20 20 20 00 20 20 20 4f 4b 20 20 20 00           .   OK   .
10009b7c:	20 20 11 00 43 4f 55 4c 44 20 4e 4f 54 20 53 41       ..COULD NOT SA
10009b8c:	56 45 00 59 4f 55 52 20 50 41 53 53 57 4f 52 44     VE.YOUR PASSWORD
10009b9c:	20 28 41 29 00 59 4f 55 52 20 50 41 53 53 57 4f      (A).YOUR PASSWO
10009bac:	52 44 20 28 42 29 00 44 61 74 65 20 61 6e 64 20     RD (B).Date and 
10009bbc:	54 69 6d 65 00 31 34 2f 30 35 2f 32 30 32 31 20     Time.14/05/2021 
10009bcc:	31 38 3a 35 35 3a 30 30 00 00 00 00 50 6c 65 61     18:55:00....Plea
10009bdc:	73 65 20 65 6e 74 65 72 20 74 68 65 20 63 75 72     se enter the cur
10009bec:	72 65 6e 74 20 64 61 74 65 20 61 6e 64 20 74 69     rent date and ti
10009bfc:	6d 65 2c 00 61 6e 64 20 74 68 65 6e 20 70 72 65     me,.and then pre
10009c0c:	73 73 20 45 4e 54 45 52 2e 00 44 44 2f 4d 4d 2f     ss ENTER..DD/MM/
10009c1c:	59 59 59 59 20 48 48 3a 4d 4d 3a 53 53 00 45 53     YYYY HH:MM:SS.ES
10009c2c:	43 3a 20 47 6f 20 62 61 63 6b 20 61 20 73 63 72     C: Go back a scr
10009c3c:	65 65 6e 00 50 6c 65 61 73 65 20 73 65 6c 65 63     een.Please selec
10009c4c:	74 20 79 6f 75 72 20 74 69 6d 65 7a 6f 6e 65 20     t your timezone 
10009c5c:	61 6e 64 20 74 68 65 6e 20 70 72 65 73 73 20 45     and then press E
10009c6c:	4e 54 45 52 2e 00 55 73 65 72 20 49 6e 74 65 72     NTER..User Inter
10009c7c:	66 61 63 65 00 00 00 00 50 6c 65 61 73 65 20 73     face....Please s
10009c8c:	65 6c 65 63 74 20 74 68 65 20 75 73 65 72 20 69     elect the user i
10009c9c:	6e 74 65 72 66 61 63 65 20 79 6f 75 20 77 61 6e     nterface you wan
10009cac:	74 20 42 61 6e 61 6e 61 00 00 00 00 74 6f 20 62     t Banana....to b
10009cbc:	6f 6f 74 20 69 6e 74 6f 20 62 79 20 64 65 66 61     oot into by defa
10009ccc:	75 6c 74 20 77 68 65 6e 20 79 6f 75 20 73 74 61     ult when you sta
10009cdc:	72 74 20 74 68 65 20 63 6f 6d 70 75 74 65 72 2e     rt the computer.
10009cec:	00 49 6e 76 61 6c 69 64 20 50 72 6f 64 75 63 74     .Invalid Product
10009cfc:	20 4b 65 79 00 00 00 00 59 6f 75 20 64 6f 20 6e      Key....You do n
10009d0c:	6f 74 20 68 61 76 65 20 61 20 76 61 6c 69 64 20     ot have a valid 
10009d1c:	70 72 6f 64 75 63 74 20 6b 65 79 2e 0a 00 00 00     product key.....
10009d2c:	59 6f 75 20 6e 65 65 64 20 61 20 76 61 6c 69 64     You need a valid
10009d3c:	20 70 72 6f 64 75 63 74 20 6b 65 79 20 69 6e 20      product key in 
10009d4c:	6f 72 64 65 72 20 74 6f 00 75 73 65 20 42 61 6e     order to.use Ban
10009d5c:	61 6e 61 2e 00 00 00 00 50 72 65 73 73 20 45 4e     ana.....Press EN
10009d6c:	54 45 52 20 74 6f 20 72 65 2d 65 6e 74 65 72 20     TER to re-enter 
10009d7c:	79 6f 75 72 20 70 72 6f 64 75 63 74 20 6b 65 79     your product key
10009d8c:	2e 00 50 72 6f 64 75 63 74 20 4b 65 79 00 00 00     ..Product Key...
10009d9c:	50 6c 65 61 73 65 20 65 6e 74 65 72 20 79 6f 75     Please enter you
10009dac:	72 20 70 72 6f 64 75 63 74 20 6b 65 79 20 62 65     r product key be
10009dbc:	6c 6f 77 2c 00 00 00 00 54 68 65 20 65 6e 74 65     low,....The ente
10009dcc:	72 65 64 20 70 72 6f 64 75 63 74 20 6b 65 79 20     red product key 
10009ddc:	77 61 73 20 69 6e 76 61 6c 69 64 2e 00 00 00 00     was invalid.....
10009dec:	50 72 65 73 73 20 61 6e 79 20 6b 65 79 20 74 6f     Press any key to
10009dfc:	20 63 6f 6e 74 69 6e 75 65 20 61 6e 64 20 74 68      continue and th
10009e0c:	65 6e 00 00 65 6e 74 65 72 20 74 68 65 20 70 72     en..enter the pr
10009e1c:	6f 64 75 63 74 20 6b 65 79 20 63 6f 72 72 65 63     oduct key correc
10009e2c:	74 6c 79 2e 00 46 69 6e 61 6c 69 73 69 6e 67 20     tly..Finalising 
10009e3c:	49 6e 73 74 61 6c 6c 61 74 69 6f 6e 00 40 6d 65     Installation.@me
10009e4c:	6d 6f 72 79 3a 73 77 61 70 66 69 6c 65 00 73 79     mory:swapfile.sy
10009e5c:	73 74 65 6d 00 43 3a 2f 42 61 6e 61 6e 61 2f 52     stem.C:/Banana/R
10009e6c:	65 67 69 73 74 72 79 2f 53 79 73 74 65 6d 00 43     egistry/System.C
10009e7c:	3a 2f 42 61 6e 61 6e 61 2f 52 65 67 69 73 74 72     :/Banana/Registr
10009e8c:	79 2f 55 73 65 72 00 00 43 3a 2f 42 61 6e 61 6e     y/User..C:/Banan
10009e9c:	61 2f 52 65 67 69 73 74 72 79 2f 44 65 66 61 75     a/Registry/Defau
10009eac:	6c 74 53 79 73 74 65 6d 00 00 00 00 20 42 6f 6f     ltSystem.... Boo
10009ebc:	74 20 74 6f 20 63 6f 6d 6d 61 6e 64 20 6c 69 6e     t to command lin
10009ecc:	65 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20     e               
10009edc:	00 00 00 00 20 42 6f 6f 74 20 74 6f 20 67 72 61     .... Boot to gra
10009eec:	70 68 69 63 61 6c 20 69 6e 74 65 72 66 61 63 65     phical interface
10009efc:	20 28 56 47 41 29 20 20 00 00 00 00 20 42 6f 6f      (VGA)  .... Boo
10009f0c:	74 20 74 6f 20 67 72 61 70 68 69 63 61 6c 20 69     t to graphical i
10009f1c:	6e 74 65 72 66 61 63 65 20 28 56 45 53 41 29 20     nterface (VESA) 
10009f2c:	00 00 00 00 b8 9e 00 10 e0 9e 00 10 08 9f 00 10     ................	10009f30: R_386_32	.text
	10009f34: R_386_32	.text
	10009f38: R_386_32	.text
10009f3c:	4c 6f 61 64 69 6e 67 20 65 78 74 65 6e 73 69 6f     Loading extensio
10009f4c:	6e 73 2e 2e 2e 00 0a 0a 3a 0a 00 2f 25 73 0a 00     ns......:../%s..
10009f5c:	43 3a 2f 42 61 6e 61 6e 61 2f 53 79 73 74 65 6d     C:/Banana/System
10009f6c:	2f 73 65 74 75 70 69 73 64 2e 6f 6e 65 00 53 59     /setupisd.one.SY
10009f7c:	53 49 4e 49 54 20 46 41 49 4c 55 52 45 00 43 3a     SINIT FAILURE.C:
10009f8c:	2f 42 61 6e 61 6e 61 2f 53 79 73 74 65 6d 2f 63     /Banana/System/c
10009f9c:	6f 6d 6d 61 6e 64 2e 65 78 65 00 43 3a 2f 44 45     ommand.exe.C:/DE
10009fac:	2e 42 55 47 00 43 3a 2f 42 61 6e 61 6e 61 2f 44     .BUG.C:/Banana/D
10009fbc:	72 69 76 65 72 73 2f 00 43 3a 2f 42 61 6e 61 6e     rivers/.C:/Banan
10009fcc:	61 2f 53 79 73 74 65 6d 2f 00 43 3a 2f 42 61 6e     a/System/.C:/Ban
10009fdc:	61 6e 61 2f 52 65 67 69 73 74 72 79 2f 00 00 00     ana/Registry/...
10009fec:	43 3a 2f 42 61 6e 61 6e 61 2f 52 65 67 69 73 74     C:/Banana/Regist
10009ffc:	72 79 2f 53 79 73 74 65 6d 2f 53 59 53 54 45 4d     ry/System/SYSTEM
1000a00c:	2e 52 45 47 00 42 41 4e 41 4e 41 00 72 65 67 73     .REG.BANANA.regs
1000a01c:	61 66 65 6e 61 6d 65 20 3d 20 25 73 0a 00 42 41     afename = %s..BA
1000a02c:	4e 41 4e 41 2f 55 53 45 52 53 2f 00 75 73 65 72     NANA/USERS/.user
1000a03c:	42 61 73 65 50 61 74 68 20 3d 20 25 73 0a 00 53     BasePath = %s..S
1000a04c:	45 54 55 50 00 42 4f 4f 54 00 55 53 45 52 53 00     ETUP.BOOT.USERS.
1000a05c:	42 41 4e 41 4e 41 2f 55 53 45 52 53 00 42 41 4e     BANANA/USERS.BAN
1000a06c:	41 4e 41 2f 53 45 54 55 50 00 4e 41 4d 45 00 43     ANA/SETUP.NAME.C
1000a07c:	4f 4d 50 41 4e 59 00 50 52 4f 44 55 43 54 4b 45     OMPANY.PRODUCTKE
1000a08c:	59 00 53 41 4c 54 00 50 41 53 53 57 4f 52 44 00     Y.SALT.PASSWORD.
1000a09c:	44 49 53 50 4c 41 59 4e 41 4d 45 00 42 41 4e 41     DISPLAYNAME.BANA
1000a0ac:	4e 41 2f 42 4f 4f 54 00 41 55 54 4f 47 55 49 00     NA/BOOT.AUTOGUI.
1000a0bc:	42 41 4e 41 4e 41 2f 53 45 54 55 50 2f 4e 41 4d     BANANA/SETUP/NAM
1000a0cc:	45 00 42 41 4e 41 4e 41 2f 53 45 54 55 50 2f 43     E.BANANA/SETUP/C
1000a0dc:	4f 4d 50 41 4e 59 00 42 41 4e 41 4e 41 2f 53 45     OMPANY.BANANA/SE
1000a0ec:	54 55 50 2f 50 52 4f 44 55 43 54 4b 45 59 00 2f     TUP/PRODUCTKEY./
1000a0fc:	50 41 53 53 57 4f 52 44 00 2f 53 41 4c 54 00 2f     PASSWORD./SALT./
1000a10c:	44 49 53 50 4c 41 59 4e 41 4d 45 00 43 3a 2f 42     DISPLAYNAME.C:/B
1000a11c:	61 6e 61 6e 61 2f 53 79 73 74 65 6d 2f 4b 45 52     anana/System/KER
1000a12c:	4e 45 4c 33 32 2e 45 58 45 00 43 3a 2f 42 61 6e     NEL32.EXE.C:/Ban
1000a13c:	61 6e 61 2f 53 79 73 74 65 6d 2f 4b 52 4e 4c 42     ana/System/KRNLB
1000a14c:	4b 55 50 2e 45 58 45 00 43 3a 2f 42 61 6e 61 6e     KUP.EXE.C:/Banan
1000a15c:	61 2f 53 79 73 74 65 6d 2f 4b 52 4e 4c 50 32 2e     a/System/KRNLP2.
1000a16c:	45 58 45 00 54 68 65 20 69 6e 73 74 61 6c 6c 61     EXE.The installa
1000a17c:	74 69 6f 6e 20 68 61 73 20 62 65 65 6e 20 63 6f     tion has been co
1000a18c:	6d 70 6c 65 74 65 64 2e 0a 00 00 00 50 6c 65 61     mpleted.....Plea
1000a19c:	73 65 20 70 72 65 73 73 20 45 4e 54 45 52 20 74     se press ENTER t
1000a1ac:	6f 20 72 65 73 74 61 72 74 20 79 6f 75 72 20 63     o restart your c
1000a1bc:	6f 6d 70 75 74 65 72 00 61 6e 64 20 73 74 61 72     omputer.and star
1000a1cc:	74 20 42 61 6e 61 6e 61 2e 00 00 00 50 4c 45 41     t Banana....PLEA
1000a1dc:	53 45 20 4d 41 4e 55 41 4c 4c 59 20 52 45 53 54     SE MANUALLY REST
1000a1ec:	41 52 54 20 59 4f 55 52 20 43 4f 4d 50 55 54 45     ART YOUR COMPUTE
1000a1fc:	52 00 42 41 4e 41 4e 41 2f 42 4f 4f 54 2f 41 55     R.BANANA/BOOT/AU
1000a20c:	54 4f 47 55 49 00 50 72 6f 64 75 63 74 20 4b 65     TOGUI.Product Ke
1000a21c:	79 20 55 70 64 61 74 65 64 00 00 00 59 6f 75 72     y Updated...Your
1000a22c:	20 70 72 6f 64 75 63 74 20 6b 65 79 20 68 61 73      product key has
1000a23c:	20 62 65 65 6e 20 75 70 64 61 74 65 64 2e 0a 00      been updated...
1000a24c:	4c 6f 67 69 6e 00 50 6c 65 61 73 65 20 73 65 6c     Login.Please sel
1000a25c:	65 63 74 20 79 6f 75 72 20 75 73 65 72 6e 61 6d     ect your usernam
1000a26c:	65 2e 00 00 50 6c 65 61 73 65 20 73 65 6c 65 63     e...Please selec
1000a27c:	74 20 79 6f 75 72 20 75 73 65 72 6e 61 6d 65 20     t your username 
1000a28c:	61 6e 64 20 70 72 65 73 73 20 45 4e 54 45 52 2e     and press ENTER.
1000a29c:	00 00 00 00 50 6c 65 61 73 65 20 74 79 70 65 20     ....Please type 
1000a2ac:	79 6f 75 72 20 70 61 73 73 77 6f 72 64 20 61 6e     your password an
1000a2bc:	64 20 70 72 65 73 73 20 45 4e 54 45 52 00 6f 72     d press ENTER.or
1000a2cc:	20 70 72 65 73 73 20 45 53 43 20 74 6f 20 67 6f      press ESC to go
1000a2dc:	20 62 61 63 6b 2e 00 00 52 45 51 55 49 52 45 44      back...REQUIRED
1000a2ec:	3a 20 25 73 0a 47 4f 54 3a 20 25 73 0a 53 41 4c     : %s.GOT: %s.SAL
1000a2fc:	54 3a 20 25 73 0a 00 00 49 74 20 69 73 20 73 61     T: %s...It is sa
1000a30c:	66 65 20 74 6f 20 74 75 72 6e 20 6f 66 66 20 79     fe to turn off y
1000a31c:	6f 75 72 20 50 43 00 63 61 6c 6c 00 43 3a 2f 42     our PC.call.C:/B
1000a32c:	61 6e 61 6e 61 2f 53 79 73 74 65 6d 2f 69 6e 69     anana/System/ini
1000a33c:	74 2e 62 61 74 00 00 00 8a 9f 00 10 23 a3 00 10     t.bat.......#...	1000a344: R_386_32	.text
	1000a348: R_386_32	.text
1000a34c:	28 a3 00 10 00 00 00 00                             (.......	1000a34c: R_386_32	.text
