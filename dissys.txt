
packages/system/32/0001/system.dll:     file format elf32-i386


Disassembly of section .text:

10000000 <beginx(void*)>:
10000000:	55                   	push   ebp
10000001:	89 e5                	mov    ebp,esp
10000003:	83 ec 08             	sub    esp,0x8
10000006:	83 ec 0c             	sub    esp,0xc
10000009:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000000c:	e8 fc ff ff ff       	call   1000000d <beginx(void*)+0xd>	1000000d: R_386_PC32	begin(void*)
10000011:	83 c4 10             	add    esp,0x10
10000014:	90                   	nop
10000015:	c9                   	leave  
10000016:	c3                   	ret    

10000017 <memcmp(void*, void*, unsigned long)>:
10000017:	55                   	push   ebp
10000018:	89 e5                	mov    ebp,esp
1000001a:	83 ec 10             	sub    esp,0x10
1000001d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000020:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
10000023:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000026:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
10000029:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
1000002c:	8d 50 ff             	lea    edx,[eax-0x1]
1000002f:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
10000032:	85 c0                	test   eax,eax
10000034:	74 12                	je     10000048 <memcmp(void*, void*, unsigned long)+0x31>
10000036:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000039:	8a 10                	mov    dl,BYTE PTR [eax]
1000003b:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
1000003e:	8a 00                	mov    al,BYTE PTR [eax]
10000040:	38 c2                	cmp    dl,al
10000042:	75 04                	jne    10000048 <memcmp(void*, void*, unsigned long)+0x31>
10000044:	b0 01                	mov    al,0x1
10000046:	eb 02                	jmp    1000004a <memcmp(void*, void*, unsigned long)+0x33>
10000048:	b0 00                	mov    al,0x0
1000004a:	84 c0                	test   al,al
1000004c:	74 08                	je     10000056 <memcmp(void*, void*, unsigned long)+0x3f>
1000004e:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
10000051:	ff 45 f8             	inc    DWORD PTR [ebp-0x8]
10000054:	eb d3                	jmp    10000029 <memcmp(void*, void*, unsigned long)+0x12>
10000056:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000059:	8a 00                	mov    al,BYTE PTR [eax]
1000005b:	0f b6 d0             	movzx  edx,al
1000005e:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
10000061:	8a 00                	mov    al,BYTE PTR [eax]
10000063:	0f b6 c0             	movzx  eax,al
10000066:	29 c2                	sub    edx,eax
10000068:	89 d0                	mov    eax,edx
1000006a:	c9                   	leave  
1000006b:	c3                   	ret    

1000006c <memmove>:
1000006c:	55                   	push   ebp
1000006d:	89 e5                	mov    ebp,esp
1000006f:	83 ec 10             	sub    esp,0x10
10000072:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000075:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
10000078:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
1000007b:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
1000007e:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
10000081:	3b 45 fc             	cmp    eax,DWORD PTR [ebp-0x4]
10000084:	76 1b                	jbe    100000a1 <memmove+0x35>
10000086:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
1000008a:	74 46                	je     100000d2 <memmove+0x66>
1000008c:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
1000008f:	8a 10                	mov    dl,BYTE PTR [eax]
10000091:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000094:	88 10                	mov    BYTE PTR [eax],dl
10000096:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
10000099:	ff 45 f8             	inc    DWORD PTR [ebp-0x8]
1000009c:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
1000009f:	eb e5                	jmp    10000086 <memmove+0x1a>
100000a1:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
100000a4:	3b 45 fc             	cmp    eax,DWORD PTR [ebp-0x4]
100000a7:	73 29                	jae    100000d2 <memmove+0x66>
100000a9:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
100000ac:	48                   	dec    eax
100000ad:	01 45 fc             	add    DWORD PTR [ebp-0x4],eax
100000b0:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
100000b3:	48                   	dec    eax
100000b4:	01 45 f8             	add    DWORD PTR [ebp-0x8],eax
100000b7:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
100000bb:	74 15                	je     100000d2 <memmove+0x66>
100000bd:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
100000c0:	8a 10                	mov    dl,BYTE PTR [eax]
100000c2:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100000c5:	88 10                	mov    BYTE PTR [eax],dl
100000c7:	ff 4d fc             	dec    DWORD PTR [ebp-0x4]
100000ca:	ff 4d f8             	dec    DWORD PTR [ebp-0x8]
100000cd:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
100000d0:	eb e5                	jmp    100000b7 <memmove+0x4b>
100000d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100000d5:	c9                   	leave  
100000d6:	c3                   	ret    

100000d7 <memset>:
100000d7:	55                   	push   ebp
100000d8:	89 e5                	mov    ebp,esp
100000da:	83 ec 10             	sub    esp,0x10
100000dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100000e0:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
100000e3:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
100000e7:	74 12                	je     100000fb <memset+0x24>
100000e9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100000ec:	88 c2                	mov    dl,al
100000ee:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100000f1:	88 10                	mov    BYTE PTR [eax],dl
100000f3:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
100000f6:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
100000f9:	eb e8                	jmp    100000e3 <memset+0xc>
100000fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100000fe:	c9                   	leave  
100000ff:	c3                   	ret    

10000100 <strlen>:
10000100:	55                   	push   ebp
10000101:	89 e5                	mov    ebp,esp
10000103:	83 ec 10             	sub    esp,0x10
10000106:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
1000010d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000110:	8a 00                	mov    al,BYTE PTR [eax]
10000112:	84 c0                	test   al,al
10000114:	74 0c                	je     10000122 <strlen+0x22>
10000116:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000119:	40                   	inc    eax
1000011a:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
1000011d:	ff 45 08             	inc    DWORD PTR [ebp+0x8]
10000120:	eb eb                	jmp    1000010d <strlen+0xd>
10000122:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000125:	c9                   	leave  
10000126:	c3                   	ret    

10000127 <strpbrk(char const*, char const*)>:
10000127:	55                   	push   ebp
10000128:	89 e5                	mov    ebp,esp
1000012a:	83 ec 10             	sub    esp,0x10
1000012d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000130:	8a 00                	mov    al,BYTE PTR [eax]
10000132:	84 c0                	test   al,al
10000134:	74 30                	je     10000166 <strpbrk(char const*, char const*)+0x3f>
10000136:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000139:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
1000013c:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000013f:	8a 00                	mov    al,BYTE PTR [eax]
10000141:	84 c0                	test   al,al
10000143:	74 18                	je     1000015d <strpbrk(char const*, char const*)+0x36>
10000145:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000148:	8a 10                	mov    dl,BYTE PTR [eax]
1000014a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000014d:	8a 00                	mov    al,BYTE PTR [eax]
1000014f:	38 c2                	cmp    dl,al
10000151:	75 05                	jne    10000158 <strpbrk(char const*, char const*)+0x31>
10000153:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000156:	eb 13                	jmp    1000016b <strpbrk(char const*, char const*)+0x44>
10000158:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
1000015b:	eb df                	jmp    1000013c <strpbrk(char const*, char const*)+0x15>
1000015d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000160:	40                   	inc    eax
10000161:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
10000164:	eb c7                	jmp    1000012d <strpbrk(char const*, char const*)+0x6>
10000166:	b8 00 00 00 00       	mov    eax,0x0
1000016b:	c9                   	leave  
1000016c:	c3                   	ret    

1000016d <strtok>:
1000016d:	55                   	push   ebp
1000016e:	89 e5                	mov    ebp,esp
10000170:	83 ec 10             	sub    esp,0x10
10000173:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000176:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
10000179:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000017c:	85 c0                	test   eax,eax
1000017e:	75 18                	jne    10000198 <strtok+0x2b>
10000180:	a1 00 00 00 00       	mov    eax,ds:0x0	10000181: R_386_32	SavedPtr
10000185:	85 c0                	test   eax,eax
10000187:	75 07                	jne    10000190 <strtok+0x23>
10000189:	b8 00 00 00 00       	mov    eax,0x0
1000018e:	eb 6f                	jmp    100001ff <strtok+0x92>
10000190:	a1 00 00 00 00       	mov    eax,ds:0x0	10000191: R_386_32	SavedPtr
10000195:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
10000198:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000019b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
1000019e:	50                   	push   eax
1000019f:	e8 fc ff ff ff       	call   100001a0 <strtok+0x33>	100001a0: R_386_PC32	strpbrk(char const*, char const*)
100001a4:	83 c4 08             	add    esp,0x8
100001a7:	a3 00 00 00 00       	mov    ds:0x0,eax	100001a8: R_386_32	SavedPtr
100001ac:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	100001ae: R_386_32	SavedPtr
100001b2:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100001b5:	39 c2                	cmp    edx,eax
100001b7:	75 22                	jne    100001db <strtok+0x6e>
100001b9:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100001bc:	8d 50 01             	lea    edx,[eax+0x1]
100001bf:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
100001c2:	c6 00 00             	mov    BYTE PTR [eax],0x0
100001c5:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100001c8:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
100001cb:	50                   	push   eax
100001cc:	e8 fc ff ff ff       	call   100001cd <strtok+0x60>	100001cd: R_386_PC32	strpbrk(char const*, char const*)
100001d1:	83 c4 08             	add    esp,0x8
100001d4:	a3 00 00 00 00       	mov    ds:0x0,eax	100001d5: R_386_32	SavedPtr
100001d9:	eb d1                	jmp    100001ac <strtok+0x3f>
100001db:	a1 00 00 00 00       	mov    eax,ds:0x0	100001dc: R_386_32	SavedPtr
100001e0:	85 c0                	test   eax,eax
100001e2:	74 16                	je     100001fa <strtok+0x8d>
100001e4:	a1 00 00 00 00       	mov    eax,ds:0x0	100001e5: R_386_32	SavedPtr
100001e9:	8d 50 01             	lea    edx,[eax+0x1]
100001ec:	89 15 00 00 00 00    	mov    DWORD PTR ds:0x0,edx	100001ee: R_386_32	SavedPtr
100001f2:	c6 00 00             	mov    BYTE PTR [eax],0x0
100001f5:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100001f8:	eb 05                	jmp    100001ff <strtok+0x92>
100001fa:	b8 00 00 00 00       	mov    eax,0x0
100001ff:	c9                   	leave  
10000200:	c3                   	ret    

10000201 <strcpy>:
10000201:	55                   	push   ebp
10000202:	89 e5                	mov    ebp,esp
10000204:	83 ec 10             	sub    esp,0x10
10000207:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000020a:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
1000020d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000210:	8a 00                	mov    al,BYTE PTR [eax]
10000212:	84 c0                	test   al,al
10000214:	74 12                	je     10000228 <strcpy+0x27>
10000216:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000219:	8a 10                	mov    dl,BYTE PTR [eax]
1000021b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000021e:	88 10                	mov    BYTE PTR [eax],dl
10000220:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
10000223:	ff 45 0c             	inc    DWORD PTR [ebp+0xc]
10000226:	eb e5                	jmp    1000020d <strcpy+0xc>
10000228:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000022b:	c6 00 00             	mov    BYTE PTR [eax],0x0
1000022e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000231:	c9                   	leave  
10000232:	c3                   	ret    

10000233 <strncpyxx(char*, char const*, unsigned long)>:
10000233:	55                   	push   ebp
10000234:	89 e5                	mov    ebp,esp
10000236:	83 ec 10             	sub    esp,0x10
10000239:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000023c:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
1000023f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000242:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
10000245:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
10000249:	74 23                	je     1000026e <strncpyxx(char*, char const*, unsigned long)+0x3b>
1000024b:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
1000024e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10000251:	8d 42 01             	lea    eax,[edx+0x1]
10000254:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
10000257:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000025a:	8d 48 01             	lea    ecx,[eax+0x1]
1000025d:	89 4d fc             	mov    DWORD PTR [ebp-0x4],ecx
10000260:	8a 12                	mov    dl,BYTE PTR [edx]
10000262:	88 10                	mov    BYTE PTR [eax],dl
10000264:	8a 00                	mov    al,BYTE PTR [eax]
10000266:	84 c0                	test   al,al
10000268:	74 04                	je     1000026e <strncpyxx(char*, char const*, unsigned long)+0x3b>
1000026a:	b0 01                	mov    al,0x1
1000026c:	eb 02                	jmp    10000270 <strncpyxx(char*, char const*, unsigned long)+0x3d>
1000026e:	b0 00                	mov    al,0x0
10000270:	84 c0                	test   al,al
10000272:	74 02                	je     10000276 <strncpyxx(char*, char const*, unsigned long)+0x43>
10000274:	eb cf                	jmp    10000245 <strncpyxx(char*, char const*, unsigned long)+0x12>
10000276:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
10000279:	8d 50 ff             	lea    edx,[eax-0x1]
1000027c:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
1000027f:	85 c0                	test   eax,eax
10000281:	0f 95 c0             	setne  al
10000284:	84 c0                	test   al,al
10000286:	74 0b                	je     10000293 <strncpyxx(char*, char const*, unsigned long)+0x60>
10000288:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000028b:	c6 00 00             	mov    BYTE PTR [eax],0x0
1000028e:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
10000291:	eb e3                	jmp    10000276 <strncpyxx(char*, char const*, unsigned long)+0x43>
10000293:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000296:	c9                   	leave  
10000297:	c3                   	ret    

10000298 <strcmp>:
10000298:	55                   	push   ebp
10000299:	89 e5                	mov    ebp,esp
1000029b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000029e:	8a 10                	mov    dl,BYTE PTR [eax]
100002a0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100002a3:	8a 00                	mov    al,BYTE PTR [eax]
100002a5:	38 c2                	cmp    dl,al
100002a7:	75 20                	jne    100002c9 <strcmp+0x31>
100002a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002ac:	8d 50 01             	lea    edx,[eax+0x1]
100002af:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
100002b2:	8a 00                	mov    al,BYTE PTR [eax]
100002b4:	84 c0                	test   al,al
100002b6:	0f 94 c0             	sete   al
100002b9:	84 c0                	test   al,al
100002bb:	74 07                	je     100002c4 <strcmp+0x2c>
100002bd:	b8 00 00 00 00       	mov    eax,0x0
100002c2:	eb 19                	jmp    100002dd <strcmp+0x45>
100002c4:	ff 45 0c             	inc    DWORD PTR [ebp+0xc]
100002c7:	eb d2                	jmp    1000029b <strcmp+0x3>
100002c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002cc:	8a 00                	mov    al,BYTE PTR [eax]
100002ce:	0f b6 d0             	movzx  edx,al
100002d1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100002d4:	8a 00                	mov    al,BYTE PTR [eax]
100002d6:	0f b6 c0             	movzx  eax,al
100002d9:	29 c2                	sub    edx,eax
100002db:	89 d0                	mov    eax,edx
100002dd:	5d                   	pop    ebp
100002de:	c3                   	ret    

100002df <strchr(char const*, int)>:
100002df:	55                   	push   ebp
100002e0:	89 e5                	mov    ebp,esp
100002e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002e5:	8a 00                	mov    al,BYTE PTR [eax]
100002e7:	84 c0                	test   al,al
100002e9:	74 16                	je     10000301 <strchr(char const*, int)+0x22>
100002eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002ee:	8a 00                	mov    al,BYTE PTR [eax]
100002f0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
100002f3:	38 d0                	cmp    al,dl
100002f5:	75 05                	jne    100002fc <strchr(char const*, int)+0x1d>
100002f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002fa:	eb 0a                	jmp    10000306 <strchr(char const*, int)+0x27>
100002fc:	ff 45 08             	inc    DWORD PTR [ebp+0x8]
100002ff:	eb e1                	jmp    100002e2 <strchr(char const*, int)+0x3>
10000301:	b8 00 00 00 00       	mov    eax,0x0
10000306:	5d                   	pop    ebp
10000307:	c3                   	ret    

10000308 <strncmp>:
10000308:	55                   	push   ebp
10000309:	89 e5                	mov    ebp,esp
1000030b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
1000030e:	8d 50 ff             	lea    edx,[eax-0x1]
10000311:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
10000314:	85 c0                	test   eax,eax
10000316:	74 12                	je     1000032a <strncmp+0x22>
10000318:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000031b:	8a 10                	mov    dl,BYTE PTR [eax]
1000031d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000320:	8a 00                	mov    al,BYTE PTR [eax]
10000322:	38 c2                	cmp    dl,al
10000324:	75 04                	jne    1000032a <strncmp+0x22>
10000326:	b0 01                	mov    al,0x1
10000328:	eb 02                	jmp    1000032c <strncmp+0x24>
1000032a:	b0 00                	mov    al,0x0
1000032c:	84 c0                	test   al,al
1000032e:	74 20                	je     10000350 <strncmp+0x48>
10000330:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000333:	8d 50 01             	lea    edx,[eax+0x1]
10000336:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
10000339:	8a 00                	mov    al,BYTE PTR [eax]
1000033b:	84 c0                	test   al,al
1000033d:	0f 94 c0             	sete   al
10000340:	84 c0                	test   al,al
10000342:	74 07                	je     1000034b <strncmp+0x43>
10000344:	b8 00 00 00 00       	mov    eax,0x0
10000349:	eb 19                	jmp    10000364 <strncmp+0x5c>
1000034b:	ff 45 0c             	inc    DWORD PTR [ebp+0xc]
1000034e:	eb bb                	jmp    1000030b <strncmp+0x3>
10000350:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000353:	8a 00                	mov    al,BYTE PTR [eax]
10000355:	0f b6 d0             	movzx  edx,al
10000358:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
1000035b:	8a 00                	mov    al,BYTE PTR [eax]
1000035d:	0f b6 c0             	movzx  eax,al
10000360:	29 c2                	sub    edx,eax
10000362:	89 d0                	mov    eax,edx
10000364:	5d                   	pop    ebp
10000365:	c3                   	ret    

10000366 <strcat>:
10000366:	55                   	push   ebp
10000367:	89 e5                	mov    ebp,esp
10000369:	83 ec 10             	sub    esp,0x10
1000036c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000036f:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
10000372:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000375:	8d 50 01             	lea    edx,[eax+0x1]
10000378:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
1000037b:	8a 00                	mov    al,BYTE PTR [eax]
1000037d:	84 c0                	test   al,al
1000037f:	0f 95 c0             	setne  al
10000382:	84 c0                	test   al,al
10000384:	74 02                	je     10000388 <strcat+0x22>
10000386:	eb ea                	jmp    10000372 <strcat+0xc>
10000388:	ff 4d fc             	dec    DWORD PTR [ebp-0x4]
1000038b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
1000038e:	8d 42 01             	lea    eax,[edx+0x1]
10000391:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
10000394:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000397:	8d 48 01             	lea    ecx,[eax+0x1]
1000039a:	89 4d fc             	mov    DWORD PTR [ebp-0x4],ecx
1000039d:	8a 12                	mov    dl,BYTE PTR [edx]
1000039f:	88 10                	mov    BYTE PTR [eax],dl
100003a1:	8a 00                	mov    al,BYTE PTR [eax]
100003a3:	84 c0                	test   al,al
100003a5:	0f 95 c0             	setne  al
100003a8:	84 c0                	test   al,al
100003aa:	74 02                	je     100003ae <strcat+0x48>
100003ac:	eb dd                	jmp    1000038b <strcat+0x25>
100003ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100003b1:	c9                   	leave  
100003b2:	c3                   	ret    

100003b3 <strncat(char*, char const*, unsigned long)>:
100003b3:	55                   	push   ebp
100003b4:	89 e5                	mov    ebp,esp
100003b6:	83 ec 10             	sub    esp,0x10
100003b9:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
100003bd:	74 5c                	je     1000041b <strncat(char*, char const*, unsigned long)+0x68>
100003bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100003c2:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
100003c5:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100003c8:	8d 50 01             	lea    edx,[eax+0x1]
100003cb:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
100003ce:	8a 00                	mov    al,BYTE PTR [eax]
100003d0:	84 c0                	test   al,al
100003d2:	0f 95 c0             	setne  al
100003d5:	84 c0                	test   al,al
100003d7:	74 02                	je     100003db <strncat(char*, char const*, unsigned long)+0x28>
100003d9:	eb ea                	jmp    100003c5 <strncat(char*, char const*, unsigned long)+0x12>
100003db:	ff 4d fc             	dec    DWORD PTR [ebp-0x4]
100003de:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
100003e1:	8d 42 01             	lea    eax,[edx+0x1]
100003e4:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
100003e7:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100003ea:	8d 48 01             	lea    ecx,[eax+0x1]
100003ed:	89 4d fc             	mov    DWORD PTR [ebp-0x4],ecx
100003f0:	8a 12                	mov    dl,BYTE PTR [edx]
100003f2:	88 10                	mov    BYTE PTR [eax],dl
100003f4:	8a 00                	mov    al,BYTE PTR [eax]
100003f6:	84 c0                	test   al,al
100003f8:	74 0d                	je     10000407 <strncat(char*, char const*, unsigned long)+0x54>
100003fa:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
100003fd:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
10000401:	74 04                	je     10000407 <strncat(char*, char const*, unsigned long)+0x54>
10000403:	b0 01                	mov    al,0x1
10000405:	eb 02                	jmp    10000409 <strncat(char*, char const*, unsigned long)+0x56>
10000407:	b0 00                	mov    al,0x0
10000409:	84 c0                	test   al,al
1000040b:	74 02                	je     1000040f <strncat(char*, char const*, unsigned long)+0x5c>
1000040d:	eb cf                	jmp    100003de <strncat(char*, char const*, unsigned long)+0x2b>
1000040f:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
10000413:	75 06                	jne    1000041b <strncat(char*, char const*, unsigned long)+0x68>
10000415:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000418:	c6 00 00             	mov    BYTE PTR [eax],0x0
1000041b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000041e:	c9                   	leave  
1000041f:	c3                   	ret    

10000420 <strstr(char*, char*)>:
10000420:	55                   	push   ebp
10000421:	89 e5                	mov    ebp,esp
10000423:	83 ec 10             	sub    esp,0x10
10000426:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10000429:	e8 fc ff ff ff       	call   1000042a <strstr(char*, char*)+0xa>	1000042a: R_386_PC32	strlen
1000042e:	83 c4 04             	add    esp,0x4
10000431:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
10000434:	83 7d fc 00          	cmp    DWORD PTR [ebp-0x4],0x0
10000438:	75 05                	jne    1000043f <strstr(char*, char*)+0x1f>
1000043a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000043d:	eb 3f                	jmp    1000047e <strstr(char*, char*)+0x5e>
1000043f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000442:	50                   	push   eax
10000443:	e8 fc ff ff ff       	call   10000444 <strstr(char*, char*)+0x24>	10000444: R_386_PC32	strlen
10000448:	83 c4 04             	add    esp,0x4
1000044b:	39 45 fc             	cmp    DWORD PTR [ebp-0x4],eax
1000044e:	77 29                	ja     10000479 <strstr(char*, char*)+0x59>
10000450:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000453:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
10000456:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10000459:	50                   	push   eax
1000045a:	e8 fc ff ff ff       	call   1000045b <strstr(char*, char*)+0x3b>	1000045b: R_386_PC32	memcmp(void*, void*, unsigned long)
1000045f:	83 c4 0c             	add    esp,0xc
10000462:	85 c0                	test   eax,eax
10000464:	0f 94 c0             	sete   al
10000467:	84 c0                	test   al,al
10000469:	74 05                	je     10000470 <strstr(char*, char*)+0x50>
1000046b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000046e:	eb 0e                	jmp    1000047e <strstr(char*, char*)+0x5e>
10000470:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000473:	40                   	inc    eax
10000474:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
10000477:	eb c6                	jmp    1000043f <strstr(char*, char*)+0x1f>
10000479:	b8 00 00 00 00       	mov    eax,0x0
1000047e:	c9                   	leave  
1000047f:	c3                   	ret    

10000480 <rmtree(char*)>:
10000480:	55                   	push   ebp
10000481:	89 e5                	mov    ebp,esp
10000483:	53                   	push   ebx
10000484:	81 ec 64 02 00 00    	sub    esp,0x264
1000048a:	68 2c 01 00 00       	push   0x12c
1000048f:	6a 00                	push   0x0
10000491:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
10000497:	50                   	push   eax
10000498:	e8 fc ff ff ff       	call   10000499 <rmtree(char*)+0x19>	10000499: R_386_PC32	memset
1000049d:	83 c4 0c             	add    esp,0xc
100004a0:	8d 85 a8 fd ff ff    	lea    eax,[ebp-0x258]
100004a6:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
100004a9:	83 ec 0c             	sub    esp,0xc
100004ac:	68 14 01 00 00       	push   0x114
100004b1:	e8 fc ff ff ff       	call   100004b2 <rmtree(char*)+0x32>	100004b2: R_386_PC32	operator new(unsigned long)
100004b6:	83 c4 10             	add    esp,0x10
100004b9:	89 c3                	mov    ebx,eax
100004bb:	b8 00 20 00 c2       	mov    eax,0xc2002000
100004c0:	8b 00                	mov    eax,DWORD PTR [eax]
100004c2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
100004c5:	83 ec 04             	sub    esp,0x4
100004c8:	50                   	push   eax
100004c9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100004cc:	53                   	push   ebx
100004cd:	e8 fc ff ff ff       	call   100004ce <rmtree(char*)+0x4e>	100004ce: R_386_PC32	Directory::Directory(char const*, Process*)
100004d2:	83 c4 10             	add    esp,0x10
100004d5:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
100004d8:	83 ec 0c             	sub    esp,0xc
100004db:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
100004de:	e8 fc ff ff ff       	call   100004df <rmtree(char*)+0x5f>	100004df: R_386_PC32	Directory::open()
100004e3:	83 c4 10             	add    esp,0x10
100004e6:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
100004e9:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
100004ed:	74 24                	je     10000513 <rmtree(char*)+0x93>
100004ef:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
100004f3:	0f 84 8b 01 00 00    	je     10000684 <rmtree(char*)+0x204>
100004f9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100004fc:	8b 00                	mov    eax,DWORD PTR [eax]
100004fe:	83 c0 08             	add    eax,0x8
10000501:	8b 00                	mov    eax,DWORD PTR [eax]
10000503:	83 ec 0c             	sub    esp,0xc
10000506:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000509:	ff d0                	call   eax
1000050b:	83 c4 10             	add    esp,0x10
1000050e:	e9 72 01 00 00       	jmp    10000685 <rmtree(char*)+0x205>
10000513:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10000516:	8b 00                	mov    eax,DWORD PTR [eax]
10000518:	83 c0 0c             	add    eax,0xc
1000051b:	8b 00                	mov    eax,DWORD PTR [eax]
1000051d:	83 ec 0c             	sub    esp,0xc
10000520:	8d 95 a4 fd ff ff    	lea    edx,[ebp-0x25c]
10000526:	52                   	push   edx
10000527:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
1000052a:	6a 00                	push   0x0
1000052c:	68 10 01 00 00       	push   0x110
10000531:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000534:	ff d0                	call   eax
10000536:	83 c4 20             	add    esp,0x20
10000539:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
1000053c:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
10000540:	0f 85 04 01 00 00    	jne    1000064a <rmtree(char*)+0x1ca>
10000546:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10000549:	83 c0 10             	add    eax,0x10
1000054c:	83 ec 08             	sub    esp,0x8
1000054f:	68 70 4f 00 10       	push   0x10004f70	10000550: R_386_32	.text
10000554:	50                   	push   eax
10000555:	e8 fc ff ff ff       	call   10000556 <rmtree(char*)+0xd6>	10000556: R_386_PC32	strcmp
1000055a:	83 c4 10             	add    esp,0x10
1000055d:	85 c0                	test   eax,eax
1000055f:	74 b2                	je     10000513 <rmtree(char*)+0x93>
10000561:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10000564:	83 c0 10             	add    eax,0x10
10000567:	83 ec 08             	sub    esp,0x8
1000056a:	68 72 4f 00 10       	push   0x10004f72	1000056b: R_386_32	.text
1000056f:	50                   	push   eax
10000570:	e8 fc ff ff ff       	call   10000571 <rmtree(char*)+0xf1>	10000571: R_386_PC32	strcmp
10000575:	83 c4 10             	add    esp,0x10
10000578:	85 c0                	test   eax,eax
1000057a:	74 97                	je     10000513 <rmtree(char*)+0x93>
1000057c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
1000057f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
10000582:	83 e0 02             	and    eax,0x2
10000585:	85 c0                	test   eax,eax
10000587:	74 17                	je     100005a0 <rmtree(char*)+0x120>
10000589:	83 ec 0c             	sub    esp,0xc
1000058c:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
10000592:	50                   	push   eax
10000593:	e8 fc ff ff ff       	call   10000594 <rmtree(char*)+0x114>	10000594: R_386_PC32	rmtree(char*)
10000598:	83 c4 10             	add    esp,0x10
1000059b:	e9 73 ff ff ff       	jmp    10000513 <rmtree(char*)+0x93>
100005a0:	83 ec 08             	sub    esp,0x8
100005a3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100005a6:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
100005ac:	50                   	push   eax
100005ad:	e8 fc ff ff ff       	call   100005ae <rmtree(char*)+0x12e>	100005ae: R_386_PC32	strcpy
100005b2:	83 c4 10             	add    esp,0x10
100005b5:	83 ec 08             	sub    esp,0x8
100005b8:	68 75 4f 00 10       	push   0x10004f75	100005b9: R_386_32	.text
100005bd:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
100005c3:	50                   	push   eax
100005c4:	e8 fc ff ff ff       	call   100005c5 <rmtree(char*)+0x145>	100005c5: R_386_PC32	strcat
100005c9:	83 c4 10             	add    esp,0x10
100005cc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
100005cf:	83 c0 10             	add    eax,0x10
100005d2:	83 ec 08             	sub    esp,0x8
100005d5:	50                   	push   eax
100005d6:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
100005dc:	50                   	push   eax
100005dd:	e8 fc ff ff ff       	call   100005de <rmtree(char*)+0x15e>	100005de: R_386_PC32	strcat
100005e2:	83 c4 10             	add    esp,0x10
100005e5:	83 ec 0c             	sub    esp,0xc
100005e8:	68 14 01 00 00       	push   0x114
100005ed:	e8 fc ff ff ff       	call   100005ee <rmtree(char*)+0x16e>	100005ee: R_386_PC32	operator new(unsigned long)
100005f2:	83 c4 10             	add    esp,0x10
100005f5:	89 c3                	mov    ebx,eax
100005f7:	b8 00 20 00 c2       	mov    eax,0xc2002000
100005fc:	8b 00                	mov    eax,DWORD PTR [eax]
100005fe:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
10000601:	83 ec 04             	sub    esp,0x4
10000604:	50                   	push   eax
10000605:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
1000060b:	50                   	push   eax
1000060c:	53                   	push   ebx
1000060d:	e8 fc ff ff ff       	call   1000060e <rmtree(char*)+0x18e>	1000060e: R_386_PC32	File::File(char const*, Process*)
10000612:	83 c4 10             	add    esp,0x10
10000615:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
10000618:	83 ec 0c             	sub    esp,0xc
1000061b:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
1000061e:	e8 fc ff ff ff       	call   1000061f <rmtree(char*)+0x19f>	1000061f: R_386_PC32	File::unlink()
10000623:	83 c4 10             	add    esp,0x10
10000626:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
1000062a:	0f 84 e3 fe ff ff    	je     10000513 <rmtree(char*)+0x93>
10000630:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10000633:	8b 00                	mov    eax,DWORD PTR [eax]
10000635:	83 c0 08             	add    eax,0x8
10000638:	8b 00                	mov    eax,DWORD PTR [eax]
1000063a:	83 ec 0c             	sub    esp,0xc
1000063d:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
10000640:	ff d0                	call   eax
10000642:	83 c4 10             	add    esp,0x10
10000645:	e9 c9 fe ff ff       	jmp    10000513 <rmtree(char*)+0x93>
1000064a:	90                   	nop
1000064b:	83 ec 0c             	sub    esp,0xc
1000064e:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000651:	e8 fc ff ff ff       	call   10000652 <rmtree(char*)+0x1d2>	10000652: R_386_PC32	Directory::close()
10000656:	83 c4 10             	add    esp,0x10
10000659:	83 ec 0c             	sub    esp,0xc
1000065c:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
1000065f:	e8 fc ff ff ff       	call   10000660 <rmtree(char*)+0x1e0>	10000660: R_386_PC32	Directory::unlink()
10000664:	83 c4 10             	add    esp,0x10
10000667:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
1000066b:	74 18                	je     10000685 <rmtree(char*)+0x205>
1000066d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10000670:	8b 00                	mov    eax,DWORD PTR [eax]
10000672:	83 c0 08             	add    eax,0x8
10000675:	8b 00                	mov    eax,DWORD PTR [eax]
10000677:	83 ec 0c             	sub    esp,0xc
1000067a:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
1000067d:	ff d0                	call   eax
1000067f:	83 c4 10             	add    esp,0x10
10000682:	eb 01                	jmp    10000685 <rmtree(char*)+0x205>
10000684:	90                   	nop
10000685:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
10000688:	c9                   	leave  
10000689:	c3                   	ret    

1000068a <mkdir(char const*, int)>:
1000068a:	55                   	push   ebp
1000068b:	89 e5                	mov    ebp,esp
1000068d:	53                   	push   ebx
1000068e:	83 ec 14             	sub    esp,0x14
10000691:	83 ec 0c             	sub    esp,0xc
10000694:	68 14 01 00 00       	push   0x114
10000699:	e8 fc ff ff ff       	call   1000069a <mkdir(char const*, int)+0x10>	1000069a: R_386_PC32	operator new(unsigned long)
1000069e:	83 c4 10             	add    esp,0x10
100006a1:	89 c3                	mov    ebx,eax
100006a3:	a1 00 00 00 00       	mov    eax,ds:0x0	100006a4: R_386_32	kernelProcess
100006a8:	83 ec 04             	sub    esp,0x4
100006ab:	50                   	push   eax
100006ac:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100006af:	53                   	push   ebx
100006b0:	e8 fc ff ff ff       	call   100006b1 <mkdir(char const*, int)+0x27>	100006b1: R_386_PC32	Directory::Directory(char const*, Process*)
100006b5:	83 c4 10             	add    esp,0x10
100006b8:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
100006bb:	83 ec 0c             	sub    esp,0xc
100006be:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
100006c1:	e8 fc ff ff ff       	call   100006c2 <mkdir(char const*, int)+0x38>	100006c2: R_386_PC32	Directory::create()
100006c6:	83 c4 10             	add    esp,0x10
100006c9:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
100006cd:	74 15                	je     100006e4 <mkdir(char const*, int)+0x5a>
100006cf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
100006d2:	8b 00                	mov    eax,DWORD PTR [eax]
100006d4:	83 c0 08             	add    eax,0x8
100006d7:	8b 00                	mov    eax,DWORD PTR [eax]
100006d9:	83 ec 0c             	sub    esp,0xc
100006dc:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
100006df:	ff d0                	call   eax
100006e1:	83 c4 10             	add    esp,0x10
100006e4:	b8 00 00 00 00       	mov    eax,0x0
100006e9:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
100006ec:	c9                   	leave  
100006ed:	c3                   	ret    

100006ee <copytree(char*, char*)>:
100006ee:	55                   	push   ebp
100006ef:	89 e5                	mov    ebp,esp
100006f1:	53                   	push   ebx
100006f2:	81 ec 54 01 00 00    	sub    esp,0x154
100006f8:	83 ec 0c             	sub    esp,0xc
100006fb:	68 90 01 00 00       	push   0x190
10000700:	e8 fc ff ff ff       	call   10000701 <copytree(char*, char*)+0x13>	10000701: R_386_PC32	malloc
10000705:	83 c4 10             	add    esp,0x10
10000708:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
1000070b:	83 ec 0c             	sub    esp,0xc
1000070e:	68 90 01 00 00       	push   0x190
10000713:	e8 fc ff ff ff       	call   10000714 <copytree(char*, char*)+0x26>	10000714: R_386_PC32	malloc
10000718:	83 c4 10             	add    esp,0x10
1000071b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
1000071e:	83 ec 04             	sub    esp,0x4
10000721:	68 90 01 00 00       	push   0x190
10000726:	6a 00                	push   0x0
10000728:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
1000072b:	e8 fc ff ff ff       	call   1000072c <copytree(char*, char*)+0x3e>	1000072c: R_386_PC32	memset
10000730:	83 c4 10             	add    esp,0x10
10000733:	83 ec 04             	sub    esp,0x4
10000736:	68 90 01 00 00       	push   0x190
1000073b:	6a 00                	push   0x0
1000073d:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000740:	e8 fc ff ff ff       	call   10000741 <copytree(char*, char*)+0x53>	10000741: R_386_PC32	memset
10000745:	83 c4 10             	add    esp,0x10
10000748:	8d 85 bc fe ff ff    	lea    eax,[ebp-0x144]
1000074e:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
10000751:	83 ec 0c             	sub    esp,0xc
10000754:	68 14 01 00 00       	push   0x114
10000759:	e8 fc ff ff ff       	call   1000075a <copytree(char*, char*)+0x6c>	1000075a: R_386_PC32	operator new(unsigned long)
1000075e:	83 c4 10             	add    esp,0x10
10000761:	89 c3                	mov    ebx,eax
10000763:	b8 00 20 00 c2       	mov    eax,0xc2002000
10000768:	8b 00                	mov    eax,DWORD PTR [eax]
1000076a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
1000076d:	83 ec 04             	sub    esp,0x4
10000770:	50                   	push   eax
10000771:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000774:	53                   	push   ebx
10000775:	e8 fc ff ff ff       	call   10000776 <copytree(char*, char*)+0x88>	10000776: R_386_PC32	Directory::Directory(char const*, Process*)
1000077a:	83 c4 10             	add    esp,0x10
1000077d:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
10000780:	83 ec 0c             	sub    esp,0xc
10000783:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
10000786:	e8 fc ff ff ff       	call   10000787 <copytree(char*, char*)+0x99>	10000787: R_386_PC32	Directory::open()
1000078b:	83 c4 10             	add    esp,0x10
1000078e:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10000791:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
10000795:	74 34                	je     100007cb <copytree(char*, char*)+0xdd>
10000797:	83 ec 0c             	sub    esp,0xc
1000079a:	68 77 4f 00 10       	push   0x10004f77	1000079b: R_386_32	.text
1000079f:	e8 fc ff ff ff       	call   100007a0 <copytree(char*, char*)+0xb2>	100007a0: R_386_PC32	Dbg::kprintf(char const*, ...)
100007a4:	83 c4 10             	add    esp,0x10
100007a7:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
100007ab:	0f 84 90 03 00 00    	je     10000b41 <copytree(char*, char*)+0x453>
100007b1:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
100007b4:	8b 00                	mov    eax,DWORD PTR [eax]
100007b6:	83 c0 08             	add    eax,0x8
100007b9:	8b 00                	mov    eax,DWORD PTR [eax]
100007bb:	83 ec 0c             	sub    esp,0xc
100007be:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
100007c1:	ff d0                	call   eax
100007c3:	83 c4 10             	add    esp,0x10
100007c6:	e9 76 03 00 00       	jmp    10000b41 <copytree(char*, char*)+0x453>
100007cb:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
100007ce:	8b 00                	mov    eax,DWORD PTR [eax]
100007d0:	83 c0 0c             	add    eax,0xc
100007d3:	8b 00                	mov    eax,DWORD PTR [eax]
100007d5:	83 ec 0c             	sub    esp,0xc
100007d8:	8d 95 b8 fe ff ff    	lea    edx,[ebp-0x148]
100007de:	52                   	push   edx
100007df:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
100007e2:	6a 00                	push   0x0
100007e4:	68 10 01 00 00       	push   0x110
100007e9:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
100007ec:	ff d0                	call   eax
100007ee:	83 c4 20             	add    esp,0x20
100007f1:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
100007f4:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
100007f8:	0f 85 fb 02 00 00    	jne    10000af9 <copytree(char*, char*)+0x40b>
100007fe:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
10000801:	83 c0 10             	add    eax,0x10
10000804:	83 ec 08             	sub    esp,0x8
10000807:	68 70 4f 00 10       	push   0x10004f70	10000808: R_386_32	.text
1000080c:	50                   	push   eax
1000080d:	e8 fc ff ff ff       	call   1000080e <copytree(char*, char*)+0x120>	1000080e: R_386_PC32	strcmp
10000812:	83 c4 10             	add    esp,0x10
10000815:	85 c0                	test   eax,eax
10000817:	74 b2                	je     100007cb <copytree(char*, char*)+0xdd>
10000819:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
1000081c:	83 c0 10             	add    eax,0x10
1000081f:	83 ec 08             	sub    esp,0x8
10000822:	68 72 4f 00 10       	push   0x10004f72	10000823: R_386_32	.text
10000827:	50                   	push   eax
10000828:	e8 fc ff ff ff       	call   10000829 <copytree(char*, char*)+0x13b>	10000829: R_386_PC32	strcmp
1000082d:	83 c4 10             	add    esp,0x10
10000830:	85 c0                	test   eax,eax
10000832:	74 97                	je     100007cb <copytree(char*, char*)+0xdd>
10000834:	83 ec 08             	sub    esp,0x8
10000837:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000083a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
1000083d:	e8 fc ff ff ff       	call   1000083e <copytree(char*, char*)+0x150>	1000083e: R_386_PC32	strcpy
10000842:	83 c4 10             	add    esp,0x10
10000845:	83 ec 08             	sub    esp,0x8
10000848:	68 75 4f 00 10       	push   0x10004f75	10000849: R_386_32	.text
1000084d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10000850:	e8 fc ff ff ff       	call   10000851 <copytree(char*, char*)+0x163>	10000851: R_386_PC32	strcat
10000855:	83 c4 10             	add    esp,0x10
10000858:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
1000085b:	83 c0 10             	add    eax,0x10
1000085e:	83 ec 08             	sub    esp,0x8
10000861:	50                   	push   eax
10000862:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10000865:	e8 fc ff ff ff       	call   10000866 <copytree(char*, char*)+0x178>	10000866: R_386_PC32	strcat
1000086a:	83 c4 10             	add    esp,0x10
1000086d:	83 ec 08             	sub    esp,0x8
10000870:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10000873:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000876:	e8 fc ff ff ff       	call   10000877 <copytree(char*, char*)+0x189>	10000877: R_386_PC32	strcpy
1000087b:	83 c4 10             	add    esp,0x10
1000087e:	83 ec 08             	sub    esp,0x8
10000881:	68 75 4f 00 10       	push   0x10004f75	10000882: R_386_32	.text
10000886:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000889:	e8 fc ff ff ff       	call   1000088a <copytree(char*, char*)+0x19c>	1000088a: R_386_PC32	strcat
1000088e:	83 c4 10             	add    esp,0x10
10000891:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
10000894:	83 c0 10             	add    eax,0x10
10000897:	83 ec 08             	sub    esp,0x8
1000089a:	50                   	push   eax
1000089b:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
1000089e:	e8 fc ff ff ff       	call   1000089f <copytree(char*, char*)+0x1b1>	1000089f: R_386_PC32	strcat
100008a3:	83 c4 10             	add    esp,0x10
100008a6:	83 ec 04             	sub    esp,0x4
100008a9:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
100008ac:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
100008af:	68 91 4f 00 10       	push   0x10004f91	100008b0: R_386_32	.text
100008b4:	e8 fc ff ff ff       	call   100008b5 <copytree(char*, char*)+0x1c7>	100008b5: R_386_PC32	Dbg::kprintf(char const*, ...)
100008b9:	83 c4 10             	add    esp,0x10
100008bc:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
100008bf:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
100008c2:	83 e0 02             	and    eax,0x2
100008c5:	85 c0                	test   eax,eax
100008c7:	74 47                	je     10000910 <copytree(char*, char*)+0x222>
100008c9:	83 ec 08             	sub    esp,0x8
100008cc:	68 c0 01 00 00       	push   0x1c0
100008d1:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
100008d4:	e8 fc ff ff ff       	call   100008d5 <copytree(char*, char*)+0x1e7>	100008d5: R_386_PC32	mkdir(char const*, int)
100008d9:	83 c4 10             	add    esp,0x10
100008dc:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
100008df:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
100008e3:	74 15                	je     100008fa <copytree(char*, char*)+0x20c>
100008e5:	83 ec 0c             	sub    esp,0xc
100008e8:	68 9b 4f 00 10       	push   0x10004f9b	100008e9: R_386_32	.text
100008ed:	e8 fc ff ff ff       	call   100008ee <copytree(char*, char*)+0x200>	100008ee: R_386_PC32	KePanic(char const*)
100008f2:	83 c4 10             	add    esp,0x10
100008f5:	e9 d1 fe ff ff       	jmp    100007cb <copytree(char*, char*)+0xdd>
100008fa:	83 ec 08             	sub    esp,0x8
100008fd:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000900:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10000903:	e8 fc ff ff ff       	call   10000904 <copytree(char*, char*)+0x216>	10000904: R_386_PC32	copytree(char*, char*)
10000908:	83 c4 10             	add    esp,0x10
1000090b:	e9 bb fe ff ff       	jmp    100007cb <copytree(char*, char*)+0xdd>
10000910:	83 ec 0c             	sub    esp,0xc
10000913:	68 14 01 00 00       	push   0x114
10000918:	e8 fc ff ff ff       	call   10000919 <copytree(char*, char*)+0x22b>	10000919: R_386_PC32	operator new(unsigned long)
1000091d:	83 c4 10             	add    esp,0x10
10000920:	89 c3                	mov    ebx,eax
10000922:	b8 00 20 00 c2       	mov    eax,0xc2002000
10000927:	8b 00                	mov    eax,DWORD PTR [eax]
10000929:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
1000092c:	83 ec 04             	sub    esp,0x4
1000092f:	50                   	push   eax
10000930:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10000933:	53                   	push   ebx
10000934:	e8 fc ff ff ff       	call   10000935 <copytree(char*, char*)+0x247>	10000935: R_386_PC32	File::File(char const*, Process*)
10000939:	83 c4 10             	add    esp,0x10
1000093c:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
1000093f:	83 ec 08             	sub    esp,0x8
10000942:	6a 01                	push   0x1
10000944:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000947:	e8 fc ff ff ff       	call   10000948 <copytree(char*, char*)+0x25a>	10000948: R_386_PC32	File::open(FileOpenMode)
1000094c:	83 c4 10             	add    esp,0x10
1000094f:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
10000953:	75 15                	jne    1000096a <copytree(char*, char*)+0x27c>
10000955:	83 ec 0c             	sub    esp,0xc
10000958:	68 ac 4f 00 10       	push   0x10004fac	10000959: R_386_32	.text
1000095d:	e8 fc ff ff ff       	call   1000095e <copytree(char*, char*)+0x270>	1000095e: R_386_PC32	KePanic(char const*)
10000962:	83 c4 10             	add    esp,0x10
10000965:	e9 8a 01 00 00       	jmp    10000af4 <copytree(char*, char*)+0x406>
1000096a:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
1000096e:	0f 84 57 fe ff ff    	je     100007cb <copytree(char*, char*)+0xdd>
10000974:	83 ec 0c             	sub    esp,0xc
10000977:	68 14 01 00 00       	push   0x114
1000097c:	e8 fc ff ff ff       	call   1000097d <copytree(char*, char*)+0x28f>	1000097d: R_386_PC32	operator new(unsigned long)
10000981:	83 c4 10             	add    esp,0x10
10000984:	89 c3                	mov    ebx,eax
10000986:	b8 00 20 00 c2       	mov    eax,0xc2002000
1000098b:	8b 00                	mov    eax,DWORD PTR [eax]
1000098d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
10000990:	83 ec 04             	sub    esp,0x4
10000993:	50                   	push   eax
10000994:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000997:	53                   	push   ebx
10000998:	e8 fc ff ff ff       	call   10000999 <copytree(char*, char*)+0x2ab>	10000999: R_386_PC32	File::File(char const*, Process*)
1000099d:	83 c4 10             	add    esp,0x10
100009a0:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
100009a3:	83 ec 08             	sub    esp,0x8
100009a6:	6a 12                	push   0x12
100009a8:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
100009ab:	e8 fc ff ff ff       	call   100009ac <copytree(char*, char*)+0x2be>	100009ac: R_386_PC32	File::open(FileOpenMode)
100009b0:	83 c4 10             	add    esp,0x10
100009b3:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
100009b7:	75 23                	jne    100009dc <copytree(char*, char*)+0x2ee>
100009b9:	83 ec 0c             	sub    esp,0xc
100009bc:	68 ac 4f 00 10       	push   0x10004fac	100009bd: R_386_32	.text
100009c1:	e8 fc ff ff ff       	call   100009c2 <copytree(char*, char*)+0x2d4>	100009c2: R_386_PC32	KePanic(char const*)
100009c6:	83 c4 10             	add    esp,0x10
100009c9:	83 ec 0c             	sub    esp,0xc
100009cc:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
100009cf:	e8 fc ff ff ff       	call   100009d0 <copytree(char*, char*)+0x2e2>	100009d0: R_386_PC32	File::close()
100009d4:	83 c4 10             	add    esp,0x10
100009d7:	e9 18 01 00 00       	jmp    10000af4 <copytree(char*, char*)+0x406>
100009dc:	83 ec 0c             	sub    esp,0xc
100009df:	68 00 10 00 00       	push   0x1000
100009e4:	e8 fc ff ff ff       	call   100009e5 <copytree(char*, char*)+0x2f7>	100009e5: R_386_PC32	malloc
100009e9:	83 c4 10             	add    esp,0x10
100009ec:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
100009ef:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
100009f3:	75 31                	jne    10000a26 <copytree(char*, char*)+0x338>
100009f5:	83 ec 0c             	sub    esp,0xc
100009f8:	68 bb 4f 00 10       	push   0x10004fbb	100009f9: R_386_32	.text
100009fd:	e8 fc ff ff ff       	call   100009fe <copytree(char*, char*)+0x310>	100009fe: R_386_PC32	KePanic(char const*)
10000a02:	83 c4 10             	add    esp,0x10
10000a05:	83 ec 0c             	sub    esp,0xc
10000a08:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10000a0b:	e8 fc ff ff ff       	call   10000a0c <copytree(char*, char*)+0x31e>	10000a0c: R_386_PC32	free
10000a10:	83 c4 10             	add    esp,0x10
10000a13:	83 ec 0c             	sub    esp,0xc
10000a16:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000a19:	e8 fc ff ff ff       	call   10000a1a <copytree(char*, char*)+0x32c>	10000a1a: R_386_PC32	free
10000a1e:	83 c4 10             	add    esp,0x10
10000a21:	e9 1c 01 00 00       	jmp    10000b42 <copytree(char*, char*)+0x454>
10000a26:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10000a29:	8b 00                	mov    eax,DWORD PTR [eax]
10000a2b:	83 c0 0c             	add    eax,0xc
10000a2e:	8b 00                	mov    eax,DWORD PTR [eax]
10000a30:	83 ec 0c             	sub    esp,0xc
10000a33:	8d 95 b4 fe ff ff    	lea    edx,[ebp-0x14c]
10000a39:	52                   	push   edx
10000a3a:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10000a3d:	6a 00                	push   0x0
10000a3f:	68 00 10 00 00       	push   0x1000
10000a44:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000a47:	ff d0                	call   eax
10000a49:	83 c4 20             	add    esp,0x20
10000a4c:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
10000a4f:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
10000a53:	75 37                	jne    10000a8c <copytree(char*, char*)+0x39e>
10000a55:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000a58:	8b 00                	mov    eax,DWORD PTR [eax]
10000a5a:	83 c0 10             	add    eax,0x10
10000a5d:	8b 08                	mov    ecx,DWORD PTR [eax]
10000a5f:	8b 85 b4 fe ff ff    	mov    eax,DWORD PTR [ebp-0x14c]
10000a65:	99                   	cdq    
10000a66:	83 ec 0c             	sub    esp,0xc
10000a69:	8d 9d b0 fe ff ff    	lea    ebx,[ebp-0x150]
10000a6f:	53                   	push   ebx
10000a70:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10000a73:	52                   	push   edx
10000a74:	50                   	push   eax
10000a75:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
10000a78:	ff d1                	call   ecx
10000a7a:	83 c4 20             	add    esp,0x20
10000a7d:	8b 85 b4 fe ff ff    	mov    eax,DWORD PTR [ebp-0x14c]
10000a83:	3d 00 10 00 00       	cmp    eax,0x1000
10000a88:	75 05                	jne    10000a8f <copytree(char*, char*)+0x3a1>
10000a8a:	eb 9a                	jmp    10000a26 <copytree(char*, char*)+0x338>
10000a8c:	90                   	nop
10000a8d:	eb 01                	jmp    10000a90 <copytree(char*, char*)+0x3a2>
10000a8f:	90                   	nop
10000a90:	83 ec 0c             	sub    esp,0xc
10000a93:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10000a96:	e8 fc ff ff ff       	call   10000a97 <copytree(char*, char*)+0x3a9>	10000a97: R_386_PC32	free
10000a9b:	83 c4 10             	add    esp,0x10
10000a9e:	83 ec 0c             	sub    esp,0xc
10000aa1:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000aa4:	e8 fc ff ff ff       	call   10000aa5 <copytree(char*, char*)+0x3b7>	10000aa5: R_386_PC32	File::close()
10000aa9:	83 c4 10             	add    esp,0x10
10000aac:	83 ec 0c             	sub    esp,0xc
10000aaf:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
10000ab2:	e8 fc ff ff ff       	call   10000ab3 <copytree(char*, char*)+0x3c5>	10000ab3: R_386_PC32	File::close()
10000ab7:	83 c4 10             	add    esp,0x10
10000aba:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
10000abe:	74 15                	je     10000ad5 <copytree(char*, char*)+0x3e7>
10000ac0:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10000ac3:	8b 00                	mov    eax,DWORD PTR [eax]
10000ac5:	83 c0 08             	add    eax,0x8
10000ac8:	8b 00                	mov    eax,DWORD PTR [eax]
10000aca:	83 ec 0c             	sub    esp,0xc
10000acd:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000ad0:	ff d0                	call   eax
10000ad2:	83 c4 10             	add    esp,0x10
10000ad5:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
10000ad9:	0f 84 ec fc ff ff    	je     100007cb <copytree(char*, char*)+0xdd>
10000adf:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000ae2:	8b 00                	mov    eax,DWORD PTR [eax]
10000ae4:	83 c0 08             	add    eax,0x8
10000ae7:	8b 00                	mov    eax,DWORD PTR [eax]
10000ae9:	83 ec 0c             	sub    esp,0xc
10000aec:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
10000aef:	ff d0                	call   eax
10000af1:	83 c4 10             	add    esp,0x10
10000af4:	e9 d2 fc ff ff       	jmp    100007cb <copytree(char*, char*)+0xdd>
10000af9:	90                   	nop
10000afa:	83 ec 0c             	sub    esp,0xc
10000afd:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10000b00:	e8 fc ff ff ff       	call   10000b01 <copytree(char*, char*)+0x413>	10000b01: R_386_PC32	free
10000b05:	83 c4 10             	add    esp,0x10
10000b08:	83 ec 0c             	sub    esp,0xc
10000b0b:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000b0e:	e8 fc ff ff ff       	call   10000b0f <copytree(char*, char*)+0x421>	10000b0f: R_386_PC32	free
10000b13:	83 c4 10             	add    esp,0x10
10000b16:	83 ec 0c             	sub    esp,0xc
10000b19:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
10000b1c:	e8 fc ff ff ff       	call   10000b1d <copytree(char*, char*)+0x42f>	10000b1d: R_386_PC32	Directory::close()
10000b21:	83 c4 10             	add    esp,0x10
10000b24:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
10000b28:	74 18                	je     10000b42 <copytree(char*, char*)+0x454>
10000b2a:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
10000b2d:	8b 00                	mov    eax,DWORD PTR [eax]
10000b2f:	83 c0 08             	add    eax,0x8
10000b32:	8b 00                	mov    eax,DWORD PTR [eax]
10000b34:	83 ec 0c             	sub    esp,0xc
10000b37:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
10000b3a:	ff d0                	call   eax
10000b3c:	83 c4 10             	add    esp,0x10
10000b3f:	eb 01                	jmp    10000b42 <copytree(char*, char*)+0x454>
10000b41:	90                   	nop
10000b42:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
10000b45:	c9                   	leave  
10000b46:	c3                   	ret    

10000b47 <backupTree(char*, unsigned short)>:
10000b47:	55                   	push   ebp
10000b48:	89 e5                	mov    ebp,esp
10000b4a:	57                   	push   edi
10000b4b:	56                   	push   esi
10000b4c:	53                   	push   ebx
10000b4d:	81 ec 8c 12 00 00    	sub    esp,0x128c
10000b53:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000b56:	66 89 85 74 ed ff ff 	mov    WORD PTR [ebp-0x128c],ax
10000b5d:	83 ec 0c             	sub    esp,0xc
10000b60:	68 90 01 00 00       	push   0x190
10000b65:	e8 fc ff ff ff       	call   10000b66 <backupTree(char*, unsigned short)+0x1f>	10000b66: R_386_PC32	malloc
10000b6a:	83 c4 10             	add    esp,0x10
10000b6d:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
10000b70:	83 ec 04             	sub    esp,0x4
10000b73:	68 90 01 00 00       	push   0x190
10000b78:	6a 00                	push   0x0
10000b7a:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000b7d:	e8 fc ff ff ff       	call   10000b7e <backupTree(char*, unsigned short)+0x37>	10000b7e: R_386_PC32	memset
10000b82:	83 c4 10             	add    esp,0x10
10000b85:	8d 85 a8 fe ff ff    	lea    eax,[ebp-0x158]
10000b8b:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
10000b8e:	83 ec 0c             	sub    esp,0xc
10000b91:	68 14 01 00 00       	push   0x114
10000b96:	e8 fc ff ff ff       	call   10000b97 <backupTree(char*, unsigned short)+0x50>	10000b97: R_386_PC32	operator new(unsigned long)
10000b9b:	83 c4 10             	add    esp,0x10
10000b9e:	89 c3                	mov    ebx,eax
10000ba0:	b8 00 20 00 c2       	mov    eax,0xc2002000
10000ba5:	8b 00                	mov    eax,DWORD PTR [eax]
10000ba7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
10000baa:	83 ec 04             	sub    esp,0x4
10000bad:	50                   	push   eax
10000bae:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000bb1:	53                   	push   ebx
10000bb2:	e8 fc ff ff ff       	call   10000bb3 <backupTree(char*, unsigned short)+0x6c>	10000bb3: R_386_PC32	Directory::Directory(char const*, Process*)
10000bb7:	83 c4 10             	add    esp,0x10
10000bba:	89 5d d0             	mov    DWORD PTR [ebp-0x30],ebx
10000bbd:	83 ec 0c             	sub    esp,0xc
10000bc0:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10000bc3:	e8 fc ff ff ff       	call   10000bc4 <backupTree(char*, unsigned short)+0x7d>	10000bc4: R_386_PC32	Directory::open()
10000bc8:	83 c4 10             	add    esp,0x10
10000bcb:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
10000bce:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
10000bd2:	74 34                	je     10000c08 <backupTree(char*, unsigned short)+0xc1>
10000bd4:	83 ec 0c             	sub    esp,0xc
10000bd7:	68 77 4f 00 10       	push   0x10004f77	10000bd8: R_386_32	.text
10000bdc:	e8 fc ff ff ff       	call   10000bdd <backupTree(char*, unsigned short)+0x96>	10000bdd: R_386_PC32	Dbg::kprintf(char const*, ...)
10000be1:	83 c4 10             	add    esp,0x10
10000be4:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
10000be8:	0f 84 c8 05 00 00    	je     100011b6 <backupTree(char*, unsigned short)+0x66f>
10000bee:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
10000bf1:	8b 00                	mov    eax,DWORD PTR [eax]
10000bf3:	83 c0 08             	add    eax,0x8
10000bf6:	8b 00                	mov    eax,DWORD PTR [eax]
10000bf8:	83 ec 0c             	sub    esp,0xc
10000bfb:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10000bfe:	ff d0                	call   eax
10000c00:	83 c4 10             	add    esp,0x10
10000c03:	e9 af 05 00 00       	jmp    100011b7 <backupTree(char*, unsigned short)+0x670>
10000c08:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
10000c0b:	8b 00                	mov    eax,DWORD PTR [eax]
10000c0d:	83 c0 0c             	add    eax,0xc
10000c10:	8b 00                	mov    eax,DWORD PTR [eax]
10000c12:	83 ec 0c             	sub    esp,0xc
10000c15:	8d 95 a4 fe ff ff    	lea    edx,[ebp-0x15c]
10000c1b:	52                   	push   edx
10000c1c:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
10000c1f:	6a 00                	push   0x0
10000c21:	68 10 01 00 00       	push   0x110
10000c26:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10000c29:	ff d0                	call   eax
10000c2b:	83 c4 20             	add    esp,0x20
10000c2e:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
10000c31:	83 7d c8 00          	cmp    DWORD PTR [ebp-0x38],0x0
10000c35:	0f 85 41 05 00 00    	jne    1000117c <backupTree(char*, unsigned short)+0x635>
10000c3b:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000c3e:	83 c0 10             	add    eax,0x10
10000c41:	83 ec 08             	sub    esp,0x8
10000c44:	68 70 4f 00 10       	push   0x10004f70	10000c45: R_386_32	.text
10000c49:	50                   	push   eax
10000c4a:	e8 fc ff ff ff       	call   10000c4b <backupTree(char*, unsigned short)+0x104>	10000c4b: R_386_PC32	strcmp
10000c4f:	83 c4 10             	add    esp,0x10
10000c52:	85 c0                	test   eax,eax
10000c54:	74 b2                	je     10000c08 <backupTree(char*, unsigned short)+0xc1>
10000c56:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000c59:	83 c0 10             	add    eax,0x10
10000c5c:	83 ec 08             	sub    esp,0x8
10000c5f:	68 72 4f 00 10       	push   0x10004f72	10000c60: R_386_32	.text
10000c64:	50                   	push   eax
10000c65:	e8 fc ff ff ff       	call   10000c66 <backupTree(char*, unsigned short)+0x11f>	10000c66: R_386_PC32	strcmp
10000c6a:	83 c4 10             	add    esp,0x10
10000c6d:	85 c0                	test   eax,eax
10000c6f:	74 97                	je     10000c08 <backupTree(char*, unsigned short)+0xc1>
10000c71:	83 ec 08             	sub    esp,0x8
10000c74:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000c77:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000c7a:	e8 fc ff ff ff       	call   10000c7b <backupTree(char*, unsigned short)+0x134>	10000c7b: R_386_PC32	strcpy
10000c7f:	83 c4 10             	add    esp,0x10
10000c82:	83 ec 08             	sub    esp,0x8
10000c85:	68 75 4f 00 10       	push   0x10004f75	10000c86: R_386_32	.text
10000c8a:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000c8d:	e8 fc ff ff ff       	call   10000c8e <backupTree(char*, unsigned short)+0x147>	10000c8e: R_386_PC32	strcat
10000c92:	83 c4 10             	add    esp,0x10
10000c95:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000c98:	83 c0 10             	add    eax,0x10
10000c9b:	83 ec 08             	sub    esp,0x8
10000c9e:	50                   	push   eax
10000c9f:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000ca2:	e8 fc ff ff ff       	call   10000ca3 <backupTree(char*, unsigned short)+0x15c>	10000ca3: R_386_PC32	strcat
10000ca7:	83 c4 10             	add    esp,0x10
10000caa:	66 c7 45 e6 bc ad    	mov    WORD PTR [ebp-0x1a],0xadbc
10000cb0:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
10000cb7:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
10000cba:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10000cbd:	01 d0                	add    eax,edx
10000cbf:	83 c0 10             	add    eax,0x10
10000cc2:	8a 00                	mov    al,BYTE PTR [eax]
10000cc4:	84 c0                	test   al,al
10000cc6:	74 3c                	je     10000d04 <backupTree(char*, unsigned short)+0x1bd>
10000cc8:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
10000ccb:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10000cce:	01 d0                	add    eax,edx
10000cd0:	83 c0 10             	add    eax,0x10
10000cd3:	8a 00                	mov    al,BYTE PTR [eax]
10000cd5:	66 0f be d0          	movsx  dx,al
10000cd9:	66 8b 45 e6          	mov    ax,WORD PTR [ebp-0x1a]
10000cdd:	31 d0                	xor    eax,edx
10000cdf:	66 89 45 e6          	mov    WORD PTR [ebp-0x1a],ax
10000ce3:	0f b7 45 e6          	movzx  eax,WORD PTR [ebp-0x1a]
10000ce7:	c1 e0 03             	shl    eax,0x3
10000cea:	89 c2                	mov    edx,eax
10000cec:	0f b7 45 e6          	movzx  eax,WORD PTR [ebp-0x1a]
10000cf0:	c1 f8 0d             	sar    eax,0xd
10000cf3:	09 d0                	or     eax,edx
10000cf5:	66 89 45 e6          	mov    WORD PTR [ebp-0x1a],ax
10000cf9:	66 81 6d e6 f1 06    	sub    WORD PTR [ebp-0x1a],0x6f1
10000cff:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
10000d02:	eb b3                	jmp    10000cb7 <backupTree(char*, unsigned short)+0x170>
10000d04:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000d07:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
10000d0a:	83 e0 02             	and    eax,0x2
10000d0d:	85 c0                	test   eax,eax
10000d0f:	74 37                	je     10000d48 <backupTree(char*, unsigned short)+0x201>
10000d11:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000d14:	83 c0 10             	add    eax,0x10
10000d17:	83 ec 08             	sub    esp,0x8
10000d1a:	68 c5 4f 00 10       	push   0x10004fc5	10000d1b: R_386_32	.text
10000d1f:	50                   	push   eax
10000d20:	e8 fc ff ff ff       	call   10000d21 <backupTree(char*, unsigned short)+0x1da>	10000d21: R_386_PC32	strcmp
10000d25:	83 c4 10             	add    esp,0x10
10000d28:	85 c0                	test   eax,eax
10000d2a:	0f 84 d8 fe ff ff    	je     10000c08 <backupTree(char*, unsigned short)+0xc1>
10000d30:	0f b7 45 e6          	movzx  eax,WORD PTR [ebp-0x1a]
10000d34:	83 ec 08             	sub    esp,0x8
10000d37:	50                   	push   eax
10000d38:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000d3b:	e8 fc ff ff ff       	call   10000d3c <backupTree(char*, unsigned short)+0x1f5>	10000d3c: R_386_PC32	backupTree(char*, unsigned short)
10000d40:	83 c4 10             	add    esp,0x10
10000d43:	e9 c0 fe ff ff       	jmp    10000c08 <backupTree(char*, unsigned short)+0xc1>
10000d48:	c6 85 a3 fe ff ff 00 	mov    BYTE PTR [ebp-0x15d],0x0
10000d4f:	83 ec 08             	sub    esp,0x8
10000d52:	68 cc 4f 00 10       	push   0x10004fcc	10000d53: R_386_32	.text
10000d57:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000d5d:	50                   	push   eax
10000d5e:	e8 fc ff ff ff       	call   10000d5f <backupTree(char*, unsigned short)+0x218>	10000d5f: R_386_PC32	strcpy
10000d63:	83 c4 10             	add    esp,0x10
10000d66:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000d69:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
10000d6c:	88 85 a2 fe ff ff    	mov    BYTE PTR [ebp-0x15e],al
10000d72:	83 ec 08             	sub    esp,0x8
10000d75:	8d 85 a2 fe ff ff    	lea    eax,[ebp-0x15e]
10000d7b:	50                   	push   eax
10000d7c:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000d82:	50                   	push   eax
10000d83:	e8 fc ff ff ff       	call   10000d84 <backupTree(char*, unsigned short)+0x23d>	10000d84: R_386_PC32	strcat
10000d88:	83 c4 10             	add    esp,0x10
10000d8b:	83 ec 04             	sub    esp,0x4
10000d8e:	6a 09                	push   0x9
10000d90:	6a 00                	push   0x0
10000d92:	8d 85 99 fe ff ff    	lea    eax,[ebp-0x167]
10000d98:	50                   	push   eax
10000d99:	e8 fc ff ff ff       	call   10000d9a <backupTree(char*, unsigned short)+0x253>	10000d9a: R_386_PC32	memset
10000d9e:	83 c4 10             	add    esp,0x10
10000da1:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000da4:	83 c0 10             	add    eax,0x10
10000da7:	83 ec 04             	sub    esp,0x4
10000daa:	6a 08                	push   0x8
10000dac:	50                   	push   eax
10000dad:	8d 85 99 fe ff ff    	lea    eax,[ebp-0x167]
10000db3:	50                   	push   eax
10000db4:	e8 fc ff ff ff       	call   10000db5 <backupTree(char*, unsigned short)+0x26e>	10000db5: R_386_PC32	strncpyxx(char*, char const*, unsigned long)
10000db9:	83 c4 10             	add    esp,0x10
10000dbc:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
10000dc3:	83 7d dc 07          	cmp    DWORD PTR [ebp-0x24],0x7
10000dc7:	0f 8f c5 00 00 00    	jg     10000e92 <backupTree(char*, unsigned short)+0x34b>
10000dcd:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000dd3:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000dd6:	01 d0                	add    eax,edx
10000dd8:	8a 00                	mov    al,BYTE PTR [eax]
10000dda:	3c 60                	cmp    al,0x60
10000ddc:	7e 30                	jle    10000e0e <backupTree(char*, unsigned short)+0x2c7>
10000dde:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000de4:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000de7:	01 d0                	add    eax,edx
10000de9:	8a 00                	mov    al,BYTE PTR [eax]
10000deb:	3c 7a                	cmp    al,0x7a
10000ded:	7f 1f                	jg     10000e0e <backupTree(char*, unsigned short)+0x2c7>
10000def:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000df5:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000df8:	01 d0                	add    eax,edx
10000dfa:	8a 00                	mov    al,BYTE PTR [eax]
10000dfc:	83 e8 20             	sub    eax,0x20
10000dff:	88 c2                	mov    dl,al
10000e01:	8d 8d 99 fe ff ff    	lea    ecx,[ebp-0x167]
10000e07:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e0a:	01 c8                	add    eax,ecx
10000e0c:	88 10                	mov    BYTE PTR [eax],dl
10000e0e:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000e14:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e17:	01 d0                	add    eax,edx
10000e19:	8a 00                	mov    al,BYTE PTR [eax]
10000e1b:	3c 59                	cmp    al,0x59
10000e1d:	75 0e                	jne    10000e2d <backupTree(char*, unsigned short)+0x2e6>
10000e1f:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000e25:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e28:	01 d0                	add    eax,edx
10000e2a:	c6 00 51             	mov    BYTE PTR [eax],0x51
10000e2d:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000e33:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e36:	01 d0                	add    eax,edx
10000e38:	8a 00                	mov    al,BYTE PTR [eax]
10000e3a:	3c 5a                	cmp    al,0x5a
10000e3c:	75 0e                	jne    10000e4c <backupTree(char*, unsigned short)+0x305>
10000e3e:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000e44:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e47:	01 d0                	add    eax,edx
10000e49:	c6 00 51             	mov    BYTE PTR [eax],0x51
10000e4c:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000e52:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e55:	01 d0                	add    eax,edx
10000e57:	8a 00                	mov    al,BYTE PTR [eax]
10000e59:	3c 20                	cmp    al,0x20
10000e5b:	75 0e                	jne    10000e6b <backupTree(char*, unsigned short)+0x324>
10000e5d:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000e63:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e66:	01 d0                	add    eax,edx
10000e68:	c6 00 59             	mov    BYTE PTR [eax],0x59
10000e6b:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000e71:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e74:	01 d0                	add    eax,edx
10000e76:	8a 00                	mov    al,BYTE PTR [eax]
10000e78:	3c 2e                	cmp    al,0x2e
10000e7a:	75 0e                	jne    10000e8a <backupTree(char*, unsigned short)+0x343>
10000e7c:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000e82:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e85:	01 d0                	add    eax,edx
10000e87:	c6 00 5a             	mov    BYTE PTR [eax],0x5a
10000e8a:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
10000e8d:	e9 31 ff ff ff       	jmp    10000dc3 <backupTree(char*, unsigned short)+0x27c>
10000e92:	83 ec 08             	sub    esp,0x8
10000e95:	8d 85 99 fe ff ff    	lea    eax,[ebp-0x167]
10000e9b:	50                   	push   eax
10000e9c:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000ea2:	50                   	push   eax
10000ea3:	e8 fc ff ff ff       	call   10000ea4 <backupTree(char*, unsigned short)+0x35d>	10000ea4: R_386_PC32	strcat
10000ea8:	83 c4 10             	add    esp,0x10
10000eab:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000eae:	83 c0 10             	add    eax,0x10
10000eb1:	83 ec 0c             	sub    esp,0xc
10000eb4:	50                   	push   eax
10000eb5:	e8 fc ff ff ff       	call   10000eb6 <backupTree(char*, unsigned short)+0x36f>	10000eb6: R_386_PC32	strlen
10000eba:	83 c4 10             	add    esp,0x10
10000ebd:	83 c0 41             	add    eax,0x41
10000ec0:	88 85 a2 fe ff ff    	mov    BYTE PTR [ebp-0x15e],al
10000ec6:	83 ec 08             	sub    esp,0x8
10000ec9:	8d 85 a2 fe ff ff    	lea    eax,[ebp-0x15e]
10000ecf:	50                   	push   eax
10000ed0:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000ed6:	50                   	push   eax
10000ed7:	e8 fc ff ff ff       	call   10000ed8 <backupTree(char*, unsigned short)+0x391>	10000ed8: R_386_PC32	strcat
10000edc:	83 c4 10             	add    esp,0x10
10000edf:	83 ec 08             	sub    esp,0x8
10000ee2:	68 70 4f 00 10       	push   0x10004f70	10000ee3: R_386_32	.text
10000ee7:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000eed:	50                   	push   eax
10000eee:	e8 fc ff ff ff       	call   10000eef <backupTree(char*, unsigned short)+0x3a8>	10000eef: R_386_PC32	strcat
10000ef3:	83 c4 10             	add    esp,0x10
10000ef6:	66 8b 45 e6          	mov    ax,WORD PTR [ebp-0x1a]
10000efa:	25 65 07 00 00       	and    eax,0x765
10000eff:	33 85 74 ed ff ff    	xor    eax,DWORD PTR [ebp-0x128c]
10000f05:	66 89 45 c6          	mov    WORD PTR [ebp-0x3a],ax
10000f09:	8d 85 88 fe ff ff    	lea    eax,[ebp-0x178]
10000f0f:	bb e5 4f 00 10       	mov    ebx,0x10004fe5	10000f10: R_386_32	.text
10000f14:	ba 11 00 00 00       	mov    edx,0x11
10000f19:	89 c7                	mov    edi,eax
10000f1b:	89 de                	mov    esi,ebx
10000f1d:	89 d1                	mov    ecx,edx
10000f1f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
10000f21:	0f b7 45 c6          	movzx  eax,WORD PTR [ebp-0x3a]
10000f25:	83 e0 0f             	and    eax,0xf
10000f28:	8a 84 05 88 fe ff ff 	mov    al,BYTE PTR [ebp+eax*1-0x178]
10000f2f:	88 85 a2 fe ff ff    	mov    BYTE PTR [ebp-0x15e],al
10000f35:	83 ec 08             	sub    esp,0x8
10000f38:	8d 85 a2 fe ff ff    	lea    eax,[ebp-0x15e]
10000f3e:	50                   	push   eax
10000f3f:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000f45:	50                   	push   eax
10000f46:	e8 fc ff ff ff       	call   10000f47 <backupTree(char*, unsigned short)+0x400>	10000f47: R_386_PC32	strcat
10000f4b:	83 c4 10             	add    esp,0x10
10000f4e:	0f b7 45 c6          	movzx  eax,WORD PTR [ebp-0x3a]
10000f52:	c1 f8 04             	sar    eax,0x4
10000f55:	83 e0 0f             	and    eax,0xf
10000f58:	8a 84 05 88 fe ff ff 	mov    al,BYTE PTR [ebp+eax*1-0x178]
10000f5f:	88 85 a2 fe ff ff    	mov    BYTE PTR [ebp-0x15e],al
10000f65:	83 ec 08             	sub    esp,0x8
10000f68:	8d 85 a2 fe ff ff    	lea    eax,[ebp-0x15e]
10000f6e:	50                   	push   eax
10000f6f:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000f75:	50                   	push   eax
10000f76:	e8 fc ff ff ff       	call   10000f77 <backupTree(char*, unsigned short)+0x430>	10000f77: R_386_PC32	strcat
10000f7b:	83 c4 10             	add    esp,0x10
10000f7e:	0f b7 45 c6          	movzx  eax,WORD PTR [ebp-0x3a]
10000f82:	c1 f8 08             	sar    eax,0x8
10000f85:	83 e0 0f             	and    eax,0xf
10000f88:	8a 84 05 88 fe ff ff 	mov    al,BYTE PTR [ebp+eax*1-0x178]
10000f8f:	88 85 a2 fe ff ff    	mov    BYTE PTR [ebp-0x15e],al
10000f95:	83 ec 08             	sub    esp,0x8
10000f98:	8d 85 a2 fe ff ff    	lea    eax,[ebp-0x15e]
10000f9e:	50                   	push   eax
10000f9f:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000fa5:	50                   	push   eax
10000fa6:	e8 fc ff ff ff       	call   10000fa7 <backupTree(char*, unsigned short)+0x460>	10000fa7: R_386_PC32	strcat
10000fab:	83 c4 10             	add    esp,0x10
10000fae:	66 8b 45 c6          	mov    ax,WORD PTR [ebp-0x3a]
10000fb2:	66 c1 e8 0c          	shr    ax,0xc
10000fb6:	0f b7 c0             	movzx  eax,ax
10000fb9:	8a 84 05 88 fe ff ff 	mov    al,BYTE PTR [ebp+eax*1-0x178]
10000fc0:	88 85 a2 fe ff ff    	mov    BYTE PTR [ebp-0x15e],al
10000fc6:	83 ec 08             	sub    esp,0x8
10000fc9:	8d 85 a2 fe ff ff    	lea    eax,[ebp-0x15e]
10000fcf:	50                   	push   eax
10000fd0:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000fd6:	50                   	push   eax
10000fd7:	e8 fc ff ff ff       	call   10000fd8 <backupTree(char*, unsigned short)+0x491>	10000fd8: R_386_PC32	strcat
10000fdc:	83 c4 10             	add    esp,0x10
10000fdf:	83 ec 0c             	sub    esp,0xc
10000fe2:	68 14 01 00 00       	push   0x114
10000fe7:	e8 fc ff ff ff       	call   10000fe8 <backupTree(char*, unsigned short)+0x4a1>	10000fe8: R_386_PC32	operator new(unsigned long)
10000fec:	83 c4 10             	add    esp,0x10
10000fef:	89 c3                	mov    ebx,eax
10000ff1:	b8 00 20 00 c2       	mov    eax,0xc2002000
10000ff6:	8b 00                	mov    eax,DWORD PTR [eax]
10000ff8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
10000ffb:	83 ec 04             	sub    esp,0x4
10000ffe:	50                   	push   eax
10000fff:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10001002:	53                   	push   ebx
10001003:	e8 fc ff ff ff       	call   10001004 <backupTree(char*, unsigned short)+0x4bd>	10001004: R_386_PC32	File::File(char const*, Process*)
10001008:	83 c4 10             	add    esp,0x10
1000100b:	89 5d c0             	mov    DWORD PTR [ebp-0x40],ebx
1000100e:	83 ec 08             	sub    esp,0x8
10001011:	6a 01                	push   0x1
10001013:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
10001016:	e8 fc ff ff ff       	call   10001017 <backupTree(char*, unsigned short)+0x4d0>	10001017: R_386_PC32	File::open(FileOpenMode)
1000101b:	83 c4 10             	add    esp,0x10
1000101e:	83 7d c0 00          	cmp    DWORD PTR [ebp-0x40],0x0
10001022:	75 15                	jne    10001039 <backupTree(char*, unsigned short)+0x4f2>
10001024:	83 ec 0c             	sub    esp,0xc
10001027:	68 ac 4f 00 10       	push   0x10004fac	10001028: R_386_32	.text
1000102c:	e8 fc ff ff ff       	call   1000102d <backupTree(char*, unsigned short)+0x4e6>	1000102d: R_386_PC32	KePanic(char const*)
10001031:	83 c4 10             	add    esp,0x10
10001034:	e9 3e 01 00 00       	jmp    10001177 <backupTree(char*, unsigned short)+0x630>
10001039:	83 7d c0 00          	cmp    DWORD PTR [ebp-0x40],0x0
1000103d:	0f 84 c5 fb ff ff    	je     10000c08 <backupTree(char*, unsigned short)+0xc1>
10001043:	83 ec 0c             	sub    esp,0xc
10001046:	68 14 01 00 00       	push   0x114
1000104b:	e8 fc ff ff ff       	call   1000104c <backupTree(char*, unsigned short)+0x505>	1000104c: R_386_PC32	operator new(unsigned long)
10001050:	83 c4 10             	add    esp,0x10
10001053:	89 c3                	mov    ebx,eax
10001055:	b8 00 20 00 c2       	mov    eax,0xc2002000
1000105a:	8b 00                	mov    eax,DWORD PTR [eax]
1000105c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
1000105f:	83 ec 04             	sub    esp,0x4
10001062:	50                   	push   eax
10001063:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10001069:	50                   	push   eax
1000106a:	53                   	push   ebx
1000106b:	e8 fc ff ff ff       	call   1000106c <backupTree(char*, unsigned short)+0x525>	1000106c: R_386_PC32	File::File(char const*, Process*)
10001070:	83 c4 10             	add    esp,0x10
10001073:	89 5d bc             	mov    DWORD PTR [ebp-0x44],ebx
10001076:	83 ec 08             	sub    esp,0x8
10001079:	6a 12                	push   0x12
1000107b:	ff 75 bc             	push   DWORD PTR [ebp-0x44]
1000107e:	e8 fc ff ff ff       	call   1000107f <backupTree(char*, unsigned short)+0x538>	1000107f: R_386_PC32	File::open(FileOpenMode)
10001083:	83 c4 10             	add    esp,0x10
10001086:	83 7d bc 00          	cmp    DWORD PTR [ebp-0x44],0x0
1000108a:	75 23                	jne    100010af <backupTree(char*, unsigned short)+0x568>
1000108c:	83 ec 0c             	sub    esp,0xc
1000108f:	68 ac 4f 00 10       	push   0x10004fac	10001090: R_386_32	.text
10001094:	e8 fc ff ff ff       	call   10001095 <backupTree(char*, unsigned short)+0x54e>	10001095: R_386_PC32	KePanic(char const*)
10001099:	83 c4 10             	add    esp,0x10
1000109c:	83 ec 0c             	sub    esp,0xc
1000109f:	ff 75 bc             	push   DWORD PTR [ebp-0x44]
100010a2:	e8 fc ff ff ff       	call   100010a3 <backupTree(char*, unsigned short)+0x55c>	100010a3: R_386_PC32	File::close()
100010a7:	83 c4 10             	add    esp,0x10
100010aa:	e9 c8 00 00 00       	jmp    10001177 <backupTree(char*, unsigned short)+0x630>
100010af:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
100010b2:	8b 00                	mov    eax,DWORD PTR [eax]
100010b4:	83 c0 0c             	add    eax,0xc
100010b7:	8b 00                	mov    eax,DWORD PTR [eax]
100010b9:	83 ec 0c             	sub    esp,0xc
100010bc:	8d 95 84 fe ff ff    	lea    edx,[ebp-0x17c]
100010c2:	52                   	push   edx
100010c3:	8d 95 80 ee ff ff    	lea    edx,[ebp-0x1180]
100010c9:	52                   	push   edx
100010ca:	6a 00                	push   0x0
100010cc:	68 00 10 00 00       	push   0x1000
100010d1:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
100010d4:	ff d0                	call   eax
100010d6:	83 c4 20             	add    esp,0x20
100010d9:	89 45 b8             	mov    DWORD PTR [ebp-0x48],eax
100010dc:	83 7d b8 00          	cmp    DWORD PTR [ebp-0x48],0x0
100010e0:	75 3b                	jne    1000111d <backupTree(char*, unsigned short)+0x5d6>
100010e2:	8b 45 bc             	mov    eax,DWORD PTR [ebp-0x44]
100010e5:	8b 00                	mov    eax,DWORD PTR [eax]
100010e7:	83 c0 10             	add    eax,0x10
100010ea:	8b 08                	mov    ecx,DWORD PTR [eax]
100010ec:	8b 85 84 fe ff ff    	mov    eax,DWORD PTR [ebp-0x17c]
100010f2:	99                   	cdq    
100010f3:	83 ec 0c             	sub    esp,0xc
100010f6:	8d 9d 80 fe ff ff    	lea    ebx,[ebp-0x180]
100010fc:	53                   	push   ebx
100010fd:	8d 9d 80 ee ff ff    	lea    ebx,[ebp-0x1180]
10001103:	53                   	push   ebx
10001104:	52                   	push   edx
10001105:	50                   	push   eax
10001106:	ff 75 bc             	push   DWORD PTR [ebp-0x44]
10001109:	ff d1                	call   ecx
1000110b:	83 c4 20             	add    esp,0x20
1000110e:	8b 85 84 fe ff ff    	mov    eax,DWORD PTR [ebp-0x17c]
10001114:	3d 00 10 00 00       	cmp    eax,0x1000
10001119:	75 05                	jne    10001120 <backupTree(char*, unsigned short)+0x5d9>
1000111b:	eb 92                	jmp    100010af <backupTree(char*, unsigned short)+0x568>
1000111d:	90                   	nop
1000111e:	eb 01                	jmp    10001121 <backupTree(char*, unsigned short)+0x5da>
10001120:	90                   	nop
10001121:	83 ec 0c             	sub    esp,0xc
10001124:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
10001127:	e8 fc ff ff ff       	call   10001128 <backupTree(char*, unsigned short)+0x5e1>	10001128: R_386_PC32	File::close()
1000112c:	83 c4 10             	add    esp,0x10
1000112f:	83 ec 0c             	sub    esp,0xc
10001132:	ff 75 bc             	push   DWORD PTR [ebp-0x44]
10001135:	e8 fc ff ff ff       	call   10001136 <backupTree(char*, unsigned short)+0x5ef>	10001136: R_386_PC32	File::close()
1000113a:	83 c4 10             	add    esp,0x10
1000113d:	83 7d c0 00          	cmp    DWORD PTR [ebp-0x40],0x0
10001141:	74 15                	je     10001158 <backupTree(char*, unsigned short)+0x611>
10001143:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
10001146:	8b 00                	mov    eax,DWORD PTR [eax]
10001148:	83 c0 08             	add    eax,0x8
1000114b:	8b 00                	mov    eax,DWORD PTR [eax]
1000114d:	83 ec 0c             	sub    esp,0xc
10001150:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
10001153:	ff d0                	call   eax
10001155:	83 c4 10             	add    esp,0x10
10001158:	83 7d bc 00          	cmp    DWORD PTR [ebp-0x44],0x0
1000115c:	0f 84 a6 fa ff ff    	je     10000c08 <backupTree(char*, unsigned short)+0xc1>
10001162:	8b 45 bc             	mov    eax,DWORD PTR [ebp-0x44]
10001165:	8b 00                	mov    eax,DWORD PTR [eax]
10001167:	83 c0 08             	add    eax,0x8
1000116a:	8b 00                	mov    eax,DWORD PTR [eax]
1000116c:	83 ec 0c             	sub    esp,0xc
1000116f:	ff 75 bc             	push   DWORD PTR [ebp-0x44]
10001172:	ff d0                	call   eax
10001174:	83 c4 10             	add    esp,0x10
10001177:	e9 8c fa ff ff       	jmp    10000c08 <backupTree(char*, unsigned short)+0xc1>
1000117c:	90                   	nop
1000117d:	83 ec 0c             	sub    esp,0xc
10001180:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10001183:	e8 fc ff ff ff       	call   10001184 <backupTree(char*, unsigned short)+0x63d>	10001184: R_386_PC32	free
10001188:	83 c4 10             	add    esp,0x10
1000118b:	83 ec 0c             	sub    esp,0xc
1000118e:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10001191:	e8 fc ff ff ff       	call   10001192 <backupTree(char*, unsigned short)+0x64b>	10001192: R_386_PC32	Directory::close()
10001196:	83 c4 10             	add    esp,0x10
10001199:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
1000119d:	74 18                	je     100011b7 <backupTree(char*, unsigned short)+0x670>
1000119f:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
100011a2:	8b 00                	mov    eax,DWORD PTR [eax]
100011a4:	83 c0 08             	add    eax,0x8
100011a7:	8b 00                	mov    eax,DWORD PTR [eax]
100011a9:	83 ec 0c             	sub    esp,0xc
100011ac:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
100011af:	ff d0                	call   eax
100011b1:	83 c4 10             	add    esp,0x10
100011b4:	eb 01                	jmp    100011b7 <backupTree(char*, unsigned short)+0x670>
100011b6:	90                   	nop
100011b7:	8d 65 f4             	lea    esp,[ebp-0xc]
100011ba:	5b                   	pop    ebx
100011bb:	5e                   	pop    esi
100011bc:	5f                   	pop    edi
100011bd:	5d                   	pop    ebp
100011be:	c3                   	ret    

100011bf <createUser(char const*)>:
100011bf:	55                   	push   ebp
100011c0:	89 e5                	mov    ebp,esp
100011c2:	81 ec 08 01 00 00    	sub    esp,0x108
100011c8:	68 f6 4f 00 10       	push   0x10004ff6	100011c9: R_386_32	.text
100011cd:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100011d3:	50                   	push   eax
100011d4:	e8 fc ff ff ff       	call   100011d5 <createUser(char const*)+0x16>	100011d5: R_386_PC32	strcpy
100011d9:	83 c4 08             	add    esp,0x8
100011dc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100011df:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100011e5:	50                   	push   eax
100011e6:	e8 fc ff ff ff       	call   100011e7 <createUser(char const*)+0x28>	100011e7: R_386_PC32	strcat
100011eb:	83 c4 08             	add    esp,0x8
100011ee:	83 ec 08             	sub    esp,0x8
100011f1:	68 c0 01 00 00       	push   0x1c0
100011f6:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100011fc:	50                   	push   eax
100011fd:	e8 fc ff ff ff       	call   100011fe <createUser(char const*)+0x3f>	100011fe: R_386_PC32	mkdir(char const*, int)
10001202:	83 c4 10             	add    esp,0x10
10001205:	83 ec 08             	sub    esp,0x8
10001208:	68 00 50 00 10       	push   0x10005000	10001209: R_386_32	.text
1000120d:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001213:	50                   	push   eax
10001214:	e8 fc ff ff ff       	call   10001215 <createUser(char const*)+0x56>	10001215: R_386_PC32	strcat
10001219:	83 c4 10             	add    esp,0x10
1000121c:	83 ec 08             	sub    esp,0x8
1000121f:	68 c0 01 00 00       	push   0x1c0
10001224:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000122a:	50                   	push   eax
1000122b:	e8 fc ff ff ff       	call   1000122c <createUser(char const*)+0x6d>	1000122c: R_386_PC32	mkdir(char const*, int)
10001230:	83 c4 10             	add    esp,0x10
10001233:	83 ec 08             	sub    esp,0x8
10001236:	68 f6 4f 00 10       	push   0x10004ff6	10001237: R_386_32	.text
1000123b:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001241:	50                   	push   eax
10001242:	e8 fc ff ff ff       	call   10001243 <createUser(char const*)+0x84>	10001243: R_386_PC32	strcpy
10001247:	83 c4 10             	add    esp,0x10
1000124a:	83 ec 08             	sub    esp,0x8
1000124d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001250:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001256:	50                   	push   eax
10001257:	e8 fc ff ff ff       	call   10001258 <createUser(char const*)+0x99>	10001258: R_386_PC32	strcat
1000125c:	83 c4 10             	add    esp,0x10
1000125f:	83 ec 08             	sub    esp,0x8
10001262:	68 09 50 00 10       	push   0x10005009	10001263: R_386_32	.text
10001267:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000126d:	50                   	push   eax
1000126e:	e8 fc ff ff ff       	call   1000126f <createUser(char const*)+0xb0>	1000126f: R_386_PC32	strcat
10001273:	83 c4 10             	add    esp,0x10
10001276:	83 ec 08             	sub    esp,0x8
10001279:	68 c0 01 00 00       	push   0x1c0
1000127e:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001284:	50                   	push   eax
10001285:	e8 fc ff ff ff       	call   10001286 <createUser(char const*)+0xc7>	10001286: R_386_PC32	mkdir(char const*, int)
1000128a:	83 c4 10             	add    esp,0x10
1000128d:	83 ec 08             	sub    esp,0x8
10001290:	68 f6 4f 00 10       	push   0x10004ff6	10001291: R_386_32	.text
10001295:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000129b:	50                   	push   eax
1000129c:	e8 fc ff ff ff       	call   1000129d <createUser(char const*)+0xde>	1000129d: R_386_PC32	strcpy
100012a1:	83 c4 10             	add    esp,0x10
100012a4:	83 ec 08             	sub    esp,0x8
100012a7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100012aa:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100012b0:	50                   	push   eax
100012b1:	e8 fc ff ff ff       	call   100012b2 <createUser(char const*)+0xf3>	100012b2: R_386_PC32	strcat
100012b6:	83 c4 10             	add    esp,0x10
100012b9:	83 ec 08             	sub    esp,0x8
100012bc:	68 14 50 00 10       	push   0x10005014	100012bd: R_386_32	.text
100012c1:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100012c7:	50                   	push   eax
100012c8:	e8 fc ff ff ff       	call   100012c9 <createUser(char const*)+0x10a>	100012c9: R_386_PC32	strcat
100012cd:	83 c4 10             	add    esp,0x10
100012d0:	83 ec 08             	sub    esp,0x8
100012d3:	68 c0 01 00 00       	push   0x1c0
100012d8:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100012de:	50                   	push   eax
100012df:	e8 fc ff ff ff       	call   100012e0 <createUser(char const*)+0x121>	100012e0: R_386_PC32	mkdir(char const*, int)
100012e4:	83 c4 10             	add    esp,0x10
100012e7:	83 ec 08             	sub    esp,0x8
100012ea:	68 f6 4f 00 10       	push   0x10004ff6	100012eb: R_386_32	.text
100012ef:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100012f5:	50                   	push   eax
100012f6:	e8 fc ff ff ff       	call   100012f7 <createUser(char const*)+0x138>	100012f7: R_386_PC32	strcpy
100012fb:	83 c4 10             	add    esp,0x10
100012fe:	83 ec 08             	sub    esp,0x8
10001301:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001304:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000130a:	50                   	push   eax
1000130b:	e8 fc ff ff ff       	call   1000130c <createUser(char const*)+0x14d>	1000130c: R_386_PC32	strcat
10001310:	83 c4 10             	add    esp,0x10
10001313:	83 ec 08             	sub    esp,0x8
10001316:	68 1f 50 00 10       	push   0x1000501f	10001317: R_386_32	.text
1000131b:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001321:	50                   	push   eax
10001322:	e8 fc ff ff ff       	call   10001323 <createUser(char const*)+0x164>	10001323: R_386_PC32	strcat
10001327:	83 c4 10             	add    esp,0x10
1000132a:	83 ec 08             	sub    esp,0x8
1000132d:	68 c0 01 00 00       	push   0x1c0
10001332:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001338:	50                   	push   eax
10001339:	e8 fc ff ff ff       	call   1000133a <createUser(char const*)+0x17b>	1000133a: R_386_PC32	mkdir(char const*, int)
1000133e:	83 c4 10             	add    esp,0x10
10001341:	83 ec 08             	sub    esp,0x8
10001344:	68 f6 4f 00 10       	push   0x10004ff6	10001345: R_386_32	.text
10001349:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000134f:	50                   	push   eax
10001350:	e8 fc ff ff ff       	call   10001351 <createUser(char const*)+0x192>	10001351: R_386_PC32	strcpy
10001355:	83 c4 10             	add    esp,0x10
10001358:	83 ec 08             	sub    esp,0x8
1000135b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000135e:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001364:	50                   	push   eax
10001365:	e8 fc ff ff ff       	call   10001366 <createUser(char const*)+0x1a7>	10001366: R_386_PC32	strcat
1000136a:	83 c4 10             	add    esp,0x10
1000136d:	83 ec 08             	sub    esp,0x8
10001370:	68 27 50 00 10       	push   0x10005027	10001371: R_386_32	.text
10001375:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000137b:	50                   	push   eax
1000137c:	e8 fc ff ff ff       	call   1000137d <createUser(char const*)+0x1be>	1000137d: R_386_PC32	strcat
10001381:	83 c4 10             	add    esp,0x10
10001384:	83 ec 08             	sub    esp,0x8
10001387:	68 c0 01 00 00       	push   0x1c0
1000138c:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001392:	50                   	push   eax
10001393:	e8 fc ff ff ff       	call   10001394 <createUser(char const*)+0x1d5>	10001394: R_386_PC32	mkdir(char const*, int)
10001398:	83 c4 10             	add    esp,0x10
1000139b:	83 ec 08             	sub    esp,0x8
1000139e:	68 f6 4f 00 10       	push   0x10004ff6	1000139f: R_386_32	.text
100013a3:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100013a9:	50                   	push   eax
100013aa:	e8 fc ff ff ff       	call   100013ab <createUser(char const*)+0x1ec>	100013ab: R_386_PC32	strcpy
100013af:	83 c4 10             	add    esp,0x10
100013b2:	83 ec 08             	sub    esp,0x8
100013b5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100013b8:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100013be:	50                   	push   eax
100013bf:	e8 fc ff ff ff       	call   100013c0 <createUser(char const*)+0x201>	100013c0: R_386_PC32	strcat
100013c4:	83 c4 10             	add    esp,0x10
100013c7:	83 ec 08             	sub    esp,0x8
100013ca:	68 32 50 00 10       	push   0x10005032	100013cb: R_386_32	.text
100013cf:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100013d5:	50                   	push   eax
100013d6:	e8 fc ff ff ff       	call   100013d7 <createUser(char const*)+0x218>	100013d7: R_386_PC32	strcat
100013db:	83 c4 10             	add    esp,0x10
100013de:	83 ec 08             	sub    esp,0x8
100013e1:	68 c0 01 00 00       	push   0x1c0
100013e6:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100013ec:	50                   	push   eax
100013ed:	e8 fc ff ff ff       	call   100013ee <createUser(char const*)+0x22f>	100013ee: R_386_PC32	mkdir(char const*, int)
100013f2:	83 c4 10             	add    esp,0x10
100013f5:	83 ec 08             	sub    esp,0x8
100013f8:	68 f6 4f 00 10       	push   0x10004ff6	100013f9: R_386_32	.text
100013fd:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001403:	50                   	push   eax
10001404:	e8 fc ff ff ff       	call   10001405 <createUser(char const*)+0x246>	10001405: R_386_PC32	strcpy
10001409:	83 c4 10             	add    esp,0x10
1000140c:	83 ec 08             	sub    esp,0x8
1000140f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001412:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001418:	50                   	push   eax
10001419:	e8 fc ff ff ff       	call   1000141a <createUser(char const*)+0x25b>	1000141a: R_386_PC32	strcat
1000141e:	83 c4 10             	add    esp,0x10
10001421:	83 ec 08             	sub    esp,0x8
10001424:	68 39 50 00 10       	push   0x10005039	10001425: R_386_32	.text
10001429:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000142f:	50                   	push   eax
10001430:	e8 fc ff ff ff       	call   10001431 <createUser(char const*)+0x272>	10001431: R_386_PC32	strcat
10001435:	83 c4 10             	add    esp,0x10
10001438:	83 ec 08             	sub    esp,0x8
1000143b:	68 c0 01 00 00       	push   0x1c0
10001440:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001446:	50                   	push   eax
10001447:	e8 fc ff ff ff       	call   10001448 <createUser(char const*)+0x289>	10001448: R_386_PC32	mkdir(char const*, int)
1000144c:	83 c4 10             	add    esp,0x10
1000144f:	83 ec 08             	sub    esp,0x8
10001452:	68 41 50 00 10       	push   0x10005041	10001453: R_386_32	.text
10001457:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000145d:	50                   	push   eax
1000145e:	e8 fc ff ff ff       	call   1000145f <createUser(char const*)+0x2a0>	1000145f: R_386_PC32	strcpy
10001463:	83 c4 10             	add    esp,0x10
10001466:	83 ec 08             	sub    esp,0x8
10001469:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000146c:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001472:	50                   	push   eax
10001473:	e8 fc ff ff ff       	call   10001474 <createUser(char const*)+0x2b5>	10001474: R_386_PC32	strcat
10001478:	83 c4 10             	add    esp,0x10
1000147b:	83 ec 08             	sub    esp,0x8
1000147e:	68 c0 01 00 00       	push   0x1c0
10001483:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001489:	50                   	push   eax
1000148a:	e8 fc ff ff ff       	call   1000148b <createUser(char const*)+0x2cc>	1000148b: R_386_PC32	mkdir(char const*, int)
1000148f:	83 c4 10             	add    esp,0x10
10001492:	83 ec 08             	sub    esp,0x8
10001495:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000149b:	50                   	push   eax
1000149c:	68 5c 50 00 10       	push   0x1000505c	1000149d: R_386_32	.text
100014a1:	e8 fc ff ff ff       	call   100014a2 <createUser(char const*)+0x2e3>	100014a2: R_386_PC32	copytree(char*, char*)
100014a6:	83 c4 10             	add    esp,0x10
100014a9:	90                   	nop
100014aa:	c9                   	leave  
100014ab:	c3                   	ret    

100014ac <drawBootScreen()>:
100014ac:	55                   	push   ebp
100014ad:	89 e5                	mov    ebp,esp
100014af:	83 ec 18             	sub    esp,0x18
100014b2:	a1 00 00 00 00       	mov    eax,ds:0x0	100014b3: R_386_32	term
100014b7:	83 ec 08             	sub    esp,0x8
100014ba:	6a 0b                	push   0xb
100014bc:	50                   	push   eax
100014bd:	e8 fc ff ff ff       	call   100014be <drawBootScreen()+0x12>	100014be: R_386_PC32	VgaText::setDefaultBgColour(VgaColour)
100014c2:	83 c4 10             	add    esp,0x10
100014c5:	a1 00 00 00 00       	mov    eax,ds:0x0	100014c6: R_386_32	term
100014ca:	83 ec 08             	sub    esp,0x8
100014cd:	6a 00                	push   0x0
100014cf:	50                   	push   eax
100014d0:	e8 fc ff ff ff       	call   100014d1 <drawBootScreen()+0x25>	100014d1: R_386_PC32	VgaText::setDefaultFgColour(VgaColour)
100014d5:	83 c4 10             	add    esp,0x10
100014d8:	a1 00 00 00 00       	mov    eax,ds:0x0	100014d9: R_386_32	term
100014dd:	83 ec 0c             	sub    esp,0xc
100014e0:	50                   	push   eax
100014e1:	e8 fc ff ff ff       	call   100014e2 <drawBootScreen()+0x36>	100014e2: R_386_PC32	VgaText::clearScreen()
100014e6:	83 c4 10             	add    esp,0x10
100014e9:	a1 00 00 00 00       	mov    eax,ds:0x0	100014ea: R_386_32	term
100014ee:	83 ec 08             	sub    esp,0x8
100014f1:	68 7b 50 00 10       	push   0x1000507b	100014f2: R_386_32	.text
100014f6:	50                   	push   eax
100014f7:	e8 fc ff ff ff       	call   100014f8 <drawBootScreen()+0x4c>	100014f8: R_386_PC32	VgaText::setTitle(char*)
100014fc:	83 c4 10             	add    esp,0x10
100014ff:	a1 00 00 00 00       	mov    eax,ds:0x0	10001500: R_386_32	term
10001504:	83 ec 08             	sub    esp,0x8
10001507:	6a 00                	push   0x0
10001509:	50                   	push   eax
1000150a:	e8 fc ff ff ff       	call   1000150b <drawBootScreen()+0x5f>	1000150b: R_386_PC32	VgaText::setTitleColour(VgaColour)
1000150f:	83 c4 10             	add    esp,0x10
10001512:	a1 00 00 00 00       	mov    eax,ds:0x0	10001513: R_386_32	term
10001517:	83 ec 08             	sub    esp,0x8
1000151a:	6a 00                	push   0x0
1000151c:	50                   	push   eax
1000151d:	e8 fc ff ff ff       	call   1000151e <drawBootScreen()+0x72>	1000151e: R_386_PC32	VgaText::setTitleTextColour(VgaColour)
10001522:	83 c4 10             	add    esp,0x10
10001525:	a1 00 00 00 00       	mov    eax,ds:0x0	10001526: R_386_32	term
1000152a:	83 ec 04             	sub    esp,0x4
1000152d:	6a 00                	push   0x0
1000152f:	6a 00                	push   0x0
10001531:	50                   	push   eax
10001532:	e8 fc ff ff ff       	call   10001533 <drawBootScreen()+0x87>	10001533: R_386_PC32	VgaText::setCursor(int, int)
10001537:	83 c4 10             	add    esp,0x10
1000153a:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
10001541:	83 7d f4 4f          	cmp    DWORD PTR [ebp-0xc],0x4f
10001545:	7f 19                	jg     10001560 <drawBootScreen()+0xb4>
10001547:	a1 00 00 00 00       	mov    eax,ds:0x0	10001548: R_386_32	term
1000154c:	6a 00                	push   0x0
1000154e:	6a 00                	push   0x0
10001550:	6a 20                	push   0x20
10001552:	50                   	push   eax
10001553:	e8 fc ff ff ff       	call   10001554 <drawBootScreen()+0xa8>	10001554: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
10001558:	83 c4 10             	add    esp,0x10
1000155b:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
1000155e:	eb e1                	jmp    10001541 <drawBootScreen()+0x95>
10001560:	a0 00 00 00 00       	mov    al,ds:0x0	10001561: R_386_32	showSidebar
10001565:	84 c0                	test   al,al
10001567:	0f 84 91 00 00 00    	je     100015fe <drawBootScreen()+0x152>
1000156d:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
10001574:	83 7d f0 18          	cmp    DWORD PTR [ebp-0x10],0x18
10001578:	7f 41                	jg     100015bb <drawBootScreen()+0x10f>
1000157a:	a1 00 00 00 00       	mov    eax,ds:0x0	1000157b: R_386_32	term
1000157f:	83 ec 04             	sub    esp,0x4
10001582:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10001585:	6a 00                	push   0x0
10001587:	50                   	push   eax
10001588:	e8 fc ff ff ff       	call   10001589 <drawBootScreen()+0xdd>	10001589: R_386_PC32	VgaText::setCursor(int, int)
1000158d:	83 c4 10             	add    esp,0x10
10001590:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
10001597:	83 7d ec 0f          	cmp    DWORD PTR [ebp-0x14],0xf
1000159b:	7f 19                	jg     100015b6 <drawBootScreen()+0x10a>
1000159d:	a1 00 00 00 00       	mov    eax,ds:0x0	1000159e: R_386_32	term
100015a2:	6a 00                	push   0x0
100015a4:	6a 00                	push   0x0
100015a6:	6a 20                	push   0x20
100015a8:	50                   	push   eax
100015a9:	e8 fc ff ff ff       	call   100015aa <drawBootScreen()+0xfe>	100015aa: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
100015ae:	83 c4 10             	add    esp,0x10
100015b1:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
100015b4:	eb e1                	jmp    10001597 <drawBootScreen()+0xeb>
100015b6:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
100015b9:	eb b9                	jmp    10001574 <drawBootScreen()+0xc8>
100015bb:	a1 00 00 00 00       	mov    eax,ds:0x0	100015bc: R_386_32	term
100015c0:	83 ec 04             	sub    esp,0x4
100015c3:	6a 01                	push   0x1
100015c5:	6a 01                	push   0x1
100015c7:	50                   	push   eax
100015c8:	e8 fc ff ff ff       	call   100015c9 <drawBootScreen()+0x11d>	100015c9: R_386_PC32	VgaText::setCursor(int, int)
100015cd:	83 c4 10             	add    esp,0x10
100015d0:	a1 00 00 00 00       	mov    eax,ds:0x0	100015d1: R_386_32	term
100015d5:	6a 00                	push   0x0
100015d7:	6a 0f                	push   0xf
100015d9:	68 7c 50 00 10       	push   0x1000507c	100015da: R_386_32	.text
100015de:	50                   	push   eax
100015df:	e8 fc ff ff ff       	call   100015e0 <drawBootScreen()+0x134>	100015e0: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
100015e4:	83 c4 10             	add    esp,0x10
100015e7:	a1 00 00 00 00       	mov    eax,ds:0x0	100015e8: R_386_32	term
100015ec:	6a 00                	push   0x0
100015ee:	6a 0e                	push   0xe
100015f0:	68 ff 50 00 10       	push   0x100050ff	100015f1: R_386_32	.text
100015f5:	50                   	push   eax
100015f6:	e8 fc ff ff ff       	call   100015f7 <drawBootScreen()+0x14b>	100015f7: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
100015fb:	83 c4 10             	add    esp,0x10
100015fe:	a1 00 00 00 00       	mov    eax,ds:0x0	100015ff: R_386_32	term
10001603:	83 ec 08             	sub    esp,0x8
10001606:	6a 0f                	push   0xf
10001608:	50                   	push   eax
10001609:	e8 fc ff ff ff       	call   1000160a <drawBootScreen()+0x15e>	1000160a: R_386_PC32	VgaText::setDefaultBgColour(VgaColour)
1000160e:	83 c4 10             	add    esp,0x10
10001611:	a1 00 00 00 00       	mov    eax,ds:0x0	10001612: R_386_32	term
10001616:	83 ec 08             	sub    esp,0x8
10001619:	6a 00                	push   0x0
1000161b:	50                   	push   eax
1000161c:	e8 fc ff ff ff       	call   1000161d <drawBootScreen()+0x171>	1000161d: R_386_PC32	VgaText::setDefaultFgColour(VgaColour)
10001621:	83 c4 10             	add    esp,0x10
10001624:	90                   	nop
10001625:	c9                   	leave  
10001626:	c3                   	ret    

10001627 <drawBasicWindowX(int, int, int, int, char const*, bool)>:
10001627:	55                   	push   ebp
10001628:	89 e5                	mov    ebp,esp
1000162a:	53                   	push   ebx
1000162b:	83 ec 34             	sub    esp,0x34
1000162e:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
10001631:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
10001634:	ff 45 0c             	inc    DWORD PTR [ebp+0xc]
10001637:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
1000163e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10001641:	3b 45 14             	cmp    eax,DWORD PTR [ebp+0x14]
10001644:	7d 6c                	jge    100016b2 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x8b>
10001646:	a1 00 00 00 00       	mov    eax,ds:0x0	10001647: R_386_32	term
1000164b:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
1000164e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001651:	01 ca                	add    edx,ecx
10001653:	83 ec 04             	sub    esp,0x4
10001656:	52                   	push   edx
10001657:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000165a:	50                   	push   eax
1000165b:	e8 fc ff ff ff       	call   1000165c <drawBasicWindowX(int, int, int, int, char const*, bool)+0x35>	1000165c: R_386_PC32	VgaText::setCursor(int, int)
10001660:	83 c4 10             	add    esp,0x10
10001663:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
1000166a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
1000166d:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
10001670:	7d 3b                	jge    100016ad <drawBasicWindowX(int, int, int, int, char const*, bool)+0x86>
10001672:	a1 00 00 00 00       	mov    eax,ds:0x0	10001673: R_386_32	term
10001677:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
1000167b:	74 07                	je     10001684 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x5d>
1000167d:	b9 07 00 00 00       	mov    ecx,0x7
10001682:	eb 05                	jmp    10001689 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x62>
10001684:	b9 0f 00 00 00       	mov    ecx,0xf
10001689:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
1000168d:	74 07                	je     10001696 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x6f>
1000168f:	ba 07 00 00 00       	mov    edx,0x7
10001694:	eb 05                	jmp    1000169b <drawBasicWindowX(int, int, int, int, char const*, bool)+0x74>
10001696:	ba 0f 00 00 00       	mov    edx,0xf
1000169b:	51                   	push   ecx
1000169c:	52                   	push   edx
1000169d:	6a 20                	push   0x20
1000169f:	50                   	push   eax
100016a0:	e8 fc ff ff ff       	call   100016a1 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x7a>	100016a1: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
100016a5:	83 c4 10             	add    esp,0x10
100016a8:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
100016ab:	eb bd                	jmp    1000166a <drawBasicWindowX(int, int, int, int, char const*, bool)+0x43>
100016ad:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
100016b0:	eb 8c                	jmp    1000163e <drawBasicWindowX(int, int, int, int, char const*, bool)+0x17>
100016b2:	a1 00 00 00 00       	mov    eax,ds:0x0	100016b3: R_386_32	term
100016b7:	83 ec 04             	sub    esp,0x4
100016ba:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
100016bd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100016c0:	50                   	push   eax
100016c1:	e8 fc ff ff ff       	call   100016c2 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x9b>	100016c2: R_386_PC32	VgaText::setCursor(int, int)
100016c6:	83 c4 10             	add    esp,0x10
100016c9:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
100016d0:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
100016d3:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
100016d6:	7d 19                	jge    100016f1 <drawBasicWindowX(int, int, int, int, char const*, bool)+0xca>
100016d8:	a1 00 00 00 00       	mov    eax,ds:0x0	100016d9: R_386_32	term
100016dd:	6a 01                	push   0x1
100016df:	6a 01                	push   0x1
100016e1:	6a 20                	push   0x20
100016e3:	50                   	push   eax
100016e4:	e8 fc ff ff ff       	call   100016e5 <drawBasicWindowX(int, int, int, int, char const*, bool)+0xbe>	100016e5: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
100016e9:	83 c4 10             	add    esp,0x10
100016ec:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
100016ef:	eb df                	jmp    100016d0 <drawBasicWindowX(int, int, int, int, char const*, bool)+0xa9>
100016f1:	a1 00 00 00 00       	mov    eax,ds:0x0	100016f2: R_386_32	term
100016f6:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
100016f9:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
100016fc:	01 d1                	add    ecx,edx
100016fe:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10001701:	42                   	inc    edx
10001702:	83 ec 04             	sub    esp,0x4
10001705:	51                   	push   ecx
10001706:	52                   	push   edx
10001707:	50                   	push   eax
10001708:	e8 fc ff ff ff       	call   10001709 <drawBasicWindowX(int, int, int, int, char const*, bool)+0xe2>	10001709: R_386_PC32	VgaText::setCursor(int, int)
1000170d:	83 c4 10             	add    esp,0x10
10001710:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
10001717:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
1000171a:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
1000171d:	7d 19                	jge    10001738 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x111>
1000171f:	a1 00 00 00 00       	mov    eax,ds:0x0	10001720: R_386_32	term
10001724:	6a 03                	push   0x3
10001726:	6a 03                	push   0x3
10001728:	6a 20                	push   0x20
1000172a:	50                   	push   eax
1000172b:	e8 fc ff ff ff       	call   1000172c <drawBasicWindowX(int, int, int, int, char const*, bool)+0x105>	1000172c: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
10001730:	83 c4 10             	add    esp,0x10
10001733:	ff 45 e8             	inc    DWORD PTR [ebp-0x18]
10001736:	eb df                	jmp    10001717 <drawBasicWindowX(int, int, int, int, char const*, bool)+0xf0>
10001738:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
1000173b:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
1000173e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10001741:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
10001744:	01 d0                	add    eax,edx
10001746:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
10001749:	0f 8d 89 00 00 00    	jge    100017d8 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x1b1>
1000174f:	a1 00 00 00 00       	mov    eax,ds:0x0	10001750: R_386_32	term
10001754:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10001757:	8d 4a 01             	lea    ecx,[edx+0x1]
1000175a:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
1000175d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10001760:	01 da                	add    edx,ebx
10001762:	83 ec 04             	sub    esp,0x4
10001765:	51                   	push   ecx
10001766:	52                   	push   edx
10001767:	50                   	push   eax
10001768:	e8 fc ff ff ff       	call   10001769 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x142>	10001769: R_386_PC32	VgaText::setCursor(int, int)
1000176d:	83 c4 10             	add    esp,0x10
10001770:	a1 00 00 00 00       	mov    eax,ds:0x0	10001771: R_386_32	term
10001775:	6a 03                	push   0x3
10001777:	6a 03                	push   0x3
10001779:	6a 20                	push   0x20
1000177b:	50                   	push   eax
1000177c:	e8 fc ff ff ff       	call   1000177d <drawBasicWindowX(int, int, int, int, char const*, bool)+0x156>	1000177d: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
10001781:	83 c4 10             	add    esp,0x10
10001784:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10001787:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
1000178a:	01 d0                	add    eax,edx
1000178c:	48                   	dec    eax
1000178d:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
10001790:	74 3e                	je     100017d0 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x1a9>
10001792:	a1 00 00 00 00       	mov    eax,ds:0x0	10001793: R_386_32	term
10001797:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
1000179a:	42                   	inc    edx
1000179b:	83 ec 04             	sub    esp,0x4
1000179e:	52                   	push   edx
1000179f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100017a2:	50                   	push   eax
100017a3:	e8 fc ff ff ff       	call   100017a4 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x17d>	100017a4: R_386_PC32	VgaText::setCursor(int, int)
100017a8:	83 c4 10             	add    esp,0x10
100017ab:	a1 00 00 00 00       	mov    eax,ds:0x0	100017ac: R_386_32	term
100017b0:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
100017b4:	74 07                	je     100017bd <drawBasicWindowX(int, int, int, int, char const*, bool)+0x196>
100017b6:	ba 07 00 00 00       	mov    edx,0x7
100017bb:	eb 05                	jmp    100017c2 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x19b>
100017bd:	ba 0f 00 00 00       	mov    edx,0xf
100017c2:	52                   	push   edx
100017c3:	6a 00                	push   0x0
100017c5:	6a dd                	push   0xffffffdd
100017c7:	50                   	push   eax
100017c8:	e8 fc ff ff ff       	call   100017c9 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x1a2>	100017c9: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
100017cd:	83 c4 10             	add    esp,0x10
100017d0:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
100017d3:	e9 66 ff ff ff       	jmp    1000173e <drawBasicWindowX(int, int, int, int, char const*, bool)+0x117>
100017d8:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
100017db:	83 ec 0c             	sub    esp,0xc
100017de:	ff 75 18             	push   DWORD PTR [ebp+0x18]
100017e1:	e8 fc ff ff ff       	call   100017e2 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x1bb>	100017e2: R_386_PC32	strlen
100017e6:	83 c4 10             	add    esp,0x10
100017e9:	29 c3                	sub    ebx,eax
100017eb:	89 d8                	mov    eax,ebx
100017ed:	d1 e8                	shr    eax,1
100017ef:	48                   	dec    eax
100017f0:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
100017f3:	a1 00 00 00 00       	mov    eax,ds:0x0	100017f4: R_386_32	term
100017f8:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
100017fb:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
100017fe:	01 ca                	add    edx,ecx
10001800:	83 ec 04             	sub    esp,0x4
10001803:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10001806:	52                   	push   edx
10001807:	50                   	push   eax
10001808:	e8 fc ff ff ff       	call   10001809 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x1e2>	10001809: R_386_PC32	VgaText::setCursor(int, int)
1000180d:	83 c4 10             	add    esp,0x10
10001810:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
10001817:	83 ec 0c             	sub    esp,0xc
1000181a:	ff 75 18             	push   DWORD PTR [ebp+0x18]
1000181d:	e8 fc ff ff ff       	call   1000181e <drawBasicWindowX(int, int, int, int, char const*, bool)+0x1f7>	1000181e: R_386_PC32	strlen
10001822:	83 c4 10             	add    esp,0x10
10001825:	89 c2                	mov    edx,eax
10001827:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
1000182a:	39 c2                	cmp    edx,eax
1000182c:	76 25                	jbe    10001853 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x22c>
1000182e:	a1 00 00 00 00       	mov    eax,ds:0x0	1000182f: R_386_32	term
10001833:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
10001836:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
10001839:	01 ca                	add    edx,ecx
1000183b:	8a 12                	mov    dl,BYTE PTR [edx]
1000183d:	0f be d2             	movsx  edx,dl
10001840:	6a 01                	push   0x1
10001842:	6a 0f                	push   0xf
10001844:	52                   	push   edx
10001845:	50                   	push   eax
10001846:	e8 fc ff ff ff       	call   10001847 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x220>	10001847: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
1000184b:	83 c4 10             	add    esp,0x10
1000184e:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
10001851:	eb c4                	jmp    10001817 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x1f0>
10001853:	90                   	nop
10001854:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
10001857:	c9                   	leave  
10001858:	c3                   	ret    

10001859 <drawBasicWindow(int, int, int, int, char const*)>:
10001859:	55                   	push   ebp
1000185a:	89 e5                	mov    ebp,esp
1000185c:	83 ec 08             	sub    esp,0x8
1000185f:	83 ec 08             	sub    esp,0x8
10001862:	6a 00                	push   0x0
10001864:	ff 75 18             	push   DWORD PTR [ebp+0x18]
10001867:	ff 75 14             	push   DWORD PTR [ebp+0x14]
1000186a:	ff 75 10             	push   DWORD PTR [ebp+0x10]
1000186d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10001870:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001873:	e8 fc ff ff ff       	call   10001874 <drawBasicWindow(int, int, int, int, char const*)+0x1b>	10001874: R_386_PC32	drawBasicWindowX(int, int, int, int, char const*, bool)
10001878:	83 c4 20             	add    esp,0x20
1000187b:	90                   	nop
1000187c:	c9                   	leave  
1000187d:	c3                   	ret    

1000187e <bootInstallKeybrd(KeyboardToken, bool*)>:
1000187e:	55                   	push   ebp
1000187f:	89 e5                	mov    ebp,esp
10001881:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
10001884:	05 04 01 00 00       	add    eax,0x104
10001889:	8a 00                	mov    al,BYTE PTR [eax]
1000188b:	84 c0                	test   al,al
1000188d:	74 12                	je     100018a1 <bootInstallKeybrd(KeyboardToken, bool*)+0x23>
1000188f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001892:	66 83 f8 09          	cmp    ax,0x9
10001896:	75 09                	jne    100018a1 <bootInstallKeybrd(KeyboardToken, bool*)+0x23>
10001898:	c6 05 00 00 00 00 7f 	mov    BYTE PTR ds:0x0,0x7f	1000189a: R_386_32	installKey
1000189f:	eb 7e                	jmp    1000191f <bootInstallKeybrd(KeyboardToken, bool*)+0xa1>
100018a1:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
100018a4:	84 c0                	test   al,al
100018a6:	75 76                	jne    1000191e <bootInstallKeybrd(KeyboardToken, bool*)+0xa0>
100018a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100018ab:	66 3d 0d 02          	cmp    ax,0x20d
100018af:	75 09                	jne    100018ba <bootInstallKeybrd(KeyboardToken, bool*)+0x3c>
100018b1:	c6 05 00 00 00 00 03 	mov    BYTE PTR ds:0x0,0x3	100018b3: R_386_32	installKey
100018b8:	eb 65                	jmp    1000191f <bootInstallKeybrd(KeyboardToken, bool*)+0xa1>
100018ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100018bd:	66 3d 0e 02          	cmp    ax,0x20e
100018c1:	75 09                	jne    100018cc <bootInstallKeybrd(KeyboardToken, bool*)+0x4e>
100018c3:	c6 05 00 00 00 00 04 	mov    BYTE PTR ds:0x0,0x4	100018c5: R_386_32	installKey
100018ca:	eb 53                	jmp    1000191f <bootInstallKeybrd(KeyboardToken, bool*)+0xa1>
100018cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100018cf:	66 3d 0b 02          	cmp    ax,0x20b
100018d3:	75 09                	jne    100018de <bootInstallKeybrd(KeyboardToken, bool*)+0x60>
100018d5:	c6 05 00 00 00 00 01 	mov    BYTE PTR ds:0x0,0x1	100018d7: R_386_32	installKey
100018dc:	eb 41                	jmp    1000191f <bootInstallKeybrd(KeyboardToken, bool*)+0xa1>
100018de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100018e1:	66 3d 0c 02          	cmp    ax,0x20c
100018e5:	75 09                	jne    100018f0 <bootInstallKeybrd(KeyboardToken, bool*)+0x72>
100018e7:	c6 05 00 00 00 00 02 	mov    BYTE PTR ds:0x0,0x2	100018e9: R_386_32	installKey
100018ee:	eb 2f                	jmp    1000191f <bootInstallKeybrd(KeyboardToken, bool*)+0xa1>
100018f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100018f3:	66 3d 05 02          	cmp    ax,0x205
100018f7:	75 09                	jne    10001902 <bootInstallKeybrd(KeyboardToken, bool*)+0x84>
100018f9:	c6 05 00 00 00 00 7d 	mov    BYTE PTR ds:0x0,0x7d	100018fb: R_386_32	installKey
10001900:	eb 1d                	jmp    1000191f <bootInstallKeybrd(KeyboardToken, bool*)+0xa1>
10001902:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001905:	66 3d 05 02          	cmp    ax,0x205
10001909:	75 09                	jne    10001914 <bootInstallKeybrd(KeyboardToken, bool*)+0x96>
1000190b:	c6 05 00 00 00 00 7e 	mov    BYTE PTR ds:0x0,0x7e	1000190d: R_386_32	installKey
10001912:	eb 0b                	jmp    1000191f <bootInstallKeybrd(KeyboardToken, bool*)+0xa1>
10001914:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001917:	a2 00 00 00 00       	mov    ds:0x0,al	10001918: R_386_32	installKey
1000191c:	eb 01                	jmp    1000191f <bootInstallKeybrd(KeyboardToken, bool*)+0xa1>
1000191e:	90                   	nop
1000191f:	5d                   	pop    ebp
10001920:	c3                   	ret    

10001921 <bootInstallTasks(int)>:
10001921:	55                   	push   ebp
10001922:	89 e5                	mov    ebp,esp
10001924:	83 ec 08             	sub    esp,0x8
10001927:	a1 00 00 00 00       	mov    eax,ds:0x0	10001928: R_386_32	term
1000192c:	83 ec 04             	sub    esp,0x4
1000192f:	6a 08                	push   0x8
10001931:	6a 18                	push   0x18
10001933:	50                   	push   eax
10001934:	e8 fc ff ff ff       	call   10001935 <bootInstallTasks(int)+0x14>	10001935: R_386_PC32	VgaText::setCursor(int, int)
10001939:	83 c4 10             	add    esp,0x10
1000193c:	a1 00 00 00 00       	mov    eax,ds:0x0	1000193d: R_386_32	term
10001941:	83 ec 08             	sub    esp,0x8
10001944:	68 20 51 00 10       	push   0x10005120	10001945: R_386_32	.text
10001949:	50                   	push   eax
1000194a:	e8 fc ff ff ff       	call   1000194b <bootInstallTasks(int)+0x2a>	1000194b: R_386_PC32	VgaText::puts(char const*)
1000194f:	83 c4 10             	add    esp,0x10
10001952:	a1 00 00 00 00       	mov    eax,ds:0x0	10001953: R_386_32	term
10001957:	83 ec 04             	sub    esp,0x4
1000195a:	6a 0a                	push   0xa
1000195c:	6a 1a                	push   0x1a
1000195e:	50                   	push   eax
1000195f:	e8 fc ff ff ff       	call   10001960 <bootInstallTasks(int)+0x3f>	10001960: R_386_PC32	VgaText::setCursor(int, int)
10001964:	83 c4 10             	add    esp,0x10
10001967:	a1 00 00 00 00       	mov    eax,ds:0x0	10001968: R_386_32	term
1000196c:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
10001970:	75 07                	jne    10001979 <bootInstallTasks(int)+0x58>
10001972:	ba 48 51 00 10       	mov    edx,0x10005148	10001973: R_386_32	.text
10001977:	eb 05                	jmp    1000197e <bootInstallTasks(int)+0x5d>
10001979:	ba 4b 51 00 10       	mov    edx,0x1000514b	1000197a: R_386_32	.text
1000197e:	83 ec 08             	sub    esp,0x8
10001981:	52                   	push   edx
10001982:	50                   	push   eax
10001983:	e8 fc ff ff ff       	call   10001984 <bootInstallTasks(int)+0x63>	10001984: R_386_PC32	VgaText::puts(char const*)
10001988:	83 c4 10             	add    esp,0x10
1000198b:	a1 00 00 00 00       	mov    eax,ds:0x0	1000198c: R_386_32	term
10001990:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
10001994:	78 07                	js     1000199d <bootInstallTasks(int)+0x7c>
10001996:	ba 00 00 00 00       	mov    edx,0x0
1000199b:	eb 05                	jmp    100019a2 <bootInstallTasks(int)+0x81>
1000199d:	ba 07 00 00 00       	mov    edx,0x7
100019a2:	6a 0f                	push   0xf
100019a4:	52                   	push   edx
100019a5:	68 4e 51 00 10       	push   0x1000514e	100019a6: R_386_32	.text
100019aa:	50                   	push   eax
100019ab:	e8 fc ff ff ff       	call   100019ac <bootInstallTasks(int)+0x8b>	100019ac: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
100019b0:	83 c4 10             	add    esp,0x10
100019b3:	a1 00 00 00 00       	mov    eax,ds:0x0	100019b4: R_386_32	term
100019b8:	83 ec 04             	sub    esp,0x4
100019bb:	6a 0b                	push   0xb
100019bd:	6a 1a                	push   0x1a
100019bf:	50                   	push   eax
100019c0:	e8 fc ff ff ff       	call   100019c1 <bootInstallTasks(int)+0xa0>	100019c1: R_386_PC32	VgaText::setCursor(int, int)
100019c5:	83 c4 10             	add    esp,0x10
100019c8:	a1 00 00 00 00       	mov    eax,ds:0x0	100019c9: R_386_32	term
100019cd:	83 7d 08 01          	cmp    DWORD PTR [ebp+0x8],0x1
100019d1:	75 07                	jne    100019da <bootInstallTasks(int)+0xb9>
100019d3:	ba 48 51 00 10       	mov    edx,0x10005148	100019d4: R_386_32	.text
100019d8:	eb 05                	jmp    100019df <bootInstallTasks(int)+0xbe>
100019da:	ba 4b 51 00 10       	mov    edx,0x1000514b	100019db: R_386_32	.text
100019df:	83 ec 08             	sub    esp,0x8
100019e2:	52                   	push   edx
100019e3:	50                   	push   eax
100019e4:	e8 fc ff ff ff       	call   100019e5 <bootInstallTasks(int)+0xc4>	100019e5: R_386_PC32	VgaText::puts(char const*)
100019e9:	83 c4 10             	add    esp,0x10
100019ec:	a1 00 00 00 00       	mov    eax,ds:0x0	100019ed: R_386_32	term
100019f1:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
100019f5:	7e 07                	jle    100019fe <bootInstallTasks(int)+0xdd>
100019f7:	ba 00 00 00 00       	mov    edx,0x0
100019fc:	eb 05                	jmp    10001a03 <bootInstallTasks(int)+0xe2>
100019fe:	ba 07 00 00 00       	mov    edx,0x7
10001a03:	6a 0f                	push   0xf
10001a05:	52                   	push   edx
10001a06:	68 66 51 00 10       	push   0x10005166	10001a07: R_386_32	.text
10001a0b:	50                   	push   eax
10001a0c:	e8 fc ff ff ff       	call   10001a0d <bootInstallTasks(int)+0xec>	10001a0d: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10001a11:	83 c4 10             	add    esp,0x10
10001a14:	a1 00 00 00 00       	mov    eax,ds:0x0	10001a15: R_386_32	term
10001a19:	83 ec 04             	sub    esp,0x4
10001a1c:	6a 0c                	push   0xc
10001a1e:	6a 1a                	push   0x1a
10001a20:	50                   	push   eax
10001a21:	e8 fc ff ff ff       	call   10001a22 <bootInstallTasks(int)+0x101>	10001a22: R_386_PC32	VgaText::setCursor(int, int)
10001a26:	83 c4 10             	add    esp,0x10
10001a29:	a1 00 00 00 00       	mov    eax,ds:0x0	10001a2a: R_386_32	term
10001a2e:	83 7d 08 02          	cmp    DWORD PTR [ebp+0x8],0x2
10001a32:	75 07                	jne    10001a3b <bootInstallTasks(int)+0x11a>
10001a34:	ba 48 51 00 10       	mov    edx,0x10005148	10001a35: R_386_32	.text
10001a39:	eb 05                	jmp    10001a40 <bootInstallTasks(int)+0x11f>
10001a3b:	ba 4b 51 00 10       	mov    edx,0x1000514b	10001a3c: R_386_32	.text
10001a40:	83 ec 08             	sub    esp,0x8
10001a43:	52                   	push   edx
10001a44:	50                   	push   eax
10001a45:	e8 fc ff ff ff       	call   10001a46 <bootInstallTasks(int)+0x125>	10001a46: R_386_PC32	VgaText::puts(char const*)
10001a4a:	83 c4 10             	add    esp,0x10
10001a4d:	a1 00 00 00 00       	mov    eax,ds:0x0	10001a4e: R_386_32	term
10001a52:	83 7d 08 01          	cmp    DWORD PTR [ebp+0x8],0x1
10001a56:	7e 07                	jle    10001a5f <bootInstallTasks(int)+0x13e>
10001a58:	ba 00 00 00 00       	mov    edx,0x0
10001a5d:	eb 05                	jmp    10001a64 <bootInstallTasks(int)+0x143>
10001a5f:	ba 07 00 00 00       	mov    edx,0x7
10001a64:	6a 0f                	push   0xf
10001a66:	52                   	push   edx
10001a67:	68 7c 51 00 10       	push   0x1000517c	10001a68: R_386_32	.text
10001a6c:	50                   	push   eax
10001a6d:	e8 fc ff ff ff       	call   10001a6e <bootInstallTasks(int)+0x14d>	10001a6e: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10001a72:	83 c4 10             	add    esp,0x10
10001a75:	a1 00 00 00 00       	mov    eax,ds:0x0	10001a76: R_386_32	term
10001a7a:	83 ec 04             	sub    esp,0x4
10001a7d:	6a 0d                	push   0xd
10001a7f:	6a 1a                	push   0x1a
10001a81:	50                   	push   eax
10001a82:	e8 fc ff ff ff       	call   10001a83 <bootInstallTasks(int)+0x162>	10001a83: R_386_PC32	VgaText::setCursor(int, int)
10001a87:	83 c4 10             	add    esp,0x10
10001a8a:	a1 00 00 00 00       	mov    eax,ds:0x0	10001a8b: R_386_32	term
10001a8f:	83 7d 08 03          	cmp    DWORD PTR [ebp+0x8],0x3
10001a93:	75 07                	jne    10001a9c <bootInstallTasks(int)+0x17b>
10001a95:	ba 48 51 00 10       	mov    edx,0x10005148	10001a96: R_386_32	.text
10001a9a:	eb 05                	jmp    10001aa1 <bootInstallTasks(int)+0x180>
10001a9c:	ba 4b 51 00 10       	mov    edx,0x1000514b	10001a9d: R_386_32	.text
10001aa1:	83 ec 08             	sub    esp,0x8
10001aa4:	52                   	push   edx
10001aa5:	50                   	push   eax
10001aa6:	e8 fc ff ff ff       	call   10001aa7 <bootInstallTasks(int)+0x186>	10001aa7: R_386_PC32	VgaText::puts(char const*)
10001aab:	83 c4 10             	add    esp,0x10
10001aae:	a1 00 00 00 00       	mov    eax,ds:0x0	10001aaf: R_386_32	term
10001ab3:	83 7d 08 02          	cmp    DWORD PTR [ebp+0x8],0x2
10001ab7:	7e 07                	jle    10001ac0 <bootInstallTasks(int)+0x19f>
10001ab9:	ba 00 00 00 00       	mov    edx,0x0
10001abe:	eb 05                	jmp    10001ac5 <bootInstallTasks(int)+0x1a4>
10001ac0:	ba 07 00 00 00       	mov    edx,0x7
10001ac5:	6a 0f                	push   0xf
10001ac7:	52                   	push   edx
10001ac8:	68 92 51 00 10       	push   0x10005192	10001ac9: R_386_32	.text
10001acd:	50                   	push   eax
10001ace:	e8 fc ff ff ff       	call   10001acf <bootInstallTasks(int)+0x1ae>	10001acf: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10001ad3:	83 c4 10             	add    esp,0x10
10001ad6:	a1 00 00 00 00       	mov    eax,ds:0x0	10001ad7: R_386_32	term
10001adb:	83 ec 04             	sub    esp,0x4
10001ade:	6a 0e                	push   0xe
10001ae0:	6a 1a                	push   0x1a
10001ae2:	50                   	push   eax
10001ae3:	e8 fc ff ff ff       	call   10001ae4 <bootInstallTasks(int)+0x1c3>	10001ae4: R_386_PC32	VgaText::setCursor(int, int)
10001ae8:	83 c4 10             	add    esp,0x10
10001aeb:	a1 00 00 00 00       	mov    eax,ds:0x0	10001aec: R_386_32	term
10001af0:	83 7d 08 04          	cmp    DWORD PTR [ebp+0x8],0x4
10001af4:	75 07                	jne    10001afd <bootInstallTasks(int)+0x1dc>
10001af6:	ba 48 51 00 10       	mov    edx,0x10005148	10001af7: R_386_32	.text
10001afb:	eb 05                	jmp    10001b02 <bootInstallTasks(int)+0x1e1>
10001afd:	ba 4b 51 00 10       	mov    edx,0x1000514b	10001afe: R_386_32	.text
10001b02:	83 ec 08             	sub    esp,0x8
10001b05:	52                   	push   edx
10001b06:	50                   	push   eax
10001b07:	e8 fc ff ff ff       	call   10001b08 <bootInstallTasks(int)+0x1e7>	10001b08: R_386_PC32	VgaText::puts(char const*)
10001b0c:	83 c4 10             	add    esp,0x10
10001b0f:	a1 00 00 00 00       	mov    eax,ds:0x0	10001b10: R_386_32	term
10001b14:	83 7d 08 03          	cmp    DWORD PTR [ebp+0x8],0x3
10001b18:	7e 07                	jle    10001b21 <bootInstallTasks(int)+0x200>
10001b1a:	ba 00 00 00 00       	mov    edx,0x0
10001b1f:	eb 05                	jmp    10001b26 <bootInstallTasks(int)+0x205>
10001b21:	ba 07 00 00 00       	mov    edx,0x7
10001b26:	6a 0f                	push   0xf
10001b28:	52                   	push   edx
10001b29:	68 a6 51 00 10       	push   0x100051a6	10001b2a: R_386_32	.text
10001b2e:	50                   	push   eax
10001b2f:	e8 fc ff ff ff       	call   10001b30 <bootInstallTasks(int)+0x20f>	10001b30: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10001b34:	83 c4 10             	add    esp,0x10
10001b37:	a1 00 00 00 00       	mov    eax,ds:0x0	10001b38: R_386_32	term
10001b3c:	83 ec 04             	sub    esp,0x4
10001b3f:	6a 0f                	push   0xf
10001b41:	6a 1a                	push   0x1a
10001b43:	50                   	push   eax
10001b44:	e8 fc ff ff ff       	call   10001b45 <bootInstallTasks(int)+0x224>	10001b45: R_386_PC32	VgaText::setCursor(int, int)
10001b49:	83 c4 10             	add    esp,0x10
10001b4c:	a1 00 00 00 00       	mov    eax,ds:0x0	10001b4d: R_386_32	term
10001b51:	83 7d 08 05          	cmp    DWORD PTR [ebp+0x8],0x5
10001b55:	75 07                	jne    10001b5e <bootInstallTasks(int)+0x23d>
10001b57:	ba 48 51 00 10       	mov    edx,0x10005148	10001b58: R_386_32	.text
10001b5c:	eb 05                	jmp    10001b63 <bootInstallTasks(int)+0x242>
10001b5e:	ba 4b 51 00 10       	mov    edx,0x1000514b	10001b5f: R_386_32	.text
10001b63:	83 ec 08             	sub    esp,0x8
10001b66:	52                   	push   edx
10001b67:	50                   	push   eax
10001b68:	e8 fc ff ff ff       	call   10001b69 <bootInstallTasks(int)+0x248>	10001b69: R_386_PC32	VgaText::puts(char const*)
10001b6d:	83 c4 10             	add    esp,0x10
10001b70:	a1 00 00 00 00       	mov    eax,ds:0x0	10001b71: R_386_32	term
10001b75:	83 7d 08 04          	cmp    DWORD PTR [ebp+0x8],0x4
10001b79:	7e 07                	jle    10001b82 <bootInstallTasks(int)+0x261>
10001b7b:	ba 00 00 00 00       	mov    edx,0x0
10001b80:	eb 05                	jmp    10001b87 <bootInstallTasks(int)+0x266>
10001b82:	ba 07 00 00 00       	mov    edx,0x7
10001b87:	6a 0f                	push   0xf
10001b89:	52                   	push   edx
10001b8a:	68 be 51 00 10       	push   0x100051be	10001b8b: R_386_32	.text
10001b8f:	50                   	push   eax
10001b90:	e8 fc ff ff ff       	call   10001b91 <bootInstallTasks(int)+0x270>	10001b91: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10001b95:	83 c4 10             	add    esp,0x10
10001b98:	90                   	nop
10001b99:	c9                   	leave  
10001b9a:	c3                   	ret    

10001b9b <ror(unsigned long long, int, int)>:
10001b9b:	55                   	push   ebp
10001b9c:	89 e5                	mov    ebp,esp
10001b9e:	56                   	push   esi
10001b9f:	53                   	push   ebx
10001ba0:	83 ec 20             	sub    esp,0x20
10001ba3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001ba6:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
10001ba9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10001bac:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10001baf:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
10001bb2:	ba 01 00 00 00       	mov    edx,0x1
10001bb7:	88 c1                	mov    cl,al
10001bb9:	d3 e2                	shl    edx,cl
10001bbb:	89 d0                	mov    eax,edx
10001bbd:	48                   	dec    eax
10001bbe:	99                   	cdq    
10001bbf:	89 c1                	mov    ecx,eax
10001bc1:	23 4d e0             	and    ecx,DWORD PTR [ebp-0x20]
10001bc4:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
10001bc7:	89 d0                	mov    eax,edx
10001bc9:	23 45 e4             	and    eax,DWORD PTR [ebp-0x1c]
10001bcc:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
10001bcf:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
10001bd2:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10001bd5:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10001bd8:	0f ad d0             	shrd   eax,edx,cl
10001bdb:	d3 ea                	shr    edx,cl
10001bdd:	f6 c1 20             	test   cl,0x20
10001be0:	74 04                	je     10001be6 <ror(unsigned long long, int, int)+0x4b>
10001be2:	89 d0                	mov    eax,edx
10001be4:	31 d2                	xor    edx,edx
10001be6:	89 c3                	mov    ebx,eax
10001be8:	89 d6                	mov    esi,edx
10001bea:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
10001bed:	2b 45 10             	sub    eax,DWORD PTR [ebp+0x10]
10001bf0:	89 c1                	mov    ecx,eax
10001bf2:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001bf5:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001bf8:	0f a5 c2             	shld   edx,eax,cl
10001bfb:	d3 e0                	shl    eax,cl
10001bfd:	f6 c1 20             	test   cl,0x20
10001c00:	74 04                	je     10001c06 <ror(unsigned long long, int, int)+0x6b>
10001c02:	89 c2                	mov    edx,eax
10001c04:	31 c0                	xor    eax,eax
10001c06:	89 d1                	mov    ecx,edx
10001c08:	89 c2                	mov    edx,eax
10001c0a:	89 d8                	mov    eax,ebx
10001c0c:	09 d0                	or     eax,edx
10001c0e:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
10001c11:	89 f0                	mov    eax,esi
10001c13:	09 c8                	or     eax,ecx
10001c15:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
10001c18:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10001c1b:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
10001c1e:	83 c4 20             	add    esp,0x20
10001c21:	5b                   	pop    ebx
10001c22:	5e                   	pop    esi
10001c23:	5d                   	pop    ebp
10001c24:	c3                   	ret    

10001c25 <swapBits(unsigned long long, unsigned long long, unsigned long long)>:
10001c25:	55                   	push   ebp
10001c26:	89 e5                	mov    ebp,esp
10001c28:	56                   	push   esi
10001c29:	53                   	push   ebx
10001c2a:	83 ec 40             	sub    esp,0x40
10001c2d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001c30:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10001c33:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10001c36:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
10001c39:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
10001c3c:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
10001c3f:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
10001c42:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
10001c45:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
10001c48:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
10001c4b:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
10001c4e:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10001c51:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
10001c54:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001c57:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001c5a:	0f ad d0             	shrd   eax,edx,cl
10001c5d:	d3 ea                	shr    edx,cl
10001c5f:	f6 c1 20             	test   cl,0x20
10001c62:	74 04                	je     10001c68 <swapBits(unsigned long long, unsigned long long, unsigned long long)+0x43>
10001c64:	89 d0                	mov    eax,edx
10001c66:	31 d2                	xor    edx,edx
10001c68:	89 c3                	mov    ebx,eax
10001c6a:	89 d6                	mov    esi,edx
10001c6c:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
10001c6f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001c72:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001c75:	0f ad d0             	shrd   eax,edx,cl
10001c78:	d3 ea                	shr    edx,cl
10001c7a:	f6 c1 20             	test   cl,0x20
10001c7d:	74 04                	je     10001c83 <swapBits(unsigned long long, unsigned long long, unsigned long long)+0x5e>
10001c7f:	89 d0                	mov    eax,edx
10001c81:	31 d2                	xor    edx,edx
10001c83:	89 d1                	mov    ecx,edx
10001c85:	89 c2                	mov    edx,eax
10001c87:	89 d8                	mov    eax,ebx
10001c89:	31 d0                	xor    eax,edx
10001c8b:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
10001c8e:	89 f0                	mov    eax,esi
10001c90:	31 c8                	xor    eax,ecx
10001c92:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
10001c95:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
10001c98:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
10001c9b:	89 c6                	mov    esi,eax
10001c9d:	83 e6 01             	and    esi,0x1
10001ca0:	89 75 c8             	mov    DWORD PTR [ebp-0x38],esi
10001ca3:	89 d0                	mov    eax,edx
10001ca5:	83 e0 00             	and    eax,0x0
10001ca8:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
10001cab:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
10001cae:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
10001cb1:	89 c3                	mov    ebx,eax
10001cb3:	80 f7 00             	xor    bh,0x0
10001cb6:	89 5d b8             	mov    DWORD PTR [ebp-0x48],ebx
10001cb9:	89 d0                	mov    eax,edx
10001cbb:	80 f4 00             	xor    ah,0x0
10001cbe:	89 45 bc             	mov    DWORD PTR [ebp-0x44],eax
10001cc1:	8b 55 b8             	mov    edx,DWORD PTR [ebp-0x48]
10001cc4:	8b 4d bc             	mov    ecx,DWORD PTR [ebp-0x44]
10001cc7:	89 c8                	mov    eax,ecx
10001cc9:	09 d0                	or     eax,edx
10001ccb:	85 c0                	test   eax,eax
10001ccd:	74 62                	je     10001d31 <swapBits(unsigned long long, unsigned long long, unsigned long long)+0x10c>
10001ccf:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
10001cd2:	b8 01 00 00 00       	mov    eax,0x1
10001cd7:	ba 00 00 00 00       	mov    edx,0x0
10001cdc:	0f a5 c2             	shld   edx,eax,cl
10001cdf:	d3 e0                	shl    eax,cl
10001ce1:	f6 c1 20             	test   cl,0x20
10001ce4:	74 04                	je     10001cea <swapBits(unsigned long long, unsigned long long, unsigned long long)+0xc5>
10001ce6:	89 c2                	mov    edx,eax
10001ce8:	31 c0                	xor    eax,eax
10001cea:	89 c3                	mov    ebx,eax
10001cec:	89 d6                	mov    esi,edx
10001cee:	89 d8                	mov    eax,ebx
10001cf0:	33 45 f0             	xor    eax,DWORD PTR [ebp-0x10]
10001cf3:	89 45 c0             	mov    DWORD PTR [ebp-0x40],eax
10001cf6:	89 f0                	mov    eax,esi
10001cf8:	33 45 f4             	xor    eax,DWORD PTR [ebp-0xc]
10001cfb:	89 45 c4             	mov    DWORD PTR [ebp-0x3c],eax
10001cfe:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
10001d01:	b8 01 00 00 00       	mov    eax,0x1
10001d06:	ba 00 00 00 00       	mov    edx,0x0
10001d0b:	0f a5 c2             	shld   edx,eax,cl
10001d0e:	d3 e0                	shl    eax,cl
10001d10:	f6 c1 20             	test   cl,0x20
10001d13:	74 04                	je     10001d19 <swapBits(unsigned long long, unsigned long long, unsigned long long)+0xf4>
10001d15:	89 c2                	mov    edx,eax
10001d17:	31 c0                	xor    eax,eax
10001d19:	89 c1                	mov    ecx,eax
10001d1b:	89 d3                	mov    ebx,edx
10001d1d:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
10001d20:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
10001d23:	89 c6                	mov    esi,eax
10001d25:	31 ce                	xor    esi,ecx
10001d27:	89 75 d8             	mov    DWORD PTR [ebp-0x28],esi
10001d2a:	31 d3                	xor    ebx,edx
10001d2c:	89 5d dc             	mov    DWORD PTR [ebp-0x24],ebx
10001d2f:	eb 0c                	jmp    10001d3d <swapBits(unsigned long long, unsigned long long, unsigned long long)+0x118>
10001d31:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001d34:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001d37:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
10001d3a:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
10001d3d:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10001d40:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
10001d43:	83 c4 40             	add    esp,0x40
10001d46:	5b                   	pop    ebx
10001d47:	5e                   	pop    esi
10001d48:	5d                   	pop    ebp
10001d49:	c3                   	ret    

10001d4a <getChecksum(unsigned int)>:
10001d4a:	55                   	push   ebp
10001d4b:	89 e5                	mov    ebp,esp
10001d4d:	56                   	push   esi
10001d4e:	53                   	push   ebx
10001d4f:	83 ec 20             	sub    esp,0x20
10001d52:	66 c7 45 f6 49 4e    	mov    WORD PTR [ebp-0xa],0x4e49
10001d58:	66 c7 45 f4 79 6e    	mov    WORD PTR [ebp-0xc],0x6e79
10001d5e:	66 c7 45 f2 67 61    	mov    WORD PTR [ebp-0xe],0x6167
10001d64:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001d67:	c1 e8 10             	shr    eax,0x10
10001d6a:	89 c1                	mov    ecx,eax
10001d6c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001d6f:	89 c2                	mov    edx,eax
10001d71:	89 d0                	mov    eax,edx
10001d73:	c1 e0 06             	shl    eax,0x6
10001d76:	29 d0                	sub    eax,edx
10001d78:	c1 e0 04             	shl    eax,0x4
10001d7b:	01 d0                	add    eax,edx
10001d7d:	31 c8                	xor    eax,ecx
10001d7f:	66 89 45 f0          	mov    WORD PTR [ebp-0x10],ax
10001d83:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
10001d87:	0f 84 b1 00 00 00    	je     10001e3e <getChecksum(unsigned int)+0xf4>
10001d8d:	b8 f4 02 00 00       	mov    eax,0x2f4
10001d92:	ba 00 00 00 00       	mov    edx,0x0
10001d97:	f7 75 08             	div    DWORD PTR [ebp+0x8]
10001d9a:	89 c3                	mov    ebx,eax
10001d9c:	be 00 00 00 00       	mov    esi,0x0
10001da1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001da4:	ba 00 00 00 00       	mov    edx,0x0
10001da9:	6a 1d                	push   0x1d
10001dab:	6a 05                	push   0x5
10001dad:	52                   	push   edx
10001dae:	50                   	push   eax
10001daf:	e8 fc ff ff ff       	call   10001db0 <getChecksum(unsigned int)+0x66>	10001db0: R_386_PC32	ror(unsigned long long, int, int)
10001db4:	83 c4 10             	add    esp,0x10
10001db7:	05 52 3f 04 00       	add    eax,0x43f52
10001dbc:	83 d2 00             	adc    edx,0x0
10001dbf:	89 d9                	mov    ecx,ebx
10001dc1:	31 c1                	xor    ecx,eax
10001dc3:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
10001dc6:	31 d6                	xor    esi,edx
10001dc8:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
10001dcb:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
10001dce:	66 8b 45 f6          	mov    ax,WORD PTR [ebp-0xa]
10001dd2:	66 0f af c2          	imul   ax,dx
10001dd6:	66 89 45 f6          	mov    WORD PTR [ebp-0xa],ax
10001dda:	b8 ea 00 00 00       	mov    eax,0xea
10001ddf:	ba 00 00 00 00       	mov    edx,0x0
10001de4:	f7 75 08             	div    DWORD PTR [ebp+0x8]
10001de7:	89 c3                	mov    ebx,eax
10001de9:	be 00 00 00 00       	mov    esi,0x0
10001dee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001df1:	ba 00 00 00 00       	mov    edx,0x0
10001df6:	6a 1f                	push   0x1f
10001df8:	6a 03                	push   0x3
10001dfa:	52                   	push   edx
10001dfb:	50                   	push   eax
10001dfc:	e8 fc ff ff ff       	call   10001dfd <getChecksum(unsigned int)+0xb3>	10001dfd: R_386_PC32	ror(unsigned long long, int, int)
10001e01:	83 c4 10             	add    esp,0x10
10001e04:	05 05 db 09 00       	add    eax,0x9db05
10001e09:	83 d2 00             	adc    edx,0x0
10001e0c:	89 d9                	mov    ecx,ebx
10001e0e:	31 c1                	xor    ecx,eax
10001e10:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
10001e13:	31 d6                	xor    esi,edx
10001e15:	89 75 dc             	mov    DWORD PTR [ebp-0x24],esi
10001e18:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10001e1b:	66 29 45 f4          	sub    WORD PTR [ebp-0xc],ax
10001e1f:	66 8b 45 f6          	mov    ax,WORD PTR [ebp-0xa]
10001e23:	33 45 f4             	xor    eax,DWORD PTR [ebp-0xc]
10001e26:	25 d2 04 00 00       	and    eax,0x4d2
10001e2b:	66 01 45 f2          	add    WORD PTR [ebp-0xe],ax
10001e2f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001e32:	66 01 45 f2          	add    WORD PTR [ebp-0xe],ax
10001e36:	d1 6d 08             	shr    DWORD PTR [ebp+0x8],1
10001e39:	e9 45 ff ff ff       	jmp    10001d83 <getChecksum(unsigned int)+0x39>
10001e3e:	66 8b 45 f6          	mov    ax,WORD PTR [ebp-0xa]
10001e42:	33 45 f4             	xor    eax,DWORD PTR [ebp-0xc]
10001e45:	66 33 45 f2          	xor    ax,WORD PTR [ebp-0xe]
10001e49:	33 45 f0             	xor    eax,DWORD PTR [ebp-0x10]
10001e4c:	0f b7 c0             	movzx  eax,ax
10001e4f:	25 ff 7f 00 00       	and    eax,0x7fff
10001e54:	8d 65 f8             	lea    esp,[ebp-0x8]
10001e57:	5b                   	pop    ebx
10001e58:	5e                   	pop    esi
10001e59:	5d                   	pop    ebp
10001e5a:	c3                   	ret    

10001e5b <createKey(char*, unsigned int)>:
10001e5b:	55                   	push   ebp
10001e5c:	89 e5                	mov    ebp,esp
10001e5e:	53                   	push   ebx
10001e5f:	83 ec 34             	sub    esp,0x34
10001e62:	68 d0 51 00 10       	push   0x100051d0	10001e63: R_386_32	.text
10001e67:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001e6a:	e8 fc ff ff ff       	call   10001e6b <createKey(char*, unsigned int)+0x10>	10001e6b: R_386_PC32	strcpy
10001e6f:	83 c4 08             	add    esp,0x8
10001e72:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
10001e75:	bb 00 00 00 00       	mov    ebx,0x0
10001e7a:	89 c8                	mov    eax,ecx
10001e7c:	89 da                	mov    edx,ebx
10001e7e:	0f a4 c2 0f          	shld   edx,eax,0xf
10001e82:	c1 e0 0f             	shl    eax,0xf
10001e85:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10001e88:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
10001e8b:	83 ec 04             	sub    esp,0x4
10001e8e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10001e91:	e8 fc ff ff ff       	call   10001e92 <createKey(char*, unsigned int)+0x37>	10001e92: R_386_PC32	getChecksum(unsigned int)
10001e96:	83 c4 08             	add    esp,0x8
10001e99:	ba 00 00 00 00       	mov    edx,0x0
10001e9e:	09 45 f0             	or     DWORD PTR [ebp-0x10],eax
10001ea1:	09 55 f4             	or     DWORD PTR [ebp-0xc],edx
10001ea4:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
10001eab:	81 7d ec db 24 00 00 	cmp    DWORD PTR [ebp-0x14],0x24db
10001eb2:	7f 7f                	jg     10001f33 <createKey(char*, unsigned int)+0xd8>
10001eb4:	81 75 f0 95 38 e4 b5 	xor    DWORD PTR [ebp-0x10],0xb5e43895
10001ebb:	83 75 f4 37          	xor    DWORD PTR [ebp-0xc],0x37
10001ebf:	6a 00                	push   0x0
10001ec1:	6a 08                	push   0x8
10001ec3:	6a 00                	push   0x0
10001ec5:	6a 03                	push   0x3
10001ec7:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10001eca:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10001ecd:	e8 fc ff ff ff       	call   10001ece <createKey(char*, unsigned int)+0x73>	10001ece: R_386_PC32	swapBits(unsigned long long, unsigned long long, unsigned long long)
10001ed2:	83 c4 18             	add    esp,0x18
10001ed5:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10001ed8:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
10001edb:	6a 00                	push   0x0
10001edd:	6a 0c                	push   0xc
10001edf:	6a 00                	push   0x0
10001ee1:	6a 0d                	push   0xd
10001ee3:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10001ee6:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10001ee9:	e8 fc ff ff ff       	call   10001eea <createKey(char*, unsigned int)+0x8f>	10001eea: R_386_PC32	swapBits(unsigned long long, unsigned long long, unsigned long long)
10001eee:	83 c4 18             	add    esp,0x18
10001ef1:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10001ef4:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
10001ef7:	6a 00                	push   0x0
10001ef9:	6a 16                	push   0x16
10001efb:	6a 00                	push   0x0
10001efd:	6a 25                	push   0x25
10001eff:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10001f02:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10001f05:	e8 fc ff ff ff       	call   10001f06 <createKey(char*, unsigned int)+0xab>	10001f06: R_386_PC32	swapBits(unsigned long long, unsigned long long, unsigned long long)
10001f0a:	83 c4 18             	add    esp,0x18
10001f0d:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10001f10:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
10001f13:	6a 2a                	push   0x2a
10001f15:	6a 13                	push   0x13
10001f17:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10001f1a:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10001f1d:	e8 fc ff ff ff       	call   10001f1e <createKey(char*, unsigned int)+0xc3>	10001f1e: R_386_PC32	ror(unsigned long long, int, int)
10001f22:	83 c4 10             	add    esp,0x10
10001f25:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10001f28:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
10001f2b:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
10001f2e:	e9 78 ff ff ff       	jmp    10001eab <createKey(char*, unsigned int)+0x50>
10001f33:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001f36:	83 e0 0f             	and    eax,0xf
10001f39:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
10001f3c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001f3f:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001f42:	0f ac d0 04          	shrd   eax,edx,0x4
10001f46:	c1 ea 04             	shr    edx,0x4
10001f49:	89 c1                	mov    ecx,eax
10001f4b:	89 d3                	mov    ebx,edx
10001f4d:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
10001f50:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
10001f53:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001f56:	83 e0 0f             	and    eax,0xf
10001f59:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10001f5c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001f5f:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001f62:	0f ac d0 04          	shrd   eax,edx,0x4
10001f66:	c1 ea 04             	shr    edx,0x4
10001f69:	89 c1                	mov    ecx,eax
10001f6b:	89 d3                	mov    ebx,edx
10001f6d:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
10001f70:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
10001f73:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001f76:	83 e0 0f             	and    eax,0xf
10001f79:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
10001f7c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001f7f:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001f82:	0f ac d0 04          	shrd   eax,edx,0x4
10001f86:	c1 ea 04             	shr    edx,0x4
10001f89:	89 c1                	mov    ecx,eax
10001f8b:	89 d3                	mov    ebx,edx
10001f8d:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
10001f90:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
10001f93:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001f96:	25 ff 03 00 00       	and    eax,0x3ff
10001f9b:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
10001f9e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001fa1:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001fa4:	0f ac d0 0a          	shrd   eax,edx,0xa
10001fa8:	c1 ea 0a             	shr    edx,0xa
10001fab:	89 c1                	mov    ecx,eax
10001fad:	89 d3                	mov    ebx,edx
10001faf:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
10001fb2:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
10001fb5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001fb8:	25 ff 03 00 00       	and    eax,0x3ff
10001fbd:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
10001fc0:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001fc3:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001fc6:	0f ac d0 0a          	shrd   eax,edx,0xa
10001fca:	c1 ea 0a             	shr    edx,0xa
10001fcd:	89 c1                	mov    ecx,eax
10001fcf:	89 d3                	mov    ebx,edx
10001fd1:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
10001fd4:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
10001fd7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001fda:	25 ff 03 00 00       	and    eax,0x3ff
10001fdf:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
10001fe2:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001fe5:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001fe8:	0f ac d0 0a          	shrd   eax,edx,0xa
10001fec:	c1 ea 0a             	shr    edx,0xa
10001fef:	89 c1                	mov    ecx,eax
10001ff1:	89 d3                	mov    ebx,edx
10001ff3:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
10001ff6:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
10001ff9:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
10001ffc:	05 00 00 00 00       	add    eax,0x0	10001ffd: R_386_32	lookupA
10002001:	8a 10                	mov    dl,BYTE PTR [eax]
10002003:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002006:	88 10                	mov    BYTE PTR [eax],dl
10002008:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000200b:	8d 50 01             	lea    edx,[eax+0x1]
1000200e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10002011:	05 00 00 00 00       	add    eax,0x0	10002012: R_386_32	lookupA
10002016:	8a 00                	mov    al,BYTE PTR [eax]
10002018:	88 02                	mov    BYTE PTR [edx],al
1000201a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000201d:	8d 50 0f             	lea    edx,[eax+0xf]
10002020:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10002023:	05 00 00 00 00       	add    eax,0x0	10002024: R_386_32	lookupA
10002028:	8a 00                	mov    al,BYTE PTR [eax]
1000202a:	88 02                	mov    BYTE PTR [edx],al
1000202c:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
1000202f:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
10002034:	f7 e9                	imul   ecx
10002036:	c1 fa 05             	sar    edx,0x5
10002039:	89 c8                	mov    eax,ecx
1000203b:	c1 f8 1f             	sar    eax,0x1f
1000203e:	29 c2                	sub    edx,eax
10002040:	89 d0                	mov    eax,edx
10002042:	b9 0a 00 00 00       	mov    ecx,0xa
10002047:	99                   	cdq    
10002048:	f7 f9                	idiv   ecx
1000204a:	89 d0                	mov    eax,edx
1000204c:	8d 50 30             	lea    edx,[eax+0x30]
1000204f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002052:	83 c0 03             	add    eax,0x3
10002055:	88 10                	mov    BYTE PTR [eax],dl
10002057:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
1000205a:	b8 67 66 66 66       	mov    eax,0x66666667
1000205f:	f7 e9                	imul   ecx
10002061:	c1 fa 02             	sar    edx,0x2
10002064:	89 c8                	mov    eax,ecx
10002066:	c1 f8 1f             	sar    eax,0x1f
10002069:	89 d1                	mov    ecx,edx
1000206b:	29 c1                	sub    ecx,eax
1000206d:	b8 67 66 66 66       	mov    eax,0x66666667
10002072:	f7 e9                	imul   ecx
10002074:	c1 fa 02             	sar    edx,0x2
10002077:	89 c8                	mov    eax,ecx
10002079:	c1 f8 1f             	sar    eax,0x1f
1000207c:	29 c2                	sub    edx,eax
1000207e:	89 d0                	mov    eax,edx
10002080:	c1 e0 02             	shl    eax,0x2
10002083:	01 d0                	add    eax,edx
10002085:	01 c0                	add    eax,eax
10002087:	29 c1                	sub    ecx,eax
10002089:	89 ca                	mov    edx,ecx
1000208b:	88 d0                	mov    al,dl
1000208d:	8d 50 30             	lea    edx,[eax+0x30]
10002090:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002093:	83 c0 04             	add    eax,0x4
10002096:	88 10                	mov    BYTE PTR [eax],dl
10002098:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
1000209b:	b9 0a 00 00 00       	mov    ecx,0xa
100020a0:	99                   	cdq    
100020a1:	f7 f9                	idiv   ecx
100020a3:	89 d0                	mov    eax,edx
100020a5:	8d 50 30             	lea    edx,[eax+0x30]
100020a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100020ab:	83 c0 05             	add    eax,0x5
100020ae:	88 10                	mov    BYTE PTR [eax],dl
100020b0:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
100020b3:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
100020b8:	f7 e9                	imul   ecx
100020ba:	c1 fa 05             	sar    edx,0x5
100020bd:	89 c8                	mov    eax,ecx
100020bf:	c1 f8 1f             	sar    eax,0x1f
100020c2:	29 c2                	sub    edx,eax
100020c4:	89 d0                	mov    eax,edx
100020c6:	b9 0a 00 00 00       	mov    ecx,0xa
100020cb:	99                   	cdq    
100020cc:	f7 f9                	idiv   ecx
100020ce:	89 d0                	mov    eax,edx
100020d0:	8d 50 30             	lea    edx,[eax+0x30]
100020d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100020d6:	83 c0 07             	add    eax,0x7
100020d9:	88 10                	mov    BYTE PTR [eax],dl
100020db:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
100020de:	b8 67 66 66 66       	mov    eax,0x66666667
100020e3:	f7 e9                	imul   ecx
100020e5:	c1 fa 02             	sar    edx,0x2
100020e8:	89 c8                	mov    eax,ecx
100020ea:	c1 f8 1f             	sar    eax,0x1f
100020ed:	89 d1                	mov    ecx,edx
100020ef:	29 c1                	sub    ecx,eax
100020f1:	b8 67 66 66 66       	mov    eax,0x66666667
100020f6:	f7 e9                	imul   ecx
100020f8:	c1 fa 02             	sar    edx,0x2
100020fb:	89 c8                	mov    eax,ecx
100020fd:	c1 f8 1f             	sar    eax,0x1f
10002100:	29 c2                	sub    edx,eax
10002102:	89 d0                	mov    eax,edx
10002104:	c1 e0 02             	shl    eax,0x2
10002107:	01 d0                	add    eax,edx
10002109:	01 c0                	add    eax,eax
1000210b:	29 c1                	sub    ecx,eax
1000210d:	89 ca                	mov    edx,ecx
1000210f:	88 d0                	mov    al,dl
10002111:	8d 50 30             	lea    edx,[eax+0x30]
10002114:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002117:	83 c0 08             	add    eax,0x8
1000211a:	88 10                	mov    BYTE PTR [eax],dl
1000211c:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
1000211f:	b9 0a 00 00 00       	mov    ecx,0xa
10002124:	99                   	cdq    
10002125:	f7 f9                	idiv   ecx
10002127:	89 d0                	mov    eax,edx
10002129:	8d 50 30             	lea    edx,[eax+0x30]
1000212c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000212f:	83 c0 09             	add    eax,0x9
10002132:	88 10                	mov    BYTE PTR [eax],dl
10002134:	8b 4d d4             	mov    ecx,DWORD PTR [ebp-0x2c]
10002137:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
1000213c:	f7 e9                	imul   ecx
1000213e:	c1 fa 05             	sar    edx,0x5
10002141:	89 c8                	mov    eax,ecx
10002143:	c1 f8 1f             	sar    eax,0x1f
10002146:	29 c2                	sub    edx,eax
10002148:	89 d0                	mov    eax,edx
1000214a:	b9 0a 00 00 00       	mov    ecx,0xa
1000214f:	99                   	cdq    
10002150:	f7 f9                	idiv   ecx
10002152:	89 d0                	mov    eax,edx
10002154:	8d 50 30             	lea    edx,[eax+0x30]
10002157:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000215a:	83 c0 0b             	add    eax,0xb
1000215d:	88 10                	mov    BYTE PTR [eax],dl
1000215f:	8b 4d d4             	mov    ecx,DWORD PTR [ebp-0x2c]
10002162:	b8 67 66 66 66       	mov    eax,0x66666667
10002167:	f7 e9                	imul   ecx
10002169:	c1 fa 02             	sar    edx,0x2
1000216c:	89 c8                	mov    eax,ecx
1000216e:	c1 f8 1f             	sar    eax,0x1f
10002171:	89 d1                	mov    ecx,edx
10002173:	29 c1                	sub    ecx,eax
10002175:	b8 67 66 66 66       	mov    eax,0x66666667
1000217a:	f7 e9                	imul   ecx
1000217c:	c1 fa 02             	sar    edx,0x2
1000217f:	89 c8                	mov    eax,ecx
10002181:	c1 f8 1f             	sar    eax,0x1f
10002184:	29 c2                	sub    edx,eax
10002186:	89 d0                	mov    eax,edx
10002188:	c1 e0 02             	shl    eax,0x2
1000218b:	01 d0                	add    eax,edx
1000218d:	01 c0                	add    eax,eax
1000218f:	29 c1                	sub    ecx,eax
10002191:	89 ca                	mov    edx,ecx
10002193:	88 d0                	mov    al,dl
10002195:	8d 50 30             	lea    edx,[eax+0x30]
10002198:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000219b:	83 c0 0c             	add    eax,0xc
1000219e:	88 10                	mov    BYTE PTR [eax],dl
100021a0:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
100021a3:	b9 0a 00 00 00       	mov    ecx,0xa
100021a8:	99                   	cdq    
100021a9:	f7 f9                	idiv   ecx
100021ab:	89 d0                	mov    eax,edx
100021ad:	8d 50 30             	lea    edx,[eax+0x30]
100021b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100021b3:	83 c0 0d             	add    eax,0xd
100021b6:	88 10                	mov    BYTE PTR [eax],dl
100021b8:	90                   	nop
100021b9:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
100021bc:	c9                   	leave  
100021bd:	c3                   	ret    

100021be <retrieveBits(char*)>:
100021be:	55                   	push   ebp
100021bf:	89 e5                	mov    ebp,esp
100021c1:	57                   	push   edi
100021c2:	56                   	push   esi
100021c3:	53                   	push   ebx
100021c4:	83 ec 4c             	sub    esp,0x4c
100021c7:	c7 45 ec ff ff ff ff 	mov    DWORD PTR [ebp-0x14],0xffffffff
100021ce:	c7 45 e8 ff ff ff ff 	mov    DWORD PTR [ebp-0x18],0xffffffff
100021d5:	c7 45 e4 ff ff ff ff 	mov    DWORD PTR [ebp-0x1c],0xffffffff
100021dc:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
100021e3:	83 7d e0 0f          	cmp    DWORD PTR [ebp-0x20],0xf
100021e7:	7f 54                	jg     1000223d <retrieveBits(char*)+0x7f>
100021e9:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
100021ec:	05 00 00 00 00       	add    eax,0x0	100021ed: R_386_32	lookupA
100021f1:	8a 10                	mov    dl,BYTE PTR [eax]
100021f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100021f6:	8a 00                	mov    al,BYTE PTR [eax]
100021f8:	38 c2                	cmp    dl,al
100021fa:	75 06                	jne    10002202 <retrieveBits(char*)+0x44>
100021fc:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
100021ff:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
10002202:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10002205:	05 00 00 00 00       	add    eax,0x0	10002206: R_386_32	lookupB
1000220a:	8a 10                	mov    dl,BYTE PTR [eax]
1000220c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000220f:	40                   	inc    eax
10002210:	8a 00                	mov    al,BYTE PTR [eax]
10002212:	38 c2                	cmp    dl,al
10002214:	75 06                	jne    1000221c <retrieveBits(char*)+0x5e>
10002216:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10002219:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
1000221c:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
1000221f:	05 00 00 00 00       	add    eax,0x0	10002220: R_386_32	lookupC
10002224:	8a 10                	mov    dl,BYTE PTR [eax]
10002226:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002229:	83 c0 0f             	add    eax,0xf
1000222c:	8a 00                	mov    al,BYTE PTR [eax]
1000222e:	38 c2                	cmp    dl,al
10002230:	75 06                	jne    10002238 <retrieveBits(char*)+0x7a>
10002232:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10002235:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10002238:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
1000223b:	eb a6                	jmp    100021e3 <retrieveBits(char*)+0x25>
1000223d:	83 7d ec ff          	cmp    DWORD PTR [ebp-0x14],0xffffffff
10002241:	74 0c                	je     1000224f <retrieveBits(char*)+0x91>
10002243:	83 7d e8 ff          	cmp    DWORD PTR [ebp-0x18],0xffffffff
10002247:	74 06                	je     1000224f <retrieveBits(char*)+0x91>
10002249:	83 7d e4 ff          	cmp    DWORD PTR [ebp-0x1c],0xffffffff
1000224d:	75 0f                	jne    1000225e <retrieveBits(char*)+0xa0>
1000224f:	b8 00 00 00 00       	mov    eax,0x0
10002254:	ba 00 00 00 00       	mov    edx,0x0
10002259:	e9 02 02 00 00       	jmp    10002460 <retrieveBits(char*)+0x2a2>
1000225e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002261:	83 c0 03             	add    eax,0x3
10002264:	8a 00                	mov    al,BYTE PTR [eax]
10002266:	0f be c0             	movsx  eax,al
10002269:	8d 50 d0             	lea    edx,[eax-0x30]
1000226c:	89 d0                	mov    eax,edx
1000226e:	c1 e0 02             	shl    eax,0x2
10002271:	01 d0                	add    eax,edx
10002273:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
1000227a:	01 d0                	add    eax,edx
1000227c:	c1 e0 02             	shl    eax,0x2
1000227f:	89 c6                	mov    esi,eax
10002281:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002284:	83 c0 04             	add    eax,0x4
10002287:	8a 00                	mov    al,BYTE PTR [eax]
10002289:	0f be c0             	movsx  eax,al
1000228c:	8d 50 d0             	lea    edx,[eax-0x30]
1000228f:	89 d0                	mov    eax,edx
10002291:	c1 e0 02             	shl    eax,0x2
10002294:	01 d0                	add    eax,edx
10002296:	01 c0                	add    eax,eax
10002298:	8d 14 06             	lea    edx,[esi+eax*1]
1000229b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000229e:	83 c0 05             	add    eax,0x5
100022a1:	8a 00                	mov    al,BYTE PTR [eax]
100022a3:	0f be c0             	movsx  eax,al
100022a6:	83 e8 30             	sub    eax,0x30
100022a9:	01 d0                	add    eax,edx
100022ab:	99                   	cdq    
100022ac:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
100022af:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
100022b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100022b5:	83 c0 07             	add    eax,0x7
100022b8:	8a 00                	mov    al,BYTE PTR [eax]
100022ba:	0f be c0             	movsx  eax,al
100022bd:	8d 50 d0             	lea    edx,[eax-0x30]
100022c0:	89 d0                	mov    eax,edx
100022c2:	c1 e0 02             	shl    eax,0x2
100022c5:	01 d0                	add    eax,edx
100022c7:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
100022ce:	01 d0                	add    eax,edx
100022d0:	c1 e0 02             	shl    eax,0x2
100022d3:	89 c6                	mov    esi,eax
100022d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100022d8:	83 c0 08             	add    eax,0x8
100022db:	8a 00                	mov    al,BYTE PTR [eax]
100022dd:	0f be c0             	movsx  eax,al
100022e0:	8d 50 d0             	lea    edx,[eax-0x30]
100022e3:	89 d0                	mov    eax,edx
100022e5:	c1 e0 02             	shl    eax,0x2
100022e8:	01 d0                	add    eax,edx
100022ea:	01 c0                	add    eax,eax
100022ec:	8d 14 06             	lea    edx,[esi+eax*1]
100022ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100022f2:	83 c0 09             	add    eax,0x9
100022f5:	8a 00                	mov    al,BYTE PTR [eax]
100022f7:	0f be c0             	movsx  eax,al
100022fa:	83 e8 30             	sub    eax,0x30
100022fd:	01 d0                	add    eax,edx
100022ff:	99                   	cdq    
10002300:	89 45 c0             	mov    DWORD PTR [ebp-0x40],eax
10002303:	89 55 c4             	mov    DWORD PTR [ebp-0x3c],edx
10002306:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002309:	83 c0 0b             	add    eax,0xb
1000230c:	8a 00                	mov    al,BYTE PTR [eax]
1000230e:	0f be c0             	movsx  eax,al
10002311:	8d 50 d0             	lea    edx,[eax-0x30]
10002314:	89 d0                	mov    eax,edx
10002316:	c1 e0 02             	shl    eax,0x2
10002319:	01 d0                	add    eax,edx
1000231b:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10002322:	01 d0                	add    eax,edx
10002324:	c1 e0 02             	shl    eax,0x2
10002327:	89 c6                	mov    esi,eax
10002329:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000232c:	83 c0 0c             	add    eax,0xc
1000232f:	8a 00                	mov    al,BYTE PTR [eax]
10002331:	0f be c0             	movsx  eax,al
10002334:	8d 50 d0             	lea    edx,[eax-0x30]
10002337:	89 d0                	mov    eax,edx
10002339:	c1 e0 02             	shl    eax,0x2
1000233c:	01 d0                	add    eax,edx
1000233e:	01 c0                	add    eax,eax
10002340:	8d 14 06             	lea    edx,[esi+eax*1]
10002343:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002346:	83 c0 0d             	add    eax,0xd
10002349:	8a 00                	mov    al,BYTE PTR [eax]
1000234b:	0f be c0             	movsx  eax,al
1000234e:	83 e8 30             	sub    eax,0x30
10002351:	01 d0                	add    eax,edx
10002353:	99                   	cdq    
10002354:	89 45 b8             	mov    DWORD PTR [ebp-0x48],eax
10002357:	89 55 bc             	mov    DWORD PTR [ebp-0x44],edx
1000235a:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
1000235d:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
10002360:	0f a4 c2 0a          	shld   edx,eax,0xa
10002364:	c1 e0 0a             	shl    eax,0xa
10002367:	89 c6                	mov    esi,eax
10002369:	89 d7                	mov    edi,edx
1000236b:	89 f0                	mov    eax,esi
1000236d:	0b 45 c8             	or     eax,DWORD PTR [ebp-0x38]
10002370:	89 c1                	mov    ecx,eax
10002372:	89 f8                	mov    eax,edi
10002374:	0b 45 cc             	or     eax,DWORD PTR [ebp-0x34]
10002377:	89 c3                	mov    ebx,eax
10002379:	8b 45 b8             	mov    eax,DWORD PTR [ebp-0x48]
1000237c:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
1000237f:	0f a4 c2 14          	shld   edx,eax,0x14
10002383:	c1 e0 14             	shl    eax,0x14
10002386:	89 ce                	mov    esi,ecx
10002388:	89 45 a8             	mov    DWORD PTR [ebp-0x58],eax
1000238b:	89 55 ac             	mov    DWORD PTR [ebp-0x54],edx
1000238e:	0b 75 a8             	or     esi,DWORD PTR [ebp-0x58]
10002391:	89 75 d8             	mov    DWORD PTR [ebp-0x28],esi
10002394:	89 d8                	mov    eax,ebx
10002396:	0b 45 ac             	or     eax,DWORD PTR [ebp-0x54]
10002399:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
1000239c:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
1000239f:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
100023a2:	0f a4 c2 0c          	shld   edx,eax,0xc
100023a6:	c1 e0 0c             	shl    eax,0xc
100023a9:	89 c3                	mov    ebx,eax
100023ab:	89 d6                	mov    esi,edx
100023ad:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
100023b0:	89 75 dc             	mov    DWORD PTR [ebp-0x24],esi
100023b3:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
100023b6:	c1 e0 04             	shl    eax,0x4
100023b9:	0b 45 ec             	or     eax,DWORD PTR [ebp-0x14]
100023bc:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
100023bf:	c1 e2 08             	shl    edx,0x8
100023c2:	09 d0                	or     eax,edx
100023c4:	99                   	cdq    
100023c5:	09 45 d8             	or     DWORD PTR [ebp-0x28],eax
100023c8:	09 55 dc             	or     DWORD PTR [ebp-0x24],edx
100023cb:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
100023d2:	81 7d d4 db 24 00 00 	cmp    DWORD PTR [ebp-0x2c],0x24db
100023d9:	7f 7f                	jg     1000245a <retrieveBits(char*)+0x29c>
100023db:	6a 2a                	push   0x2a
100023dd:	6a 13                	push   0x13
100023df:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
100023e2:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
100023e5:	e8 fc ff ff ff       	call   100023e6 <retrieveBits(char*)+0x228>	100023e6: R_386_PC32	ror(unsigned long long, int, int)
100023ea:	83 c4 10             	add    esp,0x10
100023ed:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
100023f0:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
100023f3:	6a 00                	push   0x0
100023f5:	6a 08                	push   0x8
100023f7:	6a 00                	push   0x0
100023f9:	6a 03                	push   0x3
100023fb:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
100023fe:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10002401:	e8 fc ff ff ff       	call   10002402 <retrieveBits(char*)+0x244>	10002402: R_386_PC32	swapBits(unsigned long long, unsigned long long, unsigned long long)
10002406:	83 c4 18             	add    esp,0x18
10002409:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
1000240c:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
1000240f:	6a 00                	push   0x0
10002411:	6a 0c                	push   0xc
10002413:	6a 00                	push   0x0
10002415:	6a 0d                	push   0xd
10002417:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
1000241a:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
1000241d:	e8 fc ff ff ff       	call   1000241e <retrieveBits(char*)+0x260>	1000241e: R_386_PC32	swapBits(unsigned long long, unsigned long long, unsigned long long)
10002422:	83 c4 18             	add    esp,0x18
10002425:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
10002428:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
1000242b:	6a 00                	push   0x0
1000242d:	6a 16                	push   0x16
1000242f:	6a 00                	push   0x0
10002431:	6a 25                	push   0x25
10002433:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
10002436:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10002439:	e8 fc ff ff ff       	call   1000243a <retrieveBits(char*)+0x27c>	1000243a: R_386_PC32	swapBits(unsigned long long, unsigned long long, unsigned long long)
1000243e:	83 c4 18             	add    esp,0x18
10002441:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
10002444:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
10002447:	81 75 d8 95 38 e4 b5 	xor    DWORD PTR [ebp-0x28],0xb5e43895
1000244e:	83 75 dc 37          	xor    DWORD PTR [ebp-0x24],0x37
10002452:	ff 45 d4             	inc    DWORD PTR [ebp-0x2c]
10002455:	e9 78 ff ff ff       	jmp    100023d2 <retrieveBits(char*)+0x214>
1000245a:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
1000245d:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
10002460:	8d 65 f4             	lea    esp,[ebp-0xc]
10002463:	5b                   	pop    ebx
10002464:	5e                   	pop    esi
10002465:	5f                   	pop    edi
10002466:	5d                   	pop    ebp
10002467:	c3                   	ret    

10002468 <checkKey(char*)>:
10002468:	55                   	push   ebp
10002469:	89 e5                	mov    ebp,esp
1000246b:	53                   	push   ebx
1000246c:	83 ec 14             	sub    esp,0x14
1000246f:	83 ec 04             	sub    esp,0x4
10002472:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002475:	e8 fc ff ff ff       	call   10002476 <checkKey(char*)+0xe>	10002476: R_386_PC32	retrieveBits(char*)
1000247a:	83 c4 08             	add    esp,0x8
1000247d:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10002480:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
10002483:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10002486:	25 ff 7f 00 00       	and    eax,0x7fff
1000248b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
1000248e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10002491:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10002494:	0f ac d0 0f          	shrd   eax,edx,0xf
10002498:	c1 ea 0f             	shr    edx,0xf
1000249b:	89 c1                	mov    ecx,eax
1000249d:	89 d3                	mov    ebx,edx
1000249f:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
100024a2:	83 ec 04             	sub    esp,0x4
100024a5:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
100024a8:	e8 fc ff ff ff       	call   100024a9 <checkKey(char*)+0x41>	100024a9: R_386_PC32	getChecksum(unsigned int)
100024ad:	83 c4 08             	add    esp,0x8
100024b0:	39 45 ec             	cmp    DWORD PTR [ebp-0x14],eax
100024b3:	0f 95 c0             	setne  al
100024b6:	84 c0                	test   al,al
100024b8:	74 07                	je     100024c1 <checkKey(char*)+0x59>
100024ba:	b8 00 00 00 00       	mov    eax,0x0
100024bf:	eb 06                	jmp    100024c7 <checkKey(char*)+0x5f>
100024c1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100024c4:	83 e0 07             	and    eax,0x7
100024c7:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
100024ca:	c9                   	leave  
100024cb:	c3                   	ret    

100024cc <changeKeyType(char*, int)>:
100024cc:	55                   	push   ebp
100024cd:	89 e5                	mov    ebp,esp
100024cf:	83 ec 10             	sub    esp,0x10
100024d2:	83 ec 04             	sub    esp,0x4
100024d5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100024d8:	e8 fc ff ff ff       	call   100024d9 <changeKeyType(char*, int)+0xd>	100024d9: R_386_PC32	retrieveBits(char*)
100024dd:	83 c4 08             	add    esp,0x8
100024e0:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
100024e3:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
100024e6:	83 65 f8 f8          	and    DWORD PTR [ebp-0x8],0xfffffff8
100024ea:	83 65 fc ff          	and    DWORD PTR [ebp-0x4],0xffffffff
100024ee:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100024f1:	99                   	cdq    
100024f2:	09 45 f8             	or     DWORD PTR [ebp-0x8],eax
100024f5:	09 55 fc             	or     DWORD PTR [ebp-0x4],edx
100024f8:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
100024fb:	50                   	push   eax
100024fc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100024ff:	e8 fc ff ff ff       	call   10002500 <changeKeyType(char*, int)+0x34>	10002500: R_386_PC32	createKey(char*, unsigned int)
10002504:	83 c4 08             	add    esp,0x8
10002507:	83 ec 04             	sub    esp,0x4
1000250a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000250d:	e8 fc ff ff ff       	call   1000250e <changeKeyType(char*, int)+0x42>	1000250e: R_386_PC32	checkKey(char*)
10002512:	83 c4 08             	add    esp,0x8
10002515:	85 c0                	test   eax,eax
10002517:	0f 95 c0             	setne  al
1000251a:	c9                   	leave  
1000251b:	c3                   	ret    

1000251c <checkExtendedKey(char*)>:
1000251c:	55                   	push   ebp
1000251d:	89 e5                	mov    ebp,esp
1000251f:	83 ec 20             	sub    esp,0x20
10002522:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002525:	8a 00                	mov    al,BYTE PTR [eax]
10002527:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
1000252a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000252d:	8a 40 01             	mov    al,BYTE PTR [eax+0x1]
10002530:	88 45 ed             	mov    BYTE PTR [ebp-0x13],al
10002533:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002536:	8a 40 02             	mov    al,BYTE PTR [eax+0x2]
10002539:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
1000253c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000253f:	8a 40 03             	mov    al,BYTE PTR [eax+0x3]
10002542:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
10002545:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002548:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
1000254b:	88 45 f0             	mov    BYTE PTR [ebp-0x10],al
1000254e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002551:	8a 40 05             	mov    al,BYTE PTR [eax+0x5]
10002554:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
10002557:	c6 45 f2 2d          	mov    BYTE PTR [ebp-0xe],0x2d
1000255b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000255e:	8a 40 06             	mov    al,BYTE PTR [eax+0x6]
10002561:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
10002564:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002567:	8a 40 07             	mov    al,BYTE PTR [eax+0x7]
1000256a:	88 45 f4             	mov    BYTE PTR [ebp-0xc],al
1000256d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002570:	8a 40 09             	mov    al,BYTE PTR [eax+0x9]
10002573:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
10002576:	c6 45 f6 2d          	mov    BYTE PTR [ebp-0xa],0x2d
1000257a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000257d:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
10002580:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
10002583:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002586:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
10002589:	88 45 f8             	mov    BYTE PTR [ebp-0x8],al
1000258c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000258f:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
10002592:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
10002595:	c6 45 fa 2d          	mov    BYTE PTR [ebp-0x6],0x2d
10002599:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000259c:	8a 40 0f             	mov    al,BYTE PTR [eax+0xf]
1000259f:	88 45 fb             	mov    BYTE PTR [ebp-0x5],al
100025a2:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
100025a5:	48                   	dec    eax
100025a6:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
100025a9:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
100025ac:	3c 2f                	cmp    al,0x2f
100025ae:	75 04                	jne    100025b4 <checkExtendedKey(char*)+0x98>
100025b0:	c6 45 ef 39          	mov    BYTE PTR [ebp-0x11],0x39
100025b4:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
100025b7:	48                   	dec    eax
100025b8:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
100025bb:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
100025be:	3c 2f                	cmp    al,0x2f
100025c0:	75 04                	jne    100025c6 <checkExtendedKey(char*)+0xaa>
100025c2:	c6 45 f5 39          	mov    BYTE PTR [ebp-0xb],0x39
100025c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100025c9:	83 c0 0d             	add    eax,0xd
100025cc:	8a 10                	mov    dl,BYTE PTR [eax]
100025ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100025d1:	83 c0 0c             	add    eax,0xc
100025d4:	8a 00                	mov    al,BYTE PTR [eax]
100025d6:	38 c2                	cmp    dl,al
100025d8:	74 0a                	je     100025e4 <checkExtendedKey(char*)+0xc8>
100025da:	b8 00 00 00 00       	mov    eax,0x0
100025df:	e9 d6 00 00 00       	jmp    100026ba <checkExtendedKey(char*)+0x19e>
100025e4:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
100025e7:	3c 2f                	cmp    al,0x2f
100025e9:	7e 07                	jle    100025f2 <checkExtendedKey(char*)+0xd6>
100025eb:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
100025ee:	3c 39                	cmp    al,0x39
100025f0:	7e 0a                	jle    100025fc <checkExtendedKey(char*)+0xe0>
100025f2:	b8 00 00 00 00       	mov    eax,0x0
100025f7:	e9 be 00 00 00       	jmp    100026ba <checkExtendedKey(char*)+0x19e>
100025fc:	8a 45 f0             	mov    al,BYTE PTR [ebp-0x10]
100025ff:	3c 2f                	cmp    al,0x2f
10002601:	7e 07                	jle    1000260a <checkExtendedKey(char*)+0xee>
10002603:	8a 45 f0             	mov    al,BYTE PTR [ebp-0x10]
10002606:	3c 39                	cmp    al,0x39
10002608:	7e 0a                	jle    10002614 <checkExtendedKey(char*)+0xf8>
1000260a:	b8 00 00 00 00       	mov    eax,0x0
1000260f:	e9 a6 00 00 00       	jmp    100026ba <checkExtendedKey(char*)+0x19e>
10002614:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
10002617:	3c 2f                	cmp    al,0x2f
10002619:	7e 07                	jle    10002622 <checkExtendedKey(char*)+0x106>
1000261b:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
1000261e:	3c 39                	cmp    al,0x39
10002620:	7e 0a                	jle    1000262c <checkExtendedKey(char*)+0x110>
10002622:	b8 00 00 00 00       	mov    eax,0x0
10002627:	e9 8e 00 00 00       	jmp    100026ba <checkExtendedKey(char*)+0x19e>
1000262c:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
1000262f:	3c 2f                	cmp    al,0x2f
10002631:	7e 07                	jle    1000263a <checkExtendedKey(char*)+0x11e>
10002633:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
10002636:	3c 39                	cmp    al,0x39
10002638:	7e 07                	jle    10002641 <checkExtendedKey(char*)+0x125>
1000263a:	b8 00 00 00 00       	mov    eax,0x0
1000263f:	eb 79                	jmp    100026ba <checkExtendedKey(char*)+0x19e>
10002641:	8a 45 f4             	mov    al,BYTE PTR [ebp-0xc]
10002644:	3c 2f                	cmp    al,0x2f
10002646:	7e 07                	jle    1000264f <checkExtendedKey(char*)+0x133>
10002648:	8a 45 f4             	mov    al,BYTE PTR [ebp-0xc]
1000264b:	3c 39                	cmp    al,0x39
1000264d:	7e 07                	jle    10002656 <checkExtendedKey(char*)+0x13a>
1000264f:	b8 00 00 00 00       	mov    eax,0x0
10002654:	eb 64                	jmp    100026ba <checkExtendedKey(char*)+0x19e>
10002656:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
10002659:	3c 2f                	cmp    al,0x2f
1000265b:	7e 07                	jle    10002664 <checkExtendedKey(char*)+0x148>
1000265d:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
10002660:	3c 39                	cmp    al,0x39
10002662:	7e 07                	jle    1000266b <checkExtendedKey(char*)+0x14f>
10002664:	b8 00 00 00 00       	mov    eax,0x0
10002669:	eb 4f                	jmp    100026ba <checkExtendedKey(char*)+0x19e>
1000266b:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
1000266e:	3c 2f                	cmp    al,0x2f
10002670:	7e 07                	jle    10002679 <checkExtendedKey(char*)+0x15d>
10002672:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
10002675:	3c 39                	cmp    al,0x39
10002677:	7e 07                	jle    10002680 <checkExtendedKey(char*)+0x164>
10002679:	b8 00 00 00 00       	mov    eax,0x0
1000267e:	eb 3a                	jmp    100026ba <checkExtendedKey(char*)+0x19e>
10002680:	8a 45 f8             	mov    al,BYTE PTR [ebp-0x8]
10002683:	3c 2f                	cmp    al,0x2f
10002685:	7e 07                	jle    1000268e <checkExtendedKey(char*)+0x172>
10002687:	8a 45 f8             	mov    al,BYTE PTR [ebp-0x8]
1000268a:	3c 39                	cmp    al,0x39
1000268c:	7e 07                	jle    10002695 <checkExtendedKey(char*)+0x179>
1000268e:	b8 00 00 00 00       	mov    eax,0x0
10002693:	eb 25                	jmp    100026ba <checkExtendedKey(char*)+0x19e>
10002695:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
10002698:	3c 2f                	cmp    al,0x2f
1000269a:	7e 07                	jle    100026a3 <checkExtendedKey(char*)+0x187>
1000269c:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
1000269f:	3c 39                	cmp    al,0x39
100026a1:	7e 07                	jle    100026aa <checkExtendedKey(char*)+0x18e>
100026a3:	b8 00 00 00 00       	mov    eax,0x0
100026a8:	eb 10                	jmp    100026ba <checkExtendedKey(char*)+0x19e>
100026aa:	83 ec 04             	sub    esp,0x4
100026ad:	8d 45 ec             	lea    eax,[ebp-0x14]
100026b0:	50                   	push   eax
100026b1:	e8 fc ff ff ff       	call   100026b2 <checkExtendedKey(char*)+0x196>	100026b2: R_386_PC32	checkKey(char*)
100026b6:	83 c4 08             	add    esp,0x8
100026b9:	90                   	nop
100026ba:	c9                   	leave  
100026bb:	c3                   	ret    

100026bc <loadTimezoneStrings()>:
100026bc:	55                   	push   ebp
100026bd:	89 e5                	mov    ebp,esp
100026bf:	53                   	push   ebx
100026c0:	83 ec 34             	sub    esp,0x34
100026c3:	83 ec 0c             	sub    esp,0xc
100026c6:	68 14 01 00 00       	push   0x114
100026cb:	e8 fc ff ff ff       	call   100026cc <loadTimezoneStrings()+0x10>	100026cc: R_386_PC32	operator new(unsigned long)
100026d0:	83 c4 10             	add    esp,0x10
100026d3:	89 c3                	mov    ebx,eax
100026d5:	a1 00 00 00 00       	mov    eax,ds:0x0	100026d6: R_386_32	kernelProcess
100026da:	83 ec 04             	sub    esp,0x4
100026dd:	50                   	push   eax
100026de:	68 e4 51 00 10       	push   0x100051e4	100026df: R_386_32	.text
100026e3:	53                   	push   ebx
100026e4:	e8 fc ff ff ff       	call   100026e5 <loadTimezoneStrings()+0x29>	100026e5: R_386_PC32	File::File(char const*, Process*)
100026e9:	83 c4 10             	add    esp,0x10
100026ec:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
100026ef:	83 ec 08             	sub    esp,0x8
100026f2:	6a 01                	push   0x1
100026f4:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
100026f7:	e8 fc ff ff ff       	call   100026f8 <loadTimezoneStrings()+0x3c>	100026f8: R_386_PC32	File::open(FileOpenMode)
100026fc:	83 c4 10             	add    esp,0x10
100026ff:	83 ec 04             	sub    esp,0x4
10002702:	8d 45 d7             	lea    eax,[ebp-0x29]
10002705:	50                   	push   eax
10002706:	8d 45 d8             	lea    eax,[ebp-0x28]
10002709:	50                   	push   eax
1000270a:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
1000270d:	e8 fc ff ff ff       	call   1000270e <loadTimezoneStrings()+0x52>	1000270e: R_386_PC32	File::stat(unsigned long long*, bool*)
10002712:	83 c4 10             	add    esp,0x10
10002715:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10002718:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
1000271b:	83 ec 0c             	sub    esp,0xc
1000271e:	50                   	push   eax
1000271f:	e8 fc ff ff ff       	call   10002720 <loadTimezoneStrings()+0x64>	10002720: R_386_PC32	malloc
10002724:	83 c4 10             	add    esp,0x10
10002727:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
1000272a:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
1000272d:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
10002730:	83 ec 04             	sub    esp,0x4
10002733:	50                   	push   eax
10002734:	6a 00                	push   0x0
10002736:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
10002739:	e8 fc ff ff ff       	call   1000273a <loadTimezoneStrings()+0x7e>	1000273a: R_386_PC32	memset
1000273e:	83 c4 10             	add    esp,0x10
10002741:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10002744:	8b 00                	mov    eax,DWORD PTR [eax]
10002746:	83 c0 0c             	add    eax,0xc
10002749:	8b 08                	mov    ecx,DWORD PTR [eax]
1000274b:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
1000274e:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
10002751:	83 ec 0c             	sub    esp,0xc
10002754:	8d 5d d0             	lea    ebx,[ebp-0x30]
10002757:	53                   	push   ebx
10002758:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
1000275b:	52                   	push   edx
1000275c:	50                   	push   eax
1000275d:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
10002760:	ff d1                	call   ecx
10002762:	83 c4 20             	add    esp,0x20
10002765:	83 ec 0c             	sub    esp,0xc
10002768:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
1000276b:	e8 fc ff ff ff       	call   1000276c <loadTimezoneStrings()+0xb0>	1000276c: R_386_PC32	File::close()
10002770:	83 c4 10             	add    esp,0x10
10002773:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10002776:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
10002779:	83 ec 08             	sub    esp,0x8
1000277c:	50                   	push   eax
1000277d:	68 03 52 00 10       	push   0x10005203	1000277e: R_386_32	.text
10002782:	e8 fc ff ff ff       	call   10002783 <loadTimezoneStrings()+0xc7>	10002783: R_386_PC32	Dbg::kprintf(char const*, ...)
10002787:	83 c4 10             	add    esp,0x10
1000278a:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
10002791:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
10002798:	81 7d f0 c7 00 00 00 	cmp    DWORD PTR [ebp-0x10],0xc7
1000279f:	7f 39                	jg     100027da <loadTimezoneStrings()+0x11e>
100027a1:	83 ec 0c             	sub    esp,0xc
100027a4:	6a 78                	push   0x78
100027a6:	e8 fc ff ff ff       	call   100027a7 <loadTimezoneStrings()+0xeb>	100027a7: R_386_PC32	malloc
100027ab:	83 c4 10             	add    esp,0x10
100027ae:	89 c2                	mov    edx,eax
100027b0:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100027b3:	89 14 85 00 00 00 00 	mov    DWORD PTR [eax*4+0x0],edx	100027b6: R_386_32	timezoneStrings
100027ba:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100027bd:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	100027c0: R_386_32	timezoneStrings
100027c4:	83 ec 08             	sub    esp,0x8
100027c7:	68 0d 52 00 10       	push   0x1000520d	100027c8: R_386_32	.text
100027cc:	50                   	push   eax
100027cd:	e8 fc ff ff ff       	call   100027ce <loadTimezoneStrings()+0x112>	100027ce: R_386_PC32	strcpy
100027d2:	83 c4 10             	add    esp,0x10
100027d5:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
100027d8:	eb be                	jmp    10002798 <loadTimezoneStrings()+0xdc>
100027da:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
100027e1:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
100027e4:	8d 50 01             	lea    edx,[eax+0x1]
100027e7:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
100027ea:	89 c2                	mov    edx,eax
100027ec:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
100027ef:	01 d0                	add    eax,edx
100027f1:	8a 00                	mov    al,BYTE PTR [eax]
100027f3:	88 45 ce             	mov    BYTE PTR [ebp-0x32],al
100027f6:	c6 45 cf 00          	mov    BYTE PTR [ebp-0x31],0x0
100027fa:	8a 45 ce             	mov    al,BYTE PTR [ebp-0x32]
100027fd:	3c 0d                	cmp    al,0xd
100027ff:	0f 84 2e 01 00 00    	je     10002933 <loadTimezoneStrings()+0x277>
10002805:	8a 45 ce             	mov    al,BYTE PTR [ebp-0x32]
10002808:	3c 09                	cmp    al,0x9
1000280a:	75 3c                	jne    10002848 <loadTimezoneStrings()+0x18c>
1000280c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
1000280f:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	10002812: R_386_32	timezoneStrings
10002816:	83 ec 0c             	sub    esp,0xc
10002819:	50                   	push   eax
1000281a:	e8 fc ff ff ff       	call   1000281b <loadTimezoneStrings()+0x15f>	1000281b: R_386_PC32	strlen
1000281f:	83 c4 10             	add    esp,0x10
10002822:	83 f8 08             	cmp    eax,0x8
10002825:	0f 87 0e 01 00 00    	ja     10002939 <loadTimezoneStrings()+0x27d>
1000282b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
1000282e:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	10002831: R_386_32	timezoneStrings
10002835:	83 ec 08             	sub    esp,0x8
10002838:	68 0d 52 00 10       	push   0x1000520d	10002839: R_386_32	.text
1000283d:	50                   	push   eax
1000283e:	e8 fc ff ff ff       	call   1000283f <loadTimezoneStrings()+0x183>	1000283f: R_386_PC32	strcat
10002843:	83 c4 10             	add    esp,0x10
10002846:	eb c4                	jmp    1000280c <loadTimezoneStrings()+0x150>
10002848:	8a 45 ce             	mov    al,BYTE PTR [ebp-0x32]
1000284b:	3c 0a                	cmp    al,0xa
1000284d:	75 6b                	jne    100028ba <loadTimezoneStrings()+0x1fe>
1000284f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10002852:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	10002855: R_386_32	timezoneStrings
10002859:	83 ec 0c             	sub    esp,0xc
1000285c:	50                   	push   eax
1000285d:	e8 fc ff ff ff       	call   1000285e <loadTimezoneStrings()+0x1a2>	1000285e: R_386_PC32	strlen
10002862:	83 c4 10             	add    esp,0x10
10002865:	83 f8 35             	cmp    eax,0x35
10002868:	77 1d                	ja     10002887 <loadTimezoneStrings()+0x1cb>
1000286a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
1000286d:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	10002870: R_386_32	timezoneStrings
10002874:	83 ec 08             	sub    esp,0x8
10002877:	68 0d 52 00 10       	push   0x1000520d	10002878: R_386_32	.text
1000287c:	50                   	push   eax
1000287d:	e8 fc ff ff ff       	call   1000287e <loadTimezoneStrings()+0x1c2>	1000287e: R_386_PC32	strcat
10002882:	83 c4 10             	add    esp,0x10
10002885:	eb c8                	jmp    1000284f <loadTimezoneStrings()+0x193>
10002887:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
1000288a:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
1000288d:	99                   	cdq    
1000288e:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
10002891:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
10002894:	39 c8                	cmp    eax,ecx
10002896:	89 d0                	mov    eax,edx
10002898:	19 d8                	sbb    eax,ebx
1000289a:	0f 82 9f 00 00 00    	jb     1000293f <loadTimezoneStrings()+0x283>
100028a0:	83 ec 0c             	sub    esp,0xc
100028a3:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
100028a6:	e8 fc ff ff ff       	call   100028a7 <loadTimezoneStrings()+0x1eb>	100028a7: R_386_PC32	free
100028ab:	83 c4 10             	add    esp,0x10
100028ae:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
100028b5:	e9 8b 00 00 00       	jmp    10002945 <loadTimezoneStrings()+0x289>
100028ba:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
100028bd:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	100028c0: R_386_32	timezoneStrings
100028c4:	83 ec 0c             	sub    esp,0xc
100028c7:	50                   	push   eax
100028c8:	e8 fc ff ff ff       	call   100028c9 <loadTimezoneStrings()+0x20d>	100028c9: R_386_PC32	strlen
100028cd:	83 c4 10             	add    esp,0x10
100028d0:	83 f8 31             	cmp    eax,0x31
100028d3:	77 1f                	ja     100028f4 <loadTimezoneStrings()+0x238>
100028d5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
100028d8:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	100028db: R_386_32	timezoneStrings
100028df:	83 ec 08             	sub    esp,0x8
100028e2:	8d 55 ce             	lea    edx,[ebp-0x32]
100028e5:	52                   	push   edx
100028e6:	50                   	push   eax
100028e7:	e8 fc ff ff ff       	call   100028e8 <loadTimezoneStrings()+0x22c>	100028e8: R_386_PC32	strcat
100028ec:	83 c4 10             	add    esp,0x10
100028ef:	e9 ed fe ff ff       	jmp    100027e1 <loadTimezoneStrings()+0x125>
100028f4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
100028f7:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	100028fa: R_386_32	timezoneStrings
100028fe:	83 ec 0c             	sub    esp,0xc
10002901:	50                   	push   eax
10002902:	e8 fc ff ff ff       	call   10002903 <loadTimezoneStrings()+0x247>	10002903: R_386_PC32	strlen
10002907:	83 c4 10             	add    esp,0x10
1000290a:	83 f8 32             	cmp    eax,0x32
1000290d:	0f 85 ce fe ff ff    	jne    100027e1 <loadTimezoneStrings()+0x125>
10002913:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10002916:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	10002919: R_386_32	timezoneStrings
1000291d:	83 ec 08             	sub    esp,0x8
10002920:	68 0f 52 00 10       	push   0x1000520f	10002921: R_386_32	.text
10002925:	50                   	push   eax
10002926:	e8 fc ff ff ff       	call   10002927 <loadTimezoneStrings()+0x26b>	10002927: R_386_PC32	strcat
1000292b:	83 c4 10             	add    esp,0x10
1000292e:	e9 ae fe ff ff       	jmp    100027e1 <loadTimezoneStrings()+0x125>
10002933:	90                   	nop
10002934:	e9 a8 fe ff ff       	jmp    100027e1 <loadTimezoneStrings()+0x125>
10002939:	90                   	nop
1000293a:	e9 a2 fe ff ff       	jmp    100027e1 <loadTimezoneStrings()+0x125>
1000293f:	90                   	nop
10002940:	e9 9c fe ff ff       	jmp    100027e1 <loadTimezoneStrings()+0x125>
10002945:	81 7d e8 c7 00 00 00 	cmp    DWORD PTR [ebp-0x18],0xc7
1000294c:	7f 23                	jg     10002971 <loadTimezoneStrings()+0x2b5>
1000294e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10002951:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	10002954: R_386_32	timezoneStrings
10002958:	83 ec 04             	sub    esp,0x4
1000295b:	50                   	push   eax
1000295c:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
1000295f:	68 14 52 00 10       	push   0x10005214	10002960: R_386_32	.text
10002964:	e8 fc ff ff ff       	call   10002965 <loadTimezoneStrings()+0x2a9>	10002965: R_386_PC32	Dbg::kprintf(char const*, ...)
10002969:	83 c4 10             	add    esp,0x10
1000296c:	ff 45 e8             	inc    DWORD PTR [ebp-0x18]
1000296f:	eb d4                	jmp    10002945 <loadTimezoneStrings()+0x289>
10002971:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10002974:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
10002977:	c9                   	leave  
10002978:	c3                   	ret    

10002979 <firstRun(bool)>:
10002979:	55                   	push   ebp
1000297a:	89 e5                	mov    ebp,esp
1000297c:	56                   	push   esi
1000297d:	53                   	push   ebx
1000297e:	81 ec d0 00 00 00    	sub    esp,0xd0
10002984:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002987:	88 85 34 ff ff ff    	mov    BYTE PTR [ebp-0xcc],al
1000298d:	8a 85 34 ff ff ff    	mov    al,BYTE PTR [ebp-0xcc]
10002993:	83 f0 01             	xor    eax,0x1
10002996:	a2 00 00 00 00       	mov    ds:0x0,al	10002997: R_386_32	showSidebar
1000299b:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	1000299d: R_386_32	guiKeyboardHandler
	100029a1: R_386_32	bootInstallKeybrd(KeyboardToken, bool*)
100029a5:	83 ec 0c             	sub    esp,0xc
100029a8:	68 1c 52 00 10       	push   0x1000521c	100029a9: R_386_32	.text
100029ad:	e8 fc ff ff ff       	call   100029ae <firstRun(bool)+0x35>	100029ae: R_386_PC32	KeSetBootMessage(char const*)
100029b2:	83 c4 10             	add    esp,0x10
100029b5:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100029b7: R_386_32	VgaText::hiddenOut
100029bc:	a1 00 00 00 00       	mov    eax,ds:0x0	100029bd: R_386_32	activeTerminal
100029c1:	83 ec 08             	sub    esp,0x8
100029c4:	68 45 52 00 10       	push   0x10005245	100029c5: R_386_32	.text
100029c9:	50                   	push   eax
100029ca:	e8 fc ff ff ff       	call   100029cb <firstRun(bool)+0x52>	100029cb: R_386_PC32	VgaText::puts(char const*)
100029cf:	83 c4 10             	add    esp,0x10
100029d2:	a1 00 00 00 00       	mov    eax,ds:0x0	100029d3: R_386_32	kernelProcess
100029d7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
100029dd:	83 ec 08             	sub    esp,0x8
100029e0:	68 45 52 00 10       	push   0x10005245	100029e1: R_386_32	.text
100029e5:	50                   	push   eax
100029e6:	e8 fc ff ff ff       	call   100029e7 <firstRun(bool)+0x6e>	100029e7: R_386_PC32	VgaText::puts(char const*)
100029eb:	83 c4 10             	add    esp,0x10
100029ee:	83 ec 0c             	sub    esp,0xc
100029f1:	68 84 01 00 00       	push   0x184
100029f6:	e8 fc ff ff ff       	call   100029f7 <firstRun(bool)+0x7e>	100029f7: R_386_PC32	operator new(unsigned long)
100029fb:	83 c4 10             	add    esp,0x10
100029fe:	89 c3                	mov    ebx,eax
10002a00:	83 ec 08             	sub    esp,0x8
10002a03:	68 4c 52 00 10       	push   0x1000524c	10002a04: R_386_32	.text
10002a08:	53                   	push   ebx
10002a09:	e8 fc ff ff ff       	call   10002a0a <firstRun(bool)+0x91>	10002a0a: R_386_PC32	VgaText::VgaText(char const*)
10002a0e:	83 c4 10             	add    esp,0x10
10002a11:	89 1d 00 00 00 00    	mov    DWORD PTR ds:0x0,ebx	10002a13: R_386_32	term
10002a17:	a1 00 00 00 00       	mov    eax,ds:0x0	10002a18: R_386_32	term
10002a1c:	83 ec 0c             	sub    esp,0xc
10002a1f:	50                   	push   eax
10002a20:	e8 fc ff ff ff       	call   10002a21 <firstRun(bool)+0xa8>	10002a21: R_386_PC32	setActiveTerminal(VgaText*)
10002a25:	83 c4 10             	add    esp,0x10
10002a28:	e8 fc ff ff ff       	call   10002a29 <firstRun(bool)+0xb0>	10002a29: R_386_PC32	drawBootScreen()
10002a2d:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
10002a34:	8a 85 34 ff ff ff    	mov    al,BYTE PTR [ebp-0xcc]
10002a3a:	83 f0 01             	xor    eax,0x1
10002a3d:	84 c0                	test   al,al
10002a3f:	0f 84 0c 13 00 00    	je     10003d51 <firstRun(bool)+0x13d8>
10002a45:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
10002a4c:	83 ec 0c             	sub    esp,0xc
10002a4f:	68 51 52 00 10       	push   0x10005251	10002a50: R_386_32	.text
10002a54:	6a 0c                	push   0xc
10002a56:	6a 32                	push   0x32
10002a58:	6a 03                	push   0x3
10002a5a:	6a 16                	push   0x16
10002a5c:	e8 fc ff ff ff       	call   10002a5d <firstRun(bool)+0xe4>	10002a5d: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
10002a61:	83 c4 20             	add    esp,0x20
10002a64:	a1 00 00 00 00       	mov    eax,ds:0x0	10002a65: R_386_32	term
10002a69:	83 ec 04             	sub    esp,0x4
10002a6c:	6a 06                	push   0x6
10002a6e:	6a 18                	push   0x18
10002a70:	50                   	push   eax
10002a71:	e8 fc ff ff ff       	call   10002a72 <firstRun(bool)+0xf9>	10002a72: R_386_PC32	VgaText::setCursor(int, int)
10002a76:	83 c4 10             	add    esp,0x10
10002a79:	a1 00 00 00 00       	mov    eax,ds:0x0	10002a7a: R_386_32	term
10002a7e:	83 ec 08             	sub    esp,0x8
10002a81:	68 60 52 00 10       	push   0x10005260	10002a82: R_386_32	.text
10002a86:	50                   	push   eax
10002a87:	e8 fc ff ff ff       	call   10002a88 <firstRun(bool)+0x10f>	10002a88: R_386_PC32	VgaText::puts(char const*)
10002a8c:	83 c4 10             	add    esp,0x10
10002a8f:	a1 00 00 00 00       	mov    eax,ds:0x0	10002a90: R_386_32	term
10002a94:	83 ec 04             	sub    esp,0x4
10002a97:	6a 07                	push   0x7
10002a99:	6a 18                	push   0x18
10002a9b:	50                   	push   eax
10002a9c:	e8 fc ff ff ff       	call   10002a9d <firstRun(bool)+0x124>	10002a9d: R_386_PC32	VgaText::setCursor(int, int)
10002aa1:	83 c4 10             	add    esp,0x10
10002aa4:	a1 00 00 00 00       	mov    eax,ds:0x0	10002aa5: R_386_32	term
10002aa9:	83 ec 08             	sub    esp,0x8
10002aac:	68 8f 52 00 10       	push   0x1000528f	10002aad: R_386_32	.text
10002ab1:	50                   	push   eax
10002ab2:	e8 fc ff ff ff       	call   10002ab3 <firstRun(bool)+0x13a>	10002ab3: R_386_PC32	VgaText::puts(char const*)
10002ab7:	83 c4 10             	add    esp,0x10
10002aba:	a1 00 00 00 00       	mov    eax,ds:0x0	10002abb: R_386_32	term
10002abf:	83 ec 04             	sub    esp,0x4
10002ac2:	6a 09                	push   0x9
10002ac4:	6a 18                	push   0x18
10002ac6:	50                   	push   eax
10002ac7:	e8 fc ff ff ff       	call   10002ac8 <firstRun(bool)+0x14f>	10002ac8: R_386_PC32	VgaText::setCursor(int, int)
10002acc:	83 c4 10             	add    esp,0x10
10002acf:	a1 00 00 00 00       	mov    eax,ds:0x0	10002ad0: R_386_32	term
10002ad4:	83 ec 08             	sub    esp,0x8
10002ad7:	68 9f 52 00 10       	push   0x1000529f	10002ad8: R_386_32	.text
10002adc:	50                   	push   eax
10002add:	e8 fc ff ff ff       	call   10002ade <firstRun(bool)+0x165>	10002ade: R_386_PC32	VgaText::puts(char const*)
10002ae2:	83 c4 10             	add    esp,0x10
10002ae5:	a1 00 00 00 00       	mov    eax,ds:0x0	10002ae6: R_386_32	term
10002aea:	83 ec 04             	sub    esp,0x4
10002aed:	6a 0b                	push   0xb
10002aef:	6a 18                	push   0x18
10002af1:	50                   	push   eax
10002af2:	e8 fc ff ff ff       	call   10002af3 <firstRun(bool)+0x17a>	10002af3: R_386_PC32	VgaText::setCursor(int, int)
10002af7:	83 c4 10             	add    esp,0x10
10002afa:	a1 00 00 00 00       	mov    eax,ds:0x0	10002afb: R_386_32	term
10002aff:	83 ec 08             	sub    esp,0x8
10002b02:	68 a4 52 00 10       	push   0x100052a4	10002b03: R_386_32	.text
10002b07:	50                   	push   eax
10002b08:	e8 fc ff ff ff       	call   10002b09 <firstRun(bool)+0x190>	10002b09: R_386_PC32	VgaText::puts(char const*)
10002b0d:	83 c4 10             	add    esp,0x10
10002b10:	a1 00 00 00 00       	mov    eax,ds:0x0	10002b11: R_386_32	term
10002b15:	83 ec 04             	sub    esp,0x4
10002b18:	6a 09                	push   0x9
10002b1a:	6a 21                	push   0x21
10002b1c:	50                   	push   eax
10002b1d:	e8 fc ff ff ff       	call   10002b1e <firstRun(bool)+0x1a5>	10002b1e: R_386_PC32	VgaText::setCursor(int, int)
10002b22:	83 c4 10             	add    esp,0x10
10002b25:	a1 00 00 00 00       	mov    eax,ds:0x0	10002b26: R_386_32	term
10002b2a:	6a 07                	push   0x7
10002b2c:	6a 00                	push   0x0
10002b2e:	68 ac 52 00 10       	push   0x100052ac	10002b2f: R_386_32	.text
10002b33:	50                   	push   eax
10002b34:	e8 fc ff ff ff       	call   10002b35 <firstRun(bool)+0x1bc>	10002b35: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002b39:	83 c4 10             	add    esp,0x10
10002b3c:	a1 00 00 00 00       	mov    eax,ds:0x0	10002b3d: R_386_32	term
10002b41:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
10002b45:	75 07                	jne    10002b4e <firstRun(bool)+0x1d5>
10002b47:	ba c6 52 00 10       	mov    edx,0x100052c6	10002b48: R_386_32	.text
10002b4c:	eb 05                	jmp    10002b53 <firstRun(bool)+0x1da>
10002b4e:	ba ca 52 00 10       	mov    edx,0x100052ca	10002b4f: R_386_32	.text
10002b53:	6a 0f                	push   0xf
10002b55:	6a 00                	push   0x0
10002b57:	52                   	push   edx
10002b58:	50                   	push   eax
10002b59:	e8 fc ff ff ff       	call   10002b5a <firstRun(bool)+0x1e1>	10002b5a: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002b5e:	83 c4 10             	add    esp,0x10
10002b61:	a1 00 00 00 00       	mov    eax,ds:0x0	10002b62: R_386_32	term
10002b66:	83 ec 08             	sub    esp,0x8
10002b69:	6a 21                	push   0x21
10002b6b:	50                   	push   eax
10002b6c:	e8 fc ff ff ff       	call   10002b6d <firstRun(bool)+0x1f4>	10002b6d: R_386_PC32	VgaText::setCursorX(int)
10002b71:	83 c4 10             	add    esp,0x10
10002b74:	a1 00 00 00 00       	mov    eax,ds:0x0	10002b75: R_386_32	term
10002b79:	6a 07                	push   0x7
10002b7b:	6a 00                	push   0x0
10002b7d:	68 00 00 00 00       	push   0x0	10002b7e: R_386_32	currName
10002b82:	50                   	push   eax
10002b83:	e8 fc ff ff ff       	call   10002b84 <firstRun(bool)+0x20b>	10002b84: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002b88:	83 c4 10             	add    esp,0x10
10002b8b:	a1 00 00 00 00       	mov    eax,ds:0x0	10002b8c: R_386_32	term
10002b90:	83 ec 04             	sub    esp,0x4
10002b93:	6a 0b                	push   0xb
10002b95:	6a 21                	push   0x21
10002b97:	50                   	push   eax
10002b98:	e8 fc ff ff ff       	call   10002b99 <firstRun(bool)+0x220>	10002b99: R_386_PC32	VgaText::setCursor(int, int)
10002b9d:	83 c4 10             	add    esp,0x10
10002ba0:	a1 00 00 00 00       	mov    eax,ds:0x0	10002ba1: R_386_32	term
10002ba5:	6a 07                	push   0x7
10002ba7:	6a 00                	push   0x0
10002ba9:	68 ac 52 00 10       	push   0x100052ac	10002baa: R_386_32	.text
10002bae:	50                   	push   eax
10002baf:	e8 fc ff ff ff       	call   10002bb0 <firstRun(bool)+0x237>	10002bb0: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002bb4:	83 c4 10             	add    esp,0x10
10002bb7:	a1 00 00 00 00       	mov    eax,ds:0x0	10002bb8: R_386_32	term
10002bbc:	83 7d f0 01          	cmp    DWORD PTR [ebp-0x10],0x1
10002bc0:	75 07                	jne    10002bc9 <firstRun(bool)+0x250>
10002bc2:	ba c6 52 00 10       	mov    edx,0x100052c6	10002bc3: R_386_32	.text
10002bc7:	eb 05                	jmp    10002bce <firstRun(bool)+0x255>
10002bc9:	ba ca 52 00 10       	mov    edx,0x100052ca	10002bca: R_386_32	.text
10002bce:	6a 0f                	push   0xf
10002bd0:	6a 00                	push   0x0
10002bd2:	52                   	push   edx
10002bd3:	50                   	push   eax
10002bd4:	e8 fc ff ff ff       	call   10002bd5 <firstRun(bool)+0x25c>	10002bd5: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002bd9:	83 c4 10             	add    esp,0x10
10002bdc:	a1 00 00 00 00       	mov    eax,ds:0x0	10002bdd: R_386_32	term
10002be1:	83 ec 08             	sub    esp,0x8
10002be4:	6a 21                	push   0x21
10002be6:	50                   	push   eax
10002be7:	e8 fc ff ff ff       	call   10002be8 <firstRun(bool)+0x26f>	10002be8: R_386_PC32	VgaText::setCursorX(int)
10002bec:	83 c4 10             	add    esp,0x10
10002bef:	a1 00 00 00 00       	mov    eax,ds:0x0	10002bf0: R_386_32	term
10002bf4:	6a 07                	push   0x7
10002bf6:	6a 00                	push   0x0
10002bf8:	68 00 00 00 00       	push   0x0	10002bf9: R_386_32	currComp
10002bfd:	50                   	push   eax
10002bfe:	e8 fc ff ff ff       	call   10002bff <firstRun(bool)+0x286>	10002bff: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002c03:	83 c4 10             	add    esp,0x10
10002c06:	a1 00 00 00 00       	mov    eax,ds:0x0	10002c07: R_386_32	term
10002c0b:	83 ec 04             	sub    esp,0x4
10002c0e:	6a 0d                	push   0xd
10002c10:	6a 18                	push   0x18
10002c12:	50                   	push   eax
10002c13:	e8 fc ff ff ff       	call   10002c14 <firstRun(bool)+0x29b>	10002c14: R_386_PC32	VgaText::setCursor(int, int)
10002c18:	83 c4 10             	add    esp,0x10
10002c1b:	a1 00 00 00 00       	mov    eax,ds:0x0	10002c1c: R_386_32	term
10002c20:	83 7d f0 02          	cmp    DWORD PTR [ebp-0x10],0x2
10002c24:	75 07                	jne    10002c2d <firstRun(bool)+0x2b4>
10002c26:	ba ce 52 00 10       	mov    edx,0x100052ce	10002c27: R_386_32	.text
10002c2b:	eb 05                	jmp    10002c32 <firstRun(bool)+0x2b9>
10002c2d:	ba da 52 00 10       	mov    edx,0x100052da	10002c2e: R_386_32	.text
10002c32:	6a 0f                	push   0xf
10002c34:	6a 08                	push   0x8
10002c36:	52                   	push   edx
10002c37:	50                   	push   eax
10002c38:	e8 fc ff ff ff       	call   10002c39 <firstRun(bool)+0x2c0>	10002c39: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002c3d:	83 c4 10             	add    esp,0x10
10002c40:	a1 00 00 00 00       	mov    eax,ds:0x0	10002c41: R_386_32	term
10002c45:	83 ec 04             	sub    esp,0x4
10002c48:	6a 0e                	push   0xe
10002c4a:	6a 18                	push   0x18
10002c4c:	50                   	push   eax
10002c4d:	e8 fc ff ff ff       	call   10002c4e <firstRun(bool)+0x2d5>	10002c4e: R_386_PC32	VgaText::setCursor(int, int)
10002c52:	83 c4 10             	add    esp,0x10
10002c55:	a1 00 00 00 00       	mov    eax,ds:0x0	10002c56: R_386_32	term
10002c5a:	83 7d f0 02          	cmp    DWORD PTR [ebp-0x10],0x2
10002c5e:	75 07                	jne    10002c67 <firstRun(bool)+0x2ee>
10002c60:	ba e6 52 00 10       	mov    edx,0x100052e6	10002c61: R_386_32	.text
10002c65:	eb 05                	jmp    10002c6c <firstRun(bool)+0x2f3>
10002c67:	ba da 52 00 10       	mov    edx,0x100052da	10002c68: R_386_32	.text
10002c6c:	6a 0f                	push   0xf
10002c6e:	6a 08                	push   0x8
10002c70:	52                   	push   edx
10002c71:	50                   	push   eax
10002c72:	e8 fc ff ff ff       	call   10002c73 <firstRun(bool)+0x2fa>	10002c73: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002c77:	83 c4 10             	add    esp,0x10
10002c7a:	a1 00 00 00 00       	mov    eax,ds:0x0	10002c7b: R_386_32	term
10002c7f:	83 ec 04             	sub    esp,0x4
10002c82:	6a 0d                	push   0xd
10002c84:	6a 32                	push   0x32
10002c86:	50                   	push   eax
10002c87:	e8 fc ff ff ff       	call   10002c88 <firstRun(bool)+0x30f>	10002c88: R_386_PC32	VgaText::setCursor(int, int)
10002c8c:	83 c4 10             	add    esp,0x10
10002c8f:	83 7d f0 02          	cmp    DWORD PTR [ebp-0x10],0x2
10002c93:	74 19                	je     10002cae <firstRun(bool)+0x335>
10002c95:	a1 00 00 00 00       	mov    eax,ds:0x0	10002c96: R_386_32	term
10002c9a:	6a 08                	push   0x8
10002c9c:	6a 0f                	push   0xf
10002c9e:	68 f0 52 00 10       	push   0x100052f0	10002c9f: R_386_32	.text
10002ca3:	50                   	push   eax
10002ca4:	e8 fc ff ff ff       	call   10002ca5 <firstRun(bool)+0x32c>	10002ca5: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002ca9:	83 c4 10             	add    esp,0x10
10002cac:	eb 17                	jmp    10002cc5 <firstRun(bool)+0x34c>
10002cae:	a1 00 00 00 00       	mov    eax,ds:0x0	10002caf: R_386_32	term
10002cb3:	6a 01                	push   0x1
10002cb5:	6a 0f                	push   0xf
10002cb7:	68 f0 52 00 10       	push   0x100052f0	10002cb8: R_386_32	.text
10002cbc:	50                   	push   eax
10002cbd:	e8 fc ff ff ff       	call   10002cbe <firstRun(bool)+0x345>	10002cbe: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002cc2:	83 c4 10             	add    esp,0x10
10002cc5:	a1 00 00 00 00       	mov    eax,ds:0x0	10002cc6: R_386_32	term
10002cca:	83 7d f0 02          	cmp    DWORD PTR [ebp-0x10],0x2
10002cce:	75 07                	jne    10002cd7 <firstRun(bool)+0x35e>
10002cd0:	ba c6 52 00 10       	mov    edx,0x100052c6	10002cd1: R_386_32	.text
10002cd5:	eb 05                	jmp    10002cdc <firstRun(bool)+0x363>
10002cd7:	ba ca 52 00 10       	mov    edx,0x100052ca	10002cd8: R_386_32	.text
10002cdc:	6a 0f                	push   0xf
10002cde:	6a 00                	push   0x0
10002ce0:	52                   	push   edx
10002ce1:	50                   	push   eax
10002ce2:	e8 fc ff ff ff       	call   10002ce3 <firstRun(bool)+0x36a>	10002ce3: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002ce7:	83 c4 10             	add    esp,0x10
10002cea:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
10002cee:	75 28                	jne    10002d18 <firstRun(bool)+0x39f>
10002cf0:	8b 1d 00 00 00 00    	mov    ebx,DWORD PTR ds:0x0	10002cf2: R_386_32	term
10002cf6:	83 ec 0c             	sub    esp,0xc
10002cf9:	68 00 00 00 00       	push   0x0	10002cfa: R_386_32	currName
10002cfe:	e8 fc ff ff ff       	call   10002cff <firstRun(bool)+0x386>	10002cff: R_386_PC32	strlen
10002d03:	83 c4 10             	add    esp,0x10
10002d06:	83 c0 21             	add    eax,0x21
10002d09:	83 ec 04             	sub    esp,0x4
10002d0c:	6a 09                	push   0x9
10002d0e:	50                   	push   eax
10002d0f:	53                   	push   ebx
10002d10:	e8 fc ff ff ff       	call   10002d11 <firstRun(bool)+0x398>	10002d11: R_386_PC32	VgaText::setCursor(int, int)
10002d15:	83 c4 10             	add    esp,0x10
10002d18:	83 7d f0 01          	cmp    DWORD PTR [ebp-0x10],0x1
10002d1c:	75 28                	jne    10002d46 <firstRun(bool)+0x3cd>
10002d1e:	8b 1d 00 00 00 00    	mov    ebx,DWORD PTR ds:0x0	10002d20: R_386_32	term
10002d24:	83 ec 0c             	sub    esp,0xc
10002d27:	68 00 00 00 00       	push   0x0	10002d28: R_386_32	currComp
10002d2c:	e8 fc ff ff ff       	call   10002d2d <firstRun(bool)+0x3b4>	10002d2d: R_386_PC32	strlen
10002d31:	83 c4 10             	add    esp,0x10
10002d34:	83 c0 21             	add    eax,0x21
10002d37:	83 ec 04             	sub    esp,0x4
10002d3a:	6a 0b                	push   0xb
10002d3c:	50                   	push   eax
10002d3d:	53                   	push   ebx
10002d3e:	e8 fc ff ff ff       	call   10002d3f <firstRun(bool)+0x3c6>	10002d3f: R_386_PC32	VgaText::setCursor(int, int)
10002d43:	83 c4 10             	add    esp,0x10
10002d46:	83 7d f0 02          	cmp    DWORD PTR [ebp-0x10],0x2
10002d4a:	75 15                	jne    10002d61 <firstRun(bool)+0x3e8>
10002d4c:	a1 00 00 00 00       	mov    eax,ds:0x0	10002d4d: R_386_32	term
10002d51:	83 ec 04             	sub    esp,0x4
10002d54:	6a 02                	push   0x2
10002d56:	6a 00                	push   0x0
10002d58:	50                   	push   eax
10002d59:	e8 fc ff ff ff       	call   10002d5a <firstRun(bool)+0x3e1>	10002d5a: R_386_PC32	VgaText::setCursor(int, int)
10002d5e:	83 c4 10             	add    esp,0x10
10002d61:	a0 00 00 00 00       	mov    al,ds:0x0	10002d62: R_386_32	installKey
10002d66:	84 c0                	test   al,al
10002d68:	0f 94 c0             	sete   al
10002d6b:	84 c0                	test   al,al
10002d6d:	74 02                	je     10002d71 <firstRun(bool)+0x3f8>
10002d6f:	eb f0                	jmp    10002d61 <firstRun(bool)+0x3e8>
10002d71:	a1 00 00 00 00       	mov    eax,ds:0x0	10002d72: R_386_32	term
10002d76:	05 82 00 00 00       	add    eax,0x82
10002d7b:	83 ec 04             	sub    esp,0x4
10002d7e:	6a 10                	push   0x10
10002d80:	6a 00                	push   0x0
10002d82:	50                   	push   eax
10002d83:	e8 fc ff ff ff       	call   10002d84 <firstRun(bool)+0x40b>	10002d84: R_386_PC32	memset
10002d88:	83 c4 10             	add    esp,0x10
10002d8b:	a1 00 00 00 00       	mov    eax,ds:0x0	10002d8c: R_386_32	term
10002d90:	05 02 01 00 00       	add    eax,0x102
10002d95:	83 ec 04             	sub    esp,0x4
10002d98:	6a 10                	push   0x10
10002d9a:	6a 00                	push   0x0
10002d9c:	50                   	push   eax
10002d9d:	e8 fc ff ff ff       	call   10002d9e <firstRun(bool)+0x425>	10002d9e: R_386_PC32	memset
10002da2:	83 c4 10             	add    esp,0x10
10002da5:	a0 00 00 00 00       	mov    al,ds:0x0	10002da6: R_386_32	installKey
10002daa:	3c 09                	cmp    al,0x9
10002dac:	74 09                	je     10002db7 <firstRun(bool)+0x43e>
10002dae:	a0 00 00 00 00       	mov    al,ds:0x0	10002daf: R_386_32	installKey
10002db3:	3c 0a                	cmp    al,0xa
10002db5:	75 04                	jne    10002dbb <firstRun(bool)+0x442>
10002db7:	b0 01                	mov    al,0x1
10002db9:	eb 02                	jmp    10002dbd <firstRun(bool)+0x444>
10002dbb:	b0 00                	mov    al,0x0
10002dbd:	84 c0                	test   al,al
10002dbf:	0f 84 f0 03 00 00    	je     100031b5 <firstRun(bool)+0x83c>
10002dc5:	83 7d f0 02          	cmp    DWORD PTR [ebp-0x10],0x2
10002dc9:	75 0d                	jne    10002dd8 <firstRun(bool)+0x45f>
10002dcb:	a0 00 00 00 00       	mov    al,ds:0x0	10002dcc: R_386_32	installKey
10002dd0:	3c 0a                	cmp    al,0xa
10002dd2:	75 04                	jne    10002dd8 <firstRun(bool)+0x45f>
10002dd4:	b0 01                	mov    al,0x1
10002dd6:	eb 02                	jmp    10002dda <firstRun(bool)+0x461>
10002dd8:	b0 00                	mov    al,0x0
10002dda:	84 c0                	test   al,al
10002ddc:	0f 84 ae 03 00 00    	je     10003190 <firstRun(bool)+0x817>
10002de2:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10002de4: R_386_32	installKey
10002de9:	90                   	nop
10002dea:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10002dec: R_386_32	installKey
10002df1:	83 ec 0c             	sub    esp,0xc
10002df4:	68 a0 0f 00 00       	push   0xfa0
10002df9:	e8 fc ff ff ff       	call   10002dfa <firstRun(bool)+0x481>	10002dfa: R_386_PC32	milliTenthSleep(unsigned int)
10002dfe:	83 c4 10             	add    esp,0x10
10002e01:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10002e03: R_386_32	installKey
10002e08:	e8 fc ff ff ff       	call   10002e09 <firstRun(bool)+0x490>	10002e09: R_386_PC32	drawBootScreen()
10002e0d:	83 ec 0c             	sub    esp,0xc
10002e10:	68 f9 52 00 10       	push   0x100052f9	10002e11: R_386_32	.text
10002e15:	6a 0d                	push   0xd
10002e17:	6a 32                	push   0x32
10002e19:	6a 02                	push   0x2
10002e1b:	6a 16                	push   0x16
10002e1d:	e8 fc ff ff ff       	call   10002e1e <firstRun(bool)+0x4a5>	10002e1e: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
10002e22:	83 c4 20             	add    esp,0x20
10002e25:	a1 00 00 00 00       	mov    eax,ds:0x0	10002e26: R_386_32	Krnl::computer
10002e2a:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
10002e30:	a1 00 00 00 00       	mov    eax,ds:0x0	10002e31: R_386_32	Krnl::computer
10002e35:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
10002e3b:	8b 00                	mov    eax,DWORD PTR [eax]
10002e3d:	83 c0 28             	add    eax,0x28
10002e40:	8b 00                	mov    eax,DWORD PTR [eax]
10002e42:	8d 55 98             	lea    edx,[ebp-0x68]
10002e45:	83 ec 08             	sub    esp,0x8
10002e48:	51                   	push   ecx
10002e49:	52                   	push   edx
10002e4a:	ff d0                	call   eax
10002e4c:	83 c4 0c             	add    esp,0xc
10002e4f:	83 ec 08             	sub    esp,0x8
10002e52:	68 07 53 00 10       	push   0x10005307	10002e53: R_386_32	.text
10002e57:	8d 85 46 ff ff ff    	lea    eax,[ebp-0xba]
10002e5d:	50                   	push   eax
10002e5e:	e8 fc ff ff ff       	call   10002e5f <firstRun(bool)+0x4e6>	10002e5f: R_386_PC32	strcpy
10002e63:	83 c4 10             	add    esp,0x10
10002e66:	8a 45 98             	mov    al,BYTE PTR [ebp-0x68]
10002e69:	0f b6 d0             	movzx  edx,al
10002e6c:	89 d0                	mov    eax,edx
10002e6e:	c1 e0 02             	shl    eax,0x2
10002e71:	01 d0                	add    eax,edx
10002e73:	c1 e0 03             	shl    eax,0x3
10002e76:	01 d0                	add    eax,edx
10002e78:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10002e7f:	01 d0                	add    eax,edx
10002e81:	66 c1 e8 08          	shr    ax,0x8
10002e85:	c0 e8 03             	shr    al,0x3
10002e88:	83 c0 30             	add    eax,0x30
10002e8b:	88 85 46 ff ff ff    	mov    BYTE PTR [ebp-0xba],al
10002e91:	8a 4d 98             	mov    cl,BYTE PTR [ebp-0x68]
10002e94:	0f b6 d1             	movzx  edx,cl
10002e97:	89 d0                	mov    eax,edx
10002e99:	c1 e0 02             	shl    eax,0x2
10002e9c:	01 d0                	add    eax,edx
10002e9e:	c1 e0 03             	shl    eax,0x3
10002ea1:	01 d0                	add    eax,edx
10002ea3:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10002eaa:	01 d0                	add    eax,edx
10002eac:	66 c1 e8 08          	shr    ax,0x8
10002eb0:	88 c2                	mov    dl,al
10002eb2:	c0 ea 03             	shr    dl,0x3
10002eb5:	88 d0                	mov    al,dl
10002eb7:	c1 e0 02             	shl    eax,0x2
10002eba:	01 d0                	add    eax,edx
10002ebc:	d1 e0                	shl    eax,1
10002ebe:	29 c1                	sub    ecx,eax
10002ec0:	88 ca                	mov    dl,cl
10002ec2:	8d 42 30             	lea    eax,[edx+0x30]
10002ec5:	88 85 47 ff ff ff    	mov    BYTE PTR [ebp-0xb9],al
10002ecb:	8a 45 99             	mov    al,BYTE PTR [ebp-0x67]
10002ece:	0f b6 c8             	movzx  ecx,al
10002ed1:	b8 67 66 66 66       	mov    eax,0x66666667
10002ed6:	f7 e9                	imul   ecx
10002ed8:	c1 fa 02             	sar    edx,0x2
10002edb:	89 c8                	mov    eax,ecx
10002edd:	c1 f8 1f             	sar    eax,0x1f
10002ee0:	29 c2                	sub    edx,eax
10002ee2:	89 d0                	mov    eax,edx
10002ee4:	83 c0 30             	add    eax,0x30
10002ee7:	88 85 49 ff ff ff    	mov    BYTE PTR [ebp-0xb7],al
10002eed:	8a 45 99             	mov    al,BYTE PTR [ebp-0x67]
10002ef0:	0f b6 c8             	movzx  ecx,al
10002ef3:	b8 67 66 66 66       	mov    eax,0x66666667
10002ef8:	f7 e9                	imul   ecx
10002efa:	c1 fa 02             	sar    edx,0x2
10002efd:	89 c8                	mov    eax,ecx
10002eff:	c1 f8 1f             	sar    eax,0x1f
10002f02:	29 c2                	sub    edx,eax
10002f04:	89 d0                	mov    eax,edx
10002f06:	c1 e0 02             	shl    eax,0x2
10002f09:	01 d0                	add    eax,edx
10002f0b:	01 c0                	add    eax,eax
10002f0d:	29 c1                	sub    ecx,eax
10002f0f:	89 ca                	mov    edx,ecx
10002f11:	88 d0                	mov    al,dl
10002f13:	83 c0 30             	add    eax,0x30
10002f16:	88 85 4a ff ff ff    	mov    BYTE PTR [ebp-0xb6],al
10002f1c:	66 8b 45 9a          	mov    ax,WORD PTR [ebp-0x66]
10002f20:	0f b7 c8             	movzx  ecx,ax
10002f23:	b8 d3 4d 62 10       	mov    eax,0x10624dd3
10002f28:	f7 e9                	imul   ecx
10002f2a:	c1 fa 06             	sar    edx,0x6
10002f2d:	89 c8                	mov    eax,ecx
10002f2f:	c1 f8 1f             	sar    eax,0x1f
10002f32:	29 c2                	sub    edx,eax
10002f34:	89 d0                	mov    eax,edx
10002f36:	b9 0a 00 00 00       	mov    ecx,0xa
10002f3b:	99                   	cdq    
10002f3c:	f7 f9                	idiv   ecx
10002f3e:	89 d0                	mov    eax,edx
10002f40:	83 c0 30             	add    eax,0x30
10002f43:	88 85 4c ff ff ff    	mov    BYTE PTR [ebp-0xb4],al
10002f49:	66 8b 45 9a          	mov    ax,WORD PTR [ebp-0x66]
10002f4d:	0f b7 c8             	movzx  ecx,ax
10002f50:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
10002f55:	f7 e9                	imul   ecx
10002f57:	c1 fa 05             	sar    edx,0x5
10002f5a:	89 c8                	mov    eax,ecx
10002f5c:	c1 f8 1f             	sar    eax,0x1f
10002f5f:	29 c2                	sub    edx,eax
10002f61:	89 d0                	mov    eax,edx
10002f63:	b9 0a 00 00 00       	mov    ecx,0xa
10002f68:	99                   	cdq    
10002f69:	f7 f9                	idiv   ecx
10002f6b:	89 d0                	mov    eax,edx
10002f6d:	83 c0 30             	add    eax,0x30
10002f70:	88 85 4d ff ff ff    	mov    BYTE PTR [ebp-0xb3],al
10002f76:	66 8b 45 9a          	mov    ax,WORD PTR [ebp-0x66]
10002f7a:	0f b7 c8             	movzx  ecx,ax
10002f7d:	b8 67 66 66 66       	mov    eax,0x66666667
10002f82:	f7 e9                	imul   ecx
10002f84:	c1 fa 02             	sar    edx,0x2
10002f87:	89 c8                	mov    eax,ecx
10002f89:	c1 f8 1f             	sar    eax,0x1f
10002f8c:	89 d1                	mov    ecx,edx
10002f8e:	29 c1                	sub    ecx,eax
10002f90:	b8 67 66 66 66       	mov    eax,0x66666667
10002f95:	f7 e9                	imul   ecx
10002f97:	c1 fa 02             	sar    edx,0x2
10002f9a:	89 c8                	mov    eax,ecx
10002f9c:	c1 f8 1f             	sar    eax,0x1f
10002f9f:	29 c2                	sub    edx,eax
10002fa1:	89 d0                	mov    eax,edx
10002fa3:	c1 e0 02             	shl    eax,0x2
10002fa6:	01 d0                	add    eax,edx
10002fa8:	01 c0                	add    eax,eax
10002faa:	29 c1                	sub    ecx,eax
10002fac:	89 ca                	mov    edx,ecx
10002fae:	88 d0                	mov    al,dl
10002fb0:	83 c0 30             	add    eax,0x30
10002fb3:	88 85 4e ff ff ff    	mov    BYTE PTR [ebp-0xb2],al
10002fb9:	66 8b 45 9a          	mov    ax,WORD PTR [ebp-0x66]
10002fbd:	0f b7 c0             	movzx  eax,ax
10002fc0:	b9 0a 00 00 00       	mov    ecx,0xa
10002fc5:	99                   	cdq    
10002fc6:	f7 f9                	idiv   ecx
10002fc8:	89 d0                	mov    eax,edx
10002fca:	83 c0 30             	add    eax,0x30
10002fcd:	88 85 4f ff ff ff    	mov    BYTE PTR [ebp-0xb1],al
10002fd3:	8a 45 9c             	mov    al,BYTE PTR [ebp-0x64]
10002fd6:	0f b6 d0             	movzx  edx,al
10002fd9:	89 d0                	mov    eax,edx
10002fdb:	c1 e0 02             	shl    eax,0x2
10002fde:	01 d0                	add    eax,edx
10002fe0:	c1 e0 03             	shl    eax,0x3
10002fe3:	01 d0                	add    eax,edx
10002fe5:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10002fec:	01 d0                	add    eax,edx
10002fee:	66 c1 e8 08          	shr    ax,0x8
10002ff2:	c0 e8 03             	shr    al,0x3
10002ff5:	83 c0 30             	add    eax,0x30
10002ff8:	88 85 51 ff ff ff    	mov    BYTE PTR [ebp-0xaf],al
10002ffe:	8a 4d 9c             	mov    cl,BYTE PTR [ebp-0x64]
10003001:	0f b6 d1             	movzx  edx,cl
10003004:	89 d0                	mov    eax,edx
10003006:	c1 e0 02             	shl    eax,0x2
10003009:	01 d0                	add    eax,edx
1000300b:	c1 e0 03             	shl    eax,0x3
1000300e:	01 d0                	add    eax,edx
10003010:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10003017:	01 d0                	add    eax,edx
10003019:	66 c1 e8 08          	shr    ax,0x8
1000301d:	88 c2                	mov    dl,al
1000301f:	c0 ea 03             	shr    dl,0x3
10003022:	88 d0                	mov    al,dl
10003024:	c1 e0 02             	shl    eax,0x2
10003027:	01 d0                	add    eax,edx
10003029:	d1 e0                	shl    eax,1
1000302b:	29 c1                	sub    ecx,eax
1000302d:	88 ca                	mov    dl,cl
1000302f:	8d 42 30             	lea    eax,[edx+0x30]
10003032:	88 85 52 ff ff ff    	mov    BYTE PTR [ebp-0xae],al
10003038:	8a 45 9d             	mov    al,BYTE PTR [ebp-0x63]
1000303b:	0f b6 d0             	movzx  edx,al
1000303e:	89 d0                	mov    eax,edx
10003040:	c1 e0 02             	shl    eax,0x2
10003043:	01 d0                	add    eax,edx
10003045:	c1 e0 03             	shl    eax,0x3
10003048:	01 d0                	add    eax,edx
1000304a:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10003051:	01 d0                	add    eax,edx
10003053:	66 c1 e8 08          	shr    ax,0x8
10003057:	c0 e8 03             	shr    al,0x3
1000305a:	83 c0 30             	add    eax,0x30
1000305d:	88 85 54 ff ff ff    	mov    BYTE PTR [ebp-0xac],al
10003063:	8a 4d 9d             	mov    cl,BYTE PTR [ebp-0x63]
10003066:	0f b6 d1             	movzx  edx,cl
10003069:	89 d0                	mov    eax,edx
1000306b:	c1 e0 02             	shl    eax,0x2
1000306e:	01 d0                	add    eax,edx
10003070:	c1 e0 03             	shl    eax,0x3
10003073:	01 d0                	add    eax,edx
10003075:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
1000307c:	01 d0                	add    eax,edx
1000307e:	66 c1 e8 08          	shr    ax,0x8
10003082:	88 c2                	mov    dl,al
10003084:	c0 ea 03             	shr    dl,0x3
10003087:	88 d0                	mov    al,dl
10003089:	c1 e0 02             	shl    eax,0x2
1000308c:	01 d0                	add    eax,edx
1000308e:	d1 e0                	shl    eax,1
10003090:	29 c1                	sub    ecx,eax
10003092:	88 ca                	mov    dl,cl
10003094:	8d 42 30             	lea    eax,[edx+0x30]
10003097:	88 85 55 ff ff ff    	mov    BYTE PTR [ebp-0xab],al
1000309d:	8a 45 9e             	mov    al,BYTE PTR [ebp-0x62]
100030a0:	0f b6 d0             	movzx  edx,al
100030a3:	89 d0                	mov    eax,edx
100030a5:	c1 e0 02             	shl    eax,0x2
100030a8:	01 d0                	add    eax,edx
100030aa:	c1 e0 03             	shl    eax,0x3
100030ad:	01 d0                	add    eax,edx
100030af:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
100030b6:	01 d0                	add    eax,edx
100030b8:	66 c1 e8 08          	shr    ax,0x8
100030bc:	c0 e8 03             	shr    al,0x3
100030bf:	83 c0 30             	add    eax,0x30
100030c2:	88 85 57 ff ff ff    	mov    BYTE PTR [ebp-0xa9],al
100030c8:	8a 4d 9e             	mov    cl,BYTE PTR [ebp-0x62]
100030cb:	0f b6 d1             	movzx  edx,cl
100030ce:	89 d0                	mov    eax,edx
100030d0:	c1 e0 02             	shl    eax,0x2
100030d3:	01 d0                	add    eax,edx
100030d5:	c1 e0 03             	shl    eax,0x3
100030d8:	01 d0                	add    eax,edx
100030da:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
100030e1:	01 d0                	add    eax,edx
100030e3:	66 c1 e8 08          	shr    ax,0x8
100030e7:	88 c2                	mov    dl,al
100030e9:	c0 ea 03             	shr    dl,0x3
100030ec:	88 d0                	mov    al,dl
100030ee:	c1 e0 02             	shl    eax,0x2
100030f1:	01 d0                	add    eax,edx
100030f3:	d1 e0                	shl    eax,1
100030f5:	29 c1                	sub    ecx,eax
100030f7:	88 ca                	mov    dl,cl
100030f9:	8d 42 30             	lea    eax,[edx+0x30]
100030fc:	88 85 58 ff ff ff    	mov    BYTE PTR [ebp-0xa8],al
10003102:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
10003109:	a1 00 00 00 00       	mov    eax,ds:0x0	1000310a: R_386_32	term
1000310e:	83 ec 04             	sub    esp,0x4
10003111:	6a 05                	push   0x5
10003113:	6a 18                	push   0x18
10003115:	50                   	push   eax
10003116:	e8 fc ff ff ff       	call   10003117 <firstRun(bool)+0x79e>	10003117: R_386_PC32	VgaText::setCursor(int, int)
1000311b:	83 c4 10             	add    esp,0x10
1000311e:	a1 00 00 00 00       	mov    eax,ds:0x0	1000311f: R_386_32	term
10003123:	83 ec 08             	sub    esp,0x8
10003126:	68 1c 53 00 10       	push   0x1000531c	10003127: R_386_32	.text
1000312b:	50                   	push   eax
1000312c:	e8 fc ff ff ff       	call   1000312d <firstRun(bool)+0x7b4>	1000312d: R_386_PC32	VgaText::puts(char const*)
10003131:	83 c4 10             	add    esp,0x10
10003134:	a1 00 00 00 00       	mov    eax,ds:0x0	10003135: R_386_32	term
10003139:	83 ec 04             	sub    esp,0x4
1000313c:	6a 06                	push   0x6
1000313e:	6a 18                	push   0x18
10003140:	50                   	push   eax
10003141:	e8 fc ff ff ff       	call   10003142 <firstRun(bool)+0x7c9>	10003142: R_386_PC32	VgaText::setCursor(int, int)
10003146:	83 c4 10             	add    esp,0x10
10003149:	a1 00 00 00 00       	mov    eax,ds:0x0	1000314a: R_386_32	term
1000314e:	83 ec 08             	sub    esp,0x8
10003151:	68 44 53 00 10       	push   0x10005344	10003152: R_386_32	.text
10003156:	50                   	push   eax
10003157:	e8 fc ff ff ff       	call   10003158 <firstRun(bool)+0x7df>	10003158: R_386_PC32	VgaText::puts(char const*)
1000315c:	83 c4 10             	add    esp,0x10
1000315f:	a1 00 00 00 00       	mov    eax,ds:0x0	10003160: R_386_32	term
10003164:	83 ec 04             	sub    esp,0x4
10003167:	6a 09                	push   0x9
10003169:	6a 1a                	push   0x1a
1000316b:	50                   	push   eax
1000316c:	e8 fc ff ff ff       	call   1000316d <firstRun(bool)+0x7f4>	1000316d: R_386_PC32	VgaText::setCursor(int, int)
10003171:	83 c4 10             	add    esp,0x10
10003174:	a1 00 00 00 00       	mov    eax,ds:0x0	10003175: R_386_32	term
10003179:	6a 0f                	push   0xf
1000317b:	6a 07                	push   0x7
1000317d:	68 5a 53 00 10       	push   0x1000535a	1000317e: R_386_32	.text
10003182:	50                   	push   eax
10003183:	e8 fc ff ff ff       	call   10003184 <firstRun(bool)+0x80b>	10003184: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10003188:	83 c4 10             	add    esp,0x10
1000318b:	e9 66 01 00 00       	jmp    100032f6 <firstRun(bool)+0x97d>
10003190:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
10003193:	83 7d f0 03          	cmp    DWORD PTR [ebp-0x10],0x3
10003197:	75 07                	jne    100031a0 <firstRun(bool)+0x827>
10003199:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
100031a0:	83 ec 0c             	sub    esp,0xc
100031a3:	68 2c 01 00 00       	push   0x12c
100031a8:	e8 fc ff ff ff       	call   100031a9 <firstRun(bool)+0x830>	100031a9: R_386_PC32	milliTenthSleep(unsigned int)
100031ad:	83 c4 10             	add    esp,0x10
100031b0:	e9 35 01 00 00       	jmp    100032ea <firstRun(bool)+0x971>
100031b5:	a0 00 00 00 00       	mov    al,ds:0x0	100031b6: R_386_32	installKey
100031ba:	3c 1f                	cmp    al,0x1f
100031bc:	7e 0d                	jle    100031cb <firstRun(bool)+0x852>
100031be:	a0 00 00 00 00       	mov    al,ds:0x0	100031bf: R_386_32	installKey
100031c3:	3c 7f                	cmp    al,0x7f
100031c5:	74 04                	je     100031cb <firstRun(bool)+0x852>
100031c7:	b0 01                	mov    al,0x1
100031c9:	eb 02                	jmp    100031cd <firstRun(bool)+0x854>
100031cb:	b0 00                	mov    al,0x0
100031cd:	84 c0                	test   al,al
100031cf:	74 77                	je     10003248 <firstRun(bool)+0x8cf>
100031d1:	a0 00 00 00 00       	mov    al,ds:0x0	100031d2: R_386_32	installKey
100031d6:	88 45 96             	mov    BYTE PTR [ebp-0x6a],al
100031d9:	c6 45 97 00          	mov    BYTE PTR [ebp-0x69],0x0
100031dd:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
100031e1:	75 29                	jne    1000320c <firstRun(bool)+0x893>
100031e3:	83 ec 0c             	sub    esp,0xc
100031e6:	68 00 00 00 00       	push   0x0	100031e7: R_386_32	currName
100031eb:	e8 fc ff ff ff       	call   100031ec <firstRun(bool)+0x873>	100031ec: R_386_PC32	strlen
100031f0:	83 c4 10             	add    esp,0x10
100031f3:	83 f8 17             	cmp    eax,0x17
100031f6:	77 14                	ja     1000320c <firstRun(bool)+0x893>
100031f8:	83 ec 08             	sub    esp,0x8
100031fb:	8d 45 96             	lea    eax,[ebp-0x6a]
100031fe:	50                   	push   eax
100031ff:	68 00 00 00 00       	push   0x0	10003200: R_386_32	currName
10003204:	e8 fc ff ff ff       	call   10003205 <firstRun(bool)+0x88c>	10003205: R_386_PC32	strcat
10003209:	83 c4 10             	add    esp,0x10
1000320c:	83 7d f0 01          	cmp    DWORD PTR [ebp-0x10],0x1
10003210:	0f 85 d4 00 00 00    	jne    100032ea <firstRun(bool)+0x971>
10003216:	83 ec 0c             	sub    esp,0xc
10003219:	68 00 00 00 00       	push   0x0	1000321a: R_386_32	currComp
1000321e:	e8 fc ff ff ff       	call   1000321f <firstRun(bool)+0x8a6>	1000321f: R_386_PC32	strlen
10003223:	83 c4 10             	add    esp,0x10
10003226:	83 f8 17             	cmp    eax,0x17
10003229:	0f 87 bb 00 00 00    	ja     100032ea <firstRun(bool)+0x971>
1000322f:	83 ec 08             	sub    esp,0x8
10003232:	8d 45 96             	lea    eax,[ebp-0x6a]
10003235:	50                   	push   eax
10003236:	68 00 00 00 00       	push   0x0	10003237: R_386_32	currComp
1000323b:	e8 fc ff ff ff       	call   1000323c <firstRun(bool)+0x8c3>	1000323c: R_386_PC32	strcat
10003240:	83 c4 10             	add    esp,0x10
10003243:	e9 a2 00 00 00       	jmp    100032ea <firstRun(bool)+0x971>
10003248:	a0 00 00 00 00       	mov    al,ds:0x0	10003249: R_386_32	installKey
1000324d:	3c 08                	cmp    al,0x8
1000324f:	0f 94 c0             	sete   al
10003252:	84 c0                	test   al,al
10003254:	74 66                	je     100032bc <firstRun(bool)+0x943>
10003256:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
1000325a:	75 2c                	jne    10003288 <firstRun(bool)+0x90f>
1000325c:	83 ec 0c             	sub    esp,0xc
1000325f:	68 00 00 00 00       	push   0x0	10003260: R_386_32	currName
10003264:	e8 fc ff ff ff       	call   10003265 <firstRun(bool)+0x8ec>	10003265: R_386_PC32	strlen
10003269:	83 c4 10             	add    esp,0x10
1000326c:	85 c0                	test   eax,eax
1000326e:	74 18                	je     10003288 <firstRun(bool)+0x90f>
10003270:	83 ec 0c             	sub    esp,0xc
10003273:	68 00 00 00 00       	push   0x0	10003274: R_386_32	currName
10003278:	e8 fc ff ff ff       	call   10003279 <firstRun(bool)+0x900>	10003279: R_386_PC32	strlen
1000327d:	83 c4 10             	add    esp,0x10
10003280:	48                   	dec    eax
10003281:	c6 80 00 00 00 00 00 	mov    BYTE PTR [eax+0x0],0x0	10003283: R_386_32	currName
10003288:	83 7d f0 01          	cmp    DWORD PTR [ebp-0x10],0x1
1000328c:	75 5c                	jne    100032ea <firstRun(bool)+0x971>
1000328e:	83 ec 0c             	sub    esp,0xc
10003291:	68 00 00 00 00       	push   0x0	10003292: R_386_32	currComp
10003296:	e8 fc ff ff ff       	call   10003297 <firstRun(bool)+0x91e>	10003297: R_386_PC32	strlen
1000329b:	83 c4 10             	add    esp,0x10
1000329e:	85 c0                	test   eax,eax
100032a0:	74 48                	je     100032ea <firstRun(bool)+0x971>
100032a2:	83 ec 0c             	sub    esp,0xc
100032a5:	68 00 00 00 00       	push   0x0	100032a6: R_386_32	currComp
100032aa:	e8 fc ff ff ff       	call   100032ab <firstRun(bool)+0x932>	100032ab: R_386_PC32	strlen
100032af:	83 c4 10             	add    esp,0x10
100032b2:	48                   	dec    eax
100032b3:	c6 80 00 00 00 00 00 	mov    BYTE PTR [eax+0x0],0x0	100032b5: R_386_32	currComp
100032ba:	eb 2e                	jmp    100032ea <firstRun(bool)+0x971>
100032bc:	a0 00 00 00 00       	mov    al,ds:0x0	100032bd: R_386_32	installKey
100032c1:	3c 7f                	cmp    al,0x7f
100032c3:	0f 94 c0             	sete   al
100032c6:	84 c0                	test   al,al
100032c8:	74 20                	je     100032ea <firstRun(bool)+0x971>
100032ca:	ff 4d f0             	dec    DWORD PTR [ebp-0x10]
100032cd:	83 7d f0 ff          	cmp    DWORD PTR [ebp-0x10],0xffffffff
100032d1:	75 07                	jne    100032da <firstRun(bool)+0x961>
100032d3:	c7 45 f0 02 00 00 00 	mov    DWORD PTR [ebp-0x10],0x2
100032da:	83 ec 0c             	sub    esp,0xc
100032dd:	68 2c 01 00 00       	push   0x12c
100032e2:	e8 fc ff ff ff       	call   100032e3 <firstRun(bool)+0x96a>	100032e3: R_386_PC32	milliTenthSleep(unsigned int)
100032e7:	83 c4 10             	add    esp,0x10
100032ea:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100032ec: R_386_32	installKey
100032f1:	e9 1a f8 ff ff       	jmp    10002b10 <firstRun(bool)+0x197>
100032f6:	a1 00 00 00 00       	mov    eax,ds:0x0	100032f7: R_386_32	term
100032fb:	83 ec 04             	sub    esp,0x4
100032fe:	6a 08                	push   0x8
10003300:	6a 1a                	push   0x1a
10003302:	50                   	push   eax
10003303:	e8 fc ff ff ff       	call   10003304 <firstRun(bool)+0x98b>	10003304: R_386_PC32	VgaText::setCursor(int, int)
10003308:	83 c4 10             	add    esp,0x10
1000330b:	a1 00 00 00 00       	mov    eax,ds:0x0	1000330c: R_386_32	term
10003310:	83 ec 08             	sub    esp,0x8
10003313:	8d 95 46 ff ff ff    	lea    edx,[ebp-0xba]
10003319:	52                   	push   edx
1000331a:	50                   	push   eax
1000331b:	e8 fc ff ff ff       	call   1000331c <firstRun(bool)+0x9a3>	1000331c: R_386_PC32	VgaText::puts(char const*)
10003320:	83 c4 10             	add    esp,0x10
10003323:	a1 00 00 00 00       	mov    eax,ds:0x0	10003324: R_386_32	term
10003328:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
1000332b:	83 c2 1a             	add    edx,0x1a
1000332e:	83 ec 04             	sub    esp,0x4
10003331:	6a 08                	push   0x8
10003333:	52                   	push   edx
10003334:	50                   	push   eax
10003335:	e8 fc ff ff ff       	call   10003336 <firstRun(bool)+0x9bd>	10003336: R_386_PC32	VgaText::setCursor(int, int)
1000333a:	83 c4 10             	add    esp,0x10
1000333d:	a1 00 00 00 00       	mov    eax,ds:0x0	1000333e: R_386_32	term
10003342:	8d 8d 46 ff ff ff    	lea    ecx,[ebp-0xba]
10003348:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
1000334b:	01 ca                	add    edx,ecx
1000334d:	8a 12                	mov    dl,BYTE PTR [edx]
1000334f:	0f be d2             	movsx  edx,dl
10003352:	6a 00                	push   0x0
10003354:	6a 0f                	push   0xf
10003356:	52                   	push   edx
10003357:	50                   	push   eax
10003358:	e8 fc ff ff ff       	call   10003359 <firstRun(bool)+0x9e0>	10003359: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
1000335d:	83 c4 10             	add    esp,0x10
10003360:	8a 85 51 ff ff ff    	mov    al,BYTE PTR [ebp-0xaf]
10003366:	0f be c0             	movsx  eax,al
10003369:	8d 50 d0             	lea    edx,[eax-0x30]
1000336c:	89 d0                	mov    eax,edx
1000336e:	c1 e0 02             	shl    eax,0x2
10003371:	01 d0                	add    eax,edx
10003373:	01 c0                	add    eax,eax
10003375:	89 c2                	mov    edx,eax
10003377:	8a 85 52 ff ff ff    	mov    al,BYTE PTR [ebp-0xae]
1000337d:	0f be c0             	movsx  eax,al
10003380:	83 e8 30             	sub    eax,0x30
10003383:	01 d0                	add    eax,edx
10003385:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
10003388:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
1000338b:	b9 0c 00 00 00       	mov    ecx,0xc
10003390:	99                   	cdq    
10003391:	f7 f9                	idiv   ecx
10003393:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
10003396:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
1000339a:	75 07                	jne    100033a3 <firstRun(bool)+0xa2a>
1000339c:	c7 45 ec 0c 00 00 00 	mov    DWORD PTR [ebp-0x14],0xc
100033a3:	8a 85 54 ff ff ff    	mov    al,BYTE PTR [ebp-0xac]
100033a9:	0f be c0             	movsx  eax,al
100033ac:	8d 50 d0             	lea    edx,[eax-0x30]
100033af:	89 d0                	mov    eax,edx
100033b1:	c1 e0 02             	shl    eax,0x2
100033b4:	01 d0                	add    eax,edx
100033b6:	01 c0                	add    eax,eax
100033b8:	89 c2                	mov    edx,eax
100033ba:	8a 85 55 ff ff ff    	mov    al,BYTE PTR [ebp-0xab]
100033c0:	0f be c0             	movsx  eax,al
100033c3:	83 e8 30             	sub    eax,0x30
100033c6:	01 d0                	add    eax,edx
100033c8:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
100033cb:	83 ec 04             	sub    esp,0x4
100033ce:	6a 10                	push   0x10
100033d0:	6a 00                	push   0x0
100033d2:	8d 45 86             	lea    eax,[ebp-0x7a]
100033d5:	50                   	push   eax
100033d6:	e8 fc ff ff ff       	call   100033d7 <firstRun(bool)+0xa5e>	100033d7: R_386_PC32	memset
100033db:	83 c4 10             	add    esp,0x10
100033de:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
100033e5:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
100033e8:	8d 50 01             	lea    edx,[eax+0x1]
100033eb:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
100033ee:	c6 44 05 86 28       	mov    BYTE PTR [ebp+eax*1-0x7a],0x28
100033f3:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
100033f6:	b8 67 66 66 66       	mov    eax,0x66666667
100033fb:	f7 e9                	imul   ecx
100033fd:	c1 fa 02             	sar    edx,0x2
10003400:	89 c8                	mov    eax,ecx
10003402:	c1 f8 1f             	sar    eax,0x1f
10003405:	29 c2                	sub    edx,eax
10003407:	89 d0                	mov    eax,edx
10003409:	8d 48 30             	lea    ecx,[eax+0x30]
1000340c:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
1000340f:	8d 50 01             	lea    edx,[eax+0x1]
10003412:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
10003415:	88 ca                	mov    dl,cl
10003417:	88 54 05 86          	mov    BYTE PTR [ebp+eax*1-0x7a],dl
1000341b:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
1000341e:	b8 67 66 66 66       	mov    eax,0x66666667
10003423:	f7 e9                	imul   ecx
10003425:	c1 fa 02             	sar    edx,0x2
10003428:	89 c8                	mov    eax,ecx
1000342a:	c1 f8 1f             	sar    eax,0x1f
1000342d:	29 c2                	sub    edx,eax
1000342f:	89 d0                	mov    eax,edx
10003431:	c1 e0 02             	shl    eax,0x2
10003434:	01 d0                	add    eax,edx
10003436:	01 c0                	add    eax,eax
10003438:	29 c1                	sub    ecx,eax
1000343a:	89 ca                	mov    edx,ecx
1000343c:	88 d0                	mov    al,dl
1000343e:	8d 48 30             	lea    ecx,[eax+0x30]
10003441:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
10003444:	8d 50 01             	lea    edx,[eax+0x1]
10003447:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
1000344a:	88 ca                	mov    dl,cl
1000344c:	88 54 05 86          	mov    BYTE PTR [ebp+eax*1-0x7a],dl
10003450:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
10003453:	8d 50 01             	lea    edx,[eax+0x1]
10003456:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
10003459:	c6 44 05 86 3a       	mov    BYTE PTR [ebp+eax*1-0x7a],0x3a
1000345e:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
10003461:	b8 67 66 66 66       	mov    eax,0x66666667
10003466:	f7 e9                	imul   ecx
10003468:	c1 fa 02             	sar    edx,0x2
1000346b:	89 c8                	mov    eax,ecx
1000346d:	c1 f8 1f             	sar    eax,0x1f
10003470:	29 c2                	sub    edx,eax
10003472:	89 d0                	mov    eax,edx
10003474:	8d 48 30             	lea    ecx,[eax+0x30]
10003477:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
1000347a:	8d 50 01             	lea    edx,[eax+0x1]
1000347d:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
10003480:	88 ca                	mov    dl,cl
10003482:	88 54 05 86          	mov    BYTE PTR [ebp+eax*1-0x7a],dl
10003486:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
10003489:	b8 67 66 66 66       	mov    eax,0x66666667
1000348e:	f7 e9                	imul   ecx
10003490:	c1 fa 02             	sar    edx,0x2
10003493:	89 c8                	mov    eax,ecx
10003495:	c1 f8 1f             	sar    eax,0x1f
10003498:	29 c2                	sub    edx,eax
1000349a:	89 d0                	mov    eax,edx
1000349c:	c1 e0 02             	shl    eax,0x2
1000349f:	01 d0                	add    eax,edx
100034a1:	01 c0                	add    eax,eax
100034a3:	29 c1                	sub    ecx,eax
100034a5:	89 ca                	mov    edx,ecx
100034a7:	88 d0                	mov    al,dl
100034a9:	8d 48 30             	lea    ecx,[eax+0x30]
100034ac:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
100034af:	8d 50 01             	lea    edx,[eax+0x1]
100034b2:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
100034b5:	88 ca                	mov    dl,cl
100034b7:	88 54 05 86          	mov    BYTE PTR [ebp+eax*1-0x7a],dl
100034bb:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
100034be:	8d 50 01             	lea    edx,[eax+0x1]
100034c1:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
100034c4:	c6 44 05 86 20       	mov    BYTE PTR [ebp+eax*1-0x7a],0x20
100034c9:	83 7d d4 0b          	cmp    DWORD PTR [ebp-0x2c],0xb
100034cd:	7e 04                	jle    100034d3 <firstRun(bool)+0xb5a>
100034cf:	b2 50                	mov    dl,0x50
100034d1:	eb 02                	jmp    100034d5 <firstRun(bool)+0xb5c>
100034d3:	b2 41                	mov    dl,0x41
100034d5:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
100034d8:	8d 48 01             	lea    ecx,[eax+0x1]
100034db:	89 4d cc             	mov    DWORD PTR [ebp-0x34],ecx
100034de:	88 54 05 86          	mov    BYTE PTR [ebp+eax*1-0x7a],dl
100034e2:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
100034e5:	8d 50 01             	lea    edx,[eax+0x1]
100034e8:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
100034eb:	c6 44 05 86 4d       	mov    BYTE PTR [ebp+eax*1-0x7a],0x4d
100034f0:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
100034f3:	8d 50 01             	lea    edx,[eax+0x1]
100034f6:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
100034f9:	c6 44 05 86 29       	mov    BYTE PTR [ebp+eax*1-0x7a],0x29
100034fe:	8b 1d 00 00 00 00    	mov    ebx,DWORD PTR ds:0x0	10003500: R_386_32	term
10003504:	83 ec 0c             	sub    esp,0xc
10003507:	8d 85 46 ff ff ff    	lea    eax,[ebp-0xba]
1000350d:	50                   	push   eax
1000350e:	e8 fc ff ff ff       	call   1000350f <firstRun(bool)+0xb96>	1000350f: R_386_PC32	strlen
10003513:	83 c4 10             	add    esp,0x10
10003516:	83 c0 1e             	add    eax,0x1e
10003519:	83 ec 04             	sub    esp,0x4
1000351c:	6a 08                	push   0x8
1000351e:	50                   	push   eax
1000351f:	53                   	push   ebx
10003520:	e8 fc ff ff ff       	call   10003521 <firstRun(bool)+0xba8>	10003521: R_386_PC32	VgaText::setCursor(int, int)
10003525:	83 c4 10             	add    esp,0x10
10003528:	a1 00 00 00 00       	mov    eax,ds:0x0	10003529: R_386_32	term
1000352d:	83 ec 08             	sub    esp,0x8
10003530:	8d 55 86             	lea    edx,[ebp-0x7a]
10003533:	52                   	push   edx
10003534:	50                   	push   eax
10003535:	e8 fc ff ff ff       	call   10003536 <firstRun(bool)+0xbbd>	10003536: R_386_PC32	VgaText::puts(char const*)
1000353a:	83 c4 10             	add    esp,0x10
1000353d:	a1 00 00 00 00       	mov    eax,ds:0x0	1000353e: R_386_32	term
10003542:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10003545:	83 c2 1a             	add    edx,0x1a
10003548:	83 ec 04             	sub    esp,0x4
1000354b:	6a 08                	push   0x8
1000354d:	52                   	push   edx
1000354e:	50                   	push   eax
1000354f:	e8 fc ff ff ff       	call   10003550 <firstRun(bool)+0xbd7>	10003550: R_386_PC32	VgaText::setCursor(int, int)
10003554:	83 c4 10             	add    esp,0x10
10003557:	a0 00 00 00 00       	mov    al,ds:0x0	10003558: R_386_32	installKey
1000355c:	84 c0                	test   al,al
1000355e:	0f 94 c0             	sete   al
10003561:	84 c0                	test   al,al
10003563:	74 02                	je     10003567 <firstRun(bool)+0xbee>
10003565:	eb f0                	jmp    10003557 <firstRun(bool)+0xbde>
10003567:	a1 00 00 00 00       	mov    eax,ds:0x0	10003568: R_386_32	term
1000356c:	05 82 00 00 00       	add    eax,0x82
10003571:	83 ec 04             	sub    esp,0x4
10003574:	6a 10                	push   0x10
10003576:	6a 00                	push   0x0
10003578:	50                   	push   eax
10003579:	e8 fc ff ff ff       	call   1000357a <firstRun(bool)+0xc01>	1000357a: R_386_PC32	memset
1000357e:	83 c4 10             	add    esp,0x10
10003581:	a1 00 00 00 00       	mov    eax,ds:0x0	10003582: R_386_32	term
10003586:	05 02 01 00 00       	add    eax,0x102
1000358b:	83 ec 04             	sub    esp,0x4
1000358e:	6a 10                	push   0x10
10003590:	6a 00                	push   0x0
10003592:	50                   	push   eax
10003593:	e8 fc ff ff ff       	call   10003594 <firstRun(bool)+0xc1b>	10003594: R_386_PC32	memset
10003598:	83 c4 10             	add    esp,0x10
1000359b:	a0 00 00 00 00       	mov    al,ds:0x0	1000359c: R_386_32	installKey
100035a0:	3c 03                	cmp    al,0x3
100035a2:	74 09                	je     100035ad <firstRun(bool)+0xc34>
100035a4:	a0 00 00 00 00       	mov    al,ds:0x0	100035a5: R_386_32	installKey
100035a9:	3c 08                	cmp    al,0x8
100035ab:	75 04                	jne    100035b1 <firstRun(bool)+0xc38>
100035ad:	b0 01                	mov    al,0x1
100035af:	eb 02                	jmp    100035b3 <firstRun(bool)+0xc3a>
100035b1:	b0 00                	mov    al,0x0
100035b3:	84 c0                	test   al,al
100035b5:	74 58                	je     1000360f <firstRun(bool)+0xc96>
100035b7:	ff 4d f4             	dec    DWORD PTR [ebp-0xc]
100035ba:	83 7d f4 ff          	cmp    DWORD PTR [ebp-0xc],0xffffffff
100035be:	75 16                	jne    100035d6 <firstRun(bool)+0xc5d>
100035c0:	83 ec 0c             	sub    esp,0xc
100035c3:	8d 85 46 ff ff ff    	lea    eax,[ebp-0xba]
100035c9:	50                   	push   eax
100035ca:	e8 fc ff ff ff       	call   100035cb <firstRun(bool)+0xc52>	100035cb: R_386_PC32	strlen
100035cf:	83 c4 10             	add    esp,0x10
100035d2:	48                   	dec    eax
100035d3:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
100035d6:	8d 95 46 ff ff ff    	lea    edx,[ebp-0xba]
100035dc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
100035df:	01 d0                	add    eax,edx
100035e1:	8a 00                	mov    al,BYTE PTR [eax]
100035e3:	3c 20                	cmp    al,0x20
100035e5:	74 d0                	je     100035b7 <firstRun(bool)+0xc3e>
100035e7:	8d 95 46 ff ff ff    	lea    edx,[ebp-0xba]
100035ed:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
100035f0:	01 d0                	add    eax,edx
100035f2:	8a 00                	mov    al,BYTE PTR [eax]
100035f4:	3c 2f                	cmp    al,0x2f
100035f6:	74 bf                	je     100035b7 <firstRun(bool)+0xc3e>
100035f8:	8d 95 46 ff ff ff    	lea    edx,[ebp-0xba]
100035fe:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10003601:	01 d0                	add    eax,edx
10003603:	8a 00                	mov    al,BYTE PTR [eax]
10003605:	3c 3a                	cmp    al,0x3a
10003607:	0f 85 4a 04 00 00    	jne    10003a57 <firstRun(bool)+0x10de>
1000360d:	eb a8                	jmp    100035b7 <firstRun(bool)+0xc3e>
1000360f:	a0 00 00 00 00       	mov    al,ds:0x0	10003610: R_386_32	installKey
10003614:	3c 2f                	cmp    al,0x2f
10003616:	7e 09                	jle    10003621 <firstRun(bool)+0xca8>
10003618:	a0 00 00 00 00       	mov    al,ds:0x0	10003619: R_386_32	installKey
1000361d:	3c 39                	cmp    al,0x39
1000361f:	7e 12                	jle    10003633 <firstRun(bool)+0xcba>
10003621:	a0 00 00 00 00       	mov    al,ds:0x0	10003622: R_386_32	installKey
10003626:	3c 20                	cmp    al,0x20
10003628:	74 09                	je     10003633 <firstRun(bool)+0xcba>
1000362a:	a0 00 00 00 00       	mov    al,ds:0x0	1000362b: R_386_32	installKey
1000362f:	3c 04                	cmp    al,0x4
10003631:	75 04                	jne    10003637 <firstRun(bool)+0xcbe>
10003633:	b0 01                	mov    al,0x1
10003635:	eb 02                	jmp    10003639 <firstRun(bool)+0xcc0>
10003637:	b0 00                	mov    al,0x0
10003639:	84 c0                	test   al,al
1000363b:	0f 84 cf 01 00 00    	je     10003810 <firstRun(bool)+0xe97>
10003641:	a0 00 00 00 00       	mov    al,ds:0x0	10003642: R_386_32	installKey
10003646:	3c 2f                	cmp    al,0x2f
10003648:	7e 0d                	jle    10003657 <firstRun(bool)+0xcde>
1000364a:	a0 00 00 00 00       	mov    al,ds:0x0	1000364b: R_386_32	installKey
1000364f:	3c 39                	cmp    al,0x39
10003651:	7f 04                	jg     10003657 <firstRun(bool)+0xcde>
10003653:	b0 01                	mov    al,0x1
10003655:	eb 02                	jmp    10003659 <firstRun(bool)+0xce0>
10003657:	b0 00                	mov    al,0x0
10003659:	84 c0                	test   al,al
1000365b:	0f 84 51 01 00 00    	je     100037b2 <firstRun(bool)+0xe39>
10003661:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
10003665:	75 0d                	jne    10003674 <firstRun(bool)+0xcfb>
10003667:	a0 00 00 00 00       	mov    al,ds:0x0	10003668: R_386_32	installKey
1000366c:	3c 33                	cmp    al,0x33
1000366e:	7e 04                	jle    10003674 <firstRun(bool)+0xcfb>
10003670:	b0 01                	mov    al,0x1
10003672:	eb 02                	jmp    10003676 <firstRun(bool)+0xcfd>
10003674:	b0 00                	mov    al,0x0
10003676:	84 c0                	test   al,al
10003678:	74 28                	je     100036a2 <firstRun(bool)+0xd29>
1000367a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
1000367d:	8d 50 01             	lea    edx,[eax+0x1]
10003680:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
10003683:	c6 84 05 46 ff ff ff 30 	mov    BYTE PTR [ebp+eax*1-0xba],0x30
1000368b:	a0 00 00 00 00       	mov    al,ds:0x0	1000368c: R_386_32	installKey
10003690:	8d 8d 46 ff ff ff    	lea    ecx,[ebp-0xba]
10003696:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10003699:	01 ca                	add    edx,ecx
1000369b:	88 02                	mov    BYTE PTR [edx],al
1000369d:	e9 10 01 00 00       	jmp    100037b2 <firstRun(bool)+0xe39>
100036a2:	83 7d f4 03          	cmp    DWORD PTR [ebp-0xc],0x3
100036a6:	75 0d                	jne    100036b5 <firstRun(bool)+0xd3c>
100036a8:	a0 00 00 00 00       	mov    al,ds:0x0	100036a9: R_386_32	installKey
100036ad:	3c 31                	cmp    al,0x31
100036af:	7e 04                	jle    100036b5 <firstRun(bool)+0xd3c>
100036b1:	b0 01                	mov    al,0x1
100036b3:	eb 02                	jmp    100036b7 <firstRun(bool)+0xd3e>
100036b5:	b0 00                	mov    al,0x0
100036b7:	84 c0                	test   al,al
100036b9:	74 28                	je     100036e3 <firstRun(bool)+0xd6a>
100036bb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
100036be:	8d 50 01             	lea    edx,[eax+0x1]
100036c1:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
100036c4:	c6 84 05 46 ff ff ff 30 	mov    BYTE PTR [ebp+eax*1-0xba],0x30
100036cc:	a0 00 00 00 00       	mov    al,ds:0x0	100036cd: R_386_32	installKey
100036d1:	8d 8d 46 ff ff ff    	lea    ecx,[ebp-0xba]
100036d7:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
100036da:	01 ca                	add    edx,ecx
100036dc:	88 02                	mov    BYTE PTR [edx],al
100036de:	e9 cf 00 00 00       	jmp    100037b2 <firstRun(bool)+0xe39>
100036e3:	83 7d f4 0b          	cmp    DWORD PTR [ebp-0xc],0xb
100036e7:	75 0d                	jne    100036f6 <firstRun(bool)+0xd7d>
100036e9:	a0 00 00 00 00       	mov    al,ds:0x0	100036ea: R_386_32	installKey
100036ee:	3c 32                	cmp    al,0x32
100036f0:	7e 04                	jle    100036f6 <firstRun(bool)+0xd7d>
100036f2:	b0 01                	mov    al,0x1
100036f4:	eb 02                	jmp    100036f8 <firstRun(bool)+0xd7f>
100036f6:	b0 00                	mov    al,0x0
100036f8:	84 c0                	test   al,al
100036fa:	74 28                	je     10003724 <firstRun(bool)+0xdab>
100036fc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
100036ff:	8d 50 01             	lea    edx,[eax+0x1]
10003702:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
10003705:	c6 84 05 46 ff ff ff 30 	mov    BYTE PTR [ebp+eax*1-0xba],0x30
1000370d:	a0 00 00 00 00       	mov    al,ds:0x0	1000370e: R_386_32	installKey
10003712:	8d 8d 46 ff ff ff    	lea    ecx,[ebp-0xba]
10003718:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
1000371b:	01 ca                	add    edx,ecx
1000371d:	88 02                	mov    BYTE PTR [edx],al
1000371f:	e9 8e 00 00 00       	jmp    100037b2 <firstRun(bool)+0xe39>
10003724:	83 7d f4 0e          	cmp    DWORD PTR [ebp-0xc],0xe
10003728:	75 0d                	jne    10003737 <firstRun(bool)+0xdbe>
1000372a:	a0 00 00 00 00       	mov    al,ds:0x0	1000372b: R_386_32	installKey
1000372f:	3c 35                	cmp    al,0x35
10003731:	7e 04                	jle    10003737 <firstRun(bool)+0xdbe>
10003733:	b0 01                	mov    al,0x1
10003735:	eb 02                	jmp    10003739 <firstRun(bool)+0xdc0>
10003737:	b0 00                	mov    al,0x0
10003739:	84 c0                	test   al,al
1000373b:	74 25                	je     10003762 <firstRun(bool)+0xde9>
1000373d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10003740:	8d 50 01             	lea    edx,[eax+0x1]
10003743:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
10003746:	c6 84 05 46 ff ff ff 30 	mov    BYTE PTR [ebp+eax*1-0xba],0x30
1000374e:	a0 00 00 00 00       	mov    al,ds:0x0	1000374f: R_386_32	installKey
10003753:	8d 8d 46 ff ff ff    	lea    ecx,[ebp-0xba]
10003759:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
1000375c:	01 ca                	add    edx,ecx
1000375e:	88 02                	mov    BYTE PTR [edx],al
10003760:	eb 50                	jmp    100037b2 <firstRun(bool)+0xe39>
10003762:	83 7d f4 11          	cmp    DWORD PTR [ebp-0xc],0x11
10003766:	75 0d                	jne    10003775 <firstRun(bool)+0xdfc>
10003768:	a0 00 00 00 00       	mov    al,ds:0x0	10003769: R_386_32	installKey
1000376d:	3c 35                	cmp    al,0x35
1000376f:	7e 04                	jle    10003775 <firstRun(bool)+0xdfc>
10003771:	b0 01                	mov    al,0x1
10003773:	eb 02                	jmp    10003777 <firstRun(bool)+0xdfe>
10003775:	b0 00                	mov    al,0x0
10003777:	84 c0                	test   al,al
10003779:	74 25                	je     100037a0 <firstRun(bool)+0xe27>
1000377b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
1000377e:	8d 50 01             	lea    edx,[eax+0x1]
10003781:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
10003784:	c6 84 05 46 ff ff ff 30 	mov    BYTE PTR [ebp+eax*1-0xba],0x30
1000378c:	a0 00 00 00 00       	mov    al,ds:0x0	1000378d: R_386_32	installKey
10003791:	8d 8d 46 ff ff ff    	lea    ecx,[ebp-0xba]
10003797:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
1000379a:	01 ca                	add    edx,ecx
1000379c:	88 02                	mov    BYTE PTR [edx],al
1000379e:	eb 12                	jmp    100037b2 <firstRun(bool)+0xe39>
100037a0:	a0 00 00 00 00       	mov    al,ds:0x0	100037a1: R_386_32	installKey
100037a5:	8d 8d 46 ff ff ff    	lea    ecx,[ebp-0xba]
100037ab:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
100037ae:	01 ca                	add    edx,ecx
100037b0:	88 02                	mov    BYTE PTR [edx],al
100037b2:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
100037b5:	83 ec 0c             	sub    esp,0xc
100037b8:	8d 85 46 ff ff ff    	lea    eax,[ebp-0xba]
100037be:	50                   	push   eax
100037bf:	e8 fc ff ff ff       	call   100037c0 <firstRun(bool)+0xe47>	100037c0: R_386_PC32	strlen
100037c4:	83 c4 10             	add    esp,0x10
100037c7:	89 c2                	mov    edx,eax
100037c9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
100037cc:	39 c2                	cmp    edx,eax
100037ce:	77 07                	ja     100037d7 <firstRun(bool)+0xe5e>
100037d0:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
100037d7:	8d 95 46 ff ff ff    	lea    edx,[ebp-0xba]
100037dd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
100037e0:	01 d0                	add    eax,edx
100037e2:	8a 00                	mov    al,BYTE PTR [eax]
100037e4:	3c 20                	cmp    al,0x20
100037e6:	74 ca                	je     100037b2 <firstRun(bool)+0xe39>
100037e8:	8d 95 46 ff ff ff    	lea    edx,[ebp-0xba]
100037ee:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
100037f1:	01 d0                	add    eax,edx
100037f3:	8a 00                	mov    al,BYTE PTR [eax]
100037f5:	3c 2f                	cmp    al,0x2f
100037f7:	74 b9                	je     100037b2 <firstRun(bool)+0xe39>
100037f9:	8d 95 46 ff ff ff    	lea    edx,[ebp-0xba]
100037ff:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10003802:	01 d0                	add    eax,edx
10003804:	8a 00                	mov    al,BYTE PTR [eax]
10003806:	3c 3a                	cmp    al,0x3a
10003808:	0f 85 49 02 00 00    	jne    10003a57 <firstRun(bool)+0x10de>
1000380e:	eb a2                	jmp    100037b2 <firstRun(bool)+0xe39>
10003810:	a0 00 00 00 00       	mov    al,ds:0x0	10003811: R_386_32	installKey
10003815:	3c 0a                	cmp    al,0xa
10003817:	0f 94 c0             	sete   al
1000381a:	84 c0                	test   al,al
1000381c:	0f 84 35 02 00 00    	je     10003a57 <firstRun(bool)+0x10de>
10003822:	8a 85 46 ff ff ff    	mov    al,BYTE PTR [ebp-0xba]
10003828:	0f be c0             	movsx  eax,al
1000382b:	8d 50 d0             	lea    edx,[eax-0x30]
1000382e:	89 d0                	mov    eax,edx
10003830:	c1 e0 02             	shl    eax,0x2
10003833:	01 d0                	add    eax,edx
10003835:	01 c0                	add    eax,eax
10003837:	89 c2                	mov    edx,eax
10003839:	8a 85 47 ff ff ff    	mov    al,BYTE PTR [ebp-0xb9]
1000383f:	0f be c0             	movsx  eax,al
10003842:	83 e8 30             	sub    eax,0x30
10003845:	01 d0                	add    eax,edx
10003847:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
1000384a:	8a 85 49 ff ff ff    	mov    al,BYTE PTR [ebp-0xb7]
10003850:	0f be c0             	movsx  eax,al
10003853:	8d 50 d0             	lea    edx,[eax-0x30]
10003856:	89 d0                	mov    eax,edx
10003858:	c1 e0 02             	shl    eax,0x2
1000385b:	01 d0                	add    eax,edx
1000385d:	01 c0                	add    eax,eax
1000385f:	89 c2                	mov    edx,eax
10003861:	8a 85 4a ff ff ff    	mov    al,BYTE PTR [ebp-0xb6]
10003867:	0f be c0             	movsx  eax,al
1000386a:	83 e8 30             	sub    eax,0x30
1000386d:	01 d0                	add    eax,edx
1000386f:	89 45 c4             	mov    DWORD PTR [ebp-0x3c],eax
10003872:	8a 85 4c ff ff ff    	mov    al,BYTE PTR [ebp-0xb4]
10003878:	0f be c0             	movsx  eax,al
1000387b:	8d 50 d0             	lea    edx,[eax-0x30]
1000387e:	89 d0                	mov    eax,edx
10003880:	c1 e0 02             	shl    eax,0x2
10003883:	01 d0                	add    eax,edx
10003885:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
1000388c:	01 d0                	add    eax,edx
1000388e:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10003895:	01 d0                	add    eax,edx
10003897:	c1 e0 03             	shl    eax,0x3
1000389a:	89 c1                	mov    ecx,eax
1000389c:	8a 85 4d ff ff ff    	mov    al,BYTE PTR [ebp-0xb3]
100038a2:	0f be c0             	movsx  eax,al
100038a5:	8d 50 d0             	lea    edx,[eax-0x30]
100038a8:	89 d0                	mov    eax,edx
100038aa:	c1 e0 02             	shl    eax,0x2
100038ad:	01 d0                	add    eax,edx
100038af:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
100038b6:	01 d0                	add    eax,edx
100038b8:	c1 e0 02             	shl    eax,0x2
100038bb:	01 c1                	add    ecx,eax
100038bd:	8a 85 4e ff ff ff    	mov    al,BYTE PTR [ebp-0xb2]
100038c3:	0f be c0             	movsx  eax,al
100038c6:	8d 50 d0             	lea    edx,[eax-0x30]
100038c9:	89 d0                	mov    eax,edx
100038cb:	c1 e0 02             	shl    eax,0x2
100038ce:	01 d0                	add    eax,edx
100038d0:	01 c0                	add    eax,eax
100038d2:	8d 14 01             	lea    edx,[ecx+eax*1]
100038d5:	8a 85 4f ff ff ff    	mov    al,BYTE PTR [ebp-0xb1]
100038db:	0f be c0             	movsx  eax,al
100038de:	83 e8 30             	sub    eax,0x30
100038e1:	01 d0                	add    eax,edx
100038e3:	89 45 c0             	mov    DWORD PTR [ebp-0x40],eax
100038e6:	8a 85 51 ff ff ff    	mov    al,BYTE PTR [ebp-0xaf]
100038ec:	0f be c0             	movsx  eax,al
100038ef:	8d 50 d0             	lea    edx,[eax-0x30]
100038f2:	89 d0                	mov    eax,edx
100038f4:	c1 e0 02             	shl    eax,0x2
100038f7:	01 d0                	add    eax,edx
100038f9:	01 c0                	add    eax,eax
100038fb:	89 c2                	mov    edx,eax
100038fd:	8a 85 52 ff ff ff    	mov    al,BYTE PTR [ebp-0xae]
10003903:	0f be c0             	movsx  eax,al
10003906:	83 e8 30             	sub    eax,0x30
10003909:	01 d0                	add    eax,edx
1000390b:	89 45 bc             	mov    DWORD PTR [ebp-0x44],eax
1000390e:	8a 85 54 ff ff ff    	mov    al,BYTE PTR [ebp-0xac]
10003914:	0f be c0             	movsx  eax,al
10003917:	8d 50 d0             	lea    edx,[eax-0x30]
1000391a:	89 d0                	mov    eax,edx
1000391c:	c1 e0 02             	shl    eax,0x2
1000391f:	01 d0                	add    eax,edx
10003921:	01 c0                	add    eax,eax
10003923:	89 c2                	mov    edx,eax
10003925:	8a 85 55 ff ff ff    	mov    al,BYTE PTR [ebp-0xab]
1000392b:	0f be c0             	movsx  eax,al
1000392e:	83 e8 30             	sub    eax,0x30
10003931:	01 d0                	add    eax,edx
10003933:	89 45 b8             	mov    DWORD PTR [ebp-0x48],eax
10003936:	8a 85 57 ff ff ff    	mov    al,BYTE PTR [ebp-0xa9]
1000393c:	0f be c0             	movsx  eax,al
1000393f:	8d 50 d0             	lea    edx,[eax-0x30]
10003942:	89 d0                	mov    eax,edx
10003944:	c1 e0 02             	shl    eax,0x2
10003947:	01 d0                	add    eax,edx
10003949:	01 c0                	add    eax,eax
1000394b:	89 c2                	mov    edx,eax
1000394d:	8a 85 58 ff ff ff    	mov    al,BYTE PTR [ebp-0xa8]
10003953:	0f be c0             	movsx  eax,al
10003956:	83 e8 30             	sub    eax,0x30
10003959:	01 d0                	add    eax,edx
1000395b:	89 45 b4             	mov    DWORD PTR [ebp-0x4c],eax
1000395e:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
10003961:	83 e0 03             	and    eax,0x3
10003964:	85 c0                	test   eax,eax
10003966:	75 1f                	jne    10003987 <firstRun(bool)+0x100e>
10003968:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
1000396b:	b9 19 00 00 00       	mov    ecx,0x19
10003970:	99                   	cdq    
10003971:	f7 f9                	idiv   ecx
10003973:	89 d0                	mov    eax,edx
10003975:	85 c0                	test   eax,eax
10003977:	75 0a                	jne    10003983 <firstRun(bool)+0x100a>
10003979:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
1000397c:	83 e0 0f             	and    eax,0xf
1000397f:	85 c0                	test   eax,eax
10003981:	75 04                	jne    10003987 <firstRun(bool)+0x100e>
10003983:	b0 01                	mov    al,0x1
10003985:	eb 02                	jmp    10003989 <firstRun(bool)+0x1010>
10003987:	b0 00                	mov    al,0x0
10003989:	88 45 b3             	mov    BYTE PTR [ebp-0x4d],al
1000398c:	83 7d c8 1f          	cmp    DWORD PTR [ebp-0x38],0x1f
10003990:	7e 0c                	jle    1000399e <firstRun(bool)+0x1025>
10003992:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
10003999:	e9 b9 00 00 00       	jmp    10003a57 <firstRun(bool)+0x10de>
1000399e:	83 7d c8 1e          	cmp    DWORD PTR [ebp-0x38],0x1e
100039a2:	7e 2a                	jle    100039ce <firstRun(bool)+0x1055>
100039a4:	83 7d c4 02          	cmp    DWORD PTR [ebp-0x3c],0x2
100039a8:	74 18                	je     100039c2 <firstRun(bool)+0x1049>
100039aa:	83 7d c4 04          	cmp    DWORD PTR [ebp-0x3c],0x4
100039ae:	74 12                	je     100039c2 <firstRun(bool)+0x1049>
100039b0:	83 7d c4 06          	cmp    DWORD PTR [ebp-0x3c],0x6
100039b4:	74 0c                	je     100039c2 <firstRun(bool)+0x1049>
100039b6:	83 7d c4 09          	cmp    DWORD PTR [ebp-0x3c],0x9
100039ba:	74 06                	je     100039c2 <firstRun(bool)+0x1049>
100039bc:	83 7d c4 0b          	cmp    DWORD PTR [ebp-0x3c],0xb
100039c0:	75 0c                	jne    100039ce <firstRun(bool)+0x1055>
100039c2:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
100039c9:	e9 89 00 00 00       	jmp    10003a57 <firstRun(bool)+0x10de>
100039ce:	83 7d c8 1d          	cmp    DWORD PTR [ebp-0x38],0x1d
100039d2:	75 19                	jne    100039ed <firstRun(bool)+0x1074>
100039d4:	83 7d c4 02          	cmp    DWORD PTR [ebp-0x3c],0x2
100039d8:	75 13                	jne    100039ed <firstRun(bool)+0x1074>
100039da:	8a 45 b3             	mov    al,BYTE PTR [ebp-0x4d]
100039dd:	83 f0 01             	xor    eax,0x1
100039e0:	84 c0                	test   al,al
100039e2:	74 09                	je     100039ed <firstRun(bool)+0x1074>
100039e4:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
100039eb:	eb 6a                	jmp    10003a57 <firstRun(bool)+0x10de>
100039ed:	83 7d c8 00          	cmp    DWORD PTR [ebp-0x38],0x0
100039f1:	75 09                	jne    100039fc <firstRun(bool)+0x1083>
100039f3:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
100039fa:	eb 5b                	jmp    10003a57 <firstRun(bool)+0x10de>
100039fc:	83 7d c4 0c          	cmp    DWORD PTR [ebp-0x3c],0xc
10003a00:	7f 06                	jg     10003a08 <firstRun(bool)+0x108f>
10003a02:	83 7d c4 00          	cmp    DWORD PTR [ebp-0x3c],0x0
10003a06:	75 09                	jne    10003a11 <firstRun(bool)+0x1098>
10003a08:	c7 45 f4 03 00 00 00 	mov    DWORD PTR [ebp-0xc],0x3
10003a0f:	eb 46                	jmp    10003a57 <firstRun(bool)+0x10de>
10003a11:	81 7d c0 b7 0b 00 00 	cmp    DWORD PTR [ebp-0x40],0xbb7
10003a18:	7f 09                	jg     10003a23 <firstRun(bool)+0x10aa>
10003a1a:	81 7d c0 b1 07 00 00 	cmp    DWORD PTR [ebp-0x40],0x7b1
10003a21:	7f 09                	jg     10003a2c <firstRun(bool)+0x10b3>
10003a23:	c7 45 f4 06 00 00 00 	mov    DWORD PTR [ebp-0xc],0x6
10003a2a:	eb 2b                	jmp    10003a57 <firstRun(bool)+0x10de>
10003a2c:	83 7d bc 17          	cmp    DWORD PTR [ebp-0x44],0x17
10003a30:	7e 09                	jle    10003a3b <firstRun(bool)+0x10c2>
10003a32:	c7 45 f4 0b 00 00 00 	mov    DWORD PTR [ebp-0xc],0xb
10003a39:	eb 1c                	jmp    10003a57 <firstRun(bool)+0x10de>
10003a3b:	83 7d b8 3b          	cmp    DWORD PTR [ebp-0x48],0x3b
10003a3f:	7e 09                	jle    10003a4a <firstRun(bool)+0x10d1>
10003a41:	c7 45 f4 0e 00 00 00 	mov    DWORD PTR [ebp-0xc],0xe
10003a48:	eb 0d                	jmp    10003a57 <firstRun(bool)+0x10de>
10003a4a:	83 7d b4 3b          	cmp    DWORD PTR [ebp-0x4c],0x3b
10003a4e:	7e 23                	jle    10003a73 <firstRun(bool)+0x10fa>
10003a50:	c7 45 f4 11 00 00 00 	mov    DWORD PTR [ebp-0xc],0x11
10003a57:	83 ec 0c             	sub    esp,0xc
10003a5a:	68 4c 04 00 00       	push   0x44c
10003a5f:	e8 fc ff ff ff       	call   10003a60 <firstRun(bool)+0x10e7>	10003a60: R_386_PC32	milliTenthSleep(unsigned int)
10003a64:	83 c4 10             	add    esp,0x10
10003a67:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10003a69: R_386_32	installKey
10003a6e:	e9 83 f8 ff ff       	jmp    100032f6 <firstRun(bool)+0x97d>
10003a73:	90                   	nop
10003a74:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10003a76: R_386_32	installKey
10003a7b:	83 ec 0c             	sub    esp,0xc
10003a7e:	68 a0 0f 00 00       	push   0xfa0
10003a83:	e8 fc ff ff ff       	call   10003a84 <firstRun(bool)+0x110b>	10003a84: R_386_PC32	milliTenthSleep(unsigned int)
10003a88:	83 c4 10             	add    esp,0x10
10003a8b:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10003a8d: R_386_32	installKey
10003a92:	e8 fc ff ff ff       	call   10003a93 <firstRun(bool)+0x111a>	10003a93: R_386_PC32	drawBootScreen()
10003a97:	83 ec 0c             	sub    esp,0xc
10003a9a:	68 f9 52 00 10       	push   0x100052f9	10003a9b: R_386_32	.text
10003a9f:	6a 14                	push   0x14
10003aa1:	6a 3c                	push   0x3c
10003aa3:	6a 01                	push   0x1
10003aa5:	6a 12                	push   0x12
10003aa7:	e8 fc ff ff ff       	call   10003aa8 <firstRun(bool)+0x112f>	10003aa8: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
10003aac:	83 c4 20             	add    esp,0x20
10003aaf:	a1 00 00 00 00       	mov    eax,ds:0x0	10003ab0: R_386_32	term
10003ab4:	83 ec 04             	sub    esp,0x4
10003ab7:	6a 04                	push   0x4
10003ab9:	6a 14                	push   0x14
10003abb:	50                   	push   eax
10003abc:	e8 fc ff ff ff       	call   10003abd <firstRun(bool)+0x1144>	10003abd: R_386_PC32	VgaText::setCursor(int, int)
10003ac1:	83 c4 10             	add    esp,0x10
10003ac4:	a1 00 00 00 00       	mov    eax,ds:0x0	10003ac5: R_386_32	term
10003ac9:	83 ec 08             	sub    esp,0x8
10003acc:	68 70 53 00 10       	push   0x10005370	10003acd: R_386_32	.text
10003ad1:	50                   	push   eax
10003ad2:	e8 fc ff ff ff       	call   10003ad3 <firstRun(bool)+0x115a>	10003ad3: R_386_PC32	VgaText::puts(char const*)
10003ad7:	83 c4 10             	add    esp,0x10
10003ada:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
10003ae1:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
10003ae8:	e8 fc ff ff ff       	call   10003ae9 <firstRun(bool)+0x1170>	10003ae9: R_386_PC32	loadTimezoneStrings()
10003aed:	89 45 ac             	mov    DWORD PTR [ebp-0x54],eax
10003af0:	b8 d2 00 00 00       	mov    eax,0xd2
10003af5:	99                   	cdq    
10003af6:	f7 7d ac             	idiv   DWORD PTR [ebp-0x54]
10003af9:	89 45 a8             	mov    DWORD PTR [ebp-0x58],eax
10003afc:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
10003b03:	83 7d e0 0d          	cmp    DWORD PTR [ebp-0x20],0xd
10003b07:	7f 32                	jg     10003b3b <firstRun(bool)+0x11c2>
10003b09:	a1 00 00 00 00       	mov    eax,ds:0x0	10003b0a: R_386_32	term
10003b0e:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
10003b11:	83 c2 07             	add    edx,0x7
10003b14:	83 ec 04             	sub    esp,0x4
10003b17:	52                   	push   edx
10003b18:	6a 4b                	push   0x4b
10003b1a:	50                   	push   eax
10003b1b:	e8 fc ff ff ff       	call   10003b1c <firstRun(bool)+0x11a3>	10003b1c: R_386_PC32	VgaText::setCursor(int, int)
10003b20:	83 c4 10             	add    esp,0x10
10003b23:	a1 00 00 00 00       	mov    eax,ds:0x0	10003b24: R_386_32	term
10003b28:	83 ec 08             	sub    esp,0x8
10003b2b:	6a 20                	push   0x20
10003b2d:	50                   	push   eax
10003b2e:	e8 fc ff ff ff       	call   10003b2f <firstRun(bool)+0x11b6>	10003b2f: R_386_PC32	VgaText::putchar(char)
10003b33:	83 c4 10             	add    esp,0x10
10003b36:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
10003b39:	eb c8                	jmp    10003b03 <firstRun(bool)+0x118a>
10003b3b:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
10003b42:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10003b45:	3b 45 a8             	cmp    eax,DWORD PTR [ebp-0x58]
10003b48:	7d 48                	jge    10003b92 <firstRun(bool)+0x1219>
10003b4a:	8b 0d 00 00 00 00    	mov    ecx,DWORD PTR ds:0x0	10003b4c: R_386_32	term
10003b50:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10003b53:	8d 58 07             	lea    ebx,[eax+0x7]
10003b56:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10003b59:	89 d0                	mov    eax,edx
10003b5b:	01 c0                	add    eax,eax
10003b5d:	01 d0                	add    eax,edx
10003b5f:	01 c0                	add    eax,eax
10003b61:	01 d0                	add    eax,edx
10003b63:	01 c0                	add    eax,eax
10003b65:	99                   	cdq    
10003b66:	f7 7d ac             	idiv   DWORD PTR [ebp-0x54]
10003b69:	01 d8                	add    eax,ebx
10003b6b:	83 ec 04             	sub    esp,0x4
10003b6e:	50                   	push   eax
10003b6f:	6a 4b                	push   0x4b
10003b71:	51                   	push   ecx
10003b72:	e8 fc ff ff ff       	call   10003b73 <firstRun(bool)+0x11fa>	10003b73: R_386_PC32	VgaText::setCursor(int, int)
10003b77:	83 c4 10             	add    esp,0x10
10003b7a:	a1 00 00 00 00       	mov    eax,ds:0x0	10003b7b: R_386_32	term
10003b7f:	83 ec 08             	sub    esp,0x8
10003b82:	6a db                	push   0xffffffdb
10003b84:	50                   	push   eax
10003b85:	e8 fc ff ff ff       	call   10003b86 <firstRun(bool)+0x120d>	10003b86: R_386_PC32	VgaText::putchar(char)
10003b8a:	83 c4 10             	add    esp,0x10
10003b8d:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
10003b90:	eb b0                	jmp    10003b42 <firstRun(bool)+0x11c9>
10003b92:	a1 00 00 00 00       	mov    eax,ds:0x0	10003b93: R_386_32	term
10003b97:	83 ec 04             	sub    esp,0x4
10003b9a:	6a 06                	push   0x6
10003b9c:	6a 4b                	push   0x4b
10003b9e:	50                   	push   eax
10003b9f:	e8 fc ff ff ff       	call   10003ba0 <firstRun(bool)+0x1227>	10003ba0: R_386_PC32	VgaText::setCursor(int, int)
10003ba4:	83 c4 10             	add    esp,0x10
10003ba7:	a1 00 00 00 00       	mov    eax,ds:0x0	10003ba8: R_386_32	term
10003bac:	83 ec 08             	sub    esp,0x8
10003baf:	6a 1e                	push   0x1e
10003bb1:	50                   	push   eax
10003bb2:	e8 fc ff ff ff       	call   10003bb3 <firstRun(bool)+0x123a>	10003bb3: R_386_PC32	VgaText::putchar(char)
10003bb7:	83 c4 10             	add    esp,0x10
10003bba:	a1 00 00 00 00       	mov    eax,ds:0x0	10003bbb: R_386_32	term
10003bbf:	83 ec 04             	sub    esp,0x4
10003bc2:	6a 14                	push   0x14
10003bc4:	6a 4b                	push   0x4b
10003bc6:	50                   	push   eax
10003bc7:	e8 fc ff ff ff       	call   10003bc8 <firstRun(bool)+0x124f>	10003bc8: R_386_PC32	VgaText::setCursor(int, int)
10003bcc:	83 c4 10             	add    esp,0x10
10003bcf:	a1 00 00 00 00       	mov    eax,ds:0x0	10003bd0: R_386_32	term
10003bd4:	83 ec 08             	sub    esp,0x8
10003bd7:	6a 1f                	push   0x1f
10003bd9:	50                   	push   eax
10003bda:	e8 fc ff ff ff       	call   10003bdb <firstRun(bool)+0x1262>	10003bdb: R_386_PC32	VgaText::putchar(char)
10003bdf:	83 c4 10             	add    esp,0x10
10003be2:	c7 45 d8 00 00 00 00 	mov    DWORD PTR [ebp-0x28],0x0
10003be9:	83 7d d8 0e          	cmp    DWORD PTR [ebp-0x28],0xe
10003bed:	7f 71                	jg     10003c60 <firstRun(bool)+0x12e7>
10003bef:	a1 00 00 00 00       	mov    eax,ds:0x0	10003bf0: R_386_32	term
10003bf4:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
10003bf7:	83 c2 06             	add    edx,0x6
10003bfa:	83 ec 04             	sub    esp,0x4
10003bfd:	52                   	push   edx
10003bfe:	6a 14                	push   0x14
10003c00:	50                   	push   eax
10003c01:	e8 fc ff ff ff       	call   10003c02 <firstRun(bool)+0x1289>	10003c02: R_386_PC32	VgaText::setCursor(int, int)
10003c06:	83 c4 10             	add    esp,0x10
10003c09:	a1 00 00 00 00       	mov    eax,ds:0x0	10003c0a: R_386_32	term
10003c0e:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
10003c11:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
10003c14:	01 ca                	add    edx,ecx
10003c16:	39 55 e8             	cmp    DWORD PTR [ebp-0x18],edx
10003c19:	75 07                	jne    10003c22 <firstRun(bool)+0x12a9>
10003c1b:	bb 00 00 00 00       	mov    ebx,0x0
10003c20:	eb 05                	jmp    10003c27 <firstRun(bool)+0x12ae>
10003c22:	bb 0f 00 00 00       	mov    ebx,0xf
10003c27:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
10003c2a:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
10003c2d:	01 ca                	add    edx,ecx
10003c2f:	39 55 e8             	cmp    DWORD PTR [ebp-0x18],edx
10003c32:	75 07                	jne    10003c3b <firstRun(bool)+0x12c2>
10003c34:	b9 0f 00 00 00       	mov    ecx,0xf
10003c39:	eb 05                	jmp    10003c40 <firstRun(bool)+0x12c7>
10003c3b:	b9 00 00 00 00       	mov    ecx,0x0
10003c40:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
10003c43:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
10003c46:	01 f2                	add    edx,esi
10003c48:	8b 14 95 00 00 00 00 	mov    edx,DWORD PTR [edx*4+0x0]	10003c4b: R_386_32	timezoneStrings
10003c4f:	53                   	push   ebx
10003c50:	51                   	push   ecx
10003c51:	52                   	push   edx
10003c52:	50                   	push   eax
10003c53:	e8 fc ff ff ff       	call   10003c54 <firstRun(bool)+0x12db>	10003c54: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10003c58:	83 c4 10             	add    esp,0x10
10003c5b:	ff 45 d8             	inc    DWORD PTR [ebp-0x28]
10003c5e:	eb 89                	jmp    10003be9 <firstRun(bool)+0x1270>
10003c60:	a0 00 00 00 00       	mov    al,ds:0x0	10003c61: R_386_32	installKey
10003c65:	84 c0                	test   al,al
10003c67:	0f 94 c0             	sete   al
10003c6a:	84 c0                	test   al,al
10003c6c:	74 02                	je     10003c70 <firstRun(bool)+0x12f7>
10003c6e:	eb f0                	jmp    10003c60 <firstRun(bool)+0x12e7>
10003c70:	a1 00 00 00 00       	mov    eax,ds:0x0	10003c71: R_386_32	term
10003c75:	05 82 00 00 00       	add    eax,0x82
10003c7a:	83 ec 04             	sub    esp,0x4
10003c7d:	6a 04                	push   0x4
10003c7f:	6a 00                	push   0x0
10003c81:	50                   	push   eax
10003c82:	e8 fc ff ff ff       	call   10003c83 <firstRun(bool)+0x130a>	10003c83: R_386_PC32	memset
10003c87:	83 c4 10             	add    esp,0x10
10003c8a:	a1 00 00 00 00       	mov    eax,ds:0x0	10003c8b: R_386_32	term
10003c8f:	05 02 01 00 00       	add    eax,0x102
10003c94:	83 ec 04             	sub    esp,0x4
10003c97:	6a 04                	push   0x4
10003c99:	6a 00                	push   0x0
10003c9b:	50                   	push   eax
10003c9c:	e8 fc ff ff ff       	call   10003c9d <firstRun(bool)+0x1324>	10003c9d: R_386_PC32	memset
10003ca1:	83 c4 10             	add    esp,0x10
10003ca4:	a0 00 00 00 00       	mov    al,ds:0x0	10003ca5: R_386_32	installKey
10003ca9:	3c 01                	cmp    al,0x1
10003cab:	0f 94 c0             	sete   al
10003cae:	84 c0                	test   al,al
10003cb0:	74 2d                	je     10003cdf <firstRun(bool)+0x1366>
10003cb2:	ff 4d e8             	dec    DWORD PTR [ebp-0x18]
10003cb5:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
10003cb8:	2b 45 e4             	sub    eax,DWORD PTR [ebp-0x1c]
10003cbb:	83 f8 04             	cmp    eax,0x4
10003cbe:	7f 03                	jg     10003cc3 <firstRun(bool)+0x134a>
10003cc0:	ff 4d e4             	dec    DWORD PTR [ebp-0x1c]
10003cc3:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
10003cc7:	79 07                	jns    10003cd0 <firstRun(bool)+0x1357>
10003cc9:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
10003cd0:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
10003cd4:	79 5e                	jns    10003d34 <firstRun(bool)+0x13bb>
10003cd6:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
10003cdd:	eb 55                	jmp    10003d34 <firstRun(bool)+0x13bb>
10003cdf:	a0 00 00 00 00       	mov    al,ds:0x0	10003ce0: R_386_32	installKey
10003ce4:	3c 02                	cmp    al,0x2
10003ce6:	0f 94 c0             	sete   al
10003ce9:	84 c0                	test   al,al
10003ceb:	74 39                	je     10003d26 <firstRun(bool)+0x13ad>
10003ced:	ff 45 e8             	inc    DWORD PTR [ebp-0x18]
10003cf0:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
10003cf3:	2b 45 e4             	sub    eax,DWORD PTR [ebp-0x1c]
10003cf6:	83 f8 0a             	cmp    eax,0xa
10003cf9:	7e 03                	jle    10003cfe <firstRun(bool)+0x1385>
10003cfb:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
10003cfe:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
10003d01:	48                   	dec    eax
10003d02:	39 45 e8             	cmp    DWORD PTR [ebp-0x18],eax
10003d05:	7c 09                	jl     10003d10 <firstRun(bool)+0x1397>
10003d07:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
10003d0a:	83 e8 02             	sub    eax,0x2
10003d0d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
10003d10:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
10003d13:	83 e8 0f             	sub    eax,0xf
10003d16:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
10003d19:	7c 19                	jl     10003d34 <firstRun(bool)+0x13bb>
10003d1b:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
10003d1e:	83 e8 10             	sub    eax,0x10
10003d21:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10003d24:	eb 0e                	jmp    10003d34 <firstRun(bool)+0x13bb>
10003d26:	a0 00 00 00 00       	mov    al,ds:0x0	10003d27: R_386_32	installKey
10003d2b:	3c 0a                	cmp    al,0xa
10003d2d:	0f 94 c0             	sete   al
10003d30:	84 c0                	test   al,al
10003d32:	75 1c                	jne    10003d50 <firstRun(bool)+0x13d7>
10003d34:	83 ec 0c             	sub    esp,0xc
10003d37:	68 f4 01 00 00       	push   0x1f4
10003d3c:	e8 fc ff ff ff       	call   10003d3d <firstRun(bool)+0x13c4>	10003d3d: R_386_PC32	milliTenthSleep(unsigned int)
10003d41:	83 c4 10             	add    esp,0x10
10003d44:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10003d46: R_386_32	installKey
10003d4b:	e9 ac fd ff ff       	jmp    10003afc <firstRun(bool)+0x1183>
10003d50:	90                   	nop
10003d51:	80 bd 34 ff ff ff 00 	cmp    BYTE PTR [ebp-0xcc],0x0
10003d58:	0f 84 ff 00 00 00    	je     10003e5d <firstRun(bool)+0x14e4>
10003d5e:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10003d60: R_386_32	showSidebar
10003d65:	a1 00 00 00 00       	mov    eax,ds:0x0	10003d66: R_386_32	term
10003d6a:	83 ec 0c             	sub    esp,0xc
10003d6d:	50                   	push   eax
10003d6e:	e8 fc ff ff ff       	call   10003d6f <firstRun(bool)+0x13f6>	10003d6f: R_386_PC32	setActiveTerminal(VgaText*)
10003d73:	83 c4 10             	add    esp,0x10
10003d76:	e8 fc ff ff ff       	call   10003d77 <firstRun(bool)+0x13fe>	10003d77: R_386_PC32	drawBootScreen()
10003d7b:	83 ec 0c             	sub    esp,0xc
10003d7e:	68 a2 53 00 10       	push   0x100053a2	10003d7f: R_386_32	.text
10003d83:	6a 0d                	push   0xd
10003d85:	6a 32                	push   0x32
10003d87:	6a 05                	push   0x5
10003d89:	6a 16                	push   0x16
10003d8b:	e8 fc ff ff ff       	call   10003d8c <firstRun(bool)+0x1413>	10003d8c: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
10003d90:	83 c4 20             	add    esp,0x20
10003d93:	a1 00 00 00 00       	mov    eax,ds:0x0	10003d94: R_386_32	term
10003d98:	83 ec 04             	sub    esp,0x4
10003d9b:	6a 08                	push   0x8
10003d9d:	6a 18                	push   0x18
10003d9f:	50                   	push   eax
10003da0:	e8 fc ff ff ff       	call   10003da1 <firstRun(bool)+0x1428>	10003da1: R_386_PC32	VgaText::setCursor(int, int)
10003da5:	83 c4 10             	add    esp,0x10
10003da8:	a1 00 00 00 00       	mov    eax,ds:0x0	10003da9: R_386_32	term
10003dad:	83 ec 08             	sub    esp,0x8
10003db0:	68 b8 53 00 10       	push   0x100053b8	10003db1: R_386_32	.text
10003db5:	50                   	push   eax
10003db6:	e8 fc ff ff ff       	call   10003db7 <firstRun(bool)+0x143e>	10003db7: R_386_PC32	VgaText::puts(char const*)
10003dbb:	83 c4 10             	add    esp,0x10
10003dbe:	a1 00 00 00 00       	mov    eax,ds:0x0	10003dbf: R_386_32	term
10003dc3:	83 ec 04             	sub    esp,0x4
10003dc6:	6a 0a                	push   0xa
10003dc8:	6a 18                	push   0x18
10003dca:	50                   	push   eax
10003dcb:	e8 fc ff ff ff       	call   10003dcc <firstRun(bool)+0x1453>	10003dcc: R_386_PC32	VgaText::setCursor(int, int)
10003dd0:	83 c4 10             	add    esp,0x10
10003dd3:	a1 00 00 00 00       	mov    eax,ds:0x0	10003dd4: R_386_32	term
10003dd8:	83 ec 08             	sub    esp,0x8
10003ddb:	68 e0 53 00 10       	push   0x100053e0	10003ddc: R_386_32	.text
10003de0:	50                   	push   eax
10003de1:	e8 fc ff ff ff       	call   10003de2 <firstRun(bool)+0x1469>	10003de2: R_386_PC32	VgaText::puts(char const*)
10003de6:	83 c4 10             	add    esp,0x10
10003de9:	a1 00 00 00 00       	mov    eax,ds:0x0	10003dea: R_386_32	term
10003dee:	83 ec 04             	sub    esp,0x4
10003df1:	6a 0b                	push   0xb
10003df3:	6a 18                	push   0x18
10003df5:	50                   	push   eax
10003df6:	e8 fc ff ff ff       	call   10003df7 <firstRun(bool)+0x147e>	10003df7: R_386_PC32	VgaText::setCursor(int, int)
10003dfb:	83 c4 10             	add    esp,0x10
10003dfe:	a1 00 00 00 00       	mov    eax,ds:0x0	10003dff: R_386_32	term
10003e03:	83 ec 08             	sub    esp,0x8
10003e06:	68 09 54 00 10       	push   0x10005409	10003e07: R_386_32	.text
10003e0b:	50                   	push   eax
10003e0c:	e8 fc ff ff ff       	call   10003e0d <firstRun(bool)+0x1494>	10003e0d: R_386_PC32	VgaText::puts(char const*)
10003e11:	83 c4 10             	add    esp,0x10
10003e14:	a1 00 00 00 00       	mov    eax,ds:0x0	10003e15: R_386_32	term
10003e19:	83 ec 04             	sub    esp,0x4
10003e1c:	6a 0e                	push   0xe
10003e1e:	6a 18                	push   0x18
10003e20:	50                   	push   eax
10003e21:	e8 fc ff ff ff       	call   10003e22 <firstRun(bool)+0x14a9>	10003e22: R_386_PC32	VgaText::setCursor(int, int)
10003e26:	83 c4 10             	add    esp,0x10
10003e29:	a1 00 00 00 00       	mov    eax,ds:0x0	10003e2a: R_386_32	term
10003e2e:	83 ec 08             	sub    esp,0x8
10003e31:	68 18 54 00 10       	push   0x10005418	10003e32: R_386_32	.text
10003e36:	50                   	push   eax
10003e37:	e8 fc ff ff ff       	call   10003e38 <firstRun(bool)+0x14bf>	10003e38: R_386_PC32	VgaText::puts(char const*)
10003e3c:	83 c4 10             	add    esp,0x10
10003e3f:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10003e41: R_386_32	installKey
10003e46:	a0 00 00 00 00       	mov    al,ds:0x0	10003e47: R_386_32	installKey
10003e4b:	84 c0                	test   al,al
10003e4d:	0f 94 c0             	sete   al
10003e50:	84 c0                	test   al,al
10003e52:	74 02                	je     10003e56 <firstRun(bool)+0x14dd>
10003e54:	eb f0                	jmp    10003e46 <firstRun(bool)+0x14cd>
10003e56:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10003e58: R_386_32	installKey
10003e5d:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10003e5f: R_386_32	installKey
10003e64:	83 ec 0c             	sub    esp,0xc
10003e67:	68 84 03 00 00       	push   0x384
10003e6c:	e8 fc ff ff ff       	call   10003e6d <firstRun(bool)+0x14f4>	10003e6d: R_386_PC32	milliTenthSleep(unsigned int)
10003e71:	83 c4 10             	add    esp,0x10
10003e74:	e8 fc ff ff ff       	call   10003e75 <firstRun(bool)+0x14fc>	10003e75: R_386_PC32	drawBootScreen()
10003e79:	83 ec 0c             	sub    esp,0xc
10003e7c:	68 18 2e 00 00       	push   0x2e18
10003e81:	e8 fc ff ff ff       	call   10003e82 <firstRun(bool)+0x1509>	10003e82: R_386_PC32	milliTenthSleep(unsigned int)
10003e86:	83 c4 10             	add    esp,0x10
10003e89:	80 bd 34 ff ff ff 00 	cmp    BYTE PTR [ebp-0xcc],0x0
10003e90:	74 17                	je     10003ea9 <firstRun(bool)+0x1530>
10003e92:	83 ec 08             	sub    esp,0x8
10003e95:	68 42 54 00 10       	push   0x10005442	10003e96: R_386_32	.text
10003e9a:	68 00 00 00 00       	push   0x0	10003e9b: R_386_32	pkeybuf
10003e9f:	e8 fc ff ff ff       	call   10003ea0 <firstRun(bool)+0x1527>	10003ea0: R_386_PC32	strcpy
10003ea4:	83 c4 10             	add    esp,0x10
10003ea7:	eb 15                	jmp    10003ebe <firstRun(bool)+0x1545>
10003ea9:	83 ec 08             	sub    esp,0x8
10003eac:	68 53 54 00 10       	push   0x10005453	10003ead: R_386_32	.text
10003eb1:	68 00 00 00 00       	push   0x0	10003eb2: R_386_32	pkeybuf
10003eb6:	e8 fc ff ff ff       	call   10003eb7 <firstRun(bool)+0x153e>	10003eb7: R_386_PC32	strcpy
10003ebb:	83 c4 10             	add    esp,0x10
10003ebe:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
10003ec5:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10003ec7: R_386_32	installKey
10003ecc:	e8 fc ff ff ff       	call   10003ecd <firstRun(bool)+0x1554>	10003ecd: R_386_PC32	drawBootScreen()
10003ed1:	83 ec 0c             	sub    esp,0xc
10003ed4:	68 64 54 00 10       	push   0x10005464	10003ed5: R_386_32	.text
10003ed9:	6a 0e                	push   0xe
10003edb:	6a 32                	push   0x32
10003edd:	6a 02                	push   0x2
10003edf:	6a 16                	push   0x16
10003ee1:	e8 fc ff ff ff       	call   10003ee2 <firstRun(bool)+0x1569>	10003ee2: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
10003ee6:	83 c4 20             	add    esp,0x20
10003ee9:	a1 00 00 00 00       	mov    eax,ds:0x0	10003eea: R_386_32	term
10003eee:	83 ec 04             	sub    esp,0x4
10003ef1:	6a 05                	push   0x5
10003ef3:	6a 18                	push   0x18
10003ef5:	50                   	push   eax
10003ef6:	e8 fc ff ff ff       	call   10003ef7 <firstRun(bool)+0x157e>	10003ef7: R_386_PC32	VgaText::setCursor(int, int)
10003efb:	83 c4 10             	add    esp,0x10
10003efe:	a1 00 00 00 00       	mov    eax,ds:0x0	10003eff: R_386_32	term
10003f03:	83 ec 08             	sub    esp,0x8
10003f06:	68 70 54 00 10       	push   0x10005470	10003f07: R_386_32	.text
10003f0b:	50                   	push   eax
10003f0c:	e8 fc ff ff ff       	call   10003f0d <firstRun(bool)+0x1594>	10003f0d: R_386_PC32	VgaText::puts(char const*)
10003f11:	83 c4 10             	add    esp,0x10
10003f14:	a1 00 00 00 00       	mov    eax,ds:0x0	10003f15: R_386_32	term
10003f19:	83 ec 04             	sub    esp,0x4
10003f1c:	6a 06                	push   0x6
10003f1e:	6a 18                	push   0x18
10003f20:	50                   	push   eax
10003f21:	e8 fc ff ff ff       	call   10003f22 <firstRun(bool)+0x15a9>	10003f22: R_386_PC32	VgaText::setCursor(int, int)
10003f26:	83 c4 10             	add    esp,0x10
10003f29:	a1 00 00 00 00       	mov    eax,ds:0x0	10003f2a: R_386_32	term
10003f2e:	83 ec 08             	sub    esp,0x8
10003f31:	68 44 53 00 10       	push   0x10005344	10003f32: R_386_32	.text
10003f36:	50                   	push   eax
10003f37:	e8 fc ff ff ff       	call   10003f38 <firstRun(bool)+0x15bf>	10003f38: R_386_PC32	VgaText::puts(char const*)
10003f3c:	83 c4 10             	add    esp,0x10
10003f3f:	c6 05 10 00 00 00 00 	mov    BYTE PTR ds:0x10,0x0	10003f41: R_386_32	pkeybuf
10003f46:	c6 05 11 00 00 00 00 	mov    BYTE PTR ds:0x11,0x0	10003f48: R_386_32	pkeybuf
10003f4d:	a1 00 00 00 00       	mov    eax,ds:0x0	10003f4e: R_386_32	term
10003f52:	83 ec 04             	sub    esp,0x4
10003f55:	6a 08                	push   0x8
10003f57:	6a 1c                	push   0x1c
10003f59:	50                   	push   eax
10003f5a:	e8 fc ff ff ff       	call   10003f5b <firstRun(bool)+0x15e2>	10003f5b: R_386_PC32	VgaText::setCursor(int, int)
10003f5f:	83 c4 10             	add    esp,0x10
10003f62:	a1 00 00 00 00       	mov    eax,ds:0x0	10003f63: R_386_32	term
10003f67:	83 ec 08             	sub    esp,0x8
10003f6a:	68 00 00 00 00       	push   0x0	10003f6b: R_386_32	pkeybuf
10003f6f:	50                   	push   eax
10003f70:	e8 fc ff ff ff       	call   10003f71 <firstRun(bool)+0x15f8>	10003f71: R_386_PC32	VgaText::puts(char const*)
10003f75:	83 c4 10             	add    esp,0x10
10003f78:	a1 00 00 00 00       	mov    eax,ds:0x0	10003f79: R_386_32	term
10003f7d:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10003f80:	83 c2 1c             	add    edx,0x1c
10003f83:	83 ec 04             	sub    esp,0x4
10003f86:	6a 08                	push   0x8
10003f88:	52                   	push   edx
10003f89:	50                   	push   eax
10003f8a:	e8 fc ff ff ff       	call   10003f8b <firstRun(bool)+0x1612>	10003f8b: R_386_PC32	VgaText::setCursor(int, int)
10003f8f:	83 c4 10             	add    esp,0x10
10003f92:	a1 00 00 00 00       	mov    eax,ds:0x0	10003f93: R_386_32	term
10003f97:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10003f9a:	81 c2 00 00 00 00    	add    edx,0x0	10003f9c: R_386_32	pkeybuf
10003fa0:	8a 12                	mov    dl,BYTE PTR [edx]
10003fa2:	0f be d2             	movsx  edx,dl
10003fa5:	6a 00                	push   0x0
10003fa7:	6a 0f                	push   0xf
10003fa9:	52                   	push   edx
10003faa:	50                   	push   eax
10003fab:	e8 fc ff ff ff       	call   10003fac <firstRun(bool)+0x1633>	10003fac: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
10003fb0:	83 c4 10             	add    esp,0x10
10003fb3:	a1 00 00 00 00       	mov    eax,ds:0x0	10003fb4: R_386_32	term
10003fb8:	83 ec 04             	sub    esp,0x4
10003fbb:	6a 08                	push   0x8
10003fbd:	6a 2c                	push   0x2c
10003fbf:	50                   	push   eax
10003fc0:	e8 fc ff ff ff       	call   10003fc1 <firstRun(bool)+0x1648>	10003fc1: R_386_PC32	VgaText::setCursor(int, int)
10003fc5:	83 c4 10             	add    esp,0x10
10003fc8:	a1 00 00 00 00       	mov    eax,ds:0x0	10003fc9: R_386_32	term
10003fcd:	6a 0f                	push   0xf
10003fcf:	6a 0f                	push   0xf
10003fd1:	6a 20                	push   0x20
10003fd3:	50                   	push   eax
10003fd4:	e8 fc ff ff ff       	call   10003fd5 <firstRun(bool)+0x165c>	10003fd5: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
10003fd9:	83 c4 10             	add    esp,0x10
10003fdc:	a1 00 00 00 00       	mov    eax,ds:0x0	10003fdd: R_386_32	term
10003fe1:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10003fe4:	83 c2 1c             	add    edx,0x1c
10003fe7:	83 ec 04             	sub    esp,0x4
10003fea:	6a 08                	push   0x8
10003fec:	52                   	push   edx
10003fed:	50                   	push   eax
10003fee:	e8 fc ff ff ff       	call   10003fef <firstRun(bool)+0x1676>	10003fef: R_386_PC32	VgaText::setCursor(int, int)
10003ff3:	83 c4 10             	add    esp,0x10
10003ff6:	a0 00 00 00 00       	mov    al,ds:0x0	10003ff7: R_386_32	installKey
10003ffb:	84 c0                	test   al,al
10003ffd:	0f 94 c0             	sete   al
10004000:	84 c0                	test   al,al
10004002:	74 02                	je     10004006 <firstRun(bool)+0x168d>
10004004:	eb f0                	jmp    10003ff6 <firstRun(bool)+0x167d>
10004006:	a1 00 00 00 00       	mov    eax,ds:0x0	10004007: R_386_32	term
1000400b:	05 82 00 00 00       	add    eax,0x82
10004010:	83 ec 04             	sub    esp,0x4
10004013:	6a 10                	push   0x10
10004015:	6a 00                	push   0x0
10004017:	50                   	push   eax
10004018:	e8 fc ff ff ff       	call   10004019 <firstRun(bool)+0x16a0>	10004019: R_386_PC32	memset
1000401d:	83 c4 10             	add    esp,0x10
10004020:	a1 00 00 00 00       	mov    eax,ds:0x0	10004021: R_386_32	term
10004025:	05 02 01 00 00       	add    eax,0x102
1000402a:	83 ec 04             	sub    esp,0x4
1000402d:	6a 10                	push   0x10
1000402f:	6a 00                	push   0x0
10004031:	50                   	push   eax
10004032:	e8 fc ff ff ff       	call   10004033 <firstRun(bool)+0x16ba>	10004033: R_386_PC32	memset
10004037:	83 c4 10             	add    esp,0x10
1000403a:	a0 00 00 00 00       	mov    al,ds:0x0	1000403b: R_386_32	installKey
1000403f:	3c 03                	cmp    al,0x3
10004041:	74 09                	je     1000404c <firstRun(bool)+0x16d3>
10004043:	a0 00 00 00 00       	mov    al,ds:0x0	10004044: R_386_32	installKey
10004048:	3c 08                	cmp    al,0x8
1000404a:	75 04                	jne    10004050 <firstRun(bool)+0x16d7>
1000404c:	b0 01                	mov    al,0x1
1000404e:	eb 02                	jmp    10004052 <firstRun(bool)+0x16d9>
10004050:	b0 00                	mov    al,0x0
10004052:	84 c0                	test   al,al
10004054:	74 31                	je     10004087 <firstRun(bool)+0x170e>
10004056:	ff 4d f4             	dec    DWORD PTR [ebp-0xc]
10004059:	83 7d f4 ff          	cmp    DWORD PTR [ebp-0xc],0xffffffff
1000405d:	75 14                	jne    10004073 <firstRun(bool)+0x16fa>
1000405f:	83 ec 0c             	sub    esp,0xc
10004062:	68 00 00 00 00       	push   0x0	10004063: R_386_32	pkeybuf
10004067:	e8 fc ff ff ff       	call   10004068 <firstRun(bool)+0x16ef>	10004068: R_386_PC32	strlen
1000406c:	83 c4 10             	add    esp,0x10
1000406f:	48                   	dec    eax
10004070:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
10004073:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10004076:	05 00 00 00 00       	add    eax,0x0	10004077: R_386_32	pkeybuf
1000407b:	8a 00                	mov    al,BYTE PTR [eax]
1000407d:	3c 2d                	cmp    al,0x2d
1000407f:	0f 85 5d 03 00 00    	jne    100043e2 <firstRun(bool)+0x1a69>
10004085:	eb cf                	jmp    10004056 <firstRun(bool)+0x16dd>
10004087:	a0 00 00 00 00       	mov    al,ds:0x0	10004088: R_386_32	installKey
1000408c:	3c 2f                	cmp    al,0x2f
1000408e:	7e 09                	jle    10004099 <firstRun(bool)+0x1720>
10004090:	a0 00 00 00 00       	mov    al,ds:0x0	10004091: R_386_32	installKey
10004095:	3c 39                	cmp    al,0x39
10004097:	7e 36                	jle    100040cf <firstRun(bool)+0x1756>
10004099:	a0 00 00 00 00       	mov    al,ds:0x0	1000409a: R_386_32	installKey
1000409e:	3c 40                	cmp    al,0x40
100040a0:	7e 09                	jle    100040ab <firstRun(bool)+0x1732>
100040a2:	a0 00 00 00 00       	mov    al,ds:0x0	100040a3: R_386_32	installKey
100040a7:	3c 5a                	cmp    al,0x5a
100040a9:	7e 24                	jle    100040cf <firstRun(bool)+0x1756>
100040ab:	a0 00 00 00 00       	mov    al,ds:0x0	100040ac: R_386_32	installKey
100040b0:	3c 60                	cmp    al,0x60
100040b2:	7e 09                	jle    100040bd <firstRun(bool)+0x1744>
100040b4:	a0 00 00 00 00       	mov    al,ds:0x0	100040b5: R_386_32	installKey
100040b9:	3c 7a                	cmp    al,0x7a
100040bb:	7e 12                	jle    100040cf <firstRun(bool)+0x1756>
100040bd:	a0 00 00 00 00       	mov    al,ds:0x0	100040be: R_386_32	installKey
100040c2:	3c 20                	cmp    al,0x20
100040c4:	74 09                	je     100040cf <firstRun(bool)+0x1756>
100040c6:	a0 00 00 00 00       	mov    al,ds:0x0	100040c7: R_386_32	installKey
100040cb:	3c 04                	cmp    al,0x4
100040cd:	75 04                	jne    100040d3 <firstRun(bool)+0x175a>
100040cf:	b0 01                	mov    al,0x1
100040d1:	eb 02                	jmp    100040d5 <firstRun(bool)+0x175c>
100040d3:	b0 00                	mov    al,0x0
100040d5:	84 c0                	test   al,al
100040d7:	0f 84 a3 00 00 00    	je     10004180 <firstRun(bool)+0x1807>
100040dd:	a0 00 00 00 00       	mov    al,ds:0x0	100040de: R_386_32	installKey
100040e2:	3c 2f                	cmp    al,0x2f
100040e4:	7e 09                	jle    100040ef <firstRun(bool)+0x1776>
100040e6:	a0 00 00 00 00       	mov    al,ds:0x0	100040e7: R_386_32	installKey
100040eb:	3c 39                	cmp    al,0x39
100040ed:	7e 24                	jle    10004113 <firstRun(bool)+0x179a>
100040ef:	a0 00 00 00 00       	mov    al,ds:0x0	100040f0: R_386_32	installKey
100040f4:	3c 40                	cmp    al,0x40
100040f6:	7e 09                	jle    10004101 <firstRun(bool)+0x1788>
100040f8:	a0 00 00 00 00       	mov    al,ds:0x0	100040f9: R_386_32	installKey
100040fd:	3c 5a                	cmp    al,0x5a
100040ff:	7e 12                	jle    10004113 <firstRun(bool)+0x179a>
10004101:	a0 00 00 00 00       	mov    al,ds:0x0	10004102: R_386_32	installKey
10004106:	3c 60                	cmp    al,0x60
10004108:	7e 0d                	jle    10004117 <firstRun(bool)+0x179e>
1000410a:	a0 00 00 00 00       	mov    al,ds:0x0	1000410b: R_386_32	installKey
1000410f:	3c 7a                	cmp    al,0x7a
10004111:	7f 04                	jg     10004117 <firstRun(bool)+0x179e>
10004113:	b0 01                	mov    al,0x1
10004115:	eb 02                	jmp    10004119 <firstRun(bool)+0x17a0>
10004117:	b0 00                	mov    al,0x0
10004119:	84 c0                	test   al,al
1000411b:	74 2c                	je     10004149 <firstRun(bool)+0x17d0>
1000411d:	a0 00 00 00 00       	mov    al,ds:0x0	1000411e: R_386_32	installKey
10004122:	3c 60                	cmp    al,0x60
10004124:	7e 13                	jle    10004139 <firstRun(bool)+0x17c0>
10004126:	a0 00 00 00 00       	mov    al,ds:0x0	10004127: R_386_32	installKey
1000412b:	3c 7a                	cmp    al,0x7a
1000412d:	7f 0a                	jg     10004139 <firstRun(bool)+0x17c0>
1000412f:	a0 00 00 00 00       	mov    al,ds:0x0	10004130: R_386_32	installKey
10004134:	83 e8 20             	sub    eax,0x20
10004137:	eb 05                	jmp    1000413e <firstRun(bool)+0x17c5>
10004139:	a0 00 00 00 00       	mov    al,ds:0x0	1000413a: R_386_32	installKey
1000413e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10004141:	81 c2 00 00 00 00    	add    edx,0x0	10004143: R_386_32	pkeybuf
10004147:	88 02                	mov    BYTE PTR [edx],al
10004149:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
1000414c:	83 ec 0c             	sub    esp,0xc
1000414f:	68 00 00 00 00       	push   0x0	10004150: R_386_32	pkeybuf
10004154:	e8 fc ff ff ff       	call   10004155 <firstRun(bool)+0x17dc>	10004155: R_386_PC32	strlen
10004159:	83 c4 10             	add    esp,0x10
1000415c:	89 c2                	mov    edx,eax
1000415e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10004161:	39 c2                	cmp    edx,eax
10004163:	77 07                	ja     1000416c <firstRun(bool)+0x17f3>
10004165:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
1000416c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
1000416f:	05 00 00 00 00       	add    eax,0x0	10004170: R_386_32	pkeybuf
10004174:	8a 00                	mov    al,BYTE PTR [eax]
10004176:	3c 2d                	cmp    al,0x2d
10004178:	0f 85 64 02 00 00    	jne    100043e2 <firstRun(bool)+0x1a69>
1000417e:	eb c9                	jmp    10004149 <firstRun(bool)+0x17d0>
10004180:	a0 00 00 00 00       	mov    al,ds:0x0	10004181: R_386_32	installKey
10004185:	3c 0a                	cmp    al,0xa
10004187:	0f 94 c0             	sete   al
1000418a:	84 c0                	test   al,al
1000418c:	0f 84 50 02 00 00    	je     100043e2 <firstRun(bool)+0x1a69>
10004192:	83 ec 0c             	sub    esp,0xc
10004195:	68 00 00 00 00       	push   0x0	10004196: R_386_32	pkeybuf
1000419a:	e8 fc ff ff ff       	call   1000419b <firstRun(bool)+0x1822>	1000419b: R_386_PC32	checkExtendedKey(char*)
1000419f:	83 c4 10             	add    esp,0x10
100041a2:	85 c0                	test   eax,eax
100041a4:	0f 95 c0             	setne  al
100041a7:	88 45 a7             	mov    BYTE PTR [ebp-0x59],al
100041aa:	80 7d a7 00          	cmp    BYTE PTR [ebp-0x59],0x0
100041ae:	74 5b                	je     1000420b <firstRun(bool)+0x1892>
100041b0:	83 ec 0c             	sub    esp,0xc
100041b3:	68 f0 0a 00 00       	push   0xaf0
100041b8:	e8 fc ff ff ff       	call   100041b9 <firstRun(bool)+0x1840>	100041b9: R_386_PC32	milliTenthSleep(unsigned int)
100041bd:	83 c4 10             	add    esp,0x10
100041c0:	e8 fc ff ff ff       	call   100041c1 <firstRun(bool)+0x1848>	100041c1: R_386_PC32	drawBootScreen()
100041c5:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100041c7: R_386_32	installKey
100041cc:	83 ec 0c             	sub    esp,0xc
100041cf:	68 84 03 00 00       	push   0x384
100041d4:	e8 fc ff ff ff       	call   100041d5 <firstRun(bool)+0x185c>	100041d5: R_386_PC32	milliTenthSleep(unsigned int)
100041d9:	83 c4 10             	add    esp,0x10
100041dc:	e8 fc ff ff ff       	call   100041dd <firstRun(bool)+0x1864>	100041dd: R_386_PC32	drawBootScreen()
100041e1:	83 ec 0c             	sub    esp,0xc
100041e4:	68 c0 12 00 00       	push   0x12c0
100041e9:	e8 fc ff ff ff       	call   100041ea <firstRun(bool)+0x1871>	100041ea: R_386_PC32	milliTenthSleep(unsigned int)
100041ee:	83 c4 10             	add    esp,0x10
100041f1:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100041f3: R_386_32	installKey
100041f8:	90                   	nop
100041f9:	80 bd 34 ff ff ff 00 	cmp    BYTE PTR [ebp-0xcc],0x0
10004200:	0f 84 e8 01 00 00    	je     100043ee <firstRun(bool)+0x1a75>
10004206:	e9 d2 02 00 00       	jmp    100044dd <firstRun(bool)+0x1b64>
1000420b:	83 ec 0c             	sub    esp,0xc
1000420e:	68 f0 0a 00 00       	push   0xaf0
10004213:	e8 fc ff ff ff       	call   10004214 <firstRun(bool)+0x189b>	10004214: R_386_PC32	milliTenthSleep(unsigned int)
10004218:	83 c4 10             	add    esp,0x10
1000421b:	e8 fc ff ff ff       	call   1000421c <firstRun(bool)+0x18a3>	1000421c: R_386_PC32	drawBootScreen()
10004220:	83 ec 08             	sub    esp,0x8
10004223:	6a 01                	push   0x1
10004225:	68 64 54 00 10       	push   0x10005464	10004226: R_386_32	.text
1000422a:	6a 0e                	push   0xe
1000422c:	6a 32                	push   0x32
1000422e:	6a 02                	push   0x2
10004230:	6a 16                	push   0x16
10004232:	e8 fc ff ff ff       	call   10004233 <firstRun(bool)+0x18ba>	10004233: R_386_PC32	drawBasicWindowX(int, int, int, int, char const*, bool)
10004237:	83 c4 20             	add    esp,0x20
1000423a:	a1 00 00 00 00       	mov    eax,ds:0x0	1000423b: R_386_32	term
1000423f:	83 ec 04             	sub    esp,0x4
10004242:	6a 05                	push   0x5
10004244:	6a 18                	push   0x18
10004246:	50                   	push   eax
10004247:	e8 fc ff ff ff       	call   10004248 <firstRun(bool)+0x18cf>	10004248: R_386_PC32	VgaText::setCursor(int, int)
1000424c:	83 c4 10             	add    esp,0x10
1000424f:	a1 00 00 00 00       	mov    eax,ds:0x0	10004250: R_386_32	term
10004254:	6a 07                	push   0x7
10004256:	6a 00                	push   0x0
10004258:	68 70 54 00 10       	push   0x10005470	10004259: R_386_32	.text
1000425d:	50                   	push   eax
1000425e:	e8 fc ff ff ff       	call   1000425f <firstRun(bool)+0x18e6>	1000425f: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10004263:	83 c4 10             	add    esp,0x10
10004266:	a1 00 00 00 00       	mov    eax,ds:0x0	10004267: R_386_32	term
1000426b:	83 ec 04             	sub    esp,0x4
1000426e:	6a 06                	push   0x6
10004270:	6a 18                	push   0x18
10004272:	50                   	push   eax
10004273:	e8 fc ff ff ff       	call   10004274 <firstRun(bool)+0x18fb>	10004274: R_386_PC32	VgaText::setCursor(int, int)
10004278:	83 c4 10             	add    esp,0x10
1000427b:	a1 00 00 00 00       	mov    eax,ds:0x0	1000427c: R_386_32	term
10004280:	6a 07                	push   0x7
10004282:	6a 00                	push   0x0
10004284:	68 44 53 00 10       	push   0x10005344	10004285: R_386_32	.text
10004289:	50                   	push   eax
1000428a:	e8 fc ff ff ff       	call   1000428b <firstRun(bool)+0x1912>	1000428b: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
1000428f:	83 c4 10             	add    esp,0x10
10004292:	a1 00 00 00 00       	mov    eax,ds:0x0	10004293: R_386_32	term
10004297:	83 ec 04             	sub    esp,0x4
1000429a:	6a 08                	push   0x8
1000429c:	6a 1c                	push   0x1c
1000429e:	50                   	push   eax
1000429f:	e8 fc ff ff ff       	call   100042a0 <firstRun(bool)+0x1927>	100042a0: R_386_PC32	VgaText::setCursor(int, int)
100042a4:	83 c4 10             	add    esp,0x10
100042a7:	a1 00 00 00 00       	mov    eax,ds:0x0	100042a8: R_386_32	term
100042ac:	6a 07                	push   0x7
100042ae:	6a 00                	push   0x0
100042b0:	68 00 00 00 00       	push   0x0	100042b1: R_386_32	pkeybuf
100042b5:	50                   	push   eax
100042b6:	e8 fc ff ff ff       	call   100042b7 <firstRun(bool)+0x193e>	100042b7: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
100042bb:	83 c4 10             	add    esp,0x10
100042be:	a1 00 00 00 00       	mov    eax,ds:0x0	100042bf: R_386_32	term
100042c3:	83 ec 04             	sub    esp,0x4
100042c6:	6a 08                	push   0x8
100042c8:	6a 2c                	push   0x2c
100042ca:	50                   	push   eax
100042cb:	e8 fc ff ff ff       	call   100042cc <firstRun(bool)+0x1953>	100042cc: R_386_PC32	VgaText::setCursor(int, int)
100042d0:	83 c4 10             	add    esp,0x10
100042d3:	a1 00 00 00 00       	mov    eax,ds:0x0	100042d4: R_386_32	term
100042d8:	6a 07                	push   0x7
100042da:	6a 07                	push   0x7
100042dc:	6a 20                	push   0x20
100042de:	50                   	push   eax
100042df:	e8 fc ff ff ff       	call   100042e0 <firstRun(bool)+0x1967>	100042e0: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
100042e4:	83 c4 10             	add    esp,0x10
100042e7:	a1 00 00 00 00       	mov    eax,ds:0x0	100042e8: R_386_32	term
100042ec:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
100042ef:	83 c2 1c             	add    edx,0x1c
100042f2:	83 ec 04             	sub    esp,0x4
100042f5:	6a 08                	push   0x8
100042f7:	52                   	push   edx
100042f8:	50                   	push   eax
100042f9:	e8 fc ff ff ff       	call   100042fa <firstRun(bool)+0x1981>	100042fa: R_386_PC32	VgaText::setCursor(int, int)
100042fe:	83 c4 10             	add    esp,0x10
10004301:	83 ec 0c             	sub    esp,0xc
10004304:	68 a2 53 00 10       	push   0x100053a2	10004305: R_386_32	.text
10004309:	6a 0b                	push   0xb
1000430b:	6a 2b                	push   0x2b
1000430d:	6a 0a                	push   0xa
1000430f:	6a 22                	push   0x22
10004311:	e8 fc ff ff ff       	call   10004312 <firstRun(bool)+0x1999>	10004312: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
10004316:	83 c4 20             	add    esp,0x20
10004319:	a1 00 00 00 00       	mov    eax,ds:0x0	1000431a: R_386_32	term
1000431e:	83 ec 04             	sub    esp,0x4
10004321:	6a 0d                	push   0xd
10004323:	6a 24                	push   0x24
10004325:	50                   	push   eax
10004326:	e8 fc ff ff ff       	call   10004327 <firstRun(bool)+0x19ae>	10004327: R_386_PC32	VgaText::setCursor(int, int)
1000432b:	83 c4 10             	add    esp,0x10
1000432e:	a1 00 00 00 00       	mov    eax,ds:0x0	1000432f: R_386_32	term
10004333:	83 ec 08             	sub    esp,0x8
10004336:	68 98 54 00 10       	push   0x10005498	10004337: R_386_32	.text
1000433b:	50                   	push   eax
1000433c:	e8 fc ff ff ff       	call   1000433d <firstRun(bool)+0x19c4>	1000433d: R_386_PC32	VgaText::puts(char const*)
10004341:	83 c4 10             	add    esp,0x10
10004344:	a1 00 00 00 00       	mov    eax,ds:0x0	10004345: R_386_32	term
10004349:	83 ec 04             	sub    esp,0x4
1000434c:	6a 0f                	push   0xf
1000434e:	6a 24                	push   0x24
10004350:	50                   	push   eax
10004351:	e8 fc ff ff ff       	call   10004352 <firstRun(bool)+0x19d9>	10004352: R_386_PC32	VgaText::setCursor(int, int)
10004356:	83 c4 10             	add    esp,0x10
10004359:	a1 00 00 00 00       	mov    eax,ds:0x0	1000435a: R_386_32	term
1000435e:	83 ec 08             	sub    esp,0x8
10004361:	68 c0 54 00 10       	push   0x100054c0	10004362: R_386_32	.text
10004366:	50                   	push   eax
10004367:	e8 fc ff ff ff       	call   10004368 <firstRun(bool)+0x19ef>	10004368: R_386_PC32	VgaText::puts(char const*)
1000436c:	83 c4 10             	add    esp,0x10
1000436f:	a1 00 00 00 00       	mov    eax,ds:0x0	10004370: R_386_32	term
10004374:	83 ec 04             	sub    esp,0x4
10004377:	6a 10                	push   0x10
10004379:	6a 24                	push   0x24
1000437b:	50                   	push   eax
1000437c:	e8 fc ff ff ff       	call   1000437d <firstRun(bool)+0x1a04>	1000437d: R_386_PC32	VgaText::setCursor(int, int)
10004381:	83 c4 10             	add    esp,0x10
10004384:	a1 00 00 00 00       	mov    eax,ds:0x0	10004385: R_386_32	term
10004389:	83 ec 08             	sub    esp,0x8
1000438c:	68 e4 54 00 10       	push   0x100054e4	1000438d: R_386_32	.text
10004391:	50                   	push   eax
10004392:	e8 fc ff ff ff       	call   10004393 <firstRun(bool)+0x1a1a>	10004393: R_386_PC32	VgaText::puts(char const*)
10004397:	83 c4 10             	add    esp,0x10
1000439a:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	1000439c: R_386_32	installKey
100043a1:	83 ec 0c             	sub    esp,0xc
100043a4:	68 94 11 00 00       	push   0x1194
100043a9:	e8 fc ff ff ff       	call   100043aa <firstRun(bool)+0x1a31>	100043aa: R_386_PC32	milliTenthSleep(unsigned int)
100043ae:	83 c4 10             	add    esp,0x10
100043b1:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100043b3: R_386_32	installKey
100043b8:	a0 00 00 00 00       	mov    al,ds:0x0	100043b9: R_386_32	installKey
100043bd:	84 c0                	test   al,al
100043bf:	0f 94 c0             	sete   al
100043c2:	84 c0                	test   al,al
100043c4:	74 02                	je     100043c8 <firstRun(bool)+0x1a4f>
100043c6:	eb f0                	jmp    100043b8 <firstRun(bool)+0x1a3f>
100043c8:	e8 fc ff ff ff       	call   100043c9 <firstRun(bool)+0x1a50>	100043c9: R_386_PC32	drawBootScreen()
100043cd:	83 ec 0c             	sub    esp,0xc
100043d0:	68 9c 18 00 00       	push   0x189c
100043d5:	e8 fc ff ff ff       	call   100043d6 <firstRun(bool)+0x1a5d>	100043d6: R_386_PC32	milliTenthSleep(unsigned int)
100043da:	83 c4 10             	add    esp,0x10
100043dd:	e9 e3 fa ff ff       	jmp    10003ec5 <firstRun(bool)+0x154c>
100043e2:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100043e4: R_386_32	installKey
100043e9:	e9 51 fb ff ff       	jmp    10003f3f <firstRun(bool)+0x15c6>
100043ee:	e8 fc ff ff ff       	call   100043ef <firstRun(bool)+0x1a76>	100043ef: R_386_PC32	drawBootScreen()
100043f3:	83 ec 0c             	sub    esp,0xc
100043f6:	68 05 55 00 10       	push   0x10005505	100043f7: R_386_32	.text
100043fb:	6a 0d                	push   0xd
100043fd:	6a 32                	push   0x32
100043ff:	6a 05                	push   0x5
10004401:	6a 16                	push   0x16
10004403:	e8 fc ff ff ff       	call   10004404 <firstRun(bool)+0x1a8b>	10004404: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
10004408:	83 c4 20             	add    esp,0x20
1000440b:	83 ec 0c             	sub    esp,0xc
1000440e:	6a 00                	push   0x0
10004410:	e8 fc ff ff ff       	call   10004411 <firstRun(bool)+0x1a98>	10004411: R_386_PC32	bootInstallTasks(int)
10004415:	83 c4 10             	add    esp,0x10
10004418:	83 ec 04             	sub    esp,0x4
1000441b:	6a 0c                	push   0xc
1000441d:	68 1d 55 00 10       	push   0x1000551d	1000441e: R_386_32	.text
10004422:	68 2e 55 00 10       	push   0x1000552e	10004423: R_386_32	.text
10004427:	e8 fc ff ff ff       	call   10004428 <firstRun(bool)+0x1aaf>	10004428: R_386_PC32	Reg::readIntWithDefault(char*, char*, int)
1000442c:	83 c4 10             	add    esp,0x10
1000442f:	89 45 a0             	mov    DWORD PTR [ebp-0x60],eax
10004432:	83 ec 0c             	sub    esp,0xc
10004435:	ff 75 a0             	push   DWORD PTR [ebp-0x60]
10004438:	e8 fc ff ff ff       	call   10004439 <firstRun(bool)+0x1ac0>	10004439: R_386_PC32	Virt::setupPageSwapping(int)
1000443d:	83 c4 10             	add    esp,0x10
10004440:	83 ec 0c             	sub    esp,0xc
10004443:	6a 01                	push   0x1
10004445:	e8 fc ff ff ff       	call   10004446 <firstRun(bool)+0x1acd>	10004446: R_386_PC32	bootInstallTasks(int)
1000444a:	83 c4 10             	add    esp,0x10
1000444d:	83 ec 0c             	sub    esp,0xc
10004450:	68 35 55 00 10       	push   0x10005535	10004451: R_386_32	.text
10004455:	e8 fc ff ff ff       	call   10004456 <firstRun(bool)+0x1add>	10004456: R_386_PC32	rmtree(char*)
1000445a:	83 c4 10             	add    esp,0x10
1000445d:	83 ec 0c             	sub    esp,0xc
10004460:	68 4f 55 00 10       	push   0x1000554f	10004461: R_386_32	.text
10004465:	e8 fc ff ff ff       	call   10004466 <firstRun(bool)+0x1aed>	10004466: R_386_PC32	rmtree(char*)
1000446a:	83 c4 10             	add    esp,0x10
1000446d:	83 ec 08             	sub    esp,0x8
10004470:	68 c0 01 00 00       	push   0x1c0
10004475:	68 35 55 00 10       	push   0x10005535	10004476: R_386_32	.text
1000447a:	e8 fc ff ff ff       	call   1000447b <firstRun(bool)+0x1b02>	1000447b: R_386_PC32	mkdir(char const*, int)
1000447f:	83 c4 10             	add    esp,0x10
10004482:	83 ec 08             	sub    esp,0x8
10004485:	68 c0 01 00 00       	push   0x1c0
1000448a:	68 4f 55 00 10       	push   0x1000554f	1000448b: R_386_32	.text
1000448f:	e8 fc ff ff ff       	call   10004490 <firstRun(bool)+0x1b17>	10004490: R_386_PC32	mkdir(char const*, int)
10004494:	83 c4 10             	add    esp,0x10
10004497:	83 ec 08             	sub    esp,0x8
1000449a:	68 35 55 00 10       	push   0x10005535	1000449b: R_386_32	.text
1000449f:	68 68 55 00 10       	push   0x10005568	100044a0: R_386_32	.text
100044a4:	e8 fc ff ff ff       	call   100044a5 <firstRun(bool)+0x1b2c>	100044a5: R_386_PC32	copytree(char*, char*)
100044a9:	83 c4 10             	add    esp,0x10
100044ac:	83 ec 0c             	sub    esp,0xc
100044af:	6a 02                	push   0x2
100044b1:	e8 fc ff ff ff       	call   100044b2 <firstRun(bool)+0x1b39>	100044b2: R_386_PC32	bootInstallTasks(int)
100044b6:	83 c4 10             	add    esp,0x10
100044b9:	83 ec 0c             	sub    esp,0xc
100044bc:	68 00 00 00 00       	push   0x0	100044bd: R_386_32	currName
100044c1:	e8 fc ff ff ff       	call   100044c2 <firstRun(bool)+0x1b49>	100044c2: R_386_PC32	createUser(char const*)
100044c6:	83 c4 10             	add    esp,0x10
100044c9:	83 ec 0c             	sub    esp,0xc
100044cc:	6a 03                	push   0x3
100044ce:	e8 fc ff ff ff       	call   100044cf <firstRun(bool)+0x1b56>	100044cf: R_386_PC32	bootInstallTasks(int)
100044d3:	83 c4 10             	add    esp,0x10
100044d6:	c6 05 00 00 00 00 01 	mov    BYTE PTR ds:0x0,0x1	100044d8: R_386_32	VgaText::hiddenOut
100044dd:	8d 65 f8             	lea    esp,[ebp-0x8]
100044e0:	5b                   	pop    ebx
100044e1:	5e                   	pop    esi
100044e2:	5d                   	pop    ebp
100044e3:	c3                   	ret    

100044e4 <loadExtensions()>:
100044e4:	55                   	push   ebp
100044e5:	89 e5                	mov    ebp,esp
100044e7:	83 ec 08             	sub    esp,0x8
100044ea:	83 ec 0c             	sub    esp,0xc
100044ed:	68 89 55 00 10       	push   0x10005589	100044ee: R_386_32	.text
100044f2:	e8 fc ff ff ff       	call   100044f3 <loadExtensions()+0xf>	100044f3: R_386_PC32	KeSetBootMessage(char const*)
100044f7:	83 c4 10             	add    esp,0x10
100044fa:	90                   	nop
100044fb:	c9                   	leave  
100044fc:	c3                   	ret    

100044fd <rgtree(Reghive_Tag*, int, int)>:
100044fd:	55                   	push   ebp
100044fe:	89 e5                	mov    ebp,esp
10004500:	53                   	push   ebx
10004501:	83 ec 44             	sub    esp,0x44
10004504:	83 7d 0c 01          	cmp    DWORD PTR [ebp+0xc],0x1
10004508:	75 16                	jne    10004520 <rgtree(Reghive_Tag*, int, int)+0x23>
1000450a:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
1000450e:	75 10                	jne    10004520 <rgtree(Reghive_Tag*, int, int)+0x23>
10004510:	83 ec 0c             	sub    esp,0xc
10004513:	68 9f 55 00 10       	push   0x1000559f	10004514: R_386_32	.text
10004518:	e8 fc ff ff ff       	call   10004519 <rgtree(Reghive_Tag*, int, int)+0x1c>	10004519: R_386_PC32	Dbg::kprintf(char const*, ...)
1000451d:	83 c4 10             	add    esp,0x10
10004520:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
10004524:	0f 8e a9 00 00 00    	jle    100045d3 <rgtree(Reghive_Tag*, int, int)+0xd6>
1000452a:	83 ec 04             	sub    esp,0x4
1000452d:	6a 32                	push   0x32
1000452f:	6a 00                	push   0x0
10004531:	8d 45 be             	lea    eax,[ebp-0x42]
10004534:	50                   	push   eax
10004535:	e8 fc ff ff ff       	call   10004536 <rgtree(Reghive_Tag*, int, int)+0x39>	10004536: R_386_PC32	memset
1000453a:	83 c4 10             	add    esp,0x10
1000453d:	83 ec 04             	sub    esp,0x4
10004540:	8d 45 be             	lea    eax,[ebp-0x42]
10004543:	50                   	push   eax
10004544:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10004547:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000454a:	e8 fc ff ff ff       	call   1000454b <rgtree(Reghive_Tag*, int, int)+0x4e>	1000454b: R_386_PC32	CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)
1000454f:	83 c4 10             	add    esp,0x10
10004552:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10004555:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
1000455c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
1000455f:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
10004562:	7d 15                	jge    10004579 <rgtree(Reghive_Tag*, int, int)+0x7c>
10004564:	83 ec 0c             	sub    esp,0xc
10004567:	68 0d 52 00 10       	push   0x1000520d	10004568: R_386_32	.text
1000456c:	e8 fc ff ff ff       	call   1000456d <rgtree(Reghive_Tag*, int, int)+0x70>	1000456d: R_386_PC32	Dbg::kprintf(char const*, ...)
10004571:	83 c4 10             	add    esp,0x10
10004574:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10004577:	eb e3                	jmp    1000455c <rgtree(Reghive_Tag*, int, int)+0x5f>
10004579:	83 ec 08             	sub    esp,0x8
1000457c:	8d 45 be             	lea    eax,[ebp-0x42]
1000457f:	50                   	push   eax
10004580:	68 a4 55 00 10       	push   0x100055a4	10004581: R_386_32	.text
10004585:	e8 fc ff ff ff       	call   10004586 <rgtree(Reghive_Tag*, int, int)+0x89>	10004586: R_386_PC32	Dbg::kprintf(char const*, ...)
1000458a:	83 c4 10             	add    esp,0x10
1000458d:	83 7d f0 4e          	cmp    DWORD PTR [ebp-0x10],0x4e
10004591:	75 27                	jne    100045ba <rgtree(Reghive_Tag*, int, int)+0xbd>
10004593:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
10004596:	8d 58 04             	lea    ebx,[eax+0x4]
10004599:	83 ec 08             	sub    esp,0x8
1000459c:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
1000459f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100045a2:	e8 fc ff ff ff       	call   100045a3 <rgtree(Reghive_Tag*, int, int)+0xa6>	100045a3: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
100045a7:	83 c4 10             	add    esp,0x10
100045aa:	83 ec 04             	sub    esp,0x4
100045ad:	53                   	push   ebx
100045ae:	50                   	push   eax
100045af:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100045b2:	e8 fc ff ff ff       	call   100045b3 <rgtree(Reghive_Tag*, int, int)+0xb6>	100045b3: R_386_PC32	rgtree(Reghive_Tag*, int, int)
100045b7:	83 c4 10             	add    esp,0x10
100045ba:	83 ec 08             	sub    esp,0x8
100045bd:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
100045c0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100045c3:	e8 fc ff ff ff       	call   100045c4 <rgtree(Reghive_Tag*, int, int)+0xc7>	100045c4: R_386_PC32	CmGetNext(Reghive_Tag*, int)
100045c8:	83 c4 10             	add    esp,0x10
100045cb:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
100045ce:	e9 4d ff ff ff       	jmp    10004520 <rgtree(Reghive_Tag*, int, int)+0x23>
100045d3:	90                   	nop
100045d4:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
100045d7:	c9                   	leave  
100045d8:	c3                   	ret    

100045d9 <begin(void*)>:
100045d9:	55                   	push   ebp
100045da:	89 e5                	mov    ebp,esp
100045dc:	57                   	push   edi
100045dd:	56                   	push   esi
100045de:	53                   	push   ebx
100045df:	81 ec ac 02 00 00    	sub    esp,0x2ac
100045e5:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
100045e9:	83 ec 0c             	sub    esp,0xc
100045ec:	68 14 01 00 00       	push   0x114
100045f1:	e8 fc ff ff ff       	call   100045f2 <begin(void*)+0x19>	100045f2: R_386_PC32	operator new(unsigned long)
100045f6:	83 c4 10             	add    esp,0x10
100045f9:	89 c3                	mov    ebx,eax
100045fb:	a1 00 00 00 00       	mov    eax,ds:0x0	100045fc: R_386_32	kernelProcess
10004600:	83 ec 04             	sub    esp,0x4
10004603:	50                   	push   eax
10004604:	68 a9 55 00 10       	push   0x100055a9	10004605: R_386_32	.text
10004609:	53                   	push   ebx
1000460a:	e8 fc ff ff ff       	call   1000460b <begin(void*)+0x32>	1000460b: R_386_PC32	File::File(char const*, Process*)
1000460f:	83 c4 10             	add    esp,0x10
10004612:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
10004615:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
10004619:	75 10                	jne    1000462b <begin(void*)+0x52>
1000461b:	83 ec 0c             	sub    esp,0xc
1000461e:	68 c7 55 00 10       	push   0x100055c7	1000461f: R_386_32	.text
10004623:	e8 fc ff ff ff       	call   10004624 <begin(void*)+0x4b>	10004624: R_386_PC32	KePanic(char const*)
10004628:	83 c4 10             	add    esp,0x10
1000462b:	83 ec 08             	sub    esp,0x8
1000462e:	6a 01                	push   0x1
10004630:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10004633:	e8 fc ff ff ff       	call   10004634 <begin(void*)+0x5b>	10004634: R_386_PC32	File::open(FileOpenMode)
10004638:	83 c4 10             	add    esp,0x10
1000463b:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
1000463e:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
10004642:	75 10                	jne    10004654 <begin(void*)+0x7b>
10004644:	83 ec 0c             	sub    esp,0xc
10004647:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
1000464a:	e8 fc ff ff ff       	call   1000464b <begin(void*)+0x72>	1000464b: R_386_PC32	File::close()
1000464f:	83 c4 10             	add    esp,0x10
10004652:	eb 04                	jmp    10004658 <begin(void*)+0x7f>
10004654:	c6 45 e7 01          	mov    BYTE PTR [ebp-0x19],0x1
10004658:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
1000465c:	74 15                	je     10004673 <begin(void*)+0x9a>
1000465e:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10004661:	8b 00                	mov    eax,DWORD PTR [eax]
10004663:	83 c0 08             	add    eax,0x8
10004666:	8b 00                	mov    eax,DWORD PTR [eax]
10004668:	83 ec 0c             	sub    esp,0xc
1000466b:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
1000466e:	ff d0                	call   eax
10004670:	83 c4 10             	add    esp,0x10
10004673:	c6 05 00 00 00 00 01 	mov    BYTE PTR ds:0x0,0x1	10004675: R_386_32	KeIsPreemptionOn
1000467a:	80 7d e7 00          	cmp    BYTE PTR [ebp-0x19],0x0
1000467e:	74 0f                	je     1000468f <begin(void*)+0xb6>
10004680:	83 ec 0c             	sub    esp,0xc
10004683:	6a 00                	push   0x0
10004685:	e8 fc ff ff ff       	call   10004686 <begin(void*)+0xad>	10004686: R_386_PC32	firstRun(bool)
1000468a:	83 c4 10             	add    esp,0x10
1000468d:	eb 05                	jmp    10004694 <begin(void*)+0xbb>
1000468f:	e8 fc ff ff ff       	call   10004690 <begin(void*)+0xb7>	10004690: R_386_PC32	loadExtensions()
10004694:	8d 45 ac             	lea    eax,[ebp-0x54]
10004697:	bb 08 58 00 10       	mov    ebx,0x10005808	10004698: R_386_32	.text
1000469c:	ba 04 00 00 00       	mov    edx,0x4
100046a1:	89 c7                	mov    edi,eax
100046a3:	89 de                	mov    esi,ebx
100046a5:	89 d1                	mov    ecx,edx
100046a7:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100046a9:	80 7d e7 00          	cmp    BYTE PTR [ebp-0x19],0x0
100046ad:	0f 84 4d 05 00 00    	je     10004c00 <begin(void*)+0x627>
100046b3:	83 ec 0c             	sub    esp,0xc
100046b6:	68 24 07 00 00       	push   0x724
100046bb:	e8 fc ff ff ff       	call   100046bc <begin(void*)+0xe3>	100046bc: R_386_PC32	operator new(unsigned long)
100046c0:	83 c4 10             	add    esp,0x10
100046c3:	89 c3                	mov    ebx,eax
100046c5:	8d 45 ac             	lea    eax,[ebp-0x54]
100046c8:	50                   	push   eax
100046c9:	6a 00                	push   0x0
100046cb:	68 d7 55 00 10       	push   0x100055d7	100046cc: R_386_32	.text
100046d0:	53                   	push   ebx
100046d1:	e8 fc ff ff ff       	call   100046d2 <begin(void*)+0xf9>	100046d2: R_386_PC32	Process::Process(char const*, Process*, char**)
100046d6:	83 c4 10             	add    esp,0x10
100046d9:	89 5d d0             	mov    DWORD PTR [ebp-0x30],ebx
100046dc:	83 ec 0c             	sub    esp,0xc
100046df:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
100046e2:	e8 fc ff ff ff       	call   100046e3 <begin(void*)+0x10a>	100046e3: R_386_PC32	Process::createUserThread()
100046e7:	83 c4 10             	add    esp,0x10
100046ea:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100046ec: R_386_32	VgaText::hiddenOut
100046f1:	a1 00 00 00 00       	mov    eax,ds:0x0	100046f2: R_386_32	term
100046f6:	83 ec 0c             	sub    esp,0xc
100046f9:	50                   	push   eax
100046fa:	e8 fc ff ff ff       	call   100046fb <begin(void*)+0x122>	100046fb: R_386_PC32	setActiveTerminal(VgaText*)
100046ff:	83 c4 10             	add    esp,0x10
10004702:	e8 fc ff ff ff       	call   10004703 <begin(void*)+0x12a>	10004703: R_386_PC32	drawBootScreen()
10004707:	83 ec 0c             	sub    esp,0xc
1000470a:	68 05 55 00 10       	push   0x10005505	1000470b: R_386_32	.text
1000470f:	6a 0d                	push   0xd
10004711:	6a 32                	push   0x32
10004713:	6a 05                	push   0x5
10004715:	6a 16                	push   0x16
10004717:	e8 fc ff ff ff       	call   10004718 <begin(void*)+0x13f>	10004718: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
1000471c:	83 c4 20             	add    esp,0x20
1000471f:	83 ec 0c             	sub    esp,0xc
10004722:	6a 03                	push   0x3
10004724:	e8 fc ff ff ff       	call   10004725 <begin(void*)+0x14c>	10004725: R_386_PC32	bootInstallTasks(int)
10004729:	83 c4 10             	add    esp,0x10
1000472c:	c6 05 00 00 00 00 01 	mov    BYTE PTR ds:0x0,0x1	1000472e: R_386_32	VgaText::hiddenOut
10004733:	83 ec 0c             	sub    esp,0xc
10004736:	68 14 01 00 00       	push   0x114
1000473b:	e8 fc ff ff ff       	call   1000473c <begin(void*)+0x163>	1000473c: R_386_PC32	operator new(unsigned long)
10004740:	83 c4 10             	add    esp,0x10
10004743:	89 c3                	mov    ebx,eax
10004745:	a1 00 00 00 00       	mov    eax,ds:0x0	10004746: R_386_32	kernelProcess
1000474a:	83 ec 04             	sub    esp,0x4
1000474d:	50                   	push   eax
1000474e:	68 f4 55 00 10       	push   0x100055f4	1000474f: R_386_32	.text
10004753:	53                   	push   ebx
10004754:	e8 fc ff ff ff       	call   10004755 <begin(void*)+0x17c>	10004755: R_386_PC32	File::File(char const*, Process*)
10004759:	83 c4 10             	add    esp,0x10
1000475c:	89 5d cc             	mov    DWORD PTR [ebp-0x34],ebx
1000475f:	83 ec 08             	sub    esp,0x8
10004762:	6a 01                	push   0x1
10004764:	ff 75 cc             	push   DWORD PTR [ebp-0x34]
10004767:	e8 fc ff ff ff       	call   10004768 <begin(void*)+0x18f>	10004768: R_386_PC32	File::open(FileOpenMode)
1000476c:	83 c4 10             	add    esp,0x10
1000476f:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
10004772:	83 7d c8 00          	cmp    DWORD PTR [ebp-0x38],0x0
10004776:	75 39                	jne    100047b1 <begin(void*)+0x1d8>
10004778:	83 ec 0c             	sub    esp,0xc
1000477b:	ff 75 cc             	push   DWORD PTR [ebp-0x34]
1000477e:	e8 fc ff ff ff       	call   1000477f <begin(void*)+0x1a6>	1000477f: R_386_PC32	File::close()
10004783:	83 c4 10             	add    esp,0x10
10004786:	83 ec 0c             	sub    esp,0xc
10004789:	ff 75 cc             	push   DWORD PTR [ebp-0x34]
1000478c:	e8 fc ff ff ff       	call   1000478d <begin(void*)+0x1b4>	1000478d: R_386_PC32	File::unlink()
10004791:	83 c4 10             	add    esp,0x10
10004794:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
10004798:	74 44                	je     100047de <begin(void*)+0x205>
1000479a:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
1000479d:	8b 00                	mov    eax,DWORD PTR [eax]
1000479f:	83 c0 08             	add    eax,0x8
100047a2:	8b 00                	mov    eax,DWORD PTR [eax]
100047a4:	83 ec 0c             	sub    esp,0xc
100047a7:	ff 75 cc             	push   DWORD PTR [ebp-0x34]
100047aa:	ff d0                	call   eax
100047ac:	83 c4 10             	add    esp,0x10
100047af:	eb 2d                	jmp    100047de <begin(void*)+0x205>
100047b1:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
100047b5:	74 15                	je     100047cc <begin(void*)+0x1f3>
100047b7:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
100047ba:	8b 00                	mov    eax,DWORD PTR [eax]
100047bc:	83 c0 08             	add    eax,0x8
100047bf:	8b 00                	mov    eax,DWORD PTR [eax]
100047c1:	83 ec 0c             	sub    esp,0xc
100047c4:	ff 75 cc             	push   DWORD PTR [ebp-0x34]
100047c7:	ff d0                	call   eax
100047c9:	83 c4 10             	add    esp,0x10
100047cc:	83 ec 0c             	sub    esp,0xc
100047cf:	6a 01                	push   0x1
100047d1:	e8 fc ff ff ff       	call   100047d2 <begin(void*)+0x1f9>	100047d2: R_386_PC32	sleep(unsigned int)
100047d6:	83 c4 10             	add    esp,0x10
100047d9:	e9 55 ff ff ff       	jmp    10004733 <begin(void*)+0x15a>
100047de:	90                   	nop
100047df:	83 ec 0c             	sub    esp,0xc
100047e2:	6a 02                	push   0x2
100047e4:	e8 fc ff ff ff       	call   100047e5 <begin(void*)+0x20c>	100047e5: R_386_PC32	sleep(unsigned int)
100047e9:	83 c4 10             	add    esp,0x10
100047ec:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100047ee: R_386_32	VgaText::hiddenOut
100047f3:	a1 00 00 00 00       	mov    eax,ds:0x0	100047f4: R_386_32	term
100047f8:	83 ec 0c             	sub    esp,0xc
100047fb:	50                   	push   eax
100047fc:	e8 fc ff ff ff       	call   100047fd <begin(void*)+0x224>	100047fd: R_386_PC32	setActiveTerminal(VgaText*)
10004801:	83 c4 10             	add    esp,0x10
10004804:	e8 fc ff ff ff       	call   10004805 <begin(void*)+0x22c>	10004805: R_386_PC32	drawBootScreen()
10004809:	83 ec 0c             	sub    esp,0xc
1000480c:	68 05 55 00 10       	push   0x10005505	1000480d: R_386_32	.text
10004811:	6a 0d                	push   0xd
10004813:	6a 32                	push   0x32
10004815:	6a 05                	push   0x5
10004817:	6a 16                	push   0x16
10004819:	e8 fc ff ff ff       	call   1000481a <begin(void*)+0x241>	1000481a: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
1000481e:	83 c4 20             	add    esp,0x20
10004821:	83 ec 0c             	sub    esp,0xc
10004824:	6a 04                	push   0x4
10004826:	e8 fc ff ff ff       	call   10004827 <begin(void*)+0x24e>	10004827: R_386_PC32	bootInstallTasks(int)
1000482b:	83 c4 10             	add    esp,0x10
1000482e:	83 ec 08             	sub    esp,0x8
10004831:	68 dd dd 00 00       	push   0xdddd
10004836:	68 fe 55 00 10       	push   0x100055fe	10004837: R_386_32	.text
1000483b:	e8 fc ff ff ff       	call   1000483c <begin(void*)+0x263>	1000483c: R_386_PC32	backupTree(char*, unsigned short)
10004840:	83 c4 10             	add    esp,0x10
10004843:	83 ec 08             	sub    esp,0x8
10004846:	68 ee ee 00 00       	push   0xeeee
1000484b:	68 11 56 00 10       	push   0x10005611	1000484c: R_386_32	.text
10004850:	e8 fc ff ff ff       	call   10004851 <begin(void*)+0x278>	10004851: R_386_PC32	backupTree(char*, unsigned short)
10004855:	83 c4 10             	add    esp,0x10
10004858:	83 ec 08             	sub    esp,0x8
1000485b:	68 ff ff 00 00       	push   0xffff
10004860:	68 23 56 00 10       	push   0x10005623	10004861: R_386_32	.text
10004865:	e8 fc ff ff ff       	call   10004866 <begin(void*)+0x28d>	10004866: R_386_PC32	backupTree(char*, unsigned short)
1000486a:	83 c4 10             	add    esp,0x10
1000486d:	83 ec 0c             	sub    esp,0xc
10004870:	6a 05                	push   0x5
10004872:	e8 fc ff ff ff       	call   10004873 <begin(void*)+0x29a>	10004873: R_386_PC32	bootInstallTasks(int)
10004877:	83 c4 10             	add    esp,0x10
1000487a:	83 ec 0c             	sub    esp,0xc
1000487d:	68 38 56 00 10       	push   0x10005638	1000487e: R_386_32	.text
10004882:	e8 fc ff ff ff       	call   10004883 <begin(void*)+0x2aa>	10004883: R_386_PC32	CmOpen(char const*)
10004887:	83 c4 10             	add    esp,0x10
1000488a:	89 45 c4             	mov    DWORD PTR [ebp-0x3c],eax
1000488d:	83 ec 04             	sub    esp,0x4
10004890:	68 5d 56 00 10       	push   0x1000565d	10004891: R_386_32	.text
10004895:	6a 00                	push   0x0
10004897:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
1000489a:	e8 fc ff ff ff       	call   1000489b <begin(void*)+0x2c2>	1000489b: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
1000489f:	83 c4 10             	add    esp,0x10
100048a2:	83 ec 04             	sub    esp,0x4
100048a5:	6a 00                	push   0x0
100048a7:	6a 01                	push   0x1
100048a9:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
100048ac:	e8 fc ff ff ff       	call   100048ad <begin(void*)+0x2d4>	100048ad: R_386_PC32	rgtree(Reghive_Tag*, int, int)
100048b1:	83 c4 10             	add    esp,0x10
100048b4:	83 ec 08             	sub    esp,0x8
100048b7:	68 5d 56 00 10       	push   0x1000565d	100048b8: R_386_32	.text
100048bc:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
100048bf:	e8 fc ff ff ff       	call   100048c0 <begin(void*)+0x2e7>	100048c0: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100048c4:	83 c4 10             	add    esp,0x10
100048c7:	83 ec 08             	sub    esp,0x8
100048ca:	50                   	push   eax
100048cb:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
100048ce:	e8 fc ff ff ff       	call   100048cf <begin(void*)+0x2f6>	100048cf: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
100048d3:	83 c4 10             	add    esp,0x10
100048d6:	83 ec 04             	sub    esp,0x4
100048d9:	68 64 56 00 10       	push   0x10005664	100048da: R_386_32	.text
100048de:	50                   	push   eax
100048df:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
100048e2:	e8 fc ff ff ff       	call   100048e3 <begin(void*)+0x30a>	100048e3: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
100048e7:	83 c4 10             	add    esp,0x10
100048ea:	83 ec 04             	sub    esp,0x4
100048ed:	6a 00                	push   0x0
100048ef:	6a 01                	push   0x1
100048f1:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
100048f4:	e8 fc ff ff ff       	call   100048f5 <begin(void*)+0x31c>	100048f5: R_386_PC32	rgtree(Reghive_Tag*, int, int)
100048f9:	83 c4 10             	add    esp,0x10
100048fc:	83 ec 08             	sub    esp,0x8
100048ff:	68 6a 56 00 10       	push   0x1000566a	10004900: R_386_32	.text
10004904:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
10004907:	e8 fc ff ff ff       	call   10004908 <begin(void*)+0x32f>	10004908: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
1000490c:	83 c4 10             	add    esp,0x10
1000490f:	83 ec 08             	sub    esp,0x8
10004912:	50                   	push   eax
10004913:	68 77 56 00 10       	push   0x10005677	10004914: R_386_32	.text
10004918:	e8 fc ff ff ff       	call   10004919 <begin(void*)+0x340>	10004919: R_386_PC32	Dbg::kprintf(char const*, ...)
1000491d:	83 c4 10             	add    esp,0x10
10004920:	83 ec 08             	sub    esp,0x8
10004923:	68 6a 56 00 10       	push   0x1000566a	10004924: R_386_32	.text
10004928:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
1000492b:	e8 fc ff ff ff       	call   1000492c <begin(void*)+0x353>	1000492c: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10004930:	83 c4 10             	add    esp,0x10
10004933:	83 ec 08             	sub    esp,0x8
10004936:	50                   	push   eax
10004937:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
1000493a:	e8 fc ff ff ff       	call   1000493b <begin(void*)+0x362>	1000493b: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
1000493f:	83 c4 10             	add    esp,0x10
10004942:	83 ec 08             	sub    esp,0x8
10004945:	50                   	push   eax
10004946:	68 77 56 00 10       	push   0x10005677	10004947: R_386_32	.text
1000494b:	e8 fc ff ff ff       	call   1000494c <begin(void*)+0x373>	1000494c: R_386_PC32	Dbg::kprintf(char const*, ...)
10004950:	83 c4 10             	add    esp,0x10
10004953:	83 ec 08             	sub    esp,0x8
10004956:	68 6a 56 00 10       	push   0x1000566a	10004957: R_386_32	.text
1000495b:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
1000495e:	e8 fc ff ff ff       	call   1000495f <begin(void*)+0x386>	1000495f: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10004963:	83 c4 10             	add    esp,0x10
10004966:	83 ec 08             	sub    esp,0x8
10004969:	50                   	push   eax
1000496a:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
1000496d:	e8 fc ff ff ff       	call   1000496e <begin(void*)+0x395>	1000496e: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10004972:	83 c4 10             	add    esp,0x10
10004975:	83 ec 04             	sub    esp,0x4
10004978:	68 90 56 00 10       	push   0x10005690	10004979: R_386_32	.text
1000497d:	50                   	push   eax
1000497e:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
10004981:	e8 fc ff ff ff       	call   10004982 <begin(void*)+0x3a9>	10004982: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
10004986:	83 c4 10             	add    esp,0x10
10004989:	83 ec 04             	sub    esp,0x4
1000498c:	6a 00                	push   0x0
1000498e:	6a 01                	push   0x1
10004990:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
10004993:	e8 fc ff ff ff       	call   10004994 <begin(void*)+0x3bb>	10004994: R_386_PC32	rgtree(Reghive_Tag*, int, int)
10004998:	83 c4 10             	add    esp,0x10
1000499b:	83 ec 08             	sub    esp,0x8
1000499e:	68 6a 56 00 10       	push   0x1000566a	1000499f: R_386_32	.text
100049a3:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
100049a6:	e8 fc ff ff ff       	call   100049a7 <begin(void*)+0x3ce>	100049a7: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100049ab:	83 c4 10             	add    esp,0x10
100049ae:	83 ec 08             	sub    esp,0x8
100049b1:	50                   	push   eax
100049b2:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
100049b5:	e8 fc ff ff ff       	call   100049b6 <begin(void*)+0x3dd>	100049b6: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
100049ba:	83 c4 10             	add    esp,0x10
100049bd:	83 ec 04             	sub    esp,0x4
100049c0:	68 95 56 00 10       	push   0x10005695	100049c1: R_386_32	.text
100049c5:	50                   	push   eax
100049c6:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
100049c9:	e8 fc ff ff ff       	call   100049ca <begin(void*)+0x3f1>	100049ca: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
100049ce:	83 c4 10             	add    esp,0x10
100049d1:	83 ec 04             	sub    esp,0x4
100049d4:	6a 00                	push   0x0
100049d6:	6a 01                	push   0x1
100049d8:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
100049db:	e8 fc ff ff ff       	call   100049dc <begin(void*)+0x403>	100049dc: R_386_PC32	rgtree(Reghive_Tag*, int, int)
100049e0:	83 c4 10             	add    esp,0x10
100049e3:	83 ec 08             	sub    esp,0x8
100049e6:	68 6a 56 00 10       	push   0x1000566a	100049e7: R_386_32	.text
100049eb:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
100049ee:	e8 fc ff ff ff       	call   100049ef <begin(void*)+0x416>	100049ef: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100049f3:	83 c4 10             	add    esp,0x10
100049f6:	83 ec 08             	sub    esp,0x8
100049f9:	50                   	push   eax
100049fa:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
100049fd:	e8 fc ff ff ff       	call   100049fe <begin(void*)+0x425>	100049fe: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10004a02:	83 c4 10             	add    esp,0x10
10004a05:	83 ec 04             	sub    esp,0x4
10004a08:	68 9d 56 00 10       	push   0x1000569d	10004a09: R_386_32	.text
10004a0d:	50                   	push   eax
10004a0e:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
10004a11:	e8 fc ff ff ff       	call   10004a12 <begin(void*)+0x439>	10004a12: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
10004a16:	83 c4 10             	add    esp,0x10
10004a19:	83 ec 04             	sub    esp,0x4
10004a1c:	6a 00                	push   0x0
10004a1e:	6a 01                	push   0x1
10004a20:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
10004a23:	e8 fc ff ff ff       	call   10004a24 <begin(void*)+0x44b>	10004a24: R_386_PC32	rgtree(Reghive_Tag*, int, int)
10004a28:	83 c4 10             	add    esp,0x10
10004a2b:	83 ec 08             	sub    esp,0x8
10004a2e:	68 a8 56 00 10       	push   0x100056a8	10004a2f: R_386_32	.text
10004a33:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
10004a36:	e8 fc ff ff ff       	call   10004a37 <begin(void*)+0x45e>	10004a37: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10004a3b:	83 c4 10             	add    esp,0x10
10004a3e:	83 ec 04             	sub    esp,0x4
10004a41:	68 ba 56 00 10       	push   0x100056ba	10004a42: R_386_32	.text
10004a46:	50                   	push   eax
10004a47:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
10004a4a:	e8 fc ff ff ff       	call   10004a4b <begin(void*)+0x472>	10004a4b: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10004a4f:	83 c4 10             	add    esp,0x10
10004a52:	83 ec 04             	sub    esp,0x4
10004a55:	6a 00                	push   0x0
10004a57:	6a 01                	push   0x1
10004a59:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
10004a5c:	e8 fc ff ff ff       	call   10004a5d <begin(void*)+0x484>	10004a5d: R_386_PC32	rgtree(Reghive_Tag*, int, int)
10004a61:	83 c4 10             	add    esp,0x10
10004a64:	83 ec 08             	sub    esp,0x8
10004a67:	68 c4 56 00 10       	push   0x100056c4	10004a68: R_386_32	.text
10004a6c:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
10004a6f:	e8 fc ff ff ff       	call   10004a70 <begin(void*)+0x497>	10004a70: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10004a74:	83 c4 10             	add    esp,0x10
10004a77:	83 ec 04             	sub    esp,0x4
10004a7a:	68 d9 56 00 10       	push   0x100056d9	10004a7b: R_386_32	.text
10004a7f:	50                   	push   eax
10004a80:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
10004a83:	e8 fc ff ff ff       	call   10004a84 <begin(void*)+0x4ab>	10004a84: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10004a88:	83 c4 10             	add    esp,0x10
10004a8b:	83 ec 04             	sub    esp,0x4
10004a8e:	6a 00                	push   0x0
10004a90:	6a 01                	push   0x1
10004a92:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
10004a95:	e8 fc ff ff ff       	call   10004a96 <begin(void*)+0x4bd>	10004a96: R_386_PC32	rgtree(Reghive_Tag*, int, int)
10004a9a:	83 c4 10             	add    esp,0x10
10004a9d:	83 ec 08             	sub    esp,0x8
10004aa0:	68 e3 56 00 10       	push   0x100056e3	10004aa1: R_386_32	.text
10004aa5:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
10004aa8:	e8 fc ff ff ff       	call   10004aa9 <begin(void*)+0x4d0>	10004aa9: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10004aad:	83 c4 10             	add    esp,0x10
10004ab0:	83 ec 04             	sub    esp,0x4
10004ab3:	68 53 54 00 10       	push   0x10005453	10004ab4: R_386_32	.text
10004ab8:	50                   	push   eax
10004ab9:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
10004abc:	e8 fc ff ff ff       	call   10004abd <begin(void*)+0x4e4>	10004abd: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10004ac1:	83 c4 10             	add    esp,0x10
10004ac4:	83 ec 04             	sub    esp,0x4
10004ac7:	6a 00                	push   0x0
10004ac9:	6a 01                	push   0x1
10004acb:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
10004ace:	e8 fc ff ff ff       	call   10004acf <begin(void*)+0x4f6>	10004acf: R_386_PC32	rgtree(Reghive_Tag*, int, int)
10004ad3:	83 c4 10             	add    esp,0x10
10004ad6:	83 ec 0c             	sub    esp,0xc
10004ad9:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
10004adc:	e8 fc ff ff ff       	call   10004add <begin(void*)+0x504>	10004add: R_386_PC32	CmClose(Reghive_Tag*)
10004ae1:	83 c4 10             	add    esp,0x10
10004ae4:	a1 00 00 00 00       	mov    eax,ds:0x0	10004ae5: R_386_32	term
10004ae9:	83 ec 0c             	sub    esp,0xc
10004aec:	50                   	push   eax
10004aed:	e8 fc ff ff ff       	call   10004aee <begin(void*)+0x515>	10004aee: R_386_PC32	setActiveTerminal(VgaText*)
10004af2:	83 c4 10             	add    esp,0x10
10004af5:	e8 fc ff ff ff       	call   10004af6 <begin(void*)+0x51d>	10004af6: R_386_PC32	drawBootScreen()
10004afa:	83 ec 0c             	sub    esp,0xc
10004afd:	68 05 55 00 10       	push   0x10005505	10004afe: R_386_32	.text
10004b02:	6a 0d                	push   0xd
10004b04:	6a 32                	push   0x32
10004b06:	6a 05                	push   0x5
10004b08:	6a 16                	push   0x16
10004b0a:	e8 fc ff ff ff       	call   10004b0b <begin(void*)+0x532>	10004b0b: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
10004b0f:	83 c4 20             	add    esp,0x20
10004b12:	a1 00 00 00 00       	mov    eax,ds:0x0	10004b13: R_386_32	term
10004b17:	83 ec 04             	sub    esp,0x4
10004b1a:	6a 08                	push   0x8
10004b1c:	6a 18                	push   0x18
10004b1e:	50                   	push   eax
10004b1f:	e8 fc ff ff ff       	call   10004b20 <begin(void*)+0x547>	10004b20: R_386_PC32	VgaText::setCursor(int, int)
10004b24:	83 c4 10             	add    esp,0x10
10004b27:	a1 00 00 00 00       	mov    eax,ds:0x0	10004b28: R_386_32	term
10004b2c:	83 ec 08             	sub    esp,0x8
10004b2f:	68 fc 56 00 10       	push   0x100056fc	10004b30: R_386_32	.text
10004b34:	50                   	push   eax
10004b35:	e8 fc ff ff ff       	call   10004b36 <begin(void*)+0x55d>	10004b36: R_386_PC32	VgaText::puts(char const*)
10004b3a:	83 c4 10             	add    esp,0x10
10004b3d:	a1 00 00 00 00       	mov    eax,ds:0x0	10004b3e: R_386_32	term
10004b42:	83 ec 04             	sub    esp,0x4
10004b45:	6a 0a                	push   0xa
10004b47:	6a 18                	push   0x18
10004b49:	50                   	push   eax
10004b4a:	e8 fc ff ff ff       	call   10004b4b <begin(void*)+0x572>	10004b4b: R_386_PC32	VgaText::setCursor(int, int)
10004b4f:	83 c4 10             	add    esp,0x10
10004b52:	a1 00 00 00 00       	mov    eax,ds:0x0	10004b53: R_386_32	term
10004b57:	83 ec 08             	sub    esp,0x8
10004b5a:	68 24 57 00 10       	push   0x10005724	10004b5b: R_386_32	.text
10004b5f:	50                   	push   eax
10004b60:	e8 fc ff ff ff       	call   10004b61 <begin(void*)+0x588>	10004b61: R_386_PC32	VgaText::puts(char const*)
10004b65:	83 c4 10             	add    esp,0x10
10004b68:	a1 00 00 00 00       	mov    eax,ds:0x0	10004b69: R_386_32	term
10004b6d:	83 ec 04             	sub    esp,0x4
10004b70:	6a 0b                	push   0xb
10004b72:	6a 18                	push   0x18
10004b74:	50                   	push   eax
10004b75:	e8 fc ff ff ff       	call   10004b76 <begin(void*)+0x59d>	10004b76: R_386_PC32	VgaText::setCursor(int, int)
10004b7a:	83 c4 10             	add    esp,0x10
10004b7d:	a1 00 00 00 00       	mov    eax,ds:0x0	10004b7e: R_386_32	term
10004b82:	83 ec 08             	sub    esp,0x8
10004b85:	68 50 57 00 10       	push   0x10005750	10004b86: R_386_32	.text
10004b8a:	50                   	push   eax
10004b8b:	e8 fc ff ff ff       	call   10004b8c <begin(void*)+0x5b3>	10004b8c: R_386_PC32	VgaText::puts(char const*)
10004b90:	83 c4 10             	add    esp,0x10
10004b93:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10004b95: R_386_32	installKey
10004b9a:	a0 00 00 00 00       	mov    al,ds:0x0	10004b9b: R_386_32	installKey
10004b9f:	84 c0                	test   al,al
10004ba1:	0f 94 c0             	sete   al
10004ba4:	84 c0                	test   al,al
10004ba6:	74 02                	je     10004baa <begin(void*)+0x5d1>
10004ba8:	eb f0                	jmp    10004b9a <begin(void*)+0x5c1>
10004baa:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10004bac: R_386_32	installKey
10004bb1:	a1 00 00 00 00       	mov    eax,ds:0x0	10004bb2: R_386_32	term
10004bb6:	83 ec 04             	sub    esp,0x4
10004bb9:	6a 0c                	push   0xc
10004bbb:	6a 18                	push   0x18
10004bbd:	50                   	push   eax
10004bbe:	e8 fc ff ff ff       	call   10004bbf <begin(void*)+0x5e6>	10004bbf: R_386_PC32	VgaText::setCursor(int, int)
10004bc3:	83 c4 10             	add    esp,0x10
10004bc6:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10004bc8: R_386_32	Krnl::computer
10004bcc:	a1 00 00 00 00       	mov    eax,ds:0x0	10004bcd: R_386_32	Krnl::computer
10004bd1:	8b 00                	mov    eax,DWORD PTR [eax]
10004bd3:	83 c0 0c             	add    eax,0xc
10004bd6:	8b 00                	mov    eax,DWORD PTR [eax]
10004bd8:	6a 00                	push   0x0
10004bda:	6a 00                	push   0x0
10004bdc:	6a 01                	push   0x1
10004bde:	52                   	push   edx
10004bdf:	ff d0                	call   eax
10004be1:	83 c4 10             	add    esp,0x10
10004be4:	a1 00 00 00 00       	mov    eax,ds:0x0	10004be5: R_386_32	term
10004be9:	6a 0f                	push   0xf
10004beb:	6a 0c                	push   0xc
10004bed:	68 64 57 00 10       	push   0x10005764	10004bee: R_386_32	.text
10004bf2:	50                   	push   eax
10004bf3:	e8 fc ff ff ff       	call   10004bf4 <begin(void*)+0x61b>	10004bf4: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10004bf8:	83 c4 10             	add    esp,0x10
10004bfb:	e9 36 03 00 00       	jmp    10004f36 <begin(void*)+0x95d>
10004c00:	83 ec 0c             	sub    esp,0xc
10004c03:	68 38 56 00 10       	push   0x10005638	10004c04: R_386_32	.text
10004c08:	e8 fc ff ff ff       	call   10004c09 <begin(void*)+0x630>	10004c09: R_386_PC32	CmOpen(char const*)
10004c0d:	83 c4 10             	add    esp,0x10
10004c10:	89 45 c0             	mov    DWORD PTR [ebp-0x40],eax
10004c13:	83 ec 08             	sub    esp,0x8
10004c16:	68 e3 56 00 10       	push   0x100056e3	10004c17: R_386_32	.text
10004c1b:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
10004c1e:	e8 fc ff ff ff       	call   10004c1f <begin(void*)+0x646>	10004c1f: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10004c23:	83 c4 10             	add    esp,0x10
10004c26:	83 ec 04             	sub    esp,0x4
10004c29:	8d 95 50 fd ff ff    	lea    edx,[ebp-0x2b0]
10004c2f:	52                   	push   edx
10004c30:	50                   	push   eax
10004c31:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
10004c34:	e8 fc ff ff ff       	call   10004c35 <begin(void*)+0x65c>	10004c35: R_386_PC32	CmGetString(Reghive_Tag*, int, char*)
10004c39:	83 c4 10             	add    esp,0x10
10004c3c:	83 ec 0c             	sub    esp,0xc
10004c3f:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
10004c42:	e8 fc ff ff ff       	call   10004c43 <begin(void*)+0x66a>	10004c43: R_386_PC32	CmClose(Reghive_Tag*)
10004c47:	83 c4 10             	add    esp,0x10
10004c4a:	83 ec 0c             	sub    esp,0xc
10004c4d:	8d 85 50 fd ff ff    	lea    eax,[ebp-0x2b0]
10004c53:	50                   	push   eax
10004c54:	e8 fc ff ff ff       	call   10004c55 <begin(void*)+0x67c>	10004c55: R_386_PC32	checkExtendedKey(char*)
10004c59:	83 c4 10             	add    esp,0x10
10004c5c:	85 c0                	test   eax,eax
10004c5e:	0f 94 c0             	sete   al
10004c61:	84 c0                	test   al,al
10004c63:	0f 84 ed 01 00 00    	je     10004e56 <begin(void*)+0x87d>
10004c69:	83 ec 0c             	sub    esp,0xc
10004c6c:	6a 01                	push   0x1
10004c6e:	e8 fc ff ff ff       	call   10004c6f <begin(void*)+0x696>	10004c6f: R_386_PC32	firstRun(bool)
10004c73:	83 c4 10             	add    esp,0x10
10004c76:	83 ec 0c             	sub    esp,0xc
10004c79:	68 38 56 00 10       	push   0x10005638	10004c7a: R_386_32	.text
10004c7e:	e8 fc ff ff ff       	call   10004c7f <begin(void*)+0x6a6>	10004c7f: R_386_PC32	CmOpen(char const*)
10004c83:	83 c4 10             	add    esp,0x10
10004c86:	89 45 c0             	mov    DWORD PTR [ebp-0x40],eax
10004c89:	83 ec 04             	sub    esp,0x4
10004c8c:	68 5d 56 00 10       	push   0x1000565d	10004c8d: R_386_32	.text
10004c91:	6a 00                	push   0x0
10004c93:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
10004c96:	e8 fc ff ff ff       	call   10004c97 <begin(void*)+0x6be>	10004c97: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
10004c9b:	83 c4 10             	add    esp,0x10
10004c9e:	83 ec 08             	sub    esp,0x8
10004ca1:	68 5d 56 00 10       	push   0x1000565d	10004ca2: R_386_32	.text
10004ca6:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
10004ca9:	e8 fc ff ff ff       	call   10004caa <begin(void*)+0x6d1>	10004caa: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10004cae:	83 c4 10             	add    esp,0x10
10004cb1:	83 ec 08             	sub    esp,0x8
10004cb4:	50                   	push   eax
10004cb5:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
10004cb8:	e8 fc ff ff ff       	call   10004cb9 <begin(void*)+0x6e0>	10004cb9: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10004cbd:	83 c4 10             	add    esp,0x10
10004cc0:	83 ec 04             	sub    esp,0x4
10004cc3:	68 64 56 00 10       	push   0x10005664	10004cc4: R_386_32	.text
10004cc8:	50                   	push   eax
10004cc9:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
10004ccc:	e8 fc ff ff ff       	call   10004ccd <begin(void*)+0x6f4>	10004ccd: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
10004cd1:	83 c4 10             	add    esp,0x10
10004cd4:	83 ec 08             	sub    esp,0x8
10004cd7:	68 6a 56 00 10       	push   0x1000566a	10004cd8: R_386_32	.text
10004cdc:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
10004cdf:	e8 fc ff ff ff       	call   10004ce0 <begin(void*)+0x707>	10004ce0: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10004ce4:	83 c4 10             	add    esp,0x10
10004ce7:	83 ec 08             	sub    esp,0x8
10004cea:	50                   	push   eax
10004ceb:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
10004cee:	e8 fc ff ff ff       	call   10004cef <begin(void*)+0x716>	10004cef: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10004cf3:	83 c4 10             	add    esp,0x10
10004cf6:	83 ec 04             	sub    esp,0x4
10004cf9:	68 9d 56 00 10       	push   0x1000569d	10004cfa: R_386_32	.text
10004cfe:	50                   	push   eax
10004cff:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
10004d02:	e8 fc ff ff ff       	call   10004d03 <begin(void*)+0x72a>	10004d03: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
10004d07:	83 c4 10             	add    esp,0x10
10004d0a:	83 ec 08             	sub    esp,0x8
10004d0d:	68 e3 56 00 10       	push   0x100056e3	10004d0e: R_386_32	.text
10004d12:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
10004d15:	e8 fc ff ff ff       	call   10004d16 <begin(void*)+0x73d>	10004d16: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10004d1a:	83 c4 10             	add    esp,0x10
10004d1d:	83 ec 04             	sub    esp,0x4
10004d20:	68 00 00 00 00       	push   0x0	10004d21: R_386_32	pkeybuf
10004d25:	50                   	push   eax
10004d26:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
10004d29:	e8 fc ff ff ff       	call   10004d2a <begin(void*)+0x751>	10004d2a: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10004d2e:	83 c4 10             	add    esp,0x10
10004d31:	83 ec 0c             	sub    esp,0xc
10004d34:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
10004d37:	e8 fc ff ff ff       	call   10004d38 <begin(void*)+0x75f>	10004d38: R_386_PC32	CmClose(Reghive_Tag*)
10004d3c:	83 c4 10             	add    esp,0x10
10004d3f:	a1 00 00 00 00       	mov    eax,ds:0x0	10004d40: R_386_32	term
10004d44:	83 ec 0c             	sub    esp,0xc
10004d47:	50                   	push   eax
10004d48:	e8 fc ff ff ff       	call   10004d49 <begin(void*)+0x770>	10004d49: R_386_PC32	setActiveTerminal(VgaText*)
10004d4d:	83 c4 10             	add    esp,0x10
10004d50:	e8 fc ff ff ff       	call   10004d51 <begin(void*)+0x778>	10004d51: R_386_PC32	drawBootScreen()
10004d55:	83 ec 0c             	sub    esp,0xc
10004d58:	68 8a 57 00 10       	push   0x1000578a	10004d59: R_386_32	.text
10004d5d:	6a 0d                	push   0xd
10004d5f:	6a 32                	push   0x32
10004d61:	6a 05                	push   0x5
10004d63:	6a 16                	push   0x16
10004d65:	e8 fc ff ff ff       	call   10004d66 <begin(void*)+0x78d>	10004d66: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
10004d6a:	83 c4 20             	add    esp,0x20
10004d6d:	a1 00 00 00 00       	mov    eax,ds:0x0	10004d6e: R_386_32	term
10004d72:	83 ec 04             	sub    esp,0x4
10004d75:	6a 08                	push   0x8
10004d77:	6a 18                	push   0x18
10004d79:	50                   	push   eax
10004d7a:	e8 fc ff ff ff       	call   10004d7b <begin(void*)+0x7a2>	10004d7b: R_386_PC32	VgaText::setCursor(int, int)
10004d7f:	83 c4 10             	add    esp,0x10
10004d82:	a1 00 00 00 00       	mov    eax,ds:0x0	10004d83: R_386_32	term
10004d87:	83 ec 08             	sub    esp,0x8
10004d8a:	68 a0 57 00 10       	push   0x100057a0	10004d8b: R_386_32	.text
10004d8f:	50                   	push   eax
10004d90:	e8 fc ff ff ff       	call   10004d91 <begin(void*)+0x7b8>	10004d91: R_386_PC32	VgaText::puts(char const*)
10004d95:	83 c4 10             	add    esp,0x10
10004d98:	a1 00 00 00 00       	mov    eax,ds:0x0	10004d99: R_386_32	term
10004d9d:	83 ec 04             	sub    esp,0x4
10004da0:	6a 0a                	push   0xa
10004da2:	6a 18                	push   0x18
10004da4:	50                   	push   eax
10004da5:	e8 fc ff ff ff       	call   10004da6 <begin(void*)+0x7cd>	10004da6: R_386_PC32	VgaText::setCursor(int, int)
10004daa:	83 c4 10             	add    esp,0x10
10004dad:	a1 00 00 00 00       	mov    eax,ds:0x0	10004dae: R_386_32	term
10004db2:	83 ec 08             	sub    esp,0x8
10004db5:	68 24 57 00 10       	push   0x10005724	10004db6: R_386_32	.text
10004dba:	50                   	push   eax
10004dbb:	e8 fc ff ff ff       	call   10004dbc <begin(void*)+0x7e3>	10004dbc: R_386_PC32	VgaText::puts(char const*)
10004dc0:	83 c4 10             	add    esp,0x10
10004dc3:	a1 00 00 00 00       	mov    eax,ds:0x0	10004dc4: R_386_32	term
10004dc8:	83 ec 04             	sub    esp,0x4
10004dcb:	6a 0b                	push   0xb
10004dcd:	6a 18                	push   0x18
10004dcf:	50                   	push   eax
10004dd0:	e8 fc ff ff ff       	call   10004dd1 <begin(void*)+0x7f8>	10004dd1: R_386_PC32	VgaText::setCursor(int, int)
10004dd5:	83 c4 10             	add    esp,0x10
10004dd8:	a1 00 00 00 00       	mov    eax,ds:0x0	10004dd9: R_386_32	term
10004ddd:	83 ec 08             	sub    esp,0x8
10004de0:	68 50 57 00 10       	push   0x10005750	10004de1: R_386_32	.text
10004de5:	50                   	push   eax
10004de6:	e8 fc ff ff ff       	call   10004de7 <begin(void*)+0x80e>	10004de7: R_386_PC32	VgaText::puts(char const*)
10004deb:	83 c4 10             	add    esp,0x10
10004dee:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10004df0: R_386_32	installKey
10004df5:	a0 00 00 00 00       	mov    al,ds:0x0	10004df6: R_386_32	installKey
10004dfa:	84 c0                	test   al,al
10004dfc:	0f 94 c0             	sete   al
10004dff:	84 c0                	test   al,al
10004e01:	74 02                	je     10004e05 <begin(void*)+0x82c>
10004e03:	eb f0                	jmp    10004df5 <begin(void*)+0x81c>
10004e05:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10004e07: R_386_32	installKey
10004e0c:	a1 00 00 00 00       	mov    eax,ds:0x0	10004e0d: R_386_32	term
10004e11:	83 ec 04             	sub    esp,0x4
10004e14:	6a 0c                	push   0xc
10004e16:	6a 18                	push   0x18
10004e18:	50                   	push   eax
10004e19:	e8 fc ff ff ff       	call   10004e1a <begin(void*)+0x841>	10004e1a: R_386_PC32	VgaText::setCursor(int, int)
10004e1e:	83 c4 10             	add    esp,0x10
10004e21:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10004e23: R_386_32	Krnl::computer
10004e27:	a1 00 00 00 00       	mov    eax,ds:0x0	10004e28: R_386_32	Krnl::computer
10004e2c:	8b 00                	mov    eax,DWORD PTR [eax]
10004e2e:	83 c0 0c             	add    eax,0xc
10004e31:	8b 00                	mov    eax,DWORD PTR [eax]
10004e33:	6a 00                	push   0x0
10004e35:	6a 00                	push   0x0
10004e37:	6a 01                	push   0x1
10004e39:	52                   	push   edx
10004e3a:	ff d0                	call   eax
10004e3c:	83 c4 10             	add    esp,0x10
10004e3f:	a1 00 00 00 00       	mov    eax,ds:0x0	10004e40: R_386_32	term
10004e44:	6a 0f                	push   0xf
10004e46:	6a 0c                	push   0xc
10004e48:	68 64 57 00 10       	push   0x10005764	10004e49: R_386_32	.text
10004e4d:	50                   	push   eax
10004e4e:	e8 fc ff ff ff       	call   10004e4f <begin(void*)+0x876>	10004e4f: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10004e53:	83 c4 10             	add    esp,0x10
10004e56:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10004e58: R_386_32	VgaText::hiddenOut
10004e5d:	83 ec 0c             	sub    esp,0xc
10004e60:	68 24 07 00 00       	push   0x724
10004e65:	e8 fc ff ff ff       	call   10004e66 <begin(void*)+0x88d>	10004e66: R_386_PC32	operator new(unsigned long)
10004e6a:	83 c4 10             	add    esp,0x10
10004e6d:	89 c3                	mov    ebx,eax
10004e6f:	6a 00                	push   0x0
10004e71:	6a 00                	push   0x0
10004e73:	68 d7 55 00 10       	push   0x100055d7	10004e74: R_386_32	.text
10004e78:	53                   	push   ebx
10004e79:	e8 fc ff ff ff       	call   10004e7a <begin(void*)+0x8a1>	10004e7a: R_386_PC32	Process::Process(char const*, Process*, char**)
10004e7e:	83 c4 10             	add    esp,0x10
10004e81:	89 5d d0             	mov    DWORD PTR [ebp-0x30],ebx
10004e84:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
10004e87:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
10004e8d:	83 ec 0c             	sub    esp,0xc
10004e90:	50                   	push   eax
10004e91:	e8 fc ff ff ff       	call   10004e92 <begin(void*)+0x8b9>	10004e92: R_386_PC32	setActiveTerminal(VgaText*)
10004e96:	83 c4 10             	add    esp,0x10
10004e99:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
10004ea0:	83 7d e0 18          	cmp    DWORD PTR [ebp-0x20],0x18
10004ea4:	7f 2e                	jg     10004ed4 <begin(void*)+0x8fb>
10004ea6:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
10004ead:	83 7d dc 4f          	cmp    DWORD PTR [ebp-0x24],0x4f
10004eb1:	7f 1c                	jg     10004ecf <begin(void*)+0x8f6>
10004eb3:	83 ec 0c             	sub    esp,0xc
10004eb6:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
10004eb9:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
10004ebc:	6a 00                	push   0x0
10004ebe:	6a 07                	push   0x7
10004ec0:	6a 20                	push   0x20
10004ec2:	e8 fc ff ff ff       	call   10004ec3 <begin(void*)+0x8ea>	10004ec3: R_386_PC32	HalConsoleWriteCharacter(char, int, int, int, int)
10004ec7:	83 c4 20             	add    esp,0x20
10004eca:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
10004ecd:	eb de                	jmp    10004ead <begin(void*)+0x8d4>
10004ecf:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
10004ed2:	eb cc                	jmp    10004ea0 <begin(void*)+0x8c7>
10004ed4:	83 ec 0c             	sub    esp,0xc
10004ed7:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10004eda:	e8 fc ff ff ff       	call   10004edb <begin(void*)+0x902>	10004edb: R_386_PC32	Process::createUserThread()
10004edf:	83 c4 10             	add    esp,0x10
10004ee2:	83 ec 04             	sub    esp,0x4
10004ee5:	6a 00                	push   0x0
10004ee7:	68 c4 57 00 10       	push   0x100057c4	10004ee8: R_386_32	.text
10004eec:	68 cc 57 00 10       	push   0x100057cc	10004eed: R_386_32	.text
10004ef1:	e8 fc ff ff ff       	call   10004ef2 <begin(void*)+0x919>	10004ef2: R_386_PC32	Reg::readIntWithDefault(char*, char*, int)
10004ef6:	83 c4 10             	add    esp,0x10
10004ef9:	89 45 bc             	mov    DWORD PTR [ebp-0x44],eax
10004efc:	83 7d bc 00          	cmp    DWORD PTR [ebp-0x44],0x0
10004f00:	74 1d                	je     10004f1f <begin(void*)+0x946>
10004f02:	83 ec 0c             	sub    esp,0xc
10004f05:	68 d2 57 00 10       	push   0x100057d2	10004f06: R_386_32	.text
10004f0a:	e8 fc ff ff ff       	call   10004f0b <begin(void*)+0x932>	10004f0b: R_386_PC32	Dbg::kprintf(char const*, ...)
10004f0f:	83 c4 10             	add    esp,0x10
10004f12:	83 ec 0c             	sub    esp,0xc
10004f15:	6a 00                	push   0x0
10004f17:	e8 fc ff ff ff       	call   10004f18 <begin(void*)+0x93f>	10004f18: R_386_PC32	startGUIVESA(void*)
10004f1c:	83 c4 10             	add    esp,0x10
10004f1f:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
10004f22:	8b 00                	mov    eax,DWORD PTR [eax]
10004f24:	83 ec 04             	sub    esp,0x4
10004f27:	6a 00                	push   0x0
10004f29:	8d 55 a8             	lea    edx,[ebp-0x58]
10004f2c:	52                   	push   edx
10004f2d:	50                   	push   eax
10004f2e:	e8 fc ff ff ff       	call   10004f2f <begin(void*)+0x956>	10004f2f: R_386_PC32	waitTask(int, int*, int)
10004f33:	83 c4 10             	add    esp,0x10
10004f36:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10004f38: R_386_32	Krnl::computer
10004f3c:	a1 00 00 00 00       	mov    eax,ds:0x0	10004f3d: R_386_32	Krnl::computer
10004f41:	8b 00                	mov    eax,DWORD PTR [eax]
10004f43:	83 c0 0c             	add    eax,0xc
10004f46:	8b 00                	mov    eax,DWORD PTR [eax]
10004f48:	6a 00                	push   0x0
10004f4a:	6a 00                	push   0x0
10004f4c:	6a 00                	push   0x0
10004f4e:	52                   	push   edx
10004f4f:	ff d0                	call   eax
10004f51:	83 c4 10             	add    esp,0x10
10004f54:	83 ec 0c             	sub    esp,0xc
10004f57:	68 dd 57 00 10       	push   0x100057dd	10004f58: R_386_32	.text
10004f5c:	e8 fc ff ff ff       	call   10004f5d <begin(void*)+0x984>	10004f5d: R_386_PC32	KePanic(char const*)
10004f61:	83 c4 10             	add    esp,0x10
10004f64:	eb fe                	jmp    10004f64 <begin(void*)+0x98b>
10004f66:	66 90                	xchg   ax,ax

10004f68 <TERMINAL_KEYBUFFER_IN_SIZE>:
10004f68:	80 00 00 00                                         ....

10004f6c <TERMINAL_KEYBUFFER_OUT_SIZE>:
10004f6c:	80 00 00 00 2e 00 2e 2e 00 2f 00 43 6f 75 6c 64     ........./.Could
10004f7c:	6e 27 74 20 6f 70 65 6e 20 62 61 73 65 20 70 61     n't open base pa
10004f8c:	74 68 2e 0a 00 25 73 20 2d 3e 20 25 73 0a 00 43     th...%s -> %s..C
10004f9c:	4f 55 4c 44 20 4e 4f 54 20 43 52 45 41 54 45 00     OULD NOT CREATE.
10004fac:	43 4f 55 4c 44 20 4e 4f 54 20 43 4f 50 59 00 4e     COULD NOT COPY.N
10004fbc:	4f 20 4d 45 4d 4f 52 59 00 42 61 63 6b 75 70 00     O MEMORY.Backup.
10004fcc:	43 3a 2f 42 61 6e 61 6e 61 2f 53 79 73 74 65 6d     C:/Banana/System
10004fdc:	2f 42 61 63 6b 75 70 2f 00 30 31 32 33 34 35 36     /Backup/.0123456
10004fec:	37 38 39 41 42 43 44 45 46 00 43 3a 2f 55 73 65     789ABCDEF.C:/Use
10004ffc:	72 73 2f 00 2f 44 65 73 6b 74 6f 70 00 2f 44 6f     rs/./Desktop./Do
1000500c:	63 75 6d 65 6e 74 73 00 2f 44 6f 77 6e 6c 6f 61     cuments./Downloa
1000501c:	64 73 00 2f 50 68 6f 74 6f 73 00 2f 54 72 61 73     ds./Photos./Tras
1000502c:	68 20 42 69 6e 00 2f 4d 75 73 69 63 00 2f 4d 6f     h Bin./Music./Mo
1000503c:	76 69 65 73 00 43 3a 2f 42 61 6e 61 6e 61 2f 52     vies.C:/Banana/R
1000504c:	65 67 69 73 74 72 79 2f 55 73 65 72 2f 00 00 00     egistry/User/...
1000505c:	43 3a 2f 42 61 6e 61 6e 61 2f 52 65 67 69 73 74     C:/Banana/Regist
1000506c:	72 79 2f 44 65 66 61 75 6c 74 55 73 65 72 00 00     ry/DefaultUser..
1000507c:	43 68 65 63 6b 69 6e 67 0a 20 73 79 73 74 65 6d     Checking. system
1000508c:	0a 20 72 65 71 75 69 72 65 6d 65 6e 74 73 0a 0a     . requirements..
1000509c:	20 4c 65 67 61 6c 0a 20 6e 6f 74 69 63 65 73 0a      Legal. notices.
100050ac:	0a 20 43 68 6f 6f 73 69 6e 67 20 61 0a 20 70 61     . Choosing a. pa
100050bc:	72 74 69 74 69 6f 6e 0a 0a 20 46 6f 72 6d 61 74     rtition.. Format
100050cc:	74 69 6e 67 0a 0a 20 43 6f 70 79 69 6e 67 20 66     ting.. Copying f
100050dc:	69 6c 65 73 0a 0a 20 52 65 73 74 61 72 74 69 6e     iles.. Restartin
100050ec:	67 0a 20 79 6f 75 72 20 63 6f 6d 70 75 74 65 72     g. your computer
100050fc:	0a 0a 00 20 46 69 6e 61 6c 69 73 69 6e 67 20 74     ... Finalising t
1000510c:	68 65 0a 20 69 6e 73 74 61 6c 6c 61 74 69 6f 6e     he. installation
1000511c:	00 00 00 00 50 6c 65 61 73 65 20 77 61 69 74 20     ....Please wait 
1000512c:	77 68 69 6c 65 20 74 68 65 20 69 6e 73 74 61 6c     while the instal
1000513c:	6c 20 66 69 6e 69 73 68 65 73 2e 00 10 20 00 20     l finishes... . 
1000514c:	20 00 41 6c 6c 6f 63 61 74 69 6e 67 20 74 68 65      .Allocating the
1000515c:	20 73 77 61 70 66 69 6c 65 00 55 70 64 61 74 69      swapfile.Updati
1000516c:	6e 67 20 74 68 65 20 72 65 67 69 73 74 72 79 00     ng the registry.
1000517c:	43 72 65 61 74 69 6e 67 20 75 73 65 72 20 61 63     Creating user ac
1000518c:	63 6f 75 6e 74 00 49 6e 73 74 61 6c 6c 69 6e 67     count.Installing
1000519c:	20 70 61 63 6b 61 67 65 73 00 42 61 63 6b 69 6e      packages.Backin
100051ac:	67 20 75 70 20 73 79 73 74 65 6d 20 66 69 6c 65     g up system file
100051bc:	73 00 46 69 6e 69 73 68 69 6e 67 20 74 6f 75 63     s.Finishing touc
100051cc:	68 65 73 00 51 51 2d 30 30 30 2d 30 30 30 2d 30     hes.QQ-000-000-0
100051dc:	30 30 2d 51 00 00 00 00 43 3a 2f 42 61 6e 61 6e     00-Q....C:/Banan
100051ec:	61 2f 53 79 73 74 65 6d 2f 74 69 6d 65 7a 6f 6e     a/System/timezon
100051fc:	65 73 2e 74 78 74 00 73 69 7a 20 3d 20 25 64 0a     es.txt.siz = %d.
1000520c:	00 20 00 2e 2e 2e 20 00 25 64 3b 20 25 73 0a 00     . .... .%d; %s..
1000521c:	53 65 74 74 69 6e 67 20 75 70 20 74 68 65 20 73     Setting up the s
1000522c:	79 73 74 65 6d 20 66 6f 72 20 74 68 65 20 66 69     ystem for the fi
1000523c:	72 73 74 20 74 69 6d 65 00 0a 0a 0a 0a 0a 0a 00     rst time........
1000524c:	54 65 73 74 00 42 61 6e 61 6e 61 20 53 65 74 75     Test.Banana Setu
1000525c:	70 00 00 00 50 6c 65 61 73 65 20 65 6e 74 65 72     p...Please enter
1000526c:	20 79 6f 75 72 20 64 65 74 61 69 6c 73 2e 20 50      your details. P
1000527c:	72 65 73 73 20 54 41 42 20 74 6f 20 73 77 69 74     ress TAB to swit
1000528c:	63 68 00 62 65 74 77 65 65 6e 20 66 69 65 6c 64     ch.between field
1000529c:	73 2e 00 4e 61 6d 65 00 43 6f 6d 70 61 6e 79 00     s..Name.Company.
100052ac:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
100052bc:	20 20 20 20 20 20 20 20 20 00 20 20 11 00 20 20              .  ..  
100052cc:	20 00 50 72 65 73 73 20 45 4e 54 45 52 00 20 20      .Press ENTER.  
100052dc:	20 20 20 20 20 20 20 20 20 00 74 6f 20 73 75 62              .to sub
100052ec:	6d 69 74 00 20 20 20 4f 4b 20 20 20 00 44 61 74     mit.   OK   .Dat
100052fc:	65 20 61 6e 64 20 54 69 6d 65 00 31 34 2f 30 35     e and Time.14/05
1000530c:	2f 32 30 32 31 20 31 38 3a 35 35 3a 30 30 00 00     /2021 18:55:00..
1000531c:	50 6c 65 61 73 65 20 65 6e 74 65 72 20 74 68 65     Please enter the
1000532c:	20 63 75 72 72 65 6e 74 20 64 61 74 65 20 61 6e      current date an
1000533c:	64 20 74 69 6d 65 2c 00 61 6e 64 20 74 68 65 6e     d time,.and then
1000534c:	20 70 72 65 73 73 20 45 4e 54 45 52 2e 00 44 44      press ENTER..DD
1000535c:	2f 4d 4d 2f 59 59 59 59 20 48 48 3a 4d 4d 3a 53     /MM/YYYY HH:MM:S
1000536c:	53 00 00 00 50 6c 65 61 73 65 20 73 65 6c 65 63     S...Please selec
1000537c:	74 20 79 6f 75 72 20 74 69 6d 65 7a 6f 6e 65 20     t your timezone 
1000538c:	61 6e 64 20 74 68 65 6e 20 70 72 65 73 73 20 45     and then press E
1000539c:	4e 54 45 52 2e 00 49 6e 76 61 6c 69 64 20 50 72     NTER..Invalid Pr
100053ac:	6f 64 75 63 74 20 4b 65 79 00 00 00 59 6f 75 20     oduct Key...You 
100053bc:	64 6f 20 6e 6f 74 20 68 61 76 65 20 61 20 76 61     do not have a va
100053cc:	6c 69 64 20 70 72 6f 64 75 63 74 20 6b 65 79 2e     lid product key.
100053dc:	0a 00 00 00 59 6f 75 20 6e 65 65 64 20 61 20 76     ....You need a v
100053ec:	61 6c 69 64 20 70 72 6f 64 75 63 74 20 6b 65 79     alid product key
100053fc:	20 69 6e 20 6f 72 64 65 72 20 74 6f 00 75 73 65      in order to.use
1000540c:	20 42 61 6e 61 6e 61 2e 00 00 00 00 50 72 65 73      Banana.....Pres
1000541c:	73 20 45 4e 54 45 52 20 74 6f 20 72 65 2d 65 6e     s ENTER to re-en
1000542c:	74 65 72 20 79 6f 75 72 20 70 72 6f 64 75 63 74     ter your product
1000543c:	20 6b 65 79 2e 00 41 41 2d 30 30 30 30 30 2d 30      key..AA-00000-0
1000544c:	30 30 30 30 2d 41 00 57 57 2d 38 38 33 38 38 2d     0000-A.WW-88388-
1000545c:	35 35 35 35 35 2d 4e 00 50 72 6f 64 75 63 74 20     55555-N.Product 
1000546c:	4b 65 79 00 50 6c 65 61 73 65 20 65 6e 74 65 72     Key.Please enter
1000547c:	20 79 6f 75 72 20 70 72 6f 64 75 63 74 20 6b 65      your product ke
1000548c:	79 20 62 65 6c 6f 77 2c 00 00 00 00 54 68 65 20     y below,....The 
1000549c:	65 6e 74 65 72 65 64 20 70 72 6f 64 75 63 74 20     entered product 
100054ac:	6b 65 79 20 77 61 73 20 69 6e 76 61 6c 69 64 2e     key was invalid.
100054bc:	00 00 00 00 50 72 65 73 73 20 61 6e 79 20 6b 65     ....Press any ke
100054cc:	79 20 74 6f 20 63 6f 6e 74 69 6e 75 65 20 61 6e     y to continue an
100054dc:	64 20 74 68 65 6e 00 00 65 6e 74 65 72 20 74 68     d then..enter th
100054ec:	65 20 70 72 6f 64 75 63 74 20 6b 65 79 20 63 6f     e product key co
100054fc:	72 72 65 63 74 6c 79 2e 00 46 69 6e 61 6c 69 73     rrectly..Finalis
1000550c:	69 6e 67 20 49 6e 73 74 61 6c 6c 61 74 69 6f 6e     ing Installation
1000551c:	00 40 6d 65 6d 6f 72 79 3a 73 77 61 70 66 69 6c     .@memory:swapfil
1000552c:	65 00 73 79 73 74 65 6d 00 43 3a 2f 42 61 6e 61     e.system.C:/Bana
1000553c:	6e 61 2f 52 65 67 69 73 74 72 79 2f 53 79 73 74     na/Registry/Syst
1000554c:	65 6d 00 43 3a 2f 42 61 6e 61 6e 61 2f 52 65 67     em.C:/Banana/Reg
1000555c:	69 73 74 72 79 2f 55 73 65 72 00 00 43 3a 2f 42     istry/User..C:/B
1000556c:	61 6e 61 6e 61 2f 52 65 67 69 73 74 72 79 2f 44     anana/Registry/D
1000557c:	65 66 61 75 6c 74 53 79 73 74 65 6d 00 4c 6f 61     efaultSystem.Loa
1000558c:	64 69 6e 67 20 65 78 74 65 6e 73 69 6f 6e 73 2e     ding extensions.
1000559c:	2e 2e 00 0a 0a 3a 0a 00 2f 25 73 0a 00 43 3a 2f     .....:../%s..C:/
100055ac:	42 61 6e 61 6e 61 2f 53 79 73 74 65 6d 2f 73 65     Banana/System/se
100055bc:	74 75 70 69 73 64 2e 6f 6e 65 00 53 59 53 49 4e     tupisd.one.SYSIN
100055cc:	49 54 20 46 41 49 4c 55 52 45 00 43 3a 2f 42 61     IT FAILURE.C:/Ba
100055dc:	6e 61 6e 61 2f 53 79 73 74 65 6d 2f 63 6f 6d 6d     nana/System/comm
100055ec:	61 6e 64 2e 65 78 65 00 43 3a 2f 44 45 2e 42 55     and.exe.C:/DE.BU
100055fc:	47 00 43 3a 2f 42 61 6e 61 6e 61 2f 44 72 69 76     G.C:/Banana/Driv
1000560c:	65 72 73 2f 00 43 3a 2f 42 61 6e 61 6e 61 2f 53     ers/.C:/Banana/S
1000561c:	79 73 74 65 6d 2f 00 43 3a 2f 42 61 6e 61 6e 61     ystem/.C:/Banana
1000562c:	2f 52 65 67 69 73 74 72 79 2f 00 00 43 3a 2f 42     /Registry/..C:/B
1000563c:	61 6e 61 6e 61 2f 52 65 67 69 73 74 72 79 2f 53     anana/Registry/S
1000564c:	79 73 74 65 6d 2f 53 59 53 54 45 4d 2e 52 45 47     ystem/SYSTEM.REG
1000565c:	00 42 41 4e 41 4e 41 00 53 45 54 55 50 00 42 41     .BANANA.SETUP.BA
1000566c:	4e 41 4e 41 2f 53 45 54 55 50 00 73 65 74 75 70     NANA/SETUP.setup
1000567c:	20 69 73 20 61 74 20 6c 6f 63 61 74 69 6f 6e 20      is at location 
1000568c:	25 64 0a 00 4e 41 4d 45 00 43 4f 4d 50 41 4e 59     %d..NAME.COMPANY
1000569c:	00 50 52 4f 44 55 43 54 4b 45 59 00 42 41 4e 41     .PRODUCTKEY.BANA
100056ac:	4e 41 2f 53 45 54 55 50 2f 4e 41 4d 45 00 54 45     NA/SETUP/NAME.TE
100056bc:	53 54 20 4e 41 4d 45 00 42 41 4e 41 4e 41 2f 53     ST NAME.BANANA/S
100056cc:	45 54 55 50 2f 43 4f 4d 50 41 4e 59 00 54 45 53     ETUP/COMPANY.TES
100056dc:	54 20 43 4f 4d 50 00 42 41 4e 41 4e 41 2f 53 45     T COMP.BANANA/SE
100056ec:	54 55 50 2f 50 52 4f 44 55 43 54 4b 45 59 00 00     TUP/PRODUCTKEY..
100056fc:	54 68 65 20 69 6e 73 74 61 6c 6c 61 74 69 6f 6e     The installation
1000570c:	20 68 61 73 20 62 65 65 6e 20 63 6f 6d 70 6c 65      has been comple
1000571c:	74 65 64 2e 0a 00 00 00 50 6c 65 61 73 65 20 70     ted.....Please p
1000572c:	72 65 73 73 20 45 4e 54 45 52 20 74 6f 20 72 65     ress ENTER to re
1000573c:	73 74 61 72 74 20 79 6f 75 72 20 63 6f 6d 70 75     start your compu
1000574c:	74 65 72 00 61 6e 64 20 73 74 61 72 74 20 42 61     ter.and start Ba
1000575c:	6e 61 6e 61 2e 00 00 00 50 4c 45 41 53 45 20 4d     nana....PLEASE M
1000576c:	41 4e 55 41 4c 4c 59 20 52 45 53 54 41 52 54 20     ANUALLY RESTART 
1000577c:	59 4f 55 52 20 43 4f 4d 50 55 54 45 52 00 50 72     YOUR COMPUTER.Pr
1000578c:	6f 64 75 63 74 20 4b 65 79 20 55 70 64 61 74 65     oduct Key Update
1000579c:	64 00 00 00 59 6f 75 72 20 70 72 6f 64 75 63 74     d...Your product
100057ac:	20 6b 65 79 20 68 61 73 20 62 65 65 6e 20 75 70      key has been up
100057bc:	64 61 74 65 64 2e 0a 00 61 75 74 6f 67 75 69 00     dated...autogui.
100057cc:	73 68 65 6c 6c 00 41 55 54 4f 20 47 55 49 2e 0a     shell.AUTO GUI..
100057dc:	00 54 55 52 4e 20 4f 46 46 20 50 43 00 63 61 6c     .TURN OFF PC.cal
100057ec:	6c 00 43 3a 2f 42 61 6e 61 6e 61 2f 53 79 73 74     l.C:/Banana/Syst
100057fc:	65 6d 2f 69 6e 69 74 2e 62 61 74 00 d7 55 00 10     em/init.bat..U..	10005808: R_386_32	.text
1000580c:	e9 57 00 10 ee 57 00 10 00 00 00 00                 .W...W......	1000580c: R_386_32	.text
	10005810: R_386_32	.text
