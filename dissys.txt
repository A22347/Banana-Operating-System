
packages/system/32/0001/system.dll:     file format elf32-i386


Disassembly of section .text:

10000000 <beginx(void*)>:
10000000:	55                   	push   ebp
10000001:	89 e5                	mov    ebp,esp
10000003:	83 ec 08             	sub    esp,0x8
10000006:	83 ec 0c             	sub    esp,0xc
10000009:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000000c:	e8 fc ff ff ff       	call   1000000d <beginx(void*)+0xd>	1000000d: R_386_PC32	begin(void*)
10000011:	83 c4 10             	add    esp,0x10
10000014:	90                   	nop
10000015:	c9                   	leave  
10000016:	c3                   	ret    

10000017 <memcmp(void*, void*, unsigned long)>:
10000017:	55                   	push   ebp
10000018:	89 e5                	mov    ebp,esp
1000001a:	83 ec 10             	sub    esp,0x10
1000001d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000020:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
10000023:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000026:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
10000029:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
1000002c:	8d 50 ff             	lea    edx,[eax-0x1]
1000002f:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
10000032:	85 c0                	test   eax,eax
10000034:	74 12                	je     10000048 <memcmp(void*, void*, unsigned long)+0x31>
10000036:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000039:	8a 10                	mov    dl,BYTE PTR [eax]
1000003b:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
1000003e:	8a 00                	mov    al,BYTE PTR [eax]
10000040:	38 c2                	cmp    dl,al
10000042:	75 04                	jne    10000048 <memcmp(void*, void*, unsigned long)+0x31>
10000044:	b0 01                	mov    al,0x1
10000046:	eb 02                	jmp    1000004a <memcmp(void*, void*, unsigned long)+0x33>
10000048:	b0 00                	mov    al,0x0
1000004a:	84 c0                	test   al,al
1000004c:	74 08                	je     10000056 <memcmp(void*, void*, unsigned long)+0x3f>
1000004e:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
10000051:	ff 45 f8             	inc    DWORD PTR [ebp-0x8]
10000054:	eb d3                	jmp    10000029 <memcmp(void*, void*, unsigned long)+0x12>
10000056:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000059:	8a 00                	mov    al,BYTE PTR [eax]
1000005b:	0f b6 d0             	movzx  edx,al
1000005e:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
10000061:	8a 00                	mov    al,BYTE PTR [eax]
10000063:	0f b6 c0             	movzx  eax,al
10000066:	29 c2                	sub    edx,eax
10000068:	89 d0                	mov    eax,edx
1000006a:	c9                   	leave  
1000006b:	c3                   	ret    

1000006c <memmove>:
1000006c:	55                   	push   ebp
1000006d:	89 e5                	mov    ebp,esp
1000006f:	83 ec 10             	sub    esp,0x10
10000072:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000075:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
10000078:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
1000007b:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
1000007e:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
10000081:	3b 45 fc             	cmp    eax,DWORD PTR [ebp-0x4]
10000084:	76 1b                	jbe    100000a1 <memmove+0x35>
10000086:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
1000008a:	74 46                	je     100000d2 <memmove+0x66>
1000008c:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
1000008f:	8a 10                	mov    dl,BYTE PTR [eax]
10000091:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000094:	88 10                	mov    BYTE PTR [eax],dl
10000096:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
10000099:	ff 45 f8             	inc    DWORD PTR [ebp-0x8]
1000009c:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
1000009f:	eb e5                	jmp    10000086 <memmove+0x1a>
100000a1:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
100000a4:	3b 45 fc             	cmp    eax,DWORD PTR [ebp-0x4]
100000a7:	73 29                	jae    100000d2 <memmove+0x66>
100000a9:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
100000ac:	48                   	dec    eax
100000ad:	01 45 fc             	add    DWORD PTR [ebp-0x4],eax
100000b0:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
100000b3:	48                   	dec    eax
100000b4:	01 45 f8             	add    DWORD PTR [ebp-0x8],eax
100000b7:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
100000bb:	74 15                	je     100000d2 <memmove+0x66>
100000bd:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
100000c0:	8a 10                	mov    dl,BYTE PTR [eax]
100000c2:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100000c5:	88 10                	mov    BYTE PTR [eax],dl
100000c7:	ff 4d fc             	dec    DWORD PTR [ebp-0x4]
100000ca:	ff 4d f8             	dec    DWORD PTR [ebp-0x8]
100000cd:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
100000d0:	eb e5                	jmp    100000b7 <memmove+0x4b>
100000d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100000d5:	c9                   	leave  
100000d6:	c3                   	ret    

100000d7 <memset>:
100000d7:	55                   	push   ebp
100000d8:	89 e5                	mov    ebp,esp
100000da:	83 ec 10             	sub    esp,0x10
100000dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100000e0:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
100000e3:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
100000e7:	74 12                	je     100000fb <memset+0x24>
100000e9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100000ec:	88 c2                	mov    dl,al
100000ee:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100000f1:	88 10                	mov    BYTE PTR [eax],dl
100000f3:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
100000f6:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
100000f9:	eb e8                	jmp    100000e3 <memset+0xc>
100000fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100000fe:	c9                   	leave  
100000ff:	c3                   	ret    

10000100 <strlen>:
10000100:	55                   	push   ebp
10000101:	89 e5                	mov    ebp,esp
10000103:	83 ec 10             	sub    esp,0x10
10000106:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
1000010d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000110:	8a 00                	mov    al,BYTE PTR [eax]
10000112:	84 c0                	test   al,al
10000114:	74 0c                	je     10000122 <strlen+0x22>
10000116:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000119:	40                   	inc    eax
1000011a:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
1000011d:	ff 45 08             	inc    DWORD PTR [ebp+0x8]
10000120:	eb eb                	jmp    1000010d <strlen+0xd>
10000122:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000125:	c9                   	leave  
10000126:	c3                   	ret    

10000127 <strpbrk(char const*, char const*)>:
10000127:	55                   	push   ebp
10000128:	89 e5                	mov    ebp,esp
1000012a:	83 ec 10             	sub    esp,0x10
1000012d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000130:	8a 00                	mov    al,BYTE PTR [eax]
10000132:	84 c0                	test   al,al
10000134:	74 30                	je     10000166 <strpbrk(char const*, char const*)+0x3f>
10000136:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000139:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
1000013c:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000013f:	8a 00                	mov    al,BYTE PTR [eax]
10000141:	84 c0                	test   al,al
10000143:	74 18                	je     1000015d <strpbrk(char const*, char const*)+0x36>
10000145:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000148:	8a 10                	mov    dl,BYTE PTR [eax]
1000014a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000014d:	8a 00                	mov    al,BYTE PTR [eax]
1000014f:	38 c2                	cmp    dl,al
10000151:	75 05                	jne    10000158 <strpbrk(char const*, char const*)+0x31>
10000153:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000156:	eb 13                	jmp    1000016b <strpbrk(char const*, char const*)+0x44>
10000158:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
1000015b:	eb df                	jmp    1000013c <strpbrk(char const*, char const*)+0x15>
1000015d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000160:	40                   	inc    eax
10000161:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
10000164:	eb c7                	jmp    1000012d <strpbrk(char const*, char const*)+0x6>
10000166:	b8 00 00 00 00       	mov    eax,0x0
1000016b:	c9                   	leave  
1000016c:	c3                   	ret    

1000016d <strtok>:
1000016d:	55                   	push   ebp
1000016e:	89 e5                	mov    ebp,esp
10000170:	83 ec 10             	sub    esp,0x10
10000173:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000176:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
10000179:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000017c:	85 c0                	test   eax,eax
1000017e:	75 18                	jne    10000198 <strtok+0x2b>
10000180:	a1 00 00 00 00       	mov    eax,ds:0x0	10000181: R_386_32	SavedPtr
10000185:	85 c0                	test   eax,eax
10000187:	75 07                	jne    10000190 <strtok+0x23>
10000189:	b8 00 00 00 00       	mov    eax,0x0
1000018e:	eb 6f                	jmp    100001ff <strtok+0x92>
10000190:	a1 00 00 00 00       	mov    eax,ds:0x0	10000191: R_386_32	SavedPtr
10000195:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
10000198:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000019b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
1000019e:	50                   	push   eax
1000019f:	e8 fc ff ff ff       	call   100001a0 <strtok+0x33>	100001a0: R_386_PC32	strpbrk(char const*, char const*)
100001a4:	83 c4 08             	add    esp,0x8
100001a7:	a3 00 00 00 00       	mov    ds:0x0,eax	100001a8: R_386_32	SavedPtr
100001ac:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	100001ae: R_386_32	SavedPtr
100001b2:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100001b5:	39 c2                	cmp    edx,eax
100001b7:	75 22                	jne    100001db <strtok+0x6e>
100001b9:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100001bc:	8d 50 01             	lea    edx,[eax+0x1]
100001bf:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
100001c2:	c6 00 00             	mov    BYTE PTR [eax],0x0
100001c5:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100001c8:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
100001cb:	50                   	push   eax
100001cc:	e8 fc ff ff ff       	call   100001cd <strtok+0x60>	100001cd: R_386_PC32	strpbrk(char const*, char const*)
100001d1:	83 c4 08             	add    esp,0x8
100001d4:	a3 00 00 00 00       	mov    ds:0x0,eax	100001d5: R_386_32	SavedPtr
100001d9:	eb d1                	jmp    100001ac <strtok+0x3f>
100001db:	a1 00 00 00 00       	mov    eax,ds:0x0	100001dc: R_386_32	SavedPtr
100001e0:	85 c0                	test   eax,eax
100001e2:	74 16                	je     100001fa <strtok+0x8d>
100001e4:	a1 00 00 00 00       	mov    eax,ds:0x0	100001e5: R_386_32	SavedPtr
100001e9:	8d 50 01             	lea    edx,[eax+0x1]
100001ec:	89 15 00 00 00 00    	mov    DWORD PTR ds:0x0,edx	100001ee: R_386_32	SavedPtr
100001f2:	c6 00 00             	mov    BYTE PTR [eax],0x0
100001f5:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100001f8:	eb 05                	jmp    100001ff <strtok+0x92>
100001fa:	b8 00 00 00 00       	mov    eax,0x0
100001ff:	c9                   	leave  
10000200:	c3                   	ret    

10000201 <strcpy>:
10000201:	55                   	push   ebp
10000202:	89 e5                	mov    ebp,esp
10000204:	83 ec 10             	sub    esp,0x10
10000207:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000020a:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
1000020d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000210:	8a 00                	mov    al,BYTE PTR [eax]
10000212:	84 c0                	test   al,al
10000214:	74 12                	je     10000228 <strcpy+0x27>
10000216:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000219:	8a 10                	mov    dl,BYTE PTR [eax]
1000021b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000021e:	88 10                	mov    BYTE PTR [eax],dl
10000220:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
10000223:	ff 45 0c             	inc    DWORD PTR [ebp+0xc]
10000226:	eb e5                	jmp    1000020d <strcpy+0xc>
10000228:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000022b:	c6 00 00             	mov    BYTE PTR [eax],0x0
1000022e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000231:	c9                   	leave  
10000232:	c3                   	ret    

10000233 <strncpyxx(char*, char const*, unsigned long)>:
10000233:	55                   	push   ebp
10000234:	89 e5                	mov    ebp,esp
10000236:	83 ec 10             	sub    esp,0x10
10000239:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000023c:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
1000023f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000242:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
10000245:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
10000249:	74 23                	je     1000026e <strncpyxx(char*, char const*, unsigned long)+0x3b>
1000024b:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
1000024e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10000251:	8d 42 01             	lea    eax,[edx+0x1]
10000254:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
10000257:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000025a:	8d 48 01             	lea    ecx,[eax+0x1]
1000025d:	89 4d fc             	mov    DWORD PTR [ebp-0x4],ecx
10000260:	8a 12                	mov    dl,BYTE PTR [edx]
10000262:	88 10                	mov    BYTE PTR [eax],dl
10000264:	8a 00                	mov    al,BYTE PTR [eax]
10000266:	84 c0                	test   al,al
10000268:	74 04                	je     1000026e <strncpyxx(char*, char const*, unsigned long)+0x3b>
1000026a:	b0 01                	mov    al,0x1
1000026c:	eb 02                	jmp    10000270 <strncpyxx(char*, char const*, unsigned long)+0x3d>
1000026e:	b0 00                	mov    al,0x0
10000270:	84 c0                	test   al,al
10000272:	74 02                	je     10000276 <strncpyxx(char*, char const*, unsigned long)+0x43>
10000274:	eb cf                	jmp    10000245 <strncpyxx(char*, char const*, unsigned long)+0x12>
10000276:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
10000279:	8d 50 ff             	lea    edx,[eax-0x1]
1000027c:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
1000027f:	85 c0                	test   eax,eax
10000281:	0f 95 c0             	setne  al
10000284:	84 c0                	test   al,al
10000286:	74 0b                	je     10000293 <strncpyxx(char*, char const*, unsigned long)+0x60>
10000288:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000028b:	c6 00 00             	mov    BYTE PTR [eax],0x0
1000028e:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
10000291:	eb e3                	jmp    10000276 <strncpyxx(char*, char const*, unsigned long)+0x43>
10000293:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000296:	c9                   	leave  
10000297:	c3                   	ret    

10000298 <strcmp>:
10000298:	55                   	push   ebp
10000299:	89 e5                	mov    ebp,esp
1000029b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000029e:	8a 10                	mov    dl,BYTE PTR [eax]
100002a0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100002a3:	8a 00                	mov    al,BYTE PTR [eax]
100002a5:	38 c2                	cmp    dl,al
100002a7:	75 20                	jne    100002c9 <strcmp+0x31>
100002a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002ac:	8d 50 01             	lea    edx,[eax+0x1]
100002af:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
100002b2:	8a 00                	mov    al,BYTE PTR [eax]
100002b4:	84 c0                	test   al,al
100002b6:	0f 94 c0             	sete   al
100002b9:	84 c0                	test   al,al
100002bb:	74 07                	je     100002c4 <strcmp+0x2c>
100002bd:	b8 00 00 00 00       	mov    eax,0x0
100002c2:	eb 19                	jmp    100002dd <strcmp+0x45>
100002c4:	ff 45 0c             	inc    DWORD PTR [ebp+0xc]
100002c7:	eb d2                	jmp    1000029b <strcmp+0x3>
100002c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002cc:	8a 00                	mov    al,BYTE PTR [eax]
100002ce:	0f b6 d0             	movzx  edx,al
100002d1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100002d4:	8a 00                	mov    al,BYTE PTR [eax]
100002d6:	0f b6 c0             	movzx  eax,al
100002d9:	29 c2                	sub    edx,eax
100002db:	89 d0                	mov    eax,edx
100002dd:	5d                   	pop    ebp
100002de:	c3                   	ret    

100002df <strchr(char const*, int)>:
100002df:	55                   	push   ebp
100002e0:	89 e5                	mov    ebp,esp
100002e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002e5:	8a 00                	mov    al,BYTE PTR [eax]
100002e7:	84 c0                	test   al,al
100002e9:	74 16                	je     10000301 <strchr(char const*, int)+0x22>
100002eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002ee:	8a 00                	mov    al,BYTE PTR [eax]
100002f0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
100002f3:	38 d0                	cmp    al,dl
100002f5:	75 05                	jne    100002fc <strchr(char const*, int)+0x1d>
100002f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002fa:	eb 0a                	jmp    10000306 <strchr(char const*, int)+0x27>
100002fc:	ff 45 08             	inc    DWORD PTR [ebp+0x8]
100002ff:	eb e1                	jmp    100002e2 <strchr(char const*, int)+0x3>
10000301:	b8 00 00 00 00       	mov    eax,0x0
10000306:	5d                   	pop    ebp
10000307:	c3                   	ret    

10000308 <strncmp>:
10000308:	55                   	push   ebp
10000309:	89 e5                	mov    ebp,esp
1000030b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
1000030e:	8d 50 ff             	lea    edx,[eax-0x1]
10000311:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
10000314:	85 c0                	test   eax,eax
10000316:	74 12                	je     1000032a <strncmp+0x22>
10000318:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000031b:	8a 10                	mov    dl,BYTE PTR [eax]
1000031d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000320:	8a 00                	mov    al,BYTE PTR [eax]
10000322:	38 c2                	cmp    dl,al
10000324:	75 04                	jne    1000032a <strncmp+0x22>
10000326:	b0 01                	mov    al,0x1
10000328:	eb 02                	jmp    1000032c <strncmp+0x24>
1000032a:	b0 00                	mov    al,0x0
1000032c:	84 c0                	test   al,al
1000032e:	74 20                	je     10000350 <strncmp+0x48>
10000330:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000333:	8d 50 01             	lea    edx,[eax+0x1]
10000336:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
10000339:	8a 00                	mov    al,BYTE PTR [eax]
1000033b:	84 c0                	test   al,al
1000033d:	0f 94 c0             	sete   al
10000340:	84 c0                	test   al,al
10000342:	74 07                	je     1000034b <strncmp+0x43>
10000344:	b8 00 00 00 00       	mov    eax,0x0
10000349:	eb 19                	jmp    10000364 <strncmp+0x5c>
1000034b:	ff 45 0c             	inc    DWORD PTR [ebp+0xc]
1000034e:	eb bb                	jmp    1000030b <strncmp+0x3>
10000350:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000353:	8a 00                	mov    al,BYTE PTR [eax]
10000355:	0f b6 d0             	movzx  edx,al
10000358:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
1000035b:	8a 00                	mov    al,BYTE PTR [eax]
1000035d:	0f b6 c0             	movzx  eax,al
10000360:	29 c2                	sub    edx,eax
10000362:	89 d0                	mov    eax,edx
10000364:	5d                   	pop    ebp
10000365:	c3                   	ret    

10000366 <strcat>:
10000366:	55                   	push   ebp
10000367:	89 e5                	mov    ebp,esp
10000369:	83 ec 10             	sub    esp,0x10
1000036c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000036f:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
10000372:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000375:	8d 50 01             	lea    edx,[eax+0x1]
10000378:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
1000037b:	8a 00                	mov    al,BYTE PTR [eax]
1000037d:	84 c0                	test   al,al
1000037f:	0f 95 c0             	setne  al
10000382:	84 c0                	test   al,al
10000384:	74 02                	je     10000388 <strcat+0x22>
10000386:	eb ea                	jmp    10000372 <strcat+0xc>
10000388:	ff 4d fc             	dec    DWORD PTR [ebp-0x4]
1000038b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
1000038e:	8d 42 01             	lea    eax,[edx+0x1]
10000391:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
10000394:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000397:	8d 48 01             	lea    ecx,[eax+0x1]
1000039a:	89 4d fc             	mov    DWORD PTR [ebp-0x4],ecx
1000039d:	8a 12                	mov    dl,BYTE PTR [edx]
1000039f:	88 10                	mov    BYTE PTR [eax],dl
100003a1:	8a 00                	mov    al,BYTE PTR [eax]
100003a3:	84 c0                	test   al,al
100003a5:	0f 95 c0             	setne  al
100003a8:	84 c0                	test   al,al
100003aa:	74 02                	je     100003ae <strcat+0x48>
100003ac:	eb dd                	jmp    1000038b <strcat+0x25>
100003ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100003b1:	c9                   	leave  
100003b2:	c3                   	ret    

100003b3 <strncat(char*, char const*, unsigned long)>:
100003b3:	55                   	push   ebp
100003b4:	89 e5                	mov    ebp,esp
100003b6:	83 ec 10             	sub    esp,0x10
100003b9:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
100003bd:	74 5c                	je     1000041b <strncat(char*, char const*, unsigned long)+0x68>
100003bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100003c2:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
100003c5:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100003c8:	8d 50 01             	lea    edx,[eax+0x1]
100003cb:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
100003ce:	8a 00                	mov    al,BYTE PTR [eax]
100003d0:	84 c0                	test   al,al
100003d2:	0f 95 c0             	setne  al
100003d5:	84 c0                	test   al,al
100003d7:	74 02                	je     100003db <strncat(char*, char const*, unsigned long)+0x28>
100003d9:	eb ea                	jmp    100003c5 <strncat(char*, char const*, unsigned long)+0x12>
100003db:	ff 4d fc             	dec    DWORD PTR [ebp-0x4]
100003de:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
100003e1:	8d 42 01             	lea    eax,[edx+0x1]
100003e4:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
100003e7:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100003ea:	8d 48 01             	lea    ecx,[eax+0x1]
100003ed:	89 4d fc             	mov    DWORD PTR [ebp-0x4],ecx
100003f0:	8a 12                	mov    dl,BYTE PTR [edx]
100003f2:	88 10                	mov    BYTE PTR [eax],dl
100003f4:	8a 00                	mov    al,BYTE PTR [eax]
100003f6:	84 c0                	test   al,al
100003f8:	74 0d                	je     10000407 <strncat(char*, char const*, unsigned long)+0x54>
100003fa:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
100003fd:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
10000401:	74 04                	je     10000407 <strncat(char*, char const*, unsigned long)+0x54>
10000403:	b0 01                	mov    al,0x1
10000405:	eb 02                	jmp    10000409 <strncat(char*, char const*, unsigned long)+0x56>
10000407:	b0 00                	mov    al,0x0
10000409:	84 c0                	test   al,al
1000040b:	74 02                	je     1000040f <strncat(char*, char const*, unsigned long)+0x5c>
1000040d:	eb cf                	jmp    100003de <strncat(char*, char const*, unsigned long)+0x2b>
1000040f:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
10000413:	75 06                	jne    1000041b <strncat(char*, char const*, unsigned long)+0x68>
10000415:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000418:	c6 00 00             	mov    BYTE PTR [eax],0x0
1000041b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000041e:	c9                   	leave  
1000041f:	c3                   	ret    

10000420 <strstr(char*, char*)>:
10000420:	55                   	push   ebp
10000421:	89 e5                	mov    ebp,esp
10000423:	83 ec 10             	sub    esp,0x10
10000426:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10000429:	e8 fc ff ff ff       	call   1000042a <strstr(char*, char*)+0xa>	1000042a: R_386_PC32	strlen
1000042e:	83 c4 04             	add    esp,0x4
10000431:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
10000434:	83 7d fc 00          	cmp    DWORD PTR [ebp-0x4],0x0
10000438:	75 05                	jne    1000043f <strstr(char*, char*)+0x1f>
1000043a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000043d:	eb 3f                	jmp    1000047e <strstr(char*, char*)+0x5e>
1000043f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000442:	50                   	push   eax
10000443:	e8 fc ff ff ff       	call   10000444 <strstr(char*, char*)+0x24>	10000444: R_386_PC32	strlen
10000448:	83 c4 04             	add    esp,0x4
1000044b:	39 45 fc             	cmp    DWORD PTR [ebp-0x4],eax
1000044e:	77 29                	ja     10000479 <strstr(char*, char*)+0x59>
10000450:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000453:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
10000456:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10000459:	50                   	push   eax
1000045a:	e8 fc ff ff ff       	call   1000045b <strstr(char*, char*)+0x3b>	1000045b: R_386_PC32	memcmp(void*, void*, unsigned long)
1000045f:	83 c4 0c             	add    esp,0xc
10000462:	85 c0                	test   eax,eax
10000464:	0f 94 c0             	sete   al
10000467:	84 c0                	test   al,al
10000469:	74 05                	je     10000470 <strstr(char*, char*)+0x50>
1000046b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000046e:	eb 0e                	jmp    1000047e <strstr(char*, char*)+0x5e>
10000470:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000473:	40                   	inc    eax
10000474:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
10000477:	eb c6                	jmp    1000043f <strstr(char*, char*)+0x1f>
10000479:	b8 00 00 00 00       	mov    eax,0x0
1000047e:	c9                   	leave  
1000047f:	c3                   	ret    

10000480 <rmtree(char*)>:
10000480:	55                   	push   ebp
10000481:	89 e5                	mov    ebp,esp
10000483:	53                   	push   ebx
10000484:	81 ec 64 02 00 00    	sub    esp,0x264
1000048a:	68 2c 01 00 00       	push   0x12c
1000048f:	6a 00                	push   0x0
10000491:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
10000497:	50                   	push   eax
10000498:	e8 fc ff ff ff       	call   10000499 <rmtree(char*)+0x19>	10000499: R_386_PC32	memset
1000049d:	83 c4 0c             	add    esp,0xc
100004a0:	8d 85 a8 fd ff ff    	lea    eax,[ebp-0x258]
100004a6:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
100004a9:	83 ec 0c             	sub    esp,0xc
100004ac:	68 14 01 00 00       	push   0x114
100004b1:	e8 fc ff ff ff       	call   100004b2 <rmtree(char*)+0x32>	100004b2: R_386_PC32	operator new(unsigned long)
100004b6:	83 c4 10             	add    esp,0x10
100004b9:	89 c3                	mov    ebx,eax
100004bb:	b8 00 20 00 c2       	mov    eax,0xc2002000
100004c0:	8b 00                	mov    eax,DWORD PTR [eax]
100004c2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
100004c5:	83 ec 04             	sub    esp,0x4
100004c8:	50                   	push   eax
100004c9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100004cc:	53                   	push   ebx
100004cd:	e8 fc ff ff ff       	call   100004ce <rmtree(char*)+0x4e>	100004ce: R_386_PC32	Directory::Directory(char const*, Process*)
100004d2:	83 c4 10             	add    esp,0x10
100004d5:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
100004d8:	83 ec 0c             	sub    esp,0xc
100004db:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
100004de:	e8 fc ff ff ff       	call   100004df <rmtree(char*)+0x5f>	100004df: R_386_PC32	Directory::open()
100004e3:	83 c4 10             	add    esp,0x10
100004e6:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
100004e9:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
100004ed:	74 24                	je     10000513 <rmtree(char*)+0x93>
100004ef:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
100004f3:	0f 84 8b 01 00 00    	je     10000684 <rmtree(char*)+0x204>
100004f9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100004fc:	8b 00                	mov    eax,DWORD PTR [eax]
100004fe:	83 c0 08             	add    eax,0x8
10000501:	8b 00                	mov    eax,DWORD PTR [eax]
10000503:	83 ec 0c             	sub    esp,0xc
10000506:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000509:	ff d0                	call   eax
1000050b:	83 c4 10             	add    esp,0x10
1000050e:	e9 72 01 00 00       	jmp    10000685 <rmtree(char*)+0x205>
10000513:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10000516:	8b 00                	mov    eax,DWORD PTR [eax]
10000518:	83 c0 0c             	add    eax,0xc
1000051b:	8b 00                	mov    eax,DWORD PTR [eax]
1000051d:	83 ec 0c             	sub    esp,0xc
10000520:	8d 95 a4 fd ff ff    	lea    edx,[ebp-0x25c]
10000526:	52                   	push   edx
10000527:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
1000052a:	6a 00                	push   0x0
1000052c:	68 10 01 00 00       	push   0x110
10000531:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000534:	ff d0                	call   eax
10000536:	83 c4 20             	add    esp,0x20
10000539:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
1000053c:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
10000540:	0f 85 04 01 00 00    	jne    1000064a <rmtree(char*)+0x1ca>
10000546:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10000549:	83 c0 10             	add    eax,0x10
1000054c:	83 ec 08             	sub    esp,0x8
1000054f:	68 c4 43 00 10       	push   0x100043c4	10000550: R_386_32	.text
10000554:	50                   	push   eax
10000555:	e8 fc ff ff ff       	call   10000556 <rmtree(char*)+0xd6>	10000556: R_386_PC32	strcmp
1000055a:	83 c4 10             	add    esp,0x10
1000055d:	85 c0                	test   eax,eax
1000055f:	74 b2                	je     10000513 <rmtree(char*)+0x93>
10000561:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10000564:	83 c0 10             	add    eax,0x10
10000567:	83 ec 08             	sub    esp,0x8
1000056a:	68 c6 43 00 10       	push   0x100043c6	1000056b: R_386_32	.text
1000056f:	50                   	push   eax
10000570:	e8 fc ff ff ff       	call   10000571 <rmtree(char*)+0xf1>	10000571: R_386_PC32	strcmp
10000575:	83 c4 10             	add    esp,0x10
10000578:	85 c0                	test   eax,eax
1000057a:	74 97                	je     10000513 <rmtree(char*)+0x93>
1000057c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
1000057f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
10000582:	83 e0 02             	and    eax,0x2
10000585:	85 c0                	test   eax,eax
10000587:	74 17                	je     100005a0 <rmtree(char*)+0x120>
10000589:	83 ec 0c             	sub    esp,0xc
1000058c:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
10000592:	50                   	push   eax
10000593:	e8 fc ff ff ff       	call   10000594 <rmtree(char*)+0x114>	10000594: R_386_PC32	rmtree(char*)
10000598:	83 c4 10             	add    esp,0x10
1000059b:	e9 73 ff ff ff       	jmp    10000513 <rmtree(char*)+0x93>
100005a0:	83 ec 08             	sub    esp,0x8
100005a3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100005a6:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
100005ac:	50                   	push   eax
100005ad:	e8 fc ff ff ff       	call   100005ae <rmtree(char*)+0x12e>	100005ae: R_386_PC32	strcpy
100005b2:	83 c4 10             	add    esp,0x10
100005b5:	83 ec 08             	sub    esp,0x8
100005b8:	68 c9 43 00 10       	push   0x100043c9	100005b9: R_386_32	.text
100005bd:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
100005c3:	50                   	push   eax
100005c4:	e8 fc ff ff ff       	call   100005c5 <rmtree(char*)+0x145>	100005c5: R_386_PC32	strcat
100005c9:	83 c4 10             	add    esp,0x10
100005cc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
100005cf:	83 c0 10             	add    eax,0x10
100005d2:	83 ec 08             	sub    esp,0x8
100005d5:	50                   	push   eax
100005d6:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
100005dc:	50                   	push   eax
100005dd:	e8 fc ff ff ff       	call   100005de <rmtree(char*)+0x15e>	100005de: R_386_PC32	strcat
100005e2:	83 c4 10             	add    esp,0x10
100005e5:	83 ec 0c             	sub    esp,0xc
100005e8:	68 14 01 00 00       	push   0x114
100005ed:	e8 fc ff ff ff       	call   100005ee <rmtree(char*)+0x16e>	100005ee: R_386_PC32	operator new(unsigned long)
100005f2:	83 c4 10             	add    esp,0x10
100005f5:	89 c3                	mov    ebx,eax
100005f7:	b8 00 20 00 c2       	mov    eax,0xc2002000
100005fc:	8b 00                	mov    eax,DWORD PTR [eax]
100005fe:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
10000601:	83 ec 04             	sub    esp,0x4
10000604:	50                   	push   eax
10000605:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
1000060b:	50                   	push   eax
1000060c:	53                   	push   ebx
1000060d:	e8 fc ff ff ff       	call   1000060e <rmtree(char*)+0x18e>	1000060e: R_386_PC32	File::File(char const*, Process*)
10000612:	83 c4 10             	add    esp,0x10
10000615:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
10000618:	83 ec 0c             	sub    esp,0xc
1000061b:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
1000061e:	e8 fc ff ff ff       	call   1000061f <rmtree(char*)+0x19f>	1000061f: R_386_PC32	File::unlink()
10000623:	83 c4 10             	add    esp,0x10
10000626:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
1000062a:	0f 84 e3 fe ff ff    	je     10000513 <rmtree(char*)+0x93>
10000630:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10000633:	8b 00                	mov    eax,DWORD PTR [eax]
10000635:	83 c0 08             	add    eax,0x8
10000638:	8b 00                	mov    eax,DWORD PTR [eax]
1000063a:	83 ec 0c             	sub    esp,0xc
1000063d:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
10000640:	ff d0                	call   eax
10000642:	83 c4 10             	add    esp,0x10
10000645:	e9 c9 fe ff ff       	jmp    10000513 <rmtree(char*)+0x93>
1000064a:	90                   	nop
1000064b:	83 ec 0c             	sub    esp,0xc
1000064e:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000651:	e8 fc ff ff ff       	call   10000652 <rmtree(char*)+0x1d2>	10000652: R_386_PC32	Directory::close()
10000656:	83 c4 10             	add    esp,0x10
10000659:	83 ec 0c             	sub    esp,0xc
1000065c:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
1000065f:	e8 fc ff ff ff       	call   10000660 <rmtree(char*)+0x1e0>	10000660: R_386_PC32	Directory::unlink()
10000664:	83 c4 10             	add    esp,0x10
10000667:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
1000066b:	74 18                	je     10000685 <rmtree(char*)+0x205>
1000066d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10000670:	8b 00                	mov    eax,DWORD PTR [eax]
10000672:	83 c0 08             	add    eax,0x8
10000675:	8b 00                	mov    eax,DWORD PTR [eax]
10000677:	83 ec 0c             	sub    esp,0xc
1000067a:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
1000067d:	ff d0                	call   eax
1000067f:	83 c4 10             	add    esp,0x10
10000682:	eb 01                	jmp    10000685 <rmtree(char*)+0x205>
10000684:	90                   	nop
10000685:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
10000688:	c9                   	leave  
10000689:	c3                   	ret    

1000068a <mkdir(char const*, int)>:
1000068a:	55                   	push   ebp
1000068b:	89 e5                	mov    ebp,esp
1000068d:	53                   	push   ebx
1000068e:	83 ec 14             	sub    esp,0x14
10000691:	83 ec 0c             	sub    esp,0xc
10000694:	68 14 01 00 00       	push   0x114
10000699:	e8 fc ff ff ff       	call   1000069a <mkdir(char const*, int)+0x10>	1000069a: R_386_PC32	operator new(unsigned long)
1000069e:	83 c4 10             	add    esp,0x10
100006a1:	89 c3                	mov    ebx,eax
100006a3:	a1 00 00 00 00       	mov    eax,ds:0x0	100006a4: R_386_32	kernelProcess
100006a8:	83 ec 04             	sub    esp,0x4
100006ab:	50                   	push   eax
100006ac:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100006af:	53                   	push   ebx
100006b0:	e8 fc ff ff ff       	call   100006b1 <mkdir(char const*, int)+0x27>	100006b1: R_386_PC32	Directory::Directory(char const*, Process*)
100006b5:	83 c4 10             	add    esp,0x10
100006b8:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
100006bb:	83 ec 0c             	sub    esp,0xc
100006be:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
100006c1:	e8 fc ff ff ff       	call   100006c2 <mkdir(char const*, int)+0x38>	100006c2: R_386_PC32	Directory::create()
100006c6:	83 c4 10             	add    esp,0x10
100006c9:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
100006cd:	74 15                	je     100006e4 <mkdir(char const*, int)+0x5a>
100006cf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
100006d2:	8b 00                	mov    eax,DWORD PTR [eax]
100006d4:	83 c0 08             	add    eax,0x8
100006d7:	8b 00                	mov    eax,DWORD PTR [eax]
100006d9:	83 ec 0c             	sub    esp,0xc
100006dc:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
100006df:	ff d0                	call   eax
100006e1:	83 c4 10             	add    esp,0x10
100006e4:	b8 00 00 00 00       	mov    eax,0x0
100006e9:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
100006ec:	c9                   	leave  
100006ed:	c3                   	ret    

100006ee <copytree(char*, char*)>:
100006ee:	55                   	push   ebp
100006ef:	89 e5                	mov    ebp,esp
100006f1:	53                   	push   ebx
100006f2:	81 ec 54 01 00 00    	sub    esp,0x154
100006f8:	83 ec 0c             	sub    esp,0xc
100006fb:	68 90 01 00 00       	push   0x190
10000700:	e8 fc ff ff ff       	call   10000701 <copytree(char*, char*)+0x13>	10000701: R_386_PC32	malloc
10000705:	83 c4 10             	add    esp,0x10
10000708:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
1000070b:	83 ec 0c             	sub    esp,0xc
1000070e:	68 90 01 00 00       	push   0x190
10000713:	e8 fc ff ff ff       	call   10000714 <copytree(char*, char*)+0x26>	10000714: R_386_PC32	malloc
10000718:	83 c4 10             	add    esp,0x10
1000071b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
1000071e:	83 ec 04             	sub    esp,0x4
10000721:	68 90 01 00 00       	push   0x190
10000726:	6a 00                	push   0x0
10000728:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
1000072b:	e8 fc ff ff ff       	call   1000072c <copytree(char*, char*)+0x3e>	1000072c: R_386_PC32	memset
10000730:	83 c4 10             	add    esp,0x10
10000733:	83 ec 04             	sub    esp,0x4
10000736:	68 90 01 00 00       	push   0x190
1000073b:	6a 00                	push   0x0
1000073d:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000740:	e8 fc ff ff ff       	call   10000741 <copytree(char*, char*)+0x53>	10000741: R_386_PC32	memset
10000745:	83 c4 10             	add    esp,0x10
10000748:	8d 85 bc fe ff ff    	lea    eax,[ebp-0x144]
1000074e:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
10000751:	83 ec 0c             	sub    esp,0xc
10000754:	68 14 01 00 00       	push   0x114
10000759:	e8 fc ff ff ff       	call   1000075a <copytree(char*, char*)+0x6c>	1000075a: R_386_PC32	operator new(unsigned long)
1000075e:	83 c4 10             	add    esp,0x10
10000761:	89 c3                	mov    ebx,eax
10000763:	b8 00 20 00 c2       	mov    eax,0xc2002000
10000768:	8b 00                	mov    eax,DWORD PTR [eax]
1000076a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
1000076d:	83 ec 04             	sub    esp,0x4
10000770:	50                   	push   eax
10000771:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000774:	53                   	push   ebx
10000775:	e8 fc ff ff ff       	call   10000776 <copytree(char*, char*)+0x88>	10000776: R_386_PC32	Directory::Directory(char const*, Process*)
1000077a:	83 c4 10             	add    esp,0x10
1000077d:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
10000780:	83 ec 0c             	sub    esp,0xc
10000783:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
10000786:	e8 fc ff ff ff       	call   10000787 <copytree(char*, char*)+0x99>	10000787: R_386_PC32	Directory::open()
1000078b:	83 c4 10             	add    esp,0x10
1000078e:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10000791:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
10000795:	74 34                	je     100007cb <copytree(char*, char*)+0xdd>
10000797:	83 ec 0c             	sub    esp,0xc
1000079a:	68 cb 43 00 10       	push   0x100043cb	1000079b: R_386_32	.text
1000079f:	e8 fc ff ff ff       	call   100007a0 <copytree(char*, char*)+0xb2>	100007a0: R_386_PC32	Dbg::kprintf(char const*, ...)
100007a4:	83 c4 10             	add    esp,0x10
100007a7:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
100007ab:	0f 84 90 03 00 00    	je     10000b41 <copytree(char*, char*)+0x453>
100007b1:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
100007b4:	8b 00                	mov    eax,DWORD PTR [eax]
100007b6:	83 c0 08             	add    eax,0x8
100007b9:	8b 00                	mov    eax,DWORD PTR [eax]
100007bb:	83 ec 0c             	sub    esp,0xc
100007be:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
100007c1:	ff d0                	call   eax
100007c3:	83 c4 10             	add    esp,0x10
100007c6:	e9 76 03 00 00       	jmp    10000b41 <copytree(char*, char*)+0x453>
100007cb:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
100007ce:	8b 00                	mov    eax,DWORD PTR [eax]
100007d0:	83 c0 0c             	add    eax,0xc
100007d3:	8b 00                	mov    eax,DWORD PTR [eax]
100007d5:	83 ec 0c             	sub    esp,0xc
100007d8:	8d 95 b8 fe ff ff    	lea    edx,[ebp-0x148]
100007de:	52                   	push   edx
100007df:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
100007e2:	6a 00                	push   0x0
100007e4:	68 10 01 00 00       	push   0x110
100007e9:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
100007ec:	ff d0                	call   eax
100007ee:	83 c4 20             	add    esp,0x20
100007f1:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
100007f4:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
100007f8:	0f 85 fb 02 00 00    	jne    10000af9 <copytree(char*, char*)+0x40b>
100007fe:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
10000801:	83 c0 10             	add    eax,0x10
10000804:	83 ec 08             	sub    esp,0x8
10000807:	68 c4 43 00 10       	push   0x100043c4	10000808: R_386_32	.text
1000080c:	50                   	push   eax
1000080d:	e8 fc ff ff ff       	call   1000080e <copytree(char*, char*)+0x120>	1000080e: R_386_PC32	strcmp
10000812:	83 c4 10             	add    esp,0x10
10000815:	85 c0                	test   eax,eax
10000817:	74 b2                	je     100007cb <copytree(char*, char*)+0xdd>
10000819:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
1000081c:	83 c0 10             	add    eax,0x10
1000081f:	83 ec 08             	sub    esp,0x8
10000822:	68 c6 43 00 10       	push   0x100043c6	10000823: R_386_32	.text
10000827:	50                   	push   eax
10000828:	e8 fc ff ff ff       	call   10000829 <copytree(char*, char*)+0x13b>	10000829: R_386_PC32	strcmp
1000082d:	83 c4 10             	add    esp,0x10
10000830:	85 c0                	test   eax,eax
10000832:	74 97                	je     100007cb <copytree(char*, char*)+0xdd>
10000834:	83 ec 08             	sub    esp,0x8
10000837:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000083a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
1000083d:	e8 fc ff ff ff       	call   1000083e <copytree(char*, char*)+0x150>	1000083e: R_386_PC32	strcpy
10000842:	83 c4 10             	add    esp,0x10
10000845:	83 ec 08             	sub    esp,0x8
10000848:	68 c9 43 00 10       	push   0x100043c9	10000849: R_386_32	.text
1000084d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10000850:	e8 fc ff ff ff       	call   10000851 <copytree(char*, char*)+0x163>	10000851: R_386_PC32	strcat
10000855:	83 c4 10             	add    esp,0x10
10000858:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
1000085b:	83 c0 10             	add    eax,0x10
1000085e:	83 ec 08             	sub    esp,0x8
10000861:	50                   	push   eax
10000862:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10000865:	e8 fc ff ff ff       	call   10000866 <copytree(char*, char*)+0x178>	10000866: R_386_PC32	strcat
1000086a:	83 c4 10             	add    esp,0x10
1000086d:	83 ec 08             	sub    esp,0x8
10000870:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10000873:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000876:	e8 fc ff ff ff       	call   10000877 <copytree(char*, char*)+0x189>	10000877: R_386_PC32	strcpy
1000087b:	83 c4 10             	add    esp,0x10
1000087e:	83 ec 08             	sub    esp,0x8
10000881:	68 c9 43 00 10       	push   0x100043c9	10000882: R_386_32	.text
10000886:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000889:	e8 fc ff ff ff       	call   1000088a <copytree(char*, char*)+0x19c>	1000088a: R_386_PC32	strcat
1000088e:	83 c4 10             	add    esp,0x10
10000891:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
10000894:	83 c0 10             	add    eax,0x10
10000897:	83 ec 08             	sub    esp,0x8
1000089a:	50                   	push   eax
1000089b:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
1000089e:	e8 fc ff ff ff       	call   1000089f <copytree(char*, char*)+0x1b1>	1000089f: R_386_PC32	strcat
100008a3:	83 c4 10             	add    esp,0x10
100008a6:	83 ec 04             	sub    esp,0x4
100008a9:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
100008ac:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
100008af:	68 e5 43 00 10       	push   0x100043e5	100008b0: R_386_32	.text
100008b4:	e8 fc ff ff ff       	call   100008b5 <copytree(char*, char*)+0x1c7>	100008b5: R_386_PC32	Dbg::kprintf(char const*, ...)
100008b9:	83 c4 10             	add    esp,0x10
100008bc:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
100008bf:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
100008c2:	83 e0 02             	and    eax,0x2
100008c5:	85 c0                	test   eax,eax
100008c7:	74 47                	je     10000910 <copytree(char*, char*)+0x222>
100008c9:	83 ec 08             	sub    esp,0x8
100008cc:	68 c0 01 00 00       	push   0x1c0
100008d1:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
100008d4:	e8 fc ff ff ff       	call   100008d5 <copytree(char*, char*)+0x1e7>	100008d5: R_386_PC32	mkdir(char const*, int)
100008d9:	83 c4 10             	add    esp,0x10
100008dc:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
100008df:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
100008e3:	74 15                	je     100008fa <copytree(char*, char*)+0x20c>
100008e5:	83 ec 0c             	sub    esp,0xc
100008e8:	68 ef 43 00 10       	push   0x100043ef	100008e9: R_386_32	.text
100008ed:	e8 fc ff ff ff       	call   100008ee <copytree(char*, char*)+0x200>	100008ee: R_386_PC32	KePanic(char const*)
100008f2:	83 c4 10             	add    esp,0x10
100008f5:	e9 d1 fe ff ff       	jmp    100007cb <copytree(char*, char*)+0xdd>
100008fa:	83 ec 08             	sub    esp,0x8
100008fd:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000900:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10000903:	e8 fc ff ff ff       	call   10000904 <copytree(char*, char*)+0x216>	10000904: R_386_PC32	copytree(char*, char*)
10000908:	83 c4 10             	add    esp,0x10
1000090b:	e9 bb fe ff ff       	jmp    100007cb <copytree(char*, char*)+0xdd>
10000910:	83 ec 0c             	sub    esp,0xc
10000913:	68 14 01 00 00       	push   0x114
10000918:	e8 fc ff ff ff       	call   10000919 <copytree(char*, char*)+0x22b>	10000919: R_386_PC32	operator new(unsigned long)
1000091d:	83 c4 10             	add    esp,0x10
10000920:	89 c3                	mov    ebx,eax
10000922:	b8 00 20 00 c2       	mov    eax,0xc2002000
10000927:	8b 00                	mov    eax,DWORD PTR [eax]
10000929:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
1000092c:	83 ec 04             	sub    esp,0x4
1000092f:	50                   	push   eax
10000930:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10000933:	53                   	push   ebx
10000934:	e8 fc ff ff ff       	call   10000935 <copytree(char*, char*)+0x247>	10000935: R_386_PC32	File::File(char const*, Process*)
10000939:	83 c4 10             	add    esp,0x10
1000093c:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
1000093f:	83 ec 08             	sub    esp,0x8
10000942:	6a 01                	push   0x1
10000944:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000947:	e8 fc ff ff ff       	call   10000948 <copytree(char*, char*)+0x25a>	10000948: R_386_PC32	File::open(FileOpenMode)
1000094c:	83 c4 10             	add    esp,0x10
1000094f:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
10000953:	75 15                	jne    1000096a <copytree(char*, char*)+0x27c>
10000955:	83 ec 0c             	sub    esp,0xc
10000958:	68 00 44 00 10       	push   0x10004400	10000959: R_386_32	.text
1000095d:	e8 fc ff ff ff       	call   1000095e <copytree(char*, char*)+0x270>	1000095e: R_386_PC32	KePanic(char const*)
10000962:	83 c4 10             	add    esp,0x10
10000965:	e9 8a 01 00 00       	jmp    10000af4 <copytree(char*, char*)+0x406>
1000096a:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
1000096e:	0f 84 57 fe ff ff    	je     100007cb <copytree(char*, char*)+0xdd>
10000974:	83 ec 0c             	sub    esp,0xc
10000977:	68 14 01 00 00       	push   0x114
1000097c:	e8 fc ff ff ff       	call   1000097d <copytree(char*, char*)+0x28f>	1000097d: R_386_PC32	operator new(unsigned long)
10000981:	83 c4 10             	add    esp,0x10
10000984:	89 c3                	mov    ebx,eax
10000986:	b8 00 20 00 c2       	mov    eax,0xc2002000
1000098b:	8b 00                	mov    eax,DWORD PTR [eax]
1000098d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
10000990:	83 ec 04             	sub    esp,0x4
10000993:	50                   	push   eax
10000994:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000997:	53                   	push   ebx
10000998:	e8 fc ff ff ff       	call   10000999 <copytree(char*, char*)+0x2ab>	10000999: R_386_PC32	File::File(char const*, Process*)
1000099d:	83 c4 10             	add    esp,0x10
100009a0:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
100009a3:	83 ec 08             	sub    esp,0x8
100009a6:	6a 12                	push   0x12
100009a8:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
100009ab:	e8 fc ff ff ff       	call   100009ac <copytree(char*, char*)+0x2be>	100009ac: R_386_PC32	File::open(FileOpenMode)
100009b0:	83 c4 10             	add    esp,0x10
100009b3:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
100009b7:	75 23                	jne    100009dc <copytree(char*, char*)+0x2ee>
100009b9:	83 ec 0c             	sub    esp,0xc
100009bc:	68 00 44 00 10       	push   0x10004400	100009bd: R_386_32	.text
100009c1:	e8 fc ff ff ff       	call   100009c2 <copytree(char*, char*)+0x2d4>	100009c2: R_386_PC32	KePanic(char const*)
100009c6:	83 c4 10             	add    esp,0x10
100009c9:	83 ec 0c             	sub    esp,0xc
100009cc:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
100009cf:	e8 fc ff ff ff       	call   100009d0 <copytree(char*, char*)+0x2e2>	100009d0: R_386_PC32	File::close()
100009d4:	83 c4 10             	add    esp,0x10
100009d7:	e9 18 01 00 00       	jmp    10000af4 <copytree(char*, char*)+0x406>
100009dc:	83 ec 0c             	sub    esp,0xc
100009df:	68 00 10 00 00       	push   0x1000
100009e4:	e8 fc ff ff ff       	call   100009e5 <copytree(char*, char*)+0x2f7>	100009e5: R_386_PC32	malloc
100009e9:	83 c4 10             	add    esp,0x10
100009ec:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
100009ef:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
100009f3:	75 31                	jne    10000a26 <copytree(char*, char*)+0x338>
100009f5:	83 ec 0c             	sub    esp,0xc
100009f8:	68 0f 44 00 10       	push   0x1000440f	100009f9: R_386_32	.text
100009fd:	e8 fc ff ff ff       	call   100009fe <copytree(char*, char*)+0x310>	100009fe: R_386_PC32	KePanic(char const*)
10000a02:	83 c4 10             	add    esp,0x10
10000a05:	83 ec 0c             	sub    esp,0xc
10000a08:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10000a0b:	e8 fc ff ff ff       	call   10000a0c <copytree(char*, char*)+0x31e>	10000a0c: R_386_PC32	free
10000a10:	83 c4 10             	add    esp,0x10
10000a13:	83 ec 0c             	sub    esp,0xc
10000a16:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000a19:	e8 fc ff ff ff       	call   10000a1a <copytree(char*, char*)+0x32c>	10000a1a: R_386_PC32	free
10000a1e:	83 c4 10             	add    esp,0x10
10000a21:	e9 1c 01 00 00       	jmp    10000b42 <copytree(char*, char*)+0x454>
10000a26:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10000a29:	8b 00                	mov    eax,DWORD PTR [eax]
10000a2b:	83 c0 0c             	add    eax,0xc
10000a2e:	8b 00                	mov    eax,DWORD PTR [eax]
10000a30:	83 ec 0c             	sub    esp,0xc
10000a33:	8d 95 b4 fe ff ff    	lea    edx,[ebp-0x14c]
10000a39:	52                   	push   edx
10000a3a:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10000a3d:	6a 00                	push   0x0
10000a3f:	68 00 10 00 00       	push   0x1000
10000a44:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000a47:	ff d0                	call   eax
10000a49:	83 c4 20             	add    esp,0x20
10000a4c:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
10000a4f:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
10000a53:	75 37                	jne    10000a8c <copytree(char*, char*)+0x39e>
10000a55:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000a58:	8b 00                	mov    eax,DWORD PTR [eax]
10000a5a:	83 c0 10             	add    eax,0x10
10000a5d:	8b 08                	mov    ecx,DWORD PTR [eax]
10000a5f:	8b 85 b4 fe ff ff    	mov    eax,DWORD PTR [ebp-0x14c]
10000a65:	99                   	cdq    
10000a66:	83 ec 0c             	sub    esp,0xc
10000a69:	8d 9d b0 fe ff ff    	lea    ebx,[ebp-0x150]
10000a6f:	53                   	push   ebx
10000a70:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10000a73:	52                   	push   edx
10000a74:	50                   	push   eax
10000a75:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
10000a78:	ff d1                	call   ecx
10000a7a:	83 c4 20             	add    esp,0x20
10000a7d:	8b 85 b4 fe ff ff    	mov    eax,DWORD PTR [ebp-0x14c]
10000a83:	3d 00 10 00 00       	cmp    eax,0x1000
10000a88:	75 05                	jne    10000a8f <copytree(char*, char*)+0x3a1>
10000a8a:	eb 9a                	jmp    10000a26 <copytree(char*, char*)+0x338>
10000a8c:	90                   	nop
10000a8d:	eb 01                	jmp    10000a90 <copytree(char*, char*)+0x3a2>
10000a8f:	90                   	nop
10000a90:	83 ec 0c             	sub    esp,0xc
10000a93:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10000a96:	e8 fc ff ff ff       	call   10000a97 <copytree(char*, char*)+0x3a9>	10000a97: R_386_PC32	free
10000a9b:	83 c4 10             	add    esp,0x10
10000a9e:	83 ec 0c             	sub    esp,0xc
10000aa1:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000aa4:	e8 fc ff ff ff       	call   10000aa5 <copytree(char*, char*)+0x3b7>	10000aa5: R_386_PC32	File::close()
10000aa9:	83 c4 10             	add    esp,0x10
10000aac:	83 ec 0c             	sub    esp,0xc
10000aaf:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
10000ab2:	e8 fc ff ff ff       	call   10000ab3 <copytree(char*, char*)+0x3c5>	10000ab3: R_386_PC32	File::close()
10000ab7:	83 c4 10             	add    esp,0x10
10000aba:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
10000abe:	74 15                	je     10000ad5 <copytree(char*, char*)+0x3e7>
10000ac0:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10000ac3:	8b 00                	mov    eax,DWORD PTR [eax]
10000ac5:	83 c0 08             	add    eax,0x8
10000ac8:	8b 00                	mov    eax,DWORD PTR [eax]
10000aca:	83 ec 0c             	sub    esp,0xc
10000acd:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000ad0:	ff d0                	call   eax
10000ad2:	83 c4 10             	add    esp,0x10
10000ad5:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
10000ad9:	0f 84 ec fc ff ff    	je     100007cb <copytree(char*, char*)+0xdd>
10000adf:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000ae2:	8b 00                	mov    eax,DWORD PTR [eax]
10000ae4:	83 c0 08             	add    eax,0x8
10000ae7:	8b 00                	mov    eax,DWORD PTR [eax]
10000ae9:	83 ec 0c             	sub    esp,0xc
10000aec:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
10000aef:	ff d0                	call   eax
10000af1:	83 c4 10             	add    esp,0x10
10000af4:	e9 d2 fc ff ff       	jmp    100007cb <copytree(char*, char*)+0xdd>
10000af9:	90                   	nop
10000afa:	83 ec 0c             	sub    esp,0xc
10000afd:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10000b00:	e8 fc ff ff ff       	call   10000b01 <copytree(char*, char*)+0x413>	10000b01: R_386_PC32	free
10000b05:	83 c4 10             	add    esp,0x10
10000b08:	83 ec 0c             	sub    esp,0xc
10000b0b:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000b0e:	e8 fc ff ff ff       	call   10000b0f <copytree(char*, char*)+0x421>	10000b0f: R_386_PC32	free
10000b13:	83 c4 10             	add    esp,0x10
10000b16:	83 ec 0c             	sub    esp,0xc
10000b19:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
10000b1c:	e8 fc ff ff ff       	call   10000b1d <copytree(char*, char*)+0x42f>	10000b1d: R_386_PC32	Directory::close()
10000b21:	83 c4 10             	add    esp,0x10
10000b24:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
10000b28:	74 18                	je     10000b42 <copytree(char*, char*)+0x454>
10000b2a:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
10000b2d:	8b 00                	mov    eax,DWORD PTR [eax]
10000b2f:	83 c0 08             	add    eax,0x8
10000b32:	8b 00                	mov    eax,DWORD PTR [eax]
10000b34:	83 ec 0c             	sub    esp,0xc
10000b37:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
10000b3a:	ff d0                	call   eax
10000b3c:	83 c4 10             	add    esp,0x10
10000b3f:	eb 01                	jmp    10000b42 <copytree(char*, char*)+0x454>
10000b41:	90                   	nop
10000b42:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
10000b45:	c9                   	leave  
10000b46:	c3                   	ret    

10000b47 <backupTree(char*, unsigned short)>:
10000b47:	55                   	push   ebp
10000b48:	89 e5                	mov    ebp,esp
10000b4a:	57                   	push   edi
10000b4b:	56                   	push   esi
10000b4c:	53                   	push   ebx
10000b4d:	81 ec 8c 12 00 00    	sub    esp,0x128c
10000b53:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000b56:	66 89 85 74 ed ff ff 	mov    WORD PTR [ebp-0x128c],ax
10000b5d:	83 ec 0c             	sub    esp,0xc
10000b60:	68 90 01 00 00       	push   0x190
10000b65:	e8 fc ff ff ff       	call   10000b66 <backupTree(char*, unsigned short)+0x1f>	10000b66: R_386_PC32	malloc
10000b6a:	83 c4 10             	add    esp,0x10
10000b6d:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
10000b70:	83 ec 04             	sub    esp,0x4
10000b73:	68 90 01 00 00       	push   0x190
10000b78:	6a 00                	push   0x0
10000b7a:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000b7d:	e8 fc ff ff ff       	call   10000b7e <backupTree(char*, unsigned short)+0x37>	10000b7e: R_386_PC32	memset
10000b82:	83 c4 10             	add    esp,0x10
10000b85:	8d 85 a8 fe ff ff    	lea    eax,[ebp-0x158]
10000b8b:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
10000b8e:	83 ec 0c             	sub    esp,0xc
10000b91:	68 14 01 00 00       	push   0x114
10000b96:	e8 fc ff ff ff       	call   10000b97 <backupTree(char*, unsigned short)+0x50>	10000b97: R_386_PC32	operator new(unsigned long)
10000b9b:	83 c4 10             	add    esp,0x10
10000b9e:	89 c3                	mov    ebx,eax
10000ba0:	b8 00 20 00 c2       	mov    eax,0xc2002000
10000ba5:	8b 00                	mov    eax,DWORD PTR [eax]
10000ba7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
10000baa:	83 ec 04             	sub    esp,0x4
10000bad:	50                   	push   eax
10000bae:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000bb1:	53                   	push   ebx
10000bb2:	e8 fc ff ff ff       	call   10000bb3 <backupTree(char*, unsigned short)+0x6c>	10000bb3: R_386_PC32	Directory::Directory(char const*, Process*)
10000bb7:	83 c4 10             	add    esp,0x10
10000bba:	89 5d d0             	mov    DWORD PTR [ebp-0x30],ebx
10000bbd:	83 ec 0c             	sub    esp,0xc
10000bc0:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10000bc3:	e8 fc ff ff ff       	call   10000bc4 <backupTree(char*, unsigned short)+0x7d>	10000bc4: R_386_PC32	Directory::open()
10000bc8:	83 c4 10             	add    esp,0x10
10000bcb:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
10000bce:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
10000bd2:	74 34                	je     10000c08 <backupTree(char*, unsigned short)+0xc1>
10000bd4:	83 ec 0c             	sub    esp,0xc
10000bd7:	68 cb 43 00 10       	push   0x100043cb	10000bd8: R_386_32	.text
10000bdc:	e8 fc ff ff ff       	call   10000bdd <backupTree(char*, unsigned short)+0x96>	10000bdd: R_386_PC32	Dbg::kprintf(char const*, ...)
10000be1:	83 c4 10             	add    esp,0x10
10000be4:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
10000be8:	0f 84 c8 05 00 00    	je     100011b6 <backupTree(char*, unsigned short)+0x66f>
10000bee:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
10000bf1:	8b 00                	mov    eax,DWORD PTR [eax]
10000bf3:	83 c0 08             	add    eax,0x8
10000bf6:	8b 00                	mov    eax,DWORD PTR [eax]
10000bf8:	83 ec 0c             	sub    esp,0xc
10000bfb:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10000bfe:	ff d0                	call   eax
10000c00:	83 c4 10             	add    esp,0x10
10000c03:	e9 af 05 00 00       	jmp    100011b7 <backupTree(char*, unsigned short)+0x670>
10000c08:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
10000c0b:	8b 00                	mov    eax,DWORD PTR [eax]
10000c0d:	83 c0 0c             	add    eax,0xc
10000c10:	8b 00                	mov    eax,DWORD PTR [eax]
10000c12:	83 ec 0c             	sub    esp,0xc
10000c15:	8d 95 a4 fe ff ff    	lea    edx,[ebp-0x15c]
10000c1b:	52                   	push   edx
10000c1c:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
10000c1f:	6a 00                	push   0x0
10000c21:	68 10 01 00 00       	push   0x110
10000c26:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10000c29:	ff d0                	call   eax
10000c2b:	83 c4 20             	add    esp,0x20
10000c2e:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
10000c31:	83 7d c8 00          	cmp    DWORD PTR [ebp-0x38],0x0
10000c35:	0f 85 41 05 00 00    	jne    1000117c <backupTree(char*, unsigned short)+0x635>
10000c3b:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000c3e:	83 c0 10             	add    eax,0x10
10000c41:	83 ec 08             	sub    esp,0x8
10000c44:	68 c4 43 00 10       	push   0x100043c4	10000c45: R_386_32	.text
10000c49:	50                   	push   eax
10000c4a:	e8 fc ff ff ff       	call   10000c4b <backupTree(char*, unsigned short)+0x104>	10000c4b: R_386_PC32	strcmp
10000c4f:	83 c4 10             	add    esp,0x10
10000c52:	85 c0                	test   eax,eax
10000c54:	74 b2                	je     10000c08 <backupTree(char*, unsigned short)+0xc1>
10000c56:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000c59:	83 c0 10             	add    eax,0x10
10000c5c:	83 ec 08             	sub    esp,0x8
10000c5f:	68 c6 43 00 10       	push   0x100043c6	10000c60: R_386_32	.text
10000c64:	50                   	push   eax
10000c65:	e8 fc ff ff ff       	call   10000c66 <backupTree(char*, unsigned short)+0x11f>	10000c66: R_386_PC32	strcmp
10000c6a:	83 c4 10             	add    esp,0x10
10000c6d:	85 c0                	test   eax,eax
10000c6f:	74 97                	je     10000c08 <backupTree(char*, unsigned short)+0xc1>
10000c71:	83 ec 08             	sub    esp,0x8
10000c74:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000c77:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000c7a:	e8 fc ff ff ff       	call   10000c7b <backupTree(char*, unsigned short)+0x134>	10000c7b: R_386_PC32	strcpy
10000c7f:	83 c4 10             	add    esp,0x10
10000c82:	83 ec 08             	sub    esp,0x8
10000c85:	68 c9 43 00 10       	push   0x100043c9	10000c86: R_386_32	.text
10000c8a:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000c8d:	e8 fc ff ff ff       	call   10000c8e <backupTree(char*, unsigned short)+0x147>	10000c8e: R_386_PC32	strcat
10000c92:	83 c4 10             	add    esp,0x10
10000c95:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000c98:	83 c0 10             	add    eax,0x10
10000c9b:	83 ec 08             	sub    esp,0x8
10000c9e:	50                   	push   eax
10000c9f:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000ca2:	e8 fc ff ff ff       	call   10000ca3 <backupTree(char*, unsigned short)+0x15c>	10000ca3: R_386_PC32	strcat
10000ca7:	83 c4 10             	add    esp,0x10
10000caa:	66 c7 45 e6 bc ad    	mov    WORD PTR [ebp-0x1a],0xadbc
10000cb0:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
10000cb7:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
10000cba:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10000cbd:	01 d0                	add    eax,edx
10000cbf:	83 c0 10             	add    eax,0x10
10000cc2:	8a 00                	mov    al,BYTE PTR [eax]
10000cc4:	84 c0                	test   al,al
10000cc6:	74 3c                	je     10000d04 <backupTree(char*, unsigned short)+0x1bd>
10000cc8:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
10000ccb:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10000cce:	01 d0                	add    eax,edx
10000cd0:	83 c0 10             	add    eax,0x10
10000cd3:	8a 00                	mov    al,BYTE PTR [eax]
10000cd5:	66 0f be d0          	movsx  dx,al
10000cd9:	66 8b 45 e6          	mov    ax,WORD PTR [ebp-0x1a]
10000cdd:	31 d0                	xor    eax,edx
10000cdf:	66 89 45 e6          	mov    WORD PTR [ebp-0x1a],ax
10000ce3:	0f b7 45 e6          	movzx  eax,WORD PTR [ebp-0x1a]
10000ce7:	c1 e0 03             	shl    eax,0x3
10000cea:	89 c2                	mov    edx,eax
10000cec:	0f b7 45 e6          	movzx  eax,WORD PTR [ebp-0x1a]
10000cf0:	c1 f8 0d             	sar    eax,0xd
10000cf3:	09 d0                	or     eax,edx
10000cf5:	66 89 45 e6          	mov    WORD PTR [ebp-0x1a],ax
10000cf9:	66 81 6d e6 f1 06    	sub    WORD PTR [ebp-0x1a],0x6f1
10000cff:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
10000d02:	eb b3                	jmp    10000cb7 <backupTree(char*, unsigned short)+0x170>
10000d04:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000d07:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
10000d0a:	83 e0 02             	and    eax,0x2
10000d0d:	85 c0                	test   eax,eax
10000d0f:	74 37                	je     10000d48 <backupTree(char*, unsigned short)+0x201>
10000d11:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000d14:	83 c0 10             	add    eax,0x10
10000d17:	83 ec 08             	sub    esp,0x8
10000d1a:	68 19 44 00 10       	push   0x10004419	10000d1b: R_386_32	.text
10000d1f:	50                   	push   eax
10000d20:	e8 fc ff ff ff       	call   10000d21 <backupTree(char*, unsigned short)+0x1da>	10000d21: R_386_PC32	strcmp
10000d25:	83 c4 10             	add    esp,0x10
10000d28:	85 c0                	test   eax,eax
10000d2a:	0f 84 d8 fe ff ff    	je     10000c08 <backupTree(char*, unsigned short)+0xc1>
10000d30:	0f b7 45 e6          	movzx  eax,WORD PTR [ebp-0x1a]
10000d34:	83 ec 08             	sub    esp,0x8
10000d37:	50                   	push   eax
10000d38:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000d3b:	e8 fc ff ff ff       	call   10000d3c <backupTree(char*, unsigned short)+0x1f5>	10000d3c: R_386_PC32	backupTree(char*, unsigned short)
10000d40:	83 c4 10             	add    esp,0x10
10000d43:	e9 c0 fe ff ff       	jmp    10000c08 <backupTree(char*, unsigned short)+0xc1>
10000d48:	c6 85 a3 fe ff ff 00 	mov    BYTE PTR [ebp-0x15d],0x0
10000d4f:	83 ec 08             	sub    esp,0x8
10000d52:	68 20 44 00 10       	push   0x10004420	10000d53: R_386_32	.text
10000d57:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000d5d:	50                   	push   eax
10000d5e:	e8 fc ff ff ff       	call   10000d5f <backupTree(char*, unsigned short)+0x218>	10000d5f: R_386_PC32	strcpy
10000d63:	83 c4 10             	add    esp,0x10
10000d66:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000d69:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
10000d6c:	88 85 a2 fe ff ff    	mov    BYTE PTR [ebp-0x15e],al
10000d72:	83 ec 08             	sub    esp,0x8
10000d75:	8d 85 a2 fe ff ff    	lea    eax,[ebp-0x15e]
10000d7b:	50                   	push   eax
10000d7c:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000d82:	50                   	push   eax
10000d83:	e8 fc ff ff ff       	call   10000d84 <backupTree(char*, unsigned short)+0x23d>	10000d84: R_386_PC32	strcat
10000d88:	83 c4 10             	add    esp,0x10
10000d8b:	83 ec 04             	sub    esp,0x4
10000d8e:	6a 09                	push   0x9
10000d90:	6a 00                	push   0x0
10000d92:	8d 85 99 fe ff ff    	lea    eax,[ebp-0x167]
10000d98:	50                   	push   eax
10000d99:	e8 fc ff ff ff       	call   10000d9a <backupTree(char*, unsigned short)+0x253>	10000d9a: R_386_PC32	memset
10000d9e:	83 c4 10             	add    esp,0x10
10000da1:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000da4:	83 c0 10             	add    eax,0x10
10000da7:	83 ec 04             	sub    esp,0x4
10000daa:	6a 08                	push   0x8
10000dac:	50                   	push   eax
10000dad:	8d 85 99 fe ff ff    	lea    eax,[ebp-0x167]
10000db3:	50                   	push   eax
10000db4:	e8 fc ff ff ff       	call   10000db5 <backupTree(char*, unsigned short)+0x26e>	10000db5: R_386_PC32	strncpyxx(char*, char const*, unsigned long)
10000db9:	83 c4 10             	add    esp,0x10
10000dbc:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
10000dc3:	83 7d dc 07          	cmp    DWORD PTR [ebp-0x24],0x7
10000dc7:	0f 8f c5 00 00 00    	jg     10000e92 <backupTree(char*, unsigned short)+0x34b>
10000dcd:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000dd3:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000dd6:	01 d0                	add    eax,edx
10000dd8:	8a 00                	mov    al,BYTE PTR [eax]
10000dda:	3c 60                	cmp    al,0x60
10000ddc:	7e 30                	jle    10000e0e <backupTree(char*, unsigned short)+0x2c7>
10000dde:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000de4:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000de7:	01 d0                	add    eax,edx
10000de9:	8a 00                	mov    al,BYTE PTR [eax]
10000deb:	3c 7a                	cmp    al,0x7a
10000ded:	7f 1f                	jg     10000e0e <backupTree(char*, unsigned short)+0x2c7>
10000def:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000df5:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000df8:	01 d0                	add    eax,edx
10000dfa:	8a 00                	mov    al,BYTE PTR [eax]
10000dfc:	83 e8 20             	sub    eax,0x20
10000dff:	88 c2                	mov    dl,al
10000e01:	8d 8d 99 fe ff ff    	lea    ecx,[ebp-0x167]
10000e07:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e0a:	01 c8                	add    eax,ecx
10000e0c:	88 10                	mov    BYTE PTR [eax],dl
10000e0e:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000e14:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e17:	01 d0                	add    eax,edx
10000e19:	8a 00                	mov    al,BYTE PTR [eax]
10000e1b:	3c 59                	cmp    al,0x59
10000e1d:	75 0e                	jne    10000e2d <backupTree(char*, unsigned short)+0x2e6>
10000e1f:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000e25:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e28:	01 d0                	add    eax,edx
10000e2a:	c6 00 51             	mov    BYTE PTR [eax],0x51
10000e2d:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000e33:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e36:	01 d0                	add    eax,edx
10000e38:	8a 00                	mov    al,BYTE PTR [eax]
10000e3a:	3c 5a                	cmp    al,0x5a
10000e3c:	75 0e                	jne    10000e4c <backupTree(char*, unsigned short)+0x305>
10000e3e:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000e44:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e47:	01 d0                	add    eax,edx
10000e49:	c6 00 51             	mov    BYTE PTR [eax],0x51
10000e4c:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000e52:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e55:	01 d0                	add    eax,edx
10000e57:	8a 00                	mov    al,BYTE PTR [eax]
10000e59:	3c 20                	cmp    al,0x20
10000e5b:	75 0e                	jne    10000e6b <backupTree(char*, unsigned short)+0x324>
10000e5d:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000e63:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e66:	01 d0                	add    eax,edx
10000e68:	c6 00 59             	mov    BYTE PTR [eax],0x59
10000e6b:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000e71:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e74:	01 d0                	add    eax,edx
10000e76:	8a 00                	mov    al,BYTE PTR [eax]
10000e78:	3c 2e                	cmp    al,0x2e
10000e7a:	75 0e                	jne    10000e8a <backupTree(char*, unsigned short)+0x343>
10000e7c:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000e82:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e85:	01 d0                	add    eax,edx
10000e87:	c6 00 5a             	mov    BYTE PTR [eax],0x5a
10000e8a:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
10000e8d:	e9 31 ff ff ff       	jmp    10000dc3 <backupTree(char*, unsigned short)+0x27c>
10000e92:	83 ec 08             	sub    esp,0x8
10000e95:	8d 85 99 fe ff ff    	lea    eax,[ebp-0x167]
10000e9b:	50                   	push   eax
10000e9c:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000ea2:	50                   	push   eax
10000ea3:	e8 fc ff ff ff       	call   10000ea4 <backupTree(char*, unsigned short)+0x35d>	10000ea4: R_386_PC32	strcat
10000ea8:	83 c4 10             	add    esp,0x10
10000eab:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000eae:	83 c0 10             	add    eax,0x10
10000eb1:	83 ec 0c             	sub    esp,0xc
10000eb4:	50                   	push   eax
10000eb5:	e8 fc ff ff ff       	call   10000eb6 <backupTree(char*, unsigned short)+0x36f>	10000eb6: R_386_PC32	strlen
10000eba:	83 c4 10             	add    esp,0x10
10000ebd:	83 c0 41             	add    eax,0x41
10000ec0:	88 85 a2 fe ff ff    	mov    BYTE PTR [ebp-0x15e],al
10000ec6:	83 ec 08             	sub    esp,0x8
10000ec9:	8d 85 a2 fe ff ff    	lea    eax,[ebp-0x15e]
10000ecf:	50                   	push   eax
10000ed0:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000ed6:	50                   	push   eax
10000ed7:	e8 fc ff ff ff       	call   10000ed8 <backupTree(char*, unsigned short)+0x391>	10000ed8: R_386_PC32	strcat
10000edc:	83 c4 10             	add    esp,0x10
10000edf:	83 ec 08             	sub    esp,0x8
10000ee2:	68 c4 43 00 10       	push   0x100043c4	10000ee3: R_386_32	.text
10000ee7:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000eed:	50                   	push   eax
10000eee:	e8 fc ff ff ff       	call   10000eef <backupTree(char*, unsigned short)+0x3a8>	10000eef: R_386_PC32	strcat
10000ef3:	83 c4 10             	add    esp,0x10
10000ef6:	66 8b 45 e6          	mov    ax,WORD PTR [ebp-0x1a]
10000efa:	25 65 07 00 00       	and    eax,0x765
10000eff:	33 85 74 ed ff ff    	xor    eax,DWORD PTR [ebp-0x128c]
10000f05:	66 89 45 c6          	mov    WORD PTR [ebp-0x3a],ax
10000f09:	8d 85 88 fe ff ff    	lea    eax,[ebp-0x178]
10000f0f:	bb 39 44 00 10       	mov    ebx,0x10004439	10000f10: R_386_32	.text
10000f14:	ba 11 00 00 00       	mov    edx,0x11
10000f19:	89 c7                	mov    edi,eax
10000f1b:	89 de                	mov    esi,ebx
10000f1d:	89 d1                	mov    ecx,edx
10000f1f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
10000f21:	0f b7 45 c6          	movzx  eax,WORD PTR [ebp-0x3a]
10000f25:	83 e0 0f             	and    eax,0xf
10000f28:	8a 84 05 88 fe ff ff 	mov    al,BYTE PTR [ebp+eax*1-0x178]
10000f2f:	88 85 a2 fe ff ff    	mov    BYTE PTR [ebp-0x15e],al
10000f35:	83 ec 08             	sub    esp,0x8
10000f38:	8d 85 a2 fe ff ff    	lea    eax,[ebp-0x15e]
10000f3e:	50                   	push   eax
10000f3f:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000f45:	50                   	push   eax
10000f46:	e8 fc ff ff ff       	call   10000f47 <backupTree(char*, unsigned short)+0x400>	10000f47: R_386_PC32	strcat
10000f4b:	83 c4 10             	add    esp,0x10
10000f4e:	0f b7 45 c6          	movzx  eax,WORD PTR [ebp-0x3a]
10000f52:	c1 f8 04             	sar    eax,0x4
10000f55:	83 e0 0f             	and    eax,0xf
10000f58:	8a 84 05 88 fe ff ff 	mov    al,BYTE PTR [ebp+eax*1-0x178]
10000f5f:	88 85 a2 fe ff ff    	mov    BYTE PTR [ebp-0x15e],al
10000f65:	83 ec 08             	sub    esp,0x8
10000f68:	8d 85 a2 fe ff ff    	lea    eax,[ebp-0x15e]
10000f6e:	50                   	push   eax
10000f6f:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000f75:	50                   	push   eax
10000f76:	e8 fc ff ff ff       	call   10000f77 <backupTree(char*, unsigned short)+0x430>	10000f77: R_386_PC32	strcat
10000f7b:	83 c4 10             	add    esp,0x10
10000f7e:	0f b7 45 c6          	movzx  eax,WORD PTR [ebp-0x3a]
10000f82:	c1 f8 08             	sar    eax,0x8
10000f85:	83 e0 0f             	and    eax,0xf
10000f88:	8a 84 05 88 fe ff ff 	mov    al,BYTE PTR [ebp+eax*1-0x178]
10000f8f:	88 85 a2 fe ff ff    	mov    BYTE PTR [ebp-0x15e],al
10000f95:	83 ec 08             	sub    esp,0x8
10000f98:	8d 85 a2 fe ff ff    	lea    eax,[ebp-0x15e]
10000f9e:	50                   	push   eax
10000f9f:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000fa5:	50                   	push   eax
10000fa6:	e8 fc ff ff ff       	call   10000fa7 <backupTree(char*, unsigned short)+0x460>	10000fa7: R_386_PC32	strcat
10000fab:	83 c4 10             	add    esp,0x10
10000fae:	66 8b 45 c6          	mov    ax,WORD PTR [ebp-0x3a]
10000fb2:	66 c1 e8 0c          	shr    ax,0xc
10000fb6:	0f b7 c0             	movzx  eax,ax
10000fb9:	8a 84 05 88 fe ff ff 	mov    al,BYTE PTR [ebp+eax*1-0x178]
10000fc0:	88 85 a2 fe ff ff    	mov    BYTE PTR [ebp-0x15e],al
10000fc6:	83 ec 08             	sub    esp,0x8
10000fc9:	8d 85 a2 fe ff ff    	lea    eax,[ebp-0x15e]
10000fcf:	50                   	push   eax
10000fd0:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000fd6:	50                   	push   eax
10000fd7:	e8 fc ff ff ff       	call   10000fd8 <backupTree(char*, unsigned short)+0x491>	10000fd8: R_386_PC32	strcat
10000fdc:	83 c4 10             	add    esp,0x10
10000fdf:	83 ec 0c             	sub    esp,0xc
10000fe2:	68 14 01 00 00       	push   0x114
10000fe7:	e8 fc ff ff ff       	call   10000fe8 <backupTree(char*, unsigned short)+0x4a1>	10000fe8: R_386_PC32	operator new(unsigned long)
10000fec:	83 c4 10             	add    esp,0x10
10000fef:	89 c3                	mov    ebx,eax
10000ff1:	b8 00 20 00 c2       	mov    eax,0xc2002000
10000ff6:	8b 00                	mov    eax,DWORD PTR [eax]
10000ff8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
10000ffb:	83 ec 04             	sub    esp,0x4
10000ffe:	50                   	push   eax
10000fff:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10001002:	53                   	push   ebx
10001003:	e8 fc ff ff ff       	call   10001004 <backupTree(char*, unsigned short)+0x4bd>	10001004: R_386_PC32	File::File(char const*, Process*)
10001008:	83 c4 10             	add    esp,0x10
1000100b:	89 5d c0             	mov    DWORD PTR [ebp-0x40],ebx
1000100e:	83 ec 08             	sub    esp,0x8
10001011:	6a 01                	push   0x1
10001013:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
10001016:	e8 fc ff ff ff       	call   10001017 <backupTree(char*, unsigned short)+0x4d0>	10001017: R_386_PC32	File::open(FileOpenMode)
1000101b:	83 c4 10             	add    esp,0x10
1000101e:	83 7d c0 00          	cmp    DWORD PTR [ebp-0x40],0x0
10001022:	75 15                	jne    10001039 <backupTree(char*, unsigned short)+0x4f2>
10001024:	83 ec 0c             	sub    esp,0xc
10001027:	68 00 44 00 10       	push   0x10004400	10001028: R_386_32	.text
1000102c:	e8 fc ff ff ff       	call   1000102d <backupTree(char*, unsigned short)+0x4e6>	1000102d: R_386_PC32	KePanic(char const*)
10001031:	83 c4 10             	add    esp,0x10
10001034:	e9 3e 01 00 00       	jmp    10001177 <backupTree(char*, unsigned short)+0x630>
10001039:	83 7d c0 00          	cmp    DWORD PTR [ebp-0x40],0x0
1000103d:	0f 84 c5 fb ff ff    	je     10000c08 <backupTree(char*, unsigned short)+0xc1>
10001043:	83 ec 0c             	sub    esp,0xc
10001046:	68 14 01 00 00       	push   0x114
1000104b:	e8 fc ff ff ff       	call   1000104c <backupTree(char*, unsigned short)+0x505>	1000104c: R_386_PC32	operator new(unsigned long)
10001050:	83 c4 10             	add    esp,0x10
10001053:	89 c3                	mov    ebx,eax
10001055:	b8 00 20 00 c2       	mov    eax,0xc2002000
1000105a:	8b 00                	mov    eax,DWORD PTR [eax]
1000105c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
1000105f:	83 ec 04             	sub    esp,0x4
10001062:	50                   	push   eax
10001063:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10001069:	50                   	push   eax
1000106a:	53                   	push   ebx
1000106b:	e8 fc ff ff ff       	call   1000106c <backupTree(char*, unsigned short)+0x525>	1000106c: R_386_PC32	File::File(char const*, Process*)
10001070:	83 c4 10             	add    esp,0x10
10001073:	89 5d bc             	mov    DWORD PTR [ebp-0x44],ebx
10001076:	83 ec 08             	sub    esp,0x8
10001079:	6a 12                	push   0x12
1000107b:	ff 75 bc             	push   DWORD PTR [ebp-0x44]
1000107e:	e8 fc ff ff ff       	call   1000107f <backupTree(char*, unsigned short)+0x538>	1000107f: R_386_PC32	File::open(FileOpenMode)
10001083:	83 c4 10             	add    esp,0x10
10001086:	83 7d bc 00          	cmp    DWORD PTR [ebp-0x44],0x0
1000108a:	75 23                	jne    100010af <backupTree(char*, unsigned short)+0x568>
1000108c:	83 ec 0c             	sub    esp,0xc
1000108f:	68 00 44 00 10       	push   0x10004400	10001090: R_386_32	.text
10001094:	e8 fc ff ff ff       	call   10001095 <backupTree(char*, unsigned short)+0x54e>	10001095: R_386_PC32	KePanic(char const*)
10001099:	83 c4 10             	add    esp,0x10
1000109c:	83 ec 0c             	sub    esp,0xc
1000109f:	ff 75 bc             	push   DWORD PTR [ebp-0x44]
100010a2:	e8 fc ff ff ff       	call   100010a3 <backupTree(char*, unsigned short)+0x55c>	100010a3: R_386_PC32	File::close()
100010a7:	83 c4 10             	add    esp,0x10
100010aa:	e9 c8 00 00 00       	jmp    10001177 <backupTree(char*, unsigned short)+0x630>
100010af:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
100010b2:	8b 00                	mov    eax,DWORD PTR [eax]
100010b4:	83 c0 0c             	add    eax,0xc
100010b7:	8b 00                	mov    eax,DWORD PTR [eax]
100010b9:	83 ec 0c             	sub    esp,0xc
100010bc:	8d 95 84 fe ff ff    	lea    edx,[ebp-0x17c]
100010c2:	52                   	push   edx
100010c3:	8d 95 80 ee ff ff    	lea    edx,[ebp-0x1180]
100010c9:	52                   	push   edx
100010ca:	6a 00                	push   0x0
100010cc:	68 00 10 00 00       	push   0x1000
100010d1:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
100010d4:	ff d0                	call   eax
100010d6:	83 c4 20             	add    esp,0x20
100010d9:	89 45 b8             	mov    DWORD PTR [ebp-0x48],eax
100010dc:	83 7d b8 00          	cmp    DWORD PTR [ebp-0x48],0x0
100010e0:	75 3b                	jne    1000111d <backupTree(char*, unsigned short)+0x5d6>
100010e2:	8b 45 bc             	mov    eax,DWORD PTR [ebp-0x44]
100010e5:	8b 00                	mov    eax,DWORD PTR [eax]
100010e7:	83 c0 10             	add    eax,0x10
100010ea:	8b 08                	mov    ecx,DWORD PTR [eax]
100010ec:	8b 85 84 fe ff ff    	mov    eax,DWORD PTR [ebp-0x17c]
100010f2:	99                   	cdq    
100010f3:	83 ec 0c             	sub    esp,0xc
100010f6:	8d 9d 80 fe ff ff    	lea    ebx,[ebp-0x180]
100010fc:	53                   	push   ebx
100010fd:	8d 9d 80 ee ff ff    	lea    ebx,[ebp-0x1180]
10001103:	53                   	push   ebx
10001104:	52                   	push   edx
10001105:	50                   	push   eax
10001106:	ff 75 bc             	push   DWORD PTR [ebp-0x44]
10001109:	ff d1                	call   ecx
1000110b:	83 c4 20             	add    esp,0x20
1000110e:	8b 85 84 fe ff ff    	mov    eax,DWORD PTR [ebp-0x17c]
10001114:	3d 00 10 00 00       	cmp    eax,0x1000
10001119:	75 05                	jne    10001120 <backupTree(char*, unsigned short)+0x5d9>
1000111b:	eb 92                	jmp    100010af <backupTree(char*, unsigned short)+0x568>
1000111d:	90                   	nop
1000111e:	eb 01                	jmp    10001121 <backupTree(char*, unsigned short)+0x5da>
10001120:	90                   	nop
10001121:	83 ec 0c             	sub    esp,0xc
10001124:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
10001127:	e8 fc ff ff ff       	call   10001128 <backupTree(char*, unsigned short)+0x5e1>	10001128: R_386_PC32	File::close()
1000112c:	83 c4 10             	add    esp,0x10
1000112f:	83 ec 0c             	sub    esp,0xc
10001132:	ff 75 bc             	push   DWORD PTR [ebp-0x44]
10001135:	e8 fc ff ff ff       	call   10001136 <backupTree(char*, unsigned short)+0x5ef>	10001136: R_386_PC32	File::close()
1000113a:	83 c4 10             	add    esp,0x10
1000113d:	83 7d c0 00          	cmp    DWORD PTR [ebp-0x40],0x0
10001141:	74 15                	je     10001158 <backupTree(char*, unsigned short)+0x611>
10001143:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
10001146:	8b 00                	mov    eax,DWORD PTR [eax]
10001148:	83 c0 08             	add    eax,0x8
1000114b:	8b 00                	mov    eax,DWORD PTR [eax]
1000114d:	83 ec 0c             	sub    esp,0xc
10001150:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
10001153:	ff d0                	call   eax
10001155:	83 c4 10             	add    esp,0x10
10001158:	83 7d bc 00          	cmp    DWORD PTR [ebp-0x44],0x0
1000115c:	0f 84 a6 fa ff ff    	je     10000c08 <backupTree(char*, unsigned short)+0xc1>
10001162:	8b 45 bc             	mov    eax,DWORD PTR [ebp-0x44]
10001165:	8b 00                	mov    eax,DWORD PTR [eax]
10001167:	83 c0 08             	add    eax,0x8
1000116a:	8b 00                	mov    eax,DWORD PTR [eax]
1000116c:	83 ec 0c             	sub    esp,0xc
1000116f:	ff 75 bc             	push   DWORD PTR [ebp-0x44]
10001172:	ff d0                	call   eax
10001174:	83 c4 10             	add    esp,0x10
10001177:	e9 8c fa ff ff       	jmp    10000c08 <backupTree(char*, unsigned short)+0xc1>
1000117c:	90                   	nop
1000117d:	83 ec 0c             	sub    esp,0xc
10001180:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10001183:	e8 fc ff ff ff       	call   10001184 <backupTree(char*, unsigned short)+0x63d>	10001184: R_386_PC32	free
10001188:	83 c4 10             	add    esp,0x10
1000118b:	83 ec 0c             	sub    esp,0xc
1000118e:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10001191:	e8 fc ff ff ff       	call   10001192 <backupTree(char*, unsigned short)+0x64b>	10001192: R_386_PC32	Directory::close()
10001196:	83 c4 10             	add    esp,0x10
10001199:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
1000119d:	74 18                	je     100011b7 <backupTree(char*, unsigned short)+0x670>
1000119f:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
100011a2:	8b 00                	mov    eax,DWORD PTR [eax]
100011a4:	83 c0 08             	add    eax,0x8
100011a7:	8b 00                	mov    eax,DWORD PTR [eax]
100011a9:	83 ec 0c             	sub    esp,0xc
100011ac:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
100011af:	ff d0                	call   eax
100011b1:	83 c4 10             	add    esp,0x10
100011b4:	eb 01                	jmp    100011b7 <backupTree(char*, unsigned short)+0x670>
100011b6:	90                   	nop
100011b7:	8d 65 f4             	lea    esp,[ebp-0xc]
100011ba:	5b                   	pop    ebx
100011bb:	5e                   	pop    esi
100011bc:	5f                   	pop    edi
100011bd:	5d                   	pop    ebp
100011be:	c3                   	ret    

100011bf <createUser(char const*)>:
100011bf:	55                   	push   ebp
100011c0:	89 e5                	mov    ebp,esp
100011c2:	81 ec 08 01 00 00    	sub    esp,0x108
100011c8:	68 4a 44 00 10       	push   0x1000444a	100011c9: R_386_32	.text
100011cd:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100011d3:	50                   	push   eax
100011d4:	e8 fc ff ff ff       	call   100011d5 <createUser(char const*)+0x16>	100011d5: R_386_PC32	strcpy
100011d9:	83 c4 08             	add    esp,0x8
100011dc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100011df:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100011e5:	50                   	push   eax
100011e6:	e8 fc ff ff ff       	call   100011e7 <createUser(char const*)+0x28>	100011e7: R_386_PC32	strcat
100011eb:	83 c4 08             	add    esp,0x8
100011ee:	83 ec 08             	sub    esp,0x8
100011f1:	68 c0 01 00 00       	push   0x1c0
100011f6:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100011fc:	50                   	push   eax
100011fd:	e8 fc ff ff ff       	call   100011fe <createUser(char const*)+0x3f>	100011fe: R_386_PC32	mkdir(char const*, int)
10001202:	83 c4 10             	add    esp,0x10
10001205:	83 ec 08             	sub    esp,0x8
10001208:	68 54 44 00 10       	push   0x10004454	10001209: R_386_32	.text
1000120d:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001213:	50                   	push   eax
10001214:	e8 fc ff ff ff       	call   10001215 <createUser(char const*)+0x56>	10001215: R_386_PC32	strcat
10001219:	83 c4 10             	add    esp,0x10
1000121c:	83 ec 08             	sub    esp,0x8
1000121f:	68 c0 01 00 00       	push   0x1c0
10001224:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000122a:	50                   	push   eax
1000122b:	e8 fc ff ff ff       	call   1000122c <createUser(char const*)+0x6d>	1000122c: R_386_PC32	mkdir(char const*, int)
10001230:	83 c4 10             	add    esp,0x10
10001233:	83 ec 08             	sub    esp,0x8
10001236:	68 4a 44 00 10       	push   0x1000444a	10001237: R_386_32	.text
1000123b:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001241:	50                   	push   eax
10001242:	e8 fc ff ff ff       	call   10001243 <createUser(char const*)+0x84>	10001243: R_386_PC32	strcpy
10001247:	83 c4 10             	add    esp,0x10
1000124a:	83 ec 08             	sub    esp,0x8
1000124d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001250:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001256:	50                   	push   eax
10001257:	e8 fc ff ff ff       	call   10001258 <createUser(char const*)+0x99>	10001258: R_386_PC32	strcat
1000125c:	83 c4 10             	add    esp,0x10
1000125f:	83 ec 08             	sub    esp,0x8
10001262:	68 5d 44 00 10       	push   0x1000445d	10001263: R_386_32	.text
10001267:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000126d:	50                   	push   eax
1000126e:	e8 fc ff ff ff       	call   1000126f <createUser(char const*)+0xb0>	1000126f: R_386_PC32	strcat
10001273:	83 c4 10             	add    esp,0x10
10001276:	83 ec 08             	sub    esp,0x8
10001279:	68 c0 01 00 00       	push   0x1c0
1000127e:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001284:	50                   	push   eax
10001285:	e8 fc ff ff ff       	call   10001286 <createUser(char const*)+0xc7>	10001286: R_386_PC32	mkdir(char const*, int)
1000128a:	83 c4 10             	add    esp,0x10
1000128d:	83 ec 08             	sub    esp,0x8
10001290:	68 4a 44 00 10       	push   0x1000444a	10001291: R_386_32	.text
10001295:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000129b:	50                   	push   eax
1000129c:	e8 fc ff ff ff       	call   1000129d <createUser(char const*)+0xde>	1000129d: R_386_PC32	strcpy
100012a1:	83 c4 10             	add    esp,0x10
100012a4:	83 ec 08             	sub    esp,0x8
100012a7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100012aa:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100012b0:	50                   	push   eax
100012b1:	e8 fc ff ff ff       	call   100012b2 <createUser(char const*)+0xf3>	100012b2: R_386_PC32	strcat
100012b6:	83 c4 10             	add    esp,0x10
100012b9:	83 ec 08             	sub    esp,0x8
100012bc:	68 68 44 00 10       	push   0x10004468	100012bd: R_386_32	.text
100012c1:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100012c7:	50                   	push   eax
100012c8:	e8 fc ff ff ff       	call   100012c9 <createUser(char const*)+0x10a>	100012c9: R_386_PC32	strcat
100012cd:	83 c4 10             	add    esp,0x10
100012d0:	83 ec 08             	sub    esp,0x8
100012d3:	68 c0 01 00 00       	push   0x1c0
100012d8:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100012de:	50                   	push   eax
100012df:	e8 fc ff ff ff       	call   100012e0 <createUser(char const*)+0x121>	100012e0: R_386_PC32	mkdir(char const*, int)
100012e4:	83 c4 10             	add    esp,0x10
100012e7:	83 ec 08             	sub    esp,0x8
100012ea:	68 4a 44 00 10       	push   0x1000444a	100012eb: R_386_32	.text
100012ef:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100012f5:	50                   	push   eax
100012f6:	e8 fc ff ff ff       	call   100012f7 <createUser(char const*)+0x138>	100012f7: R_386_PC32	strcpy
100012fb:	83 c4 10             	add    esp,0x10
100012fe:	83 ec 08             	sub    esp,0x8
10001301:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001304:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000130a:	50                   	push   eax
1000130b:	e8 fc ff ff ff       	call   1000130c <createUser(char const*)+0x14d>	1000130c: R_386_PC32	strcat
10001310:	83 c4 10             	add    esp,0x10
10001313:	83 ec 08             	sub    esp,0x8
10001316:	68 73 44 00 10       	push   0x10004473	10001317: R_386_32	.text
1000131b:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001321:	50                   	push   eax
10001322:	e8 fc ff ff ff       	call   10001323 <createUser(char const*)+0x164>	10001323: R_386_PC32	strcat
10001327:	83 c4 10             	add    esp,0x10
1000132a:	83 ec 08             	sub    esp,0x8
1000132d:	68 c0 01 00 00       	push   0x1c0
10001332:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001338:	50                   	push   eax
10001339:	e8 fc ff ff ff       	call   1000133a <createUser(char const*)+0x17b>	1000133a: R_386_PC32	mkdir(char const*, int)
1000133e:	83 c4 10             	add    esp,0x10
10001341:	83 ec 08             	sub    esp,0x8
10001344:	68 4a 44 00 10       	push   0x1000444a	10001345: R_386_32	.text
10001349:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000134f:	50                   	push   eax
10001350:	e8 fc ff ff ff       	call   10001351 <createUser(char const*)+0x192>	10001351: R_386_PC32	strcpy
10001355:	83 c4 10             	add    esp,0x10
10001358:	83 ec 08             	sub    esp,0x8
1000135b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000135e:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001364:	50                   	push   eax
10001365:	e8 fc ff ff ff       	call   10001366 <createUser(char const*)+0x1a7>	10001366: R_386_PC32	strcat
1000136a:	83 c4 10             	add    esp,0x10
1000136d:	83 ec 08             	sub    esp,0x8
10001370:	68 7b 44 00 10       	push   0x1000447b	10001371: R_386_32	.text
10001375:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000137b:	50                   	push   eax
1000137c:	e8 fc ff ff ff       	call   1000137d <createUser(char const*)+0x1be>	1000137d: R_386_PC32	strcat
10001381:	83 c4 10             	add    esp,0x10
10001384:	83 ec 08             	sub    esp,0x8
10001387:	68 c0 01 00 00       	push   0x1c0
1000138c:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001392:	50                   	push   eax
10001393:	e8 fc ff ff ff       	call   10001394 <createUser(char const*)+0x1d5>	10001394: R_386_PC32	mkdir(char const*, int)
10001398:	83 c4 10             	add    esp,0x10
1000139b:	83 ec 08             	sub    esp,0x8
1000139e:	68 4a 44 00 10       	push   0x1000444a	1000139f: R_386_32	.text
100013a3:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100013a9:	50                   	push   eax
100013aa:	e8 fc ff ff ff       	call   100013ab <createUser(char const*)+0x1ec>	100013ab: R_386_PC32	strcpy
100013af:	83 c4 10             	add    esp,0x10
100013b2:	83 ec 08             	sub    esp,0x8
100013b5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100013b8:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100013be:	50                   	push   eax
100013bf:	e8 fc ff ff ff       	call   100013c0 <createUser(char const*)+0x201>	100013c0: R_386_PC32	strcat
100013c4:	83 c4 10             	add    esp,0x10
100013c7:	83 ec 08             	sub    esp,0x8
100013ca:	68 86 44 00 10       	push   0x10004486	100013cb: R_386_32	.text
100013cf:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100013d5:	50                   	push   eax
100013d6:	e8 fc ff ff ff       	call   100013d7 <createUser(char const*)+0x218>	100013d7: R_386_PC32	strcat
100013db:	83 c4 10             	add    esp,0x10
100013de:	83 ec 08             	sub    esp,0x8
100013e1:	68 c0 01 00 00       	push   0x1c0
100013e6:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100013ec:	50                   	push   eax
100013ed:	e8 fc ff ff ff       	call   100013ee <createUser(char const*)+0x22f>	100013ee: R_386_PC32	mkdir(char const*, int)
100013f2:	83 c4 10             	add    esp,0x10
100013f5:	83 ec 08             	sub    esp,0x8
100013f8:	68 4a 44 00 10       	push   0x1000444a	100013f9: R_386_32	.text
100013fd:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001403:	50                   	push   eax
10001404:	e8 fc ff ff ff       	call   10001405 <createUser(char const*)+0x246>	10001405: R_386_PC32	strcpy
10001409:	83 c4 10             	add    esp,0x10
1000140c:	83 ec 08             	sub    esp,0x8
1000140f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001412:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001418:	50                   	push   eax
10001419:	e8 fc ff ff ff       	call   1000141a <createUser(char const*)+0x25b>	1000141a: R_386_PC32	strcat
1000141e:	83 c4 10             	add    esp,0x10
10001421:	83 ec 08             	sub    esp,0x8
10001424:	68 8d 44 00 10       	push   0x1000448d	10001425: R_386_32	.text
10001429:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000142f:	50                   	push   eax
10001430:	e8 fc ff ff ff       	call   10001431 <createUser(char const*)+0x272>	10001431: R_386_PC32	strcat
10001435:	83 c4 10             	add    esp,0x10
10001438:	83 ec 08             	sub    esp,0x8
1000143b:	68 c0 01 00 00       	push   0x1c0
10001440:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001446:	50                   	push   eax
10001447:	e8 fc ff ff ff       	call   10001448 <createUser(char const*)+0x289>	10001448: R_386_PC32	mkdir(char const*, int)
1000144c:	83 c4 10             	add    esp,0x10
1000144f:	83 ec 08             	sub    esp,0x8
10001452:	68 95 44 00 10       	push   0x10004495	10001453: R_386_32	.text
10001457:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000145d:	50                   	push   eax
1000145e:	e8 fc ff ff ff       	call   1000145f <createUser(char const*)+0x2a0>	1000145f: R_386_PC32	strcpy
10001463:	83 c4 10             	add    esp,0x10
10001466:	83 ec 08             	sub    esp,0x8
10001469:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000146c:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001472:	50                   	push   eax
10001473:	e8 fc ff ff ff       	call   10001474 <createUser(char const*)+0x2b5>	10001474: R_386_PC32	strcat
10001478:	83 c4 10             	add    esp,0x10
1000147b:	83 ec 08             	sub    esp,0x8
1000147e:	68 c0 01 00 00       	push   0x1c0
10001483:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001489:	50                   	push   eax
1000148a:	e8 fc ff ff ff       	call   1000148b <createUser(char const*)+0x2cc>	1000148b: R_386_PC32	mkdir(char const*, int)
1000148f:	83 c4 10             	add    esp,0x10
10001492:	83 ec 08             	sub    esp,0x8
10001495:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000149b:	50                   	push   eax
1000149c:	68 b0 44 00 10       	push   0x100044b0	1000149d: R_386_32	.text
100014a1:	e8 fc ff ff ff       	call   100014a2 <createUser(char const*)+0x2e3>	100014a2: R_386_PC32	copytree(char*, char*)
100014a6:	83 c4 10             	add    esp,0x10
100014a9:	90                   	nop
100014aa:	c9                   	leave  
100014ab:	c3                   	ret    

100014ac <drawBootScreen()>:
100014ac:	55                   	push   ebp
100014ad:	89 e5                	mov    ebp,esp
100014af:	83 ec 18             	sub    esp,0x18
100014b2:	a1 00 00 00 00       	mov    eax,ds:0x0	100014b3: R_386_32	term
100014b7:	83 ec 08             	sub    esp,0x8
100014ba:	6a 0b                	push   0xb
100014bc:	50                   	push   eax
100014bd:	e8 fc ff ff ff       	call   100014be <drawBootScreen()+0x12>	100014be: R_386_PC32	VgaText::setDefaultBgColour(VgaColour)
100014c2:	83 c4 10             	add    esp,0x10
100014c5:	a1 00 00 00 00       	mov    eax,ds:0x0	100014c6: R_386_32	term
100014ca:	83 ec 08             	sub    esp,0x8
100014cd:	6a 00                	push   0x0
100014cf:	50                   	push   eax
100014d0:	e8 fc ff ff ff       	call   100014d1 <drawBootScreen()+0x25>	100014d1: R_386_PC32	VgaText::setDefaultFgColour(VgaColour)
100014d5:	83 c4 10             	add    esp,0x10
100014d8:	a1 00 00 00 00       	mov    eax,ds:0x0	100014d9: R_386_32	term
100014dd:	83 ec 0c             	sub    esp,0xc
100014e0:	50                   	push   eax
100014e1:	e8 fc ff ff ff       	call   100014e2 <drawBootScreen()+0x36>	100014e2: R_386_PC32	VgaText::clearScreen()
100014e6:	83 c4 10             	add    esp,0x10
100014e9:	a1 00 00 00 00       	mov    eax,ds:0x0	100014ea: R_386_32	term
100014ee:	83 ec 08             	sub    esp,0x8
100014f1:	68 cf 44 00 10       	push   0x100044cf	100014f2: R_386_32	.text
100014f6:	50                   	push   eax
100014f7:	e8 fc ff ff ff       	call   100014f8 <drawBootScreen()+0x4c>	100014f8: R_386_PC32	VgaText::setTitle(char*)
100014fc:	83 c4 10             	add    esp,0x10
100014ff:	a1 00 00 00 00       	mov    eax,ds:0x0	10001500: R_386_32	term
10001504:	83 ec 08             	sub    esp,0x8
10001507:	6a 00                	push   0x0
10001509:	50                   	push   eax
1000150a:	e8 fc ff ff ff       	call   1000150b <drawBootScreen()+0x5f>	1000150b: R_386_PC32	VgaText::setTitleColour(VgaColour)
1000150f:	83 c4 10             	add    esp,0x10
10001512:	a1 00 00 00 00       	mov    eax,ds:0x0	10001513: R_386_32	term
10001517:	83 ec 08             	sub    esp,0x8
1000151a:	6a 00                	push   0x0
1000151c:	50                   	push   eax
1000151d:	e8 fc ff ff ff       	call   1000151e <drawBootScreen()+0x72>	1000151e: R_386_PC32	VgaText::setTitleTextColour(VgaColour)
10001522:	83 c4 10             	add    esp,0x10
10001525:	a1 00 00 00 00       	mov    eax,ds:0x0	10001526: R_386_32	term
1000152a:	83 ec 04             	sub    esp,0x4
1000152d:	6a 00                	push   0x0
1000152f:	6a 00                	push   0x0
10001531:	50                   	push   eax
10001532:	e8 fc ff ff ff       	call   10001533 <drawBootScreen()+0x87>	10001533: R_386_PC32	VgaText::setCursor(int, int)
10001537:	83 c4 10             	add    esp,0x10
1000153a:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
10001541:	83 7d f4 4f          	cmp    DWORD PTR [ebp-0xc],0x4f
10001545:	7f 19                	jg     10001560 <drawBootScreen()+0xb4>
10001547:	a1 00 00 00 00       	mov    eax,ds:0x0	10001548: R_386_32	term
1000154c:	6a 00                	push   0x0
1000154e:	6a 00                	push   0x0
10001550:	6a 20                	push   0x20
10001552:	50                   	push   eax
10001553:	e8 fc ff ff ff       	call   10001554 <drawBootScreen()+0xa8>	10001554: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
10001558:	83 c4 10             	add    esp,0x10
1000155b:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
1000155e:	eb e1                	jmp    10001541 <drawBootScreen()+0x95>
10001560:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
10001567:	83 7d f0 18          	cmp    DWORD PTR [ebp-0x10],0x18
1000156b:	7f 41                	jg     100015ae <drawBootScreen()+0x102>
1000156d:	a1 00 00 00 00       	mov    eax,ds:0x0	1000156e: R_386_32	term
10001572:	83 ec 04             	sub    esp,0x4
10001575:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10001578:	6a 00                	push   0x0
1000157a:	50                   	push   eax
1000157b:	e8 fc ff ff ff       	call   1000157c <drawBootScreen()+0xd0>	1000157c: R_386_PC32	VgaText::setCursor(int, int)
10001580:	83 c4 10             	add    esp,0x10
10001583:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
1000158a:	83 7d ec 0f          	cmp    DWORD PTR [ebp-0x14],0xf
1000158e:	7f 19                	jg     100015a9 <drawBootScreen()+0xfd>
10001590:	a1 00 00 00 00       	mov    eax,ds:0x0	10001591: R_386_32	term
10001595:	6a 00                	push   0x0
10001597:	6a 00                	push   0x0
10001599:	6a 20                	push   0x20
1000159b:	50                   	push   eax
1000159c:	e8 fc ff ff ff       	call   1000159d <drawBootScreen()+0xf1>	1000159d: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
100015a1:	83 c4 10             	add    esp,0x10
100015a4:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
100015a7:	eb e1                	jmp    1000158a <drawBootScreen()+0xde>
100015a9:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
100015ac:	eb b9                	jmp    10001567 <drawBootScreen()+0xbb>
100015ae:	a1 00 00 00 00       	mov    eax,ds:0x0	100015af: R_386_32	term
100015b3:	83 ec 04             	sub    esp,0x4
100015b6:	6a 01                	push   0x1
100015b8:	6a 01                	push   0x1
100015ba:	50                   	push   eax
100015bb:	e8 fc ff ff ff       	call   100015bc <drawBootScreen()+0x110>	100015bc: R_386_PC32	VgaText::setCursor(int, int)
100015c0:	83 c4 10             	add    esp,0x10
100015c3:	a1 00 00 00 00       	mov    eax,ds:0x0	100015c4: R_386_32	term
100015c8:	6a 00                	push   0x0
100015ca:	6a 0f                	push   0xf
100015cc:	68 d0 44 00 10       	push   0x100044d0	100015cd: R_386_32	.text
100015d1:	50                   	push   eax
100015d2:	e8 fc ff ff ff       	call   100015d3 <drawBootScreen()+0x127>	100015d3: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
100015d7:	83 c4 10             	add    esp,0x10
100015da:	a1 00 00 00 00       	mov    eax,ds:0x0	100015db: R_386_32	term
100015df:	6a 00                	push   0x0
100015e1:	6a 0e                	push   0xe
100015e3:	68 53 45 00 10       	push   0x10004553	100015e4: R_386_32	.text
100015e8:	50                   	push   eax
100015e9:	e8 fc ff ff ff       	call   100015ea <drawBootScreen()+0x13e>	100015ea: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
100015ee:	83 c4 10             	add    esp,0x10
100015f1:	a1 00 00 00 00       	mov    eax,ds:0x0	100015f2: R_386_32	term
100015f6:	83 ec 08             	sub    esp,0x8
100015f9:	6a 0f                	push   0xf
100015fb:	50                   	push   eax
100015fc:	e8 fc ff ff ff       	call   100015fd <drawBootScreen()+0x151>	100015fd: R_386_PC32	VgaText::setDefaultBgColour(VgaColour)
10001601:	83 c4 10             	add    esp,0x10
10001604:	a1 00 00 00 00       	mov    eax,ds:0x0	10001605: R_386_32	term
10001609:	83 ec 08             	sub    esp,0x8
1000160c:	6a 00                	push   0x0
1000160e:	50                   	push   eax
1000160f:	e8 fc ff ff ff       	call   10001610 <drawBootScreen()+0x164>	10001610: R_386_PC32	VgaText::setDefaultFgColour(VgaColour)
10001614:	83 c4 10             	add    esp,0x10
10001617:	90                   	nop
10001618:	c9                   	leave  
10001619:	c3                   	ret    

1000161a <drawBasicWindowX(int, int, int, int, char const*, bool)>:
1000161a:	55                   	push   ebp
1000161b:	89 e5                	mov    ebp,esp
1000161d:	53                   	push   ebx
1000161e:	83 ec 34             	sub    esp,0x34
10001621:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
10001624:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
10001627:	ff 45 0c             	inc    DWORD PTR [ebp+0xc]
1000162a:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
10001631:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10001634:	3b 45 14             	cmp    eax,DWORD PTR [ebp+0x14]
10001637:	7d 6c                	jge    100016a5 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x8b>
10001639:	a1 00 00 00 00       	mov    eax,ds:0x0	1000163a: R_386_32	term
1000163e:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
10001641:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001644:	01 ca                	add    edx,ecx
10001646:	83 ec 04             	sub    esp,0x4
10001649:	52                   	push   edx
1000164a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000164d:	50                   	push   eax
1000164e:	e8 fc ff ff ff       	call   1000164f <drawBasicWindowX(int, int, int, int, char const*, bool)+0x35>	1000164f: R_386_PC32	VgaText::setCursor(int, int)
10001653:	83 c4 10             	add    esp,0x10
10001656:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
1000165d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001660:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
10001663:	7d 3b                	jge    100016a0 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x86>
10001665:	a1 00 00 00 00       	mov    eax,ds:0x0	10001666: R_386_32	term
1000166a:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
1000166e:	74 07                	je     10001677 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x5d>
10001670:	b9 07 00 00 00       	mov    ecx,0x7
10001675:	eb 05                	jmp    1000167c <drawBasicWindowX(int, int, int, int, char const*, bool)+0x62>
10001677:	b9 0f 00 00 00       	mov    ecx,0xf
1000167c:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
10001680:	74 07                	je     10001689 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x6f>
10001682:	ba 07 00 00 00       	mov    edx,0x7
10001687:	eb 05                	jmp    1000168e <drawBasicWindowX(int, int, int, int, char const*, bool)+0x74>
10001689:	ba 0f 00 00 00       	mov    edx,0xf
1000168e:	51                   	push   ecx
1000168f:	52                   	push   edx
10001690:	6a 20                	push   0x20
10001692:	50                   	push   eax
10001693:	e8 fc ff ff ff       	call   10001694 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x7a>	10001694: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
10001698:	83 c4 10             	add    esp,0x10
1000169b:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
1000169e:	eb bd                	jmp    1000165d <drawBasicWindowX(int, int, int, int, char const*, bool)+0x43>
100016a0:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
100016a3:	eb 8c                	jmp    10001631 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x17>
100016a5:	a1 00 00 00 00       	mov    eax,ds:0x0	100016a6: R_386_32	term
100016aa:	83 ec 04             	sub    esp,0x4
100016ad:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
100016b0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100016b3:	50                   	push   eax
100016b4:	e8 fc ff ff ff       	call   100016b5 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x9b>	100016b5: R_386_PC32	VgaText::setCursor(int, int)
100016b9:	83 c4 10             	add    esp,0x10
100016bc:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
100016c3:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
100016c6:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
100016c9:	7d 19                	jge    100016e4 <drawBasicWindowX(int, int, int, int, char const*, bool)+0xca>
100016cb:	a1 00 00 00 00       	mov    eax,ds:0x0	100016cc: R_386_32	term
100016d0:	6a 01                	push   0x1
100016d2:	6a 01                	push   0x1
100016d4:	6a 20                	push   0x20
100016d6:	50                   	push   eax
100016d7:	e8 fc ff ff ff       	call   100016d8 <drawBasicWindowX(int, int, int, int, char const*, bool)+0xbe>	100016d8: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
100016dc:	83 c4 10             	add    esp,0x10
100016df:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
100016e2:	eb df                	jmp    100016c3 <drawBasicWindowX(int, int, int, int, char const*, bool)+0xa9>
100016e4:	a1 00 00 00 00       	mov    eax,ds:0x0	100016e5: R_386_32	term
100016e9:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
100016ec:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
100016ef:	01 d1                	add    ecx,edx
100016f1:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
100016f4:	42                   	inc    edx
100016f5:	83 ec 04             	sub    esp,0x4
100016f8:	51                   	push   ecx
100016f9:	52                   	push   edx
100016fa:	50                   	push   eax
100016fb:	e8 fc ff ff ff       	call   100016fc <drawBasicWindowX(int, int, int, int, char const*, bool)+0xe2>	100016fc: R_386_PC32	VgaText::setCursor(int, int)
10001700:	83 c4 10             	add    esp,0x10
10001703:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
1000170a:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
1000170d:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
10001710:	7d 19                	jge    1000172b <drawBasicWindowX(int, int, int, int, char const*, bool)+0x111>
10001712:	a1 00 00 00 00       	mov    eax,ds:0x0	10001713: R_386_32	term
10001717:	6a 03                	push   0x3
10001719:	6a 03                	push   0x3
1000171b:	6a 20                	push   0x20
1000171d:	50                   	push   eax
1000171e:	e8 fc ff ff ff       	call   1000171f <drawBasicWindowX(int, int, int, int, char const*, bool)+0x105>	1000171f: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
10001723:	83 c4 10             	add    esp,0x10
10001726:	ff 45 e8             	inc    DWORD PTR [ebp-0x18]
10001729:	eb df                	jmp    1000170a <drawBasicWindowX(int, int, int, int, char const*, bool)+0xf0>
1000172b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
1000172e:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10001731:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10001734:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
10001737:	01 d0                	add    eax,edx
10001739:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
1000173c:	0f 8d 89 00 00 00    	jge    100017cb <drawBasicWindowX(int, int, int, int, char const*, bool)+0x1b1>
10001742:	a1 00 00 00 00       	mov    eax,ds:0x0	10001743: R_386_32	term
10001747:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
1000174a:	8d 4a 01             	lea    ecx,[edx+0x1]
1000174d:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
10001750:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10001753:	01 da                	add    edx,ebx
10001755:	83 ec 04             	sub    esp,0x4
10001758:	51                   	push   ecx
10001759:	52                   	push   edx
1000175a:	50                   	push   eax
1000175b:	e8 fc ff ff ff       	call   1000175c <drawBasicWindowX(int, int, int, int, char const*, bool)+0x142>	1000175c: R_386_PC32	VgaText::setCursor(int, int)
10001760:	83 c4 10             	add    esp,0x10
10001763:	a1 00 00 00 00       	mov    eax,ds:0x0	10001764: R_386_32	term
10001768:	6a 03                	push   0x3
1000176a:	6a 03                	push   0x3
1000176c:	6a 20                	push   0x20
1000176e:	50                   	push   eax
1000176f:	e8 fc ff ff ff       	call   10001770 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x156>	10001770: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
10001774:	83 c4 10             	add    esp,0x10
10001777:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
1000177a:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
1000177d:	01 d0                	add    eax,edx
1000177f:	48                   	dec    eax
10001780:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
10001783:	74 3e                	je     100017c3 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x1a9>
10001785:	a1 00 00 00 00       	mov    eax,ds:0x0	10001786: R_386_32	term
1000178a:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
1000178d:	42                   	inc    edx
1000178e:	83 ec 04             	sub    esp,0x4
10001791:	52                   	push   edx
10001792:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001795:	50                   	push   eax
10001796:	e8 fc ff ff ff       	call   10001797 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x17d>	10001797: R_386_PC32	VgaText::setCursor(int, int)
1000179b:	83 c4 10             	add    esp,0x10
1000179e:	a1 00 00 00 00       	mov    eax,ds:0x0	1000179f: R_386_32	term
100017a3:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
100017a7:	74 07                	je     100017b0 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x196>
100017a9:	ba 07 00 00 00       	mov    edx,0x7
100017ae:	eb 05                	jmp    100017b5 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x19b>
100017b0:	ba 0f 00 00 00       	mov    edx,0xf
100017b5:	52                   	push   edx
100017b6:	6a 00                	push   0x0
100017b8:	6a dd                	push   0xffffffdd
100017ba:	50                   	push   eax
100017bb:	e8 fc ff ff ff       	call   100017bc <drawBasicWindowX(int, int, int, int, char const*, bool)+0x1a2>	100017bc: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
100017c0:	83 c4 10             	add    esp,0x10
100017c3:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
100017c6:	e9 66 ff ff ff       	jmp    10001731 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x117>
100017cb:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
100017ce:	83 ec 0c             	sub    esp,0xc
100017d1:	ff 75 18             	push   DWORD PTR [ebp+0x18]
100017d4:	e8 fc ff ff ff       	call   100017d5 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x1bb>	100017d5: R_386_PC32	strlen
100017d9:	83 c4 10             	add    esp,0x10
100017dc:	29 c3                	sub    ebx,eax
100017de:	89 d8                	mov    eax,ebx
100017e0:	d1 e8                	shr    eax,1
100017e2:	48                   	dec    eax
100017e3:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
100017e6:	a1 00 00 00 00       	mov    eax,ds:0x0	100017e7: R_386_32	term
100017eb:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
100017ee:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
100017f1:	01 ca                	add    edx,ecx
100017f3:	83 ec 04             	sub    esp,0x4
100017f6:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
100017f9:	52                   	push   edx
100017fa:	50                   	push   eax
100017fb:	e8 fc ff ff ff       	call   100017fc <drawBasicWindowX(int, int, int, int, char const*, bool)+0x1e2>	100017fc: R_386_PC32	VgaText::setCursor(int, int)
10001800:	83 c4 10             	add    esp,0x10
10001803:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
1000180a:	83 ec 0c             	sub    esp,0xc
1000180d:	ff 75 18             	push   DWORD PTR [ebp+0x18]
10001810:	e8 fc ff ff ff       	call   10001811 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x1f7>	10001811: R_386_PC32	strlen
10001815:	83 c4 10             	add    esp,0x10
10001818:	89 c2                	mov    edx,eax
1000181a:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
1000181d:	39 c2                	cmp    edx,eax
1000181f:	76 25                	jbe    10001846 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x22c>
10001821:	a1 00 00 00 00       	mov    eax,ds:0x0	10001822: R_386_32	term
10001826:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
10001829:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
1000182c:	01 ca                	add    edx,ecx
1000182e:	8a 12                	mov    dl,BYTE PTR [edx]
10001830:	0f be d2             	movsx  edx,dl
10001833:	6a 01                	push   0x1
10001835:	6a 0f                	push   0xf
10001837:	52                   	push   edx
10001838:	50                   	push   eax
10001839:	e8 fc ff ff ff       	call   1000183a <drawBasicWindowX(int, int, int, int, char const*, bool)+0x220>	1000183a: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
1000183e:	83 c4 10             	add    esp,0x10
10001841:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
10001844:	eb c4                	jmp    1000180a <drawBasicWindowX(int, int, int, int, char const*, bool)+0x1f0>
10001846:	90                   	nop
10001847:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
1000184a:	c9                   	leave  
1000184b:	c3                   	ret    

1000184c <drawBasicWindow(int, int, int, int, char const*)>:
1000184c:	55                   	push   ebp
1000184d:	89 e5                	mov    ebp,esp
1000184f:	83 ec 08             	sub    esp,0x8
10001852:	83 ec 08             	sub    esp,0x8
10001855:	6a 00                	push   0x0
10001857:	ff 75 18             	push   DWORD PTR [ebp+0x18]
1000185a:	ff 75 14             	push   DWORD PTR [ebp+0x14]
1000185d:	ff 75 10             	push   DWORD PTR [ebp+0x10]
10001860:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10001863:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001866:	e8 fc ff ff ff       	call   10001867 <drawBasicWindow(int, int, int, int, char const*)+0x1b>	10001867: R_386_PC32	drawBasicWindowX(int, int, int, int, char const*, bool)
1000186b:	83 c4 20             	add    esp,0x20
1000186e:	90                   	nop
1000186f:	c9                   	leave  
10001870:	c3                   	ret    

10001871 <bootInstallKeybrd(KeyboardToken, bool*)>:
10001871:	55                   	push   ebp
10001872:	89 e5                	mov    ebp,esp
10001874:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
10001877:	05 04 01 00 00       	add    eax,0x104
1000187c:	8a 00                	mov    al,BYTE PTR [eax]
1000187e:	84 c0                	test   al,al
10001880:	74 12                	je     10001894 <bootInstallKeybrd(KeyboardToken, bool*)+0x23>
10001882:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001885:	66 83 f8 09          	cmp    ax,0x9
10001889:	75 09                	jne    10001894 <bootInstallKeybrd(KeyboardToken, bool*)+0x23>
1000188b:	c6 05 00 00 00 00 7f 	mov    BYTE PTR ds:0x0,0x7f	1000188d: R_386_32	installKey
10001892:	eb 36                	jmp    100018ca <bootInstallKeybrd(KeyboardToken, bool*)+0x59>
10001894:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
10001897:	84 c0                	test   al,al
10001899:	75 2e                	jne    100018c9 <bootInstallKeybrd(KeyboardToken, bool*)+0x58>
1000189b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000189e:	66 3d 0d 02          	cmp    ax,0x20d
100018a2:	75 09                	jne    100018ad <bootInstallKeybrd(KeyboardToken, bool*)+0x3c>
100018a4:	c6 05 00 00 00 00 03 	mov    BYTE PTR ds:0x0,0x3	100018a6: R_386_32	installKey
100018ab:	eb 1d                	jmp    100018ca <bootInstallKeybrd(KeyboardToken, bool*)+0x59>
100018ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100018b0:	66 3d 0e 02          	cmp    ax,0x20e
100018b4:	75 09                	jne    100018bf <bootInstallKeybrd(KeyboardToken, bool*)+0x4e>
100018b6:	c6 05 00 00 00 00 04 	mov    BYTE PTR ds:0x0,0x4	100018b8: R_386_32	installKey
100018bd:	eb 0b                	jmp    100018ca <bootInstallKeybrd(KeyboardToken, bool*)+0x59>
100018bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100018c2:	a2 00 00 00 00       	mov    ds:0x0,al	100018c3: R_386_32	installKey
100018c7:	eb 01                	jmp    100018ca <bootInstallKeybrd(KeyboardToken, bool*)+0x59>
100018c9:	90                   	nop
100018ca:	5d                   	pop    ebp
100018cb:	c3                   	ret    

100018cc <bootInstallTasks(int)>:
100018cc:	55                   	push   ebp
100018cd:	89 e5                	mov    ebp,esp
100018cf:	83 ec 08             	sub    esp,0x8
100018d2:	a1 00 00 00 00       	mov    eax,ds:0x0	100018d3: R_386_32	term
100018d7:	83 ec 04             	sub    esp,0x4
100018da:	6a 08                	push   0x8
100018dc:	6a 18                	push   0x18
100018de:	50                   	push   eax
100018df:	e8 fc ff ff ff       	call   100018e0 <bootInstallTasks(int)+0x14>	100018e0: R_386_PC32	VgaText::setCursor(int, int)
100018e4:	83 c4 10             	add    esp,0x10
100018e7:	a1 00 00 00 00       	mov    eax,ds:0x0	100018e8: R_386_32	term
100018ec:	83 ec 08             	sub    esp,0x8
100018ef:	68 74 45 00 10       	push   0x10004574	100018f0: R_386_32	.text
100018f4:	50                   	push   eax
100018f5:	e8 fc ff ff ff       	call   100018f6 <bootInstallTasks(int)+0x2a>	100018f6: R_386_PC32	VgaText::puts(char const*)
100018fa:	83 c4 10             	add    esp,0x10
100018fd:	a1 00 00 00 00       	mov    eax,ds:0x0	100018fe: R_386_32	term
10001902:	83 ec 04             	sub    esp,0x4
10001905:	6a 0a                	push   0xa
10001907:	6a 1a                	push   0x1a
10001909:	50                   	push   eax
1000190a:	e8 fc ff ff ff       	call   1000190b <bootInstallTasks(int)+0x3f>	1000190b: R_386_PC32	VgaText::setCursor(int, int)
1000190f:	83 c4 10             	add    esp,0x10
10001912:	a1 00 00 00 00       	mov    eax,ds:0x0	10001913: R_386_32	term
10001917:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
1000191b:	75 07                	jne    10001924 <bootInstallTasks(int)+0x58>
1000191d:	ba 9c 45 00 10       	mov    edx,0x1000459c	1000191e: R_386_32	.text
10001922:	eb 05                	jmp    10001929 <bootInstallTasks(int)+0x5d>
10001924:	ba 9f 45 00 10       	mov    edx,0x1000459f	10001925: R_386_32	.text
10001929:	83 ec 08             	sub    esp,0x8
1000192c:	52                   	push   edx
1000192d:	50                   	push   eax
1000192e:	e8 fc ff ff ff       	call   1000192f <bootInstallTasks(int)+0x63>	1000192f: R_386_PC32	VgaText::puts(char const*)
10001933:	83 c4 10             	add    esp,0x10
10001936:	a1 00 00 00 00       	mov    eax,ds:0x0	10001937: R_386_32	term
1000193b:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
1000193f:	78 07                	js     10001948 <bootInstallTasks(int)+0x7c>
10001941:	ba 00 00 00 00       	mov    edx,0x0
10001946:	eb 05                	jmp    1000194d <bootInstallTasks(int)+0x81>
10001948:	ba 07 00 00 00       	mov    edx,0x7
1000194d:	6a 0f                	push   0xf
1000194f:	52                   	push   edx
10001950:	68 a2 45 00 10       	push   0x100045a2	10001951: R_386_32	.text
10001955:	50                   	push   eax
10001956:	e8 fc ff ff ff       	call   10001957 <bootInstallTasks(int)+0x8b>	10001957: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
1000195b:	83 c4 10             	add    esp,0x10
1000195e:	a1 00 00 00 00       	mov    eax,ds:0x0	1000195f: R_386_32	term
10001963:	83 ec 04             	sub    esp,0x4
10001966:	6a 0b                	push   0xb
10001968:	6a 1a                	push   0x1a
1000196a:	50                   	push   eax
1000196b:	e8 fc ff ff ff       	call   1000196c <bootInstallTasks(int)+0xa0>	1000196c: R_386_PC32	VgaText::setCursor(int, int)
10001970:	83 c4 10             	add    esp,0x10
10001973:	a1 00 00 00 00       	mov    eax,ds:0x0	10001974: R_386_32	term
10001978:	83 7d 08 01          	cmp    DWORD PTR [ebp+0x8],0x1
1000197c:	75 07                	jne    10001985 <bootInstallTasks(int)+0xb9>
1000197e:	ba 9c 45 00 10       	mov    edx,0x1000459c	1000197f: R_386_32	.text
10001983:	eb 05                	jmp    1000198a <bootInstallTasks(int)+0xbe>
10001985:	ba 9f 45 00 10       	mov    edx,0x1000459f	10001986: R_386_32	.text
1000198a:	83 ec 08             	sub    esp,0x8
1000198d:	52                   	push   edx
1000198e:	50                   	push   eax
1000198f:	e8 fc ff ff ff       	call   10001990 <bootInstallTasks(int)+0xc4>	10001990: R_386_PC32	VgaText::puts(char const*)
10001994:	83 c4 10             	add    esp,0x10
10001997:	a1 00 00 00 00       	mov    eax,ds:0x0	10001998: R_386_32	term
1000199c:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
100019a0:	7e 07                	jle    100019a9 <bootInstallTasks(int)+0xdd>
100019a2:	ba 00 00 00 00       	mov    edx,0x0
100019a7:	eb 05                	jmp    100019ae <bootInstallTasks(int)+0xe2>
100019a9:	ba 07 00 00 00       	mov    edx,0x7
100019ae:	6a 0f                	push   0xf
100019b0:	52                   	push   edx
100019b1:	68 ba 45 00 10       	push   0x100045ba	100019b2: R_386_32	.text
100019b6:	50                   	push   eax
100019b7:	e8 fc ff ff ff       	call   100019b8 <bootInstallTasks(int)+0xec>	100019b8: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
100019bc:	83 c4 10             	add    esp,0x10
100019bf:	a1 00 00 00 00       	mov    eax,ds:0x0	100019c0: R_386_32	term
100019c4:	83 ec 04             	sub    esp,0x4
100019c7:	6a 0c                	push   0xc
100019c9:	6a 1a                	push   0x1a
100019cb:	50                   	push   eax
100019cc:	e8 fc ff ff ff       	call   100019cd <bootInstallTasks(int)+0x101>	100019cd: R_386_PC32	VgaText::setCursor(int, int)
100019d1:	83 c4 10             	add    esp,0x10
100019d4:	a1 00 00 00 00       	mov    eax,ds:0x0	100019d5: R_386_32	term
100019d9:	83 7d 08 02          	cmp    DWORD PTR [ebp+0x8],0x2
100019dd:	75 07                	jne    100019e6 <bootInstallTasks(int)+0x11a>
100019df:	ba 9c 45 00 10       	mov    edx,0x1000459c	100019e0: R_386_32	.text
100019e4:	eb 05                	jmp    100019eb <bootInstallTasks(int)+0x11f>
100019e6:	ba 9f 45 00 10       	mov    edx,0x1000459f	100019e7: R_386_32	.text
100019eb:	83 ec 08             	sub    esp,0x8
100019ee:	52                   	push   edx
100019ef:	50                   	push   eax
100019f0:	e8 fc ff ff ff       	call   100019f1 <bootInstallTasks(int)+0x125>	100019f1: R_386_PC32	VgaText::puts(char const*)
100019f5:	83 c4 10             	add    esp,0x10
100019f8:	a1 00 00 00 00       	mov    eax,ds:0x0	100019f9: R_386_32	term
100019fd:	83 7d 08 01          	cmp    DWORD PTR [ebp+0x8],0x1
10001a01:	7e 07                	jle    10001a0a <bootInstallTasks(int)+0x13e>
10001a03:	ba 00 00 00 00       	mov    edx,0x0
10001a08:	eb 05                	jmp    10001a0f <bootInstallTasks(int)+0x143>
10001a0a:	ba 07 00 00 00       	mov    edx,0x7
10001a0f:	6a 0f                	push   0xf
10001a11:	52                   	push   edx
10001a12:	68 d0 45 00 10       	push   0x100045d0	10001a13: R_386_32	.text
10001a17:	50                   	push   eax
10001a18:	e8 fc ff ff ff       	call   10001a19 <bootInstallTasks(int)+0x14d>	10001a19: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10001a1d:	83 c4 10             	add    esp,0x10
10001a20:	a1 00 00 00 00       	mov    eax,ds:0x0	10001a21: R_386_32	term
10001a25:	83 ec 04             	sub    esp,0x4
10001a28:	6a 0d                	push   0xd
10001a2a:	6a 1a                	push   0x1a
10001a2c:	50                   	push   eax
10001a2d:	e8 fc ff ff ff       	call   10001a2e <bootInstallTasks(int)+0x162>	10001a2e: R_386_PC32	VgaText::setCursor(int, int)
10001a32:	83 c4 10             	add    esp,0x10
10001a35:	a1 00 00 00 00       	mov    eax,ds:0x0	10001a36: R_386_32	term
10001a3a:	83 7d 08 03          	cmp    DWORD PTR [ebp+0x8],0x3
10001a3e:	75 07                	jne    10001a47 <bootInstallTasks(int)+0x17b>
10001a40:	ba 9c 45 00 10       	mov    edx,0x1000459c	10001a41: R_386_32	.text
10001a45:	eb 05                	jmp    10001a4c <bootInstallTasks(int)+0x180>
10001a47:	ba 9f 45 00 10       	mov    edx,0x1000459f	10001a48: R_386_32	.text
10001a4c:	83 ec 08             	sub    esp,0x8
10001a4f:	52                   	push   edx
10001a50:	50                   	push   eax
10001a51:	e8 fc ff ff ff       	call   10001a52 <bootInstallTasks(int)+0x186>	10001a52: R_386_PC32	VgaText::puts(char const*)
10001a56:	83 c4 10             	add    esp,0x10
10001a59:	a1 00 00 00 00       	mov    eax,ds:0x0	10001a5a: R_386_32	term
10001a5e:	83 7d 08 02          	cmp    DWORD PTR [ebp+0x8],0x2
10001a62:	7e 07                	jle    10001a6b <bootInstallTasks(int)+0x19f>
10001a64:	ba 00 00 00 00       	mov    edx,0x0
10001a69:	eb 05                	jmp    10001a70 <bootInstallTasks(int)+0x1a4>
10001a6b:	ba 07 00 00 00       	mov    edx,0x7
10001a70:	6a 0f                	push   0xf
10001a72:	52                   	push   edx
10001a73:	68 e6 45 00 10       	push   0x100045e6	10001a74: R_386_32	.text
10001a78:	50                   	push   eax
10001a79:	e8 fc ff ff ff       	call   10001a7a <bootInstallTasks(int)+0x1ae>	10001a7a: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10001a7e:	83 c4 10             	add    esp,0x10
10001a81:	a1 00 00 00 00       	mov    eax,ds:0x0	10001a82: R_386_32	term
10001a86:	83 ec 04             	sub    esp,0x4
10001a89:	6a 0e                	push   0xe
10001a8b:	6a 1a                	push   0x1a
10001a8d:	50                   	push   eax
10001a8e:	e8 fc ff ff ff       	call   10001a8f <bootInstallTasks(int)+0x1c3>	10001a8f: R_386_PC32	VgaText::setCursor(int, int)
10001a93:	83 c4 10             	add    esp,0x10
10001a96:	a1 00 00 00 00       	mov    eax,ds:0x0	10001a97: R_386_32	term
10001a9b:	83 7d 08 04          	cmp    DWORD PTR [ebp+0x8],0x4
10001a9f:	75 07                	jne    10001aa8 <bootInstallTasks(int)+0x1dc>
10001aa1:	ba 9c 45 00 10       	mov    edx,0x1000459c	10001aa2: R_386_32	.text
10001aa6:	eb 05                	jmp    10001aad <bootInstallTasks(int)+0x1e1>
10001aa8:	ba 9f 45 00 10       	mov    edx,0x1000459f	10001aa9: R_386_32	.text
10001aad:	83 ec 08             	sub    esp,0x8
10001ab0:	52                   	push   edx
10001ab1:	50                   	push   eax
10001ab2:	e8 fc ff ff ff       	call   10001ab3 <bootInstallTasks(int)+0x1e7>	10001ab3: R_386_PC32	VgaText::puts(char const*)
10001ab7:	83 c4 10             	add    esp,0x10
10001aba:	a1 00 00 00 00       	mov    eax,ds:0x0	10001abb: R_386_32	term
10001abf:	83 7d 08 03          	cmp    DWORD PTR [ebp+0x8],0x3
10001ac3:	7e 07                	jle    10001acc <bootInstallTasks(int)+0x200>
10001ac5:	ba 00 00 00 00       	mov    edx,0x0
10001aca:	eb 05                	jmp    10001ad1 <bootInstallTasks(int)+0x205>
10001acc:	ba 07 00 00 00       	mov    edx,0x7
10001ad1:	6a 0f                	push   0xf
10001ad3:	52                   	push   edx
10001ad4:	68 fa 45 00 10       	push   0x100045fa	10001ad5: R_386_32	.text
10001ad9:	50                   	push   eax
10001ada:	e8 fc ff ff ff       	call   10001adb <bootInstallTasks(int)+0x20f>	10001adb: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10001adf:	83 c4 10             	add    esp,0x10
10001ae2:	a1 00 00 00 00       	mov    eax,ds:0x0	10001ae3: R_386_32	term
10001ae7:	83 ec 04             	sub    esp,0x4
10001aea:	6a 0f                	push   0xf
10001aec:	6a 1a                	push   0x1a
10001aee:	50                   	push   eax
10001aef:	e8 fc ff ff ff       	call   10001af0 <bootInstallTasks(int)+0x224>	10001af0: R_386_PC32	VgaText::setCursor(int, int)
10001af4:	83 c4 10             	add    esp,0x10
10001af7:	a1 00 00 00 00       	mov    eax,ds:0x0	10001af8: R_386_32	term
10001afc:	83 7d 08 05          	cmp    DWORD PTR [ebp+0x8],0x5
10001b00:	75 07                	jne    10001b09 <bootInstallTasks(int)+0x23d>
10001b02:	ba 9c 45 00 10       	mov    edx,0x1000459c	10001b03: R_386_32	.text
10001b07:	eb 05                	jmp    10001b0e <bootInstallTasks(int)+0x242>
10001b09:	ba 9f 45 00 10       	mov    edx,0x1000459f	10001b0a: R_386_32	.text
10001b0e:	83 ec 08             	sub    esp,0x8
10001b11:	52                   	push   edx
10001b12:	50                   	push   eax
10001b13:	e8 fc ff ff ff       	call   10001b14 <bootInstallTasks(int)+0x248>	10001b14: R_386_PC32	VgaText::puts(char const*)
10001b18:	83 c4 10             	add    esp,0x10
10001b1b:	a1 00 00 00 00       	mov    eax,ds:0x0	10001b1c: R_386_32	term
10001b20:	83 7d 08 04          	cmp    DWORD PTR [ebp+0x8],0x4
10001b24:	7e 07                	jle    10001b2d <bootInstallTasks(int)+0x261>
10001b26:	ba 00 00 00 00       	mov    edx,0x0
10001b2b:	eb 05                	jmp    10001b32 <bootInstallTasks(int)+0x266>
10001b2d:	ba 07 00 00 00       	mov    edx,0x7
10001b32:	6a 0f                	push   0xf
10001b34:	52                   	push   edx
10001b35:	68 12 46 00 10       	push   0x10004612	10001b36: R_386_32	.text
10001b3a:	50                   	push   eax
10001b3b:	e8 fc ff ff ff       	call   10001b3c <bootInstallTasks(int)+0x270>	10001b3c: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10001b40:	83 c4 10             	add    esp,0x10
10001b43:	90                   	nop
10001b44:	c9                   	leave  
10001b45:	c3                   	ret    

10001b46 <ror(unsigned long long, int, int)>:
10001b46:	55                   	push   ebp
10001b47:	89 e5                	mov    ebp,esp
10001b49:	56                   	push   esi
10001b4a:	53                   	push   ebx
10001b4b:	83 ec 20             	sub    esp,0x20
10001b4e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001b51:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
10001b54:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10001b57:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10001b5a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
10001b5d:	ba 01 00 00 00       	mov    edx,0x1
10001b62:	88 c1                	mov    cl,al
10001b64:	d3 e2                	shl    edx,cl
10001b66:	89 d0                	mov    eax,edx
10001b68:	48                   	dec    eax
10001b69:	99                   	cdq    
10001b6a:	89 c1                	mov    ecx,eax
10001b6c:	23 4d e0             	and    ecx,DWORD PTR [ebp-0x20]
10001b6f:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
10001b72:	89 d0                	mov    eax,edx
10001b74:	23 45 e4             	and    eax,DWORD PTR [ebp-0x1c]
10001b77:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
10001b7a:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
10001b7d:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10001b80:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10001b83:	0f ad d0             	shrd   eax,edx,cl
10001b86:	d3 ea                	shr    edx,cl
10001b88:	f6 c1 20             	test   cl,0x20
10001b8b:	74 04                	je     10001b91 <ror(unsigned long long, int, int)+0x4b>
10001b8d:	89 d0                	mov    eax,edx
10001b8f:	31 d2                	xor    edx,edx
10001b91:	89 c3                	mov    ebx,eax
10001b93:	89 d6                	mov    esi,edx
10001b95:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
10001b98:	2b 45 10             	sub    eax,DWORD PTR [ebp+0x10]
10001b9b:	89 c1                	mov    ecx,eax
10001b9d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001ba0:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001ba3:	0f a5 c2             	shld   edx,eax,cl
10001ba6:	d3 e0                	shl    eax,cl
10001ba8:	f6 c1 20             	test   cl,0x20
10001bab:	74 04                	je     10001bb1 <ror(unsigned long long, int, int)+0x6b>
10001bad:	89 c2                	mov    edx,eax
10001baf:	31 c0                	xor    eax,eax
10001bb1:	89 d1                	mov    ecx,edx
10001bb3:	89 c2                	mov    edx,eax
10001bb5:	89 d8                	mov    eax,ebx
10001bb7:	09 d0                	or     eax,edx
10001bb9:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
10001bbc:	89 f0                	mov    eax,esi
10001bbe:	09 c8                	or     eax,ecx
10001bc0:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
10001bc3:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10001bc6:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
10001bc9:	83 c4 20             	add    esp,0x20
10001bcc:	5b                   	pop    ebx
10001bcd:	5e                   	pop    esi
10001bce:	5d                   	pop    ebp
10001bcf:	c3                   	ret    

10001bd0 <swapBits(unsigned long long, unsigned long long, unsigned long long)>:
10001bd0:	55                   	push   ebp
10001bd1:	89 e5                	mov    ebp,esp
10001bd3:	56                   	push   esi
10001bd4:	53                   	push   ebx
10001bd5:	83 ec 40             	sub    esp,0x40
10001bd8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001bdb:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10001bde:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10001be1:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
10001be4:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
10001be7:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
10001bea:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
10001bed:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
10001bf0:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
10001bf3:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
10001bf6:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
10001bf9:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10001bfc:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
10001bff:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001c02:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001c05:	0f ad d0             	shrd   eax,edx,cl
10001c08:	d3 ea                	shr    edx,cl
10001c0a:	f6 c1 20             	test   cl,0x20
10001c0d:	74 04                	je     10001c13 <swapBits(unsigned long long, unsigned long long, unsigned long long)+0x43>
10001c0f:	89 d0                	mov    eax,edx
10001c11:	31 d2                	xor    edx,edx
10001c13:	89 c3                	mov    ebx,eax
10001c15:	89 d6                	mov    esi,edx
10001c17:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
10001c1a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001c1d:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001c20:	0f ad d0             	shrd   eax,edx,cl
10001c23:	d3 ea                	shr    edx,cl
10001c25:	f6 c1 20             	test   cl,0x20
10001c28:	74 04                	je     10001c2e <swapBits(unsigned long long, unsigned long long, unsigned long long)+0x5e>
10001c2a:	89 d0                	mov    eax,edx
10001c2c:	31 d2                	xor    edx,edx
10001c2e:	89 d1                	mov    ecx,edx
10001c30:	89 c2                	mov    edx,eax
10001c32:	89 d8                	mov    eax,ebx
10001c34:	31 d0                	xor    eax,edx
10001c36:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
10001c39:	89 f0                	mov    eax,esi
10001c3b:	31 c8                	xor    eax,ecx
10001c3d:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
10001c40:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
10001c43:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
10001c46:	89 c6                	mov    esi,eax
10001c48:	83 e6 01             	and    esi,0x1
10001c4b:	89 75 c8             	mov    DWORD PTR [ebp-0x38],esi
10001c4e:	89 d0                	mov    eax,edx
10001c50:	83 e0 00             	and    eax,0x0
10001c53:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
10001c56:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
10001c59:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
10001c5c:	89 c3                	mov    ebx,eax
10001c5e:	80 f7 00             	xor    bh,0x0
10001c61:	89 5d b8             	mov    DWORD PTR [ebp-0x48],ebx
10001c64:	89 d0                	mov    eax,edx
10001c66:	80 f4 00             	xor    ah,0x0
10001c69:	89 45 bc             	mov    DWORD PTR [ebp-0x44],eax
10001c6c:	8b 55 b8             	mov    edx,DWORD PTR [ebp-0x48]
10001c6f:	8b 4d bc             	mov    ecx,DWORD PTR [ebp-0x44]
10001c72:	89 c8                	mov    eax,ecx
10001c74:	09 d0                	or     eax,edx
10001c76:	85 c0                	test   eax,eax
10001c78:	74 62                	je     10001cdc <swapBits(unsigned long long, unsigned long long, unsigned long long)+0x10c>
10001c7a:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
10001c7d:	b8 01 00 00 00       	mov    eax,0x1
10001c82:	ba 00 00 00 00       	mov    edx,0x0
10001c87:	0f a5 c2             	shld   edx,eax,cl
10001c8a:	d3 e0                	shl    eax,cl
10001c8c:	f6 c1 20             	test   cl,0x20
10001c8f:	74 04                	je     10001c95 <swapBits(unsigned long long, unsigned long long, unsigned long long)+0xc5>
10001c91:	89 c2                	mov    edx,eax
10001c93:	31 c0                	xor    eax,eax
10001c95:	89 c3                	mov    ebx,eax
10001c97:	89 d6                	mov    esi,edx
10001c99:	89 d8                	mov    eax,ebx
10001c9b:	33 45 f0             	xor    eax,DWORD PTR [ebp-0x10]
10001c9e:	89 45 c0             	mov    DWORD PTR [ebp-0x40],eax
10001ca1:	89 f0                	mov    eax,esi
10001ca3:	33 45 f4             	xor    eax,DWORD PTR [ebp-0xc]
10001ca6:	89 45 c4             	mov    DWORD PTR [ebp-0x3c],eax
10001ca9:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
10001cac:	b8 01 00 00 00       	mov    eax,0x1
10001cb1:	ba 00 00 00 00       	mov    edx,0x0
10001cb6:	0f a5 c2             	shld   edx,eax,cl
10001cb9:	d3 e0                	shl    eax,cl
10001cbb:	f6 c1 20             	test   cl,0x20
10001cbe:	74 04                	je     10001cc4 <swapBits(unsigned long long, unsigned long long, unsigned long long)+0xf4>
10001cc0:	89 c2                	mov    edx,eax
10001cc2:	31 c0                	xor    eax,eax
10001cc4:	89 c1                	mov    ecx,eax
10001cc6:	89 d3                	mov    ebx,edx
10001cc8:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
10001ccb:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
10001cce:	89 c6                	mov    esi,eax
10001cd0:	31 ce                	xor    esi,ecx
10001cd2:	89 75 d8             	mov    DWORD PTR [ebp-0x28],esi
10001cd5:	31 d3                	xor    ebx,edx
10001cd7:	89 5d dc             	mov    DWORD PTR [ebp-0x24],ebx
10001cda:	eb 0c                	jmp    10001ce8 <swapBits(unsigned long long, unsigned long long, unsigned long long)+0x118>
10001cdc:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001cdf:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001ce2:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
10001ce5:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
10001ce8:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10001ceb:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
10001cee:	83 c4 40             	add    esp,0x40
10001cf1:	5b                   	pop    ebx
10001cf2:	5e                   	pop    esi
10001cf3:	5d                   	pop    ebp
10001cf4:	c3                   	ret    

10001cf5 <getChecksum(unsigned int)>:
10001cf5:	55                   	push   ebp
10001cf6:	89 e5                	mov    ebp,esp
10001cf8:	56                   	push   esi
10001cf9:	53                   	push   ebx
10001cfa:	83 ec 20             	sub    esp,0x20
10001cfd:	66 c7 45 f6 49 4e    	mov    WORD PTR [ebp-0xa],0x4e49
10001d03:	66 c7 45 f4 79 6e    	mov    WORD PTR [ebp-0xc],0x6e79
10001d09:	66 c7 45 f2 67 61    	mov    WORD PTR [ebp-0xe],0x6167
10001d0f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001d12:	c1 e8 10             	shr    eax,0x10
10001d15:	89 c1                	mov    ecx,eax
10001d17:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001d1a:	89 c2                	mov    edx,eax
10001d1c:	89 d0                	mov    eax,edx
10001d1e:	c1 e0 06             	shl    eax,0x6
10001d21:	29 d0                	sub    eax,edx
10001d23:	c1 e0 04             	shl    eax,0x4
10001d26:	01 d0                	add    eax,edx
10001d28:	31 c8                	xor    eax,ecx
10001d2a:	66 89 45 f0          	mov    WORD PTR [ebp-0x10],ax
10001d2e:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
10001d32:	0f 84 b1 00 00 00    	je     10001de9 <getChecksum(unsigned int)+0xf4>
10001d38:	b8 f4 02 00 00       	mov    eax,0x2f4
10001d3d:	ba 00 00 00 00       	mov    edx,0x0
10001d42:	f7 75 08             	div    DWORD PTR [ebp+0x8]
10001d45:	89 c3                	mov    ebx,eax
10001d47:	be 00 00 00 00       	mov    esi,0x0
10001d4c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001d4f:	ba 00 00 00 00       	mov    edx,0x0
10001d54:	6a 1d                	push   0x1d
10001d56:	6a 05                	push   0x5
10001d58:	52                   	push   edx
10001d59:	50                   	push   eax
10001d5a:	e8 fc ff ff ff       	call   10001d5b <getChecksum(unsigned int)+0x66>	10001d5b: R_386_PC32	ror(unsigned long long, int, int)
10001d5f:	83 c4 10             	add    esp,0x10
10001d62:	05 52 3f 04 00       	add    eax,0x43f52
10001d67:	83 d2 00             	adc    edx,0x0
10001d6a:	89 d9                	mov    ecx,ebx
10001d6c:	31 c1                	xor    ecx,eax
10001d6e:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
10001d71:	31 d6                	xor    esi,edx
10001d73:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
10001d76:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
10001d79:	66 8b 45 f6          	mov    ax,WORD PTR [ebp-0xa]
10001d7d:	66 0f af c2          	imul   ax,dx
10001d81:	66 89 45 f6          	mov    WORD PTR [ebp-0xa],ax
10001d85:	b8 ea 00 00 00       	mov    eax,0xea
10001d8a:	ba 00 00 00 00       	mov    edx,0x0
10001d8f:	f7 75 08             	div    DWORD PTR [ebp+0x8]
10001d92:	89 c3                	mov    ebx,eax
10001d94:	be 00 00 00 00       	mov    esi,0x0
10001d99:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001d9c:	ba 00 00 00 00       	mov    edx,0x0
10001da1:	6a 1f                	push   0x1f
10001da3:	6a 03                	push   0x3
10001da5:	52                   	push   edx
10001da6:	50                   	push   eax
10001da7:	e8 fc ff ff ff       	call   10001da8 <getChecksum(unsigned int)+0xb3>	10001da8: R_386_PC32	ror(unsigned long long, int, int)
10001dac:	83 c4 10             	add    esp,0x10
10001daf:	05 05 db 09 00       	add    eax,0x9db05
10001db4:	83 d2 00             	adc    edx,0x0
10001db7:	89 d9                	mov    ecx,ebx
10001db9:	31 c1                	xor    ecx,eax
10001dbb:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
10001dbe:	31 d6                	xor    esi,edx
10001dc0:	89 75 dc             	mov    DWORD PTR [ebp-0x24],esi
10001dc3:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10001dc6:	66 29 45 f4          	sub    WORD PTR [ebp-0xc],ax
10001dca:	66 8b 45 f6          	mov    ax,WORD PTR [ebp-0xa]
10001dce:	33 45 f4             	xor    eax,DWORD PTR [ebp-0xc]
10001dd1:	25 d2 04 00 00       	and    eax,0x4d2
10001dd6:	66 01 45 f2          	add    WORD PTR [ebp-0xe],ax
10001dda:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001ddd:	66 01 45 f2          	add    WORD PTR [ebp-0xe],ax
10001de1:	d1 6d 08             	shr    DWORD PTR [ebp+0x8],1
10001de4:	e9 45 ff ff ff       	jmp    10001d2e <getChecksum(unsigned int)+0x39>
10001de9:	66 8b 45 f6          	mov    ax,WORD PTR [ebp-0xa]
10001ded:	33 45 f4             	xor    eax,DWORD PTR [ebp-0xc]
10001df0:	66 33 45 f2          	xor    ax,WORD PTR [ebp-0xe]
10001df4:	33 45 f0             	xor    eax,DWORD PTR [ebp-0x10]
10001df7:	0f b7 c0             	movzx  eax,ax
10001dfa:	25 ff 7f 00 00       	and    eax,0x7fff
10001dff:	8d 65 f8             	lea    esp,[ebp-0x8]
10001e02:	5b                   	pop    ebx
10001e03:	5e                   	pop    esi
10001e04:	5d                   	pop    ebp
10001e05:	c3                   	ret    

10001e06 <createKey(char*, unsigned int)>:
10001e06:	55                   	push   ebp
10001e07:	89 e5                	mov    ebp,esp
10001e09:	53                   	push   ebx
10001e0a:	83 ec 34             	sub    esp,0x34
10001e0d:	68 24 46 00 10       	push   0x10004624	10001e0e: R_386_32	.text
10001e12:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001e15:	e8 fc ff ff ff       	call   10001e16 <createKey(char*, unsigned int)+0x10>	10001e16: R_386_PC32	strcpy
10001e1a:	83 c4 08             	add    esp,0x8
10001e1d:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
10001e20:	bb 00 00 00 00       	mov    ebx,0x0
10001e25:	89 c8                	mov    eax,ecx
10001e27:	89 da                	mov    edx,ebx
10001e29:	0f a4 c2 0f          	shld   edx,eax,0xf
10001e2d:	c1 e0 0f             	shl    eax,0xf
10001e30:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10001e33:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
10001e36:	83 ec 04             	sub    esp,0x4
10001e39:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10001e3c:	e8 fc ff ff ff       	call   10001e3d <createKey(char*, unsigned int)+0x37>	10001e3d: R_386_PC32	getChecksum(unsigned int)
10001e41:	83 c4 08             	add    esp,0x8
10001e44:	ba 00 00 00 00       	mov    edx,0x0
10001e49:	09 45 f0             	or     DWORD PTR [ebp-0x10],eax
10001e4c:	09 55 f4             	or     DWORD PTR [ebp-0xc],edx
10001e4f:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
10001e56:	81 7d ec db 24 00 00 	cmp    DWORD PTR [ebp-0x14],0x24db
10001e5d:	7f 7f                	jg     10001ede <createKey(char*, unsigned int)+0xd8>
10001e5f:	81 75 f0 95 38 e4 b5 	xor    DWORD PTR [ebp-0x10],0xb5e43895
10001e66:	83 75 f4 37          	xor    DWORD PTR [ebp-0xc],0x37
10001e6a:	6a 00                	push   0x0
10001e6c:	6a 08                	push   0x8
10001e6e:	6a 00                	push   0x0
10001e70:	6a 03                	push   0x3
10001e72:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10001e75:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10001e78:	e8 fc ff ff ff       	call   10001e79 <createKey(char*, unsigned int)+0x73>	10001e79: R_386_PC32	swapBits(unsigned long long, unsigned long long, unsigned long long)
10001e7d:	83 c4 18             	add    esp,0x18
10001e80:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10001e83:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
10001e86:	6a 00                	push   0x0
10001e88:	6a 0c                	push   0xc
10001e8a:	6a 00                	push   0x0
10001e8c:	6a 0d                	push   0xd
10001e8e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10001e91:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10001e94:	e8 fc ff ff ff       	call   10001e95 <createKey(char*, unsigned int)+0x8f>	10001e95: R_386_PC32	swapBits(unsigned long long, unsigned long long, unsigned long long)
10001e99:	83 c4 18             	add    esp,0x18
10001e9c:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10001e9f:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
10001ea2:	6a 00                	push   0x0
10001ea4:	6a 16                	push   0x16
10001ea6:	6a 00                	push   0x0
10001ea8:	6a 25                	push   0x25
10001eaa:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10001ead:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10001eb0:	e8 fc ff ff ff       	call   10001eb1 <createKey(char*, unsigned int)+0xab>	10001eb1: R_386_PC32	swapBits(unsigned long long, unsigned long long, unsigned long long)
10001eb5:	83 c4 18             	add    esp,0x18
10001eb8:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10001ebb:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
10001ebe:	6a 2a                	push   0x2a
10001ec0:	6a 13                	push   0x13
10001ec2:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10001ec5:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10001ec8:	e8 fc ff ff ff       	call   10001ec9 <createKey(char*, unsigned int)+0xc3>	10001ec9: R_386_PC32	ror(unsigned long long, int, int)
10001ecd:	83 c4 10             	add    esp,0x10
10001ed0:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10001ed3:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
10001ed6:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
10001ed9:	e9 78 ff ff ff       	jmp    10001e56 <createKey(char*, unsigned int)+0x50>
10001ede:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001ee1:	83 e0 0f             	and    eax,0xf
10001ee4:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
10001ee7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001eea:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001eed:	0f ac d0 04          	shrd   eax,edx,0x4
10001ef1:	c1 ea 04             	shr    edx,0x4
10001ef4:	89 c1                	mov    ecx,eax
10001ef6:	89 d3                	mov    ebx,edx
10001ef8:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
10001efb:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
10001efe:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001f01:	83 e0 0f             	and    eax,0xf
10001f04:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10001f07:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001f0a:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001f0d:	0f ac d0 04          	shrd   eax,edx,0x4
10001f11:	c1 ea 04             	shr    edx,0x4
10001f14:	89 c1                	mov    ecx,eax
10001f16:	89 d3                	mov    ebx,edx
10001f18:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
10001f1b:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
10001f1e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001f21:	83 e0 0f             	and    eax,0xf
10001f24:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
10001f27:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001f2a:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001f2d:	0f ac d0 04          	shrd   eax,edx,0x4
10001f31:	c1 ea 04             	shr    edx,0x4
10001f34:	89 c1                	mov    ecx,eax
10001f36:	89 d3                	mov    ebx,edx
10001f38:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
10001f3b:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
10001f3e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001f41:	25 ff 03 00 00       	and    eax,0x3ff
10001f46:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
10001f49:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001f4c:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001f4f:	0f ac d0 0a          	shrd   eax,edx,0xa
10001f53:	c1 ea 0a             	shr    edx,0xa
10001f56:	89 c1                	mov    ecx,eax
10001f58:	89 d3                	mov    ebx,edx
10001f5a:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
10001f5d:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
10001f60:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001f63:	25 ff 03 00 00       	and    eax,0x3ff
10001f68:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
10001f6b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001f6e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001f71:	0f ac d0 0a          	shrd   eax,edx,0xa
10001f75:	c1 ea 0a             	shr    edx,0xa
10001f78:	89 c1                	mov    ecx,eax
10001f7a:	89 d3                	mov    ebx,edx
10001f7c:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
10001f7f:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
10001f82:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001f85:	25 ff 03 00 00       	and    eax,0x3ff
10001f8a:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
10001f8d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001f90:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001f93:	0f ac d0 0a          	shrd   eax,edx,0xa
10001f97:	c1 ea 0a             	shr    edx,0xa
10001f9a:	89 c1                	mov    ecx,eax
10001f9c:	89 d3                	mov    ebx,edx
10001f9e:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
10001fa1:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
10001fa4:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
10001fa7:	05 00 00 00 00       	add    eax,0x0	10001fa8: R_386_32	lookupA
10001fac:	8a 10                	mov    dl,BYTE PTR [eax]
10001fae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001fb1:	88 10                	mov    BYTE PTR [eax],dl
10001fb3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001fb6:	8d 50 01             	lea    edx,[eax+0x1]
10001fb9:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10001fbc:	05 00 00 00 00       	add    eax,0x0	10001fbd: R_386_32	lookupA
10001fc1:	8a 00                	mov    al,BYTE PTR [eax]
10001fc3:	88 02                	mov    BYTE PTR [edx],al
10001fc5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001fc8:	8d 50 0f             	lea    edx,[eax+0xf]
10001fcb:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10001fce:	05 00 00 00 00       	add    eax,0x0	10001fcf: R_386_32	lookupA
10001fd3:	8a 00                	mov    al,BYTE PTR [eax]
10001fd5:	88 02                	mov    BYTE PTR [edx],al
10001fd7:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
10001fda:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
10001fdf:	f7 e9                	imul   ecx
10001fe1:	c1 fa 05             	sar    edx,0x5
10001fe4:	89 c8                	mov    eax,ecx
10001fe6:	c1 f8 1f             	sar    eax,0x1f
10001fe9:	29 c2                	sub    edx,eax
10001feb:	89 d0                	mov    eax,edx
10001fed:	b9 0a 00 00 00       	mov    ecx,0xa
10001ff2:	99                   	cdq    
10001ff3:	f7 f9                	idiv   ecx
10001ff5:	89 d0                	mov    eax,edx
10001ff7:	8d 50 30             	lea    edx,[eax+0x30]
10001ffa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001ffd:	83 c0 03             	add    eax,0x3
10002000:	88 10                	mov    BYTE PTR [eax],dl
10002002:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
10002005:	b8 67 66 66 66       	mov    eax,0x66666667
1000200a:	f7 e9                	imul   ecx
1000200c:	c1 fa 02             	sar    edx,0x2
1000200f:	89 c8                	mov    eax,ecx
10002011:	c1 f8 1f             	sar    eax,0x1f
10002014:	89 d1                	mov    ecx,edx
10002016:	29 c1                	sub    ecx,eax
10002018:	b8 67 66 66 66       	mov    eax,0x66666667
1000201d:	f7 e9                	imul   ecx
1000201f:	c1 fa 02             	sar    edx,0x2
10002022:	89 c8                	mov    eax,ecx
10002024:	c1 f8 1f             	sar    eax,0x1f
10002027:	29 c2                	sub    edx,eax
10002029:	89 d0                	mov    eax,edx
1000202b:	c1 e0 02             	shl    eax,0x2
1000202e:	01 d0                	add    eax,edx
10002030:	01 c0                	add    eax,eax
10002032:	29 c1                	sub    ecx,eax
10002034:	89 ca                	mov    edx,ecx
10002036:	88 d0                	mov    al,dl
10002038:	8d 50 30             	lea    edx,[eax+0x30]
1000203b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000203e:	83 c0 04             	add    eax,0x4
10002041:	88 10                	mov    BYTE PTR [eax],dl
10002043:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10002046:	b9 0a 00 00 00       	mov    ecx,0xa
1000204b:	99                   	cdq    
1000204c:	f7 f9                	idiv   ecx
1000204e:	89 d0                	mov    eax,edx
10002050:	8d 50 30             	lea    edx,[eax+0x30]
10002053:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002056:	83 c0 05             	add    eax,0x5
10002059:	88 10                	mov    BYTE PTR [eax],dl
1000205b:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
1000205e:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
10002063:	f7 e9                	imul   ecx
10002065:	c1 fa 05             	sar    edx,0x5
10002068:	89 c8                	mov    eax,ecx
1000206a:	c1 f8 1f             	sar    eax,0x1f
1000206d:	29 c2                	sub    edx,eax
1000206f:	89 d0                	mov    eax,edx
10002071:	b9 0a 00 00 00       	mov    ecx,0xa
10002076:	99                   	cdq    
10002077:	f7 f9                	idiv   ecx
10002079:	89 d0                	mov    eax,edx
1000207b:	8d 50 30             	lea    edx,[eax+0x30]
1000207e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002081:	83 c0 07             	add    eax,0x7
10002084:	88 10                	mov    BYTE PTR [eax],dl
10002086:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
10002089:	b8 67 66 66 66       	mov    eax,0x66666667
1000208e:	f7 e9                	imul   ecx
10002090:	c1 fa 02             	sar    edx,0x2
10002093:	89 c8                	mov    eax,ecx
10002095:	c1 f8 1f             	sar    eax,0x1f
10002098:	89 d1                	mov    ecx,edx
1000209a:	29 c1                	sub    ecx,eax
1000209c:	b8 67 66 66 66       	mov    eax,0x66666667
100020a1:	f7 e9                	imul   ecx
100020a3:	c1 fa 02             	sar    edx,0x2
100020a6:	89 c8                	mov    eax,ecx
100020a8:	c1 f8 1f             	sar    eax,0x1f
100020ab:	29 c2                	sub    edx,eax
100020ad:	89 d0                	mov    eax,edx
100020af:	c1 e0 02             	shl    eax,0x2
100020b2:	01 d0                	add    eax,edx
100020b4:	01 c0                	add    eax,eax
100020b6:	29 c1                	sub    ecx,eax
100020b8:	89 ca                	mov    edx,ecx
100020ba:	88 d0                	mov    al,dl
100020bc:	8d 50 30             	lea    edx,[eax+0x30]
100020bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100020c2:	83 c0 08             	add    eax,0x8
100020c5:	88 10                	mov    BYTE PTR [eax],dl
100020c7:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
100020ca:	b9 0a 00 00 00       	mov    ecx,0xa
100020cf:	99                   	cdq    
100020d0:	f7 f9                	idiv   ecx
100020d2:	89 d0                	mov    eax,edx
100020d4:	8d 50 30             	lea    edx,[eax+0x30]
100020d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100020da:	83 c0 09             	add    eax,0x9
100020dd:	88 10                	mov    BYTE PTR [eax],dl
100020df:	8b 4d d4             	mov    ecx,DWORD PTR [ebp-0x2c]
100020e2:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
100020e7:	f7 e9                	imul   ecx
100020e9:	c1 fa 05             	sar    edx,0x5
100020ec:	89 c8                	mov    eax,ecx
100020ee:	c1 f8 1f             	sar    eax,0x1f
100020f1:	29 c2                	sub    edx,eax
100020f3:	89 d0                	mov    eax,edx
100020f5:	b9 0a 00 00 00       	mov    ecx,0xa
100020fa:	99                   	cdq    
100020fb:	f7 f9                	idiv   ecx
100020fd:	89 d0                	mov    eax,edx
100020ff:	8d 50 30             	lea    edx,[eax+0x30]
10002102:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002105:	83 c0 0b             	add    eax,0xb
10002108:	88 10                	mov    BYTE PTR [eax],dl
1000210a:	8b 4d d4             	mov    ecx,DWORD PTR [ebp-0x2c]
1000210d:	b8 67 66 66 66       	mov    eax,0x66666667
10002112:	f7 e9                	imul   ecx
10002114:	c1 fa 02             	sar    edx,0x2
10002117:	89 c8                	mov    eax,ecx
10002119:	c1 f8 1f             	sar    eax,0x1f
1000211c:	89 d1                	mov    ecx,edx
1000211e:	29 c1                	sub    ecx,eax
10002120:	b8 67 66 66 66       	mov    eax,0x66666667
10002125:	f7 e9                	imul   ecx
10002127:	c1 fa 02             	sar    edx,0x2
1000212a:	89 c8                	mov    eax,ecx
1000212c:	c1 f8 1f             	sar    eax,0x1f
1000212f:	29 c2                	sub    edx,eax
10002131:	89 d0                	mov    eax,edx
10002133:	c1 e0 02             	shl    eax,0x2
10002136:	01 d0                	add    eax,edx
10002138:	01 c0                	add    eax,eax
1000213a:	29 c1                	sub    ecx,eax
1000213c:	89 ca                	mov    edx,ecx
1000213e:	88 d0                	mov    al,dl
10002140:	8d 50 30             	lea    edx,[eax+0x30]
10002143:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002146:	83 c0 0c             	add    eax,0xc
10002149:	88 10                	mov    BYTE PTR [eax],dl
1000214b:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
1000214e:	b9 0a 00 00 00       	mov    ecx,0xa
10002153:	99                   	cdq    
10002154:	f7 f9                	idiv   ecx
10002156:	89 d0                	mov    eax,edx
10002158:	8d 50 30             	lea    edx,[eax+0x30]
1000215b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000215e:	83 c0 0d             	add    eax,0xd
10002161:	88 10                	mov    BYTE PTR [eax],dl
10002163:	90                   	nop
10002164:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
10002167:	c9                   	leave  
10002168:	c3                   	ret    

10002169 <retrieveBits(char*)>:
10002169:	55                   	push   ebp
1000216a:	89 e5                	mov    ebp,esp
1000216c:	57                   	push   edi
1000216d:	56                   	push   esi
1000216e:	53                   	push   ebx
1000216f:	83 ec 4c             	sub    esp,0x4c
10002172:	c7 45 ec ff ff ff ff 	mov    DWORD PTR [ebp-0x14],0xffffffff
10002179:	c7 45 e8 ff ff ff ff 	mov    DWORD PTR [ebp-0x18],0xffffffff
10002180:	c7 45 e4 ff ff ff ff 	mov    DWORD PTR [ebp-0x1c],0xffffffff
10002187:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
1000218e:	83 7d e0 0f          	cmp    DWORD PTR [ebp-0x20],0xf
10002192:	7f 54                	jg     100021e8 <retrieveBits(char*)+0x7f>
10002194:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10002197:	05 00 00 00 00       	add    eax,0x0	10002198: R_386_32	lookupA
1000219c:	8a 10                	mov    dl,BYTE PTR [eax]
1000219e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100021a1:	8a 00                	mov    al,BYTE PTR [eax]
100021a3:	38 c2                	cmp    dl,al
100021a5:	75 06                	jne    100021ad <retrieveBits(char*)+0x44>
100021a7:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
100021aa:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
100021ad:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
100021b0:	05 00 00 00 00       	add    eax,0x0	100021b1: R_386_32	lookupB
100021b5:	8a 10                	mov    dl,BYTE PTR [eax]
100021b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100021ba:	40                   	inc    eax
100021bb:	8a 00                	mov    al,BYTE PTR [eax]
100021bd:	38 c2                	cmp    dl,al
100021bf:	75 06                	jne    100021c7 <retrieveBits(char*)+0x5e>
100021c1:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
100021c4:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
100021c7:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
100021ca:	05 00 00 00 00       	add    eax,0x0	100021cb: R_386_32	lookupC
100021cf:	8a 10                	mov    dl,BYTE PTR [eax]
100021d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100021d4:	83 c0 0f             	add    eax,0xf
100021d7:	8a 00                	mov    al,BYTE PTR [eax]
100021d9:	38 c2                	cmp    dl,al
100021db:	75 06                	jne    100021e3 <retrieveBits(char*)+0x7a>
100021dd:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
100021e0:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
100021e3:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
100021e6:	eb a6                	jmp    1000218e <retrieveBits(char*)+0x25>
100021e8:	83 7d ec ff          	cmp    DWORD PTR [ebp-0x14],0xffffffff
100021ec:	74 0c                	je     100021fa <retrieveBits(char*)+0x91>
100021ee:	83 7d e8 ff          	cmp    DWORD PTR [ebp-0x18],0xffffffff
100021f2:	74 06                	je     100021fa <retrieveBits(char*)+0x91>
100021f4:	83 7d e4 ff          	cmp    DWORD PTR [ebp-0x1c],0xffffffff
100021f8:	75 0f                	jne    10002209 <retrieveBits(char*)+0xa0>
100021fa:	b8 00 00 00 00       	mov    eax,0x0
100021ff:	ba 00 00 00 00       	mov    edx,0x0
10002204:	e9 02 02 00 00       	jmp    1000240b <retrieveBits(char*)+0x2a2>
10002209:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000220c:	83 c0 03             	add    eax,0x3
1000220f:	8a 00                	mov    al,BYTE PTR [eax]
10002211:	0f be c0             	movsx  eax,al
10002214:	8d 50 d0             	lea    edx,[eax-0x30]
10002217:	89 d0                	mov    eax,edx
10002219:	c1 e0 02             	shl    eax,0x2
1000221c:	01 d0                	add    eax,edx
1000221e:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10002225:	01 d0                	add    eax,edx
10002227:	c1 e0 02             	shl    eax,0x2
1000222a:	89 c6                	mov    esi,eax
1000222c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000222f:	83 c0 04             	add    eax,0x4
10002232:	8a 00                	mov    al,BYTE PTR [eax]
10002234:	0f be c0             	movsx  eax,al
10002237:	8d 50 d0             	lea    edx,[eax-0x30]
1000223a:	89 d0                	mov    eax,edx
1000223c:	c1 e0 02             	shl    eax,0x2
1000223f:	01 d0                	add    eax,edx
10002241:	01 c0                	add    eax,eax
10002243:	8d 14 06             	lea    edx,[esi+eax*1]
10002246:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002249:	83 c0 05             	add    eax,0x5
1000224c:	8a 00                	mov    al,BYTE PTR [eax]
1000224e:	0f be c0             	movsx  eax,al
10002251:	83 e8 30             	sub    eax,0x30
10002254:	01 d0                	add    eax,edx
10002256:	99                   	cdq    
10002257:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
1000225a:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
1000225d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002260:	83 c0 07             	add    eax,0x7
10002263:	8a 00                	mov    al,BYTE PTR [eax]
10002265:	0f be c0             	movsx  eax,al
10002268:	8d 50 d0             	lea    edx,[eax-0x30]
1000226b:	89 d0                	mov    eax,edx
1000226d:	c1 e0 02             	shl    eax,0x2
10002270:	01 d0                	add    eax,edx
10002272:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10002279:	01 d0                	add    eax,edx
1000227b:	c1 e0 02             	shl    eax,0x2
1000227e:	89 c6                	mov    esi,eax
10002280:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002283:	83 c0 08             	add    eax,0x8
10002286:	8a 00                	mov    al,BYTE PTR [eax]
10002288:	0f be c0             	movsx  eax,al
1000228b:	8d 50 d0             	lea    edx,[eax-0x30]
1000228e:	89 d0                	mov    eax,edx
10002290:	c1 e0 02             	shl    eax,0x2
10002293:	01 d0                	add    eax,edx
10002295:	01 c0                	add    eax,eax
10002297:	8d 14 06             	lea    edx,[esi+eax*1]
1000229a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000229d:	83 c0 09             	add    eax,0x9
100022a0:	8a 00                	mov    al,BYTE PTR [eax]
100022a2:	0f be c0             	movsx  eax,al
100022a5:	83 e8 30             	sub    eax,0x30
100022a8:	01 d0                	add    eax,edx
100022aa:	99                   	cdq    
100022ab:	89 45 c0             	mov    DWORD PTR [ebp-0x40],eax
100022ae:	89 55 c4             	mov    DWORD PTR [ebp-0x3c],edx
100022b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100022b4:	83 c0 0b             	add    eax,0xb
100022b7:	8a 00                	mov    al,BYTE PTR [eax]
100022b9:	0f be c0             	movsx  eax,al
100022bc:	8d 50 d0             	lea    edx,[eax-0x30]
100022bf:	89 d0                	mov    eax,edx
100022c1:	c1 e0 02             	shl    eax,0x2
100022c4:	01 d0                	add    eax,edx
100022c6:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
100022cd:	01 d0                	add    eax,edx
100022cf:	c1 e0 02             	shl    eax,0x2
100022d2:	89 c6                	mov    esi,eax
100022d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100022d7:	83 c0 0c             	add    eax,0xc
100022da:	8a 00                	mov    al,BYTE PTR [eax]
100022dc:	0f be c0             	movsx  eax,al
100022df:	8d 50 d0             	lea    edx,[eax-0x30]
100022e2:	89 d0                	mov    eax,edx
100022e4:	c1 e0 02             	shl    eax,0x2
100022e7:	01 d0                	add    eax,edx
100022e9:	01 c0                	add    eax,eax
100022eb:	8d 14 06             	lea    edx,[esi+eax*1]
100022ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100022f1:	83 c0 0d             	add    eax,0xd
100022f4:	8a 00                	mov    al,BYTE PTR [eax]
100022f6:	0f be c0             	movsx  eax,al
100022f9:	83 e8 30             	sub    eax,0x30
100022fc:	01 d0                	add    eax,edx
100022fe:	99                   	cdq    
100022ff:	89 45 b8             	mov    DWORD PTR [ebp-0x48],eax
10002302:	89 55 bc             	mov    DWORD PTR [ebp-0x44],edx
10002305:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
10002308:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
1000230b:	0f a4 c2 0a          	shld   edx,eax,0xa
1000230f:	c1 e0 0a             	shl    eax,0xa
10002312:	89 c6                	mov    esi,eax
10002314:	89 d7                	mov    edi,edx
10002316:	89 f0                	mov    eax,esi
10002318:	0b 45 c8             	or     eax,DWORD PTR [ebp-0x38]
1000231b:	89 c1                	mov    ecx,eax
1000231d:	89 f8                	mov    eax,edi
1000231f:	0b 45 cc             	or     eax,DWORD PTR [ebp-0x34]
10002322:	89 c3                	mov    ebx,eax
10002324:	8b 45 b8             	mov    eax,DWORD PTR [ebp-0x48]
10002327:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
1000232a:	0f a4 c2 14          	shld   edx,eax,0x14
1000232e:	c1 e0 14             	shl    eax,0x14
10002331:	89 ce                	mov    esi,ecx
10002333:	89 45 a8             	mov    DWORD PTR [ebp-0x58],eax
10002336:	89 55 ac             	mov    DWORD PTR [ebp-0x54],edx
10002339:	0b 75 a8             	or     esi,DWORD PTR [ebp-0x58]
1000233c:	89 75 d8             	mov    DWORD PTR [ebp-0x28],esi
1000233f:	89 d8                	mov    eax,ebx
10002341:	0b 45 ac             	or     eax,DWORD PTR [ebp-0x54]
10002344:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
10002347:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
1000234a:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
1000234d:	0f a4 c2 0c          	shld   edx,eax,0xc
10002351:	c1 e0 0c             	shl    eax,0xc
10002354:	89 c3                	mov    ebx,eax
10002356:	89 d6                	mov    esi,edx
10002358:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
1000235b:	89 75 dc             	mov    DWORD PTR [ebp-0x24],esi
1000235e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
10002361:	c1 e0 04             	shl    eax,0x4
10002364:	0b 45 ec             	or     eax,DWORD PTR [ebp-0x14]
10002367:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
1000236a:	c1 e2 08             	shl    edx,0x8
1000236d:	09 d0                	or     eax,edx
1000236f:	99                   	cdq    
10002370:	09 45 d8             	or     DWORD PTR [ebp-0x28],eax
10002373:	09 55 dc             	or     DWORD PTR [ebp-0x24],edx
10002376:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
1000237d:	81 7d d4 db 24 00 00 	cmp    DWORD PTR [ebp-0x2c],0x24db
10002384:	7f 7f                	jg     10002405 <retrieveBits(char*)+0x29c>
10002386:	6a 2a                	push   0x2a
10002388:	6a 13                	push   0x13
1000238a:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
1000238d:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10002390:	e8 fc ff ff ff       	call   10002391 <retrieveBits(char*)+0x228>	10002391: R_386_PC32	ror(unsigned long long, int, int)
10002395:	83 c4 10             	add    esp,0x10
10002398:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
1000239b:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
1000239e:	6a 00                	push   0x0
100023a0:	6a 08                	push   0x8
100023a2:	6a 00                	push   0x0
100023a4:	6a 03                	push   0x3
100023a6:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
100023a9:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
100023ac:	e8 fc ff ff ff       	call   100023ad <retrieveBits(char*)+0x244>	100023ad: R_386_PC32	swapBits(unsigned long long, unsigned long long, unsigned long long)
100023b1:	83 c4 18             	add    esp,0x18
100023b4:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
100023b7:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
100023ba:	6a 00                	push   0x0
100023bc:	6a 0c                	push   0xc
100023be:	6a 00                	push   0x0
100023c0:	6a 0d                	push   0xd
100023c2:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
100023c5:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
100023c8:	e8 fc ff ff ff       	call   100023c9 <retrieveBits(char*)+0x260>	100023c9: R_386_PC32	swapBits(unsigned long long, unsigned long long, unsigned long long)
100023cd:	83 c4 18             	add    esp,0x18
100023d0:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
100023d3:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
100023d6:	6a 00                	push   0x0
100023d8:	6a 16                	push   0x16
100023da:	6a 00                	push   0x0
100023dc:	6a 25                	push   0x25
100023de:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
100023e1:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
100023e4:	e8 fc ff ff ff       	call   100023e5 <retrieveBits(char*)+0x27c>	100023e5: R_386_PC32	swapBits(unsigned long long, unsigned long long, unsigned long long)
100023e9:	83 c4 18             	add    esp,0x18
100023ec:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
100023ef:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
100023f2:	81 75 d8 95 38 e4 b5 	xor    DWORD PTR [ebp-0x28],0xb5e43895
100023f9:	83 75 dc 37          	xor    DWORD PTR [ebp-0x24],0x37
100023fd:	ff 45 d4             	inc    DWORD PTR [ebp-0x2c]
10002400:	e9 78 ff ff ff       	jmp    1000237d <retrieveBits(char*)+0x214>
10002405:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10002408:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
1000240b:	8d 65 f4             	lea    esp,[ebp-0xc]
1000240e:	5b                   	pop    ebx
1000240f:	5e                   	pop    esi
10002410:	5f                   	pop    edi
10002411:	5d                   	pop    ebp
10002412:	c3                   	ret    

10002413 <checkKey(char*)>:
10002413:	55                   	push   ebp
10002414:	89 e5                	mov    ebp,esp
10002416:	53                   	push   ebx
10002417:	83 ec 14             	sub    esp,0x14
1000241a:	83 ec 04             	sub    esp,0x4
1000241d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002420:	e8 fc ff ff ff       	call   10002421 <checkKey(char*)+0xe>	10002421: R_386_PC32	retrieveBits(char*)
10002425:	83 c4 08             	add    esp,0x8
10002428:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
1000242b:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
1000242e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10002431:	25 ff 7f 00 00       	and    eax,0x7fff
10002436:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
10002439:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
1000243c:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
1000243f:	0f ac d0 0f          	shrd   eax,edx,0xf
10002443:	c1 ea 0f             	shr    edx,0xf
10002446:	89 c1                	mov    ecx,eax
10002448:	89 d3                	mov    ebx,edx
1000244a:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
1000244d:	83 ec 04             	sub    esp,0x4
10002450:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
10002453:	e8 fc ff ff ff       	call   10002454 <checkKey(char*)+0x41>	10002454: R_386_PC32	getChecksum(unsigned int)
10002458:	83 c4 08             	add    esp,0x8
1000245b:	39 45 ec             	cmp    DWORD PTR [ebp-0x14],eax
1000245e:	0f 95 c0             	setne  al
10002461:	84 c0                	test   al,al
10002463:	74 07                	je     1000246c <checkKey(char*)+0x59>
10002465:	b8 00 00 00 00       	mov    eax,0x0
1000246a:	eb 06                	jmp    10002472 <checkKey(char*)+0x5f>
1000246c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
1000246f:	83 e0 07             	and    eax,0x7
10002472:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
10002475:	c9                   	leave  
10002476:	c3                   	ret    

10002477 <changeKeyType(char*, int)>:
10002477:	55                   	push   ebp
10002478:	89 e5                	mov    ebp,esp
1000247a:	83 ec 10             	sub    esp,0x10
1000247d:	83 ec 04             	sub    esp,0x4
10002480:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002483:	e8 fc ff ff ff       	call   10002484 <changeKeyType(char*, int)+0xd>	10002484: R_386_PC32	retrieveBits(char*)
10002488:	83 c4 08             	add    esp,0x8
1000248b:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
1000248e:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
10002491:	83 65 f8 f8          	and    DWORD PTR [ebp-0x8],0xfffffff8
10002495:	83 65 fc ff          	and    DWORD PTR [ebp-0x4],0xffffffff
10002499:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
1000249c:	99                   	cdq    
1000249d:	09 45 f8             	or     DWORD PTR [ebp-0x8],eax
100024a0:	09 55 fc             	or     DWORD PTR [ebp-0x4],edx
100024a3:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
100024a6:	50                   	push   eax
100024a7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100024aa:	e8 fc ff ff ff       	call   100024ab <changeKeyType(char*, int)+0x34>	100024ab: R_386_PC32	createKey(char*, unsigned int)
100024af:	83 c4 08             	add    esp,0x8
100024b2:	83 ec 04             	sub    esp,0x4
100024b5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100024b8:	e8 fc ff ff ff       	call   100024b9 <changeKeyType(char*, int)+0x42>	100024b9: R_386_PC32	checkKey(char*)
100024bd:	83 c4 08             	add    esp,0x8
100024c0:	85 c0                	test   eax,eax
100024c2:	0f 95 c0             	setne  al
100024c5:	c9                   	leave  
100024c6:	c3                   	ret    

100024c7 <checkExtendedKey(char*)>:
100024c7:	55                   	push   ebp
100024c8:	89 e5                	mov    ebp,esp
100024ca:	83 ec 20             	sub    esp,0x20
100024cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100024d0:	8a 00                	mov    al,BYTE PTR [eax]
100024d2:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
100024d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100024d8:	8a 40 01             	mov    al,BYTE PTR [eax+0x1]
100024db:	88 45 ed             	mov    BYTE PTR [ebp-0x13],al
100024de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100024e1:	8a 40 02             	mov    al,BYTE PTR [eax+0x2]
100024e4:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
100024e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100024ea:	8a 40 03             	mov    al,BYTE PTR [eax+0x3]
100024ed:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
100024f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100024f3:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
100024f6:	88 45 f0             	mov    BYTE PTR [ebp-0x10],al
100024f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100024fc:	8a 40 05             	mov    al,BYTE PTR [eax+0x5]
100024ff:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
10002502:	c6 45 f2 2d          	mov    BYTE PTR [ebp-0xe],0x2d
10002506:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002509:	8a 40 06             	mov    al,BYTE PTR [eax+0x6]
1000250c:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
1000250f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002512:	8a 40 07             	mov    al,BYTE PTR [eax+0x7]
10002515:	88 45 f4             	mov    BYTE PTR [ebp-0xc],al
10002518:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000251b:	8a 40 09             	mov    al,BYTE PTR [eax+0x9]
1000251e:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
10002521:	c6 45 f6 2d          	mov    BYTE PTR [ebp-0xa],0x2d
10002525:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002528:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
1000252b:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
1000252e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002531:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
10002534:	88 45 f8             	mov    BYTE PTR [ebp-0x8],al
10002537:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000253a:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
1000253d:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
10002540:	c6 45 fa 2d          	mov    BYTE PTR [ebp-0x6],0x2d
10002544:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002547:	8a 40 0f             	mov    al,BYTE PTR [eax+0xf]
1000254a:	88 45 fb             	mov    BYTE PTR [ebp-0x5],al
1000254d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002550:	83 c0 0d             	add    eax,0xd
10002553:	8a 10                	mov    dl,BYTE PTR [eax]
10002555:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002558:	83 c0 0c             	add    eax,0xc
1000255b:	8a 00                	mov    al,BYTE PTR [eax]
1000255d:	38 c2                	cmp    dl,al
1000255f:	74 0a                	je     1000256b <checkExtendedKey(char*)+0xa4>
10002561:	b8 00 00 00 00       	mov    eax,0x0
10002566:	e9 d6 00 00 00       	jmp    10002641 <checkExtendedKey(char*)+0x17a>
1000256b:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
1000256e:	3c 2f                	cmp    al,0x2f
10002570:	7e 07                	jle    10002579 <checkExtendedKey(char*)+0xb2>
10002572:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
10002575:	3c 39                	cmp    al,0x39
10002577:	7e 0a                	jle    10002583 <checkExtendedKey(char*)+0xbc>
10002579:	b8 00 00 00 00       	mov    eax,0x0
1000257e:	e9 be 00 00 00       	jmp    10002641 <checkExtendedKey(char*)+0x17a>
10002583:	8a 45 f0             	mov    al,BYTE PTR [ebp-0x10]
10002586:	3c 2f                	cmp    al,0x2f
10002588:	7e 07                	jle    10002591 <checkExtendedKey(char*)+0xca>
1000258a:	8a 45 f0             	mov    al,BYTE PTR [ebp-0x10]
1000258d:	3c 39                	cmp    al,0x39
1000258f:	7e 0a                	jle    1000259b <checkExtendedKey(char*)+0xd4>
10002591:	b8 00 00 00 00       	mov    eax,0x0
10002596:	e9 a6 00 00 00       	jmp    10002641 <checkExtendedKey(char*)+0x17a>
1000259b:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
1000259e:	3c 2f                	cmp    al,0x2f
100025a0:	7e 07                	jle    100025a9 <checkExtendedKey(char*)+0xe2>
100025a2:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
100025a5:	3c 39                	cmp    al,0x39
100025a7:	7e 0a                	jle    100025b3 <checkExtendedKey(char*)+0xec>
100025a9:	b8 00 00 00 00       	mov    eax,0x0
100025ae:	e9 8e 00 00 00       	jmp    10002641 <checkExtendedKey(char*)+0x17a>
100025b3:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
100025b6:	3c 2f                	cmp    al,0x2f
100025b8:	7e 07                	jle    100025c1 <checkExtendedKey(char*)+0xfa>
100025ba:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
100025bd:	3c 39                	cmp    al,0x39
100025bf:	7e 07                	jle    100025c8 <checkExtendedKey(char*)+0x101>
100025c1:	b8 00 00 00 00       	mov    eax,0x0
100025c6:	eb 79                	jmp    10002641 <checkExtendedKey(char*)+0x17a>
100025c8:	8a 45 f4             	mov    al,BYTE PTR [ebp-0xc]
100025cb:	3c 2f                	cmp    al,0x2f
100025cd:	7e 07                	jle    100025d6 <checkExtendedKey(char*)+0x10f>
100025cf:	8a 45 f4             	mov    al,BYTE PTR [ebp-0xc]
100025d2:	3c 39                	cmp    al,0x39
100025d4:	7e 07                	jle    100025dd <checkExtendedKey(char*)+0x116>
100025d6:	b8 00 00 00 00       	mov    eax,0x0
100025db:	eb 64                	jmp    10002641 <checkExtendedKey(char*)+0x17a>
100025dd:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
100025e0:	3c 2f                	cmp    al,0x2f
100025e2:	7e 07                	jle    100025eb <checkExtendedKey(char*)+0x124>
100025e4:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
100025e7:	3c 39                	cmp    al,0x39
100025e9:	7e 07                	jle    100025f2 <checkExtendedKey(char*)+0x12b>
100025eb:	b8 00 00 00 00       	mov    eax,0x0
100025f0:	eb 4f                	jmp    10002641 <checkExtendedKey(char*)+0x17a>
100025f2:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
100025f5:	3c 2f                	cmp    al,0x2f
100025f7:	7e 07                	jle    10002600 <checkExtendedKey(char*)+0x139>
100025f9:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
100025fc:	3c 39                	cmp    al,0x39
100025fe:	7e 07                	jle    10002607 <checkExtendedKey(char*)+0x140>
10002600:	b8 00 00 00 00       	mov    eax,0x0
10002605:	eb 3a                	jmp    10002641 <checkExtendedKey(char*)+0x17a>
10002607:	8a 45 f8             	mov    al,BYTE PTR [ebp-0x8]
1000260a:	3c 2f                	cmp    al,0x2f
1000260c:	7e 07                	jle    10002615 <checkExtendedKey(char*)+0x14e>
1000260e:	8a 45 f8             	mov    al,BYTE PTR [ebp-0x8]
10002611:	3c 39                	cmp    al,0x39
10002613:	7e 07                	jle    1000261c <checkExtendedKey(char*)+0x155>
10002615:	b8 00 00 00 00       	mov    eax,0x0
1000261a:	eb 25                	jmp    10002641 <checkExtendedKey(char*)+0x17a>
1000261c:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
1000261f:	3c 2f                	cmp    al,0x2f
10002621:	7e 07                	jle    1000262a <checkExtendedKey(char*)+0x163>
10002623:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
10002626:	3c 39                	cmp    al,0x39
10002628:	7e 07                	jle    10002631 <checkExtendedKey(char*)+0x16a>
1000262a:	b8 00 00 00 00       	mov    eax,0x0
1000262f:	eb 10                	jmp    10002641 <checkExtendedKey(char*)+0x17a>
10002631:	83 ec 04             	sub    esp,0x4
10002634:	8d 45 ec             	lea    eax,[ebp-0x14]
10002637:	50                   	push   eax
10002638:	e8 fc ff ff ff       	call   10002639 <checkExtendedKey(char*)+0x172>	10002639: R_386_PC32	checkKey(char*)
1000263d:	83 c4 08             	add    esp,0x8
10002640:	90                   	nop
10002641:	c9                   	leave  
10002642:	c3                   	ret    

10002643 <firstRun()>:
10002643:	55                   	push   ebp
10002644:	89 e5                	mov    ebp,esp
10002646:	53                   	push   ebx
10002647:	81 ec a4 00 00 00    	sub    esp,0xa4
1000264d:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	1000264f: R_386_32	guiKeyboardHandler
	10002653: R_386_32	bootInstallKeybrd(KeyboardToken, bool*)
10002657:	83 ec 0c             	sub    esp,0xc
1000265a:	68 38 46 00 10       	push   0x10004638	1000265b: R_386_32	.text
1000265f:	e8 fc ff ff ff       	call   10002660 <firstRun()+0x1d>	10002660: R_386_PC32	KeSetBootMessage(char const*)
10002664:	83 c4 10             	add    esp,0x10
10002667:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10002669: R_386_32	VgaText::hiddenOut
1000266e:	a1 00 00 00 00       	mov    eax,ds:0x0	1000266f: R_386_32	activeTerminal
10002673:	83 ec 08             	sub    esp,0x8
10002676:	68 61 46 00 10       	push   0x10004661	10002677: R_386_32	.text
1000267b:	50                   	push   eax
1000267c:	e8 fc ff ff ff       	call   1000267d <firstRun()+0x3a>	1000267d: R_386_PC32	VgaText::puts(char const*)
10002681:	83 c4 10             	add    esp,0x10
10002684:	a1 00 00 00 00       	mov    eax,ds:0x0	10002685: R_386_32	kernelProcess
10002689:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
1000268f:	83 ec 08             	sub    esp,0x8
10002692:	68 61 46 00 10       	push   0x10004661	10002693: R_386_32	.text
10002697:	50                   	push   eax
10002698:	e8 fc ff ff ff       	call   10002699 <firstRun()+0x56>	10002699: R_386_PC32	VgaText::puts(char const*)
1000269d:	83 c4 10             	add    esp,0x10
100026a0:	83 ec 0c             	sub    esp,0xc
100026a3:	68 84 01 00 00       	push   0x184
100026a8:	e8 fc ff ff ff       	call   100026a9 <firstRun()+0x66>	100026a9: R_386_PC32	operator new(unsigned long)
100026ad:	83 c4 10             	add    esp,0x10
100026b0:	89 c3                	mov    ebx,eax
100026b2:	83 ec 08             	sub    esp,0x8
100026b5:	68 68 46 00 10       	push   0x10004668	100026b6: R_386_32	.text
100026ba:	53                   	push   ebx
100026bb:	e8 fc ff ff ff       	call   100026bc <firstRun()+0x79>	100026bc: R_386_PC32	VgaText::VgaText(char const*)
100026c0:	83 c4 10             	add    esp,0x10
100026c3:	89 1d 00 00 00 00    	mov    DWORD PTR ds:0x0,ebx	100026c5: R_386_32	term
100026c9:	a1 00 00 00 00       	mov    eax,ds:0x0	100026ca: R_386_32	term
100026ce:	83 ec 0c             	sub    esp,0xc
100026d1:	50                   	push   eax
100026d2:	e8 fc ff ff ff       	call   100026d3 <firstRun()+0x90>	100026d3: R_386_PC32	setActiveTerminal(VgaText*)
100026d7:	83 c4 10             	add    esp,0x10
100026da:	e8 fc ff ff ff       	call   100026db <firstRun()+0x98>	100026db: R_386_PC32	drawBootScreen()
100026df:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
100026e6:	83 ec 0c             	sub    esp,0xc
100026e9:	68 6d 46 00 10       	push   0x1000466d	100026ea: R_386_32	.text
100026ee:	6a 0c                	push   0xc
100026f0:	6a 32                	push   0x32
100026f2:	6a 03                	push   0x3
100026f4:	6a 16                	push   0x16
100026f6:	e8 fc ff ff ff       	call   100026f7 <firstRun()+0xb4>	100026f7: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
100026fb:	83 c4 20             	add    esp,0x20
100026fe:	a1 00 00 00 00       	mov    eax,ds:0x0	100026ff: R_386_32	term
10002703:	83 ec 04             	sub    esp,0x4
10002706:	6a 06                	push   0x6
10002708:	6a 18                	push   0x18
1000270a:	50                   	push   eax
1000270b:	e8 fc ff ff ff       	call   1000270c <firstRun()+0xc9>	1000270c: R_386_PC32	VgaText::setCursor(int, int)
10002710:	83 c4 10             	add    esp,0x10
10002713:	a1 00 00 00 00       	mov    eax,ds:0x0	10002714: R_386_32	term
10002718:	83 ec 08             	sub    esp,0x8
1000271b:	68 7c 46 00 10       	push   0x1000467c	1000271c: R_386_32	.text
10002720:	50                   	push   eax
10002721:	e8 fc ff ff ff       	call   10002722 <firstRun()+0xdf>	10002722: R_386_PC32	VgaText::puts(char const*)
10002726:	83 c4 10             	add    esp,0x10
10002729:	a1 00 00 00 00       	mov    eax,ds:0x0	1000272a: R_386_32	term
1000272e:	83 ec 04             	sub    esp,0x4
10002731:	6a 07                	push   0x7
10002733:	6a 18                	push   0x18
10002735:	50                   	push   eax
10002736:	e8 fc ff ff ff       	call   10002737 <firstRun()+0xf4>	10002737: R_386_PC32	VgaText::setCursor(int, int)
1000273b:	83 c4 10             	add    esp,0x10
1000273e:	a1 00 00 00 00       	mov    eax,ds:0x0	1000273f: R_386_32	term
10002743:	83 ec 08             	sub    esp,0x8
10002746:	68 ab 46 00 10       	push   0x100046ab	10002747: R_386_32	.text
1000274b:	50                   	push   eax
1000274c:	e8 fc ff ff ff       	call   1000274d <firstRun()+0x10a>	1000274d: R_386_PC32	VgaText::puts(char const*)
10002751:	83 c4 10             	add    esp,0x10
10002754:	a1 00 00 00 00       	mov    eax,ds:0x0	10002755: R_386_32	term
10002759:	83 ec 04             	sub    esp,0x4
1000275c:	6a 09                	push   0x9
1000275e:	6a 18                	push   0x18
10002760:	50                   	push   eax
10002761:	e8 fc ff ff ff       	call   10002762 <firstRun()+0x11f>	10002762: R_386_PC32	VgaText::setCursor(int, int)
10002766:	83 c4 10             	add    esp,0x10
10002769:	a1 00 00 00 00       	mov    eax,ds:0x0	1000276a: R_386_32	term
1000276e:	83 ec 08             	sub    esp,0x8
10002771:	68 bb 46 00 10       	push   0x100046bb	10002772: R_386_32	.text
10002776:	50                   	push   eax
10002777:	e8 fc ff ff ff       	call   10002778 <firstRun()+0x135>	10002778: R_386_PC32	VgaText::puts(char const*)
1000277c:	83 c4 10             	add    esp,0x10
1000277f:	a1 00 00 00 00       	mov    eax,ds:0x0	10002780: R_386_32	term
10002784:	83 ec 04             	sub    esp,0x4
10002787:	6a 0b                	push   0xb
10002789:	6a 18                	push   0x18
1000278b:	50                   	push   eax
1000278c:	e8 fc ff ff ff       	call   1000278d <firstRun()+0x14a>	1000278d: R_386_PC32	VgaText::setCursor(int, int)
10002791:	83 c4 10             	add    esp,0x10
10002794:	a1 00 00 00 00       	mov    eax,ds:0x0	10002795: R_386_32	term
10002799:	83 ec 08             	sub    esp,0x8
1000279c:	68 c0 46 00 10       	push   0x100046c0	1000279d: R_386_32	.text
100027a1:	50                   	push   eax
100027a2:	e8 fc ff ff ff       	call   100027a3 <firstRun()+0x160>	100027a3: R_386_PC32	VgaText::puts(char const*)
100027a7:	83 c4 10             	add    esp,0x10
100027aa:	a1 00 00 00 00       	mov    eax,ds:0x0	100027ab: R_386_32	term
100027af:	83 ec 04             	sub    esp,0x4
100027b2:	6a 09                	push   0x9
100027b4:	6a 21                	push   0x21
100027b6:	50                   	push   eax
100027b7:	e8 fc ff ff ff       	call   100027b8 <firstRun()+0x175>	100027b8: R_386_PC32	VgaText::setCursor(int, int)
100027bc:	83 c4 10             	add    esp,0x10
100027bf:	a1 00 00 00 00       	mov    eax,ds:0x0	100027c0: R_386_32	term
100027c4:	6a 07                	push   0x7
100027c6:	6a 00                	push   0x0
100027c8:	68 c8 46 00 10       	push   0x100046c8	100027c9: R_386_32	.text
100027cd:	50                   	push   eax
100027ce:	e8 fc ff ff ff       	call   100027cf <firstRun()+0x18c>	100027cf: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
100027d3:	83 c4 10             	add    esp,0x10
100027d6:	a1 00 00 00 00       	mov    eax,ds:0x0	100027d7: R_386_32	term
100027db:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
100027df:	75 07                	jne    100027e8 <firstRun()+0x1a5>
100027e1:	ba e2 46 00 10       	mov    edx,0x100046e2	100027e2: R_386_32	.text
100027e6:	eb 05                	jmp    100027ed <firstRun()+0x1aa>
100027e8:	ba e6 46 00 10       	mov    edx,0x100046e6	100027e9: R_386_32	.text
100027ed:	6a 0f                	push   0xf
100027ef:	6a 00                	push   0x0
100027f1:	52                   	push   edx
100027f2:	50                   	push   eax
100027f3:	e8 fc ff ff ff       	call   100027f4 <firstRun()+0x1b1>	100027f4: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
100027f8:	83 c4 10             	add    esp,0x10
100027fb:	a1 00 00 00 00       	mov    eax,ds:0x0	100027fc: R_386_32	term
10002800:	83 ec 08             	sub    esp,0x8
10002803:	6a 21                	push   0x21
10002805:	50                   	push   eax
10002806:	e8 fc ff ff ff       	call   10002807 <firstRun()+0x1c4>	10002807: R_386_PC32	VgaText::setCursorX(int)
1000280b:	83 c4 10             	add    esp,0x10
1000280e:	a1 00 00 00 00       	mov    eax,ds:0x0	1000280f: R_386_32	term
10002813:	6a 07                	push   0x7
10002815:	6a 00                	push   0x0
10002817:	68 00 00 00 00       	push   0x0	10002818: R_386_32	currName
1000281c:	50                   	push   eax
1000281d:	e8 fc ff ff ff       	call   1000281e <firstRun()+0x1db>	1000281e: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002822:	83 c4 10             	add    esp,0x10
10002825:	a1 00 00 00 00       	mov    eax,ds:0x0	10002826: R_386_32	term
1000282a:	83 ec 04             	sub    esp,0x4
1000282d:	6a 0b                	push   0xb
1000282f:	6a 21                	push   0x21
10002831:	50                   	push   eax
10002832:	e8 fc ff ff ff       	call   10002833 <firstRun()+0x1f0>	10002833: R_386_PC32	VgaText::setCursor(int, int)
10002837:	83 c4 10             	add    esp,0x10
1000283a:	a1 00 00 00 00       	mov    eax,ds:0x0	1000283b: R_386_32	term
1000283f:	6a 07                	push   0x7
10002841:	6a 00                	push   0x0
10002843:	68 c8 46 00 10       	push   0x100046c8	10002844: R_386_32	.text
10002848:	50                   	push   eax
10002849:	e8 fc ff ff ff       	call   1000284a <firstRun()+0x207>	1000284a: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
1000284e:	83 c4 10             	add    esp,0x10
10002851:	a1 00 00 00 00       	mov    eax,ds:0x0	10002852: R_386_32	term
10002856:	83 7d f4 01          	cmp    DWORD PTR [ebp-0xc],0x1
1000285a:	75 07                	jne    10002863 <firstRun()+0x220>
1000285c:	ba e2 46 00 10       	mov    edx,0x100046e2	1000285d: R_386_32	.text
10002861:	eb 05                	jmp    10002868 <firstRun()+0x225>
10002863:	ba e6 46 00 10       	mov    edx,0x100046e6	10002864: R_386_32	.text
10002868:	6a 0f                	push   0xf
1000286a:	6a 00                	push   0x0
1000286c:	52                   	push   edx
1000286d:	50                   	push   eax
1000286e:	e8 fc ff ff ff       	call   1000286f <firstRun()+0x22c>	1000286f: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002873:	83 c4 10             	add    esp,0x10
10002876:	a1 00 00 00 00       	mov    eax,ds:0x0	10002877: R_386_32	term
1000287b:	83 ec 08             	sub    esp,0x8
1000287e:	6a 21                	push   0x21
10002880:	50                   	push   eax
10002881:	e8 fc ff ff ff       	call   10002882 <firstRun()+0x23f>	10002882: R_386_PC32	VgaText::setCursorX(int)
10002886:	83 c4 10             	add    esp,0x10
10002889:	a1 00 00 00 00       	mov    eax,ds:0x0	1000288a: R_386_32	term
1000288e:	6a 07                	push   0x7
10002890:	6a 00                	push   0x0
10002892:	68 00 00 00 00       	push   0x0	10002893: R_386_32	currComp
10002897:	50                   	push   eax
10002898:	e8 fc ff ff ff       	call   10002899 <firstRun()+0x256>	10002899: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
1000289d:	83 c4 10             	add    esp,0x10
100028a0:	a1 00 00 00 00       	mov    eax,ds:0x0	100028a1: R_386_32	term
100028a5:	83 ec 04             	sub    esp,0x4
100028a8:	6a 0d                	push   0xd
100028aa:	6a 18                	push   0x18
100028ac:	50                   	push   eax
100028ad:	e8 fc ff ff ff       	call   100028ae <firstRun()+0x26b>	100028ae: R_386_PC32	VgaText::setCursor(int, int)
100028b2:	83 c4 10             	add    esp,0x10
100028b5:	a1 00 00 00 00       	mov    eax,ds:0x0	100028b6: R_386_32	term
100028ba:	83 7d f4 02          	cmp    DWORD PTR [ebp-0xc],0x2
100028be:	75 07                	jne    100028c7 <firstRun()+0x284>
100028c0:	ba ea 46 00 10       	mov    edx,0x100046ea	100028c1: R_386_32	.text
100028c5:	eb 05                	jmp    100028cc <firstRun()+0x289>
100028c7:	ba f6 46 00 10       	mov    edx,0x100046f6	100028c8: R_386_32	.text
100028cc:	6a 0f                	push   0xf
100028ce:	6a 08                	push   0x8
100028d0:	52                   	push   edx
100028d1:	50                   	push   eax
100028d2:	e8 fc ff ff ff       	call   100028d3 <firstRun()+0x290>	100028d3: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
100028d7:	83 c4 10             	add    esp,0x10
100028da:	a1 00 00 00 00       	mov    eax,ds:0x0	100028db: R_386_32	term
100028df:	83 ec 04             	sub    esp,0x4
100028e2:	6a 0e                	push   0xe
100028e4:	6a 18                	push   0x18
100028e6:	50                   	push   eax
100028e7:	e8 fc ff ff ff       	call   100028e8 <firstRun()+0x2a5>	100028e8: R_386_PC32	VgaText::setCursor(int, int)
100028ec:	83 c4 10             	add    esp,0x10
100028ef:	a1 00 00 00 00       	mov    eax,ds:0x0	100028f0: R_386_32	term
100028f4:	83 7d f4 02          	cmp    DWORD PTR [ebp-0xc],0x2
100028f8:	75 07                	jne    10002901 <firstRun()+0x2be>
100028fa:	ba 02 47 00 10       	mov    edx,0x10004702	100028fb: R_386_32	.text
100028ff:	eb 05                	jmp    10002906 <firstRun()+0x2c3>
10002901:	ba f6 46 00 10       	mov    edx,0x100046f6	10002902: R_386_32	.text
10002906:	6a 0f                	push   0xf
10002908:	6a 08                	push   0x8
1000290a:	52                   	push   edx
1000290b:	50                   	push   eax
1000290c:	e8 fc ff ff ff       	call   1000290d <firstRun()+0x2ca>	1000290d: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002911:	83 c4 10             	add    esp,0x10
10002914:	a1 00 00 00 00       	mov    eax,ds:0x0	10002915: R_386_32	term
10002919:	83 ec 04             	sub    esp,0x4
1000291c:	6a 0d                	push   0xd
1000291e:	6a 32                	push   0x32
10002920:	50                   	push   eax
10002921:	e8 fc ff ff ff       	call   10002922 <firstRun()+0x2df>	10002922: R_386_PC32	VgaText::setCursor(int, int)
10002926:	83 c4 10             	add    esp,0x10
10002929:	83 7d f4 02          	cmp    DWORD PTR [ebp-0xc],0x2
1000292d:	74 19                	je     10002948 <firstRun()+0x305>
1000292f:	a1 00 00 00 00       	mov    eax,ds:0x0	10002930: R_386_32	term
10002934:	6a 08                	push   0x8
10002936:	6a 0f                	push   0xf
10002938:	68 0c 47 00 10       	push   0x1000470c	10002939: R_386_32	.text
1000293d:	50                   	push   eax
1000293e:	e8 fc ff ff ff       	call   1000293f <firstRun()+0x2fc>	1000293f: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002943:	83 c4 10             	add    esp,0x10
10002946:	eb 17                	jmp    1000295f <firstRun()+0x31c>
10002948:	a1 00 00 00 00       	mov    eax,ds:0x0	10002949: R_386_32	term
1000294d:	6a 01                	push   0x1
1000294f:	6a 0f                	push   0xf
10002951:	68 0c 47 00 10       	push   0x1000470c	10002952: R_386_32	.text
10002956:	50                   	push   eax
10002957:	e8 fc ff ff ff       	call   10002958 <firstRun()+0x315>	10002958: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
1000295c:	83 c4 10             	add    esp,0x10
1000295f:	a1 00 00 00 00       	mov    eax,ds:0x0	10002960: R_386_32	term
10002964:	83 7d f4 02          	cmp    DWORD PTR [ebp-0xc],0x2
10002968:	75 07                	jne    10002971 <firstRun()+0x32e>
1000296a:	ba e2 46 00 10       	mov    edx,0x100046e2	1000296b: R_386_32	.text
1000296f:	eb 05                	jmp    10002976 <firstRun()+0x333>
10002971:	ba e6 46 00 10       	mov    edx,0x100046e6	10002972: R_386_32	.text
10002976:	6a 0f                	push   0xf
10002978:	6a 00                	push   0x0
1000297a:	52                   	push   edx
1000297b:	50                   	push   eax
1000297c:	e8 fc ff ff ff       	call   1000297d <firstRun()+0x33a>	1000297d: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002981:	83 c4 10             	add    esp,0x10
10002984:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
10002988:	75 28                	jne    100029b2 <firstRun()+0x36f>
1000298a:	8b 1d 00 00 00 00    	mov    ebx,DWORD PTR ds:0x0	1000298c: R_386_32	term
10002990:	83 ec 0c             	sub    esp,0xc
10002993:	68 00 00 00 00       	push   0x0	10002994: R_386_32	currName
10002998:	e8 fc ff ff ff       	call   10002999 <firstRun()+0x356>	10002999: R_386_PC32	strlen
1000299d:	83 c4 10             	add    esp,0x10
100029a0:	83 c0 21             	add    eax,0x21
100029a3:	83 ec 04             	sub    esp,0x4
100029a6:	6a 09                	push   0x9
100029a8:	50                   	push   eax
100029a9:	53                   	push   ebx
100029aa:	e8 fc ff ff ff       	call   100029ab <firstRun()+0x368>	100029ab: R_386_PC32	VgaText::setCursor(int, int)
100029af:	83 c4 10             	add    esp,0x10
100029b2:	83 7d f4 01          	cmp    DWORD PTR [ebp-0xc],0x1
100029b6:	75 28                	jne    100029e0 <firstRun()+0x39d>
100029b8:	8b 1d 00 00 00 00    	mov    ebx,DWORD PTR ds:0x0	100029ba: R_386_32	term
100029be:	83 ec 0c             	sub    esp,0xc
100029c1:	68 00 00 00 00       	push   0x0	100029c2: R_386_32	currComp
100029c6:	e8 fc ff ff ff       	call   100029c7 <firstRun()+0x384>	100029c7: R_386_PC32	strlen
100029cb:	83 c4 10             	add    esp,0x10
100029ce:	83 c0 21             	add    eax,0x21
100029d1:	83 ec 04             	sub    esp,0x4
100029d4:	6a 0b                	push   0xb
100029d6:	50                   	push   eax
100029d7:	53                   	push   ebx
100029d8:	e8 fc ff ff ff       	call   100029d9 <firstRun()+0x396>	100029d9: R_386_PC32	VgaText::setCursor(int, int)
100029dd:	83 c4 10             	add    esp,0x10
100029e0:	83 7d f4 02          	cmp    DWORD PTR [ebp-0xc],0x2
100029e4:	75 15                	jne    100029fb <firstRun()+0x3b8>
100029e6:	a1 00 00 00 00       	mov    eax,ds:0x0	100029e7: R_386_32	term
100029eb:	83 ec 04             	sub    esp,0x4
100029ee:	6a 02                	push   0x2
100029f0:	6a 00                	push   0x0
100029f2:	50                   	push   eax
100029f3:	e8 fc ff ff ff       	call   100029f4 <firstRun()+0x3b1>	100029f4: R_386_PC32	VgaText::setCursor(int, int)
100029f8:	83 c4 10             	add    esp,0x10
100029fb:	a0 00 00 00 00       	mov    al,ds:0x0	100029fc: R_386_32	installKey
10002a00:	84 c0                	test   al,al
10002a02:	0f 94 c0             	sete   al
10002a05:	84 c0                	test   al,al
10002a07:	74 02                	je     10002a0b <firstRun()+0x3c8>
10002a09:	eb f0                	jmp    100029fb <firstRun()+0x3b8>
10002a0b:	a1 00 00 00 00       	mov    eax,ds:0x0	10002a0c: R_386_32	term
10002a10:	05 82 00 00 00       	add    eax,0x82
10002a15:	83 ec 04             	sub    esp,0x4
10002a18:	6a 10                	push   0x10
10002a1a:	6a 00                	push   0x0
10002a1c:	50                   	push   eax
10002a1d:	e8 fc ff ff ff       	call   10002a1e <firstRun()+0x3db>	10002a1e: R_386_PC32	memset
10002a22:	83 c4 10             	add    esp,0x10
10002a25:	a1 00 00 00 00       	mov    eax,ds:0x0	10002a26: R_386_32	term
10002a2a:	05 02 01 00 00       	add    eax,0x102
10002a2f:	83 ec 04             	sub    esp,0x4
10002a32:	6a 10                	push   0x10
10002a34:	6a 00                	push   0x0
10002a36:	50                   	push   eax
10002a37:	e8 fc ff ff ff       	call   10002a38 <firstRun()+0x3f5>	10002a38: R_386_PC32	memset
10002a3c:	83 c4 10             	add    esp,0x10
10002a3f:	a0 00 00 00 00       	mov    al,ds:0x0	10002a40: R_386_32	installKey
10002a44:	3c 09                	cmp    al,0x9
10002a46:	74 09                	je     10002a51 <firstRun()+0x40e>
10002a48:	a0 00 00 00 00       	mov    al,ds:0x0	10002a49: R_386_32	installKey
10002a4d:	3c 0a                	cmp    al,0xa
10002a4f:	75 04                	jne    10002a55 <firstRun()+0x412>
10002a51:	b0 01                	mov    al,0x1
10002a53:	eb 02                	jmp    10002a57 <firstRun()+0x414>
10002a55:	b0 00                	mov    al,0x0
10002a57:	84 c0                	test   al,al
10002a59:	0f 84 d8 03 00 00    	je     10002e37 <firstRun()+0x7f4>
10002a5f:	83 7d f4 02          	cmp    DWORD PTR [ebp-0xc],0x2
10002a63:	75 0d                	jne    10002a72 <firstRun()+0x42f>
10002a65:	a0 00 00 00 00       	mov    al,ds:0x0	10002a66: R_386_32	installKey
10002a6a:	3c 0a                	cmp    al,0xa
10002a6c:	75 04                	jne    10002a72 <firstRun()+0x42f>
10002a6e:	b0 01                	mov    al,0x1
10002a70:	eb 02                	jmp    10002a74 <firstRun()+0x431>
10002a72:	b0 00                	mov    al,0x0
10002a74:	84 c0                	test   al,al
10002a76:	0f 84 96 03 00 00    	je     10002e12 <firstRun()+0x7cf>
10002a7c:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10002a7e: R_386_32	installKey
10002a83:	90                   	nop
10002a84:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10002a86: R_386_32	installKey
10002a8b:	83 ec 0c             	sub    esp,0xc
10002a8e:	68 a0 0f 00 00       	push   0xfa0
10002a93:	e8 fc ff ff ff       	call   10002a94 <firstRun()+0x451>	10002a94: R_386_PC32	milliTenthSleep(unsigned int)
10002a98:	83 c4 10             	add    esp,0x10
10002a9b:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10002a9d: R_386_32	installKey
10002aa2:	e8 fc ff ff ff       	call   10002aa3 <firstRun()+0x460>	10002aa3: R_386_PC32	drawBootScreen()
10002aa7:	83 ec 0c             	sub    esp,0xc
10002aaa:	68 15 47 00 10       	push   0x10004715	10002aab: R_386_32	.text
10002aaf:	6a 0d                	push   0xd
10002ab1:	6a 32                	push   0x32
10002ab3:	6a 02                	push   0x2
10002ab5:	6a 16                	push   0x16
10002ab7:	e8 fc ff ff ff       	call   10002ab8 <firstRun()+0x475>	10002ab8: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
10002abc:	83 c4 20             	add    esp,0x20
10002abf:	a1 00 00 00 00       	mov    eax,ds:0x0	10002ac0: R_386_32	Krnl::computer
10002ac4:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
10002aca:	a1 00 00 00 00       	mov    eax,ds:0x0	10002acb: R_386_32	Krnl::computer
10002acf:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
10002ad5:	8b 00                	mov    eax,DWORD PTR [eax]
10002ad7:	83 c0 28             	add    eax,0x28
10002ada:	8b 00                	mov    eax,DWORD PTR [eax]
10002adc:	8d 55 b8             	lea    edx,[ebp-0x48]
10002adf:	83 ec 08             	sub    esp,0x8
10002ae2:	51                   	push   ecx
10002ae3:	52                   	push   edx
10002ae4:	ff d0                	call   eax
10002ae6:	83 c4 0c             	add    esp,0xc
10002ae9:	83 ec 08             	sub    esp,0x8
10002aec:	68 23 47 00 10       	push   0x10004723	10002aed: R_386_32	.text
10002af1:	8d 85 78 ff ff ff    	lea    eax,[ebp-0x88]
10002af7:	50                   	push   eax
10002af8:	e8 fc ff ff ff       	call   10002af9 <firstRun()+0x4b6>	10002af9: R_386_PC32	strcpy
10002afd:	83 c4 10             	add    esp,0x10
10002b00:	8a 45 b8             	mov    al,BYTE PTR [ebp-0x48]
10002b03:	0f b6 d0             	movzx  edx,al
10002b06:	89 d0                	mov    eax,edx
10002b08:	c1 e0 02             	shl    eax,0x2
10002b0b:	01 d0                	add    eax,edx
10002b0d:	c1 e0 03             	shl    eax,0x3
10002b10:	01 d0                	add    eax,edx
10002b12:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10002b19:	01 d0                	add    eax,edx
10002b1b:	66 c1 e8 08          	shr    ax,0x8
10002b1f:	c0 e8 03             	shr    al,0x3
10002b22:	83 c0 30             	add    eax,0x30
10002b25:	88 85 78 ff ff ff    	mov    BYTE PTR [ebp-0x88],al
10002b2b:	8a 4d b8             	mov    cl,BYTE PTR [ebp-0x48]
10002b2e:	0f b6 d1             	movzx  edx,cl
10002b31:	89 d0                	mov    eax,edx
10002b33:	c1 e0 02             	shl    eax,0x2
10002b36:	01 d0                	add    eax,edx
10002b38:	c1 e0 03             	shl    eax,0x3
10002b3b:	01 d0                	add    eax,edx
10002b3d:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10002b44:	01 d0                	add    eax,edx
10002b46:	66 c1 e8 08          	shr    ax,0x8
10002b4a:	88 c2                	mov    dl,al
10002b4c:	c0 ea 03             	shr    dl,0x3
10002b4f:	88 d0                	mov    al,dl
10002b51:	c1 e0 02             	shl    eax,0x2
10002b54:	01 d0                	add    eax,edx
10002b56:	d1 e0                	shl    eax,1
10002b58:	29 c1                	sub    ecx,eax
10002b5a:	88 ca                	mov    dl,cl
10002b5c:	8d 42 30             	lea    eax,[edx+0x30]
10002b5f:	88 85 79 ff ff ff    	mov    BYTE PTR [ebp-0x87],al
10002b65:	8a 45 b9             	mov    al,BYTE PTR [ebp-0x47]
10002b68:	0f b6 c8             	movzx  ecx,al
10002b6b:	b8 67 66 66 66       	mov    eax,0x66666667
10002b70:	f7 e9                	imul   ecx
10002b72:	c1 fa 02             	sar    edx,0x2
10002b75:	89 c8                	mov    eax,ecx
10002b77:	c1 f8 1f             	sar    eax,0x1f
10002b7a:	29 c2                	sub    edx,eax
10002b7c:	89 d0                	mov    eax,edx
10002b7e:	83 c0 30             	add    eax,0x30
10002b81:	88 85 7b ff ff ff    	mov    BYTE PTR [ebp-0x85],al
10002b87:	8a 45 b9             	mov    al,BYTE PTR [ebp-0x47]
10002b8a:	0f b6 c8             	movzx  ecx,al
10002b8d:	b8 67 66 66 66       	mov    eax,0x66666667
10002b92:	f7 e9                	imul   ecx
10002b94:	c1 fa 02             	sar    edx,0x2
10002b97:	89 c8                	mov    eax,ecx
10002b99:	c1 f8 1f             	sar    eax,0x1f
10002b9c:	29 c2                	sub    edx,eax
10002b9e:	89 d0                	mov    eax,edx
10002ba0:	c1 e0 02             	shl    eax,0x2
10002ba3:	01 d0                	add    eax,edx
10002ba5:	01 c0                	add    eax,eax
10002ba7:	29 c1                	sub    ecx,eax
10002ba9:	89 ca                	mov    edx,ecx
10002bab:	88 d0                	mov    al,dl
10002bad:	83 c0 30             	add    eax,0x30
10002bb0:	88 85 7c ff ff ff    	mov    BYTE PTR [ebp-0x84],al
10002bb6:	66 8b 45 ba          	mov    ax,WORD PTR [ebp-0x46]
10002bba:	0f b7 c8             	movzx  ecx,ax
10002bbd:	b8 d3 4d 62 10       	mov    eax,0x10624dd3
10002bc2:	f7 e9                	imul   ecx
10002bc4:	c1 fa 06             	sar    edx,0x6
10002bc7:	89 c8                	mov    eax,ecx
10002bc9:	c1 f8 1f             	sar    eax,0x1f
10002bcc:	29 c2                	sub    edx,eax
10002bce:	89 d0                	mov    eax,edx
10002bd0:	b9 0a 00 00 00       	mov    ecx,0xa
10002bd5:	99                   	cdq    
10002bd6:	f7 f9                	idiv   ecx
10002bd8:	89 d0                	mov    eax,edx
10002bda:	83 c0 30             	add    eax,0x30
10002bdd:	88 85 7e ff ff ff    	mov    BYTE PTR [ebp-0x82],al
10002be3:	66 8b 45 ba          	mov    ax,WORD PTR [ebp-0x46]
10002be7:	0f b7 c8             	movzx  ecx,ax
10002bea:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
10002bef:	f7 e9                	imul   ecx
10002bf1:	c1 fa 05             	sar    edx,0x5
10002bf4:	89 c8                	mov    eax,ecx
10002bf6:	c1 f8 1f             	sar    eax,0x1f
10002bf9:	29 c2                	sub    edx,eax
10002bfb:	89 d0                	mov    eax,edx
10002bfd:	b9 0a 00 00 00       	mov    ecx,0xa
10002c02:	99                   	cdq    
10002c03:	f7 f9                	idiv   ecx
10002c05:	89 d0                	mov    eax,edx
10002c07:	83 c0 30             	add    eax,0x30
10002c0a:	88 85 7f ff ff ff    	mov    BYTE PTR [ebp-0x81],al
10002c10:	66 8b 45 ba          	mov    ax,WORD PTR [ebp-0x46]
10002c14:	0f b7 c8             	movzx  ecx,ax
10002c17:	b8 67 66 66 66       	mov    eax,0x66666667
10002c1c:	f7 e9                	imul   ecx
10002c1e:	c1 fa 02             	sar    edx,0x2
10002c21:	89 c8                	mov    eax,ecx
10002c23:	c1 f8 1f             	sar    eax,0x1f
10002c26:	89 d1                	mov    ecx,edx
10002c28:	29 c1                	sub    ecx,eax
10002c2a:	b8 67 66 66 66       	mov    eax,0x66666667
10002c2f:	f7 e9                	imul   ecx
10002c31:	c1 fa 02             	sar    edx,0x2
10002c34:	89 c8                	mov    eax,ecx
10002c36:	c1 f8 1f             	sar    eax,0x1f
10002c39:	29 c2                	sub    edx,eax
10002c3b:	89 d0                	mov    eax,edx
10002c3d:	c1 e0 02             	shl    eax,0x2
10002c40:	01 d0                	add    eax,edx
10002c42:	01 c0                	add    eax,eax
10002c44:	29 c1                	sub    ecx,eax
10002c46:	89 ca                	mov    edx,ecx
10002c48:	88 d0                	mov    al,dl
10002c4a:	83 c0 30             	add    eax,0x30
10002c4d:	88 45 80             	mov    BYTE PTR [ebp-0x80],al
10002c50:	66 8b 45 ba          	mov    ax,WORD PTR [ebp-0x46]
10002c54:	0f b7 c0             	movzx  eax,ax
10002c57:	b9 0a 00 00 00       	mov    ecx,0xa
10002c5c:	99                   	cdq    
10002c5d:	f7 f9                	idiv   ecx
10002c5f:	89 d0                	mov    eax,edx
10002c61:	83 c0 30             	add    eax,0x30
10002c64:	88 45 81             	mov    BYTE PTR [ebp-0x7f],al
10002c67:	8a 45 bc             	mov    al,BYTE PTR [ebp-0x44]
10002c6a:	0f b6 d0             	movzx  edx,al
10002c6d:	89 d0                	mov    eax,edx
10002c6f:	c1 e0 02             	shl    eax,0x2
10002c72:	01 d0                	add    eax,edx
10002c74:	c1 e0 03             	shl    eax,0x3
10002c77:	01 d0                	add    eax,edx
10002c79:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10002c80:	01 d0                	add    eax,edx
10002c82:	66 c1 e8 08          	shr    ax,0x8
10002c86:	c0 e8 03             	shr    al,0x3
10002c89:	83 c0 30             	add    eax,0x30
10002c8c:	88 45 83             	mov    BYTE PTR [ebp-0x7d],al
10002c8f:	8a 4d bc             	mov    cl,BYTE PTR [ebp-0x44]
10002c92:	0f b6 d1             	movzx  edx,cl
10002c95:	89 d0                	mov    eax,edx
10002c97:	c1 e0 02             	shl    eax,0x2
10002c9a:	01 d0                	add    eax,edx
10002c9c:	c1 e0 03             	shl    eax,0x3
10002c9f:	01 d0                	add    eax,edx
10002ca1:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10002ca8:	01 d0                	add    eax,edx
10002caa:	66 c1 e8 08          	shr    ax,0x8
10002cae:	88 c2                	mov    dl,al
10002cb0:	c0 ea 03             	shr    dl,0x3
10002cb3:	88 d0                	mov    al,dl
10002cb5:	c1 e0 02             	shl    eax,0x2
10002cb8:	01 d0                	add    eax,edx
10002cba:	d1 e0                	shl    eax,1
10002cbc:	29 c1                	sub    ecx,eax
10002cbe:	88 ca                	mov    dl,cl
10002cc0:	8d 42 30             	lea    eax,[edx+0x30]
10002cc3:	88 45 84             	mov    BYTE PTR [ebp-0x7c],al
10002cc6:	8a 45 bd             	mov    al,BYTE PTR [ebp-0x43]
10002cc9:	0f b6 d0             	movzx  edx,al
10002ccc:	89 d0                	mov    eax,edx
10002cce:	c1 e0 02             	shl    eax,0x2
10002cd1:	01 d0                	add    eax,edx
10002cd3:	c1 e0 03             	shl    eax,0x3
10002cd6:	01 d0                	add    eax,edx
10002cd8:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10002cdf:	01 d0                	add    eax,edx
10002ce1:	66 c1 e8 08          	shr    ax,0x8
10002ce5:	c0 e8 03             	shr    al,0x3
10002ce8:	83 c0 30             	add    eax,0x30
10002ceb:	88 45 86             	mov    BYTE PTR [ebp-0x7a],al
10002cee:	8a 4d bd             	mov    cl,BYTE PTR [ebp-0x43]
10002cf1:	0f b6 d1             	movzx  edx,cl
10002cf4:	89 d0                	mov    eax,edx
10002cf6:	c1 e0 02             	shl    eax,0x2
10002cf9:	01 d0                	add    eax,edx
10002cfb:	c1 e0 03             	shl    eax,0x3
10002cfe:	01 d0                	add    eax,edx
10002d00:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10002d07:	01 d0                	add    eax,edx
10002d09:	66 c1 e8 08          	shr    ax,0x8
10002d0d:	88 c2                	mov    dl,al
10002d0f:	c0 ea 03             	shr    dl,0x3
10002d12:	88 d0                	mov    al,dl
10002d14:	c1 e0 02             	shl    eax,0x2
10002d17:	01 d0                	add    eax,edx
10002d19:	d1 e0                	shl    eax,1
10002d1b:	29 c1                	sub    ecx,eax
10002d1d:	88 ca                	mov    dl,cl
10002d1f:	8d 42 30             	lea    eax,[edx+0x30]
10002d22:	88 45 87             	mov    BYTE PTR [ebp-0x79],al
10002d25:	8a 45 be             	mov    al,BYTE PTR [ebp-0x42]
10002d28:	0f b6 d0             	movzx  edx,al
10002d2b:	89 d0                	mov    eax,edx
10002d2d:	c1 e0 02             	shl    eax,0x2
10002d30:	01 d0                	add    eax,edx
10002d32:	c1 e0 03             	shl    eax,0x3
10002d35:	01 d0                	add    eax,edx
10002d37:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10002d3e:	01 d0                	add    eax,edx
10002d40:	66 c1 e8 08          	shr    ax,0x8
10002d44:	c0 e8 03             	shr    al,0x3
10002d47:	83 c0 30             	add    eax,0x30
10002d4a:	88 45 89             	mov    BYTE PTR [ebp-0x77],al
10002d4d:	8a 4d be             	mov    cl,BYTE PTR [ebp-0x42]
10002d50:	0f b6 d1             	movzx  edx,cl
10002d53:	89 d0                	mov    eax,edx
10002d55:	c1 e0 02             	shl    eax,0x2
10002d58:	01 d0                	add    eax,edx
10002d5a:	c1 e0 03             	shl    eax,0x3
10002d5d:	01 d0                	add    eax,edx
10002d5f:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10002d66:	01 d0                	add    eax,edx
10002d68:	66 c1 e8 08          	shr    ax,0x8
10002d6c:	88 c2                	mov    dl,al
10002d6e:	c0 ea 03             	shr    dl,0x3
10002d71:	88 d0                	mov    al,dl
10002d73:	c1 e0 02             	shl    eax,0x2
10002d76:	01 d0                	add    eax,edx
10002d78:	d1 e0                	shl    eax,1
10002d7a:	29 c1                	sub    ecx,eax
10002d7c:	88 ca                	mov    dl,cl
10002d7e:	8d 42 30             	lea    eax,[edx+0x30]
10002d81:	88 45 8a             	mov    BYTE PTR [ebp-0x76],al
10002d84:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
10002d8b:	a1 00 00 00 00       	mov    eax,ds:0x0	10002d8c: R_386_32	term
10002d90:	83 ec 04             	sub    esp,0x4
10002d93:	6a 05                	push   0x5
10002d95:	6a 18                	push   0x18
10002d97:	50                   	push   eax
10002d98:	e8 fc ff ff ff       	call   10002d99 <firstRun()+0x756>	10002d99: R_386_PC32	VgaText::setCursor(int, int)
10002d9d:	83 c4 10             	add    esp,0x10
10002da0:	a1 00 00 00 00       	mov    eax,ds:0x0	10002da1: R_386_32	term
10002da5:	83 ec 08             	sub    esp,0x8
10002da8:	68 38 47 00 10       	push   0x10004738	10002da9: R_386_32	.text
10002dad:	50                   	push   eax
10002dae:	e8 fc ff ff ff       	call   10002daf <firstRun()+0x76c>	10002daf: R_386_PC32	VgaText::puts(char const*)
10002db3:	83 c4 10             	add    esp,0x10
10002db6:	a1 00 00 00 00       	mov    eax,ds:0x0	10002db7: R_386_32	term
10002dbb:	83 ec 04             	sub    esp,0x4
10002dbe:	6a 06                	push   0x6
10002dc0:	6a 18                	push   0x18
10002dc2:	50                   	push   eax
10002dc3:	e8 fc ff ff ff       	call   10002dc4 <firstRun()+0x781>	10002dc4: R_386_PC32	VgaText::setCursor(int, int)
10002dc8:	83 c4 10             	add    esp,0x10
10002dcb:	a1 00 00 00 00       	mov    eax,ds:0x0	10002dcc: R_386_32	term
10002dd0:	83 ec 08             	sub    esp,0x8
10002dd3:	68 60 47 00 10       	push   0x10004760	10002dd4: R_386_32	.text
10002dd8:	50                   	push   eax
10002dd9:	e8 fc ff ff ff       	call   10002dda <firstRun()+0x797>	10002dda: R_386_PC32	VgaText::puts(char const*)
10002dde:	83 c4 10             	add    esp,0x10
10002de1:	a1 00 00 00 00       	mov    eax,ds:0x0	10002de2: R_386_32	term
10002de6:	83 ec 04             	sub    esp,0x4
10002de9:	6a 09                	push   0x9
10002deb:	6a 1a                	push   0x1a
10002ded:	50                   	push   eax
10002dee:	e8 fc ff ff ff       	call   10002def <firstRun()+0x7ac>	10002def: R_386_PC32	VgaText::setCursor(int, int)
10002df3:	83 c4 10             	add    esp,0x10
10002df6:	a1 00 00 00 00       	mov    eax,ds:0x0	10002df7: R_386_32	term
10002dfb:	6a 0f                	push   0xf
10002dfd:	6a 07                	push   0x7
10002dff:	68 76 47 00 10       	push   0x10004776	10002e00: R_386_32	.text
10002e04:	50                   	push   eax
10002e05:	e8 fc ff ff ff       	call   10002e06 <firstRun()+0x7c3>	10002e06: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002e0a:	83 c4 10             	add    esp,0x10
10002e0d:	e9 76 01 00 00       	jmp    10002f88 <firstRun()+0x945>
10002e12:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10002e15:	83 7d f4 03          	cmp    DWORD PTR [ebp-0xc],0x3
10002e19:	75 07                	jne    10002e22 <firstRun()+0x7df>
10002e1b:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
10002e22:	83 ec 0c             	sub    esp,0xc
10002e25:	68 2c 01 00 00       	push   0x12c
10002e2a:	e8 fc ff ff ff       	call   10002e2b <firstRun()+0x7e8>	10002e2b: R_386_PC32	milliTenthSleep(unsigned int)
10002e2f:	83 c4 10             	add    esp,0x10
10002e32:	e9 45 01 00 00       	jmp    10002f7c <firstRun()+0x939>
10002e37:	a0 00 00 00 00       	mov    al,ds:0x0	10002e38: R_386_32	installKey
10002e3c:	3c 1f                	cmp    al,0x1f
10002e3e:	7e 0d                	jle    10002e4d <firstRun()+0x80a>
10002e40:	a0 00 00 00 00       	mov    al,ds:0x0	10002e41: R_386_32	installKey
10002e45:	3c 7f                	cmp    al,0x7f
10002e47:	74 04                	je     10002e4d <firstRun()+0x80a>
10002e49:	b0 01                	mov    al,0x1
10002e4b:	eb 02                	jmp    10002e4f <firstRun()+0x80c>
10002e4d:	b0 00                	mov    al,0x0
10002e4f:	84 c0                	test   al,al
10002e51:	0f 84 83 00 00 00    	je     10002eda <firstRun()+0x897>
10002e57:	a0 00 00 00 00       	mov    al,ds:0x0	10002e58: R_386_32	installKey
10002e5c:	88 85 76 ff ff ff    	mov    BYTE PTR [ebp-0x8a],al
10002e62:	c6 85 77 ff ff ff 00 	mov    BYTE PTR [ebp-0x89],0x0
10002e69:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
10002e6d:	75 2c                	jne    10002e9b <firstRun()+0x858>
10002e6f:	83 ec 0c             	sub    esp,0xc
10002e72:	68 00 00 00 00       	push   0x0	10002e73: R_386_32	currName
10002e77:	e8 fc ff ff ff       	call   10002e78 <firstRun()+0x835>	10002e78: R_386_PC32	strlen
10002e7c:	83 c4 10             	add    esp,0x10
10002e7f:	83 f8 17             	cmp    eax,0x17
10002e82:	77 17                	ja     10002e9b <firstRun()+0x858>
10002e84:	83 ec 08             	sub    esp,0x8
10002e87:	8d 85 76 ff ff ff    	lea    eax,[ebp-0x8a]
10002e8d:	50                   	push   eax
10002e8e:	68 00 00 00 00       	push   0x0	10002e8f: R_386_32	currName
10002e93:	e8 fc ff ff ff       	call   10002e94 <firstRun()+0x851>	10002e94: R_386_PC32	strcat
10002e98:	83 c4 10             	add    esp,0x10
10002e9b:	83 7d f4 01          	cmp    DWORD PTR [ebp-0xc],0x1
10002e9f:	0f 85 d7 00 00 00    	jne    10002f7c <firstRun()+0x939>
10002ea5:	83 ec 0c             	sub    esp,0xc
10002ea8:	68 00 00 00 00       	push   0x0	10002ea9: R_386_32	currComp
10002ead:	e8 fc ff ff ff       	call   10002eae <firstRun()+0x86b>	10002eae: R_386_PC32	strlen
10002eb2:	83 c4 10             	add    esp,0x10
10002eb5:	83 f8 17             	cmp    eax,0x17
10002eb8:	0f 87 be 00 00 00    	ja     10002f7c <firstRun()+0x939>
10002ebe:	83 ec 08             	sub    esp,0x8
10002ec1:	8d 85 76 ff ff ff    	lea    eax,[ebp-0x8a]
10002ec7:	50                   	push   eax
10002ec8:	68 00 00 00 00       	push   0x0	10002ec9: R_386_32	currComp
10002ecd:	e8 fc ff ff ff       	call   10002ece <firstRun()+0x88b>	10002ece: R_386_PC32	strcat
10002ed2:	83 c4 10             	add    esp,0x10
10002ed5:	e9 a2 00 00 00       	jmp    10002f7c <firstRun()+0x939>
10002eda:	a0 00 00 00 00       	mov    al,ds:0x0	10002edb: R_386_32	installKey
10002edf:	3c 08                	cmp    al,0x8
10002ee1:	0f 94 c0             	sete   al
10002ee4:	84 c0                	test   al,al
10002ee6:	74 66                	je     10002f4e <firstRun()+0x90b>
10002ee8:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
10002eec:	75 2c                	jne    10002f1a <firstRun()+0x8d7>
10002eee:	83 ec 0c             	sub    esp,0xc
10002ef1:	68 00 00 00 00       	push   0x0	10002ef2: R_386_32	currName
10002ef6:	e8 fc ff ff ff       	call   10002ef7 <firstRun()+0x8b4>	10002ef7: R_386_PC32	strlen
10002efb:	83 c4 10             	add    esp,0x10
10002efe:	85 c0                	test   eax,eax
10002f00:	74 18                	je     10002f1a <firstRun()+0x8d7>
10002f02:	83 ec 0c             	sub    esp,0xc
10002f05:	68 00 00 00 00       	push   0x0	10002f06: R_386_32	currName
10002f0a:	e8 fc ff ff ff       	call   10002f0b <firstRun()+0x8c8>	10002f0b: R_386_PC32	strlen
10002f0f:	83 c4 10             	add    esp,0x10
10002f12:	48                   	dec    eax
10002f13:	c6 80 00 00 00 00 00 	mov    BYTE PTR [eax+0x0],0x0	10002f15: R_386_32	currName
10002f1a:	83 7d f4 01          	cmp    DWORD PTR [ebp-0xc],0x1
10002f1e:	75 5c                	jne    10002f7c <firstRun()+0x939>
10002f20:	83 ec 0c             	sub    esp,0xc
10002f23:	68 00 00 00 00       	push   0x0	10002f24: R_386_32	currComp
10002f28:	e8 fc ff ff ff       	call   10002f29 <firstRun()+0x8e6>	10002f29: R_386_PC32	strlen
10002f2d:	83 c4 10             	add    esp,0x10
10002f30:	85 c0                	test   eax,eax
10002f32:	74 48                	je     10002f7c <firstRun()+0x939>
10002f34:	83 ec 0c             	sub    esp,0xc
10002f37:	68 00 00 00 00       	push   0x0	10002f38: R_386_32	currComp
10002f3c:	e8 fc ff ff ff       	call   10002f3d <firstRun()+0x8fa>	10002f3d: R_386_PC32	strlen
10002f41:	83 c4 10             	add    esp,0x10
10002f44:	48                   	dec    eax
10002f45:	c6 80 00 00 00 00 00 	mov    BYTE PTR [eax+0x0],0x0	10002f47: R_386_32	currComp
10002f4c:	eb 2e                	jmp    10002f7c <firstRun()+0x939>
10002f4e:	a0 00 00 00 00       	mov    al,ds:0x0	10002f4f: R_386_32	installKey
10002f53:	3c 7f                	cmp    al,0x7f
10002f55:	0f 94 c0             	sete   al
10002f58:	84 c0                	test   al,al
10002f5a:	74 20                	je     10002f7c <firstRun()+0x939>
10002f5c:	ff 4d f4             	dec    DWORD PTR [ebp-0xc]
10002f5f:	83 7d f4 ff          	cmp    DWORD PTR [ebp-0xc],0xffffffff
10002f63:	75 07                	jne    10002f6c <firstRun()+0x929>
10002f65:	c7 45 f4 02 00 00 00 	mov    DWORD PTR [ebp-0xc],0x2
10002f6c:	83 ec 0c             	sub    esp,0xc
10002f6f:	68 2c 01 00 00       	push   0x12c
10002f74:	e8 fc ff ff ff       	call   10002f75 <firstRun()+0x932>	10002f75: R_386_PC32	milliTenthSleep(unsigned int)
10002f79:	83 c4 10             	add    esp,0x10
10002f7c:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10002f7e: R_386_32	installKey
10002f83:	e9 22 f8 ff ff       	jmp    100027aa <firstRun()+0x167>
10002f88:	a1 00 00 00 00       	mov    eax,ds:0x0	10002f89: R_386_32	term
10002f8d:	83 ec 04             	sub    esp,0x4
10002f90:	6a 08                	push   0x8
10002f92:	6a 1a                	push   0x1a
10002f94:	50                   	push   eax
10002f95:	e8 fc ff ff ff       	call   10002f96 <firstRun()+0x953>	10002f96: R_386_PC32	VgaText::setCursor(int, int)
10002f9a:	83 c4 10             	add    esp,0x10
10002f9d:	a1 00 00 00 00       	mov    eax,ds:0x0	10002f9e: R_386_32	term
10002fa2:	83 ec 08             	sub    esp,0x8
10002fa5:	8d 95 78 ff ff ff    	lea    edx,[ebp-0x88]
10002fab:	52                   	push   edx
10002fac:	50                   	push   eax
10002fad:	e8 fc ff ff ff       	call   10002fae <firstRun()+0x96b>	10002fae: R_386_PC32	VgaText::puts(char const*)
10002fb2:	83 c4 10             	add    esp,0x10
10002fb5:	a1 00 00 00 00       	mov    eax,ds:0x0	10002fb6: R_386_32	term
10002fba:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
10002fbd:	83 c2 1a             	add    edx,0x1a
10002fc0:	83 ec 04             	sub    esp,0x4
10002fc3:	6a 08                	push   0x8
10002fc5:	52                   	push   edx
10002fc6:	50                   	push   eax
10002fc7:	e8 fc ff ff ff       	call   10002fc8 <firstRun()+0x985>	10002fc8: R_386_PC32	VgaText::setCursor(int, int)
10002fcc:	83 c4 10             	add    esp,0x10
10002fcf:	a1 00 00 00 00       	mov    eax,ds:0x0	10002fd0: R_386_32	term
10002fd4:	8d 8d 78 ff ff ff    	lea    ecx,[ebp-0x88]
10002fda:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
10002fdd:	01 ca                	add    edx,ecx
10002fdf:	8a 12                	mov    dl,BYTE PTR [edx]
10002fe1:	0f be d2             	movsx  edx,dl
10002fe4:	6a 00                	push   0x0
10002fe6:	6a 0f                	push   0xf
10002fe8:	52                   	push   edx
10002fe9:	50                   	push   eax
10002fea:	e8 fc ff ff ff       	call   10002feb <firstRun()+0x9a8>	10002feb: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
10002fef:	83 c4 10             	add    esp,0x10
10002ff2:	8a 45 83             	mov    al,BYTE PTR [ebp-0x7d]
10002ff5:	0f be c0             	movsx  eax,al
10002ff8:	8d 50 d0             	lea    edx,[eax-0x30]
10002ffb:	89 d0                	mov    eax,edx
10002ffd:	c1 e0 02             	shl    eax,0x2
10003000:	01 d0                	add    eax,edx
10003002:	01 c0                	add    eax,eax
10003004:	89 c2                	mov    edx,eax
10003006:	8a 45 84             	mov    al,BYTE PTR [ebp-0x7c]
10003009:	0f be c0             	movsx  eax,al
1000300c:	83 e8 30             	sub    eax,0x30
1000300f:	01 d0                	add    eax,edx
10003011:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
10003014:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
10003017:	b9 0c 00 00 00       	mov    ecx,0xc
1000301c:	99                   	cdq    
1000301d:	f7 f9                	idiv   ecx
1000301f:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
10003022:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
10003026:	75 07                	jne    1000302f <firstRun()+0x9ec>
10003028:	c7 45 ec 0c 00 00 00 	mov    DWORD PTR [ebp-0x14],0xc
1000302f:	8a 45 86             	mov    al,BYTE PTR [ebp-0x7a]
10003032:	0f be c0             	movsx  eax,al
10003035:	8d 50 d0             	lea    edx,[eax-0x30]
10003038:	89 d0                	mov    eax,edx
1000303a:	c1 e0 02             	shl    eax,0x2
1000303d:	01 d0                	add    eax,edx
1000303f:	01 c0                	add    eax,eax
10003041:	89 c2                	mov    edx,eax
10003043:	8a 45 87             	mov    al,BYTE PTR [ebp-0x79]
10003046:	0f be c0             	movsx  eax,al
10003049:	83 e8 30             	sub    eax,0x30
1000304c:	01 d0                	add    eax,edx
1000304e:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10003051:	83 ec 04             	sub    esp,0x4
10003054:	6a 10                	push   0x10
10003056:	6a 00                	push   0x0
10003058:	8d 85 66 ff ff ff    	lea    eax,[ebp-0x9a]
1000305e:	50                   	push   eax
1000305f:	e8 fc ff ff ff       	call   10003060 <firstRun()+0xa1d>	10003060: R_386_PC32	memset
10003064:	83 c4 10             	add    esp,0x10
10003067:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
1000306e:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10003071:	8d 50 01             	lea    edx,[eax+0x1]
10003074:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
10003077:	c6 84 05 66 ff ff ff 28 	mov    BYTE PTR [ebp+eax*1-0x9a],0x28
1000307f:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
10003082:	b8 67 66 66 66       	mov    eax,0x66666667
10003087:	f7 e9                	imul   ecx
10003089:	c1 fa 02             	sar    edx,0x2
1000308c:	89 c8                	mov    eax,ecx
1000308e:	c1 f8 1f             	sar    eax,0x1f
10003091:	29 c2                	sub    edx,eax
10003093:	89 d0                	mov    eax,edx
10003095:	8d 48 30             	lea    ecx,[eax+0x30]
10003098:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
1000309b:	8d 50 01             	lea    edx,[eax+0x1]
1000309e:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
100030a1:	88 ca                	mov    dl,cl
100030a3:	88 94 05 66 ff ff ff 	mov    BYTE PTR [ebp+eax*1-0x9a],dl
100030aa:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
100030ad:	b8 67 66 66 66       	mov    eax,0x66666667
100030b2:	f7 e9                	imul   ecx
100030b4:	c1 fa 02             	sar    edx,0x2
100030b7:	89 c8                	mov    eax,ecx
100030b9:	c1 f8 1f             	sar    eax,0x1f
100030bc:	29 c2                	sub    edx,eax
100030be:	89 d0                	mov    eax,edx
100030c0:	c1 e0 02             	shl    eax,0x2
100030c3:	01 d0                	add    eax,edx
100030c5:	01 c0                	add    eax,eax
100030c7:	29 c1                	sub    ecx,eax
100030c9:	89 ca                	mov    edx,ecx
100030cb:	88 d0                	mov    al,dl
100030cd:	8d 48 30             	lea    ecx,[eax+0x30]
100030d0:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
100030d3:	8d 50 01             	lea    edx,[eax+0x1]
100030d6:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
100030d9:	88 ca                	mov    dl,cl
100030db:	88 94 05 66 ff ff ff 	mov    BYTE PTR [ebp+eax*1-0x9a],dl
100030e2:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
100030e5:	8d 50 01             	lea    edx,[eax+0x1]
100030e8:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
100030eb:	c6 84 05 66 ff ff ff 3a 	mov    BYTE PTR [ebp+eax*1-0x9a],0x3a
100030f3:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
100030f6:	b8 67 66 66 66       	mov    eax,0x66666667
100030fb:	f7 e9                	imul   ecx
100030fd:	c1 fa 02             	sar    edx,0x2
10003100:	89 c8                	mov    eax,ecx
10003102:	c1 f8 1f             	sar    eax,0x1f
10003105:	29 c2                	sub    edx,eax
10003107:	89 d0                	mov    eax,edx
10003109:	8d 48 30             	lea    ecx,[eax+0x30]
1000310c:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
1000310f:	8d 50 01             	lea    edx,[eax+0x1]
10003112:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
10003115:	88 ca                	mov    dl,cl
10003117:	88 94 05 66 ff ff ff 	mov    BYTE PTR [ebp+eax*1-0x9a],dl
1000311e:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
10003121:	b8 67 66 66 66       	mov    eax,0x66666667
10003126:	f7 e9                	imul   ecx
10003128:	c1 fa 02             	sar    edx,0x2
1000312b:	89 c8                	mov    eax,ecx
1000312d:	c1 f8 1f             	sar    eax,0x1f
10003130:	29 c2                	sub    edx,eax
10003132:	89 d0                	mov    eax,edx
10003134:	c1 e0 02             	shl    eax,0x2
10003137:	01 d0                	add    eax,edx
10003139:	01 c0                	add    eax,eax
1000313b:	29 c1                	sub    ecx,eax
1000313d:	89 ca                	mov    edx,ecx
1000313f:	88 d0                	mov    al,dl
10003141:	8d 48 30             	lea    ecx,[eax+0x30]
10003144:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10003147:	8d 50 01             	lea    edx,[eax+0x1]
1000314a:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
1000314d:	88 ca                	mov    dl,cl
1000314f:	88 94 05 66 ff ff ff 	mov    BYTE PTR [ebp+eax*1-0x9a],dl
10003156:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10003159:	8d 50 01             	lea    edx,[eax+0x1]
1000315c:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
1000315f:	c6 84 05 66 ff ff ff 20 	mov    BYTE PTR [ebp+eax*1-0x9a],0x20
10003167:	83 7d e8 0b          	cmp    DWORD PTR [ebp-0x18],0xb
1000316b:	7e 04                	jle    10003171 <firstRun()+0xb2e>
1000316d:	b2 50                	mov    dl,0x50
1000316f:	eb 02                	jmp    10003173 <firstRun()+0xb30>
10003171:	b2 41                	mov    dl,0x41
10003173:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10003176:	8d 48 01             	lea    ecx,[eax+0x1]
10003179:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
1000317c:	88 94 05 66 ff ff ff 	mov    BYTE PTR [ebp+eax*1-0x9a],dl
10003183:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10003186:	8d 50 01             	lea    edx,[eax+0x1]
10003189:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
1000318c:	c6 84 05 66 ff ff ff 4d 	mov    BYTE PTR [ebp+eax*1-0x9a],0x4d
10003194:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10003197:	8d 50 01             	lea    edx,[eax+0x1]
1000319a:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
1000319d:	c6 84 05 66 ff ff ff 29 	mov    BYTE PTR [ebp+eax*1-0x9a],0x29
100031a5:	8b 1d 00 00 00 00    	mov    ebx,DWORD PTR ds:0x0	100031a7: R_386_32	term
100031ab:	83 ec 0c             	sub    esp,0xc
100031ae:	8d 85 78 ff ff ff    	lea    eax,[ebp-0x88]
100031b4:	50                   	push   eax
100031b5:	e8 fc ff ff ff       	call   100031b6 <firstRun()+0xb73>	100031b6: R_386_PC32	strlen
100031ba:	83 c4 10             	add    esp,0x10
100031bd:	83 c0 1e             	add    eax,0x1e
100031c0:	83 ec 04             	sub    esp,0x4
100031c3:	6a 08                	push   0x8
100031c5:	50                   	push   eax
100031c6:	53                   	push   ebx
100031c7:	e8 fc ff ff ff       	call   100031c8 <firstRun()+0xb85>	100031c8: R_386_PC32	VgaText::setCursor(int, int)
100031cc:	83 c4 10             	add    esp,0x10
100031cf:	a1 00 00 00 00       	mov    eax,ds:0x0	100031d0: R_386_32	term
100031d4:	83 ec 08             	sub    esp,0x8
100031d7:	8d 95 66 ff ff ff    	lea    edx,[ebp-0x9a]
100031dd:	52                   	push   edx
100031de:	50                   	push   eax
100031df:	e8 fc ff ff ff       	call   100031e0 <firstRun()+0xb9d>	100031e0: R_386_PC32	VgaText::puts(char const*)
100031e4:	83 c4 10             	add    esp,0x10
100031e7:	a1 00 00 00 00       	mov    eax,ds:0x0	100031e8: R_386_32	term
100031ec:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
100031ef:	83 c2 1a             	add    edx,0x1a
100031f2:	83 ec 04             	sub    esp,0x4
100031f5:	6a 08                	push   0x8
100031f7:	52                   	push   edx
100031f8:	50                   	push   eax
100031f9:	e8 fc ff ff ff       	call   100031fa <firstRun()+0xbb7>	100031fa: R_386_PC32	VgaText::setCursor(int, int)
100031fe:	83 c4 10             	add    esp,0x10
10003201:	a0 00 00 00 00       	mov    al,ds:0x0	10003202: R_386_32	installKey
10003206:	84 c0                	test   al,al
10003208:	0f 94 c0             	sete   al
1000320b:	84 c0                	test   al,al
1000320d:	74 02                	je     10003211 <firstRun()+0xbce>
1000320f:	eb f0                	jmp    10003201 <firstRun()+0xbbe>
10003211:	a1 00 00 00 00       	mov    eax,ds:0x0	10003212: R_386_32	term
10003216:	05 82 00 00 00       	add    eax,0x82
1000321b:	83 ec 04             	sub    esp,0x4
1000321e:	6a 10                	push   0x10
10003220:	6a 00                	push   0x0
10003222:	50                   	push   eax
10003223:	e8 fc ff ff ff       	call   10003224 <firstRun()+0xbe1>	10003224: R_386_PC32	memset
10003228:	83 c4 10             	add    esp,0x10
1000322b:	a1 00 00 00 00       	mov    eax,ds:0x0	1000322c: R_386_32	term
10003230:	05 02 01 00 00       	add    eax,0x102
10003235:	83 ec 04             	sub    esp,0x4
10003238:	6a 10                	push   0x10
1000323a:	6a 00                	push   0x0
1000323c:	50                   	push   eax
1000323d:	e8 fc ff ff ff       	call   1000323e <firstRun()+0xbfb>	1000323e: R_386_PC32	memset
10003242:	83 c4 10             	add    esp,0x10
10003245:	a0 00 00 00 00       	mov    al,ds:0x0	10003246: R_386_32	installKey
1000324a:	3c 03                	cmp    al,0x3
1000324c:	74 09                	je     10003257 <firstRun()+0xc14>
1000324e:	a0 00 00 00 00       	mov    al,ds:0x0	1000324f: R_386_32	installKey
10003253:	3c 08                	cmp    al,0x8
10003255:	75 04                	jne    1000325b <firstRun()+0xc18>
10003257:	b0 01                	mov    al,0x1
10003259:	eb 02                	jmp    1000325d <firstRun()+0xc1a>
1000325b:	b0 00                	mov    al,0x0
1000325d:	84 c0                	test   al,al
1000325f:	74 58                	je     100032b9 <firstRun()+0xc76>
10003261:	ff 4d f0             	dec    DWORD PTR [ebp-0x10]
10003264:	83 7d f0 ff          	cmp    DWORD PTR [ebp-0x10],0xffffffff
10003268:	75 16                	jne    10003280 <firstRun()+0xc3d>
1000326a:	83 ec 0c             	sub    esp,0xc
1000326d:	8d 85 78 ff ff ff    	lea    eax,[ebp-0x88]
10003273:	50                   	push   eax
10003274:	e8 fc ff ff ff       	call   10003275 <firstRun()+0xc32>	10003275: R_386_PC32	strlen
10003279:	83 c4 10             	add    esp,0x10
1000327c:	48                   	dec    eax
1000327d:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10003280:	8d 95 78 ff ff ff    	lea    edx,[ebp-0x88]
10003286:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10003289:	01 d0                	add    eax,edx
1000328b:	8a 00                	mov    al,BYTE PTR [eax]
1000328d:	3c 20                	cmp    al,0x20
1000328f:	74 d0                	je     10003261 <firstRun()+0xc1e>
10003291:	8d 95 78 ff ff ff    	lea    edx,[ebp-0x88]
10003297:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
1000329a:	01 d0                	add    eax,edx
1000329c:	8a 00                	mov    al,BYTE PTR [eax]
1000329e:	3c 2f                	cmp    al,0x2f
100032a0:	74 bf                	je     10003261 <firstRun()+0xc1e>
100032a2:	8d 95 78 ff ff ff    	lea    edx,[ebp-0x88]
100032a8:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100032ab:	01 d0                	add    eax,edx
100032ad:	8a 00                	mov    al,BYTE PTR [eax]
100032af:	3c 3a                	cmp    al,0x3a
100032b1:	0f 85 32 04 00 00    	jne    100036e9 <firstRun()+0x10a6>
100032b7:	eb a8                	jmp    10003261 <firstRun()+0xc1e>
100032b9:	a0 00 00 00 00       	mov    al,ds:0x0	100032ba: R_386_32	installKey
100032be:	3c 2f                	cmp    al,0x2f
100032c0:	7e 09                	jle    100032cb <firstRun()+0xc88>
100032c2:	a0 00 00 00 00       	mov    al,ds:0x0	100032c3: R_386_32	installKey
100032c7:	3c 39                	cmp    al,0x39
100032c9:	7e 12                	jle    100032dd <firstRun()+0xc9a>
100032cb:	a0 00 00 00 00       	mov    al,ds:0x0	100032cc: R_386_32	installKey
100032d0:	3c 20                	cmp    al,0x20
100032d2:	74 09                	je     100032dd <firstRun()+0xc9a>
100032d4:	a0 00 00 00 00       	mov    al,ds:0x0	100032d5: R_386_32	installKey
100032d9:	3c 04                	cmp    al,0x4
100032db:	75 04                	jne    100032e1 <firstRun()+0xc9e>
100032dd:	b0 01                	mov    al,0x1
100032df:	eb 02                	jmp    100032e3 <firstRun()+0xca0>
100032e1:	b0 00                	mov    al,0x0
100032e3:	84 c0                	test   al,al
100032e5:	0f 84 cf 01 00 00    	je     100034ba <firstRun()+0xe77>
100032eb:	a0 00 00 00 00       	mov    al,ds:0x0	100032ec: R_386_32	installKey
100032f0:	3c 2f                	cmp    al,0x2f
100032f2:	7e 0d                	jle    10003301 <firstRun()+0xcbe>
100032f4:	a0 00 00 00 00       	mov    al,ds:0x0	100032f5: R_386_32	installKey
100032f9:	3c 39                	cmp    al,0x39
100032fb:	7f 04                	jg     10003301 <firstRun()+0xcbe>
100032fd:	b0 01                	mov    al,0x1
100032ff:	eb 02                	jmp    10003303 <firstRun()+0xcc0>
10003301:	b0 00                	mov    al,0x0
10003303:	84 c0                	test   al,al
10003305:	0f 84 51 01 00 00    	je     1000345c <firstRun()+0xe19>
1000330b:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
1000330f:	75 0d                	jne    1000331e <firstRun()+0xcdb>
10003311:	a0 00 00 00 00       	mov    al,ds:0x0	10003312: R_386_32	installKey
10003316:	3c 33                	cmp    al,0x33
10003318:	7e 04                	jle    1000331e <firstRun()+0xcdb>
1000331a:	b0 01                	mov    al,0x1
1000331c:	eb 02                	jmp    10003320 <firstRun()+0xcdd>
1000331e:	b0 00                	mov    al,0x0
10003320:	84 c0                	test   al,al
10003322:	74 28                	je     1000334c <firstRun()+0xd09>
10003324:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10003327:	8d 50 01             	lea    edx,[eax+0x1]
1000332a:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
1000332d:	c6 84 05 78 ff ff ff 30 	mov    BYTE PTR [ebp+eax*1-0x88],0x30
10003335:	a0 00 00 00 00       	mov    al,ds:0x0	10003336: R_386_32	installKey
1000333a:	8d 8d 78 ff ff ff    	lea    ecx,[ebp-0x88]
10003340:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
10003343:	01 ca                	add    edx,ecx
10003345:	88 02                	mov    BYTE PTR [edx],al
10003347:	e9 10 01 00 00       	jmp    1000345c <firstRun()+0xe19>
1000334c:	83 7d f0 03          	cmp    DWORD PTR [ebp-0x10],0x3
10003350:	75 0d                	jne    1000335f <firstRun()+0xd1c>
10003352:	a0 00 00 00 00       	mov    al,ds:0x0	10003353: R_386_32	installKey
10003357:	3c 31                	cmp    al,0x31
10003359:	7e 04                	jle    1000335f <firstRun()+0xd1c>
1000335b:	b0 01                	mov    al,0x1
1000335d:	eb 02                	jmp    10003361 <firstRun()+0xd1e>
1000335f:	b0 00                	mov    al,0x0
10003361:	84 c0                	test   al,al
10003363:	74 28                	je     1000338d <firstRun()+0xd4a>
10003365:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10003368:	8d 50 01             	lea    edx,[eax+0x1]
1000336b:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
1000336e:	c6 84 05 78 ff ff ff 30 	mov    BYTE PTR [ebp+eax*1-0x88],0x30
10003376:	a0 00 00 00 00       	mov    al,ds:0x0	10003377: R_386_32	installKey
1000337b:	8d 8d 78 ff ff ff    	lea    ecx,[ebp-0x88]
10003381:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
10003384:	01 ca                	add    edx,ecx
10003386:	88 02                	mov    BYTE PTR [edx],al
10003388:	e9 cf 00 00 00       	jmp    1000345c <firstRun()+0xe19>
1000338d:	83 7d f0 0b          	cmp    DWORD PTR [ebp-0x10],0xb
10003391:	75 0d                	jne    100033a0 <firstRun()+0xd5d>
10003393:	a0 00 00 00 00       	mov    al,ds:0x0	10003394: R_386_32	installKey
10003398:	3c 32                	cmp    al,0x32
1000339a:	7e 04                	jle    100033a0 <firstRun()+0xd5d>
1000339c:	b0 01                	mov    al,0x1
1000339e:	eb 02                	jmp    100033a2 <firstRun()+0xd5f>
100033a0:	b0 00                	mov    al,0x0
100033a2:	84 c0                	test   al,al
100033a4:	74 28                	je     100033ce <firstRun()+0xd8b>
100033a6:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100033a9:	8d 50 01             	lea    edx,[eax+0x1]
100033ac:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
100033af:	c6 84 05 78 ff ff ff 30 	mov    BYTE PTR [ebp+eax*1-0x88],0x30
100033b7:	a0 00 00 00 00       	mov    al,ds:0x0	100033b8: R_386_32	installKey
100033bc:	8d 8d 78 ff ff ff    	lea    ecx,[ebp-0x88]
100033c2:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
100033c5:	01 ca                	add    edx,ecx
100033c7:	88 02                	mov    BYTE PTR [edx],al
100033c9:	e9 8e 00 00 00       	jmp    1000345c <firstRun()+0xe19>
100033ce:	83 7d f0 0e          	cmp    DWORD PTR [ebp-0x10],0xe
100033d2:	75 0d                	jne    100033e1 <firstRun()+0xd9e>
100033d4:	a0 00 00 00 00       	mov    al,ds:0x0	100033d5: R_386_32	installKey
100033d9:	3c 35                	cmp    al,0x35
100033db:	7e 04                	jle    100033e1 <firstRun()+0xd9e>
100033dd:	b0 01                	mov    al,0x1
100033df:	eb 02                	jmp    100033e3 <firstRun()+0xda0>
100033e1:	b0 00                	mov    al,0x0
100033e3:	84 c0                	test   al,al
100033e5:	74 25                	je     1000340c <firstRun()+0xdc9>
100033e7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100033ea:	8d 50 01             	lea    edx,[eax+0x1]
100033ed:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
100033f0:	c6 84 05 78 ff ff ff 30 	mov    BYTE PTR [ebp+eax*1-0x88],0x30
100033f8:	a0 00 00 00 00       	mov    al,ds:0x0	100033f9: R_386_32	installKey
100033fd:	8d 8d 78 ff ff ff    	lea    ecx,[ebp-0x88]
10003403:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
10003406:	01 ca                	add    edx,ecx
10003408:	88 02                	mov    BYTE PTR [edx],al
1000340a:	eb 50                	jmp    1000345c <firstRun()+0xe19>
1000340c:	83 7d f0 11          	cmp    DWORD PTR [ebp-0x10],0x11
10003410:	75 0d                	jne    1000341f <firstRun()+0xddc>
10003412:	a0 00 00 00 00       	mov    al,ds:0x0	10003413: R_386_32	installKey
10003417:	3c 35                	cmp    al,0x35
10003419:	7e 04                	jle    1000341f <firstRun()+0xddc>
1000341b:	b0 01                	mov    al,0x1
1000341d:	eb 02                	jmp    10003421 <firstRun()+0xdde>
1000341f:	b0 00                	mov    al,0x0
10003421:	84 c0                	test   al,al
10003423:	74 25                	je     1000344a <firstRun()+0xe07>
10003425:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10003428:	8d 50 01             	lea    edx,[eax+0x1]
1000342b:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
1000342e:	c6 84 05 78 ff ff ff 30 	mov    BYTE PTR [ebp+eax*1-0x88],0x30
10003436:	a0 00 00 00 00       	mov    al,ds:0x0	10003437: R_386_32	installKey
1000343b:	8d 8d 78 ff ff ff    	lea    ecx,[ebp-0x88]
10003441:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
10003444:	01 ca                	add    edx,ecx
10003446:	88 02                	mov    BYTE PTR [edx],al
10003448:	eb 12                	jmp    1000345c <firstRun()+0xe19>
1000344a:	a0 00 00 00 00       	mov    al,ds:0x0	1000344b: R_386_32	installKey
1000344f:	8d 8d 78 ff ff ff    	lea    ecx,[ebp-0x88]
10003455:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
10003458:	01 ca                	add    edx,ecx
1000345a:	88 02                	mov    BYTE PTR [edx],al
1000345c:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
1000345f:	83 ec 0c             	sub    esp,0xc
10003462:	8d 85 78 ff ff ff    	lea    eax,[ebp-0x88]
10003468:	50                   	push   eax
10003469:	e8 fc ff ff ff       	call   1000346a <firstRun()+0xe27>	1000346a: R_386_PC32	strlen
1000346e:	83 c4 10             	add    esp,0x10
10003471:	89 c2                	mov    edx,eax
10003473:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10003476:	39 c2                	cmp    edx,eax
10003478:	77 07                	ja     10003481 <firstRun()+0xe3e>
1000347a:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
10003481:	8d 95 78 ff ff ff    	lea    edx,[ebp-0x88]
10003487:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
1000348a:	01 d0                	add    eax,edx
1000348c:	8a 00                	mov    al,BYTE PTR [eax]
1000348e:	3c 20                	cmp    al,0x20
10003490:	74 ca                	je     1000345c <firstRun()+0xe19>
10003492:	8d 95 78 ff ff ff    	lea    edx,[ebp-0x88]
10003498:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
1000349b:	01 d0                	add    eax,edx
1000349d:	8a 00                	mov    al,BYTE PTR [eax]
1000349f:	3c 2f                	cmp    al,0x2f
100034a1:	74 b9                	je     1000345c <firstRun()+0xe19>
100034a3:	8d 95 78 ff ff ff    	lea    edx,[ebp-0x88]
100034a9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100034ac:	01 d0                	add    eax,edx
100034ae:	8a 00                	mov    al,BYTE PTR [eax]
100034b0:	3c 3a                	cmp    al,0x3a
100034b2:	0f 85 31 02 00 00    	jne    100036e9 <firstRun()+0x10a6>
100034b8:	eb a2                	jmp    1000345c <firstRun()+0xe19>
100034ba:	a0 00 00 00 00       	mov    al,ds:0x0	100034bb: R_386_32	installKey
100034bf:	3c 0a                	cmp    al,0xa
100034c1:	0f 94 c0             	sete   al
100034c4:	84 c0                	test   al,al
100034c6:	0f 84 1d 02 00 00    	je     100036e9 <firstRun()+0x10a6>
100034cc:	8a 85 78 ff ff ff    	mov    al,BYTE PTR [ebp-0x88]
100034d2:	0f be c0             	movsx  eax,al
100034d5:	8d 50 d0             	lea    edx,[eax-0x30]
100034d8:	89 d0                	mov    eax,edx
100034da:	c1 e0 02             	shl    eax,0x2
100034dd:	01 d0                	add    eax,edx
100034df:	01 c0                	add    eax,eax
100034e1:	89 c2                	mov    edx,eax
100034e3:	8a 85 79 ff ff ff    	mov    al,BYTE PTR [ebp-0x87]
100034e9:	0f be c0             	movsx  eax,al
100034ec:	83 e8 30             	sub    eax,0x30
100034ef:	01 d0                	add    eax,edx
100034f1:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
100034f4:	8a 85 7b ff ff ff    	mov    al,BYTE PTR [ebp-0x85]
100034fa:	0f be c0             	movsx  eax,al
100034fd:	8d 50 d0             	lea    edx,[eax-0x30]
10003500:	89 d0                	mov    eax,edx
10003502:	c1 e0 02             	shl    eax,0x2
10003505:	01 d0                	add    eax,edx
10003507:	01 c0                	add    eax,eax
10003509:	89 c2                	mov    edx,eax
1000350b:	8a 85 7c ff ff ff    	mov    al,BYTE PTR [ebp-0x84]
10003511:	0f be c0             	movsx  eax,al
10003514:	83 e8 30             	sub    eax,0x30
10003517:	01 d0                	add    eax,edx
10003519:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
1000351c:	8a 85 7e ff ff ff    	mov    al,BYTE PTR [ebp-0x82]
10003522:	0f be c0             	movsx  eax,al
10003525:	8d 50 d0             	lea    edx,[eax-0x30]
10003528:	89 d0                	mov    eax,edx
1000352a:	c1 e0 02             	shl    eax,0x2
1000352d:	01 d0                	add    eax,edx
1000352f:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10003536:	01 d0                	add    eax,edx
10003538:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
1000353f:	01 d0                	add    eax,edx
10003541:	c1 e0 03             	shl    eax,0x3
10003544:	89 c1                	mov    ecx,eax
10003546:	8a 85 7f ff ff ff    	mov    al,BYTE PTR [ebp-0x81]
1000354c:	0f be c0             	movsx  eax,al
1000354f:	8d 50 d0             	lea    edx,[eax-0x30]
10003552:	89 d0                	mov    eax,edx
10003554:	c1 e0 02             	shl    eax,0x2
10003557:	01 d0                	add    eax,edx
10003559:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10003560:	01 d0                	add    eax,edx
10003562:	c1 e0 02             	shl    eax,0x2
10003565:	01 c1                	add    ecx,eax
10003567:	8a 45 80             	mov    al,BYTE PTR [ebp-0x80]
1000356a:	0f be c0             	movsx  eax,al
1000356d:	8d 50 d0             	lea    edx,[eax-0x30]
10003570:	89 d0                	mov    eax,edx
10003572:	c1 e0 02             	shl    eax,0x2
10003575:	01 d0                	add    eax,edx
10003577:	01 c0                	add    eax,eax
10003579:	8d 14 01             	lea    edx,[ecx+eax*1]
1000357c:	8a 45 81             	mov    al,BYTE PTR [ebp-0x7f]
1000357f:	0f be c0             	movsx  eax,al
10003582:	83 e8 30             	sub    eax,0x30
10003585:	01 d0                	add    eax,edx
10003587:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
1000358a:	8a 45 83             	mov    al,BYTE PTR [ebp-0x7d]
1000358d:	0f be c0             	movsx  eax,al
10003590:	8d 50 d0             	lea    edx,[eax-0x30]
10003593:	89 d0                	mov    eax,edx
10003595:	c1 e0 02             	shl    eax,0x2
10003598:	01 d0                	add    eax,edx
1000359a:	01 c0                	add    eax,eax
1000359c:	89 c2                	mov    edx,eax
1000359e:	8a 45 84             	mov    al,BYTE PTR [ebp-0x7c]
100035a1:	0f be c0             	movsx  eax,al
100035a4:	83 e8 30             	sub    eax,0x30
100035a7:	01 d0                	add    eax,edx
100035a9:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
100035ac:	8a 45 86             	mov    al,BYTE PTR [ebp-0x7a]
100035af:	0f be c0             	movsx  eax,al
100035b2:	8d 50 d0             	lea    edx,[eax-0x30]
100035b5:	89 d0                	mov    eax,edx
100035b7:	c1 e0 02             	shl    eax,0x2
100035ba:	01 d0                	add    eax,edx
100035bc:	01 c0                	add    eax,eax
100035be:	89 c2                	mov    edx,eax
100035c0:	8a 45 87             	mov    al,BYTE PTR [ebp-0x79]
100035c3:	0f be c0             	movsx  eax,al
100035c6:	83 e8 30             	sub    eax,0x30
100035c9:	01 d0                	add    eax,edx
100035cb:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
100035ce:	8a 45 89             	mov    al,BYTE PTR [ebp-0x77]
100035d1:	0f be c0             	movsx  eax,al
100035d4:	8d 50 d0             	lea    edx,[eax-0x30]
100035d7:	89 d0                	mov    eax,edx
100035d9:	c1 e0 02             	shl    eax,0x2
100035dc:	01 d0                	add    eax,edx
100035de:	01 c0                	add    eax,eax
100035e0:	89 c2                	mov    edx,eax
100035e2:	8a 45 8a             	mov    al,BYTE PTR [ebp-0x76]
100035e5:	0f be c0             	movsx  eax,al
100035e8:	83 e8 30             	sub    eax,0x30
100035eb:	01 d0                	add    eax,edx
100035ed:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
100035f0:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
100035f3:	83 e0 03             	and    eax,0x3
100035f6:	85 c0                	test   eax,eax
100035f8:	75 1f                	jne    10003619 <firstRun()+0xfd6>
100035fa:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
100035fd:	b9 19 00 00 00       	mov    ecx,0x19
10003602:	99                   	cdq    
10003603:	f7 f9                	idiv   ecx
10003605:	89 d0                	mov    eax,edx
10003607:	85 c0                	test   eax,eax
10003609:	75 0a                	jne    10003615 <firstRun()+0xfd2>
1000360b:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
1000360e:	83 e0 0f             	and    eax,0xf
10003611:	85 c0                	test   eax,eax
10003613:	75 04                	jne    10003619 <firstRun()+0xfd6>
10003615:	b0 01                	mov    al,0x1
10003617:	eb 02                	jmp    1000361b <firstRun()+0xfd8>
10003619:	b0 00                	mov    al,0x0
1000361b:	88 45 c7             	mov    BYTE PTR [ebp-0x39],al
1000361e:	83 7d dc 1f          	cmp    DWORD PTR [ebp-0x24],0x1f
10003622:	7e 0c                	jle    10003630 <firstRun()+0xfed>
10003624:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
1000362b:	e9 b9 00 00 00       	jmp    100036e9 <firstRun()+0x10a6>
10003630:	83 7d dc 1e          	cmp    DWORD PTR [ebp-0x24],0x1e
10003634:	7e 2a                	jle    10003660 <firstRun()+0x101d>
10003636:	83 7d d8 02          	cmp    DWORD PTR [ebp-0x28],0x2
1000363a:	74 18                	je     10003654 <firstRun()+0x1011>
1000363c:	83 7d d8 04          	cmp    DWORD PTR [ebp-0x28],0x4
10003640:	74 12                	je     10003654 <firstRun()+0x1011>
10003642:	83 7d d8 06          	cmp    DWORD PTR [ebp-0x28],0x6
10003646:	74 0c                	je     10003654 <firstRun()+0x1011>
10003648:	83 7d d8 09          	cmp    DWORD PTR [ebp-0x28],0x9
1000364c:	74 06                	je     10003654 <firstRun()+0x1011>
1000364e:	83 7d d8 0b          	cmp    DWORD PTR [ebp-0x28],0xb
10003652:	75 0c                	jne    10003660 <firstRun()+0x101d>
10003654:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
1000365b:	e9 89 00 00 00       	jmp    100036e9 <firstRun()+0x10a6>
10003660:	83 7d dc 1d          	cmp    DWORD PTR [ebp-0x24],0x1d
10003664:	75 19                	jne    1000367f <firstRun()+0x103c>
10003666:	83 7d d8 02          	cmp    DWORD PTR [ebp-0x28],0x2
1000366a:	75 13                	jne    1000367f <firstRun()+0x103c>
1000366c:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
1000366f:	83 f0 01             	xor    eax,0x1
10003672:	84 c0                	test   al,al
10003674:	74 09                	je     1000367f <firstRun()+0x103c>
10003676:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
1000367d:	eb 6a                	jmp    100036e9 <firstRun()+0x10a6>
1000367f:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
10003683:	75 09                	jne    1000368e <firstRun()+0x104b>
10003685:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
1000368c:	eb 5b                	jmp    100036e9 <firstRun()+0x10a6>
1000368e:	83 7d d8 0c          	cmp    DWORD PTR [ebp-0x28],0xc
10003692:	7f 06                	jg     1000369a <firstRun()+0x1057>
10003694:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
10003698:	75 09                	jne    100036a3 <firstRun()+0x1060>
1000369a:	c7 45 f0 03 00 00 00 	mov    DWORD PTR [ebp-0x10],0x3
100036a1:	eb 46                	jmp    100036e9 <firstRun()+0x10a6>
100036a3:	81 7d d4 b7 0b 00 00 	cmp    DWORD PTR [ebp-0x2c],0xbb7
100036aa:	7f 09                	jg     100036b5 <firstRun()+0x1072>
100036ac:	81 7d d4 b1 07 00 00 	cmp    DWORD PTR [ebp-0x2c],0x7b1
100036b3:	7f 09                	jg     100036be <firstRun()+0x107b>
100036b5:	c7 45 f0 06 00 00 00 	mov    DWORD PTR [ebp-0x10],0x6
100036bc:	eb 2b                	jmp    100036e9 <firstRun()+0x10a6>
100036be:	83 7d d0 17          	cmp    DWORD PTR [ebp-0x30],0x17
100036c2:	7e 09                	jle    100036cd <firstRun()+0x108a>
100036c4:	c7 45 f0 0b 00 00 00 	mov    DWORD PTR [ebp-0x10],0xb
100036cb:	eb 1c                	jmp    100036e9 <firstRun()+0x10a6>
100036cd:	83 7d cc 3b          	cmp    DWORD PTR [ebp-0x34],0x3b
100036d1:	7e 09                	jle    100036dc <firstRun()+0x1099>
100036d3:	c7 45 f0 0e 00 00 00 	mov    DWORD PTR [ebp-0x10],0xe
100036da:	eb 0d                	jmp    100036e9 <firstRun()+0x10a6>
100036dc:	83 7d c8 3b          	cmp    DWORD PTR [ebp-0x38],0x3b
100036e0:	7e 23                	jle    10003705 <firstRun()+0x10c2>
100036e2:	c7 45 f0 11 00 00 00 	mov    DWORD PTR [ebp-0x10],0x11
100036e9:	83 ec 0c             	sub    esp,0xc
100036ec:	68 4c 04 00 00       	push   0x44c
100036f1:	e8 fc ff ff ff       	call   100036f2 <firstRun()+0x10af>	100036f2: R_386_PC32	milliTenthSleep(unsigned int)
100036f6:	83 c4 10             	add    esp,0x10
100036f9:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100036fb: R_386_32	installKey
10003700:	e9 83 f8 ff ff       	jmp    10002f88 <firstRun()+0x945>
10003705:	90                   	nop
10003706:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10003708: R_386_32	installKey
1000370d:	83 ec 0c             	sub    esp,0xc
10003710:	68 84 03 00 00       	push   0x384
10003715:	e8 fc ff ff ff       	call   10003716 <firstRun()+0x10d3>	10003716: R_386_PC32	milliTenthSleep(unsigned int)
1000371a:	83 c4 10             	add    esp,0x10
1000371d:	e8 fc ff ff ff       	call   1000371e <firstRun()+0x10db>	1000371e: R_386_PC32	drawBootScreen()
10003722:	83 ec 0c             	sub    esp,0xc
10003725:	68 18 2e 00 00       	push   0x2e18
1000372a:	e8 fc ff ff ff       	call   1000372b <firstRun()+0x10e8>	1000372b: R_386_PC32	milliTenthSleep(unsigned int)
1000372f:	83 c4 10             	add    esp,0x10
10003732:	83 ec 08             	sub    esp,0x8
10003735:	68 8a 47 00 10       	push   0x1000478a	10003736: R_386_32	.text
1000373a:	68 00 00 00 00       	push   0x0	1000373b: R_386_32	pkeybuf
1000373f:	e8 fc ff ff ff       	call   10003740 <firstRun()+0x10fd>	10003740: R_386_PC32	strcpy
10003744:	83 c4 10             	add    esp,0x10
10003747:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
1000374e:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10003750: R_386_32	installKey
10003755:	e8 fc ff ff ff       	call   10003756 <firstRun()+0x1113>	10003756: R_386_PC32	drawBootScreen()
1000375a:	83 ec 0c             	sub    esp,0xc
1000375d:	68 9b 47 00 10       	push   0x1000479b	1000375e: R_386_32	.text
10003762:	6a 0e                	push   0xe
10003764:	6a 32                	push   0x32
10003766:	6a 02                	push   0x2
10003768:	6a 16                	push   0x16
1000376a:	e8 fc ff ff ff       	call   1000376b <firstRun()+0x1128>	1000376b: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
1000376f:	83 c4 20             	add    esp,0x20
10003772:	a1 00 00 00 00       	mov    eax,ds:0x0	10003773: R_386_32	term
10003777:	83 ec 04             	sub    esp,0x4
1000377a:	6a 05                	push   0x5
1000377c:	6a 18                	push   0x18
1000377e:	50                   	push   eax
1000377f:	e8 fc ff ff ff       	call   10003780 <firstRun()+0x113d>	10003780: R_386_PC32	VgaText::setCursor(int, int)
10003784:	83 c4 10             	add    esp,0x10
10003787:	a1 00 00 00 00       	mov    eax,ds:0x0	10003788: R_386_32	term
1000378c:	83 ec 08             	sub    esp,0x8
1000378f:	68 a8 47 00 10       	push   0x100047a8	10003790: R_386_32	.text
10003794:	50                   	push   eax
10003795:	e8 fc ff ff ff       	call   10003796 <firstRun()+0x1153>	10003796: R_386_PC32	VgaText::puts(char const*)
1000379a:	83 c4 10             	add    esp,0x10
1000379d:	a1 00 00 00 00       	mov    eax,ds:0x0	1000379e: R_386_32	term
100037a2:	83 ec 04             	sub    esp,0x4
100037a5:	6a 06                	push   0x6
100037a7:	6a 18                	push   0x18
100037a9:	50                   	push   eax
100037aa:	e8 fc ff ff ff       	call   100037ab <firstRun()+0x1168>	100037ab: R_386_PC32	VgaText::setCursor(int, int)
100037af:	83 c4 10             	add    esp,0x10
100037b2:	a1 00 00 00 00       	mov    eax,ds:0x0	100037b3: R_386_32	term
100037b7:	83 ec 08             	sub    esp,0x8
100037ba:	68 60 47 00 10       	push   0x10004760	100037bb: R_386_32	.text
100037bf:	50                   	push   eax
100037c0:	e8 fc ff ff ff       	call   100037c1 <firstRun()+0x117e>	100037c1: R_386_PC32	VgaText::puts(char const*)
100037c5:	83 c4 10             	add    esp,0x10
100037c8:	c6 05 10 00 00 00 00 	mov    BYTE PTR ds:0x10,0x0	100037ca: R_386_32	pkeybuf
100037cf:	c6 05 11 00 00 00 00 	mov    BYTE PTR ds:0x11,0x0	100037d1: R_386_32	pkeybuf
100037d6:	a1 00 00 00 00       	mov    eax,ds:0x0	100037d7: R_386_32	term
100037db:	83 ec 04             	sub    esp,0x4
100037de:	6a 08                	push   0x8
100037e0:	6a 1c                	push   0x1c
100037e2:	50                   	push   eax
100037e3:	e8 fc ff ff ff       	call   100037e4 <firstRun()+0x11a1>	100037e4: R_386_PC32	VgaText::setCursor(int, int)
100037e8:	83 c4 10             	add    esp,0x10
100037eb:	a1 00 00 00 00       	mov    eax,ds:0x0	100037ec: R_386_32	term
100037f0:	83 ec 08             	sub    esp,0x8
100037f3:	68 00 00 00 00       	push   0x0	100037f4: R_386_32	pkeybuf
100037f8:	50                   	push   eax
100037f9:	e8 fc ff ff ff       	call   100037fa <firstRun()+0x11b7>	100037fa: R_386_PC32	VgaText::puts(char const*)
100037fe:	83 c4 10             	add    esp,0x10
10003801:	a1 00 00 00 00       	mov    eax,ds:0x0	10003802: R_386_32	term
10003806:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
10003809:	83 c2 1c             	add    edx,0x1c
1000380c:	83 ec 04             	sub    esp,0x4
1000380f:	6a 08                	push   0x8
10003811:	52                   	push   edx
10003812:	50                   	push   eax
10003813:	e8 fc ff ff ff       	call   10003814 <firstRun()+0x11d1>	10003814: R_386_PC32	VgaText::setCursor(int, int)
10003818:	83 c4 10             	add    esp,0x10
1000381b:	a1 00 00 00 00       	mov    eax,ds:0x0	1000381c: R_386_32	term
10003820:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
10003823:	81 c2 00 00 00 00    	add    edx,0x0	10003825: R_386_32	pkeybuf
10003829:	8a 12                	mov    dl,BYTE PTR [edx]
1000382b:	0f be d2             	movsx  edx,dl
1000382e:	6a 00                	push   0x0
10003830:	6a 0f                	push   0xf
10003832:	52                   	push   edx
10003833:	50                   	push   eax
10003834:	e8 fc ff ff ff       	call   10003835 <firstRun()+0x11f2>	10003835: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
10003839:	83 c4 10             	add    esp,0x10
1000383c:	a1 00 00 00 00       	mov    eax,ds:0x0	1000383d: R_386_32	term
10003841:	83 ec 04             	sub    esp,0x4
10003844:	6a 08                	push   0x8
10003846:	6a 2c                	push   0x2c
10003848:	50                   	push   eax
10003849:	e8 fc ff ff ff       	call   1000384a <firstRun()+0x1207>	1000384a: R_386_PC32	VgaText::setCursor(int, int)
1000384e:	83 c4 10             	add    esp,0x10
10003851:	a1 00 00 00 00       	mov    eax,ds:0x0	10003852: R_386_32	term
10003856:	6a 0f                	push   0xf
10003858:	6a 0f                	push   0xf
1000385a:	6a 20                	push   0x20
1000385c:	50                   	push   eax
1000385d:	e8 fc ff ff ff       	call   1000385e <firstRun()+0x121b>	1000385e: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
10003862:	83 c4 10             	add    esp,0x10
10003865:	a1 00 00 00 00       	mov    eax,ds:0x0	10003866: R_386_32	term
1000386a:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
1000386d:	83 c2 1c             	add    edx,0x1c
10003870:	83 ec 04             	sub    esp,0x4
10003873:	6a 08                	push   0x8
10003875:	52                   	push   edx
10003876:	50                   	push   eax
10003877:	e8 fc ff ff ff       	call   10003878 <firstRun()+0x1235>	10003878: R_386_PC32	VgaText::setCursor(int, int)
1000387c:	83 c4 10             	add    esp,0x10
1000387f:	a0 00 00 00 00       	mov    al,ds:0x0	10003880: R_386_32	installKey
10003884:	84 c0                	test   al,al
10003886:	0f 94 c0             	sete   al
10003889:	84 c0                	test   al,al
1000388b:	74 02                	je     1000388f <firstRun()+0x124c>
1000388d:	eb f0                	jmp    1000387f <firstRun()+0x123c>
1000388f:	a1 00 00 00 00       	mov    eax,ds:0x0	10003890: R_386_32	term
10003894:	05 82 00 00 00       	add    eax,0x82
10003899:	83 ec 04             	sub    esp,0x4
1000389c:	6a 10                	push   0x10
1000389e:	6a 00                	push   0x0
100038a0:	50                   	push   eax
100038a1:	e8 fc ff ff ff       	call   100038a2 <firstRun()+0x125f>	100038a2: R_386_PC32	memset
100038a6:	83 c4 10             	add    esp,0x10
100038a9:	a1 00 00 00 00       	mov    eax,ds:0x0	100038aa: R_386_32	term
100038ae:	05 02 01 00 00       	add    eax,0x102
100038b3:	83 ec 04             	sub    esp,0x4
100038b6:	6a 10                	push   0x10
100038b8:	6a 00                	push   0x0
100038ba:	50                   	push   eax
100038bb:	e8 fc ff ff ff       	call   100038bc <firstRun()+0x1279>	100038bc: R_386_PC32	memset
100038c0:	83 c4 10             	add    esp,0x10
100038c3:	a0 00 00 00 00       	mov    al,ds:0x0	100038c4: R_386_32	installKey
100038c8:	3c 03                	cmp    al,0x3
100038ca:	74 09                	je     100038d5 <firstRun()+0x1292>
100038cc:	a0 00 00 00 00       	mov    al,ds:0x0	100038cd: R_386_32	installKey
100038d1:	3c 08                	cmp    al,0x8
100038d3:	75 04                	jne    100038d9 <firstRun()+0x1296>
100038d5:	b0 01                	mov    al,0x1
100038d7:	eb 02                	jmp    100038db <firstRun()+0x1298>
100038d9:	b0 00                	mov    al,0x0
100038db:	84 c0                	test   al,al
100038dd:	74 31                	je     10003910 <firstRun()+0x12cd>
100038df:	ff 4d f0             	dec    DWORD PTR [ebp-0x10]
100038e2:	83 7d f0 ff          	cmp    DWORD PTR [ebp-0x10],0xffffffff
100038e6:	75 14                	jne    100038fc <firstRun()+0x12b9>
100038e8:	83 ec 0c             	sub    esp,0xc
100038eb:	68 00 00 00 00       	push   0x0	100038ec: R_386_32	pkeybuf
100038f0:	e8 fc ff ff ff       	call   100038f1 <firstRun()+0x12ae>	100038f1: R_386_PC32	strlen
100038f5:	83 c4 10             	add    esp,0x10
100038f8:	48                   	dec    eax
100038f9:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
100038fc:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100038ff:	05 00 00 00 00       	add    eax,0x0	10003900: R_386_32	pkeybuf
10003904:	8a 00                	mov    al,BYTE PTR [eax]
10003906:	3c 2d                	cmp    al,0x2d
10003908:	0f 85 4f 03 00 00    	jne    10003c5d <firstRun()+0x161a>
1000390e:	eb cf                	jmp    100038df <firstRun()+0x129c>
10003910:	a0 00 00 00 00       	mov    al,ds:0x0	10003911: R_386_32	installKey
10003915:	3c 2f                	cmp    al,0x2f
10003917:	7e 09                	jle    10003922 <firstRun()+0x12df>
10003919:	a0 00 00 00 00       	mov    al,ds:0x0	1000391a: R_386_32	installKey
1000391e:	3c 39                	cmp    al,0x39
10003920:	7e 36                	jle    10003958 <firstRun()+0x1315>
10003922:	a0 00 00 00 00       	mov    al,ds:0x0	10003923: R_386_32	installKey
10003927:	3c 40                	cmp    al,0x40
10003929:	7e 09                	jle    10003934 <firstRun()+0x12f1>
1000392b:	a0 00 00 00 00       	mov    al,ds:0x0	1000392c: R_386_32	installKey
10003930:	3c 5a                	cmp    al,0x5a
10003932:	7e 24                	jle    10003958 <firstRun()+0x1315>
10003934:	a0 00 00 00 00       	mov    al,ds:0x0	10003935: R_386_32	installKey
10003939:	3c 60                	cmp    al,0x60
1000393b:	7e 09                	jle    10003946 <firstRun()+0x1303>
1000393d:	a0 00 00 00 00       	mov    al,ds:0x0	1000393e: R_386_32	installKey
10003942:	3c 7a                	cmp    al,0x7a
10003944:	7e 12                	jle    10003958 <firstRun()+0x1315>
10003946:	a0 00 00 00 00       	mov    al,ds:0x0	10003947: R_386_32	installKey
1000394b:	3c 20                	cmp    al,0x20
1000394d:	74 09                	je     10003958 <firstRun()+0x1315>
1000394f:	a0 00 00 00 00       	mov    al,ds:0x0	10003950: R_386_32	installKey
10003954:	3c 04                	cmp    al,0x4
10003956:	75 04                	jne    1000395c <firstRun()+0x1319>
10003958:	b0 01                	mov    al,0x1
1000395a:	eb 02                	jmp    1000395e <firstRun()+0x131b>
1000395c:	b0 00                	mov    al,0x0
1000395e:	84 c0                	test   al,al
10003960:	0f 84 a3 00 00 00    	je     10003a09 <firstRun()+0x13c6>
10003966:	a0 00 00 00 00       	mov    al,ds:0x0	10003967: R_386_32	installKey
1000396b:	3c 2f                	cmp    al,0x2f
1000396d:	7e 09                	jle    10003978 <firstRun()+0x1335>
1000396f:	a0 00 00 00 00       	mov    al,ds:0x0	10003970: R_386_32	installKey
10003974:	3c 39                	cmp    al,0x39
10003976:	7e 24                	jle    1000399c <firstRun()+0x1359>
10003978:	a0 00 00 00 00       	mov    al,ds:0x0	10003979: R_386_32	installKey
1000397d:	3c 40                	cmp    al,0x40
1000397f:	7e 09                	jle    1000398a <firstRun()+0x1347>
10003981:	a0 00 00 00 00       	mov    al,ds:0x0	10003982: R_386_32	installKey
10003986:	3c 5a                	cmp    al,0x5a
10003988:	7e 12                	jle    1000399c <firstRun()+0x1359>
1000398a:	a0 00 00 00 00       	mov    al,ds:0x0	1000398b: R_386_32	installKey
1000398f:	3c 60                	cmp    al,0x60
10003991:	7e 0d                	jle    100039a0 <firstRun()+0x135d>
10003993:	a0 00 00 00 00       	mov    al,ds:0x0	10003994: R_386_32	installKey
10003998:	3c 7a                	cmp    al,0x7a
1000399a:	7f 04                	jg     100039a0 <firstRun()+0x135d>
1000399c:	b0 01                	mov    al,0x1
1000399e:	eb 02                	jmp    100039a2 <firstRun()+0x135f>
100039a0:	b0 00                	mov    al,0x0
100039a2:	84 c0                	test   al,al
100039a4:	74 2c                	je     100039d2 <firstRun()+0x138f>
100039a6:	a0 00 00 00 00       	mov    al,ds:0x0	100039a7: R_386_32	installKey
100039ab:	3c 60                	cmp    al,0x60
100039ad:	7e 13                	jle    100039c2 <firstRun()+0x137f>
100039af:	a0 00 00 00 00       	mov    al,ds:0x0	100039b0: R_386_32	installKey
100039b4:	3c 7a                	cmp    al,0x7a
100039b6:	7f 0a                	jg     100039c2 <firstRun()+0x137f>
100039b8:	a0 00 00 00 00       	mov    al,ds:0x0	100039b9: R_386_32	installKey
100039bd:	83 e8 20             	sub    eax,0x20
100039c0:	eb 05                	jmp    100039c7 <firstRun()+0x1384>
100039c2:	a0 00 00 00 00       	mov    al,ds:0x0	100039c3: R_386_32	installKey
100039c7:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
100039ca:	81 c2 00 00 00 00    	add    edx,0x0	100039cc: R_386_32	pkeybuf
100039d0:	88 02                	mov    BYTE PTR [edx],al
100039d2:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
100039d5:	83 ec 0c             	sub    esp,0xc
100039d8:	68 00 00 00 00       	push   0x0	100039d9: R_386_32	pkeybuf
100039dd:	e8 fc ff ff ff       	call   100039de <firstRun()+0x139b>	100039de: R_386_PC32	strlen
100039e2:	83 c4 10             	add    esp,0x10
100039e5:	89 c2                	mov    edx,eax
100039e7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100039ea:	39 c2                	cmp    edx,eax
100039ec:	77 07                	ja     100039f5 <firstRun()+0x13b2>
100039ee:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
100039f5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100039f8:	05 00 00 00 00       	add    eax,0x0	100039f9: R_386_32	pkeybuf
100039fd:	8a 00                	mov    al,BYTE PTR [eax]
100039ff:	3c 2d                	cmp    al,0x2d
10003a01:	0f 85 56 02 00 00    	jne    10003c5d <firstRun()+0x161a>
10003a07:	eb c9                	jmp    100039d2 <firstRun()+0x138f>
10003a09:	a0 00 00 00 00       	mov    al,ds:0x0	10003a0a: R_386_32	installKey
10003a0e:	3c 0a                	cmp    al,0xa
10003a10:	0f 94 c0             	sete   al
10003a13:	84 c0                	test   al,al
10003a15:	0f 84 42 02 00 00    	je     10003c5d <firstRun()+0x161a>
10003a1b:	83 ec 0c             	sub    esp,0xc
10003a1e:	68 00 00 00 00       	push   0x0	10003a1f: R_386_32	pkeybuf
10003a23:	e8 fc ff ff ff       	call   10003a24 <firstRun()+0x13e1>	10003a24: R_386_PC32	checkExtendedKey(char*)
10003a28:	83 c4 10             	add    esp,0x10
10003a2b:	85 c0                	test   eax,eax
10003a2d:	0f 95 c0             	setne  al
10003a30:	88 45 c6             	mov    BYTE PTR [ebp-0x3a],al
10003a33:	80 7d c6 00          	cmp    BYTE PTR [ebp-0x3a],0x0
10003a37:	74 4d                	je     10003a86 <firstRun()+0x1443>
10003a39:	83 ec 0c             	sub    esp,0xc
10003a3c:	68 f0 0a 00 00       	push   0xaf0
10003a41:	e8 fc ff ff ff       	call   10003a42 <firstRun()+0x13ff>	10003a42: R_386_PC32	milliTenthSleep(unsigned int)
10003a46:	83 c4 10             	add    esp,0x10
10003a49:	e8 fc ff ff ff       	call   10003a4a <firstRun()+0x1407>	10003a4a: R_386_PC32	drawBootScreen()
10003a4e:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10003a50: R_386_32	installKey
10003a55:	83 ec 0c             	sub    esp,0xc
10003a58:	68 84 03 00 00       	push   0x384
10003a5d:	e8 fc ff ff ff       	call   10003a5e <firstRun()+0x141b>	10003a5e: R_386_PC32	milliTenthSleep(unsigned int)
10003a62:	83 c4 10             	add    esp,0x10
10003a65:	e8 fc ff ff ff       	call   10003a66 <firstRun()+0x1423>	10003a66: R_386_PC32	drawBootScreen()
10003a6a:	83 ec 0c             	sub    esp,0xc
10003a6d:	68 c0 12 00 00       	push   0x12c0
10003a72:	e8 fc ff ff ff       	call   10003a73 <firstRun()+0x1430>	10003a73: R_386_PC32	milliTenthSleep(unsigned int)
10003a77:	83 c4 10             	add    esp,0x10
10003a7a:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10003a7c: R_386_32	installKey
10003a81:	e9 e3 01 00 00       	jmp    10003c69 <firstRun()+0x1626>
10003a86:	83 ec 0c             	sub    esp,0xc
10003a89:	68 f0 0a 00 00       	push   0xaf0
10003a8e:	e8 fc ff ff ff       	call   10003a8f <firstRun()+0x144c>	10003a8f: R_386_PC32	milliTenthSleep(unsigned int)
10003a93:	83 c4 10             	add    esp,0x10
10003a96:	e8 fc ff ff ff       	call   10003a97 <firstRun()+0x1454>	10003a97: R_386_PC32	drawBootScreen()
10003a9b:	83 ec 08             	sub    esp,0x8
10003a9e:	6a 01                	push   0x1
10003aa0:	68 9b 47 00 10       	push   0x1000479b	10003aa1: R_386_32	.text
10003aa5:	6a 0e                	push   0xe
10003aa7:	6a 32                	push   0x32
10003aa9:	6a 02                	push   0x2
10003aab:	6a 16                	push   0x16
10003aad:	e8 fc ff ff ff       	call   10003aae <firstRun()+0x146b>	10003aae: R_386_PC32	drawBasicWindowX(int, int, int, int, char const*, bool)
10003ab2:	83 c4 20             	add    esp,0x20
10003ab5:	a1 00 00 00 00       	mov    eax,ds:0x0	10003ab6: R_386_32	term
10003aba:	83 ec 04             	sub    esp,0x4
10003abd:	6a 05                	push   0x5
10003abf:	6a 18                	push   0x18
10003ac1:	50                   	push   eax
10003ac2:	e8 fc ff ff ff       	call   10003ac3 <firstRun()+0x1480>	10003ac3: R_386_PC32	VgaText::setCursor(int, int)
10003ac7:	83 c4 10             	add    esp,0x10
10003aca:	a1 00 00 00 00       	mov    eax,ds:0x0	10003acb: R_386_32	term
10003acf:	6a 07                	push   0x7
10003ad1:	6a 00                	push   0x0
10003ad3:	68 a8 47 00 10       	push   0x100047a8	10003ad4: R_386_32	.text
10003ad8:	50                   	push   eax
10003ad9:	e8 fc ff ff ff       	call   10003ada <firstRun()+0x1497>	10003ada: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10003ade:	83 c4 10             	add    esp,0x10
10003ae1:	a1 00 00 00 00       	mov    eax,ds:0x0	10003ae2: R_386_32	term
10003ae6:	83 ec 04             	sub    esp,0x4
10003ae9:	6a 06                	push   0x6
10003aeb:	6a 18                	push   0x18
10003aed:	50                   	push   eax
10003aee:	e8 fc ff ff ff       	call   10003aef <firstRun()+0x14ac>	10003aef: R_386_PC32	VgaText::setCursor(int, int)
10003af3:	83 c4 10             	add    esp,0x10
10003af6:	a1 00 00 00 00       	mov    eax,ds:0x0	10003af7: R_386_32	term
10003afb:	6a 07                	push   0x7
10003afd:	6a 00                	push   0x0
10003aff:	68 60 47 00 10       	push   0x10004760	10003b00: R_386_32	.text
10003b04:	50                   	push   eax
10003b05:	e8 fc ff ff ff       	call   10003b06 <firstRun()+0x14c3>	10003b06: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10003b0a:	83 c4 10             	add    esp,0x10
10003b0d:	a1 00 00 00 00       	mov    eax,ds:0x0	10003b0e: R_386_32	term
10003b12:	83 ec 04             	sub    esp,0x4
10003b15:	6a 08                	push   0x8
10003b17:	6a 1c                	push   0x1c
10003b19:	50                   	push   eax
10003b1a:	e8 fc ff ff ff       	call   10003b1b <firstRun()+0x14d8>	10003b1b: R_386_PC32	VgaText::setCursor(int, int)
10003b1f:	83 c4 10             	add    esp,0x10
10003b22:	a1 00 00 00 00       	mov    eax,ds:0x0	10003b23: R_386_32	term
10003b27:	6a 07                	push   0x7
10003b29:	6a 00                	push   0x0
10003b2b:	68 00 00 00 00       	push   0x0	10003b2c: R_386_32	pkeybuf
10003b30:	50                   	push   eax
10003b31:	e8 fc ff ff ff       	call   10003b32 <firstRun()+0x14ef>	10003b32: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10003b36:	83 c4 10             	add    esp,0x10
10003b39:	a1 00 00 00 00       	mov    eax,ds:0x0	10003b3a: R_386_32	term
10003b3e:	83 ec 04             	sub    esp,0x4
10003b41:	6a 08                	push   0x8
10003b43:	6a 2c                	push   0x2c
10003b45:	50                   	push   eax
10003b46:	e8 fc ff ff ff       	call   10003b47 <firstRun()+0x1504>	10003b47: R_386_PC32	VgaText::setCursor(int, int)
10003b4b:	83 c4 10             	add    esp,0x10
10003b4e:	a1 00 00 00 00       	mov    eax,ds:0x0	10003b4f: R_386_32	term
10003b53:	6a 07                	push   0x7
10003b55:	6a 07                	push   0x7
10003b57:	6a 20                	push   0x20
10003b59:	50                   	push   eax
10003b5a:	e8 fc ff ff ff       	call   10003b5b <firstRun()+0x1518>	10003b5b: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
10003b5f:	83 c4 10             	add    esp,0x10
10003b62:	a1 00 00 00 00       	mov    eax,ds:0x0	10003b63: R_386_32	term
10003b67:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
10003b6a:	83 c2 1c             	add    edx,0x1c
10003b6d:	83 ec 04             	sub    esp,0x4
10003b70:	6a 08                	push   0x8
10003b72:	52                   	push   edx
10003b73:	50                   	push   eax
10003b74:	e8 fc ff ff ff       	call   10003b75 <firstRun()+0x1532>	10003b75: R_386_PC32	VgaText::setCursor(int, int)
10003b79:	83 c4 10             	add    esp,0x10
10003b7c:	83 ec 0c             	sub    esp,0xc
10003b7f:	68 cd 47 00 10       	push   0x100047cd	10003b80: R_386_32	.text
10003b84:	6a 0b                	push   0xb
10003b86:	6a 2b                	push   0x2b
10003b88:	6a 0a                	push   0xa
10003b8a:	6a 22                	push   0x22
10003b8c:	e8 fc ff ff ff       	call   10003b8d <firstRun()+0x154a>	10003b8d: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
10003b91:	83 c4 20             	add    esp,0x20
10003b94:	a1 00 00 00 00       	mov    eax,ds:0x0	10003b95: R_386_32	term
10003b99:	83 ec 04             	sub    esp,0x4
10003b9c:	6a 0d                	push   0xd
10003b9e:	6a 24                	push   0x24
10003ba0:	50                   	push   eax
10003ba1:	e8 fc ff ff ff       	call   10003ba2 <firstRun()+0x155f>	10003ba2: R_386_PC32	VgaText::setCursor(int, int)
10003ba6:	83 c4 10             	add    esp,0x10
10003ba9:	a1 00 00 00 00       	mov    eax,ds:0x0	10003baa: R_386_32	term
10003bae:	83 ec 08             	sub    esp,0x8
10003bb1:	68 e4 47 00 10       	push   0x100047e4	10003bb2: R_386_32	.text
10003bb6:	50                   	push   eax
10003bb7:	e8 fc ff ff ff       	call   10003bb8 <firstRun()+0x1575>	10003bb8: R_386_PC32	VgaText::puts(char const*)
10003bbc:	83 c4 10             	add    esp,0x10
10003bbf:	a1 00 00 00 00       	mov    eax,ds:0x0	10003bc0: R_386_32	term
10003bc4:	83 ec 04             	sub    esp,0x4
10003bc7:	6a 0f                	push   0xf
10003bc9:	6a 24                	push   0x24
10003bcb:	50                   	push   eax
10003bcc:	e8 fc ff ff ff       	call   10003bcd <firstRun()+0x158a>	10003bcd: R_386_PC32	VgaText::setCursor(int, int)
10003bd1:	83 c4 10             	add    esp,0x10
10003bd4:	a1 00 00 00 00       	mov    eax,ds:0x0	10003bd5: R_386_32	term
10003bd9:	83 ec 08             	sub    esp,0x8
10003bdc:	68 0c 48 00 10       	push   0x1000480c	10003bdd: R_386_32	.text
10003be1:	50                   	push   eax
10003be2:	e8 fc ff ff ff       	call   10003be3 <firstRun()+0x15a0>	10003be3: R_386_PC32	VgaText::puts(char const*)
10003be7:	83 c4 10             	add    esp,0x10
10003bea:	a1 00 00 00 00       	mov    eax,ds:0x0	10003beb: R_386_32	term
10003bef:	83 ec 04             	sub    esp,0x4
10003bf2:	6a 10                	push   0x10
10003bf4:	6a 24                	push   0x24
10003bf6:	50                   	push   eax
10003bf7:	e8 fc ff ff ff       	call   10003bf8 <firstRun()+0x15b5>	10003bf8: R_386_PC32	VgaText::setCursor(int, int)
10003bfc:	83 c4 10             	add    esp,0x10
10003bff:	a1 00 00 00 00       	mov    eax,ds:0x0	10003c00: R_386_32	term
10003c04:	83 ec 08             	sub    esp,0x8
10003c07:	68 30 48 00 10       	push   0x10004830	10003c08: R_386_32	.text
10003c0c:	50                   	push   eax
10003c0d:	e8 fc ff ff ff       	call   10003c0e <firstRun()+0x15cb>	10003c0e: R_386_PC32	VgaText::puts(char const*)
10003c12:	83 c4 10             	add    esp,0x10
10003c15:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10003c17: R_386_32	installKey
10003c1c:	83 ec 0c             	sub    esp,0xc
10003c1f:	68 94 11 00 00       	push   0x1194
10003c24:	e8 fc ff ff ff       	call   10003c25 <firstRun()+0x15e2>	10003c25: R_386_PC32	milliTenthSleep(unsigned int)
10003c29:	83 c4 10             	add    esp,0x10
10003c2c:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10003c2e: R_386_32	installKey
10003c33:	a0 00 00 00 00       	mov    al,ds:0x0	10003c34: R_386_32	installKey
10003c38:	84 c0                	test   al,al
10003c3a:	0f 94 c0             	sete   al
10003c3d:	84 c0                	test   al,al
10003c3f:	74 02                	je     10003c43 <firstRun()+0x1600>
10003c41:	eb f0                	jmp    10003c33 <firstRun()+0x15f0>
10003c43:	e8 fc ff ff ff       	call   10003c44 <firstRun()+0x1601>	10003c44: R_386_PC32	drawBootScreen()
10003c48:	83 ec 0c             	sub    esp,0xc
10003c4b:	68 9c 18 00 00       	push   0x189c
10003c50:	e8 fc ff ff ff       	call   10003c51 <firstRun()+0x160e>	10003c51: R_386_PC32	milliTenthSleep(unsigned int)
10003c55:	83 c4 10             	add    esp,0x10
10003c58:	e9 f1 fa ff ff       	jmp    1000374e <firstRun()+0x110b>
10003c5d:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10003c5f: R_386_32	installKey
10003c64:	e9 5f fb ff ff       	jmp    100037c8 <firstRun()+0x1185>
10003c69:	e8 fc ff ff ff       	call   10003c6a <firstRun()+0x1627>	10003c6a: R_386_PC32	drawBootScreen()
10003c6e:	83 ec 0c             	sub    esp,0xc
10003c71:	68 51 48 00 10       	push   0x10004851	10003c72: R_386_32	.text
10003c76:	6a 0d                	push   0xd
10003c78:	6a 32                	push   0x32
10003c7a:	6a 05                	push   0x5
10003c7c:	6a 16                	push   0x16
10003c7e:	e8 fc ff ff ff       	call   10003c7f <firstRun()+0x163c>	10003c7f: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
10003c83:	83 c4 20             	add    esp,0x20
10003c86:	83 ec 0c             	sub    esp,0xc
10003c89:	6a 00                	push   0x0
10003c8b:	e8 fc ff ff ff       	call   10003c8c <firstRun()+0x1649>	10003c8c: R_386_PC32	bootInstallTasks(int)
10003c90:	83 c4 10             	add    esp,0x10
10003c93:	83 ec 04             	sub    esp,0x4
10003c96:	6a 0c                	push   0xc
10003c98:	68 69 48 00 10       	push   0x10004869	10003c99: R_386_32	.text
10003c9d:	68 7a 48 00 10       	push   0x1000487a	10003c9e: R_386_32	.text
10003ca2:	e8 fc ff ff ff       	call   10003ca3 <firstRun()+0x1660>	10003ca3: R_386_PC32	Reg::readIntWithDefault(char*, char*, int)
10003ca7:	83 c4 10             	add    esp,0x10
10003caa:	89 45 c0             	mov    DWORD PTR [ebp-0x40],eax
10003cad:	83 ec 0c             	sub    esp,0xc
10003cb0:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
10003cb3:	e8 fc ff ff ff       	call   10003cb4 <firstRun()+0x1671>	10003cb4: R_386_PC32	Virt::setupPageSwapping(int)
10003cb8:	83 c4 10             	add    esp,0x10
10003cbb:	83 ec 0c             	sub    esp,0xc
10003cbe:	6a 01                	push   0x1
10003cc0:	e8 fc ff ff ff       	call   10003cc1 <firstRun()+0x167e>	10003cc1: R_386_PC32	bootInstallTasks(int)
10003cc5:	83 c4 10             	add    esp,0x10
10003cc8:	83 ec 0c             	sub    esp,0xc
10003ccb:	68 81 48 00 10       	push   0x10004881	10003ccc: R_386_32	.text
10003cd0:	e8 fc ff ff ff       	call   10003cd1 <firstRun()+0x168e>	10003cd1: R_386_PC32	rmtree(char*)
10003cd5:	83 c4 10             	add    esp,0x10
10003cd8:	83 ec 0c             	sub    esp,0xc
10003cdb:	68 9b 48 00 10       	push   0x1000489b	10003cdc: R_386_32	.text
10003ce0:	e8 fc ff ff ff       	call   10003ce1 <firstRun()+0x169e>	10003ce1: R_386_PC32	rmtree(char*)
10003ce5:	83 c4 10             	add    esp,0x10
10003ce8:	83 ec 08             	sub    esp,0x8
10003ceb:	68 c0 01 00 00       	push   0x1c0
10003cf0:	68 81 48 00 10       	push   0x10004881	10003cf1: R_386_32	.text
10003cf5:	e8 fc ff ff ff       	call   10003cf6 <firstRun()+0x16b3>	10003cf6: R_386_PC32	mkdir(char const*, int)
10003cfa:	83 c4 10             	add    esp,0x10
10003cfd:	83 ec 08             	sub    esp,0x8
10003d00:	68 c0 01 00 00       	push   0x1c0
10003d05:	68 9b 48 00 10       	push   0x1000489b	10003d06: R_386_32	.text
10003d0a:	e8 fc ff ff ff       	call   10003d0b <firstRun()+0x16c8>	10003d0b: R_386_PC32	mkdir(char const*, int)
10003d0f:	83 c4 10             	add    esp,0x10
10003d12:	83 ec 08             	sub    esp,0x8
10003d15:	68 81 48 00 10       	push   0x10004881	10003d16: R_386_32	.text
10003d1a:	68 b4 48 00 10       	push   0x100048b4	10003d1b: R_386_32	.text
10003d1f:	e8 fc ff ff ff       	call   10003d20 <firstRun()+0x16dd>	10003d20: R_386_PC32	copytree(char*, char*)
10003d24:	83 c4 10             	add    esp,0x10
10003d27:	83 ec 0c             	sub    esp,0xc
10003d2a:	6a 02                	push   0x2
10003d2c:	e8 fc ff ff ff       	call   10003d2d <firstRun()+0x16ea>	10003d2d: R_386_PC32	bootInstallTasks(int)
10003d31:	83 c4 10             	add    esp,0x10
10003d34:	83 ec 0c             	sub    esp,0xc
10003d37:	68 00 00 00 00       	push   0x0	10003d38: R_386_32	currName
10003d3c:	e8 fc ff ff ff       	call   10003d3d <firstRun()+0x16fa>	10003d3d: R_386_PC32	createUser(char const*)
10003d41:	83 c4 10             	add    esp,0x10
10003d44:	83 ec 0c             	sub    esp,0xc
10003d47:	6a 03                	push   0x3
10003d49:	e8 fc ff ff ff       	call   10003d4a <firstRun()+0x1707>	10003d4a: R_386_PC32	bootInstallTasks(int)
10003d4e:	83 c4 10             	add    esp,0x10
10003d51:	c6 05 00 00 00 00 01 	mov    BYTE PTR ds:0x0,0x1	10003d53: R_386_32	VgaText::hiddenOut
10003d58:	90                   	nop
10003d59:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
10003d5c:	c9                   	leave  
10003d5d:	c3                   	ret    

10003d5e <loadExtensions()>:
10003d5e:	55                   	push   ebp
10003d5f:	89 e5                	mov    ebp,esp
10003d61:	83 ec 08             	sub    esp,0x8
10003d64:	83 ec 0c             	sub    esp,0xc
10003d67:	68 d5 48 00 10       	push   0x100048d5	10003d68: R_386_32	.text
10003d6c:	e8 fc ff ff ff       	call   10003d6d <loadExtensions()+0xf>	10003d6d: R_386_PC32	KeSetBootMessage(char const*)
10003d71:	83 c4 10             	add    esp,0x10
10003d74:	90                   	nop
10003d75:	c9                   	leave  
10003d76:	c3                   	ret    

10003d77 <begin(void*)>:
10003d77:	55                   	push   ebp
10003d78:	89 e5                	mov    ebp,esp
10003d7a:	57                   	push   edi
10003d7b:	56                   	push   esi
10003d7c:	53                   	push   ebx
10003d7d:	83 ec 4c             	sub    esp,0x4c
10003d80:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
10003d84:	83 ec 0c             	sub    esp,0xc
10003d87:	68 14 01 00 00       	push   0x114
10003d8c:	e8 fc ff ff ff       	call   10003d8d <begin(void*)+0x16>	10003d8d: R_386_PC32	operator new(unsigned long)
10003d91:	83 c4 10             	add    esp,0x10
10003d94:	89 c3                	mov    ebx,eax
10003d96:	a1 00 00 00 00       	mov    eax,ds:0x0	10003d97: R_386_32	kernelProcess
10003d9b:	83 ec 04             	sub    esp,0x4
10003d9e:	50                   	push   eax
10003d9f:	68 eb 48 00 10       	push   0x100048eb	10003da0: R_386_32	.text
10003da4:	53                   	push   ebx
10003da5:	e8 fc ff ff ff       	call   10003da6 <begin(void*)+0x2f>	10003da6: R_386_PC32	File::File(char const*, Process*)
10003daa:	83 c4 10             	add    esp,0x10
10003dad:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
10003db0:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
10003db4:	75 10                	jne    10003dc6 <begin(void*)+0x4f>
10003db6:	83 ec 0c             	sub    esp,0xc
10003db9:	68 09 49 00 10       	push   0x10004909	10003dba: R_386_32	.text
10003dbe:	e8 fc ff ff ff       	call   10003dbf <begin(void*)+0x48>	10003dbf: R_386_PC32	KePanic(char const*)
10003dc3:	83 c4 10             	add    esp,0x10
10003dc6:	83 ec 08             	sub    esp,0x8
10003dc9:	6a 01                	push   0x1
10003dcb:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10003dce:	e8 fc ff ff ff       	call   10003dcf <begin(void*)+0x58>	10003dcf: R_386_PC32	File::open(FileOpenMode)
10003dd3:	83 c4 10             	add    esp,0x10
10003dd6:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
10003dd9:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
10003ddd:	75 10                	jne    10003def <begin(void*)+0x78>
10003ddf:	83 ec 0c             	sub    esp,0xc
10003de2:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10003de5:	e8 fc ff ff ff       	call   10003de6 <begin(void*)+0x6f>	10003de6: R_386_PC32	File::close()
10003dea:	83 c4 10             	add    esp,0x10
10003ded:	eb 04                	jmp    10003df3 <begin(void*)+0x7c>
10003def:	c6 45 e7 01          	mov    BYTE PTR [ebp-0x19],0x1
10003df3:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
10003df7:	74 15                	je     10003e0e <begin(void*)+0x97>
10003df9:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10003dfc:	8b 00                	mov    eax,DWORD PTR [eax]
10003dfe:	83 c0 08             	add    eax,0x8
10003e01:	8b 00                	mov    eax,DWORD PTR [eax]
10003e03:	83 ec 0c             	sub    esp,0xc
10003e06:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10003e09:	ff d0                	call   eax
10003e0b:	83 c4 10             	add    esp,0x10
10003e0e:	c6 05 00 00 00 00 01 	mov    BYTE PTR ds:0x0,0x1	10003e10: R_386_32	KeIsPreemptionOn
10003e15:	80 7d e7 00          	cmp    BYTE PTR [ebp-0x19],0x0
10003e19:	74 07                	je     10003e22 <begin(void*)+0xab>
10003e1b:	e8 fc ff ff ff       	call   10003e1c <begin(void*)+0xa5>	10003e1c: R_386_PC32	firstRun()
10003e20:	eb 05                	jmp    10003e27 <begin(void*)+0xb0>
10003e22:	e8 fc ff ff ff       	call   10003e23 <begin(void*)+0xac>	10003e23: R_386_PC32	loadExtensions()
10003e27:	80 7d e7 00          	cmp    BYTE PTR [ebp-0x19],0x0
10003e2b:	0f 84 7b 04 00 00    	je     100042ac <begin(void*)+0x535>
10003e31:	8d 45 b0             	lea    eax,[ebp-0x50]
10003e34:	bb e8 4a 00 10       	mov    ebx,0x10004ae8	10003e35: R_386_32	.text
10003e39:	ba 04 00 00 00       	mov    edx,0x4
10003e3e:	89 c7                	mov    edi,eax
10003e40:	89 de                	mov    esi,ebx
10003e42:	89 d1                	mov    ecx,edx
10003e44:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10003e46:	83 ec 0c             	sub    esp,0xc
10003e49:	68 24 07 00 00       	push   0x724
10003e4e:	e8 fc ff ff ff       	call   10003e4f <begin(void*)+0xd8>	10003e4f: R_386_PC32	operator new(unsigned long)
10003e53:	83 c4 10             	add    esp,0x10
10003e56:	89 c3                	mov    ebx,eax
10003e58:	8d 45 b0             	lea    eax,[ebp-0x50]
10003e5b:	50                   	push   eax
10003e5c:	6a 00                	push   0x0
10003e5e:	68 19 49 00 10       	push   0x10004919	10003e5f: R_386_32	.text
10003e63:	53                   	push   ebx
10003e64:	e8 fc ff ff ff       	call   10003e65 <begin(void*)+0xee>	10003e65: R_386_PC32	Process::Process(char const*, Process*, char**)
10003e69:	83 c4 10             	add    esp,0x10
10003e6c:	89 5d d0             	mov    DWORD PTR [ebp-0x30],ebx
10003e6f:	83 ec 0c             	sub    esp,0xc
10003e72:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10003e75:	e8 fc ff ff ff       	call   10003e76 <begin(void*)+0xff>	10003e76: R_386_PC32	Process::createUserThread()
10003e7a:	83 c4 10             	add    esp,0x10
10003e7d:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10003e7f: R_386_32	VgaText::hiddenOut
10003e84:	a1 00 00 00 00       	mov    eax,ds:0x0	10003e85: R_386_32	term
10003e89:	83 ec 0c             	sub    esp,0xc
10003e8c:	50                   	push   eax
10003e8d:	e8 fc ff ff ff       	call   10003e8e <begin(void*)+0x117>	10003e8e: R_386_PC32	setActiveTerminal(VgaText*)
10003e92:	83 c4 10             	add    esp,0x10
10003e95:	e8 fc ff ff ff       	call   10003e96 <begin(void*)+0x11f>	10003e96: R_386_PC32	drawBootScreen()
10003e9a:	83 ec 0c             	sub    esp,0xc
10003e9d:	68 51 48 00 10       	push   0x10004851	10003e9e: R_386_32	.text
10003ea2:	6a 0d                	push   0xd
10003ea4:	6a 32                	push   0x32
10003ea6:	6a 05                	push   0x5
10003ea8:	6a 16                	push   0x16
10003eaa:	e8 fc ff ff ff       	call   10003eab <begin(void*)+0x134>	10003eab: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
10003eaf:	83 c4 20             	add    esp,0x20
10003eb2:	83 ec 0c             	sub    esp,0xc
10003eb5:	6a 03                	push   0x3
10003eb7:	e8 fc ff ff ff       	call   10003eb8 <begin(void*)+0x141>	10003eb8: R_386_PC32	bootInstallTasks(int)
10003ebc:	83 c4 10             	add    esp,0x10
10003ebf:	c6 05 00 00 00 00 01 	mov    BYTE PTR ds:0x0,0x1	10003ec1: R_386_32	VgaText::hiddenOut
10003ec6:	83 ec 0c             	sub    esp,0xc
10003ec9:	68 14 01 00 00       	push   0x114
10003ece:	e8 fc ff ff ff       	call   10003ecf <begin(void*)+0x158>	10003ecf: R_386_PC32	operator new(unsigned long)
10003ed3:	83 c4 10             	add    esp,0x10
10003ed6:	89 c3                	mov    ebx,eax
10003ed8:	a1 00 00 00 00       	mov    eax,ds:0x0	10003ed9: R_386_32	kernelProcess
10003edd:	83 ec 04             	sub    esp,0x4
10003ee0:	50                   	push   eax
10003ee1:	68 36 49 00 10       	push   0x10004936	10003ee2: R_386_32	.text
10003ee6:	53                   	push   ebx
10003ee7:	e8 fc ff ff ff       	call   10003ee8 <begin(void*)+0x171>	10003ee8: R_386_PC32	File::File(char const*, Process*)
10003eec:	83 c4 10             	add    esp,0x10
10003eef:	89 5d cc             	mov    DWORD PTR [ebp-0x34],ebx
10003ef2:	83 ec 08             	sub    esp,0x8
10003ef5:	6a 01                	push   0x1
10003ef7:	ff 75 cc             	push   DWORD PTR [ebp-0x34]
10003efa:	e8 fc ff ff ff       	call   10003efb <begin(void*)+0x184>	10003efb: R_386_PC32	File::open(FileOpenMode)
10003eff:	83 c4 10             	add    esp,0x10
10003f02:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
10003f05:	83 7d c8 00          	cmp    DWORD PTR [ebp-0x38],0x0
10003f09:	75 39                	jne    10003f44 <begin(void*)+0x1cd>
10003f0b:	83 ec 0c             	sub    esp,0xc
10003f0e:	ff 75 cc             	push   DWORD PTR [ebp-0x34]
10003f11:	e8 fc ff ff ff       	call   10003f12 <begin(void*)+0x19b>	10003f12: R_386_PC32	File::close()
10003f16:	83 c4 10             	add    esp,0x10
10003f19:	83 ec 0c             	sub    esp,0xc
10003f1c:	ff 75 cc             	push   DWORD PTR [ebp-0x34]
10003f1f:	e8 fc ff ff ff       	call   10003f20 <begin(void*)+0x1a9>	10003f20: R_386_PC32	File::unlink()
10003f24:	83 c4 10             	add    esp,0x10
10003f27:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
10003f2b:	74 44                	je     10003f71 <begin(void*)+0x1fa>
10003f2d:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
10003f30:	8b 00                	mov    eax,DWORD PTR [eax]
10003f32:	83 c0 08             	add    eax,0x8
10003f35:	8b 00                	mov    eax,DWORD PTR [eax]
10003f37:	83 ec 0c             	sub    esp,0xc
10003f3a:	ff 75 cc             	push   DWORD PTR [ebp-0x34]
10003f3d:	ff d0                	call   eax
10003f3f:	83 c4 10             	add    esp,0x10
10003f42:	eb 2d                	jmp    10003f71 <begin(void*)+0x1fa>
10003f44:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
10003f48:	74 15                	je     10003f5f <begin(void*)+0x1e8>
10003f4a:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
10003f4d:	8b 00                	mov    eax,DWORD PTR [eax]
10003f4f:	83 c0 08             	add    eax,0x8
10003f52:	8b 00                	mov    eax,DWORD PTR [eax]
10003f54:	83 ec 0c             	sub    esp,0xc
10003f57:	ff 75 cc             	push   DWORD PTR [ebp-0x34]
10003f5a:	ff d0                	call   eax
10003f5c:	83 c4 10             	add    esp,0x10
10003f5f:	83 ec 0c             	sub    esp,0xc
10003f62:	6a 01                	push   0x1
10003f64:	e8 fc ff ff ff       	call   10003f65 <begin(void*)+0x1ee>	10003f65: R_386_PC32	sleep(unsigned int)
10003f69:	83 c4 10             	add    esp,0x10
10003f6c:	e9 55 ff ff ff       	jmp    10003ec6 <begin(void*)+0x14f>
10003f71:	90                   	nop
10003f72:	83 ec 0c             	sub    esp,0xc
10003f75:	6a 02                	push   0x2
10003f77:	e8 fc ff ff ff       	call   10003f78 <begin(void*)+0x201>	10003f78: R_386_PC32	sleep(unsigned int)
10003f7c:	83 c4 10             	add    esp,0x10
10003f7f:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10003f81: R_386_32	VgaText::hiddenOut
10003f86:	a1 00 00 00 00       	mov    eax,ds:0x0	10003f87: R_386_32	term
10003f8b:	83 ec 0c             	sub    esp,0xc
10003f8e:	50                   	push   eax
10003f8f:	e8 fc ff ff ff       	call   10003f90 <begin(void*)+0x219>	10003f90: R_386_PC32	setActiveTerminal(VgaText*)
10003f94:	83 c4 10             	add    esp,0x10
10003f97:	e8 fc ff ff ff       	call   10003f98 <begin(void*)+0x221>	10003f98: R_386_PC32	drawBootScreen()
10003f9c:	83 ec 0c             	sub    esp,0xc
10003f9f:	68 51 48 00 10       	push   0x10004851	10003fa0: R_386_32	.text
10003fa4:	6a 0d                	push   0xd
10003fa6:	6a 32                	push   0x32
10003fa8:	6a 05                	push   0x5
10003faa:	6a 16                	push   0x16
10003fac:	e8 fc ff ff ff       	call   10003fad <begin(void*)+0x236>	10003fad: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
10003fb1:	83 c4 20             	add    esp,0x20
10003fb4:	83 ec 0c             	sub    esp,0xc
10003fb7:	6a 04                	push   0x4
10003fb9:	e8 fc ff ff ff       	call   10003fba <begin(void*)+0x243>	10003fba: R_386_PC32	bootInstallTasks(int)
10003fbe:	83 c4 10             	add    esp,0x10
10003fc1:	83 ec 08             	sub    esp,0x8
10003fc4:	68 dd dd 00 00       	push   0xdddd
10003fc9:	68 40 49 00 10       	push   0x10004940	10003fca: R_386_32	.text
10003fce:	e8 fc ff ff ff       	call   10003fcf <begin(void*)+0x258>	10003fcf: R_386_PC32	backupTree(char*, unsigned short)
10003fd3:	83 c4 10             	add    esp,0x10
10003fd6:	83 ec 08             	sub    esp,0x8
10003fd9:	68 ee ee 00 00       	push   0xeeee
10003fde:	68 53 49 00 10       	push   0x10004953	10003fdf: R_386_32	.text
10003fe3:	e8 fc ff ff ff       	call   10003fe4 <begin(void*)+0x26d>	10003fe4: R_386_PC32	backupTree(char*, unsigned short)
10003fe8:	83 c4 10             	add    esp,0x10
10003feb:	83 ec 08             	sub    esp,0x8
10003fee:	68 ff ff 00 00       	push   0xffff
10003ff3:	68 65 49 00 10       	push   0x10004965	10003ff4: R_386_32	.text
10003ff8:	e8 fc ff ff ff       	call   10003ff9 <begin(void*)+0x282>	10003ff9: R_386_PC32	backupTree(char*, unsigned short)
10003ffd:	83 c4 10             	add    esp,0x10
10004000:	83 ec 0c             	sub    esp,0xc
10004003:	6a 05                	push   0x5
10004005:	e8 fc ff ff ff       	call   10004006 <begin(void*)+0x28f>	10004006: R_386_PC32	bootInstallTasks(int)
1000400a:	83 c4 10             	add    esp,0x10
1000400d:	83 ec 0c             	sub    esp,0xc
10004010:	68 7c 49 00 10       	push   0x1000497c	10004011: R_386_32	.text
10004015:	e8 fc ff ff ff       	call   10004016 <begin(void*)+0x29f>	10004016: R_386_PC32	CmOpen(char const*)
1000401a:	83 c4 10             	add    esp,0x10
1000401d:	89 45 c4             	mov    DWORD PTR [ebp-0x3c],eax
10004020:	83 ec 04             	sub    esp,0x4
10004023:	68 a1 49 00 10       	push   0x100049a1	10004024: R_386_32	.text
10004028:	6a 00                	push   0x0
1000402a:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
1000402d:	e8 fc ff ff ff       	call   1000402e <begin(void*)+0x2b7>	1000402e: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
10004032:	83 c4 10             	add    esp,0x10
10004035:	83 ec 08             	sub    esp,0x8
10004038:	68 a1 49 00 10       	push   0x100049a1	10004039: R_386_32	.text
1000403d:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
10004040:	e8 fc ff ff ff       	call   10004041 <begin(void*)+0x2ca>	10004041: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10004045:	83 c4 10             	add    esp,0x10
10004048:	83 ec 08             	sub    esp,0x8
1000404b:	50                   	push   eax
1000404c:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
1000404f:	e8 fc ff ff ff       	call   10004050 <begin(void*)+0x2d9>	10004050: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10004054:	83 c4 10             	add    esp,0x10
10004057:	83 ec 04             	sub    esp,0x4
1000405a:	68 a8 49 00 10       	push   0x100049a8	1000405b: R_386_32	.text
1000405f:	50                   	push   eax
10004060:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
10004063:	e8 fc ff ff ff       	call   10004064 <begin(void*)+0x2ed>	10004064: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
10004068:	83 c4 10             	add    esp,0x10
1000406b:	83 ec 08             	sub    esp,0x8
1000406e:	68 ae 49 00 10       	push   0x100049ae	1000406f: R_386_32	.text
10004073:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
10004076:	e8 fc ff ff ff       	call   10004077 <begin(void*)+0x300>	10004077: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
1000407b:	83 c4 10             	add    esp,0x10
1000407e:	83 ec 08             	sub    esp,0x8
10004081:	50                   	push   eax
10004082:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
10004085:	e8 fc ff ff ff       	call   10004086 <begin(void*)+0x30f>	10004086: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
1000408a:	83 c4 10             	add    esp,0x10
1000408d:	83 ec 04             	sub    esp,0x4
10004090:	68 bb 49 00 10       	push   0x100049bb	10004091: R_386_32	.text
10004095:	50                   	push   eax
10004096:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
10004099:	e8 fc ff ff ff       	call   1000409a <begin(void*)+0x323>	1000409a: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
1000409e:	83 c4 10             	add    esp,0x10
100040a1:	83 ec 08             	sub    esp,0x8
100040a4:	68 ae 49 00 10       	push   0x100049ae	100040a5: R_386_32	.text
100040a9:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
100040ac:	e8 fc ff ff ff       	call   100040ad <begin(void*)+0x336>	100040ad: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100040b1:	83 c4 10             	add    esp,0x10
100040b4:	83 ec 08             	sub    esp,0x8
100040b7:	50                   	push   eax
100040b8:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
100040bb:	e8 fc ff ff ff       	call   100040bc <begin(void*)+0x345>	100040bc: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
100040c0:	83 c4 10             	add    esp,0x10
100040c3:	83 ec 04             	sub    esp,0x4
100040c6:	68 c0 49 00 10       	push   0x100049c0	100040c7: R_386_32	.text
100040cb:	50                   	push   eax
100040cc:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
100040cf:	e8 fc ff ff ff       	call   100040d0 <begin(void*)+0x359>	100040d0: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
100040d4:	83 c4 10             	add    esp,0x10
100040d7:	83 ec 08             	sub    esp,0x8
100040da:	68 ae 49 00 10       	push   0x100049ae	100040db: R_386_32	.text
100040df:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
100040e2:	e8 fc ff ff ff       	call   100040e3 <begin(void*)+0x36c>	100040e3: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100040e7:	83 c4 10             	add    esp,0x10
100040ea:	83 ec 08             	sub    esp,0x8
100040ed:	50                   	push   eax
100040ee:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
100040f1:	e8 fc ff ff ff       	call   100040f2 <begin(void*)+0x37b>	100040f2: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
100040f6:	83 c4 10             	add    esp,0x10
100040f9:	83 ec 04             	sub    esp,0x4
100040fc:	68 c8 49 00 10       	push   0x100049c8	100040fd: R_386_32	.text
10004101:	50                   	push   eax
10004102:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
10004105:	e8 fc ff ff ff       	call   10004106 <begin(void*)+0x38f>	10004106: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
1000410a:	83 c4 10             	add    esp,0x10
1000410d:	83 ec 08             	sub    esp,0x8
10004110:	68 d3 49 00 10       	push   0x100049d3	10004111: R_386_32	.text
10004115:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
10004118:	e8 fc ff ff ff       	call   10004119 <begin(void*)+0x3a2>	10004119: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
1000411d:	83 c4 10             	add    esp,0x10
10004120:	83 ec 04             	sub    esp,0x4
10004123:	68 00 00 00 00       	push   0x0	10004124: R_386_32	currName
10004128:	50                   	push   eax
10004129:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
1000412c:	e8 fc ff ff ff       	call   1000412d <begin(void*)+0x3b6>	1000412d: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10004131:	83 c4 10             	add    esp,0x10
10004134:	83 ec 08             	sub    esp,0x8
10004137:	68 e5 49 00 10       	push   0x100049e5	10004138: R_386_32	.text
1000413c:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
1000413f:	e8 fc ff ff ff       	call   10004140 <begin(void*)+0x3c9>	10004140: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10004144:	83 c4 10             	add    esp,0x10
10004147:	83 ec 04             	sub    esp,0x4
1000414a:	68 00 00 00 00       	push   0x0	1000414b: R_386_32	currComp
1000414f:	50                   	push   eax
10004150:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
10004153:	e8 fc ff ff ff       	call   10004154 <begin(void*)+0x3dd>	10004154: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10004158:	83 c4 10             	add    esp,0x10
1000415b:	83 ec 08             	sub    esp,0x8
1000415e:	68 fa 49 00 10       	push   0x100049fa	1000415f: R_386_32	.text
10004163:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
10004166:	e8 fc ff ff ff       	call   10004167 <begin(void*)+0x3f0>	10004167: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
1000416b:	83 c4 10             	add    esp,0x10
1000416e:	83 ec 04             	sub    esp,0x4
10004171:	68 00 00 00 00       	push   0x0	10004172: R_386_32	pkeybuf
10004176:	50                   	push   eax
10004177:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
1000417a:	e8 fc ff ff ff       	call   1000417b <begin(void*)+0x404>	1000417b: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
1000417f:	83 c4 10             	add    esp,0x10
10004182:	83 ec 0c             	sub    esp,0xc
10004185:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
10004188:	e8 fc ff ff ff       	call   10004189 <begin(void*)+0x412>	10004189: R_386_PC32	CmClose(Reghive_Tag*)
1000418d:	83 c4 10             	add    esp,0x10
10004190:	a1 00 00 00 00       	mov    eax,ds:0x0	10004191: R_386_32	term
10004195:	83 ec 0c             	sub    esp,0xc
10004198:	50                   	push   eax
10004199:	e8 fc ff ff ff       	call   1000419a <begin(void*)+0x423>	1000419a: R_386_PC32	setActiveTerminal(VgaText*)
1000419e:	83 c4 10             	add    esp,0x10
100041a1:	e8 fc ff ff ff       	call   100041a2 <begin(void*)+0x42b>	100041a2: R_386_PC32	drawBootScreen()
100041a6:	83 ec 0c             	sub    esp,0xc
100041a9:	68 51 48 00 10       	push   0x10004851	100041aa: R_386_32	.text
100041ae:	6a 0d                	push   0xd
100041b0:	6a 32                	push   0x32
100041b2:	6a 05                	push   0x5
100041b4:	6a 16                	push   0x16
100041b6:	e8 fc ff ff ff       	call   100041b7 <begin(void*)+0x440>	100041b7: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
100041bb:	83 c4 20             	add    esp,0x20
100041be:	a1 00 00 00 00       	mov    eax,ds:0x0	100041bf: R_386_32	term
100041c3:	83 ec 04             	sub    esp,0x4
100041c6:	6a 08                	push   0x8
100041c8:	6a 18                	push   0x18
100041ca:	50                   	push   eax
100041cb:	e8 fc ff ff ff       	call   100041cc <begin(void*)+0x455>	100041cc: R_386_PC32	VgaText::setCursor(int, int)
100041d0:	83 c4 10             	add    esp,0x10
100041d3:	a1 00 00 00 00       	mov    eax,ds:0x0	100041d4: R_386_32	term
100041d8:	83 ec 08             	sub    esp,0x8
100041db:	68 14 4a 00 10       	push   0x10004a14	100041dc: R_386_32	.text
100041e0:	50                   	push   eax
100041e1:	e8 fc ff ff ff       	call   100041e2 <begin(void*)+0x46b>	100041e2: R_386_PC32	VgaText::puts(char const*)
100041e6:	83 c4 10             	add    esp,0x10
100041e9:	a1 00 00 00 00       	mov    eax,ds:0x0	100041ea: R_386_32	term
100041ee:	83 ec 04             	sub    esp,0x4
100041f1:	6a 0a                	push   0xa
100041f3:	6a 18                	push   0x18
100041f5:	50                   	push   eax
100041f6:	e8 fc ff ff ff       	call   100041f7 <begin(void*)+0x480>	100041f7: R_386_PC32	VgaText::setCursor(int, int)
100041fb:	83 c4 10             	add    esp,0x10
100041fe:	a1 00 00 00 00       	mov    eax,ds:0x0	100041ff: R_386_32	term
10004203:	83 ec 08             	sub    esp,0x8
10004206:	68 3c 4a 00 10       	push   0x10004a3c	10004207: R_386_32	.text
1000420b:	50                   	push   eax
1000420c:	e8 fc ff ff ff       	call   1000420d <begin(void*)+0x496>	1000420d: R_386_PC32	VgaText::puts(char const*)
10004211:	83 c4 10             	add    esp,0x10
10004214:	a1 00 00 00 00       	mov    eax,ds:0x0	10004215: R_386_32	term
10004219:	83 ec 04             	sub    esp,0x4
1000421c:	6a 0b                	push   0xb
1000421e:	6a 18                	push   0x18
10004220:	50                   	push   eax
10004221:	e8 fc ff ff ff       	call   10004222 <begin(void*)+0x4ab>	10004222: R_386_PC32	VgaText::setCursor(int, int)
10004226:	83 c4 10             	add    esp,0x10
10004229:	a1 00 00 00 00       	mov    eax,ds:0x0	1000422a: R_386_32	term
1000422e:	83 ec 08             	sub    esp,0x8
10004231:	68 68 4a 00 10       	push   0x10004a68	10004232: R_386_32	.text
10004236:	50                   	push   eax
10004237:	e8 fc ff ff ff       	call   10004238 <begin(void*)+0x4c1>	10004238: R_386_PC32	VgaText::puts(char const*)
1000423c:	83 c4 10             	add    esp,0x10
1000423f:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10004241: R_386_32	installKey
10004246:	a0 00 00 00 00       	mov    al,ds:0x0	10004247: R_386_32	installKey
1000424b:	84 c0                	test   al,al
1000424d:	0f 94 c0             	sete   al
10004250:	84 c0                	test   al,al
10004252:	74 02                	je     10004256 <begin(void*)+0x4df>
10004254:	eb f0                	jmp    10004246 <begin(void*)+0x4cf>
10004256:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10004258: R_386_32	installKey
1000425d:	a1 00 00 00 00       	mov    eax,ds:0x0	1000425e: R_386_32	term
10004262:	83 ec 04             	sub    esp,0x4
10004265:	6a 0c                	push   0xc
10004267:	6a 18                	push   0x18
10004269:	50                   	push   eax
1000426a:	e8 fc ff ff ff       	call   1000426b <begin(void*)+0x4f4>	1000426b: R_386_PC32	VgaText::setCursor(int, int)
1000426f:	83 c4 10             	add    esp,0x10
10004272:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10004274: R_386_32	Krnl::computer
10004278:	a1 00 00 00 00       	mov    eax,ds:0x0	10004279: R_386_32	Krnl::computer
1000427d:	8b 00                	mov    eax,DWORD PTR [eax]
1000427f:	83 c0 0c             	add    eax,0xc
10004282:	8b 00                	mov    eax,DWORD PTR [eax]
10004284:	6a 00                	push   0x0
10004286:	6a 00                	push   0x0
10004288:	6a 01                	push   0x1
1000428a:	52                   	push   edx
1000428b:	ff d0                	call   eax
1000428d:	83 c4 10             	add    esp,0x10
10004290:	a1 00 00 00 00       	mov    eax,ds:0x0	10004291: R_386_32	term
10004295:	6a 0f                	push   0xf
10004297:	6a 0c                	push   0xc
10004299:	68 7c 4a 00 10       	push   0x10004a7c	1000429a: R_386_32	.text
1000429e:	50                   	push   eax
1000429f:	e8 fc ff ff ff       	call   100042a0 <begin(void*)+0x529>	100042a0: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
100042a4:	83 c4 10             	add    esp,0x10
100042a7:	e9 e0 00 00 00       	jmp    1000438c <begin(void*)+0x615>
100042ac:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100042ae: R_386_32	VgaText::hiddenOut
100042b3:	83 ec 0c             	sub    esp,0xc
100042b6:	68 24 07 00 00       	push   0x724
100042bb:	e8 fc ff ff ff       	call   100042bc <begin(void*)+0x545>	100042bc: R_386_PC32	operator new(unsigned long)
100042c0:	83 c4 10             	add    esp,0x10
100042c3:	89 c3                	mov    ebx,eax
100042c5:	6a 00                	push   0x0
100042c7:	6a 00                	push   0x0
100042c9:	68 19 49 00 10       	push   0x10004919	100042ca: R_386_32	.text
100042ce:	53                   	push   ebx
100042cf:	e8 fc ff ff ff       	call   100042d0 <begin(void*)+0x559>	100042d0: R_386_PC32	Process::Process(char const*, Process*, char**)
100042d4:	83 c4 10             	add    esp,0x10
100042d7:	89 5d d0             	mov    DWORD PTR [ebp-0x30],ebx
100042da:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
100042dd:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
100042e3:	83 ec 0c             	sub    esp,0xc
100042e6:	50                   	push   eax
100042e7:	e8 fc ff ff ff       	call   100042e8 <begin(void*)+0x571>	100042e8: R_386_PC32	setActiveTerminal(VgaText*)
100042ec:	83 c4 10             	add    esp,0x10
100042ef:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
100042f6:	83 7d e0 18          	cmp    DWORD PTR [ebp-0x20],0x18
100042fa:	7f 2e                	jg     1000432a <begin(void*)+0x5b3>
100042fc:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
10004303:	83 7d dc 4f          	cmp    DWORD PTR [ebp-0x24],0x4f
10004307:	7f 1c                	jg     10004325 <begin(void*)+0x5ae>
10004309:	83 ec 0c             	sub    esp,0xc
1000430c:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
1000430f:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
10004312:	6a 00                	push   0x0
10004314:	6a 07                	push   0x7
10004316:	6a 20                	push   0x20
10004318:	e8 fc ff ff ff       	call   10004319 <begin(void*)+0x5a2>	10004319: R_386_PC32	HalConsoleWriteCharacter(char, int, int, int, int)
1000431d:	83 c4 20             	add    esp,0x20
10004320:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
10004323:	eb de                	jmp    10004303 <begin(void*)+0x58c>
10004325:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
10004328:	eb cc                	jmp    100042f6 <begin(void*)+0x57f>
1000432a:	83 ec 0c             	sub    esp,0xc
1000432d:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10004330:	e8 fc ff ff ff       	call   10004331 <begin(void*)+0x5ba>	10004331: R_386_PC32	Process::createUserThread()
10004335:	83 c4 10             	add    esp,0x10
10004338:	83 ec 04             	sub    esp,0x4
1000433b:	6a 00                	push   0x0
1000433d:	68 a2 4a 00 10       	push   0x10004aa2	1000433e: R_386_32	.text
10004342:	68 aa 4a 00 10       	push   0x10004aaa	10004343: R_386_32	.text
10004347:	e8 fc ff ff ff       	call   10004348 <begin(void*)+0x5d1>	10004348: R_386_PC32	Reg::readIntWithDefault(char*, char*, int)
1000434c:	83 c4 10             	add    esp,0x10
1000434f:	89 45 c0             	mov    DWORD PTR [ebp-0x40],eax
10004352:	83 7d c0 00          	cmp    DWORD PTR [ebp-0x40],0x0
10004356:	74 1d                	je     10004375 <begin(void*)+0x5fe>
10004358:	83 ec 0c             	sub    esp,0xc
1000435b:	68 b0 4a 00 10       	push   0x10004ab0	1000435c: R_386_32	.text
10004360:	e8 fc ff ff ff       	call   10004361 <begin(void*)+0x5ea>	10004361: R_386_PC32	Dbg::kprintf(char const*, ...)
10004365:	83 c4 10             	add    esp,0x10
10004368:	83 ec 0c             	sub    esp,0xc
1000436b:	6a 00                	push   0x0
1000436d:	e8 fc ff ff ff       	call   1000436e <begin(void*)+0x5f7>	1000436e: R_386_PC32	startGUIVESA(void*)
10004372:	83 c4 10             	add    esp,0x10
10004375:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
10004378:	8b 00                	mov    eax,DWORD PTR [eax]
1000437a:	83 ec 04             	sub    esp,0x4
1000437d:	6a 00                	push   0x0
1000437f:	8d 55 ac             	lea    edx,[ebp-0x54]
10004382:	52                   	push   edx
10004383:	50                   	push   eax
10004384:	e8 fc ff ff ff       	call   10004385 <begin(void*)+0x60e>	10004385: R_386_PC32	waitTask(int, int*, int)
10004389:	83 c4 10             	add    esp,0x10
1000438c:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	1000438e: R_386_32	Krnl::computer
10004392:	a1 00 00 00 00       	mov    eax,ds:0x0	10004393: R_386_32	Krnl::computer
10004397:	8b 00                	mov    eax,DWORD PTR [eax]
10004399:	83 c0 0c             	add    eax,0xc
1000439c:	8b 00                	mov    eax,DWORD PTR [eax]
1000439e:	6a 00                	push   0x0
100043a0:	6a 00                	push   0x0
100043a2:	6a 00                	push   0x0
100043a4:	52                   	push   edx
100043a5:	ff d0                	call   eax
100043a7:	83 c4 10             	add    esp,0x10
100043aa:	83 ec 0c             	sub    esp,0xc
100043ad:	68 bb 4a 00 10       	push   0x10004abb	100043ae: R_386_32	.text
100043b2:	e8 fc ff ff ff       	call   100043b3 <begin(void*)+0x63c>	100043b3: R_386_PC32	KePanic(char const*)
100043b7:	83 c4 10             	add    esp,0x10
100043ba:	eb fe                	jmp    100043ba <begin(void*)+0x643>

100043bc <TERMINAL_KEYBUFFER_IN_SIZE>:
100043bc:	80 00 00 00                                         ....

100043c0 <TERMINAL_KEYBUFFER_OUT_SIZE>:
100043c0:	80 00 00 00 2e 00 2e 2e 00 2f 00 43 6f 75 6c 64     ........./.Could
100043d0:	6e 27 74 20 6f 70 65 6e 20 62 61 73 65 20 70 61     n't open base pa
100043e0:	74 68 2e 0a 00 25 73 20 2d 3e 20 25 73 0a 00 43     th...%s -> %s..C
100043f0:	4f 55 4c 44 20 4e 4f 54 20 43 52 45 41 54 45 00     OULD NOT CREATE.
10004400:	43 4f 55 4c 44 20 4e 4f 54 20 43 4f 50 59 00 4e     COULD NOT COPY.N
10004410:	4f 20 4d 45 4d 4f 52 59 00 42 61 63 6b 75 70 00     O MEMORY.Backup.
10004420:	43 3a 2f 42 61 6e 61 6e 61 2f 53 79 73 74 65 6d     C:/Banana/System
10004430:	2f 42 61 63 6b 75 70 2f 00 30 31 32 33 34 35 36     /Backup/.0123456
10004440:	37 38 39 41 42 43 44 45 46 00 43 3a 2f 55 73 65     789ABCDEF.C:/Use
10004450:	72 73 2f 00 2f 44 65 73 6b 74 6f 70 00 2f 44 6f     rs/./Desktop./Do
10004460:	63 75 6d 65 6e 74 73 00 2f 44 6f 77 6e 6c 6f 61     cuments./Downloa
10004470:	64 73 00 2f 50 68 6f 74 6f 73 00 2f 54 72 61 73     ds./Photos./Tras
10004480:	68 20 42 69 6e 00 2f 4d 75 73 69 63 00 2f 4d 6f     h Bin./Music./Mo
10004490:	76 69 65 73 00 43 3a 2f 42 61 6e 61 6e 61 2f 52     vies.C:/Banana/R
100044a0:	65 67 69 73 74 72 79 2f 55 73 65 72 2f 00 00 00     egistry/User/...
100044b0:	43 3a 2f 42 61 6e 61 6e 61 2f 52 65 67 69 73 74     C:/Banana/Regist
100044c0:	72 79 2f 44 65 66 61 75 6c 74 55 73 65 72 00 00     ry/DefaultUser..
100044d0:	43 68 65 63 6b 69 6e 67 0a 20 73 79 73 74 65 6d     Checking. system
100044e0:	0a 20 72 65 71 75 69 72 65 6d 65 6e 74 73 0a 0a     . requirements..
100044f0:	20 4c 65 67 61 6c 0a 20 6e 6f 74 69 63 65 73 0a      Legal. notices.
10004500:	0a 20 43 68 6f 6f 73 69 6e 67 20 61 0a 20 70 61     . Choosing a. pa
10004510:	72 74 69 74 69 6f 6e 0a 0a 20 46 6f 72 6d 61 74     rtition.. Format
10004520:	74 69 6e 67 0a 0a 20 43 6f 70 79 69 6e 67 20 66     ting.. Copying f
10004530:	69 6c 65 73 0a 0a 20 52 65 73 74 61 72 74 69 6e     iles.. Restartin
10004540:	67 0a 20 79 6f 75 72 20 63 6f 6d 70 75 74 65 72     g. your computer
10004550:	0a 0a 00 20 46 69 6e 61 6c 69 73 69 6e 67 20 74     ... Finalising t
10004560:	68 65 0a 20 69 6e 73 74 61 6c 6c 61 74 69 6f 6e     he. installation
10004570:	00 00 00 00 50 6c 65 61 73 65 20 77 61 69 74 20     ....Please wait 
10004580:	77 68 69 6c 65 20 74 68 65 20 69 6e 73 74 61 6c     while the instal
10004590:	6c 20 66 69 6e 69 73 68 65 73 2e 00 10 20 00 20     l finishes... . 
100045a0:	20 00 41 6c 6c 6f 63 61 74 69 6e 67 20 74 68 65      .Allocating the
100045b0:	20 73 77 61 70 66 69 6c 65 00 55 70 64 61 74 69      swapfile.Updati
100045c0:	6e 67 20 74 68 65 20 72 65 67 69 73 74 72 79 00     ng the registry.
100045d0:	43 72 65 61 74 69 6e 67 20 75 73 65 72 20 61 63     Creating user ac
100045e0:	63 6f 75 6e 74 00 49 6e 73 74 61 6c 6c 69 6e 67     count.Installing
100045f0:	20 70 61 63 6b 61 67 65 73 00 42 61 63 6b 69 6e      packages.Backin
10004600:	67 20 75 70 20 73 79 73 74 65 6d 20 66 69 6c 65     g up system file
10004610:	73 00 46 69 6e 69 73 68 69 6e 67 20 74 6f 75 63     s.Finishing touc
10004620:	68 65 73 00 51 51 2d 30 30 30 2d 30 30 30 2d 30     hes.QQ-000-000-0
10004630:	30 30 2d 51 00 00 00 00 53 65 74 74 69 6e 67 20     00-Q....Setting 
10004640:	75 70 20 74 68 65 20 73 79 73 74 65 6d 20 66 6f     up the system fo
10004650:	72 20 74 68 65 20 66 69 72 73 74 20 74 69 6d 65     r the first time
10004660:	00 0a 0a 0a 0a 0a 0a 00 54 65 73 74 00 42 61 6e     ........Test.Ban
10004670:	61 6e 61 20 53 65 74 75 70 00 00 00 50 6c 65 61     ana Setup...Plea
10004680:	73 65 20 65 6e 74 65 72 20 79 6f 75 72 20 64 65     se enter your de
10004690:	74 61 69 6c 73 2e 20 50 72 65 73 73 20 54 41 42     tails. Press TAB
100046a0:	20 74 6f 20 73 77 69 74 63 68 00 62 65 74 77 65      to switch.betwe
100046b0:	65 6e 20 66 69 65 6c 64 73 2e 00 4e 61 6d 65 00     en fields..Name.
100046c0:	43 6f 6d 70 61 6e 79 00 20 20 20 20 20 20 20 20     Company.        
100046d0:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
100046e0:	20 00 20 20 11 00 20 20 20 00 50 72 65 73 73 20      .  ..   .Press 
100046f0:	45 4e 54 45 52 00 20 20 20 20 20 20 20 20 20 20     ENTER.          
10004700:	20 00 74 6f 20 73 75 62 6d 69 74 00 20 20 20 4f      .to submit.   O
10004710:	4b 20 20 20 00 44 61 74 65 20 61 6e 64 20 54 69     K   .Date and Ti
10004720:	6d 65 00 31 34 2f 30 35 2f 32 30 32 31 20 31 38     me.14/05/2021 18
10004730:	3a 35 35 3a 30 30 00 00 50 6c 65 61 73 65 20 65     :55:00..Please e
10004740:	6e 74 65 72 20 74 68 65 20 63 75 72 72 65 6e 74     nter the current
10004750:	20 64 61 74 65 20 61 6e 64 20 74 69 6d 65 2c 00      date and time,.
10004760:	61 6e 64 20 74 68 65 6e 20 70 72 65 73 73 20 45     and then press E
10004770:	4e 54 45 52 2e 00 44 44 2f 4d 4d 2f 59 59 59 59     NTER..DD/MM/YYYY
10004780:	20 48 48 3a 4d 4d 3a 53 53 00 57 57 2d 37 38 33      HH:MM:SS.WW-783
10004790:	38 38 2d 34 35 35 35 35 2d 4e 00 50 72 6f 64 75     88-45555-N.Produ
100047a0:	63 74 20 4b 65 79 00 00 50 6c 65 61 73 65 20 65     ct Key..Please e
100047b0:	6e 74 65 72 20 79 6f 75 72 20 70 72 6f 64 75 63     nter your produc
100047c0:	74 20 6b 65 79 20 62 65 6c 6f 77 2c 00 49 6e 76     t key below,.Inv
100047d0:	61 6c 69 64 20 50 72 6f 64 75 63 74 20 4b 65 79     alid Product Key
100047e0:	00 00 00 00 54 68 65 20 65 6e 74 65 72 65 64 20     ....The entered 
100047f0:	70 72 6f 64 75 63 74 20 6b 65 79 20 77 61 73 20     product key was 
10004800:	69 6e 76 61 6c 69 64 2e 00 00 00 00 50 72 65 73     invalid.....Pres
10004810:	73 20 61 6e 79 20 6b 65 79 20 74 6f 20 63 6f 6e     s any key to con
10004820:	74 69 6e 75 65 20 61 6e 64 20 74 68 65 6e 00 00     tinue and then..
10004830:	65 6e 74 65 72 20 74 68 65 20 70 72 6f 64 75 63     enter the produc
10004840:	74 20 6b 65 79 20 63 6f 72 72 65 63 74 6c 79 2e     t key correctly.
10004850:	00 46 69 6e 61 6c 69 73 69 6e 67 20 49 6e 73 74     .Finalising Inst
10004860:	61 6c 6c 61 74 69 6f 6e 00 40 6d 65 6d 6f 72 79     allation.@memory
10004870:	3a 73 77 61 70 66 69 6c 65 00 73 79 73 74 65 6d     :swapfile.system
10004880:	00 43 3a 2f 42 61 6e 61 6e 61 2f 52 65 67 69 73     .C:/Banana/Regis
10004890:	74 72 79 2f 53 79 73 74 65 6d 00 43 3a 2f 42 61     try/System.C:/Ba
100048a0:	6e 61 6e 61 2f 52 65 67 69 73 74 72 79 2f 55 73     nana/Registry/Us
100048b0:	65 72 00 00 43 3a 2f 42 61 6e 61 6e 61 2f 52 65     er..C:/Banana/Re
100048c0:	67 69 73 74 72 79 2f 44 65 66 61 75 6c 74 53 79     gistry/DefaultSy
100048d0:	73 74 65 6d 00 4c 6f 61 64 69 6e 67 20 65 78 74     stem.Loading ext
100048e0:	65 6e 73 69 6f 6e 73 2e 2e 2e 00 43 3a 2f 42 61     ensions....C:/Ba
100048f0:	6e 61 6e 61 2f 53 79 73 74 65 6d 2f 73 65 74 75     nana/System/setu
10004900:	70 69 73 64 2e 6f 6e 65 00 53 59 53 49 4e 49 54     pisd.one.SYSINIT
10004910:	20 46 41 49 4c 55 52 45 00 43 3a 2f 42 61 6e 61      FAILURE.C:/Bana
10004920:	6e 61 2f 53 79 73 74 65 6d 2f 63 6f 6d 6d 61 6e     na/System/comman
10004930:	64 2e 65 78 65 00 43 3a 2f 44 45 2e 42 55 47 00     d.exe.C:/DE.BUG.
10004940:	43 3a 2f 42 61 6e 61 6e 61 2f 44 72 69 76 65 72     C:/Banana/Driver
10004950:	73 2f 00 43 3a 2f 42 61 6e 61 6e 61 2f 53 79 73     s/.C:/Banana/Sys
10004960:	74 65 6d 2f 00 43 3a 2f 42 61 6e 61 6e 61 2f 52     tem/.C:/Banana/R
10004970:	65 67 69 73 74 72 79 2f 00 00 00 00 43 3a 2f 42     egistry/....C:/B
10004980:	61 6e 61 6e 61 2f 52 65 67 69 73 74 72 79 2f 53     anana/Registry/S
10004990:	79 73 74 65 6d 2f 53 59 53 54 45 4d 2e 52 45 47     ystem/SYSTEM.REG
100049a0:	00 42 41 4e 41 4e 41 00 53 45 54 55 50 00 42 41     .BANANA.SETUP.BA
100049b0:	4e 41 4e 41 2f 53 45 54 55 50 00 4e 41 4d 45 00     NANA/SETUP.NAME.
100049c0:	43 4f 4d 50 41 4e 59 00 50 52 4f 44 55 43 54 4b     COMPANY.PRODUCTK
100049d0:	45 59 00 42 41 4e 41 4e 41 2f 53 45 54 55 50 2f     EY.BANANA/SETUP/
100049e0:	4e 41 4d 45 00 42 41 4e 41 4e 41 2f 53 45 54 55     NAME.BANANA/SETU
100049f0:	50 2f 43 4f 4d 50 41 4e 59 00 42 41 4e 41 4e 41     P/COMPANY.BANANA
10004a00:	2f 53 45 54 55 50 2f 50 52 4f 44 55 43 54 4b 45     /SETUP/PRODUCTKE
10004a10:	59 00 00 00 54 68 65 20 69 6e 73 74 61 6c 6c 61     Y...The installa
10004a20:	74 69 6f 6e 20 68 61 73 20 62 65 65 6e 20 63 6f     tion has been co
10004a30:	6d 70 6c 65 74 65 64 2e 0a 00 00 00 50 6c 65 61     mpleted.....Plea
10004a40:	73 65 20 70 72 65 73 73 20 45 4e 54 45 52 20 74     se press ENTER t
10004a50:	6f 20 72 65 73 74 61 72 74 20 79 6f 75 72 20 63     o restart your c
10004a60:	6f 6d 70 75 74 65 72 00 61 6e 64 20 73 74 61 72     omputer.and star
10004a70:	74 20 42 61 6e 61 6e 61 2e 00 00 00 50 4c 45 41     t Banana....PLEA
10004a80:	53 45 20 4d 41 4e 55 41 4c 4c 59 20 52 45 53 54     SE MANUALLY REST
10004a90:	41 52 54 20 59 4f 55 52 20 43 4f 4d 50 55 54 45     ART YOUR COMPUTE
10004aa0:	52 00 61 75 74 6f 67 75 69 00 73 68 65 6c 6c 00     R.autogui.shell.
10004ab0:	41 55 54 4f 20 47 55 49 2e 0a 00 54 55 52 4e 20     AUTO GUI...TURN 
10004ac0:	4f 46 46 20 50 43 00 63 61 6c 6c 00 43 3a 2f 42     OFF PC.call.C:/B
10004ad0:	61 6e 61 6e 61 2f 53 79 73 74 65 6d 2f 69 6e 69     anana/System/ini
10004ae0:	74 2e 62 61 74 00 00 00 19 49 00 10 c7 4a 00 10     t.bat....I...J..	10004ae8: R_386_32	.text
	10004aec: R_386_32	.text
10004af0:	cc 4a 00 10 00 00 00 00                             .J......	10004af0: R_386_32	.text
