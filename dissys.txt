
packages/system/32/0001/system.dll:     file format elf32-i386


Disassembly of section .text:

10000000 <beginx(void*)>:
10000000:	55                   	push   ebp
10000001:	89 e5                	mov    ebp,esp
10000003:	83 ec 08             	sub    esp,0x8
10000006:	83 ec 0c             	sub    esp,0xc
10000009:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000000c:	e8 fc ff ff ff       	call   1000000d <beginx(void*)+0xd>	1000000d: R_386_PC32	begin(void*)
10000011:	83 c4 10             	add    esp,0x10
10000014:	90                   	nop
10000015:	c9                   	leave  
10000016:	c3                   	ret    

10000017 <memcmp(void*, void*, unsigned long)>:
10000017:	55                   	push   ebp
10000018:	89 e5                	mov    ebp,esp
1000001a:	83 ec 10             	sub    esp,0x10
1000001d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000020:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
10000023:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000026:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
10000029:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
1000002c:	8d 50 ff             	lea    edx,[eax-0x1]
1000002f:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
10000032:	85 c0                	test   eax,eax
10000034:	74 12                	je     10000048 <memcmp(void*, void*, unsigned long)+0x31>
10000036:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000039:	8a 10                	mov    dl,BYTE PTR [eax]
1000003b:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
1000003e:	8a 00                	mov    al,BYTE PTR [eax]
10000040:	38 c2                	cmp    dl,al
10000042:	75 04                	jne    10000048 <memcmp(void*, void*, unsigned long)+0x31>
10000044:	b0 01                	mov    al,0x1
10000046:	eb 02                	jmp    1000004a <memcmp(void*, void*, unsigned long)+0x33>
10000048:	b0 00                	mov    al,0x0
1000004a:	84 c0                	test   al,al
1000004c:	74 08                	je     10000056 <memcmp(void*, void*, unsigned long)+0x3f>
1000004e:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
10000051:	ff 45 f8             	inc    DWORD PTR [ebp-0x8]
10000054:	eb d3                	jmp    10000029 <memcmp(void*, void*, unsigned long)+0x12>
10000056:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000059:	8a 00                	mov    al,BYTE PTR [eax]
1000005b:	0f b6 d0             	movzx  edx,al
1000005e:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
10000061:	8a 00                	mov    al,BYTE PTR [eax]
10000063:	0f b6 c0             	movzx  eax,al
10000066:	29 c2                	sub    edx,eax
10000068:	89 d0                	mov    eax,edx
1000006a:	c9                   	leave  
1000006b:	c3                   	ret    

1000006c <memmove>:
1000006c:	55                   	push   ebp
1000006d:	89 e5                	mov    ebp,esp
1000006f:	83 ec 10             	sub    esp,0x10
10000072:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000075:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
10000078:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
1000007b:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
1000007e:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
10000081:	3b 45 fc             	cmp    eax,DWORD PTR [ebp-0x4]
10000084:	76 1b                	jbe    100000a1 <memmove+0x35>
10000086:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
1000008a:	74 46                	je     100000d2 <memmove+0x66>
1000008c:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
1000008f:	8a 10                	mov    dl,BYTE PTR [eax]
10000091:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000094:	88 10                	mov    BYTE PTR [eax],dl
10000096:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
10000099:	ff 45 f8             	inc    DWORD PTR [ebp-0x8]
1000009c:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
1000009f:	eb e5                	jmp    10000086 <memmove+0x1a>
100000a1:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
100000a4:	3b 45 fc             	cmp    eax,DWORD PTR [ebp-0x4]
100000a7:	73 29                	jae    100000d2 <memmove+0x66>
100000a9:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
100000ac:	48                   	dec    eax
100000ad:	01 45 fc             	add    DWORD PTR [ebp-0x4],eax
100000b0:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
100000b3:	48                   	dec    eax
100000b4:	01 45 f8             	add    DWORD PTR [ebp-0x8],eax
100000b7:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
100000bb:	74 15                	je     100000d2 <memmove+0x66>
100000bd:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
100000c0:	8a 10                	mov    dl,BYTE PTR [eax]
100000c2:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100000c5:	88 10                	mov    BYTE PTR [eax],dl
100000c7:	ff 4d fc             	dec    DWORD PTR [ebp-0x4]
100000ca:	ff 4d f8             	dec    DWORD PTR [ebp-0x8]
100000cd:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
100000d0:	eb e5                	jmp    100000b7 <memmove+0x4b>
100000d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100000d5:	c9                   	leave  
100000d6:	c3                   	ret    

100000d7 <memset>:
100000d7:	55                   	push   ebp
100000d8:	89 e5                	mov    ebp,esp
100000da:	83 ec 10             	sub    esp,0x10
100000dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100000e0:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
100000e3:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
100000e7:	74 12                	je     100000fb <memset+0x24>
100000e9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100000ec:	88 c2                	mov    dl,al
100000ee:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100000f1:	88 10                	mov    BYTE PTR [eax],dl
100000f3:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
100000f6:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
100000f9:	eb e8                	jmp    100000e3 <memset+0xc>
100000fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100000fe:	c9                   	leave  
100000ff:	c3                   	ret    

10000100 <strlen>:
10000100:	55                   	push   ebp
10000101:	89 e5                	mov    ebp,esp
10000103:	83 ec 10             	sub    esp,0x10
10000106:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
1000010d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000110:	8a 00                	mov    al,BYTE PTR [eax]
10000112:	84 c0                	test   al,al
10000114:	74 0c                	je     10000122 <strlen+0x22>
10000116:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000119:	40                   	inc    eax
1000011a:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
1000011d:	ff 45 08             	inc    DWORD PTR [ebp+0x8]
10000120:	eb eb                	jmp    1000010d <strlen+0xd>
10000122:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000125:	c9                   	leave  
10000126:	c3                   	ret    

10000127 <strpbrk(char const*, char const*)>:
10000127:	55                   	push   ebp
10000128:	89 e5                	mov    ebp,esp
1000012a:	83 ec 10             	sub    esp,0x10
1000012d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000130:	8a 00                	mov    al,BYTE PTR [eax]
10000132:	84 c0                	test   al,al
10000134:	74 30                	je     10000166 <strpbrk(char const*, char const*)+0x3f>
10000136:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000139:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
1000013c:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000013f:	8a 00                	mov    al,BYTE PTR [eax]
10000141:	84 c0                	test   al,al
10000143:	74 18                	je     1000015d <strpbrk(char const*, char const*)+0x36>
10000145:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000148:	8a 10                	mov    dl,BYTE PTR [eax]
1000014a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000014d:	8a 00                	mov    al,BYTE PTR [eax]
1000014f:	38 c2                	cmp    dl,al
10000151:	75 05                	jne    10000158 <strpbrk(char const*, char const*)+0x31>
10000153:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000156:	eb 13                	jmp    1000016b <strpbrk(char const*, char const*)+0x44>
10000158:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
1000015b:	eb df                	jmp    1000013c <strpbrk(char const*, char const*)+0x15>
1000015d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000160:	40                   	inc    eax
10000161:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
10000164:	eb c7                	jmp    1000012d <strpbrk(char const*, char const*)+0x6>
10000166:	b8 00 00 00 00       	mov    eax,0x0
1000016b:	c9                   	leave  
1000016c:	c3                   	ret    

1000016d <strtok>:
1000016d:	55                   	push   ebp
1000016e:	89 e5                	mov    ebp,esp
10000170:	83 ec 10             	sub    esp,0x10
10000173:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000176:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
10000179:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000017c:	85 c0                	test   eax,eax
1000017e:	75 18                	jne    10000198 <strtok+0x2b>
10000180:	a1 00 00 00 00       	mov    eax,ds:0x0	10000181: R_386_32	SavedPtr
10000185:	85 c0                	test   eax,eax
10000187:	75 07                	jne    10000190 <strtok+0x23>
10000189:	b8 00 00 00 00       	mov    eax,0x0
1000018e:	eb 6f                	jmp    100001ff <strtok+0x92>
10000190:	a1 00 00 00 00       	mov    eax,ds:0x0	10000191: R_386_32	SavedPtr
10000195:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
10000198:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000019b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
1000019e:	50                   	push   eax
1000019f:	e8 fc ff ff ff       	call   100001a0 <strtok+0x33>	100001a0: R_386_PC32	strpbrk(char const*, char const*)
100001a4:	83 c4 08             	add    esp,0x8
100001a7:	a3 00 00 00 00       	mov    ds:0x0,eax	100001a8: R_386_32	SavedPtr
100001ac:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	100001ae: R_386_32	SavedPtr
100001b2:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100001b5:	39 c2                	cmp    edx,eax
100001b7:	75 22                	jne    100001db <strtok+0x6e>
100001b9:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100001bc:	8d 50 01             	lea    edx,[eax+0x1]
100001bf:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
100001c2:	c6 00 00             	mov    BYTE PTR [eax],0x0
100001c5:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100001c8:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
100001cb:	50                   	push   eax
100001cc:	e8 fc ff ff ff       	call   100001cd <strtok+0x60>	100001cd: R_386_PC32	strpbrk(char const*, char const*)
100001d1:	83 c4 08             	add    esp,0x8
100001d4:	a3 00 00 00 00       	mov    ds:0x0,eax	100001d5: R_386_32	SavedPtr
100001d9:	eb d1                	jmp    100001ac <strtok+0x3f>
100001db:	a1 00 00 00 00       	mov    eax,ds:0x0	100001dc: R_386_32	SavedPtr
100001e0:	85 c0                	test   eax,eax
100001e2:	74 16                	je     100001fa <strtok+0x8d>
100001e4:	a1 00 00 00 00       	mov    eax,ds:0x0	100001e5: R_386_32	SavedPtr
100001e9:	8d 50 01             	lea    edx,[eax+0x1]
100001ec:	89 15 00 00 00 00    	mov    DWORD PTR ds:0x0,edx	100001ee: R_386_32	SavedPtr
100001f2:	c6 00 00             	mov    BYTE PTR [eax],0x0
100001f5:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100001f8:	eb 05                	jmp    100001ff <strtok+0x92>
100001fa:	b8 00 00 00 00       	mov    eax,0x0
100001ff:	c9                   	leave  
10000200:	c3                   	ret    

10000201 <strcpy>:
10000201:	55                   	push   ebp
10000202:	89 e5                	mov    ebp,esp
10000204:	83 ec 10             	sub    esp,0x10
10000207:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000020a:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
1000020d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000210:	8a 00                	mov    al,BYTE PTR [eax]
10000212:	84 c0                	test   al,al
10000214:	74 12                	je     10000228 <strcpy+0x27>
10000216:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000219:	8a 10                	mov    dl,BYTE PTR [eax]
1000021b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000021e:	88 10                	mov    BYTE PTR [eax],dl
10000220:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
10000223:	ff 45 0c             	inc    DWORD PTR [ebp+0xc]
10000226:	eb e5                	jmp    1000020d <strcpy+0xc>
10000228:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000022b:	c6 00 00             	mov    BYTE PTR [eax],0x0
1000022e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000231:	c9                   	leave  
10000232:	c3                   	ret    

10000233 <strncpyxx(char*, char const*, unsigned long)>:
10000233:	55                   	push   ebp
10000234:	89 e5                	mov    ebp,esp
10000236:	83 ec 10             	sub    esp,0x10
10000239:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000023c:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
1000023f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000242:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
10000245:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
10000249:	74 23                	je     1000026e <strncpyxx(char*, char const*, unsigned long)+0x3b>
1000024b:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
1000024e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10000251:	8d 42 01             	lea    eax,[edx+0x1]
10000254:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
10000257:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000025a:	8d 48 01             	lea    ecx,[eax+0x1]
1000025d:	89 4d fc             	mov    DWORD PTR [ebp-0x4],ecx
10000260:	8a 12                	mov    dl,BYTE PTR [edx]
10000262:	88 10                	mov    BYTE PTR [eax],dl
10000264:	8a 00                	mov    al,BYTE PTR [eax]
10000266:	84 c0                	test   al,al
10000268:	74 04                	je     1000026e <strncpyxx(char*, char const*, unsigned long)+0x3b>
1000026a:	b0 01                	mov    al,0x1
1000026c:	eb 02                	jmp    10000270 <strncpyxx(char*, char const*, unsigned long)+0x3d>
1000026e:	b0 00                	mov    al,0x0
10000270:	84 c0                	test   al,al
10000272:	74 02                	je     10000276 <strncpyxx(char*, char const*, unsigned long)+0x43>
10000274:	eb cf                	jmp    10000245 <strncpyxx(char*, char const*, unsigned long)+0x12>
10000276:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
10000279:	8d 50 ff             	lea    edx,[eax-0x1]
1000027c:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
1000027f:	85 c0                	test   eax,eax
10000281:	0f 95 c0             	setne  al
10000284:	84 c0                	test   al,al
10000286:	74 0b                	je     10000293 <strncpyxx(char*, char const*, unsigned long)+0x60>
10000288:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000028b:	c6 00 00             	mov    BYTE PTR [eax],0x0
1000028e:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
10000291:	eb e3                	jmp    10000276 <strncpyxx(char*, char const*, unsigned long)+0x43>
10000293:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000296:	c9                   	leave  
10000297:	c3                   	ret    

10000298 <strcmp>:
10000298:	55                   	push   ebp
10000299:	89 e5                	mov    ebp,esp
1000029b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000029e:	8a 10                	mov    dl,BYTE PTR [eax]
100002a0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100002a3:	8a 00                	mov    al,BYTE PTR [eax]
100002a5:	38 c2                	cmp    dl,al
100002a7:	75 20                	jne    100002c9 <strcmp+0x31>
100002a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002ac:	8d 50 01             	lea    edx,[eax+0x1]
100002af:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
100002b2:	8a 00                	mov    al,BYTE PTR [eax]
100002b4:	84 c0                	test   al,al
100002b6:	0f 94 c0             	sete   al
100002b9:	84 c0                	test   al,al
100002bb:	74 07                	je     100002c4 <strcmp+0x2c>
100002bd:	b8 00 00 00 00       	mov    eax,0x0
100002c2:	eb 19                	jmp    100002dd <strcmp+0x45>
100002c4:	ff 45 0c             	inc    DWORD PTR [ebp+0xc]
100002c7:	eb d2                	jmp    1000029b <strcmp+0x3>
100002c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002cc:	8a 00                	mov    al,BYTE PTR [eax]
100002ce:	0f b6 d0             	movzx  edx,al
100002d1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100002d4:	8a 00                	mov    al,BYTE PTR [eax]
100002d6:	0f b6 c0             	movzx  eax,al
100002d9:	29 c2                	sub    edx,eax
100002db:	89 d0                	mov    eax,edx
100002dd:	5d                   	pop    ebp
100002de:	c3                   	ret    

100002df <strchr(char const*, int)>:
100002df:	55                   	push   ebp
100002e0:	89 e5                	mov    ebp,esp
100002e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002e5:	8a 00                	mov    al,BYTE PTR [eax]
100002e7:	84 c0                	test   al,al
100002e9:	74 16                	je     10000301 <strchr(char const*, int)+0x22>
100002eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002ee:	8a 00                	mov    al,BYTE PTR [eax]
100002f0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
100002f3:	38 d0                	cmp    al,dl
100002f5:	75 05                	jne    100002fc <strchr(char const*, int)+0x1d>
100002f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002fa:	eb 0a                	jmp    10000306 <strchr(char const*, int)+0x27>
100002fc:	ff 45 08             	inc    DWORD PTR [ebp+0x8]
100002ff:	eb e1                	jmp    100002e2 <strchr(char const*, int)+0x3>
10000301:	b8 00 00 00 00       	mov    eax,0x0
10000306:	5d                   	pop    ebp
10000307:	c3                   	ret    

10000308 <strncmp>:
10000308:	55                   	push   ebp
10000309:	89 e5                	mov    ebp,esp
1000030b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
1000030e:	8d 50 ff             	lea    edx,[eax-0x1]
10000311:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
10000314:	85 c0                	test   eax,eax
10000316:	74 12                	je     1000032a <strncmp+0x22>
10000318:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000031b:	8a 10                	mov    dl,BYTE PTR [eax]
1000031d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000320:	8a 00                	mov    al,BYTE PTR [eax]
10000322:	38 c2                	cmp    dl,al
10000324:	75 04                	jne    1000032a <strncmp+0x22>
10000326:	b0 01                	mov    al,0x1
10000328:	eb 02                	jmp    1000032c <strncmp+0x24>
1000032a:	b0 00                	mov    al,0x0
1000032c:	84 c0                	test   al,al
1000032e:	74 20                	je     10000350 <strncmp+0x48>
10000330:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000333:	8d 50 01             	lea    edx,[eax+0x1]
10000336:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
10000339:	8a 00                	mov    al,BYTE PTR [eax]
1000033b:	84 c0                	test   al,al
1000033d:	0f 94 c0             	sete   al
10000340:	84 c0                	test   al,al
10000342:	74 07                	je     1000034b <strncmp+0x43>
10000344:	b8 00 00 00 00       	mov    eax,0x0
10000349:	eb 19                	jmp    10000364 <strncmp+0x5c>
1000034b:	ff 45 0c             	inc    DWORD PTR [ebp+0xc]
1000034e:	eb bb                	jmp    1000030b <strncmp+0x3>
10000350:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000353:	8a 00                	mov    al,BYTE PTR [eax]
10000355:	0f b6 d0             	movzx  edx,al
10000358:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
1000035b:	8a 00                	mov    al,BYTE PTR [eax]
1000035d:	0f b6 c0             	movzx  eax,al
10000360:	29 c2                	sub    edx,eax
10000362:	89 d0                	mov    eax,edx
10000364:	5d                   	pop    ebp
10000365:	c3                   	ret    

10000366 <strcat>:
10000366:	55                   	push   ebp
10000367:	89 e5                	mov    ebp,esp
10000369:	83 ec 10             	sub    esp,0x10
1000036c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000036f:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
10000372:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000375:	8d 50 01             	lea    edx,[eax+0x1]
10000378:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
1000037b:	8a 00                	mov    al,BYTE PTR [eax]
1000037d:	84 c0                	test   al,al
1000037f:	0f 95 c0             	setne  al
10000382:	84 c0                	test   al,al
10000384:	74 02                	je     10000388 <strcat+0x22>
10000386:	eb ea                	jmp    10000372 <strcat+0xc>
10000388:	ff 4d fc             	dec    DWORD PTR [ebp-0x4]
1000038b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
1000038e:	8d 42 01             	lea    eax,[edx+0x1]
10000391:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
10000394:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000397:	8d 48 01             	lea    ecx,[eax+0x1]
1000039a:	89 4d fc             	mov    DWORD PTR [ebp-0x4],ecx
1000039d:	8a 12                	mov    dl,BYTE PTR [edx]
1000039f:	88 10                	mov    BYTE PTR [eax],dl
100003a1:	8a 00                	mov    al,BYTE PTR [eax]
100003a3:	84 c0                	test   al,al
100003a5:	0f 95 c0             	setne  al
100003a8:	84 c0                	test   al,al
100003aa:	74 02                	je     100003ae <strcat+0x48>
100003ac:	eb dd                	jmp    1000038b <strcat+0x25>
100003ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100003b1:	c9                   	leave  
100003b2:	c3                   	ret    

100003b3 <strncat(char*, char const*, unsigned long)>:
100003b3:	55                   	push   ebp
100003b4:	89 e5                	mov    ebp,esp
100003b6:	83 ec 10             	sub    esp,0x10
100003b9:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
100003bd:	74 5c                	je     1000041b <strncat(char*, char const*, unsigned long)+0x68>
100003bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100003c2:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
100003c5:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100003c8:	8d 50 01             	lea    edx,[eax+0x1]
100003cb:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
100003ce:	8a 00                	mov    al,BYTE PTR [eax]
100003d0:	84 c0                	test   al,al
100003d2:	0f 95 c0             	setne  al
100003d5:	84 c0                	test   al,al
100003d7:	74 02                	je     100003db <strncat(char*, char const*, unsigned long)+0x28>
100003d9:	eb ea                	jmp    100003c5 <strncat(char*, char const*, unsigned long)+0x12>
100003db:	ff 4d fc             	dec    DWORD PTR [ebp-0x4]
100003de:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
100003e1:	8d 42 01             	lea    eax,[edx+0x1]
100003e4:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
100003e7:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100003ea:	8d 48 01             	lea    ecx,[eax+0x1]
100003ed:	89 4d fc             	mov    DWORD PTR [ebp-0x4],ecx
100003f0:	8a 12                	mov    dl,BYTE PTR [edx]
100003f2:	88 10                	mov    BYTE PTR [eax],dl
100003f4:	8a 00                	mov    al,BYTE PTR [eax]
100003f6:	84 c0                	test   al,al
100003f8:	74 0d                	je     10000407 <strncat(char*, char const*, unsigned long)+0x54>
100003fa:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
100003fd:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
10000401:	74 04                	je     10000407 <strncat(char*, char const*, unsigned long)+0x54>
10000403:	b0 01                	mov    al,0x1
10000405:	eb 02                	jmp    10000409 <strncat(char*, char const*, unsigned long)+0x56>
10000407:	b0 00                	mov    al,0x0
10000409:	84 c0                	test   al,al
1000040b:	74 02                	je     1000040f <strncat(char*, char const*, unsigned long)+0x5c>
1000040d:	eb cf                	jmp    100003de <strncat(char*, char const*, unsigned long)+0x2b>
1000040f:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
10000413:	75 06                	jne    1000041b <strncat(char*, char const*, unsigned long)+0x68>
10000415:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000418:	c6 00 00             	mov    BYTE PTR [eax],0x0
1000041b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000041e:	c9                   	leave  
1000041f:	c3                   	ret    

10000420 <strstr(char*, char*)>:
10000420:	55                   	push   ebp
10000421:	89 e5                	mov    ebp,esp
10000423:	83 ec 10             	sub    esp,0x10
10000426:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10000429:	e8 fc ff ff ff       	call   1000042a <strstr(char*, char*)+0xa>	1000042a: R_386_PC32	strlen
1000042e:	83 c4 04             	add    esp,0x4
10000431:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
10000434:	83 7d fc 00          	cmp    DWORD PTR [ebp-0x4],0x0
10000438:	75 05                	jne    1000043f <strstr(char*, char*)+0x1f>
1000043a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000043d:	eb 3f                	jmp    1000047e <strstr(char*, char*)+0x5e>
1000043f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000442:	50                   	push   eax
10000443:	e8 fc ff ff ff       	call   10000444 <strstr(char*, char*)+0x24>	10000444: R_386_PC32	strlen
10000448:	83 c4 04             	add    esp,0x4
1000044b:	39 45 fc             	cmp    DWORD PTR [ebp-0x4],eax
1000044e:	77 29                	ja     10000479 <strstr(char*, char*)+0x59>
10000450:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000453:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
10000456:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10000459:	50                   	push   eax
1000045a:	e8 fc ff ff ff       	call   1000045b <strstr(char*, char*)+0x3b>	1000045b: R_386_PC32	memcmp(void*, void*, unsigned long)
1000045f:	83 c4 0c             	add    esp,0xc
10000462:	85 c0                	test   eax,eax
10000464:	0f 94 c0             	sete   al
10000467:	84 c0                	test   al,al
10000469:	74 05                	je     10000470 <strstr(char*, char*)+0x50>
1000046b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000046e:	eb 0e                	jmp    1000047e <strstr(char*, char*)+0x5e>
10000470:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000473:	40                   	inc    eax
10000474:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
10000477:	eb c6                	jmp    1000043f <strstr(char*, char*)+0x1f>
10000479:	b8 00 00 00 00       	mov    eax,0x0
1000047e:	c9                   	leave  
1000047f:	c3                   	ret    

10000480 <rmtree(char*)>:
10000480:	55                   	push   ebp
10000481:	89 e5                	mov    ebp,esp
10000483:	53                   	push   ebx
10000484:	81 ec 64 02 00 00    	sub    esp,0x264
1000048a:	68 2c 01 00 00       	push   0x12c
1000048f:	6a 00                	push   0x0
10000491:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
10000497:	50                   	push   eax
10000498:	e8 fc ff ff ff       	call   10000499 <rmtree(char*)+0x19>	10000499: R_386_PC32	memset
1000049d:	83 c4 0c             	add    esp,0xc
100004a0:	8d 85 a8 fd ff ff    	lea    eax,[ebp-0x258]
100004a6:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
100004a9:	83 ec 0c             	sub    esp,0xc
100004ac:	68 14 01 00 00       	push   0x114
100004b1:	e8 fc ff ff ff       	call   100004b2 <rmtree(char*)+0x32>	100004b2: R_386_PC32	operator new(unsigned long)
100004b6:	83 c4 10             	add    esp,0x10
100004b9:	89 c3                	mov    ebx,eax
100004bb:	b8 00 20 00 c2       	mov    eax,0xc2002000
100004c0:	8b 00                	mov    eax,DWORD PTR [eax]
100004c2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
100004c5:	83 ec 04             	sub    esp,0x4
100004c8:	50                   	push   eax
100004c9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100004cc:	53                   	push   ebx
100004cd:	e8 fc ff ff ff       	call   100004ce <rmtree(char*)+0x4e>	100004ce: R_386_PC32	Directory::Directory(char const*, Process*)
100004d2:	83 c4 10             	add    esp,0x10
100004d5:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
100004d8:	83 ec 0c             	sub    esp,0xc
100004db:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
100004de:	e8 fc ff ff ff       	call   100004df <rmtree(char*)+0x5f>	100004df: R_386_PC32	Directory::open()
100004e3:	83 c4 10             	add    esp,0x10
100004e6:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
100004e9:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
100004ed:	74 24                	je     10000513 <rmtree(char*)+0x93>
100004ef:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
100004f3:	0f 84 8b 01 00 00    	je     10000684 <rmtree(char*)+0x204>
100004f9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100004fc:	8b 00                	mov    eax,DWORD PTR [eax]
100004fe:	83 c0 08             	add    eax,0x8
10000501:	8b 00                	mov    eax,DWORD PTR [eax]
10000503:	83 ec 0c             	sub    esp,0xc
10000506:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000509:	ff d0                	call   eax
1000050b:	83 c4 10             	add    esp,0x10
1000050e:	e9 72 01 00 00       	jmp    10000685 <rmtree(char*)+0x205>
10000513:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10000516:	8b 00                	mov    eax,DWORD PTR [eax]
10000518:	83 c0 0c             	add    eax,0xc
1000051b:	8b 00                	mov    eax,DWORD PTR [eax]
1000051d:	83 ec 0c             	sub    esp,0xc
10000520:	8d 95 a4 fd ff ff    	lea    edx,[ebp-0x25c]
10000526:	52                   	push   edx
10000527:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
1000052a:	6a 00                	push   0x0
1000052c:	68 10 01 00 00       	push   0x110
10000531:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000534:	ff d0                	call   eax
10000536:	83 c4 20             	add    esp,0x20
10000539:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
1000053c:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
10000540:	0f 85 04 01 00 00    	jne    1000064a <rmtree(char*)+0x1ca>
10000546:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10000549:	83 c0 10             	add    eax,0x10
1000054c:	83 ec 08             	sub    esp,0x8
1000054f:	68 60 53 00 10       	push   0x10005360	10000550: R_386_32	.text
10000554:	50                   	push   eax
10000555:	e8 fc ff ff ff       	call   10000556 <rmtree(char*)+0xd6>	10000556: R_386_PC32	strcmp
1000055a:	83 c4 10             	add    esp,0x10
1000055d:	85 c0                	test   eax,eax
1000055f:	74 b2                	je     10000513 <rmtree(char*)+0x93>
10000561:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10000564:	83 c0 10             	add    eax,0x10
10000567:	83 ec 08             	sub    esp,0x8
1000056a:	68 62 53 00 10       	push   0x10005362	1000056b: R_386_32	.text
1000056f:	50                   	push   eax
10000570:	e8 fc ff ff ff       	call   10000571 <rmtree(char*)+0xf1>	10000571: R_386_PC32	strcmp
10000575:	83 c4 10             	add    esp,0x10
10000578:	85 c0                	test   eax,eax
1000057a:	74 97                	je     10000513 <rmtree(char*)+0x93>
1000057c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
1000057f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
10000582:	83 e0 02             	and    eax,0x2
10000585:	85 c0                	test   eax,eax
10000587:	74 17                	je     100005a0 <rmtree(char*)+0x120>
10000589:	83 ec 0c             	sub    esp,0xc
1000058c:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
10000592:	50                   	push   eax
10000593:	e8 fc ff ff ff       	call   10000594 <rmtree(char*)+0x114>	10000594: R_386_PC32	rmtree(char*)
10000598:	83 c4 10             	add    esp,0x10
1000059b:	e9 73 ff ff ff       	jmp    10000513 <rmtree(char*)+0x93>
100005a0:	83 ec 08             	sub    esp,0x8
100005a3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100005a6:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
100005ac:	50                   	push   eax
100005ad:	e8 fc ff ff ff       	call   100005ae <rmtree(char*)+0x12e>	100005ae: R_386_PC32	strcpy
100005b2:	83 c4 10             	add    esp,0x10
100005b5:	83 ec 08             	sub    esp,0x8
100005b8:	68 65 53 00 10       	push   0x10005365	100005b9: R_386_32	.text
100005bd:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
100005c3:	50                   	push   eax
100005c4:	e8 fc ff ff ff       	call   100005c5 <rmtree(char*)+0x145>	100005c5: R_386_PC32	strcat
100005c9:	83 c4 10             	add    esp,0x10
100005cc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
100005cf:	83 c0 10             	add    eax,0x10
100005d2:	83 ec 08             	sub    esp,0x8
100005d5:	50                   	push   eax
100005d6:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
100005dc:	50                   	push   eax
100005dd:	e8 fc ff ff ff       	call   100005de <rmtree(char*)+0x15e>	100005de: R_386_PC32	strcat
100005e2:	83 c4 10             	add    esp,0x10
100005e5:	83 ec 0c             	sub    esp,0xc
100005e8:	68 14 01 00 00       	push   0x114
100005ed:	e8 fc ff ff ff       	call   100005ee <rmtree(char*)+0x16e>	100005ee: R_386_PC32	operator new(unsigned long)
100005f2:	83 c4 10             	add    esp,0x10
100005f5:	89 c3                	mov    ebx,eax
100005f7:	b8 00 20 00 c2       	mov    eax,0xc2002000
100005fc:	8b 00                	mov    eax,DWORD PTR [eax]
100005fe:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
10000601:	83 ec 04             	sub    esp,0x4
10000604:	50                   	push   eax
10000605:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
1000060b:	50                   	push   eax
1000060c:	53                   	push   ebx
1000060d:	e8 fc ff ff ff       	call   1000060e <rmtree(char*)+0x18e>	1000060e: R_386_PC32	File::File(char const*, Process*)
10000612:	83 c4 10             	add    esp,0x10
10000615:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
10000618:	83 ec 0c             	sub    esp,0xc
1000061b:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
1000061e:	e8 fc ff ff ff       	call   1000061f <rmtree(char*)+0x19f>	1000061f: R_386_PC32	File::unlink()
10000623:	83 c4 10             	add    esp,0x10
10000626:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
1000062a:	0f 84 e3 fe ff ff    	je     10000513 <rmtree(char*)+0x93>
10000630:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10000633:	8b 00                	mov    eax,DWORD PTR [eax]
10000635:	83 c0 08             	add    eax,0x8
10000638:	8b 00                	mov    eax,DWORD PTR [eax]
1000063a:	83 ec 0c             	sub    esp,0xc
1000063d:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
10000640:	ff d0                	call   eax
10000642:	83 c4 10             	add    esp,0x10
10000645:	e9 c9 fe ff ff       	jmp    10000513 <rmtree(char*)+0x93>
1000064a:	90                   	nop
1000064b:	83 ec 0c             	sub    esp,0xc
1000064e:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000651:	e8 fc ff ff ff       	call   10000652 <rmtree(char*)+0x1d2>	10000652: R_386_PC32	Directory::close()
10000656:	83 c4 10             	add    esp,0x10
10000659:	83 ec 0c             	sub    esp,0xc
1000065c:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
1000065f:	e8 fc ff ff ff       	call   10000660 <rmtree(char*)+0x1e0>	10000660: R_386_PC32	Directory::unlink()
10000664:	83 c4 10             	add    esp,0x10
10000667:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
1000066b:	74 18                	je     10000685 <rmtree(char*)+0x205>
1000066d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10000670:	8b 00                	mov    eax,DWORD PTR [eax]
10000672:	83 c0 08             	add    eax,0x8
10000675:	8b 00                	mov    eax,DWORD PTR [eax]
10000677:	83 ec 0c             	sub    esp,0xc
1000067a:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
1000067d:	ff d0                	call   eax
1000067f:	83 c4 10             	add    esp,0x10
10000682:	eb 01                	jmp    10000685 <rmtree(char*)+0x205>
10000684:	90                   	nop
10000685:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
10000688:	c9                   	leave  
10000689:	c3                   	ret    

1000068a <mkdir(char const*, int)>:
1000068a:	55                   	push   ebp
1000068b:	89 e5                	mov    ebp,esp
1000068d:	53                   	push   ebx
1000068e:	83 ec 14             	sub    esp,0x14
10000691:	83 ec 0c             	sub    esp,0xc
10000694:	68 14 01 00 00       	push   0x114
10000699:	e8 fc ff ff ff       	call   1000069a <mkdir(char const*, int)+0x10>	1000069a: R_386_PC32	operator new(unsigned long)
1000069e:	83 c4 10             	add    esp,0x10
100006a1:	89 c3                	mov    ebx,eax
100006a3:	a1 00 00 00 00       	mov    eax,ds:0x0	100006a4: R_386_32	kernelProcess
100006a8:	83 ec 04             	sub    esp,0x4
100006ab:	50                   	push   eax
100006ac:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100006af:	53                   	push   ebx
100006b0:	e8 fc ff ff ff       	call   100006b1 <mkdir(char const*, int)+0x27>	100006b1: R_386_PC32	Directory::Directory(char const*, Process*)
100006b5:	83 c4 10             	add    esp,0x10
100006b8:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
100006bb:	83 ec 0c             	sub    esp,0xc
100006be:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
100006c1:	e8 fc ff ff ff       	call   100006c2 <mkdir(char const*, int)+0x38>	100006c2: R_386_PC32	Directory::create()
100006c6:	83 c4 10             	add    esp,0x10
100006c9:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
100006cd:	74 15                	je     100006e4 <mkdir(char const*, int)+0x5a>
100006cf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
100006d2:	8b 00                	mov    eax,DWORD PTR [eax]
100006d4:	83 c0 08             	add    eax,0x8
100006d7:	8b 00                	mov    eax,DWORD PTR [eax]
100006d9:	83 ec 0c             	sub    esp,0xc
100006dc:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
100006df:	ff d0                	call   eax
100006e1:	83 c4 10             	add    esp,0x10
100006e4:	b8 00 00 00 00       	mov    eax,0x0
100006e9:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
100006ec:	c9                   	leave  
100006ed:	c3                   	ret    

100006ee <copytree(char*, char*)>:
100006ee:	55                   	push   ebp
100006ef:	89 e5                	mov    ebp,esp
100006f1:	53                   	push   ebx
100006f2:	81 ec 54 01 00 00    	sub    esp,0x154
100006f8:	83 ec 0c             	sub    esp,0xc
100006fb:	68 90 01 00 00       	push   0x190
10000700:	e8 fc ff ff ff       	call   10000701 <copytree(char*, char*)+0x13>	10000701: R_386_PC32	malloc
10000705:	83 c4 10             	add    esp,0x10
10000708:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
1000070b:	83 ec 0c             	sub    esp,0xc
1000070e:	68 90 01 00 00       	push   0x190
10000713:	e8 fc ff ff ff       	call   10000714 <copytree(char*, char*)+0x26>	10000714: R_386_PC32	malloc
10000718:	83 c4 10             	add    esp,0x10
1000071b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
1000071e:	83 ec 04             	sub    esp,0x4
10000721:	68 90 01 00 00       	push   0x190
10000726:	6a 00                	push   0x0
10000728:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
1000072b:	e8 fc ff ff ff       	call   1000072c <copytree(char*, char*)+0x3e>	1000072c: R_386_PC32	memset
10000730:	83 c4 10             	add    esp,0x10
10000733:	83 ec 04             	sub    esp,0x4
10000736:	68 90 01 00 00       	push   0x190
1000073b:	6a 00                	push   0x0
1000073d:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000740:	e8 fc ff ff ff       	call   10000741 <copytree(char*, char*)+0x53>	10000741: R_386_PC32	memset
10000745:	83 c4 10             	add    esp,0x10
10000748:	8d 85 bc fe ff ff    	lea    eax,[ebp-0x144]
1000074e:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
10000751:	83 ec 0c             	sub    esp,0xc
10000754:	68 14 01 00 00       	push   0x114
10000759:	e8 fc ff ff ff       	call   1000075a <copytree(char*, char*)+0x6c>	1000075a: R_386_PC32	operator new(unsigned long)
1000075e:	83 c4 10             	add    esp,0x10
10000761:	89 c3                	mov    ebx,eax
10000763:	b8 00 20 00 c2       	mov    eax,0xc2002000
10000768:	8b 00                	mov    eax,DWORD PTR [eax]
1000076a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
1000076d:	83 ec 04             	sub    esp,0x4
10000770:	50                   	push   eax
10000771:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000774:	53                   	push   ebx
10000775:	e8 fc ff ff ff       	call   10000776 <copytree(char*, char*)+0x88>	10000776: R_386_PC32	Directory::Directory(char const*, Process*)
1000077a:	83 c4 10             	add    esp,0x10
1000077d:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
10000780:	83 ec 0c             	sub    esp,0xc
10000783:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
10000786:	e8 fc ff ff ff       	call   10000787 <copytree(char*, char*)+0x99>	10000787: R_386_PC32	Directory::open()
1000078b:	83 c4 10             	add    esp,0x10
1000078e:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10000791:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
10000795:	74 34                	je     100007cb <copytree(char*, char*)+0xdd>
10000797:	83 ec 0c             	sub    esp,0xc
1000079a:	68 67 53 00 10       	push   0x10005367	1000079b: R_386_32	.text
1000079f:	e8 fc ff ff ff       	call   100007a0 <copytree(char*, char*)+0xb2>	100007a0: R_386_PC32	Dbg::kprintf(char const*, ...)
100007a4:	83 c4 10             	add    esp,0x10
100007a7:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
100007ab:	0f 84 90 03 00 00    	je     10000b41 <copytree(char*, char*)+0x453>
100007b1:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
100007b4:	8b 00                	mov    eax,DWORD PTR [eax]
100007b6:	83 c0 08             	add    eax,0x8
100007b9:	8b 00                	mov    eax,DWORD PTR [eax]
100007bb:	83 ec 0c             	sub    esp,0xc
100007be:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
100007c1:	ff d0                	call   eax
100007c3:	83 c4 10             	add    esp,0x10
100007c6:	e9 76 03 00 00       	jmp    10000b41 <copytree(char*, char*)+0x453>
100007cb:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
100007ce:	8b 00                	mov    eax,DWORD PTR [eax]
100007d0:	83 c0 0c             	add    eax,0xc
100007d3:	8b 00                	mov    eax,DWORD PTR [eax]
100007d5:	83 ec 0c             	sub    esp,0xc
100007d8:	8d 95 b8 fe ff ff    	lea    edx,[ebp-0x148]
100007de:	52                   	push   edx
100007df:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
100007e2:	6a 00                	push   0x0
100007e4:	68 10 01 00 00       	push   0x110
100007e9:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
100007ec:	ff d0                	call   eax
100007ee:	83 c4 20             	add    esp,0x20
100007f1:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
100007f4:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
100007f8:	0f 85 fb 02 00 00    	jne    10000af9 <copytree(char*, char*)+0x40b>
100007fe:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
10000801:	83 c0 10             	add    eax,0x10
10000804:	83 ec 08             	sub    esp,0x8
10000807:	68 60 53 00 10       	push   0x10005360	10000808: R_386_32	.text
1000080c:	50                   	push   eax
1000080d:	e8 fc ff ff ff       	call   1000080e <copytree(char*, char*)+0x120>	1000080e: R_386_PC32	strcmp
10000812:	83 c4 10             	add    esp,0x10
10000815:	85 c0                	test   eax,eax
10000817:	74 b2                	je     100007cb <copytree(char*, char*)+0xdd>
10000819:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
1000081c:	83 c0 10             	add    eax,0x10
1000081f:	83 ec 08             	sub    esp,0x8
10000822:	68 62 53 00 10       	push   0x10005362	10000823: R_386_32	.text
10000827:	50                   	push   eax
10000828:	e8 fc ff ff ff       	call   10000829 <copytree(char*, char*)+0x13b>	10000829: R_386_PC32	strcmp
1000082d:	83 c4 10             	add    esp,0x10
10000830:	85 c0                	test   eax,eax
10000832:	74 97                	je     100007cb <copytree(char*, char*)+0xdd>
10000834:	83 ec 08             	sub    esp,0x8
10000837:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000083a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
1000083d:	e8 fc ff ff ff       	call   1000083e <copytree(char*, char*)+0x150>	1000083e: R_386_PC32	strcpy
10000842:	83 c4 10             	add    esp,0x10
10000845:	83 ec 08             	sub    esp,0x8
10000848:	68 65 53 00 10       	push   0x10005365	10000849: R_386_32	.text
1000084d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10000850:	e8 fc ff ff ff       	call   10000851 <copytree(char*, char*)+0x163>	10000851: R_386_PC32	strcat
10000855:	83 c4 10             	add    esp,0x10
10000858:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
1000085b:	83 c0 10             	add    eax,0x10
1000085e:	83 ec 08             	sub    esp,0x8
10000861:	50                   	push   eax
10000862:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10000865:	e8 fc ff ff ff       	call   10000866 <copytree(char*, char*)+0x178>	10000866: R_386_PC32	strcat
1000086a:	83 c4 10             	add    esp,0x10
1000086d:	83 ec 08             	sub    esp,0x8
10000870:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10000873:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000876:	e8 fc ff ff ff       	call   10000877 <copytree(char*, char*)+0x189>	10000877: R_386_PC32	strcpy
1000087b:	83 c4 10             	add    esp,0x10
1000087e:	83 ec 08             	sub    esp,0x8
10000881:	68 65 53 00 10       	push   0x10005365	10000882: R_386_32	.text
10000886:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000889:	e8 fc ff ff ff       	call   1000088a <copytree(char*, char*)+0x19c>	1000088a: R_386_PC32	strcat
1000088e:	83 c4 10             	add    esp,0x10
10000891:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
10000894:	83 c0 10             	add    eax,0x10
10000897:	83 ec 08             	sub    esp,0x8
1000089a:	50                   	push   eax
1000089b:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
1000089e:	e8 fc ff ff ff       	call   1000089f <copytree(char*, char*)+0x1b1>	1000089f: R_386_PC32	strcat
100008a3:	83 c4 10             	add    esp,0x10
100008a6:	83 ec 04             	sub    esp,0x4
100008a9:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
100008ac:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
100008af:	68 81 53 00 10       	push   0x10005381	100008b0: R_386_32	.text
100008b4:	e8 fc ff ff ff       	call   100008b5 <copytree(char*, char*)+0x1c7>	100008b5: R_386_PC32	Dbg::kprintf(char const*, ...)
100008b9:	83 c4 10             	add    esp,0x10
100008bc:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
100008bf:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
100008c2:	83 e0 02             	and    eax,0x2
100008c5:	85 c0                	test   eax,eax
100008c7:	74 47                	je     10000910 <copytree(char*, char*)+0x222>
100008c9:	83 ec 08             	sub    esp,0x8
100008cc:	68 c0 01 00 00       	push   0x1c0
100008d1:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
100008d4:	e8 fc ff ff ff       	call   100008d5 <copytree(char*, char*)+0x1e7>	100008d5: R_386_PC32	mkdir(char const*, int)
100008d9:	83 c4 10             	add    esp,0x10
100008dc:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
100008df:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
100008e3:	74 15                	je     100008fa <copytree(char*, char*)+0x20c>
100008e5:	83 ec 0c             	sub    esp,0xc
100008e8:	68 8b 53 00 10       	push   0x1000538b	100008e9: R_386_32	.text
100008ed:	e8 fc ff ff ff       	call   100008ee <copytree(char*, char*)+0x200>	100008ee: R_386_PC32	KePanic(char const*)
100008f2:	83 c4 10             	add    esp,0x10
100008f5:	e9 d1 fe ff ff       	jmp    100007cb <copytree(char*, char*)+0xdd>
100008fa:	83 ec 08             	sub    esp,0x8
100008fd:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000900:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10000903:	e8 fc ff ff ff       	call   10000904 <copytree(char*, char*)+0x216>	10000904: R_386_PC32	copytree(char*, char*)
10000908:	83 c4 10             	add    esp,0x10
1000090b:	e9 bb fe ff ff       	jmp    100007cb <copytree(char*, char*)+0xdd>
10000910:	83 ec 0c             	sub    esp,0xc
10000913:	68 14 01 00 00       	push   0x114
10000918:	e8 fc ff ff ff       	call   10000919 <copytree(char*, char*)+0x22b>	10000919: R_386_PC32	operator new(unsigned long)
1000091d:	83 c4 10             	add    esp,0x10
10000920:	89 c3                	mov    ebx,eax
10000922:	b8 00 20 00 c2       	mov    eax,0xc2002000
10000927:	8b 00                	mov    eax,DWORD PTR [eax]
10000929:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
1000092c:	83 ec 04             	sub    esp,0x4
1000092f:	50                   	push   eax
10000930:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10000933:	53                   	push   ebx
10000934:	e8 fc ff ff ff       	call   10000935 <copytree(char*, char*)+0x247>	10000935: R_386_PC32	File::File(char const*, Process*)
10000939:	83 c4 10             	add    esp,0x10
1000093c:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
1000093f:	83 ec 08             	sub    esp,0x8
10000942:	6a 01                	push   0x1
10000944:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000947:	e8 fc ff ff ff       	call   10000948 <copytree(char*, char*)+0x25a>	10000948: R_386_PC32	File::open(FileOpenMode)
1000094c:	83 c4 10             	add    esp,0x10
1000094f:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
10000953:	75 15                	jne    1000096a <copytree(char*, char*)+0x27c>
10000955:	83 ec 0c             	sub    esp,0xc
10000958:	68 9c 53 00 10       	push   0x1000539c	10000959: R_386_32	.text
1000095d:	e8 fc ff ff ff       	call   1000095e <copytree(char*, char*)+0x270>	1000095e: R_386_PC32	KePanic(char const*)
10000962:	83 c4 10             	add    esp,0x10
10000965:	e9 8a 01 00 00       	jmp    10000af4 <copytree(char*, char*)+0x406>
1000096a:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
1000096e:	0f 84 57 fe ff ff    	je     100007cb <copytree(char*, char*)+0xdd>
10000974:	83 ec 0c             	sub    esp,0xc
10000977:	68 14 01 00 00       	push   0x114
1000097c:	e8 fc ff ff ff       	call   1000097d <copytree(char*, char*)+0x28f>	1000097d: R_386_PC32	operator new(unsigned long)
10000981:	83 c4 10             	add    esp,0x10
10000984:	89 c3                	mov    ebx,eax
10000986:	b8 00 20 00 c2       	mov    eax,0xc2002000
1000098b:	8b 00                	mov    eax,DWORD PTR [eax]
1000098d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
10000990:	83 ec 04             	sub    esp,0x4
10000993:	50                   	push   eax
10000994:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000997:	53                   	push   ebx
10000998:	e8 fc ff ff ff       	call   10000999 <copytree(char*, char*)+0x2ab>	10000999: R_386_PC32	File::File(char const*, Process*)
1000099d:	83 c4 10             	add    esp,0x10
100009a0:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
100009a3:	83 ec 08             	sub    esp,0x8
100009a6:	6a 12                	push   0x12
100009a8:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
100009ab:	e8 fc ff ff ff       	call   100009ac <copytree(char*, char*)+0x2be>	100009ac: R_386_PC32	File::open(FileOpenMode)
100009b0:	83 c4 10             	add    esp,0x10
100009b3:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
100009b7:	75 23                	jne    100009dc <copytree(char*, char*)+0x2ee>
100009b9:	83 ec 0c             	sub    esp,0xc
100009bc:	68 9c 53 00 10       	push   0x1000539c	100009bd: R_386_32	.text
100009c1:	e8 fc ff ff ff       	call   100009c2 <copytree(char*, char*)+0x2d4>	100009c2: R_386_PC32	KePanic(char const*)
100009c6:	83 c4 10             	add    esp,0x10
100009c9:	83 ec 0c             	sub    esp,0xc
100009cc:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
100009cf:	e8 fc ff ff ff       	call   100009d0 <copytree(char*, char*)+0x2e2>	100009d0: R_386_PC32	File::close()
100009d4:	83 c4 10             	add    esp,0x10
100009d7:	e9 18 01 00 00       	jmp    10000af4 <copytree(char*, char*)+0x406>
100009dc:	83 ec 0c             	sub    esp,0xc
100009df:	68 00 10 00 00       	push   0x1000
100009e4:	e8 fc ff ff ff       	call   100009e5 <copytree(char*, char*)+0x2f7>	100009e5: R_386_PC32	malloc
100009e9:	83 c4 10             	add    esp,0x10
100009ec:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
100009ef:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
100009f3:	75 31                	jne    10000a26 <copytree(char*, char*)+0x338>
100009f5:	83 ec 0c             	sub    esp,0xc
100009f8:	68 ab 53 00 10       	push   0x100053ab	100009f9: R_386_32	.text
100009fd:	e8 fc ff ff ff       	call   100009fe <copytree(char*, char*)+0x310>	100009fe: R_386_PC32	KePanic(char const*)
10000a02:	83 c4 10             	add    esp,0x10
10000a05:	83 ec 0c             	sub    esp,0xc
10000a08:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10000a0b:	e8 fc ff ff ff       	call   10000a0c <copytree(char*, char*)+0x31e>	10000a0c: R_386_PC32	free
10000a10:	83 c4 10             	add    esp,0x10
10000a13:	83 ec 0c             	sub    esp,0xc
10000a16:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000a19:	e8 fc ff ff ff       	call   10000a1a <copytree(char*, char*)+0x32c>	10000a1a: R_386_PC32	free
10000a1e:	83 c4 10             	add    esp,0x10
10000a21:	e9 1c 01 00 00       	jmp    10000b42 <copytree(char*, char*)+0x454>
10000a26:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10000a29:	8b 00                	mov    eax,DWORD PTR [eax]
10000a2b:	83 c0 0c             	add    eax,0xc
10000a2e:	8b 00                	mov    eax,DWORD PTR [eax]
10000a30:	83 ec 0c             	sub    esp,0xc
10000a33:	8d 95 b4 fe ff ff    	lea    edx,[ebp-0x14c]
10000a39:	52                   	push   edx
10000a3a:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10000a3d:	6a 00                	push   0x0
10000a3f:	68 00 10 00 00       	push   0x1000
10000a44:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000a47:	ff d0                	call   eax
10000a49:	83 c4 20             	add    esp,0x20
10000a4c:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
10000a4f:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
10000a53:	75 37                	jne    10000a8c <copytree(char*, char*)+0x39e>
10000a55:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000a58:	8b 00                	mov    eax,DWORD PTR [eax]
10000a5a:	83 c0 10             	add    eax,0x10
10000a5d:	8b 08                	mov    ecx,DWORD PTR [eax]
10000a5f:	8b 85 b4 fe ff ff    	mov    eax,DWORD PTR [ebp-0x14c]
10000a65:	99                   	cdq    
10000a66:	83 ec 0c             	sub    esp,0xc
10000a69:	8d 9d b0 fe ff ff    	lea    ebx,[ebp-0x150]
10000a6f:	53                   	push   ebx
10000a70:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10000a73:	52                   	push   edx
10000a74:	50                   	push   eax
10000a75:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
10000a78:	ff d1                	call   ecx
10000a7a:	83 c4 20             	add    esp,0x20
10000a7d:	8b 85 b4 fe ff ff    	mov    eax,DWORD PTR [ebp-0x14c]
10000a83:	3d 00 10 00 00       	cmp    eax,0x1000
10000a88:	75 05                	jne    10000a8f <copytree(char*, char*)+0x3a1>
10000a8a:	eb 9a                	jmp    10000a26 <copytree(char*, char*)+0x338>
10000a8c:	90                   	nop
10000a8d:	eb 01                	jmp    10000a90 <copytree(char*, char*)+0x3a2>
10000a8f:	90                   	nop
10000a90:	83 ec 0c             	sub    esp,0xc
10000a93:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10000a96:	e8 fc ff ff ff       	call   10000a97 <copytree(char*, char*)+0x3a9>	10000a97: R_386_PC32	free
10000a9b:	83 c4 10             	add    esp,0x10
10000a9e:	83 ec 0c             	sub    esp,0xc
10000aa1:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000aa4:	e8 fc ff ff ff       	call   10000aa5 <copytree(char*, char*)+0x3b7>	10000aa5: R_386_PC32	File::close()
10000aa9:	83 c4 10             	add    esp,0x10
10000aac:	83 ec 0c             	sub    esp,0xc
10000aaf:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
10000ab2:	e8 fc ff ff ff       	call   10000ab3 <copytree(char*, char*)+0x3c5>	10000ab3: R_386_PC32	File::close()
10000ab7:	83 c4 10             	add    esp,0x10
10000aba:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
10000abe:	74 15                	je     10000ad5 <copytree(char*, char*)+0x3e7>
10000ac0:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10000ac3:	8b 00                	mov    eax,DWORD PTR [eax]
10000ac5:	83 c0 08             	add    eax,0x8
10000ac8:	8b 00                	mov    eax,DWORD PTR [eax]
10000aca:	83 ec 0c             	sub    esp,0xc
10000acd:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000ad0:	ff d0                	call   eax
10000ad2:	83 c4 10             	add    esp,0x10
10000ad5:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
10000ad9:	0f 84 ec fc ff ff    	je     100007cb <copytree(char*, char*)+0xdd>
10000adf:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000ae2:	8b 00                	mov    eax,DWORD PTR [eax]
10000ae4:	83 c0 08             	add    eax,0x8
10000ae7:	8b 00                	mov    eax,DWORD PTR [eax]
10000ae9:	83 ec 0c             	sub    esp,0xc
10000aec:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
10000aef:	ff d0                	call   eax
10000af1:	83 c4 10             	add    esp,0x10
10000af4:	e9 d2 fc ff ff       	jmp    100007cb <copytree(char*, char*)+0xdd>
10000af9:	90                   	nop
10000afa:	83 ec 0c             	sub    esp,0xc
10000afd:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10000b00:	e8 fc ff ff ff       	call   10000b01 <copytree(char*, char*)+0x413>	10000b01: R_386_PC32	free
10000b05:	83 c4 10             	add    esp,0x10
10000b08:	83 ec 0c             	sub    esp,0xc
10000b0b:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000b0e:	e8 fc ff ff ff       	call   10000b0f <copytree(char*, char*)+0x421>	10000b0f: R_386_PC32	free
10000b13:	83 c4 10             	add    esp,0x10
10000b16:	83 ec 0c             	sub    esp,0xc
10000b19:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
10000b1c:	e8 fc ff ff ff       	call   10000b1d <copytree(char*, char*)+0x42f>	10000b1d: R_386_PC32	Directory::close()
10000b21:	83 c4 10             	add    esp,0x10
10000b24:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
10000b28:	74 18                	je     10000b42 <copytree(char*, char*)+0x454>
10000b2a:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
10000b2d:	8b 00                	mov    eax,DWORD PTR [eax]
10000b2f:	83 c0 08             	add    eax,0x8
10000b32:	8b 00                	mov    eax,DWORD PTR [eax]
10000b34:	83 ec 0c             	sub    esp,0xc
10000b37:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
10000b3a:	ff d0                	call   eax
10000b3c:	83 c4 10             	add    esp,0x10
10000b3f:	eb 01                	jmp    10000b42 <copytree(char*, char*)+0x454>
10000b41:	90                   	nop
10000b42:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
10000b45:	c9                   	leave  
10000b46:	c3                   	ret    

10000b47 <backupTree(char*, unsigned short)>:
10000b47:	55                   	push   ebp
10000b48:	89 e5                	mov    ebp,esp
10000b4a:	57                   	push   edi
10000b4b:	56                   	push   esi
10000b4c:	53                   	push   ebx
10000b4d:	81 ec 8c 12 00 00    	sub    esp,0x128c
10000b53:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000b56:	66 89 85 74 ed ff ff 	mov    WORD PTR [ebp-0x128c],ax
10000b5d:	83 ec 0c             	sub    esp,0xc
10000b60:	68 90 01 00 00       	push   0x190
10000b65:	e8 fc ff ff ff       	call   10000b66 <backupTree(char*, unsigned short)+0x1f>	10000b66: R_386_PC32	malloc
10000b6a:	83 c4 10             	add    esp,0x10
10000b6d:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
10000b70:	83 ec 04             	sub    esp,0x4
10000b73:	68 90 01 00 00       	push   0x190
10000b78:	6a 00                	push   0x0
10000b7a:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000b7d:	e8 fc ff ff ff       	call   10000b7e <backupTree(char*, unsigned short)+0x37>	10000b7e: R_386_PC32	memset
10000b82:	83 c4 10             	add    esp,0x10
10000b85:	8d 85 a8 fe ff ff    	lea    eax,[ebp-0x158]
10000b8b:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
10000b8e:	83 ec 0c             	sub    esp,0xc
10000b91:	68 14 01 00 00       	push   0x114
10000b96:	e8 fc ff ff ff       	call   10000b97 <backupTree(char*, unsigned short)+0x50>	10000b97: R_386_PC32	operator new(unsigned long)
10000b9b:	83 c4 10             	add    esp,0x10
10000b9e:	89 c3                	mov    ebx,eax
10000ba0:	b8 00 20 00 c2       	mov    eax,0xc2002000
10000ba5:	8b 00                	mov    eax,DWORD PTR [eax]
10000ba7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
10000baa:	83 ec 04             	sub    esp,0x4
10000bad:	50                   	push   eax
10000bae:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000bb1:	53                   	push   ebx
10000bb2:	e8 fc ff ff ff       	call   10000bb3 <backupTree(char*, unsigned short)+0x6c>	10000bb3: R_386_PC32	Directory::Directory(char const*, Process*)
10000bb7:	83 c4 10             	add    esp,0x10
10000bba:	89 5d d0             	mov    DWORD PTR [ebp-0x30],ebx
10000bbd:	83 ec 0c             	sub    esp,0xc
10000bc0:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10000bc3:	e8 fc ff ff ff       	call   10000bc4 <backupTree(char*, unsigned short)+0x7d>	10000bc4: R_386_PC32	Directory::open()
10000bc8:	83 c4 10             	add    esp,0x10
10000bcb:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
10000bce:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
10000bd2:	74 34                	je     10000c08 <backupTree(char*, unsigned short)+0xc1>
10000bd4:	83 ec 0c             	sub    esp,0xc
10000bd7:	68 67 53 00 10       	push   0x10005367	10000bd8: R_386_32	.text
10000bdc:	e8 fc ff ff ff       	call   10000bdd <backupTree(char*, unsigned short)+0x96>	10000bdd: R_386_PC32	Dbg::kprintf(char const*, ...)
10000be1:	83 c4 10             	add    esp,0x10
10000be4:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
10000be8:	0f 84 c8 05 00 00    	je     100011b6 <backupTree(char*, unsigned short)+0x66f>
10000bee:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
10000bf1:	8b 00                	mov    eax,DWORD PTR [eax]
10000bf3:	83 c0 08             	add    eax,0x8
10000bf6:	8b 00                	mov    eax,DWORD PTR [eax]
10000bf8:	83 ec 0c             	sub    esp,0xc
10000bfb:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10000bfe:	ff d0                	call   eax
10000c00:	83 c4 10             	add    esp,0x10
10000c03:	e9 af 05 00 00       	jmp    100011b7 <backupTree(char*, unsigned short)+0x670>
10000c08:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
10000c0b:	8b 00                	mov    eax,DWORD PTR [eax]
10000c0d:	83 c0 0c             	add    eax,0xc
10000c10:	8b 00                	mov    eax,DWORD PTR [eax]
10000c12:	83 ec 0c             	sub    esp,0xc
10000c15:	8d 95 a4 fe ff ff    	lea    edx,[ebp-0x15c]
10000c1b:	52                   	push   edx
10000c1c:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
10000c1f:	6a 00                	push   0x0
10000c21:	68 10 01 00 00       	push   0x110
10000c26:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10000c29:	ff d0                	call   eax
10000c2b:	83 c4 20             	add    esp,0x20
10000c2e:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
10000c31:	83 7d c8 00          	cmp    DWORD PTR [ebp-0x38],0x0
10000c35:	0f 85 41 05 00 00    	jne    1000117c <backupTree(char*, unsigned short)+0x635>
10000c3b:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000c3e:	83 c0 10             	add    eax,0x10
10000c41:	83 ec 08             	sub    esp,0x8
10000c44:	68 60 53 00 10       	push   0x10005360	10000c45: R_386_32	.text
10000c49:	50                   	push   eax
10000c4a:	e8 fc ff ff ff       	call   10000c4b <backupTree(char*, unsigned short)+0x104>	10000c4b: R_386_PC32	strcmp
10000c4f:	83 c4 10             	add    esp,0x10
10000c52:	85 c0                	test   eax,eax
10000c54:	74 b2                	je     10000c08 <backupTree(char*, unsigned short)+0xc1>
10000c56:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000c59:	83 c0 10             	add    eax,0x10
10000c5c:	83 ec 08             	sub    esp,0x8
10000c5f:	68 62 53 00 10       	push   0x10005362	10000c60: R_386_32	.text
10000c64:	50                   	push   eax
10000c65:	e8 fc ff ff ff       	call   10000c66 <backupTree(char*, unsigned short)+0x11f>	10000c66: R_386_PC32	strcmp
10000c6a:	83 c4 10             	add    esp,0x10
10000c6d:	85 c0                	test   eax,eax
10000c6f:	74 97                	je     10000c08 <backupTree(char*, unsigned short)+0xc1>
10000c71:	83 ec 08             	sub    esp,0x8
10000c74:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000c77:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000c7a:	e8 fc ff ff ff       	call   10000c7b <backupTree(char*, unsigned short)+0x134>	10000c7b: R_386_PC32	strcpy
10000c7f:	83 c4 10             	add    esp,0x10
10000c82:	83 ec 08             	sub    esp,0x8
10000c85:	68 65 53 00 10       	push   0x10005365	10000c86: R_386_32	.text
10000c8a:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000c8d:	e8 fc ff ff ff       	call   10000c8e <backupTree(char*, unsigned short)+0x147>	10000c8e: R_386_PC32	strcat
10000c92:	83 c4 10             	add    esp,0x10
10000c95:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000c98:	83 c0 10             	add    eax,0x10
10000c9b:	83 ec 08             	sub    esp,0x8
10000c9e:	50                   	push   eax
10000c9f:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000ca2:	e8 fc ff ff ff       	call   10000ca3 <backupTree(char*, unsigned short)+0x15c>	10000ca3: R_386_PC32	strcat
10000ca7:	83 c4 10             	add    esp,0x10
10000caa:	66 c7 45 e6 bc ad    	mov    WORD PTR [ebp-0x1a],0xadbc
10000cb0:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
10000cb7:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
10000cba:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10000cbd:	01 d0                	add    eax,edx
10000cbf:	83 c0 10             	add    eax,0x10
10000cc2:	8a 00                	mov    al,BYTE PTR [eax]
10000cc4:	84 c0                	test   al,al
10000cc6:	74 3c                	je     10000d04 <backupTree(char*, unsigned short)+0x1bd>
10000cc8:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
10000ccb:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10000cce:	01 d0                	add    eax,edx
10000cd0:	83 c0 10             	add    eax,0x10
10000cd3:	8a 00                	mov    al,BYTE PTR [eax]
10000cd5:	66 0f be d0          	movsx  dx,al
10000cd9:	66 8b 45 e6          	mov    ax,WORD PTR [ebp-0x1a]
10000cdd:	31 d0                	xor    eax,edx
10000cdf:	66 89 45 e6          	mov    WORD PTR [ebp-0x1a],ax
10000ce3:	0f b7 45 e6          	movzx  eax,WORD PTR [ebp-0x1a]
10000ce7:	c1 e0 03             	shl    eax,0x3
10000cea:	89 c2                	mov    edx,eax
10000cec:	0f b7 45 e6          	movzx  eax,WORD PTR [ebp-0x1a]
10000cf0:	c1 f8 0d             	sar    eax,0xd
10000cf3:	09 d0                	or     eax,edx
10000cf5:	66 89 45 e6          	mov    WORD PTR [ebp-0x1a],ax
10000cf9:	66 81 6d e6 f1 06    	sub    WORD PTR [ebp-0x1a],0x6f1
10000cff:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
10000d02:	eb b3                	jmp    10000cb7 <backupTree(char*, unsigned short)+0x170>
10000d04:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000d07:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
10000d0a:	83 e0 02             	and    eax,0x2
10000d0d:	85 c0                	test   eax,eax
10000d0f:	74 37                	je     10000d48 <backupTree(char*, unsigned short)+0x201>
10000d11:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000d14:	83 c0 10             	add    eax,0x10
10000d17:	83 ec 08             	sub    esp,0x8
10000d1a:	68 b5 53 00 10       	push   0x100053b5	10000d1b: R_386_32	.text
10000d1f:	50                   	push   eax
10000d20:	e8 fc ff ff ff       	call   10000d21 <backupTree(char*, unsigned short)+0x1da>	10000d21: R_386_PC32	strcmp
10000d25:	83 c4 10             	add    esp,0x10
10000d28:	85 c0                	test   eax,eax
10000d2a:	0f 84 d8 fe ff ff    	je     10000c08 <backupTree(char*, unsigned short)+0xc1>
10000d30:	0f b7 45 e6          	movzx  eax,WORD PTR [ebp-0x1a]
10000d34:	83 ec 08             	sub    esp,0x8
10000d37:	50                   	push   eax
10000d38:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000d3b:	e8 fc ff ff ff       	call   10000d3c <backupTree(char*, unsigned short)+0x1f5>	10000d3c: R_386_PC32	backupTree(char*, unsigned short)
10000d40:	83 c4 10             	add    esp,0x10
10000d43:	e9 c0 fe ff ff       	jmp    10000c08 <backupTree(char*, unsigned short)+0xc1>
10000d48:	c6 85 a3 fe ff ff 00 	mov    BYTE PTR [ebp-0x15d],0x0
10000d4f:	83 ec 08             	sub    esp,0x8
10000d52:	68 bc 53 00 10       	push   0x100053bc	10000d53: R_386_32	.text
10000d57:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000d5d:	50                   	push   eax
10000d5e:	e8 fc ff ff ff       	call   10000d5f <backupTree(char*, unsigned short)+0x218>	10000d5f: R_386_PC32	strcpy
10000d63:	83 c4 10             	add    esp,0x10
10000d66:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000d69:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
10000d6c:	88 85 a2 fe ff ff    	mov    BYTE PTR [ebp-0x15e],al
10000d72:	83 ec 08             	sub    esp,0x8
10000d75:	8d 85 a2 fe ff ff    	lea    eax,[ebp-0x15e]
10000d7b:	50                   	push   eax
10000d7c:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000d82:	50                   	push   eax
10000d83:	e8 fc ff ff ff       	call   10000d84 <backupTree(char*, unsigned short)+0x23d>	10000d84: R_386_PC32	strcat
10000d88:	83 c4 10             	add    esp,0x10
10000d8b:	83 ec 04             	sub    esp,0x4
10000d8e:	6a 09                	push   0x9
10000d90:	6a 00                	push   0x0
10000d92:	8d 85 99 fe ff ff    	lea    eax,[ebp-0x167]
10000d98:	50                   	push   eax
10000d99:	e8 fc ff ff ff       	call   10000d9a <backupTree(char*, unsigned short)+0x253>	10000d9a: R_386_PC32	memset
10000d9e:	83 c4 10             	add    esp,0x10
10000da1:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000da4:	83 c0 10             	add    eax,0x10
10000da7:	83 ec 04             	sub    esp,0x4
10000daa:	6a 08                	push   0x8
10000dac:	50                   	push   eax
10000dad:	8d 85 99 fe ff ff    	lea    eax,[ebp-0x167]
10000db3:	50                   	push   eax
10000db4:	e8 fc ff ff ff       	call   10000db5 <backupTree(char*, unsigned short)+0x26e>	10000db5: R_386_PC32	strncpyxx(char*, char const*, unsigned long)
10000db9:	83 c4 10             	add    esp,0x10
10000dbc:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
10000dc3:	83 7d dc 07          	cmp    DWORD PTR [ebp-0x24],0x7
10000dc7:	0f 8f c5 00 00 00    	jg     10000e92 <backupTree(char*, unsigned short)+0x34b>
10000dcd:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000dd3:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000dd6:	01 d0                	add    eax,edx
10000dd8:	8a 00                	mov    al,BYTE PTR [eax]
10000dda:	3c 60                	cmp    al,0x60
10000ddc:	7e 30                	jle    10000e0e <backupTree(char*, unsigned short)+0x2c7>
10000dde:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000de4:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000de7:	01 d0                	add    eax,edx
10000de9:	8a 00                	mov    al,BYTE PTR [eax]
10000deb:	3c 7a                	cmp    al,0x7a
10000ded:	7f 1f                	jg     10000e0e <backupTree(char*, unsigned short)+0x2c7>
10000def:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000df5:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000df8:	01 d0                	add    eax,edx
10000dfa:	8a 00                	mov    al,BYTE PTR [eax]
10000dfc:	83 e8 20             	sub    eax,0x20
10000dff:	88 c2                	mov    dl,al
10000e01:	8d 8d 99 fe ff ff    	lea    ecx,[ebp-0x167]
10000e07:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e0a:	01 c8                	add    eax,ecx
10000e0c:	88 10                	mov    BYTE PTR [eax],dl
10000e0e:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000e14:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e17:	01 d0                	add    eax,edx
10000e19:	8a 00                	mov    al,BYTE PTR [eax]
10000e1b:	3c 59                	cmp    al,0x59
10000e1d:	75 0e                	jne    10000e2d <backupTree(char*, unsigned short)+0x2e6>
10000e1f:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000e25:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e28:	01 d0                	add    eax,edx
10000e2a:	c6 00 51             	mov    BYTE PTR [eax],0x51
10000e2d:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000e33:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e36:	01 d0                	add    eax,edx
10000e38:	8a 00                	mov    al,BYTE PTR [eax]
10000e3a:	3c 5a                	cmp    al,0x5a
10000e3c:	75 0e                	jne    10000e4c <backupTree(char*, unsigned short)+0x305>
10000e3e:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000e44:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e47:	01 d0                	add    eax,edx
10000e49:	c6 00 51             	mov    BYTE PTR [eax],0x51
10000e4c:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000e52:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e55:	01 d0                	add    eax,edx
10000e57:	8a 00                	mov    al,BYTE PTR [eax]
10000e59:	3c 20                	cmp    al,0x20
10000e5b:	75 0e                	jne    10000e6b <backupTree(char*, unsigned short)+0x324>
10000e5d:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000e63:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e66:	01 d0                	add    eax,edx
10000e68:	c6 00 59             	mov    BYTE PTR [eax],0x59
10000e6b:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000e71:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e74:	01 d0                	add    eax,edx
10000e76:	8a 00                	mov    al,BYTE PTR [eax]
10000e78:	3c 2e                	cmp    al,0x2e
10000e7a:	75 0e                	jne    10000e8a <backupTree(char*, unsigned short)+0x343>
10000e7c:	8d 95 99 fe ff ff    	lea    edx,[ebp-0x167]
10000e82:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e85:	01 d0                	add    eax,edx
10000e87:	c6 00 5a             	mov    BYTE PTR [eax],0x5a
10000e8a:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
10000e8d:	e9 31 ff ff ff       	jmp    10000dc3 <backupTree(char*, unsigned short)+0x27c>
10000e92:	83 ec 08             	sub    esp,0x8
10000e95:	8d 85 99 fe ff ff    	lea    eax,[ebp-0x167]
10000e9b:	50                   	push   eax
10000e9c:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000ea2:	50                   	push   eax
10000ea3:	e8 fc ff ff ff       	call   10000ea4 <backupTree(char*, unsigned short)+0x35d>	10000ea4: R_386_PC32	strcat
10000ea8:	83 c4 10             	add    esp,0x10
10000eab:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000eae:	83 c0 10             	add    eax,0x10
10000eb1:	83 ec 0c             	sub    esp,0xc
10000eb4:	50                   	push   eax
10000eb5:	e8 fc ff ff ff       	call   10000eb6 <backupTree(char*, unsigned short)+0x36f>	10000eb6: R_386_PC32	strlen
10000eba:	83 c4 10             	add    esp,0x10
10000ebd:	83 c0 41             	add    eax,0x41
10000ec0:	88 85 a2 fe ff ff    	mov    BYTE PTR [ebp-0x15e],al
10000ec6:	83 ec 08             	sub    esp,0x8
10000ec9:	8d 85 a2 fe ff ff    	lea    eax,[ebp-0x15e]
10000ecf:	50                   	push   eax
10000ed0:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000ed6:	50                   	push   eax
10000ed7:	e8 fc ff ff ff       	call   10000ed8 <backupTree(char*, unsigned short)+0x391>	10000ed8: R_386_PC32	strcat
10000edc:	83 c4 10             	add    esp,0x10
10000edf:	83 ec 08             	sub    esp,0x8
10000ee2:	68 60 53 00 10       	push   0x10005360	10000ee3: R_386_32	.text
10000ee7:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000eed:	50                   	push   eax
10000eee:	e8 fc ff ff ff       	call   10000eef <backupTree(char*, unsigned short)+0x3a8>	10000eef: R_386_PC32	strcat
10000ef3:	83 c4 10             	add    esp,0x10
10000ef6:	66 8b 45 e6          	mov    ax,WORD PTR [ebp-0x1a]
10000efa:	25 65 07 00 00       	and    eax,0x765
10000eff:	33 85 74 ed ff ff    	xor    eax,DWORD PTR [ebp-0x128c]
10000f05:	66 89 45 c6          	mov    WORD PTR [ebp-0x3a],ax
10000f09:	8d 85 88 fe ff ff    	lea    eax,[ebp-0x178]
10000f0f:	bb d5 53 00 10       	mov    ebx,0x100053d5	10000f10: R_386_32	.text
10000f14:	ba 11 00 00 00       	mov    edx,0x11
10000f19:	89 c7                	mov    edi,eax
10000f1b:	89 de                	mov    esi,ebx
10000f1d:	89 d1                	mov    ecx,edx
10000f1f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
10000f21:	0f b7 45 c6          	movzx  eax,WORD PTR [ebp-0x3a]
10000f25:	83 e0 0f             	and    eax,0xf
10000f28:	8a 84 05 88 fe ff ff 	mov    al,BYTE PTR [ebp+eax*1-0x178]
10000f2f:	88 85 a2 fe ff ff    	mov    BYTE PTR [ebp-0x15e],al
10000f35:	83 ec 08             	sub    esp,0x8
10000f38:	8d 85 a2 fe ff ff    	lea    eax,[ebp-0x15e]
10000f3e:	50                   	push   eax
10000f3f:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000f45:	50                   	push   eax
10000f46:	e8 fc ff ff ff       	call   10000f47 <backupTree(char*, unsigned short)+0x400>	10000f47: R_386_PC32	strcat
10000f4b:	83 c4 10             	add    esp,0x10
10000f4e:	0f b7 45 c6          	movzx  eax,WORD PTR [ebp-0x3a]
10000f52:	c1 f8 04             	sar    eax,0x4
10000f55:	83 e0 0f             	and    eax,0xf
10000f58:	8a 84 05 88 fe ff ff 	mov    al,BYTE PTR [ebp+eax*1-0x178]
10000f5f:	88 85 a2 fe ff ff    	mov    BYTE PTR [ebp-0x15e],al
10000f65:	83 ec 08             	sub    esp,0x8
10000f68:	8d 85 a2 fe ff ff    	lea    eax,[ebp-0x15e]
10000f6e:	50                   	push   eax
10000f6f:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000f75:	50                   	push   eax
10000f76:	e8 fc ff ff ff       	call   10000f77 <backupTree(char*, unsigned short)+0x430>	10000f77: R_386_PC32	strcat
10000f7b:	83 c4 10             	add    esp,0x10
10000f7e:	0f b7 45 c6          	movzx  eax,WORD PTR [ebp-0x3a]
10000f82:	c1 f8 08             	sar    eax,0x8
10000f85:	83 e0 0f             	and    eax,0xf
10000f88:	8a 84 05 88 fe ff ff 	mov    al,BYTE PTR [ebp+eax*1-0x178]
10000f8f:	88 85 a2 fe ff ff    	mov    BYTE PTR [ebp-0x15e],al
10000f95:	83 ec 08             	sub    esp,0x8
10000f98:	8d 85 a2 fe ff ff    	lea    eax,[ebp-0x15e]
10000f9e:	50                   	push   eax
10000f9f:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000fa5:	50                   	push   eax
10000fa6:	e8 fc ff ff ff       	call   10000fa7 <backupTree(char*, unsigned short)+0x460>	10000fa7: R_386_PC32	strcat
10000fab:	83 c4 10             	add    esp,0x10
10000fae:	66 8b 45 c6          	mov    ax,WORD PTR [ebp-0x3a]
10000fb2:	66 c1 e8 0c          	shr    ax,0xc
10000fb6:	0f b7 c0             	movzx  eax,ax
10000fb9:	8a 84 05 88 fe ff ff 	mov    al,BYTE PTR [ebp+eax*1-0x178]
10000fc0:	88 85 a2 fe ff ff    	mov    BYTE PTR [ebp-0x15e],al
10000fc6:	83 ec 08             	sub    esp,0x8
10000fc9:	8d 85 a2 fe ff ff    	lea    eax,[ebp-0x15e]
10000fcf:	50                   	push   eax
10000fd0:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10000fd6:	50                   	push   eax
10000fd7:	e8 fc ff ff ff       	call   10000fd8 <backupTree(char*, unsigned short)+0x491>	10000fd8: R_386_PC32	strcat
10000fdc:	83 c4 10             	add    esp,0x10
10000fdf:	83 ec 0c             	sub    esp,0xc
10000fe2:	68 14 01 00 00       	push   0x114
10000fe7:	e8 fc ff ff ff       	call   10000fe8 <backupTree(char*, unsigned short)+0x4a1>	10000fe8: R_386_PC32	operator new(unsigned long)
10000fec:	83 c4 10             	add    esp,0x10
10000fef:	89 c3                	mov    ebx,eax
10000ff1:	b8 00 20 00 c2       	mov    eax,0xc2002000
10000ff6:	8b 00                	mov    eax,DWORD PTR [eax]
10000ff8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
10000ffb:	83 ec 04             	sub    esp,0x4
10000ffe:	50                   	push   eax
10000fff:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10001002:	53                   	push   ebx
10001003:	e8 fc ff ff ff       	call   10001004 <backupTree(char*, unsigned short)+0x4bd>	10001004: R_386_PC32	File::File(char const*, Process*)
10001008:	83 c4 10             	add    esp,0x10
1000100b:	89 5d c0             	mov    DWORD PTR [ebp-0x40],ebx
1000100e:	83 ec 08             	sub    esp,0x8
10001011:	6a 01                	push   0x1
10001013:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
10001016:	e8 fc ff ff ff       	call   10001017 <backupTree(char*, unsigned short)+0x4d0>	10001017: R_386_PC32	File::open(FileOpenMode)
1000101b:	83 c4 10             	add    esp,0x10
1000101e:	83 7d c0 00          	cmp    DWORD PTR [ebp-0x40],0x0
10001022:	75 15                	jne    10001039 <backupTree(char*, unsigned short)+0x4f2>
10001024:	83 ec 0c             	sub    esp,0xc
10001027:	68 9c 53 00 10       	push   0x1000539c	10001028: R_386_32	.text
1000102c:	e8 fc ff ff ff       	call   1000102d <backupTree(char*, unsigned short)+0x4e6>	1000102d: R_386_PC32	KePanic(char const*)
10001031:	83 c4 10             	add    esp,0x10
10001034:	e9 3e 01 00 00       	jmp    10001177 <backupTree(char*, unsigned short)+0x630>
10001039:	83 7d c0 00          	cmp    DWORD PTR [ebp-0x40],0x0
1000103d:	0f 84 c5 fb ff ff    	je     10000c08 <backupTree(char*, unsigned short)+0xc1>
10001043:	83 ec 0c             	sub    esp,0xc
10001046:	68 14 01 00 00       	push   0x114
1000104b:	e8 fc ff ff ff       	call   1000104c <backupTree(char*, unsigned short)+0x505>	1000104c: R_386_PC32	operator new(unsigned long)
10001050:	83 c4 10             	add    esp,0x10
10001053:	89 c3                	mov    ebx,eax
10001055:	b8 00 20 00 c2       	mov    eax,0xc2002000
1000105a:	8b 00                	mov    eax,DWORD PTR [eax]
1000105c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
1000105f:	83 ec 04             	sub    esp,0x4
10001062:	50                   	push   eax
10001063:	8d 85 80 ed ff ff    	lea    eax,[ebp-0x1280]
10001069:	50                   	push   eax
1000106a:	53                   	push   ebx
1000106b:	e8 fc ff ff ff       	call   1000106c <backupTree(char*, unsigned short)+0x525>	1000106c: R_386_PC32	File::File(char const*, Process*)
10001070:	83 c4 10             	add    esp,0x10
10001073:	89 5d bc             	mov    DWORD PTR [ebp-0x44],ebx
10001076:	83 ec 08             	sub    esp,0x8
10001079:	6a 12                	push   0x12
1000107b:	ff 75 bc             	push   DWORD PTR [ebp-0x44]
1000107e:	e8 fc ff ff ff       	call   1000107f <backupTree(char*, unsigned short)+0x538>	1000107f: R_386_PC32	File::open(FileOpenMode)
10001083:	83 c4 10             	add    esp,0x10
10001086:	83 7d bc 00          	cmp    DWORD PTR [ebp-0x44],0x0
1000108a:	75 23                	jne    100010af <backupTree(char*, unsigned short)+0x568>
1000108c:	83 ec 0c             	sub    esp,0xc
1000108f:	68 9c 53 00 10       	push   0x1000539c	10001090: R_386_32	.text
10001094:	e8 fc ff ff ff       	call   10001095 <backupTree(char*, unsigned short)+0x54e>	10001095: R_386_PC32	KePanic(char const*)
10001099:	83 c4 10             	add    esp,0x10
1000109c:	83 ec 0c             	sub    esp,0xc
1000109f:	ff 75 bc             	push   DWORD PTR [ebp-0x44]
100010a2:	e8 fc ff ff ff       	call   100010a3 <backupTree(char*, unsigned short)+0x55c>	100010a3: R_386_PC32	File::close()
100010a7:	83 c4 10             	add    esp,0x10
100010aa:	e9 c8 00 00 00       	jmp    10001177 <backupTree(char*, unsigned short)+0x630>
100010af:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
100010b2:	8b 00                	mov    eax,DWORD PTR [eax]
100010b4:	83 c0 0c             	add    eax,0xc
100010b7:	8b 00                	mov    eax,DWORD PTR [eax]
100010b9:	83 ec 0c             	sub    esp,0xc
100010bc:	8d 95 84 fe ff ff    	lea    edx,[ebp-0x17c]
100010c2:	52                   	push   edx
100010c3:	8d 95 80 ee ff ff    	lea    edx,[ebp-0x1180]
100010c9:	52                   	push   edx
100010ca:	6a 00                	push   0x0
100010cc:	68 00 10 00 00       	push   0x1000
100010d1:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
100010d4:	ff d0                	call   eax
100010d6:	83 c4 20             	add    esp,0x20
100010d9:	89 45 b8             	mov    DWORD PTR [ebp-0x48],eax
100010dc:	83 7d b8 00          	cmp    DWORD PTR [ebp-0x48],0x0
100010e0:	75 3b                	jne    1000111d <backupTree(char*, unsigned short)+0x5d6>
100010e2:	8b 45 bc             	mov    eax,DWORD PTR [ebp-0x44]
100010e5:	8b 00                	mov    eax,DWORD PTR [eax]
100010e7:	83 c0 10             	add    eax,0x10
100010ea:	8b 08                	mov    ecx,DWORD PTR [eax]
100010ec:	8b 85 84 fe ff ff    	mov    eax,DWORD PTR [ebp-0x17c]
100010f2:	99                   	cdq    
100010f3:	83 ec 0c             	sub    esp,0xc
100010f6:	8d 9d 80 fe ff ff    	lea    ebx,[ebp-0x180]
100010fc:	53                   	push   ebx
100010fd:	8d 9d 80 ee ff ff    	lea    ebx,[ebp-0x1180]
10001103:	53                   	push   ebx
10001104:	52                   	push   edx
10001105:	50                   	push   eax
10001106:	ff 75 bc             	push   DWORD PTR [ebp-0x44]
10001109:	ff d1                	call   ecx
1000110b:	83 c4 20             	add    esp,0x20
1000110e:	8b 85 84 fe ff ff    	mov    eax,DWORD PTR [ebp-0x17c]
10001114:	3d 00 10 00 00       	cmp    eax,0x1000
10001119:	75 05                	jne    10001120 <backupTree(char*, unsigned short)+0x5d9>
1000111b:	eb 92                	jmp    100010af <backupTree(char*, unsigned short)+0x568>
1000111d:	90                   	nop
1000111e:	eb 01                	jmp    10001121 <backupTree(char*, unsigned short)+0x5da>
10001120:	90                   	nop
10001121:	83 ec 0c             	sub    esp,0xc
10001124:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
10001127:	e8 fc ff ff ff       	call   10001128 <backupTree(char*, unsigned short)+0x5e1>	10001128: R_386_PC32	File::close()
1000112c:	83 c4 10             	add    esp,0x10
1000112f:	83 ec 0c             	sub    esp,0xc
10001132:	ff 75 bc             	push   DWORD PTR [ebp-0x44]
10001135:	e8 fc ff ff ff       	call   10001136 <backupTree(char*, unsigned short)+0x5ef>	10001136: R_386_PC32	File::close()
1000113a:	83 c4 10             	add    esp,0x10
1000113d:	83 7d c0 00          	cmp    DWORD PTR [ebp-0x40],0x0
10001141:	74 15                	je     10001158 <backupTree(char*, unsigned short)+0x611>
10001143:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
10001146:	8b 00                	mov    eax,DWORD PTR [eax]
10001148:	83 c0 08             	add    eax,0x8
1000114b:	8b 00                	mov    eax,DWORD PTR [eax]
1000114d:	83 ec 0c             	sub    esp,0xc
10001150:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
10001153:	ff d0                	call   eax
10001155:	83 c4 10             	add    esp,0x10
10001158:	83 7d bc 00          	cmp    DWORD PTR [ebp-0x44],0x0
1000115c:	0f 84 a6 fa ff ff    	je     10000c08 <backupTree(char*, unsigned short)+0xc1>
10001162:	8b 45 bc             	mov    eax,DWORD PTR [ebp-0x44]
10001165:	8b 00                	mov    eax,DWORD PTR [eax]
10001167:	83 c0 08             	add    eax,0x8
1000116a:	8b 00                	mov    eax,DWORD PTR [eax]
1000116c:	83 ec 0c             	sub    esp,0xc
1000116f:	ff 75 bc             	push   DWORD PTR [ebp-0x44]
10001172:	ff d0                	call   eax
10001174:	83 c4 10             	add    esp,0x10
10001177:	e9 8c fa ff ff       	jmp    10000c08 <backupTree(char*, unsigned short)+0xc1>
1000117c:	90                   	nop
1000117d:	83 ec 0c             	sub    esp,0xc
10001180:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10001183:	e8 fc ff ff ff       	call   10001184 <backupTree(char*, unsigned short)+0x63d>	10001184: R_386_PC32	free
10001188:	83 c4 10             	add    esp,0x10
1000118b:	83 ec 0c             	sub    esp,0xc
1000118e:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10001191:	e8 fc ff ff ff       	call   10001192 <backupTree(char*, unsigned short)+0x64b>	10001192: R_386_PC32	Directory::close()
10001196:	83 c4 10             	add    esp,0x10
10001199:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
1000119d:	74 18                	je     100011b7 <backupTree(char*, unsigned short)+0x670>
1000119f:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
100011a2:	8b 00                	mov    eax,DWORD PTR [eax]
100011a4:	83 c0 08             	add    eax,0x8
100011a7:	8b 00                	mov    eax,DWORD PTR [eax]
100011a9:	83 ec 0c             	sub    esp,0xc
100011ac:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
100011af:	ff d0                	call   eax
100011b1:	83 c4 10             	add    esp,0x10
100011b4:	eb 01                	jmp    100011b7 <backupTree(char*, unsigned short)+0x670>
100011b6:	90                   	nop
100011b7:	8d 65 f4             	lea    esp,[ebp-0xc]
100011ba:	5b                   	pop    ebx
100011bb:	5e                   	pop    esi
100011bc:	5f                   	pop    edi
100011bd:	5d                   	pop    ebp
100011be:	c3                   	ret    

100011bf <createUser(char const*)>:
100011bf:	55                   	push   ebp
100011c0:	89 e5                	mov    ebp,esp
100011c2:	81 ec 08 01 00 00    	sub    esp,0x108
100011c8:	68 e6 53 00 10       	push   0x100053e6	100011c9: R_386_32	.text
100011cd:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100011d3:	50                   	push   eax
100011d4:	e8 fc ff ff ff       	call   100011d5 <createUser(char const*)+0x16>	100011d5: R_386_PC32	strcpy
100011d9:	83 c4 08             	add    esp,0x8
100011dc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100011df:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100011e5:	50                   	push   eax
100011e6:	e8 fc ff ff ff       	call   100011e7 <createUser(char const*)+0x28>	100011e7: R_386_PC32	strcat
100011eb:	83 c4 08             	add    esp,0x8
100011ee:	83 ec 08             	sub    esp,0x8
100011f1:	68 c0 01 00 00       	push   0x1c0
100011f6:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100011fc:	50                   	push   eax
100011fd:	e8 fc ff ff ff       	call   100011fe <createUser(char const*)+0x3f>	100011fe: R_386_PC32	mkdir(char const*, int)
10001202:	83 c4 10             	add    esp,0x10
10001205:	83 ec 08             	sub    esp,0x8
10001208:	68 f0 53 00 10       	push   0x100053f0	10001209: R_386_32	.text
1000120d:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001213:	50                   	push   eax
10001214:	e8 fc ff ff ff       	call   10001215 <createUser(char const*)+0x56>	10001215: R_386_PC32	strcat
10001219:	83 c4 10             	add    esp,0x10
1000121c:	83 ec 08             	sub    esp,0x8
1000121f:	68 c0 01 00 00       	push   0x1c0
10001224:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000122a:	50                   	push   eax
1000122b:	e8 fc ff ff ff       	call   1000122c <createUser(char const*)+0x6d>	1000122c: R_386_PC32	mkdir(char const*, int)
10001230:	83 c4 10             	add    esp,0x10
10001233:	83 ec 08             	sub    esp,0x8
10001236:	68 e6 53 00 10       	push   0x100053e6	10001237: R_386_32	.text
1000123b:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001241:	50                   	push   eax
10001242:	e8 fc ff ff ff       	call   10001243 <createUser(char const*)+0x84>	10001243: R_386_PC32	strcpy
10001247:	83 c4 10             	add    esp,0x10
1000124a:	83 ec 08             	sub    esp,0x8
1000124d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001250:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001256:	50                   	push   eax
10001257:	e8 fc ff ff ff       	call   10001258 <createUser(char const*)+0x99>	10001258: R_386_PC32	strcat
1000125c:	83 c4 10             	add    esp,0x10
1000125f:	83 ec 08             	sub    esp,0x8
10001262:	68 f9 53 00 10       	push   0x100053f9	10001263: R_386_32	.text
10001267:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000126d:	50                   	push   eax
1000126e:	e8 fc ff ff ff       	call   1000126f <createUser(char const*)+0xb0>	1000126f: R_386_PC32	strcat
10001273:	83 c4 10             	add    esp,0x10
10001276:	83 ec 08             	sub    esp,0x8
10001279:	68 c0 01 00 00       	push   0x1c0
1000127e:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001284:	50                   	push   eax
10001285:	e8 fc ff ff ff       	call   10001286 <createUser(char const*)+0xc7>	10001286: R_386_PC32	mkdir(char const*, int)
1000128a:	83 c4 10             	add    esp,0x10
1000128d:	83 ec 08             	sub    esp,0x8
10001290:	68 e6 53 00 10       	push   0x100053e6	10001291: R_386_32	.text
10001295:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000129b:	50                   	push   eax
1000129c:	e8 fc ff ff ff       	call   1000129d <createUser(char const*)+0xde>	1000129d: R_386_PC32	strcpy
100012a1:	83 c4 10             	add    esp,0x10
100012a4:	83 ec 08             	sub    esp,0x8
100012a7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100012aa:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100012b0:	50                   	push   eax
100012b1:	e8 fc ff ff ff       	call   100012b2 <createUser(char const*)+0xf3>	100012b2: R_386_PC32	strcat
100012b6:	83 c4 10             	add    esp,0x10
100012b9:	83 ec 08             	sub    esp,0x8
100012bc:	68 04 54 00 10       	push   0x10005404	100012bd: R_386_32	.text
100012c1:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100012c7:	50                   	push   eax
100012c8:	e8 fc ff ff ff       	call   100012c9 <createUser(char const*)+0x10a>	100012c9: R_386_PC32	strcat
100012cd:	83 c4 10             	add    esp,0x10
100012d0:	83 ec 08             	sub    esp,0x8
100012d3:	68 c0 01 00 00       	push   0x1c0
100012d8:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100012de:	50                   	push   eax
100012df:	e8 fc ff ff ff       	call   100012e0 <createUser(char const*)+0x121>	100012e0: R_386_PC32	mkdir(char const*, int)
100012e4:	83 c4 10             	add    esp,0x10
100012e7:	83 ec 08             	sub    esp,0x8
100012ea:	68 e6 53 00 10       	push   0x100053e6	100012eb: R_386_32	.text
100012ef:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100012f5:	50                   	push   eax
100012f6:	e8 fc ff ff ff       	call   100012f7 <createUser(char const*)+0x138>	100012f7: R_386_PC32	strcpy
100012fb:	83 c4 10             	add    esp,0x10
100012fe:	83 ec 08             	sub    esp,0x8
10001301:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001304:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000130a:	50                   	push   eax
1000130b:	e8 fc ff ff ff       	call   1000130c <createUser(char const*)+0x14d>	1000130c: R_386_PC32	strcat
10001310:	83 c4 10             	add    esp,0x10
10001313:	83 ec 08             	sub    esp,0x8
10001316:	68 0f 54 00 10       	push   0x1000540f	10001317: R_386_32	.text
1000131b:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001321:	50                   	push   eax
10001322:	e8 fc ff ff ff       	call   10001323 <createUser(char const*)+0x164>	10001323: R_386_PC32	strcat
10001327:	83 c4 10             	add    esp,0x10
1000132a:	83 ec 08             	sub    esp,0x8
1000132d:	68 c0 01 00 00       	push   0x1c0
10001332:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001338:	50                   	push   eax
10001339:	e8 fc ff ff ff       	call   1000133a <createUser(char const*)+0x17b>	1000133a: R_386_PC32	mkdir(char const*, int)
1000133e:	83 c4 10             	add    esp,0x10
10001341:	83 ec 08             	sub    esp,0x8
10001344:	68 e6 53 00 10       	push   0x100053e6	10001345: R_386_32	.text
10001349:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000134f:	50                   	push   eax
10001350:	e8 fc ff ff ff       	call   10001351 <createUser(char const*)+0x192>	10001351: R_386_PC32	strcpy
10001355:	83 c4 10             	add    esp,0x10
10001358:	83 ec 08             	sub    esp,0x8
1000135b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000135e:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001364:	50                   	push   eax
10001365:	e8 fc ff ff ff       	call   10001366 <createUser(char const*)+0x1a7>	10001366: R_386_PC32	strcat
1000136a:	83 c4 10             	add    esp,0x10
1000136d:	83 ec 08             	sub    esp,0x8
10001370:	68 17 54 00 10       	push   0x10005417	10001371: R_386_32	.text
10001375:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000137b:	50                   	push   eax
1000137c:	e8 fc ff ff ff       	call   1000137d <createUser(char const*)+0x1be>	1000137d: R_386_PC32	strcat
10001381:	83 c4 10             	add    esp,0x10
10001384:	83 ec 08             	sub    esp,0x8
10001387:	68 c0 01 00 00       	push   0x1c0
1000138c:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001392:	50                   	push   eax
10001393:	e8 fc ff ff ff       	call   10001394 <createUser(char const*)+0x1d5>	10001394: R_386_PC32	mkdir(char const*, int)
10001398:	83 c4 10             	add    esp,0x10
1000139b:	83 ec 08             	sub    esp,0x8
1000139e:	68 e6 53 00 10       	push   0x100053e6	1000139f: R_386_32	.text
100013a3:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100013a9:	50                   	push   eax
100013aa:	e8 fc ff ff ff       	call   100013ab <createUser(char const*)+0x1ec>	100013ab: R_386_PC32	strcpy
100013af:	83 c4 10             	add    esp,0x10
100013b2:	83 ec 08             	sub    esp,0x8
100013b5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100013b8:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100013be:	50                   	push   eax
100013bf:	e8 fc ff ff ff       	call   100013c0 <createUser(char const*)+0x201>	100013c0: R_386_PC32	strcat
100013c4:	83 c4 10             	add    esp,0x10
100013c7:	83 ec 08             	sub    esp,0x8
100013ca:	68 22 54 00 10       	push   0x10005422	100013cb: R_386_32	.text
100013cf:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100013d5:	50                   	push   eax
100013d6:	e8 fc ff ff ff       	call   100013d7 <createUser(char const*)+0x218>	100013d7: R_386_PC32	strcat
100013db:	83 c4 10             	add    esp,0x10
100013de:	83 ec 08             	sub    esp,0x8
100013e1:	68 c0 01 00 00       	push   0x1c0
100013e6:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
100013ec:	50                   	push   eax
100013ed:	e8 fc ff ff ff       	call   100013ee <createUser(char const*)+0x22f>	100013ee: R_386_PC32	mkdir(char const*, int)
100013f2:	83 c4 10             	add    esp,0x10
100013f5:	83 ec 08             	sub    esp,0x8
100013f8:	68 e6 53 00 10       	push   0x100053e6	100013f9: R_386_32	.text
100013fd:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001403:	50                   	push   eax
10001404:	e8 fc ff ff ff       	call   10001405 <createUser(char const*)+0x246>	10001405: R_386_PC32	strcpy
10001409:	83 c4 10             	add    esp,0x10
1000140c:	83 ec 08             	sub    esp,0x8
1000140f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001412:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001418:	50                   	push   eax
10001419:	e8 fc ff ff ff       	call   1000141a <createUser(char const*)+0x25b>	1000141a: R_386_PC32	strcat
1000141e:	83 c4 10             	add    esp,0x10
10001421:	83 ec 08             	sub    esp,0x8
10001424:	68 29 54 00 10       	push   0x10005429	10001425: R_386_32	.text
10001429:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000142f:	50                   	push   eax
10001430:	e8 fc ff ff ff       	call   10001431 <createUser(char const*)+0x272>	10001431: R_386_PC32	strcat
10001435:	83 c4 10             	add    esp,0x10
10001438:	83 ec 08             	sub    esp,0x8
1000143b:	68 c0 01 00 00       	push   0x1c0
10001440:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001446:	50                   	push   eax
10001447:	e8 fc ff ff ff       	call   10001448 <createUser(char const*)+0x289>	10001448: R_386_PC32	mkdir(char const*, int)
1000144c:	83 c4 10             	add    esp,0x10
1000144f:	83 ec 08             	sub    esp,0x8
10001452:	68 31 54 00 10       	push   0x10005431	10001453: R_386_32	.text
10001457:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000145d:	50                   	push   eax
1000145e:	e8 fc ff ff ff       	call   1000145f <createUser(char const*)+0x2a0>	1000145f: R_386_PC32	strcpy
10001463:	83 c4 10             	add    esp,0x10
10001466:	83 ec 08             	sub    esp,0x8
10001469:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000146c:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001472:	50                   	push   eax
10001473:	e8 fc ff ff ff       	call   10001474 <createUser(char const*)+0x2b5>	10001474: R_386_PC32	strcat
10001478:	83 c4 10             	add    esp,0x10
1000147b:	83 ec 08             	sub    esp,0x8
1000147e:	68 c0 01 00 00       	push   0x1c0
10001483:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10001489:	50                   	push   eax
1000148a:	e8 fc ff ff ff       	call   1000148b <createUser(char const*)+0x2cc>	1000148b: R_386_PC32	mkdir(char const*, int)
1000148f:	83 c4 10             	add    esp,0x10
10001492:	83 ec 08             	sub    esp,0x8
10001495:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
1000149b:	50                   	push   eax
1000149c:	68 4c 54 00 10       	push   0x1000544c	1000149d: R_386_32	.text
100014a1:	e8 fc ff ff ff       	call   100014a2 <createUser(char const*)+0x2e3>	100014a2: R_386_PC32	copytree(char*, char*)
100014a6:	83 c4 10             	add    esp,0x10
100014a9:	90                   	nop
100014aa:	c9                   	leave  
100014ab:	c3                   	ret    

100014ac <drawBootScreen()>:
100014ac:	55                   	push   ebp
100014ad:	89 e5                	mov    ebp,esp
100014af:	83 ec 18             	sub    esp,0x18
100014b2:	a1 00 00 00 00       	mov    eax,ds:0x0	100014b3: R_386_32	term
100014b7:	83 ec 08             	sub    esp,0x8
100014ba:	6a 0b                	push   0xb
100014bc:	50                   	push   eax
100014bd:	e8 fc ff ff ff       	call   100014be <drawBootScreen()+0x12>	100014be: R_386_PC32	VgaText::setDefaultBgColour(VgaColour)
100014c2:	83 c4 10             	add    esp,0x10
100014c5:	a1 00 00 00 00       	mov    eax,ds:0x0	100014c6: R_386_32	term
100014ca:	83 ec 08             	sub    esp,0x8
100014cd:	6a 00                	push   0x0
100014cf:	50                   	push   eax
100014d0:	e8 fc ff ff ff       	call   100014d1 <drawBootScreen()+0x25>	100014d1: R_386_PC32	VgaText::setDefaultFgColour(VgaColour)
100014d5:	83 c4 10             	add    esp,0x10
100014d8:	a1 00 00 00 00       	mov    eax,ds:0x0	100014d9: R_386_32	term
100014dd:	83 ec 0c             	sub    esp,0xc
100014e0:	50                   	push   eax
100014e1:	e8 fc ff ff ff       	call   100014e2 <drawBootScreen()+0x36>	100014e2: R_386_PC32	VgaText::clearScreen()
100014e6:	83 c4 10             	add    esp,0x10
100014e9:	a1 00 00 00 00       	mov    eax,ds:0x0	100014ea: R_386_32	term
100014ee:	83 ec 08             	sub    esp,0x8
100014f1:	68 6b 54 00 10       	push   0x1000546b	100014f2: R_386_32	.text
100014f6:	50                   	push   eax
100014f7:	e8 fc ff ff ff       	call   100014f8 <drawBootScreen()+0x4c>	100014f8: R_386_PC32	VgaText::setTitle(char*)
100014fc:	83 c4 10             	add    esp,0x10
100014ff:	a1 00 00 00 00       	mov    eax,ds:0x0	10001500: R_386_32	term
10001504:	83 ec 08             	sub    esp,0x8
10001507:	6a 00                	push   0x0
10001509:	50                   	push   eax
1000150a:	e8 fc ff ff ff       	call   1000150b <drawBootScreen()+0x5f>	1000150b: R_386_PC32	VgaText::setTitleColour(VgaColour)
1000150f:	83 c4 10             	add    esp,0x10
10001512:	a1 00 00 00 00       	mov    eax,ds:0x0	10001513: R_386_32	term
10001517:	83 ec 08             	sub    esp,0x8
1000151a:	6a 00                	push   0x0
1000151c:	50                   	push   eax
1000151d:	e8 fc ff ff ff       	call   1000151e <drawBootScreen()+0x72>	1000151e: R_386_PC32	VgaText::setTitleTextColour(VgaColour)
10001522:	83 c4 10             	add    esp,0x10
10001525:	a1 00 00 00 00       	mov    eax,ds:0x0	10001526: R_386_32	term
1000152a:	83 ec 04             	sub    esp,0x4
1000152d:	6a 00                	push   0x0
1000152f:	6a 00                	push   0x0
10001531:	50                   	push   eax
10001532:	e8 fc ff ff ff       	call   10001533 <drawBootScreen()+0x87>	10001533: R_386_PC32	VgaText::setCursor(int, int)
10001537:	83 c4 10             	add    esp,0x10
1000153a:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
10001541:	83 7d f4 4f          	cmp    DWORD PTR [ebp-0xc],0x4f
10001545:	7f 19                	jg     10001560 <drawBootScreen()+0xb4>
10001547:	a1 00 00 00 00       	mov    eax,ds:0x0	10001548: R_386_32	term
1000154c:	6a 00                	push   0x0
1000154e:	6a 00                	push   0x0
10001550:	6a 20                	push   0x20
10001552:	50                   	push   eax
10001553:	e8 fc ff ff ff       	call   10001554 <drawBootScreen()+0xa8>	10001554: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
10001558:	83 c4 10             	add    esp,0x10
1000155b:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
1000155e:	eb e1                	jmp    10001541 <drawBootScreen()+0x95>
10001560:	a0 00 00 00 00       	mov    al,ds:0x0	10001561: R_386_32	showSidebar
10001565:	84 c0                	test   al,al
10001567:	0f 84 91 00 00 00    	je     100015fe <drawBootScreen()+0x152>
1000156d:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
10001574:	83 7d f0 18          	cmp    DWORD PTR [ebp-0x10],0x18
10001578:	7f 41                	jg     100015bb <drawBootScreen()+0x10f>
1000157a:	a1 00 00 00 00       	mov    eax,ds:0x0	1000157b: R_386_32	term
1000157f:	83 ec 04             	sub    esp,0x4
10001582:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10001585:	6a 00                	push   0x0
10001587:	50                   	push   eax
10001588:	e8 fc ff ff ff       	call   10001589 <drawBootScreen()+0xdd>	10001589: R_386_PC32	VgaText::setCursor(int, int)
1000158d:	83 c4 10             	add    esp,0x10
10001590:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
10001597:	83 7d ec 0f          	cmp    DWORD PTR [ebp-0x14],0xf
1000159b:	7f 19                	jg     100015b6 <drawBootScreen()+0x10a>
1000159d:	a1 00 00 00 00       	mov    eax,ds:0x0	1000159e: R_386_32	term
100015a2:	6a 00                	push   0x0
100015a4:	6a 00                	push   0x0
100015a6:	6a 20                	push   0x20
100015a8:	50                   	push   eax
100015a9:	e8 fc ff ff ff       	call   100015aa <drawBootScreen()+0xfe>	100015aa: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
100015ae:	83 c4 10             	add    esp,0x10
100015b1:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
100015b4:	eb e1                	jmp    10001597 <drawBootScreen()+0xeb>
100015b6:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
100015b9:	eb b9                	jmp    10001574 <drawBootScreen()+0xc8>
100015bb:	a1 00 00 00 00       	mov    eax,ds:0x0	100015bc: R_386_32	term
100015c0:	83 ec 04             	sub    esp,0x4
100015c3:	6a 01                	push   0x1
100015c5:	6a 01                	push   0x1
100015c7:	50                   	push   eax
100015c8:	e8 fc ff ff ff       	call   100015c9 <drawBootScreen()+0x11d>	100015c9: R_386_PC32	VgaText::setCursor(int, int)
100015cd:	83 c4 10             	add    esp,0x10
100015d0:	a1 00 00 00 00       	mov    eax,ds:0x0	100015d1: R_386_32	term
100015d5:	6a 00                	push   0x0
100015d7:	6a 0f                	push   0xf
100015d9:	68 6c 54 00 10       	push   0x1000546c	100015da: R_386_32	.text
100015de:	50                   	push   eax
100015df:	e8 fc ff ff ff       	call   100015e0 <drawBootScreen()+0x134>	100015e0: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
100015e4:	83 c4 10             	add    esp,0x10
100015e7:	a1 00 00 00 00       	mov    eax,ds:0x0	100015e8: R_386_32	term
100015ec:	6a 00                	push   0x0
100015ee:	6a 0e                	push   0xe
100015f0:	68 ef 54 00 10       	push   0x100054ef	100015f1: R_386_32	.text
100015f5:	50                   	push   eax
100015f6:	e8 fc ff ff ff       	call   100015f7 <drawBootScreen()+0x14b>	100015f7: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
100015fb:	83 c4 10             	add    esp,0x10
100015fe:	a1 00 00 00 00       	mov    eax,ds:0x0	100015ff: R_386_32	term
10001603:	83 ec 08             	sub    esp,0x8
10001606:	6a 0f                	push   0xf
10001608:	50                   	push   eax
10001609:	e8 fc ff ff ff       	call   1000160a <drawBootScreen()+0x15e>	1000160a: R_386_PC32	VgaText::setDefaultBgColour(VgaColour)
1000160e:	83 c4 10             	add    esp,0x10
10001611:	a1 00 00 00 00       	mov    eax,ds:0x0	10001612: R_386_32	term
10001616:	83 ec 08             	sub    esp,0x8
10001619:	6a 00                	push   0x0
1000161b:	50                   	push   eax
1000161c:	e8 fc ff ff ff       	call   1000161d <drawBootScreen()+0x171>	1000161d: R_386_PC32	VgaText::setDefaultFgColour(VgaColour)
10001621:	83 c4 10             	add    esp,0x10
10001624:	90                   	nop
10001625:	c9                   	leave  
10001626:	c3                   	ret    

10001627 <drawBasicWindowX(int, int, int, int, char const*, bool)>:
10001627:	55                   	push   ebp
10001628:	89 e5                	mov    ebp,esp
1000162a:	53                   	push   ebx
1000162b:	83 ec 34             	sub    esp,0x34
1000162e:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
10001631:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
10001634:	ff 45 0c             	inc    DWORD PTR [ebp+0xc]
10001637:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
1000163e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10001641:	3b 45 14             	cmp    eax,DWORD PTR [ebp+0x14]
10001644:	7d 6c                	jge    100016b2 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x8b>
10001646:	a1 00 00 00 00       	mov    eax,ds:0x0	10001647: R_386_32	term
1000164b:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
1000164e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001651:	01 ca                	add    edx,ecx
10001653:	83 ec 04             	sub    esp,0x4
10001656:	52                   	push   edx
10001657:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000165a:	50                   	push   eax
1000165b:	e8 fc ff ff ff       	call   1000165c <drawBasicWindowX(int, int, int, int, char const*, bool)+0x35>	1000165c: R_386_PC32	VgaText::setCursor(int, int)
10001660:	83 c4 10             	add    esp,0x10
10001663:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
1000166a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
1000166d:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
10001670:	7d 3b                	jge    100016ad <drawBasicWindowX(int, int, int, int, char const*, bool)+0x86>
10001672:	a1 00 00 00 00       	mov    eax,ds:0x0	10001673: R_386_32	term
10001677:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
1000167b:	74 07                	je     10001684 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x5d>
1000167d:	b9 07 00 00 00       	mov    ecx,0x7
10001682:	eb 05                	jmp    10001689 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x62>
10001684:	b9 0f 00 00 00       	mov    ecx,0xf
10001689:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
1000168d:	74 07                	je     10001696 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x6f>
1000168f:	ba 07 00 00 00       	mov    edx,0x7
10001694:	eb 05                	jmp    1000169b <drawBasicWindowX(int, int, int, int, char const*, bool)+0x74>
10001696:	ba 0f 00 00 00       	mov    edx,0xf
1000169b:	51                   	push   ecx
1000169c:	52                   	push   edx
1000169d:	6a 20                	push   0x20
1000169f:	50                   	push   eax
100016a0:	e8 fc ff ff ff       	call   100016a1 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x7a>	100016a1: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
100016a5:	83 c4 10             	add    esp,0x10
100016a8:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
100016ab:	eb bd                	jmp    1000166a <drawBasicWindowX(int, int, int, int, char const*, bool)+0x43>
100016ad:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
100016b0:	eb 8c                	jmp    1000163e <drawBasicWindowX(int, int, int, int, char const*, bool)+0x17>
100016b2:	a1 00 00 00 00       	mov    eax,ds:0x0	100016b3: R_386_32	term
100016b7:	83 ec 04             	sub    esp,0x4
100016ba:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
100016bd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100016c0:	50                   	push   eax
100016c1:	e8 fc ff ff ff       	call   100016c2 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x9b>	100016c2: R_386_PC32	VgaText::setCursor(int, int)
100016c6:	83 c4 10             	add    esp,0x10
100016c9:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
100016d0:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
100016d3:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
100016d6:	7d 19                	jge    100016f1 <drawBasicWindowX(int, int, int, int, char const*, bool)+0xca>
100016d8:	a1 00 00 00 00       	mov    eax,ds:0x0	100016d9: R_386_32	term
100016dd:	6a 01                	push   0x1
100016df:	6a 01                	push   0x1
100016e1:	6a 20                	push   0x20
100016e3:	50                   	push   eax
100016e4:	e8 fc ff ff ff       	call   100016e5 <drawBasicWindowX(int, int, int, int, char const*, bool)+0xbe>	100016e5: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
100016e9:	83 c4 10             	add    esp,0x10
100016ec:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
100016ef:	eb df                	jmp    100016d0 <drawBasicWindowX(int, int, int, int, char const*, bool)+0xa9>
100016f1:	a1 00 00 00 00       	mov    eax,ds:0x0	100016f2: R_386_32	term
100016f6:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
100016f9:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
100016fc:	01 d1                	add    ecx,edx
100016fe:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10001701:	42                   	inc    edx
10001702:	83 ec 04             	sub    esp,0x4
10001705:	51                   	push   ecx
10001706:	52                   	push   edx
10001707:	50                   	push   eax
10001708:	e8 fc ff ff ff       	call   10001709 <drawBasicWindowX(int, int, int, int, char const*, bool)+0xe2>	10001709: R_386_PC32	VgaText::setCursor(int, int)
1000170d:	83 c4 10             	add    esp,0x10
10001710:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
10001717:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
1000171a:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
1000171d:	7d 19                	jge    10001738 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x111>
1000171f:	a1 00 00 00 00       	mov    eax,ds:0x0	10001720: R_386_32	term
10001724:	6a 03                	push   0x3
10001726:	6a 03                	push   0x3
10001728:	6a 20                	push   0x20
1000172a:	50                   	push   eax
1000172b:	e8 fc ff ff ff       	call   1000172c <drawBasicWindowX(int, int, int, int, char const*, bool)+0x105>	1000172c: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
10001730:	83 c4 10             	add    esp,0x10
10001733:	ff 45 e8             	inc    DWORD PTR [ebp-0x18]
10001736:	eb df                	jmp    10001717 <drawBasicWindowX(int, int, int, int, char const*, bool)+0xf0>
10001738:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
1000173b:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
1000173e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10001741:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
10001744:	01 d0                	add    eax,edx
10001746:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
10001749:	0f 8d 89 00 00 00    	jge    100017d8 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x1b1>
1000174f:	a1 00 00 00 00       	mov    eax,ds:0x0	10001750: R_386_32	term
10001754:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10001757:	8d 4a 01             	lea    ecx,[edx+0x1]
1000175a:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
1000175d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10001760:	01 da                	add    edx,ebx
10001762:	83 ec 04             	sub    esp,0x4
10001765:	51                   	push   ecx
10001766:	52                   	push   edx
10001767:	50                   	push   eax
10001768:	e8 fc ff ff ff       	call   10001769 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x142>	10001769: R_386_PC32	VgaText::setCursor(int, int)
1000176d:	83 c4 10             	add    esp,0x10
10001770:	a1 00 00 00 00       	mov    eax,ds:0x0	10001771: R_386_32	term
10001775:	6a 03                	push   0x3
10001777:	6a 03                	push   0x3
10001779:	6a 20                	push   0x20
1000177b:	50                   	push   eax
1000177c:	e8 fc ff ff ff       	call   1000177d <drawBasicWindowX(int, int, int, int, char const*, bool)+0x156>	1000177d: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
10001781:	83 c4 10             	add    esp,0x10
10001784:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10001787:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
1000178a:	01 d0                	add    eax,edx
1000178c:	48                   	dec    eax
1000178d:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
10001790:	74 3e                	je     100017d0 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x1a9>
10001792:	a1 00 00 00 00       	mov    eax,ds:0x0	10001793: R_386_32	term
10001797:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
1000179a:	42                   	inc    edx
1000179b:	83 ec 04             	sub    esp,0x4
1000179e:	52                   	push   edx
1000179f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100017a2:	50                   	push   eax
100017a3:	e8 fc ff ff ff       	call   100017a4 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x17d>	100017a4: R_386_PC32	VgaText::setCursor(int, int)
100017a8:	83 c4 10             	add    esp,0x10
100017ab:	a1 00 00 00 00       	mov    eax,ds:0x0	100017ac: R_386_32	term
100017b0:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
100017b4:	74 07                	je     100017bd <drawBasicWindowX(int, int, int, int, char const*, bool)+0x196>
100017b6:	ba 07 00 00 00       	mov    edx,0x7
100017bb:	eb 05                	jmp    100017c2 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x19b>
100017bd:	ba 0f 00 00 00       	mov    edx,0xf
100017c2:	52                   	push   edx
100017c3:	6a 00                	push   0x0
100017c5:	6a dd                	push   0xffffffdd
100017c7:	50                   	push   eax
100017c8:	e8 fc ff ff ff       	call   100017c9 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x1a2>	100017c9: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
100017cd:	83 c4 10             	add    esp,0x10
100017d0:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
100017d3:	e9 66 ff ff ff       	jmp    1000173e <drawBasicWindowX(int, int, int, int, char const*, bool)+0x117>
100017d8:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
100017db:	83 ec 0c             	sub    esp,0xc
100017de:	ff 75 18             	push   DWORD PTR [ebp+0x18]
100017e1:	e8 fc ff ff ff       	call   100017e2 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x1bb>	100017e2: R_386_PC32	strlen
100017e6:	83 c4 10             	add    esp,0x10
100017e9:	29 c3                	sub    ebx,eax
100017eb:	89 d8                	mov    eax,ebx
100017ed:	d1 e8                	shr    eax,1
100017ef:	48                   	dec    eax
100017f0:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
100017f3:	a1 00 00 00 00       	mov    eax,ds:0x0	100017f4: R_386_32	term
100017f8:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
100017fb:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
100017fe:	01 ca                	add    edx,ecx
10001800:	83 ec 04             	sub    esp,0x4
10001803:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10001806:	52                   	push   edx
10001807:	50                   	push   eax
10001808:	e8 fc ff ff ff       	call   10001809 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x1e2>	10001809: R_386_PC32	VgaText::setCursor(int, int)
1000180d:	83 c4 10             	add    esp,0x10
10001810:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
10001817:	83 ec 0c             	sub    esp,0xc
1000181a:	ff 75 18             	push   DWORD PTR [ebp+0x18]
1000181d:	e8 fc ff ff ff       	call   1000181e <drawBasicWindowX(int, int, int, int, char const*, bool)+0x1f7>	1000181e: R_386_PC32	strlen
10001822:	83 c4 10             	add    esp,0x10
10001825:	89 c2                	mov    edx,eax
10001827:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
1000182a:	39 c2                	cmp    edx,eax
1000182c:	76 25                	jbe    10001853 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x22c>
1000182e:	a1 00 00 00 00       	mov    eax,ds:0x0	1000182f: R_386_32	term
10001833:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
10001836:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
10001839:	01 ca                	add    edx,ecx
1000183b:	8a 12                	mov    dl,BYTE PTR [edx]
1000183d:	0f be d2             	movsx  edx,dl
10001840:	6a 01                	push   0x1
10001842:	6a 0f                	push   0xf
10001844:	52                   	push   edx
10001845:	50                   	push   eax
10001846:	e8 fc ff ff ff       	call   10001847 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x220>	10001847: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
1000184b:	83 c4 10             	add    esp,0x10
1000184e:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
10001851:	eb c4                	jmp    10001817 <drawBasicWindowX(int, int, int, int, char const*, bool)+0x1f0>
10001853:	90                   	nop
10001854:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
10001857:	c9                   	leave  
10001858:	c3                   	ret    

10001859 <drawBasicWindow(int, int, int, int, char const*)>:
10001859:	55                   	push   ebp
1000185a:	89 e5                	mov    ebp,esp
1000185c:	83 ec 08             	sub    esp,0x8
1000185f:	83 ec 08             	sub    esp,0x8
10001862:	6a 00                	push   0x0
10001864:	ff 75 18             	push   DWORD PTR [ebp+0x18]
10001867:	ff 75 14             	push   DWORD PTR [ebp+0x14]
1000186a:	ff 75 10             	push   DWORD PTR [ebp+0x10]
1000186d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10001870:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001873:	e8 fc ff ff ff       	call   10001874 <drawBasicWindow(int, int, int, int, char const*)+0x1b>	10001874: R_386_PC32	drawBasicWindowX(int, int, int, int, char const*, bool)
10001878:	83 c4 20             	add    esp,0x20
1000187b:	90                   	nop
1000187c:	c9                   	leave  
1000187d:	c3                   	ret    

1000187e <bootInstallKeybrd(KeyboardToken, bool*)>:
1000187e:	55                   	push   ebp
1000187f:	89 e5                	mov    ebp,esp
10001881:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
10001884:	05 04 01 00 00       	add    eax,0x104
10001889:	8a 00                	mov    al,BYTE PTR [eax]
1000188b:	84 c0                	test   al,al
1000188d:	74 15                	je     100018a4 <bootInstallKeybrd(KeyboardToken, bool*)+0x26>
1000188f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001892:	66 83 f8 09          	cmp    ax,0x9
10001896:	75 0c                	jne    100018a4 <bootInstallKeybrd(KeyboardToken, bool*)+0x26>
10001898:	c6 05 00 00 00 00 7f 	mov    BYTE PTR ds:0x0,0x7f	1000189a: R_386_32	installKey
1000189f:	e9 94 00 00 00       	jmp    10001938 <bootInstallKeybrd(KeyboardToken, bool*)+0xba>
100018a4:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
100018a7:	84 c0                	test   al,al
100018a9:	0f 85 88 00 00 00    	jne    10001937 <bootInstallKeybrd(KeyboardToken, bool*)+0xb9>
100018af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100018b2:	66 3d 0a 02          	cmp    ax,0x20a
100018b6:	75 09                	jne    100018c1 <bootInstallKeybrd(KeyboardToken, bool*)+0x43>
100018b8:	c6 05 00 00 00 00 1b 	mov    BYTE PTR ds:0x0,0x1b	100018ba: R_386_32	installKey
100018bf:	eb 77                	jmp    10001938 <bootInstallKeybrd(KeyboardToken, bool*)+0xba>
100018c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100018c4:	66 3d 0d 02          	cmp    ax,0x20d
100018c8:	75 09                	jne    100018d3 <bootInstallKeybrd(KeyboardToken, bool*)+0x55>
100018ca:	c6 05 00 00 00 00 03 	mov    BYTE PTR ds:0x0,0x3	100018cc: R_386_32	installKey
100018d1:	eb 65                	jmp    10001938 <bootInstallKeybrd(KeyboardToken, bool*)+0xba>
100018d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100018d6:	66 3d 0e 02          	cmp    ax,0x20e
100018da:	75 09                	jne    100018e5 <bootInstallKeybrd(KeyboardToken, bool*)+0x67>
100018dc:	c6 05 00 00 00 00 04 	mov    BYTE PTR ds:0x0,0x4	100018de: R_386_32	installKey
100018e3:	eb 53                	jmp    10001938 <bootInstallKeybrd(KeyboardToken, bool*)+0xba>
100018e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100018e8:	66 3d 0b 02          	cmp    ax,0x20b
100018ec:	75 09                	jne    100018f7 <bootInstallKeybrd(KeyboardToken, bool*)+0x79>
100018ee:	c6 05 00 00 00 00 01 	mov    BYTE PTR ds:0x0,0x1	100018f0: R_386_32	installKey
100018f5:	eb 41                	jmp    10001938 <bootInstallKeybrd(KeyboardToken, bool*)+0xba>
100018f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100018fa:	66 3d 0c 02          	cmp    ax,0x20c
100018fe:	75 09                	jne    10001909 <bootInstallKeybrd(KeyboardToken, bool*)+0x8b>
10001900:	c6 05 00 00 00 00 02 	mov    BYTE PTR ds:0x0,0x2	10001902: R_386_32	installKey
10001907:	eb 2f                	jmp    10001938 <bootInstallKeybrd(KeyboardToken, bool*)+0xba>
10001909:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000190c:	66 3d 05 02          	cmp    ax,0x205
10001910:	75 09                	jne    1000191b <bootInstallKeybrd(KeyboardToken, bool*)+0x9d>
10001912:	c6 05 00 00 00 00 7d 	mov    BYTE PTR ds:0x0,0x7d	10001914: R_386_32	installKey
10001919:	eb 1d                	jmp    10001938 <bootInstallKeybrd(KeyboardToken, bool*)+0xba>
1000191b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000191e:	66 3d 05 02          	cmp    ax,0x205
10001922:	75 09                	jne    1000192d <bootInstallKeybrd(KeyboardToken, bool*)+0xaf>
10001924:	c6 05 00 00 00 00 7e 	mov    BYTE PTR ds:0x0,0x7e	10001926: R_386_32	installKey
1000192b:	eb 0b                	jmp    10001938 <bootInstallKeybrd(KeyboardToken, bool*)+0xba>
1000192d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001930:	a2 00 00 00 00       	mov    ds:0x0,al	10001931: R_386_32	installKey
10001935:	eb 01                	jmp    10001938 <bootInstallKeybrd(KeyboardToken, bool*)+0xba>
10001937:	90                   	nop
10001938:	5d                   	pop    ebp
10001939:	c3                   	ret    

1000193a <bootInstallTasks(int)>:
1000193a:	55                   	push   ebp
1000193b:	89 e5                	mov    ebp,esp
1000193d:	83 ec 08             	sub    esp,0x8
10001940:	a1 00 00 00 00       	mov    eax,ds:0x0	10001941: R_386_32	term
10001945:	83 ec 04             	sub    esp,0x4
10001948:	6a 08                	push   0x8
1000194a:	6a 18                	push   0x18
1000194c:	50                   	push   eax
1000194d:	e8 fc ff ff ff       	call   1000194e <bootInstallTasks(int)+0x14>	1000194e: R_386_PC32	VgaText::setCursor(int, int)
10001952:	83 c4 10             	add    esp,0x10
10001955:	a1 00 00 00 00       	mov    eax,ds:0x0	10001956: R_386_32	term
1000195a:	83 ec 08             	sub    esp,0x8
1000195d:	68 10 55 00 10       	push   0x10005510	1000195e: R_386_32	.text
10001962:	50                   	push   eax
10001963:	e8 fc ff ff ff       	call   10001964 <bootInstallTasks(int)+0x2a>	10001964: R_386_PC32	VgaText::puts(char const*)
10001968:	83 c4 10             	add    esp,0x10
1000196b:	a1 00 00 00 00       	mov    eax,ds:0x0	1000196c: R_386_32	term
10001970:	83 ec 04             	sub    esp,0x4
10001973:	6a 0a                	push   0xa
10001975:	6a 1a                	push   0x1a
10001977:	50                   	push   eax
10001978:	e8 fc ff ff ff       	call   10001979 <bootInstallTasks(int)+0x3f>	10001979: R_386_PC32	VgaText::setCursor(int, int)
1000197d:	83 c4 10             	add    esp,0x10
10001980:	a1 00 00 00 00       	mov    eax,ds:0x0	10001981: R_386_32	term
10001985:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
10001989:	75 07                	jne    10001992 <bootInstallTasks(int)+0x58>
1000198b:	ba 38 55 00 10       	mov    edx,0x10005538	1000198c: R_386_32	.text
10001990:	eb 05                	jmp    10001997 <bootInstallTasks(int)+0x5d>
10001992:	ba 3b 55 00 10       	mov    edx,0x1000553b	10001993: R_386_32	.text
10001997:	83 ec 08             	sub    esp,0x8
1000199a:	52                   	push   edx
1000199b:	50                   	push   eax
1000199c:	e8 fc ff ff ff       	call   1000199d <bootInstallTasks(int)+0x63>	1000199d: R_386_PC32	VgaText::puts(char const*)
100019a1:	83 c4 10             	add    esp,0x10
100019a4:	a1 00 00 00 00       	mov    eax,ds:0x0	100019a5: R_386_32	term
100019a9:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
100019ad:	78 07                	js     100019b6 <bootInstallTasks(int)+0x7c>
100019af:	ba 00 00 00 00       	mov    edx,0x0
100019b4:	eb 05                	jmp    100019bb <bootInstallTasks(int)+0x81>
100019b6:	ba 07 00 00 00       	mov    edx,0x7
100019bb:	6a 0f                	push   0xf
100019bd:	52                   	push   edx
100019be:	68 3e 55 00 10       	push   0x1000553e	100019bf: R_386_32	.text
100019c3:	50                   	push   eax
100019c4:	e8 fc ff ff ff       	call   100019c5 <bootInstallTasks(int)+0x8b>	100019c5: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
100019c9:	83 c4 10             	add    esp,0x10
100019cc:	a1 00 00 00 00       	mov    eax,ds:0x0	100019cd: R_386_32	term
100019d1:	83 ec 04             	sub    esp,0x4
100019d4:	6a 0b                	push   0xb
100019d6:	6a 1a                	push   0x1a
100019d8:	50                   	push   eax
100019d9:	e8 fc ff ff ff       	call   100019da <bootInstallTasks(int)+0xa0>	100019da: R_386_PC32	VgaText::setCursor(int, int)
100019de:	83 c4 10             	add    esp,0x10
100019e1:	a1 00 00 00 00       	mov    eax,ds:0x0	100019e2: R_386_32	term
100019e6:	83 7d 08 01          	cmp    DWORD PTR [ebp+0x8],0x1
100019ea:	75 07                	jne    100019f3 <bootInstallTasks(int)+0xb9>
100019ec:	ba 38 55 00 10       	mov    edx,0x10005538	100019ed: R_386_32	.text
100019f1:	eb 05                	jmp    100019f8 <bootInstallTasks(int)+0xbe>
100019f3:	ba 3b 55 00 10       	mov    edx,0x1000553b	100019f4: R_386_32	.text
100019f8:	83 ec 08             	sub    esp,0x8
100019fb:	52                   	push   edx
100019fc:	50                   	push   eax
100019fd:	e8 fc ff ff ff       	call   100019fe <bootInstallTasks(int)+0xc4>	100019fe: R_386_PC32	VgaText::puts(char const*)
10001a02:	83 c4 10             	add    esp,0x10
10001a05:	a1 00 00 00 00       	mov    eax,ds:0x0	10001a06: R_386_32	term
10001a0a:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
10001a0e:	7e 07                	jle    10001a17 <bootInstallTasks(int)+0xdd>
10001a10:	ba 00 00 00 00       	mov    edx,0x0
10001a15:	eb 05                	jmp    10001a1c <bootInstallTasks(int)+0xe2>
10001a17:	ba 07 00 00 00       	mov    edx,0x7
10001a1c:	6a 0f                	push   0xf
10001a1e:	52                   	push   edx
10001a1f:	68 56 55 00 10       	push   0x10005556	10001a20: R_386_32	.text
10001a24:	50                   	push   eax
10001a25:	e8 fc ff ff ff       	call   10001a26 <bootInstallTasks(int)+0xec>	10001a26: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10001a2a:	83 c4 10             	add    esp,0x10
10001a2d:	a1 00 00 00 00       	mov    eax,ds:0x0	10001a2e: R_386_32	term
10001a32:	83 ec 04             	sub    esp,0x4
10001a35:	6a 0c                	push   0xc
10001a37:	6a 1a                	push   0x1a
10001a39:	50                   	push   eax
10001a3a:	e8 fc ff ff ff       	call   10001a3b <bootInstallTasks(int)+0x101>	10001a3b: R_386_PC32	VgaText::setCursor(int, int)
10001a3f:	83 c4 10             	add    esp,0x10
10001a42:	a1 00 00 00 00       	mov    eax,ds:0x0	10001a43: R_386_32	term
10001a47:	83 7d 08 02          	cmp    DWORD PTR [ebp+0x8],0x2
10001a4b:	75 07                	jne    10001a54 <bootInstallTasks(int)+0x11a>
10001a4d:	ba 38 55 00 10       	mov    edx,0x10005538	10001a4e: R_386_32	.text
10001a52:	eb 05                	jmp    10001a59 <bootInstallTasks(int)+0x11f>
10001a54:	ba 3b 55 00 10       	mov    edx,0x1000553b	10001a55: R_386_32	.text
10001a59:	83 ec 08             	sub    esp,0x8
10001a5c:	52                   	push   edx
10001a5d:	50                   	push   eax
10001a5e:	e8 fc ff ff ff       	call   10001a5f <bootInstallTasks(int)+0x125>	10001a5f: R_386_PC32	VgaText::puts(char const*)
10001a63:	83 c4 10             	add    esp,0x10
10001a66:	a1 00 00 00 00       	mov    eax,ds:0x0	10001a67: R_386_32	term
10001a6b:	83 7d 08 01          	cmp    DWORD PTR [ebp+0x8],0x1
10001a6f:	7e 07                	jle    10001a78 <bootInstallTasks(int)+0x13e>
10001a71:	ba 00 00 00 00       	mov    edx,0x0
10001a76:	eb 05                	jmp    10001a7d <bootInstallTasks(int)+0x143>
10001a78:	ba 07 00 00 00       	mov    edx,0x7
10001a7d:	6a 0f                	push   0xf
10001a7f:	52                   	push   edx
10001a80:	68 6c 55 00 10       	push   0x1000556c	10001a81: R_386_32	.text
10001a85:	50                   	push   eax
10001a86:	e8 fc ff ff ff       	call   10001a87 <bootInstallTasks(int)+0x14d>	10001a87: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10001a8b:	83 c4 10             	add    esp,0x10
10001a8e:	a1 00 00 00 00       	mov    eax,ds:0x0	10001a8f: R_386_32	term
10001a93:	83 ec 04             	sub    esp,0x4
10001a96:	6a 0d                	push   0xd
10001a98:	6a 1a                	push   0x1a
10001a9a:	50                   	push   eax
10001a9b:	e8 fc ff ff ff       	call   10001a9c <bootInstallTasks(int)+0x162>	10001a9c: R_386_PC32	VgaText::setCursor(int, int)
10001aa0:	83 c4 10             	add    esp,0x10
10001aa3:	a1 00 00 00 00       	mov    eax,ds:0x0	10001aa4: R_386_32	term
10001aa8:	83 7d 08 03          	cmp    DWORD PTR [ebp+0x8],0x3
10001aac:	75 07                	jne    10001ab5 <bootInstallTasks(int)+0x17b>
10001aae:	ba 38 55 00 10       	mov    edx,0x10005538	10001aaf: R_386_32	.text
10001ab3:	eb 05                	jmp    10001aba <bootInstallTasks(int)+0x180>
10001ab5:	ba 3b 55 00 10       	mov    edx,0x1000553b	10001ab6: R_386_32	.text
10001aba:	83 ec 08             	sub    esp,0x8
10001abd:	52                   	push   edx
10001abe:	50                   	push   eax
10001abf:	e8 fc ff ff ff       	call   10001ac0 <bootInstallTasks(int)+0x186>	10001ac0: R_386_PC32	VgaText::puts(char const*)
10001ac4:	83 c4 10             	add    esp,0x10
10001ac7:	a1 00 00 00 00       	mov    eax,ds:0x0	10001ac8: R_386_32	term
10001acc:	83 7d 08 02          	cmp    DWORD PTR [ebp+0x8],0x2
10001ad0:	7e 07                	jle    10001ad9 <bootInstallTasks(int)+0x19f>
10001ad2:	ba 00 00 00 00       	mov    edx,0x0
10001ad7:	eb 05                	jmp    10001ade <bootInstallTasks(int)+0x1a4>
10001ad9:	ba 07 00 00 00       	mov    edx,0x7
10001ade:	6a 0f                	push   0xf
10001ae0:	52                   	push   edx
10001ae1:	68 82 55 00 10       	push   0x10005582	10001ae2: R_386_32	.text
10001ae6:	50                   	push   eax
10001ae7:	e8 fc ff ff ff       	call   10001ae8 <bootInstallTasks(int)+0x1ae>	10001ae8: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10001aec:	83 c4 10             	add    esp,0x10
10001aef:	a1 00 00 00 00       	mov    eax,ds:0x0	10001af0: R_386_32	term
10001af4:	83 ec 04             	sub    esp,0x4
10001af7:	6a 0e                	push   0xe
10001af9:	6a 1a                	push   0x1a
10001afb:	50                   	push   eax
10001afc:	e8 fc ff ff ff       	call   10001afd <bootInstallTasks(int)+0x1c3>	10001afd: R_386_PC32	VgaText::setCursor(int, int)
10001b01:	83 c4 10             	add    esp,0x10
10001b04:	a1 00 00 00 00       	mov    eax,ds:0x0	10001b05: R_386_32	term
10001b09:	83 7d 08 04          	cmp    DWORD PTR [ebp+0x8],0x4
10001b0d:	75 07                	jne    10001b16 <bootInstallTasks(int)+0x1dc>
10001b0f:	ba 38 55 00 10       	mov    edx,0x10005538	10001b10: R_386_32	.text
10001b14:	eb 05                	jmp    10001b1b <bootInstallTasks(int)+0x1e1>
10001b16:	ba 3b 55 00 10       	mov    edx,0x1000553b	10001b17: R_386_32	.text
10001b1b:	83 ec 08             	sub    esp,0x8
10001b1e:	52                   	push   edx
10001b1f:	50                   	push   eax
10001b20:	e8 fc ff ff ff       	call   10001b21 <bootInstallTasks(int)+0x1e7>	10001b21: R_386_PC32	VgaText::puts(char const*)
10001b25:	83 c4 10             	add    esp,0x10
10001b28:	a1 00 00 00 00       	mov    eax,ds:0x0	10001b29: R_386_32	term
10001b2d:	83 7d 08 03          	cmp    DWORD PTR [ebp+0x8],0x3
10001b31:	7e 07                	jle    10001b3a <bootInstallTasks(int)+0x200>
10001b33:	ba 00 00 00 00       	mov    edx,0x0
10001b38:	eb 05                	jmp    10001b3f <bootInstallTasks(int)+0x205>
10001b3a:	ba 07 00 00 00       	mov    edx,0x7
10001b3f:	6a 0f                	push   0xf
10001b41:	52                   	push   edx
10001b42:	68 96 55 00 10       	push   0x10005596	10001b43: R_386_32	.text
10001b47:	50                   	push   eax
10001b48:	e8 fc ff ff ff       	call   10001b49 <bootInstallTasks(int)+0x20f>	10001b49: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10001b4d:	83 c4 10             	add    esp,0x10
10001b50:	a1 00 00 00 00       	mov    eax,ds:0x0	10001b51: R_386_32	term
10001b55:	83 ec 04             	sub    esp,0x4
10001b58:	6a 0f                	push   0xf
10001b5a:	6a 1a                	push   0x1a
10001b5c:	50                   	push   eax
10001b5d:	e8 fc ff ff ff       	call   10001b5e <bootInstallTasks(int)+0x224>	10001b5e: R_386_PC32	VgaText::setCursor(int, int)
10001b62:	83 c4 10             	add    esp,0x10
10001b65:	a1 00 00 00 00       	mov    eax,ds:0x0	10001b66: R_386_32	term
10001b6a:	83 7d 08 05          	cmp    DWORD PTR [ebp+0x8],0x5
10001b6e:	75 07                	jne    10001b77 <bootInstallTasks(int)+0x23d>
10001b70:	ba 38 55 00 10       	mov    edx,0x10005538	10001b71: R_386_32	.text
10001b75:	eb 05                	jmp    10001b7c <bootInstallTasks(int)+0x242>
10001b77:	ba 3b 55 00 10       	mov    edx,0x1000553b	10001b78: R_386_32	.text
10001b7c:	83 ec 08             	sub    esp,0x8
10001b7f:	52                   	push   edx
10001b80:	50                   	push   eax
10001b81:	e8 fc ff ff ff       	call   10001b82 <bootInstallTasks(int)+0x248>	10001b82: R_386_PC32	VgaText::puts(char const*)
10001b86:	83 c4 10             	add    esp,0x10
10001b89:	a1 00 00 00 00       	mov    eax,ds:0x0	10001b8a: R_386_32	term
10001b8e:	83 7d 08 04          	cmp    DWORD PTR [ebp+0x8],0x4
10001b92:	7e 07                	jle    10001b9b <bootInstallTasks(int)+0x261>
10001b94:	ba 00 00 00 00       	mov    edx,0x0
10001b99:	eb 05                	jmp    10001ba0 <bootInstallTasks(int)+0x266>
10001b9b:	ba 07 00 00 00       	mov    edx,0x7
10001ba0:	6a 0f                	push   0xf
10001ba2:	52                   	push   edx
10001ba3:	68 ae 55 00 10       	push   0x100055ae	10001ba4: R_386_32	.text
10001ba8:	50                   	push   eax
10001ba9:	e8 fc ff ff ff       	call   10001baa <bootInstallTasks(int)+0x270>	10001baa: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10001bae:	83 c4 10             	add    esp,0x10
10001bb1:	90                   	nop
10001bb2:	c9                   	leave  
10001bb3:	c3                   	ret    

10001bb4 <ror(unsigned long long, int, int)>:
10001bb4:	55                   	push   ebp
10001bb5:	89 e5                	mov    ebp,esp
10001bb7:	56                   	push   esi
10001bb8:	53                   	push   ebx
10001bb9:	83 ec 20             	sub    esp,0x20
10001bbc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001bbf:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
10001bc2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10001bc5:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10001bc8:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
10001bcb:	ba 01 00 00 00       	mov    edx,0x1
10001bd0:	88 c1                	mov    cl,al
10001bd2:	d3 e2                	shl    edx,cl
10001bd4:	89 d0                	mov    eax,edx
10001bd6:	48                   	dec    eax
10001bd7:	99                   	cdq    
10001bd8:	89 c1                	mov    ecx,eax
10001bda:	23 4d e0             	and    ecx,DWORD PTR [ebp-0x20]
10001bdd:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
10001be0:	89 d0                	mov    eax,edx
10001be2:	23 45 e4             	and    eax,DWORD PTR [ebp-0x1c]
10001be5:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
10001be8:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
10001beb:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10001bee:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10001bf1:	0f ad d0             	shrd   eax,edx,cl
10001bf4:	d3 ea                	shr    edx,cl
10001bf6:	f6 c1 20             	test   cl,0x20
10001bf9:	74 04                	je     10001bff <ror(unsigned long long, int, int)+0x4b>
10001bfb:	89 d0                	mov    eax,edx
10001bfd:	31 d2                	xor    edx,edx
10001bff:	89 c3                	mov    ebx,eax
10001c01:	89 d6                	mov    esi,edx
10001c03:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
10001c06:	2b 45 10             	sub    eax,DWORD PTR [ebp+0x10]
10001c09:	89 c1                	mov    ecx,eax
10001c0b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001c0e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001c11:	0f a5 c2             	shld   edx,eax,cl
10001c14:	d3 e0                	shl    eax,cl
10001c16:	f6 c1 20             	test   cl,0x20
10001c19:	74 04                	je     10001c1f <ror(unsigned long long, int, int)+0x6b>
10001c1b:	89 c2                	mov    edx,eax
10001c1d:	31 c0                	xor    eax,eax
10001c1f:	89 d1                	mov    ecx,edx
10001c21:	89 c2                	mov    edx,eax
10001c23:	89 d8                	mov    eax,ebx
10001c25:	09 d0                	or     eax,edx
10001c27:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
10001c2a:	89 f0                	mov    eax,esi
10001c2c:	09 c8                	or     eax,ecx
10001c2e:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
10001c31:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10001c34:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
10001c37:	83 c4 20             	add    esp,0x20
10001c3a:	5b                   	pop    ebx
10001c3b:	5e                   	pop    esi
10001c3c:	5d                   	pop    ebp
10001c3d:	c3                   	ret    

10001c3e <swapBits(unsigned long long, unsigned long long, unsigned long long)>:
10001c3e:	55                   	push   ebp
10001c3f:	89 e5                	mov    ebp,esp
10001c41:	56                   	push   esi
10001c42:	53                   	push   ebx
10001c43:	83 ec 40             	sub    esp,0x40
10001c46:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001c49:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10001c4c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10001c4f:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
10001c52:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
10001c55:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
10001c58:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
10001c5b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
10001c5e:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
10001c61:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
10001c64:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
10001c67:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10001c6a:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
10001c6d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001c70:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001c73:	0f ad d0             	shrd   eax,edx,cl
10001c76:	d3 ea                	shr    edx,cl
10001c78:	f6 c1 20             	test   cl,0x20
10001c7b:	74 04                	je     10001c81 <swapBits(unsigned long long, unsigned long long, unsigned long long)+0x43>
10001c7d:	89 d0                	mov    eax,edx
10001c7f:	31 d2                	xor    edx,edx
10001c81:	89 c3                	mov    ebx,eax
10001c83:	89 d6                	mov    esi,edx
10001c85:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
10001c88:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001c8b:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001c8e:	0f ad d0             	shrd   eax,edx,cl
10001c91:	d3 ea                	shr    edx,cl
10001c93:	f6 c1 20             	test   cl,0x20
10001c96:	74 04                	je     10001c9c <swapBits(unsigned long long, unsigned long long, unsigned long long)+0x5e>
10001c98:	89 d0                	mov    eax,edx
10001c9a:	31 d2                	xor    edx,edx
10001c9c:	89 d1                	mov    ecx,edx
10001c9e:	89 c2                	mov    edx,eax
10001ca0:	89 d8                	mov    eax,ebx
10001ca2:	31 d0                	xor    eax,edx
10001ca4:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
10001ca7:	89 f0                	mov    eax,esi
10001ca9:	31 c8                	xor    eax,ecx
10001cab:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
10001cae:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
10001cb1:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
10001cb4:	89 c6                	mov    esi,eax
10001cb6:	83 e6 01             	and    esi,0x1
10001cb9:	89 75 c8             	mov    DWORD PTR [ebp-0x38],esi
10001cbc:	89 d0                	mov    eax,edx
10001cbe:	83 e0 00             	and    eax,0x0
10001cc1:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
10001cc4:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
10001cc7:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
10001cca:	89 c3                	mov    ebx,eax
10001ccc:	80 f7 00             	xor    bh,0x0
10001ccf:	89 5d b8             	mov    DWORD PTR [ebp-0x48],ebx
10001cd2:	89 d0                	mov    eax,edx
10001cd4:	80 f4 00             	xor    ah,0x0
10001cd7:	89 45 bc             	mov    DWORD PTR [ebp-0x44],eax
10001cda:	8b 55 b8             	mov    edx,DWORD PTR [ebp-0x48]
10001cdd:	8b 4d bc             	mov    ecx,DWORD PTR [ebp-0x44]
10001ce0:	89 c8                	mov    eax,ecx
10001ce2:	09 d0                	or     eax,edx
10001ce4:	85 c0                	test   eax,eax
10001ce6:	74 62                	je     10001d4a <swapBits(unsigned long long, unsigned long long, unsigned long long)+0x10c>
10001ce8:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
10001ceb:	b8 01 00 00 00       	mov    eax,0x1
10001cf0:	ba 00 00 00 00       	mov    edx,0x0
10001cf5:	0f a5 c2             	shld   edx,eax,cl
10001cf8:	d3 e0                	shl    eax,cl
10001cfa:	f6 c1 20             	test   cl,0x20
10001cfd:	74 04                	je     10001d03 <swapBits(unsigned long long, unsigned long long, unsigned long long)+0xc5>
10001cff:	89 c2                	mov    edx,eax
10001d01:	31 c0                	xor    eax,eax
10001d03:	89 c3                	mov    ebx,eax
10001d05:	89 d6                	mov    esi,edx
10001d07:	89 d8                	mov    eax,ebx
10001d09:	33 45 f0             	xor    eax,DWORD PTR [ebp-0x10]
10001d0c:	89 45 c0             	mov    DWORD PTR [ebp-0x40],eax
10001d0f:	89 f0                	mov    eax,esi
10001d11:	33 45 f4             	xor    eax,DWORD PTR [ebp-0xc]
10001d14:	89 45 c4             	mov    DWORD PTR [ebp-0x3c],eax
10001d17:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
10001d1a:	b8 01 00 00 00       	mov    eax,0x1
10001d1f:	ba 00 00 00 00       	mov    edx,0x0
10001d24:	0f a5 c2             	shld   edx,eax,cl
10001d27:	d3 e0                	shl    eax,cl
10001d29:	f6 c1 20             	test   cl,0x20
10001d2c:	74 04                	je     10001d32 <swapBits(unsigned long long, unsigned long long, unsigned long long)+0xf4>
10001d2e:	89 c2                	mov    edx,eax
10001d30:	31 c0                	xor    eax,eax
10001d32:	89 c1                	mov    ecx,eax
10001d34:	89 d3                	mov    ebx,edx
10001d36:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
10001d39:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
10001d3c:	89 c6                	mov    esi,eax
10001d3e:	31 ce                	xor    esi,ecx
10001d40:	89 75 d8             	mov    DWORD PTR [ebp-0x28],esi
10001d43:	31 d3                	xor    ebx,edx
10001d45:	89 5d dc             	mov    DWORD PTR [ebp-0x24],ebx
10001d48:	eb 0c                	jmp    10001d56 <swapBits(unsigned long long, unsigned long long, unsigned long long)+0x118>
10001d4a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001d4d:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001d50:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
10001d53:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
10001d56:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10001d59:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
10001d5c:	83 c4 40             	add    esp,0x40
10001d5f:	5b                   	pop    ebx
10001d60:	5e                   	pop    esi
10001d61:	5d                   	pop    ebp
10001d62:	c3                   	ret    

10001d63 <getChecksum(unsigned int)>:
10001d63:	55                   	push   ebp
10001d64:	89 e5                	mov    ebp,esp
10001d66:	56                   	push   esi
10001d67:	53                   	push   ebx
10001d68:	83 ec 20             	sub    esp,0x20
10001d6b:	66 c7 45 f6 49 4e    	mov    WORD PTR [ebp-0xa],0x4e49
10001d71:	66 c7 45 f4 79 6e    	mov    WORD PTR [ebp-0xc],0x6e79
10001d77:	66 c7 45 f2 67 61    	mov    WORD PTR [ebp-0xe],0x6167
10001d7d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001d80:	c1 e8 10             	shr    eax,0x10
10001d83:	89 c1                	mov    ecx,eax
10001d85:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001d88:	89 c2                	mov    edx,eax
10001d8a:	89 d0                	mov    eax,edx
10001d8c:	c1 e0 06             	shl    eax,0x6
10001d8f:	29 d0                	sub    eax,edx
10001d91:	c1 e0 04             	shl    eax,0x4
10001d94:	01 d0                	add    eax,edx
10001d96:	31 c8                	xor    eax,ecx
10001d98:	66 89 45 f0          	mov    WORD PTR [ebp-0x10],ax
10001d9c:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
10001da0:	0f 84 b1 00 00 00    	je     10001e57 <getChecksum(unsigned int)+0xf4>
10001da6:	b8 f4 02 00 00       	mov    eax,0x2f4
10001dab:	ba 00 00 00 00       	mov    edx,0x0
10001db0:	f7 75 08             	div    DWORD PTR [ebp+0x8]
10001db3:	89 c3                	mov    ebx,eax
10001db5:	be 00 00 00 00       	mov    esi,0x0
10001dba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001dbd:	ba 00 00 00 00       	mov    edx,0x0
10001dc2:	6a 1d                	push   0x1d
10001dc4:	6a 05                	push   0x5
10001dc6:	52                   	push   edx
10001dc7:	50                   	push   eax
10001dc8:	e8 fc ff ff ff       	call   10001dc9 <getChecksum(unsigned int)+0x66>	10001dc9: R_386_PC32	ror(unsigned long long, int, int)
10001dcd:	83 c4 10             	add    esp,0x10
10001dd0:	05 52 3f 04 00       	add    eax,0x43f52
10001dd5:	83 d2 00             	adc    edx,0x0
10001dd8:	89 d9                	mov    ecx,ebx
10001dda:	31 c1                	xor    ecx,eax
10001ddc:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
10001ddf:	31 d6                	xor    esi,edx
10001de1:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
10001de4:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
10001de7:	66 8b 45 f6          	mov    ax,WORD PTR [ebp-0xa]
10001deb:	66 0f af c2          	imul   ax,dx
10001def:	66 89 45 f6          	mov    WORD PTR [ebp-0xa],ax
10001df3:	b8 ea 00 00 00       	mov    eax,0xea
10001df8:	ba 00 00 00 00       	mov    edx,0x0
10001dfd:	f7 75 08             	div    DWORD PTR [ebp+0x8]
10001e00:	89 c3                	mov    ebx,eax
10001e02:	be 00 00 00 00       	mov    esi,0x0
10001e07:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001e0a:	ba 00 00 00 00       	mov    edx,0x0
10001e0f:	6a 1f                	push   0x1f
10001e11:	6a 03                	push   0x3
10001e13:	52                   	push   edx
10001e14:	50                   	push   eax
10001e15:	e8 fc ff ff ff       	call   10001e16 <getChecksum(unsigned int)+0xb3>	10001e16: R_386_PC32	ror(unsigned long long, int, int)
10001e1a:	83 c4 10             	add    esp,0x10
10001e1d:	05 05 db 09 00       	add    eax,0x9db05
10001e22:	83 d2 00             	adc    edx,0x0
10001e25:	89 d9                	mov    ecx,ebx
10001e27:	31 c1                	xor    ecx,eax
10001e29:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
10001e2c:	31 d6                	xor    esi,edx
10001e2e:	89 75 dc             	mov    DWORD PTR [ebp-0x24],esi
10001e31:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10001e34:	66 29 45 f4          	sub    WORD PTR [ebp-0xc],ax
10001e38:	66 8b 45 f6          	mov    ax,WORD PTR [ebp-0xa]
10001e3c:	33 45 f4             	xor    eax,DWORD PTR [ebp-0xc]
10001e3f:	25 d2 04 00 00       	and    eax,0x4d2
10001e44:	66 01 45 f2          	add    WORD PTR [ebp-0xe],ax
10001e48:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001e4b:	66 01 45 f2          	add    WORD PTR [ebp-0xe],ax
10001e4f:	d1 6d 08             	shr    DWORD PTR [ebp+0x8],1
10001e52:	e9 45 ff ff ff       	jmp    10001d9c <getChecksum(unsigned int)+0x39>
10001e57:	66 8b 45 f6          	mov    ax,WORD PTR [ebp-0xa]
10001e5b:	33 45 f4             	xor    eax,DWORD PTR [ebp-0xc]
10001e5e:	66 33 45 f2          	xor    ax,WORD PTR [ebp-0xe]
10001e62:	33 45 f0             	xor    eax,DWORD PTR [ebp-0x10]
10001e65:	0f b7 c0             	movzx  eax,ax
10001e68:	25 ff 7f 00 00       	and    eax,0x7fff
10001e6d:	8d 65 f8             	lea    esp,[ebp-0x8]
10001e70:	5b                   	pop    ebx
10001e71:	5e                   	pop    esi
10001e72:	5d                   	pop    ebp
10001e73:	c3                   	ret    

10001e74 <createKey(char*, unsigned int)>:
10001e74:	55                   	push   ebp
10001e75:	89 e5                	mov    ebp,esp
10001e77:	53                   	push   ebx
10001e78:	83 ec 34             	sub    esp,0x34
10001e7b:	68 c0 55 00 10       	push   0x100055c0	10001e7c: R_386_32	.text
10001e80:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001e83:	e8 fc ff ff ff       	call   10001e84 <createKey(char*, unsigned int)+0x10>	10001e84: R_386_PC32	strcpy
10001e88:	83 c4 08             	add    esp,0x8
10001e8b:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
10001e8e:	bb 00 00 00 00       	mov    ebx,0x0
10001e93:	89 c8                	mov    eax,ecx
10001e95:	89 da                	mov    edx,ebx
10001e97:	0f a4 c2 0f          	shld   edx,eax,0xf
10001e9b:	c1 e0 0f             	shl    eax,0xf
10001e9e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10001ea1:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
10001ea4:	83 ec 04             	sub    esp,0x4
10001ea7:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10001eaa:	e8 fc ff ff ff       	call   10001eab <createKey(char*, unsigned int)+0x37>	10001eab: R_386_PC32	getChecksum(unsigned int)
10001eaf:	83 c4 08             	add    esp,0x8
10001eb2:	ba 00 00 00 00       	mov    edx,0x0
10001eb7:	09 45 f0             	or     DWORD PTR [ebp-0x10],eax
10001eba:	09 55 f4             	or     DWORD PTR [ebp-0xc],edx
10001ebd:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
10001ec4:	81 7d ec db 24 00 00 	cmp    DWORD PTR [ebp-0x14],0x24db
10001ecb:	7f 7f                	jg     10001f4c <createKey(char*, unsigned int)+0xd8>
10001ecd:	81 75 f0 95 38 e4 b5 	xor    DWORD PTR [ebp-0x10],0xb5e43895
10001ed4:	83 75 f4 37          	xor    DWORD PTR [ebp-0xc],0x37
10001ed8:	6a 00                	push   0x0
10001eda:	6a 08                	push   0x8
10001edc:	6a 00                	push   0x0
10001ede:	6a 03                	push   0x3
10001ee0:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10001ee3:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10001ee6:	e8 fc ff ff ff       	call   10001ee7 <createKey(char*, unsigned int)+0x73>	10001ee7: R_386_PC32	swapBits(unsigned long long, unsigned long long, unsigned long long)
10001eeb:	83 c4 18             	add    esp,0x18
10001eee:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10001ef1:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
10001ef4:	6a 00                	push   0x0
10001ef6:	6a 0c                	push   0xc
10001ef8:	6a 00                	push   0x0
10001efa:	6a 0d                	push   0xd
10001efc:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10001eff:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10001f02:	e8 fc ff ff ff       	call   10001f03 <createKey(char*, unsigned int)+0x8f>	10001f03: R_386_PC32	swapBits(unsigned long long, unsigned long long, unsigned long long)
10001f07:	83 c4 18             	add    esp,0x18
10001f0a:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10001f0d:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
10001f10:	6a 00                	push   0x0
10001f12:	6a 16                	push   0x16
10001f14:	6a 00                	push   0x0
10001f16:	6a 25                	push   0x25
10001f18:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10001f1b:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10001f1e:	e8 fc ff ff ff       	call   10001f1f <createKey(char*, unsigned int)+0xab>	10001f1f: R_386_PC32	swapBits(unsigned long long, unsigned long long, unsigned long long)
10001f23:	83 c4 18             	add    esp,0x18
10001f26:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10001f29:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
10001f2c:	6a 2a                	push   0x2a
10001f2e:	6a 13                	push   0x13
10001f30:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10001f33:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10001f36:	e8 fc ff ff ff       	call   10001f37 <createKey(char*, unsigned int)+0xc3>	10001f37: R_386_PC32	ror(unsigned long long, int, int)
10001f3b:	83 c4 10             	add    esp,0x10
10001f3e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10001f41:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
10001f44:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
10001f47:	e9 78 ff ff ff       	jmp    10001ec4 <createKey(char*, unsigned int)+0x50>
10001f4c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001f4f:	83 e0 0f             	and    eax,0xf
10001f52:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
10001f55:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001f58:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001f5b:	0f ac d0 04          	shrd   eax,edx,0x4
10001f5f:	c1 ea 04             	shr    edx,0x4
10001f62:	89 c1                	mov    ecx,eax
10001f64:	89 d3                	mov    ebx,edx
10001f66:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
10001f69:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
10001f6c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001f6f:	83 e0 0f             	and    eax,0xf
10001f72:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10001f75:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001f78:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001f7b:	0f ac d0 04          	shrd   eax,edx,0x4
10001f7f:	c1 ea 04             	shr    edx,0x4
10001f82:	89 c1                	mov    ecx,eax
10001f84:	89 d3                	mov    ebx,edx
10001f86:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
10001f89:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
10001f8c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001f8f:	83 e0 0f             	and    eax,0xf
10001f92:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
10001f95:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001f98:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001f9b:	0f ac d0 04          	shrd   eax,edx,0x4
10001f9f:	c1 ea 04             	shr    edx,0x4
10001fa2:	89 c1                	mov    ecx,eax
10001fa4:	89 d3                	mov    ebx,edx
10001fa6:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
10001fa9:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
10001fac:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001faf:	25 ff 03 00 00       	and    eax,0x3ff
10001fb4:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
10001fb7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001fba:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001fbd:	0f ac d0 0a          	shrd   eax,edx,0xa
10001fc1:	c1 ea 0a             	shr    edx,0xa
10001fc4:	89 c1                	mov    ecx,eax
10001fc6:	89 d3                	mov    ebx,edx
10001fc8:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
10001fcb:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
10001fce:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001fd1:	25 ff 03 00 00       	and    eax,0x3ff
10001fd6:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
10001fd9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001fdc:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001fdf:	0f ac d0 0a          	shrd   eax,edx,0xa
10001fe3:	c1 ea 0a             	shr    edx,0xa
10001fe6:	89 c1                	mov    ecx,eax
10001fe8:	89 d3                	mov    ebx,edx
10001fea:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
10001fed:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
10001ff0:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001ff3:	25 ff 03 00 00       	and    eax,0x3ff
10001ff8:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
10001ffb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001ffe:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10002001:	0f ac d0 0a          	shrd   eax,edx,0xa
10002005:	c1 ea 0a             	shr    edx,0xa
10002008:	89 c1                	mov    ecx,eax
1000200a:	89 d3                	mov    ebx,edx
1000200c:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
1000200f:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
10002012:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
10002015:	05 00 00 00 00       	add    eax,0x0	10002016: R_386_32	lookupA
1000201a:	8a 10                	mov    dl,BYTE PTR [eax]
1000201c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000201f:	88 10                	mov    BYTE PTR [eax],dl
10002021:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002024:	8d 50 01             	lea    edx,[eax+0x1]
10002027:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
1000202a:	05 00 00 00 00       	add    eax,0x0	1000202b: R_386_32	lookupA
1000202f:	8a 00                	mov    al,BYTE PTR [eax]
10002031:	88 02                	mov    BYTE PTR [edx],al
10002033:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002036:	8d 50 0f             	lea    edx,[eax+0xf]
10002039:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
1000203c:	05 00 00 00 00       	add    eax,0x0	1000203d: R_386_32	lookupA
10002041:	8a 00                	mov    al,BYTE PTR [eax]
10002043:	88 02                	mov    BYTE PTR [edx],al
10002045:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
10002048:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
1000204d:	f7 e9                	imul   ecx
1000204f:	c1 fa 05             	sar    edx,0x5
10002052:	89 c8                	mov    eax,ecx
10002054:	c1 f8 1f             	sar    eax,0x1f
10002057:	29 c2                	sub    edx,eax
10002059:	89 d0                	mov    eax,edx
1000205b:	b9 0a 00 00 00       	mov    ecx,0xa
10002060:	99                   	cdq    
10002061:	f7 f9                	idiv   ecx
10002063:	89 d0                	mov    eax,edx
10002065:	8d 50 30             	lea    edx,[eax+0x30]
10002068:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000206b:	83 c0 03             	add    eax,0x3
1000206e:	88 10                	mov    BYTE PTR [eax],dl
10002070:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
10002073:	b8 67 66 66 66       	mov    eax,0x66666667
10002078:	f7 e9                	imul   ecx
1000207a:	c1 fa 02             	sar    edx,0x2
1000207d:	89 c8                	mov    eax,ecx
1000207f:	c1 f8 1f             	sar    eax,0x1f
10002082:	89 d1                	mov    ecx,edx
10002084:	29 c1                	sub    ecx,eax
10002086:	b8 67 66 66 66       	mov    eax,0x66666667
1000208b:	f7 e9                	imul   ecx
1000208d:	c1 fa 02             	sar    edx,0x2
10002090:	89 c8                	mov    eax,ecx
10002092:	c1 f8 1f             	sar    eax,0x1f
10002095:	29 c2                	sub    edx,eax
10002097:	89 d0                	mov    eax,edx
10002099:	c1 e0 02             	shl    eax,0x2
1000209c:	01 d0                	add    eax,edx
1000209e:	01 c0                	add    eax,eax
100020a0:	29 c1                	sub    ecx,eax
100020a2:	89 ca                	mov    edx,ecx
100020a4:	88 d0                	mov    al,dl
100020a6:	8d 50 30             	lea    edx,[eax+0x30]
100020a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100020ac:	83 c0 04             	add    eax,0x4
100020af:	88 10                	mov    BYTE PTR [eax],dl
100020b1:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
100020b4:	b9 0a 00 00 00       	mov    ecx,0xa
100020b9:	99                   	cdq    
100020ba:	f7 f9                	idiv   ecx
100020bc:	89 d0                	mov    eax,edx
100020be:	8d 50 30             	lea    edx,[eax+0x30]
100020c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100020c4:	83 c0 05             	add    eax,0x5
100020c7:	88 10                	mov    BYTE PTR [eax],dl
100020c9:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
100020cc:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
100020d1:	f7 e9                	imul   ecx
100020d3:	c1 fa 05             	sar    edx,0x5
100020d6:	89 c8                	mov    eax,ecx
100020d8:	c1 f8 1f             	sar    eax,0x1f
100020db:	29 c2                	sub    edx,eax
100020dd:	89 d0                	mov    eax,edx
100020df:	b9 0a 00 00 00       	mov    ecx,0xa
100020e4:	99                   	cdq    
100020e5:	f7 f9                	idiv   ecx
100020e7:	89 d0                	mov    eax,edx
100020e9:	8d 50 30             	lea    edx,[eax+0x30]
100020ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100020ef:	83 c0 07             	add    eax,0x7
100020f2:	88 10                	mov    BYTE PTR [eax],dl
100020f4:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
100020f7:	b8 67 66 66 66       	mov    eax,0x66666667
100020fc:	f7 e9                	imul   ecx
100020fe:	c1 fa 02             	sar    edx,0x2
10002101:	89 c8                	mov    eax,ecx
10002103:	c1 f8 1f             	sar    eax,0x1f
10002106:	89 d1                	mov    ecx,edx
10002108:	29 c1                	sub    ecx,eax
1000210a:	b8 67 66 66 66       	mov    eax,0x66666667
1000210f:	f7 e9                	imul   ecx
10002111:	c1 fa 02             	sar    edx,0x2
10002114:	89 c8                	mov    eax,ecx
10002116:	c1 f8 1f             	sar    eax,0x1f
10002119:	29 c2                	sub    edx,eax
1000211b:	89 d0                	mov    eax,edx
1000211d:	c1 e0 02             	shl    eax,0x2
10002120:	01 d0                	add    eax,edx
10002122:	01 c0                	add    eax,eax
10002124:	29 c1                	sub    ecx,eax
10002126:	89 ca                	mov    edx,ecx
10002128:	88 d0                	mov    al,dl
1000212a:	8d 50 30             	lea    edx,[eax+0x30]
1000212d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002130:	83 c0 08             	add    eax,0x8
10002133:	88 10                	mov    BYTE PTR [eax],dl
10002135:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10002138:	b9 0a 00 00 00       	mov    ecx,0xa
1000213d:	99                   	cdq    
1000213e:	f7 f9                	idiv   ecx
10002140:	89 d0                	mov    eax,edx
10002142:	8d 50 30             	lea    edx,[eax+0x30]
10002145:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002148:	83 c0 09             	add    eax,0x9
1000214b:	88 10                	mov    BYTE PTR [eax],dl
1000214d:	8b 4d d4             	mov    ecx,DWORD PTR [ebp-0x2c]
10002150:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
10002155:	f7 e9                	imul   ecx
10002157:	c1 fa 05             	sar    edx,0x5
1000215a:	89 c8                	mov    eax,ecx
1000215c:	c1 f8 1f             	sar    eax,0x1f
1000215f:	29 c2                	sub    edx,eax
10002161:	89 d0                	mov    eax,edx
10002163:	b9 0a 00 00 00       	mov    ecx,0xa
10002168:	99                   	cdq    
10002169:	f7 f9                	idiv   ecx
1000216b:	89 d0                	mov    eax,edx
1000216d:	8d 50 30             	lea    edx,[eax+0x30]
10002170:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002173:	83 c0 0b             	add    eax,0xb
10002176:	88 10                	mov    BYTE PTR [eax],dl
10002178:	8b 4d d4             	mov    ecx,DWORD PTR [ebp-0x2c]
1000217b:	b8 67 66 66 66       	mov    eax,0x66666667
10002180:	f7 e9                	imul   ecx
10002182:	c1 fa 02             	sar    edx,0x2
10002185:	89 c8                	mov    eax,ecx
10002187:	c1 f8 1f             	sar    eax,0x1f
1000218a:	89 d1                	mov    ecx,edx
1000218c:	29 c1                	sub    ecx,eax
1000218e:	b8 67 66 66 66       	mov    eax,0x66666667
10002193:	f7 e9                	imul   ecx
10002195:	c1 fa 02             	sar    edx,0x2
10002198:	89 c8                	mov    eax,ecx
1000219a:	c1 f8 1f             	sar    eax,0x1f
1000219d:	29 c2                	sub    edx,eax
1000219f:	89 d0                	mov    eax,edx
100021a1:	c1 e0 02             	shl    eax,0x2
100021a4:	01 d0                	add    eax,edx
100021a6:	01 c0                	add    eax,eax
100021a8:	29 c1                	sub    ecx,eax
100021aa:	89 ca                	mov    edx,ecx
100021ac:	88 d0                	mov    al,dl
100021ae:	8d 50 30             	lea    edx,[eax+0x30]
100021b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100021b4:	83 c0 0c             	add    eax,0xc
100021b7:	88 10                	mov    BYTE PTR [eax],dl
100021b9:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
100021bc:	b9 0a 00 00 00       	mov    ecx,0xa
100021c1:	99                   	cdq    
100021c2:	f7 f9                	idiv   ecx
100021c4:	89 d0                	mov    eax,edx
100021c6:	8d 50 30             	lea    edx,[eax+0x30]
100021c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100021cc:	83 c0 0d             	add    eax,0xd
100021cf:	88 10                	mov    BYTE PTR [eax],dl
100021d1:	90                   	nop
100021d2:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
100021d5:	c9                   	leave  
100021d6:	c3                   	ret    

100021d7 <retrieveBits(char*)>:
100021d7:	55                   	push   ebp
100021d8:	89 e5                	mov    ebp,esp
100021da:	57                   	push   edi
100021db:	56                   	push   esi
100021dc:	53                   	push   ebx
100021dd:	83 ec 4c             	sub    esp,0x4c
100021e0:	c7 45 ec ff ff ff ff 	mov    DWORD PTR [ebp-0x14],0xffffffff
100021e7:	c7 45 e8 ff ff ff ff 	mov    DWORD PTR [ebp-0x18],0xffffffff
100021ee:	c7 45 e4 ff ff ff ff 	mov    DWORD PTR [ebp-0x1c],0xffffffff
100021f5:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
100021fc:	83 7d e0 0f          	cmp    DWORD PTR [ebp-0x20],0xf
10002200:	7f 54                	jg     10002256 <retrieveBits(char*)+0x7f>
10002202:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10002205:	05 00 00 00 00       	add    eax,0x0	10002206: R_386_32	lookupA
1000220a:	8a 10                	mov    dl,BYTE PTR [eax]
1000220c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000220f:	8a 00                	mov    al,BYTE PTR [eax]
10002211:	38 c2                	cmp    dl,al
10002213:	75 06                	jne    1000221b <retrieveBits(char*)+0x44>
10002215:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10002218:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
1000221b:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
1000221e:	05 00 00 00 00       	add    eax,0x0	1000221f: R_386_32	lookupB
10002223:	8a 10                	mov    dl,BYTE PTR [eax]
10002225:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002228:	40                   	inc    eax
10002229:	8a 00                	mov    al,BYTE PTR [eax]
1000222b:	38 c2                	cmp    dl,al
1000222d:	75 06                	jne    10002235 <retrieveBits(char*)+0x5e>
1000222f:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10002232:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
10002235:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10002238:	05 00 00 00 00       	add    eax,0x0	10002239: R_386_32	lookupC
1000223d:	8a 10                	mov    dl,BYTE PTR [eax]
1000223f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002242:	83 c0 0f             	add    eax,0xf
10002245:	8a 00                	mov    al,BYTE PTR [eax]
10002247:	38 c2                	cmp    dl,al
10002249:	75 06                	jne    10002251 <retrieveBits(char*)+0x7a>
1000224b:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
1000224e:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10002251:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
10002254:	eb a6                	jmp    100021fc <retrieveBits(char*)+0x25>
10002256:	83 7d ec ff          	cmp    DWORD PTR [ebp-0x14],0xffffffff
1000225a:	74 0c                	je     10002268 <retrieveBits(char*)+0x91>
1000225c:	83 7d e8 ff          	cmp    DWORD PTR [ebp-0x18],0xffffffff
10002260:	74 06                	je     10002268 <retrieveBits(char*)+0x91>
10002262:	83 7d e4 ff          	cmp    DWORD PTR [ebp-0x1c],0xffffffff
10002266:	75 0f                	jne    10002277 <retrieveBits(char*)+0xa0>
10002268:	b8 00 00 00 00       	mov    eax,0x0
1000226d:	ba 00 00 00 00       	mov    edx,0x0
10002272:	e9 02 02 00 00       	jmp    10002479 <retrieveBits(char*)+0x2a2>
10002277:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000227a:	83 c0 03             	add    eax,0x3
1000227d:	8a 00                	mov    al,BYTE PTR [eax]
1000227f:	0f be c0             	movsx  eax,al
10002282:	8d 50 d0             	lea    edx,[eax-0x30]
10002285:	89 d0                	mov    eax,edx
10002287:	c1 e0 02             	shl    eax,0x2
1000228a:	01 d0                	add    eax,edx
1000228c:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10002293:	01 d0                	add    eax,edx
10002295:	c1 e0 02             	shl    eax,0x2
10002298:	89 c6                	mov    esi,eax
1000229a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000229d:	83 c0 04             	add    eax,0x4
100022a0:	8a 00                	mov    al,BYTE PTR [eax]
100022a2:	0f be c0             	movsx  eax,al
100022a5:	8d 50 d0             	lea    edx,[eax-0x30]
100022a8:	89 d0                	mov    eax,edx
100022aa:	c1 e0 02             	shl    eax,0x2
100022ad:	01 d0                	add    eax,edx
100022af:	01 c0                	add    eax,eax
100022b1:	8d 14 06             	lea    edx,[esi+eax*1]
100022b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100022b7:	83 c0 05             	add    eax,0x5
100022ba:	8a 00                	mov    al,BYTE PTR [eax]
100022bc:	0f be c0             	movsx  eax,al
100022bf:	83 e8 30             	sub    eax,0x30
100022c2:	01 d0                	add    eax,edx
100022c4:	99                   	cdq    
100022c5:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
100022c8:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
100022cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100022ce:	83 c0 07             	add    eax,0x7
100022d1:	8a 00                	mov    al,BYTE PTR [eax]
100022d3:	0f be c0             	movsx  eax,al
100022d6:	8d 50 d0             	lea    edx,[eax-0x30]
100022d9:	89 d0                	mov    eax,edx
100022db:	c1 e0 02             	shl    eax,0x2
100022de:	01 d0                	add    eax,edx
100022e0:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
100022e7:	01 d0                	add    eax,edx
100022e9:	c1 e0 02             	shl    eax,0x2
100022ec:	89 c6                	mov    esi,eax
100022ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100022f1:	83 c0 08             	add    eax,0x8
100022f4:	8a 00                	mov    al,BYTE PTR [eax]
100022f6:	0f be c0             	movsx  eax,al
100022f9:	8d 50 d0             	lea    edx,[eax-0x30]
100022fc:	89 d0                	mov    eax,edx
100022fe:	c1 e0 02             	shl    eax,0x2
10002301:	01 d0                	add    eax,edx
10002303:	01 c0                	add    eax,eax
10002305:	8d 14 06             	lea    edx,[esi+eax*1]
10002308:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000230b:	83 c0 09             	add    eax,0x9
1000230e:	8a 00                	mov    al,BYTE PTR [eax]
10002310:	0f be c0             	movsx  eax,al
10002313:	83 e8 30             	sub    eax,0x30
10002316:	01 d0                	add    eax,edx
10002318:	99                   	cdq    
10002319:	89 45 c0             	mov    DWORD PTR [ebp-0x40],eax
1000231c:	89 55 c4             	mov    DWORD PTR [ebp-0x3c],edx
1000231f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002322:	83 c0 0b             	add    eax,0xb
10002325:	8a 00                	mov    al,BYTE PTR [eax]
10002327:	0f be c0             	movsx  eax,al
1000232a:	8d 50 d0             	lea    edx,[eax-0x30]
1000232d:	89 d0                	mov    eax,edx
1000232f:	c1 e0 02             	shl    eax,0x2
10002332:	01 d0                	add    eax,edx
10002334:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
1000233b:	01 d0                	add    eax,edx
1000233d:	c1 e0 02             	shl    eax,0x2
10002340:	89 c6                	mov    esi,eax
10002342:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002345:	83 c0 0c             	add    eax,0xc
10002348:	8a 00                	mov    al,BYTE PTR [eax]
1000234a:	0f be c0             	movsx  eax,al
1000234d:	8d 50 d0             	lea    edx,[eax-0x30]
10002350:	89 d0                	mov    eax,edx
10002352:	c1 e0 02             	shl    eax,0x2
10002355:	01 d0                	add    eax,edx
10002357:	01 c0                	add    eax,eax
10002359:	8d 14 06             	lea    edx,[esi+eax*1]
1000235c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000235f:	83 c0 0d             	add    eax,0xd
10002362:	8a 00                	mov    al,BYTE PTR [eax]
10002364:	0f be c0             	movsx  eax,al
10002367:	83 e8 30             	sub    eax,0x30
1000236a:	01 d0                	add    eax,edx
1000236c:	99                   	cdq    
1000236d:	89 45 b8             	mov    DWORD PTR [ebp-0x48],eax
10002370:	89 55 bc             	mov    DWORD PTR [ebp-0x44],edx
10002373:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
10002376:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
10002379:	0f a4 c2 0a          	shld   edx,eax,0xa
1000237d:	c1 e0 0a             	shl    eax,0xa
10002380:	89 c6                	mov    esi,eax
10002382:	89 d7                	mov    edi,edx
10002384:	89 f0                	mov    eax,esi
10002386:	0b 45 c8             	or     eax,DWORD PTR [ebp-0x38]
10002389:	89 c1                	mov    ecx,eax
1000238b:	89 f8                	mov    eax,edi
1000238d:	0b 45 cc             	or     eax,DWORD PTR [ebp-0x34]
10002390:	89 c3                	mov    ebx,eax
10002392:	8b 45 b8             	mov    eax,DWORD PTR [ebp-0x48]
10002395:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
10002398:	0f a4 c2 14          	shld   edx,eax,0x14
1000239c:	c1 e0 14             	shl    eax,0x14
1000239f:	89 ce                	mov    esi,ecx
100023a1:	89 45 a8             	mov    DWORD PTR [ebp-0x58],eax
100023a4:	89 55 ac             	mov    DWORD PTR [ebp-0x54],edx
100023a7:	0b 75 a8             	or     esi,DWORD PTR [ebp-0x58]
100023aa:	89 75 d8             	mov    DWORD PTR [ebp-0x28],esi
100023ad:	89 d8                	mov    eax,ebx
100023af:	0b 45 ac             	or     eax,DWORD PTR [ebp-0x54]
100023b2:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
100023b5:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
100023b8:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
100023bb:	0f a4 c2 0c          	shld   edx,eax,0xc
100023bf:	c1 e0 0c             	shl    eax,0xc
100023c2:	89 c3                	mov    ebx,eax
100023c4:	89 d6                	mov    esi,edx
100023c6:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
100023c9:	89 75 dc             	mov    DWORD PTR [ebp-0x24],esi
100023cc:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
100023cf:	c1 e0 04             	shl    eax,0x4
100023d2:	0b 45 ec             	or     eax,DWORD PTR [ebp-0x14]
100023d5:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
100023d8:	c1 e2 08             	shl    edx,0x8
100023db:	09 d0                	or     eax,edx
100023dd:	99                   	cdq    
100023de:	09 45 d8             	or     DWORD PTR [ebp-0x28],eax
100023e1:	09 55 dc             	or     DWORD PTR [ebp-0x24],edx
100023e4:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
100023eb:	81 7d d4 db 24 00 00 	cmp    DWORD PTR [ebp-0x2c],0x24db
100023f2:	7f 7f                	jg     10002473 <retrieveBits(char*)+0x29c>
100023f4:	6a 2a                	push   0x2a
100023f6:	6a 13                	push   0x13
100023f8:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
100023fb:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
100023fe:	e8 fc ff ff ff       	call   100023ff <retrieveBits(char*)+0x228>	100023ff: R_386_PC32	ror(unsigned long long, int, int)
10002403:	83 c4 10             	add    esp,0x10
10002406:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
10002409:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
1000240c:	6a 00                	push   0x0
1000240e:	6a 08                	push   0x8
10002410:	6a 00                	push   0x0
10002412:	6a 03                	push   0x3
10002414:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
10002417:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
1000241a:	e8 fc ff ff ff       	call   1000241b <retrieveBits(char*)+0x244>	1000241b: R_386_PC32	swapBits(unsigned long long, unsigned long long, unsigned long long)
1000241f:	83 c4 18             	add    esp,0x18
10002422:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
10002425:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
10002428:	6a 00                	push   0x0
1000242a:	6a 0c                	push   0xc
1000242c:	6a 00                	push   0x0
1000242e:	6a 0d                	push   0xd
10002430:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
10002433:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10002436:	e8 fc ff ff ff       	call   10002437 <retrieveBits(char*)+0x260>	10002437: R_386_PC32	swapBits(unsigned long long, unsigned long long, unsigned long long)
1000243b:	83 c4 18             	add    esp,0x18
1000243e:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
10002441:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
10002444:	6a 00                	push   0x0
10002446:	6a 16                	push   0x16
10002448:	6a 00                	push   0x0
1000244a:	6a 25                	push   0x25
1000244c:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
1000244f:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10002452:	e8 fc ff ff ff       	call   10002453 <retrieveBits(char*)+0x27c>	10002453: R_386_PC32	swapBits(unsigned long long, unsigned long long, unsigned long long)
10002457:	83 c4 18             	add    esp,0x18
1000245a:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
1000245d:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
10002460:	81 75 d8 95 38 e4 b5 	xor    DWORD PTR [ebp-0x28],0xb5e43895
10002467:	83 75 dc 37          	xor    DWORD PTR [ebp-0x24],0x37
1000246b:	ff 45 d4             	inc    DWORD PTR [ebp-0x2c]
1000246e:	e9 78 ff ff ff       	jmp    100023eb <retrieveBits(char*)+0x214>
10002473:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10002476:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
10002479:	8d 65 f4             	lea    esp,[ebp-0xc]
1000247c:	5b                   	pop    ebx
1000247d:	5e                   	pop    esi
1000247e:	5f                   	pop    edi
1000247f:	5d                   	pop    ebp
10002480:	c3                   	ret    

10002481 <checkKey(char*)>:
10002481:	55                   	push   ebp
10002482:	89 e5                	mov    ebp,esp
10002484:	53                   	push   ebx
10002485:	83 ec 14             	sub    esp,0x14
10002488:	83 ec 04             	sub    esp,0x4
1000248b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000248e:	e8 fc ff ff ff       	call   1000248f <checkKey(char*)+0xe>	1000248f: R_386_PC32	retrieveBits(char*)
10002493:	83 c4 08             	add    esp,0x8
10002496:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10002499:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
1000249c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
1000249f:	25 ff 7f 00 00       	and    eax,0x7fff
100024a4:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
100024a7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100024aa:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
100024ad:	0f ac d0 0f          	shrd   eax,edx,0xf
100024b1:	c1 ea 0f             	shr    edx,0xf
100024b4:	89 c1                	mov    ecx,eax
100024b6:	89 d3                	mov    ebx,edx
100024b8:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
100024bb:	83 ec 04             	sub    esp,0x4
100024be:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
100024c1:	e8 fc ff ff ff       	call   100024c2 <checkKey(char*)+0x41>	100024c2: R_386_PC32	getChecksum(unsigned int)
100024c6:	83 c4 08             	add    esp,0x8
100024c9:	39 45 ec             	cmp    DWORD PTR [ebp-0x14],eax
100024cc:	0f 95 c0             	setne  al
100024cf:	84 c0                	test   al,al
100024d1:	74 07                	je     100024da <checkKey(char*)+0x59>
100024d3:	b8 00 00 00 00       	mov    eax,0x0
100024d8:	eb 06                	jmp    100024e0 <checkKey(char*)+0x5f>
100024da:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100024dd:	83 e0 07             	and    eax,0x7
100024e0:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
100024e3:	c9                   	leave  
100024e4:	c3                   	ret    

100024e5 <changeKeyType(char*, int)>:
100024e5:	55                   	push   ebp
100024e6:	89 e5                	mov    ebp,esp
100024e8:	83 ec 10             	sub    esp,0x10
100024eb:	83 ec 04             	sub    esp,0x4
100024ee:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100024f1:	e8 fc ff ff ff       	call   100024f2 <changeKeyType(char*, int)+0xd>	100024f2: R_386_PC32	retrieveBits(char*)
100024f6:	83 c4 08             	add    esp,0x8
100024f9:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
100024fc:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
100024ff:	83 65 f8 f8          	and    DWORD PTR [ebp-0x8],0xfffffff8
10002503:	83 65 fc ff          	and    DWORD PTR [ebp-0x4],0xffffffff
10002507:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
1000250a:	99                   	cdq    
1000250b:	09 45 f8             	or     DWORD PTR [ebp-0x8],eax
1000250e:	09 55 fc             	or     DWORD PTR [ebp-0x4],edx
10002511:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
10002514:	50                   	push   eax
10002515:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002518:	e8 fc ff ff ff       	call   10002519 <changeKeyType(char*, int)+0x34>	10002519: R_386_PC32	createKey(char*, unsigned int)
1000251d:	83 c4 08             	add    esp,0x8
10002520:	83 ec 04             	sub    esp,0x4
10002523:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002526:	e8 fc ff ff ff       	call   10002527 <changeKeyType(char*, int)+0x42>	10002527: R_386_PC32	checkKey(char*)
1000252b:	83 c4 08             	add    esp,0x8
1000252e:	85 c0                	test   eax,eax
10002530:	0f 95 c0             	setne  al
10002533:	c9                   	leave  
10002534:	c3                   	ret    

10002535 <checkExtendedKey(char*)>:
10002535:	55                   	push   ebp
10002536:	89 e5                	mov    ebp,esp
10002538:	83 ec 20             	sub    esp,0x20
1000253b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000253e:	8a 00                	mov    al,BYTE PTR [eax]
10002540:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
10002543:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002546:	8a 40 01             	mov    al,BYTE PTR [eax+0x1]
10002549:	88 45 ed             	mov    BYTE PTR [ebp-0x13],al
1000254c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000254f:	8a 40 02             	mov    al,BYTE PTR [eax+0x2]
10002552:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
10002555:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002558:	8a 40 03             	mov    al,BYTE PTR [eax+0x3]
1000255b:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
1000255e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002561:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
10002564:	88 45 f0             	mov    BYTE PTR [ebp-0x10],al
10002567:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000256a:	8a 40 05             	mov    al,BYTE PTR [eax+0x5]
1000256d:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
10002570:	c6 45 f2 2d          	mov    BYTE PTR [ebp-0xe],0x2d
10002574:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002577:	8a 40 06             	mov    al,BYTE PTR [eax+0x6]
1000257a:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
1000257d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002580:	8a 40 07             	mov    al,BYTE PTR [eax+0x7]
10002583:	88 45 f4             	mov    BYTE PTR [ebp-0xc],al
10002586:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002589:	8a 40 09             	mov    al,BYTE PTR [eax+0x9]
1000258c:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
1000258f:	c6 45 f6 2d          	mov    BYTE PTR [ebp-0xa],0x2d
10002593:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002596:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
10002599:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
1000259c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000259f:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
100025a2:	88 45 f8             	mov    BYTE PTR [ebp-0x8],al
100025a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100025a8:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
100025ab:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
100025ae:	c6 45 fa 2d          	mov    BYTE PTR [ebp-0x6],0x2d
100025b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100025b5:	8a 40 0f             	mov    al,BYTE PTR [eax+0xf]
100025b8:	88 45 fb             	mov    BYTE PTR [ebp-0x5],al
100025bb:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
100025be:	48                   	dec    eax
100025bf:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
100025c2:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
100025c5:	3c 2f                	cmp    al,0x2f
100025c7:	75 04                	jne    100025cd <checkExtendedKey(char*)+0x98>
100025c9:	c6 45 ef 39          	mov    BYTE PTR [ebp-0x11],0x39
100025cd:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
100025d0:	48                   	dec    eax
100025d1:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
100025d4:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
100025d7:	3c 2f                	cmp    al,0x2f
100025d9:	75 04                	jne    100025df <checkExtendedKey(char*)+0xaa>
100025db:	c6 45 f5 39          	mov    BYTE PTR [ebp-0xb],0x39
100025df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100025e2:	83 c0 0d             	add    eax,0xd
100025e5:	8a 10                	mov    dl,BYTE PTR [eax]
100025e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100025ea:	83 c0 0c             	add    eax,0xc
100025ed:	8a 00                	mov    al,BYTE PTR [eax]
100025ef:	38 c2                	cmp    dl,al
100025f1:	74 0a                	je     100025fd <checkExtendedKey(char*)+0xc8>
100025f3:	b8 00 00 00 00       	mov    eax,0x0
100025f8:	e9 d6 00 00 00       	jmp    100026d3 <checkExtendedKey(char*)+0x19e>
100025fd:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
10002600:	3c 2f                	cmp    al,0x2f
10002602:	7e 07                	jle    1000260b <checkExtendedKey(char*)+0xd6>
10002604:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
10002607:	3c 39                	cmp    al,0x39
10002609:	7e 0a                	jle    10002615 <checkExtendedKey(char*)+0xe0>
1000260b:	b8 00 00 00 00       	mov    eax,0x0
10002610:	e9 be 00 00 00       	jmp    100026d3 <checkExtendedKey(char*)+0x19e>
10002615:	8a 45 f0             	mov    al,BYTE PTR [ebp-0x10]
10002618:	3c 2f                	cmp    al,0x2f
1000261a:	7e 07                	jle    10002623 <checkExtendedKey(char*)+0xee>
1000261c:	8a 45 f0             	mov    al,BYTE PTR [ebp-0x10]
1000261f:	3c 39                	cmp    al,0x39
10002621:	7e 0a                	jle    1000262d <checkExtendedKey(char*)+0xf8>
10002623:	b8 00 00 00 00       	mov    eax,0x0
10002628:	e9 a6 00 00 00       	jmp    100026d3 <checkExtendedKey(char*)+0x19e>
1000262d:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
10002630:	3c 2f                	cmp    al,0x2f
10002632:	7e 07                	jle    1000263b <checkExtendedKey(char*)+0x106>
10002634:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
10002637:	3c 39                	cmp    al,0x39
10002639:	7e 0a                	jle    10002645 <checkExtendedKey(char*)+0x110>
1000263b:	b8 00 00 00 00       	mov    eax,0x0
10002640:	e9 8e 00 00 00       	jmp    100026d3 <checkExtendedKey(char*)+0x19e>
10002645:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
10002648:	3c 2f                	cmp    al,0x2f
1000264a:	7e 07                	jle    10002653 <checkExtendedKey(char*)+0x11e>
1000264c:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
1000264f:	3c 39                	cmp    al,0x39
10002651:	7e 07                	jle    1000265a <checkExtendedKey(char*)+0x125>
10002653:	b8 00 00 00 00       	mov    eax,0x0
10002658:	eb 79                	jmp    100026d3 <checkExtendedKey(char*)+0x19e>
1000265a:	8a 45 f4             	mov    al,BYTE PTR [ebp-0xc]
1000265d:	3c 2f                	cmp    al,0x2f
1000265f:	7e 07                	jle    10002668 <checkExtendedKey(char*)+0x133>
10002661:	8a 45 f4             	mov    al,BYTE PTR [ebp-0xc]
10002664:	3c 39                	cmp    al,0x39
10002666:	7e 07                	jle    1000266f <checkExtendedKey(char*)+0x13a>
10002668:	b8 00 00 00 00       	mov    eax,0x0
1000266d:	eb 64                	jmp    100026d3 <checkExtendedKey(char*)+0x19e>
1000266f:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
10002672:	3c 2f                	cmp    al,0x2f
10002674:	7e 07                	jle    1000267d <checkExtendedKey(char*)+0x148>
10002676:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
10002679:	3c 39                	cmp    al,0x39
1000267b:	7e 07                	jle    10002684 <checkExtendedKey(char*)+0x14f>
1000267d:	b8 00 00 00 00       	mov    eax,0x0
10002682:	eb 4f                	jmp    100026d3 <checkExtendedKey(char*)+0x19e>
10002684:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
10002687:	3c 2f                	cmp    al,0x2f
10002689:	7e 07                	jle    10002692 <checkExtendedKey(char*)+0x15d>
1000268b:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
1000268e:	3c 39                	cmp    al,0x39
10002690:	7e 07                	jle    10002699 <checkExtendedKey(char*)+0x164>
10002692:	b8 00 00 00 00       	mov    eax,0x0
10002697:	eb 3a                	jmp    100026d3 <checkExtendedKey(char*)+0x19e>
10002699:	8a 45 f8             	mov    al,BYTE PTR [ebp-0x8]
1000269c:	3c 2f                	cmp    al,0x2f
1000269e:	7e 07                	jle    100026a7 <checkExtendedKey(char*)+0x172>
100026a0:	8a 45 f8             	mov    al,BYTE PTR [ebp-0x8]
100026a3:	3c 39                	cmp    al,0x39
100026a5:	7e 07                	jle    100026ae <checkExtendedKey(char*)+0x179>
100026a7:	b8 00 00 00 00       	mov    eax,0x0
100026ac:	eb 25                	jmp    100026d3 <checkExtendedKey(char*)+0x19e>
100026ae:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
100026b1:	3c 2f                	cmp    al,0x2f
100026b3:	7e 07                	jle    100026bc <checkExtendedKey(char*)+0x187>
100026b5:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
100026b8:	3c 39                	cmp    al,0x39
100026ba:	7e 07                	jle    100026c3 <checkExtendedKey(char*)+0x18e>
100026bc:	b8 00 00 00 00       	mov    eax,0x0
100026c1:	eb 10                	jmp    100026d3 <checkExtendedKey(char*)+0x19e>
100026c3:	83 ec 04             	sub    esp,0x4
100026c6:	8d 45 ec             	lea    eax,[ebp-0x14]
100026c9:	50                   	push   eax
100026ca:	e8 fc ff ff ff       	call   100026cb <checkExtendedKey(char*)+0x196>	100026cb: R_386_PC32	checkKey(char*)
100026cf:	83 c4 08             	add    esp,0x8
100026d2:	90                   	nop
100026d3:	c9                   	leave  
100026d4:	c3                   	ret    

100026d5 <loadTimezoneStrings()>:
100026d5:	55                   	push   ebp
100026d6:	89 e5                	mov    ebp,esp
100026d8:	53                   	push   ebx
100026d9:	83 ec 34             	sub    esp,0x34
100026dc:	83 ec 0c             	sub    esp,0xc
100026df:	68 14 01 00 00       	push   0x114
100026e4:	e8 fc ff ff ff       	call   100026e5 <loadTimezoneStrings()+0x10>	100026e5: R_386_PC32	operator new(unsigned long)
100026e9:	83 c4 10             	add    esp,0x10
100026ec:	89 c3                	mov    ebx,eax
100026ee:	a1 00 00 00 00       	mov    eax,ds:0x0	100026ef: R_386_32	kernelProcess
100026f3:	83 ec 04             	sub    esp,0x4
100026f6:	50                   	push   eax
100026f7:	68 d4 55 00 10       	push   0x100055d4	100026f8: R_386_32	.text
100026fc:	53                   	push   ebx
100026fd:	e8 fc ff ff ff       	call   100026fe <loadTimezoneStrings()+0x29>	100026fe: R_386_PC32	File::File(char const*, Process*)
10002702:	83 c4 10             	add    esp,0x10
10002705:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
10002708:	83 ec 08             	sub    esp,0x8
1000270b:	6a 01                	push   0x1
1000270d:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
10002710:	e8 fc ff ff ff       	call   10002711 <loadTimezoneStrings()+0x3c>	10002711: R_386_PC32	File::open(FileOpenMode)
10002715:	83 c4 10             	add    esp,0x10
10002718:	83 ec 04             	sub    esp,0x4
1000271b:	8d 45 d7             	lea    eax,[ebp-0x29]
1000271e:	50                   	push   eax
1000271f:	8d 45 d8             	lea    eax,[ebp-0x28]
10002722:	50                   	push   eax
10002723:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
10002726:	e8 fc ff ff ff       	call   10002727 <loadTimezoneStrings()+0x52>	10002727: R_386_PC32	File::stat(unsigned long long*, bool*)
1000272b:	83 c4 10             	add    esp,0x10
1000272e:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10002731:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
10002734:	83 ec 0c             	sub    esp,0xc
10002737:	50                   	push   eax
10002738:	e8 fc ff ff ff       	call   10002739 <loadTimezoneStrings()+0x64>	10002739: R_386_PC32	malloc
1000273d:	83 c4 10             	add    esp,0x10
10002740:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
10002743:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10002746:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
10002749:	83 ec 04             	sub    esp,0x4
1000274c:	50                   	push   eax
1000274d:	6a 00                	push   0x0
1000274f:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
10002752:	e8 fc ff ff ff       	call   10002753 <loadTimezoneStrings()+0x7e>	10002753: R_386_PC32	memset
10002757:	83 c4 10             	add    esp,0x10
1000275a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
1000275d:	8b 00                	mov    eax,DWORD PTR [eax]
1000275f:	83 c0 0c             	add    eax,0xc
10002762:	8b 08                	mov    ecx,DWORD PTR [eax]
10002764:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10002767:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
1000276a:	83 ec 0c             	sub    esp,0xc
1000276d:	8d 5d d0             	lea    ebx,[ebp-0x30]
10002770:	53                   	push   ebx
10002771:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
10002774:	52                   	push   edx
10002775:	50                   	push   eax
10002776:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
10002779:	ff d1                	call   ecx
1000277b:	83 c4 20             	add    esp,0x20
1000277e:	83 ec 0c             	sub    esp,0xc
10002781:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
10002784:	e8 fc ff ff ff       	call   10002785 <loadTimezoneStrings()+0xb0>	10002785: R_386_PC32	File::close()
10002789:	83 c4 10             	add    esp,0x10
1000278c:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
1000278f:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
10002792:	83 ec 08             	sub    esp,0x8
10002795:	50                   	push   eax
10002796:	68 f3 55 00 10       	push   0x100055f3	10002797: R_386_32	.text
1000279b:	e8 fc ff ff ff       	call   1000279c <loadTimezoneStrings()+0xc7>	1000279c: R_386_PC32	Dbg::kprintf(char const*, ...)
100027a0:	83 c4 10             	add    esp,0x10
100027a3:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
100027aa:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
100027b1:	81 7d f0 c7 00 00 00 	cmp    DWORD PTR [ebp-0x10],0xc7
100027b8:	7f 39                	jg     100027f3 <loadTimezoneStrings()+0x11e>
100027ba:	83 ec 0c             	sub    esp,0xc
100027bd:	6a 78                	push   0x78
100027bf:	e8 fc ff ff ff       	call   100027c0 <loadTimezoneStrings()+0xeb>	100027c0: R_386_PC32	malloc
100027c4:	83 c4 10             	add    esp,0x10
100027c7:	89 c2                	mov    edx,eax
100027c9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100027cc:	89 14 85 00 00 00 00 	mov    DWORD PTR [eax*4+0x0],edx	100027cf: R_386_32	timezoneStrings
100027d3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100027d6:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	100027d9: R_386_32	timezoneStrings
100027dd:	83 ec 08             	sub    esp,0x8
100027e0:	68 fd 55 00 10       	push   0x100055fd	100027e1: R_386_32	.text
100027e5:	50                   	push   eax
100027e6:	e8 fc ff ff ff       	call   100027e7 <loadTimezoneStrings()+0x112>	100027e7: R_386_PC32	strcpy
100027eb:	83 c4 10             	add    esp,0x10
100027ee:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
100027f1:	eb be                	jmp    100027b1 <loadTimezoneStrings()+0xdc>
100027f3:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
100027fa:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
100027fd:	8d 50 01             	lea    edx,[eax+0x1]
10002800:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
10002803:	89 c2                	mov    edx,eax
10002805:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10002808:	01 d0                	add    eax,edx
1000280a:	8a 00                	mov    al,BYTE PTR [eax]
1000280c:	88 45 ce             	mov    BYTE PTR [ebp-0x32],al
1000280f:	c6 45 cf 00          	mov    BYTE PTR [ebp-0x31],0x0
10002813:	8a 45 ce             	mov    al,BYTE PTR [ebp-0x32]
10002816:	3c 0d                	cmp    al,0xd
10002818:	0f 84 2e 01 00 00    	je     1000294c <loadTimezoneStrings()+0x277>
1000281e:	8a 45 ce             	mov    al,BYTE PTR [ebp-0x32]
10002821:	3c 09                	cmp    al,0x9
10002823:	75 3c                	jne    10002861 <loadTimezoneStrings()+0x18c>
10002825:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10002828:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	1000282b: R_386_32	timezoneStrings
1000282f:	83 ec 0c             	sub    esp,0xc
10002832:	50                   	push   eax
10002833:	e8 fc ff ff ff       	call   10002834 <loadTimezoneStrings()+0x15f>	10002834: R_386_PC32	strlen
10002838:	83 c4 10             	add    esp,0x10
1000283b:	83 f8 08             	cmp    eax,0x8
1000283e:	0f 87 0e 01 00 00    	ja     10002952 <loadTimezoneStrings()+0x27d>
10002844:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10002847:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	1000284a: R_386_32	timezoneStrings
1000284e:	83 ec 08             	sub    esp,0x8
10002851:	68 fd 55 00 10       	push   0x100055fd	10002852: R_386_32	.text
10002856:	50                   	push   eax
10002857:	e8 fc ff ff ff       	call   10002858 <loadTimezoneStrings()+0x183>	10002858: R_386_PC32	strcat
1000285c:	83 c4 10             	add    esp,0x10
1000285f:	eb c4                	jmp    10002825 <loadTimezoneStrings()+0x150>
10002861:	8a 45 ce             	mov    al,BYTE PTR [ebp-0x32]
10002864:	3c 0a                	cmp    al,0xa
10002866:	75 6b                	jne    100028d3 <loadTimezoneStrings()+0x1fe>
10002868:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
1000286b:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	1000286e: R_386_32	timezoneStrings
10002872:	83 ec 0c             	sub    esp,0xc
10002875:	50                   	push   eax
10002876:	e8 fc ff ff ff       	call   10002877 <loadTimezoneStrings()+0x1a2>	10002877: R_386_PC32	strlen
1000287b:	83 c4 10             	add    esp,0x10
1000287e:	83 f8 35             	cmp    eax,0x35
10002881:	77 1d                	ja     100028a0 <loadTimezoneStrings()+0x1cb>
10002883:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10002886:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	10002889: R_386_32	timezoneStrings
1000288d:	83 ec 08             	sub    esp,0x8
10002890:	68 fd 55 00 10       	push   0x100055fd	10002891: R_386_32	.text
10002895:	50                   	push   eax
10002896:	e8 fc ff ff ff       	call   10002897 <loadTimezoneStrings()+0x1c2>	10002897: R_386_PC32	strcat
1000289b:	83 c4 10             	add    esp,0x10
1000289e:	eb c8                	jmp    10002868 <loadTimezoneStrings()+0x193>
100028a0:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
100028a3:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
100028a6:	99                   	cdq    
100028a7:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
100028aa:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
100028ad:	39 c8                	cmp    eax,ecx
100028af:	89 d0                	mov    eax,edx
100028b1:	19 d8                	sbb    eax,ebx
100028b3:	0f 82 9f 00 00 00    	jb     10002958 <loadTimezoneStrings()+0x283>
100028b9:	83 ec 0c             	sub    esp,0xc
100028bc:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
100028bf:	e8 fc ff ff ff       	call   100028c0 <loadTimezoneStrings()+0x1eb>	100028c0: R_386_PC32	free
100028c4:	83 c4 10             	add    esp,0x10
100028c7:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
100028ce:	e9 8b 00 00 00       	jmp    1000295e <loadTimezoneStrings()+0x289>
100028d3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
100028d6:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	100028d9: R_386_32	timezoneStrings
100028dd:	83 ec 0c             	sub    esp,0xc
100028e0:	50                   	push   eax
100028e1:	e8 fc ff ff ff       	call   100028e2 <loadTimezoneStrings()+0x20d>	100028e2: R_386_PC32	strlen
100028e6:	83 c4 10             	add    esp,0x10
100028e9:	83 f8 31             	cmp    eax,0x31
100028ec:	77 1f                	ja     1000290d <loadTimezoneStrings()+0x238>
100028ee:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
100028f1:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	100028f4: R_386_32	timezoneStrings
100028f8:	83 ec 08             	sub    esp,0x8
100028fb:	8d 55 ce             	lea    edx,[ebp-0x32]
100028fe:	52                   	push   edx
100028ff:	50                   	push   eax
10002900:	e8 fc ff ff ff       	call   10002901 <loadTimezoneStrings()+0x22c>	10002901: R_386_PC32	strcat
10002905:	83 c4 10             	add    esp,0x10
10002908:	e9 ed fe ff ff       	jmp    100027fa <loadTimezoneStrings()+0x125>
1000290d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10002910:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	10002913: R_386_32	timezoneStrings
10002917:	83 ec 0c             	sub    esp,0xc
1000291a:	50                   	push   eax
1000291b:	e8 fc ff ff ff       	call   1000291c <loadTimezoneStrings()+0x247>	1000291c: R_386_PC32	strlen
10002920:	83 c4 10             	add    esp,0x10
10002923:	83 f8 32             	cmp    eax,0x32
10002926:	0f 85 ce fe ff ff    	jne    100027fa <loadTimezoneStrings()+0x125>
1000292c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
1000292f:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	10002932: R_386_32	timezoneStrings
10002936:	83 ec 08             	sub    esp,0x8
10002939:	68 ff 55 00 10       	push   0x100055ff	1000293a: R_386_32	.text
1000293e:	50                   	push   eax
1000293f:	e8 fc ff ff ff       	call   10002940 <loadTimezoneStrings()+0x26b>	10002940: R_386_PC32	strcat
10002944:	83 c4 10             	add    esp,0x10
10002947:	e9 ae fe ff ff       	jmp    100027fa <loadTimezoneStrings()+0x125>
1000294c:	90                   	nop
1000294d:	e9 a8 fe ff ff       	jmp    100027fa <loadTimezoneStrings()+0x125>
10002952:	90                   	nop
10002953:	e9 a2 fe ff ff       	jmp    100027fa <loadTimezoneStrings()+0x125>
10002958:	90                   	nop
10002959:	e9 9c fe ff ff       	jmp    100027fa <loadTimezoneStrings()+0x125>
1000295e:	81 7d e8 c7 00 00 00 	cmp    DWORD PTR [ebp-0x18],0xc7
10002965:	7f 23                	jg     1000298a <loadTimezoneStrings()+0x2b5>
10002967:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
1000296a:	8b 04 85 00 00 00 00 	mov    eax,DWORD PTR [eax*4+0x0]	1000296d: R_386_32	timezoneStrings
10002971:	83 ec 04             	sub    esp,0x4
10002974:	50                   	push   eax
10002975:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
10002978:	68 04 56 00 10       	push   0x10005604	10002979: R_386_32	.text
1000297d:	e8 fc ff ff ff       	call   1000297e <loadTimezoneStrings()+0x2a9>	1000297e: R_386_PC32	Dbg::kprintf(char const*, ...)
10002982:	83 c4 10             	add    esp,0x10
10002985:	ff 45 e8             	inc    DWORD PTR [ebp-0x18]
10002988:	eb d4                	jmp    1000295e <loadTimezoneStrings()+0x289>
1000298a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
1000298d:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
10002990:	c9                   	leave  
10002991:	c3                   	ret    

10002992 <firstRun(bool)>:
10002992:	55                   	push   ebp
10002993:	89 e5                	mov    ebp,esp
10002995:	57                   	push   edi
10002996:	56                   	push   esi
10002997:	53                   	push   ebx
10002998:	81 ec dc 00 00 00    	sub    esp,0xdc
1000299e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100029a1:	88 85 24 ff ff ff    	mov    BYTE PTR [ebp-0xdc],al
100029a7:	8a 85 24 ff ff ff    	mov    al,BYTE PTR [ebp-0xdc]
100029ad:	83 f0 01             	xor    eax,0x1
100029b0:	a2 00 00 00 00       	mov    ds:0x0,al	100029b1: R_386_32	showSidebar
100029b5:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	100029b7: R_386_32	guiKeyboardHandler
	100029bb: R_386_32	bootInstallKeybrd(KeyboardToken, bool*)
100029bf:	83 ec 0c             	sub    esp,0xc
100029c2:	68 0c 56 00 10       	push   0x1000560c	100029c3: R_386_32	.text
100029c7:	e8 fc ff ff ff       	call   100029c8 <firstRun(bool)+0x36>	100029c8: R_386_PC32	KeSetBootMessage(char const*)
100029cc:	83 c4 10             	add    esp,0x10
100029cf:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100029d1: R_386_32	VgaText::hiddenOut
100029d6:	a1 00 00 00 00       	mov    eax,ds:0x0	100029d7: R_386_32	activeTerminal
100029db:	83 ec 08             	sub    esp,0x8
100029de:	68 35 56 00 10       	push   0x10005635	100029df: R_386_32	.text
100029e3:	50                   	push   eax
100029e4:	e8 fc ff ff ff       	call   100029e5 <firstRun(bool)+0x53>	100029e5: R_386_PC32	VgaText::puts(char const*)
100029e9:	83 c4 10             	add    esp,0x10
100029ec:	a1 00 00 00 00       	mov    eax,ds:0x0	100029ed: R_386_32	kernelProcess
100029f1:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
100029f7:	83 ec 08             	sub    esp,0x8
100029fa:	68 35 56 00 10       	push   0x10005635	100029fb: R_386_32	.text
100029ff:	50                   	push   eax
10002a00:	e8 fc ff ff ff       	call   10002a01 <firstRun(bool)+0x6f>	10002a01: R_386_PC32	VgaText::puts(char const*)
10002a05:	83 c4 10             	add    esp,0x10
10002a08:	83 ec 0c             	sub    esp,0xc
10002a0b:	68 84 01 00 00       	push   0x184
10002a10:	e8 fc ff ff ff       	call   10002a11 <firstRun(bool)+0x7f>	10002a11: R_386_PC32	operator new(unsigned long)
10002a15:	83 c4 10             	add    esp,0x10
10002a18:	89 c3                	mov    ebx,eax
10002a1a:	83 ec 08             	sub    esp,0x8
10002a1d:	68 3c 56 00 10       	push   0x1000563c	10002a1e: R_386_32	.text
10002a22:	53                   	push   ebx
10002a23:	e8 fc ff ff ff       	call   10002a24 <firstRun(bool)+0x92>	10002a24: R_386_PC32	VgaText::VgaText(char const*)
10002a28:	83 c4 10             	add    esp,0x10
10002a2b:	89 1d 00 00 00 00    	mov    DWORD PTR ds:0x0,ebx	10002a2d: R_386_32	term
10002a31:	a1 00 00 00 00       	mov    eax,ds:0x0	10002a32: R_386_32	term
10002a36:	83 ec 0c             	sub    esp,0xc
10002a39:	50                   	push   eax
10002a3a:	e8 fc ff ff ff       	call   10002a3b <firstRun(bool)+0xa9>	10002a3b: R_386_PC32	setActiveTerminal(VgaText*)
10002a3f:	83 c4 10             	add    esp,0x10
10002a42:	e8 fc ff ff ff       	call   10002a43 <firstRun(bool)+0xb1>	10002a43: R_386_PC32	drawBootScreen()
10002a47:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
10002a4e:	80 bd 24 ff ff ff 00 	cmp    BYTE PTR [ebp-0xdc],0x0
10002a55:	74 17                	je     10002a6e <firstRun(bool)+0xdc>
10002a57:	83 ec 08             	sub    esp,0x8
10002a5a:	68 41 56 00 10       	push   0x10005641	10002a5b: R_386_32	.text
10002a5f:	68 00 00 00 00       	push   0x0	10002a60: R_386_32	pkeybuf
10002a64:	e8 fc ff ff ff       	call   10002a65 <firstRun(bool)+0xd3>	10002a65: R_386_PC32	strcpy
10002a69:	83 c4 10             	add    esp,0x10
10002a6c:	eb 15                	jmp    10002a83 <firstRun(bool)+0xf1>
10002a6e:	83 ec 08             	sub    esp,0x8
10002a71:	68 52 56 00 10       	push   0x10005652	10002a72: R_386_32	.text
10002a76:	68 00 00 00 00       	push   0x0	10002a77: R_386_32	pkeybuf
10002a7b:	e8 fc ff ff ff       	call   10002a7c <firstRun(bool)+0xea>	10002a7c: R_386_PC32	strcpy
10002a80:	83 c4 10             	add    esp,0x10
10002a83:	8a 85 24 ff ff ff    	mov    al,BYTE PTR [ebp-0xdc]
10002a89:	83 f0 01             	xor    eax,0x1
10002a8c:	84 c0                	test   al,al
10002a8e:	0f 84 96 16 00 00    	je     1000412a <firstRun(bool)+0x1798>
10002a94:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
10002a9b:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10002a9d: R_386_32	tzsel
10002aa5:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10002aa7: R_386_32	modesel
10002aaf:	eb 01                	jmp    10002ab2 <firstRun(bool)+0x120>
10002ab1:	90                   	nop
10002ab2:	e8 fc ff ff ff       	call   10002ab3 <firstRun(bool)+0x121>	10002ab3: R_386_PC32	drawBootScreen()
10002ab7:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
10002abe:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10002ac0: R_386_32	installKey
10002ac5:	83 ec 0c             	sub    esp,0xc
10002ac8:	68 63 56 00 10       	push   0x10005663	10002ac9: R_386_32	.text
10002acd:	6a 0c                	push   0xc
10002acf:	6a 32                	push   0x32
10002ad1:	6a 03                	push   0x3
10002ad3:	6a 16                	push   0x16
10002ad5:	e8 fc ff ff ff       	call   10002ad6 <firstRun(bool)+0x144>	10002ad6: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
10002ada:	83 c4 20             	add    esp,0x20
10002add:	a1 00 00 00 00       	mov    eax,ds:0x0	10002ade: R_386_32	term
10002ae2:	83 ec 04             	sub    esp,0x4
10002ae5:	6a 06                	push   0x6
10002ae7:	6a 18                	push   0x18
10002ae9:	50                   	push   eax
10002aea:	e8 fc ff ff ff       	call   10002aeb <firstRun(bool)+0x159>	10002aeb: R_386_PC32	VgaText::setCursor(int, int)
10002aef:	83 c4 10             	add    esp,0x10
10002af2:	a1 00 00 00 00       	mov    eax,ds:0x0	10002af3: R_386_32	term
10002af7:	83 ec 08             	sub    esp,0x8
10002afa:	68 70 56 00 10       	push   0x10005670	10002afb: R_386_32	.text
10002aff:	50                   	push   eax
10002b00:	e8 fc ff ff ff       	call   10002b01 <firstRun(bool)+0x16f>	10002b01: R_386_PC32	VgaText::puts(char const*)
10002b05:	83 c4 10             	add    esp,0x10
10002b08:	a1 00 00 00 00       	mov    eax,ds:0x0	10002b09: R_386_32	term
10002b0d:	83 ec 04             	sub    esp,0x4
10002b10:	6a 07                	push   0x7
10002b12:	6a 18                	push   0x18
10002b14:	50                   	push   eax
10002b15:	e8 fc ff ff ff       	call   10002b16 <firstRun(bool)+0x184>	10002b16: R_386_PC32	VgaText::setCursor(int, int)
10002b1a:	83 c4 10             	add    esp,0x10
10002b1d:	a1 00 00 00 00       	mov    eax,ds:0x0	10002b1e: R_386_32	term
10002b22:	83 ec 08             	sub    esp,0x8
10002b25:	68 9f 56 00 10       	push   0x1000569f	10002b26: R_386_32	.text
10002b2a:	50                   	push   eax
10002b2b:	e8 fc ff ff ff       	call   10002b2c <firstRun(bool)+0x19a>	10002b2c: R_386_PC32	VgaText::puts(char const*)
10002b30:	83 c4 10             	add    esp,0x10
10002b33:	a1 00 00 00 00       	mov    eax,ds:0x0	10002b34: R_386_32	term
10002b38:	83 ec 04             	sub    esp,0x4
10002b3b:	6a 09                	push   0x9
10002b3d:	6a 18                	push   0x18
10002b3f:	50                   	push   eax
10002b40:	e8 fc ff ff ff       	call   10002b41 <firstRun(bool)+0x1af>	10002b41: R_386_PC32	VgaText::setCursor(int, int)
10002b45:	83 c4 10             	add    esp,0x10
10002b48:	a1 00 00 00 00       	mov    eax,ds:0x0	10002b49: R_386_32	term
10002b4d:	83 ec 08             	sub    esp,0x8
10002b50:	68 af 56 00 10       	push   0x100056af	10002b51: R_386_32	.text
10002b55:	50                   	push   eax
10002b56:	e8 fc ff ff ff       	call   10002b57 <firstRun(bool)+0x1c5>	10002b57: R_386_PC32	VgaText::puts(char const*)
10002b5b:	83 c4 10             	add    esp,0x10
10002b5e:	a1 00 00 00 00       	mov    eax,ds:0x0	10002b5f: R_386_32	term
10002b63:	83 ec 04             	sub    esp,0x4
10002b66:	6a 0b                	push   0xb
10002b68:	6a 18                	push   0x18
10002b6a:	50                   	push   eax
10002b6b:	e8 fc ff ff ff       	call   10002b6c <firstRun(bool)+0x1da>	10002b6c: R_386_PC32	VgaText::setCursor(int, int)
10002b70:	83 c4 10             	add    esp,0x10
10002b73:	a1 00 00 00 00       	mov    eax,ds:0x0	10002b74: R_386_32	term
10002b78:	83 ec 08             	sub    esp,0x8
10002b7b:	68 b4 56 00 10       	push   0x100056b4	10002b7c: R_386_32	.text
10002b80:	50                   	push   eax
10002b81:	e8 fc ff ff ff       	call   10002b82 <firstRun(bool)+0x1f0>	10002b82: R_386_PC32	VgaText::puts(char const*)
10002b86:	83 c4 10             	add    esp,0x10
10002b89:	a1 00 00 00 00       	mov    eax,ds:0x0	10002b8a: R_386_32	term
10002b8e:	83 ec 04             	sub    esp,0x4
10002b91:	6a 09                	push   0x9
10002b93:	6a 21                	push   0x21
10002b95:	50                   	push   eax
10002b96:	e8 fc ff ff ff       	call   10002b97 <firstRun(bool)+0x205>	10002b97: R_386_PC32	VgaText::setCursor(int, int)
10002b9b:	83 c4 10             	add    esp,0x10
10002b9e:	a1 00 00 00 00       	mov    eax,ds:0x0	10002b9f: R_386_32	term
10002ba3:	6a 07                	push   0x7
10002ba5:	6a 00                	push   0x0
10002ba7:	68 bc 56 00 10       	push   0x100056bc	10002ba8: R_386_32	.text
10002bac:	50                   	push   eax
10002bad:	e8 fc ff ff ff       	call   10002bae <firstRun(bool)+0x21c>	10002bae: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002bb2:	83 c4 10             	add    esp,0x10
10002bb5:	a1 00 00 00 00       	mov    eax,ds:0x0	10002bb6: R_386_32	term
10002bba:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
10002bbe:	75 07                	jne    10002bc7 <firstRun(bool)+0x235>
10002bc0:	ba d6 56 00 10       	mov    edx,0x100056d6	10002bc1: R_386_32	.text
10002bc5:	eb 05                	jmp    10002bcc <firstRun(bool)+0x23a>
10002bc7:	ba da 56 00 10       	mov    edx,0x100056da	10002bc8: R_386_32	.text
10002bcc:	6a 0f                	push   0xf
10002bce:	6a 00                	push   0x0
10002bd0:	52                   	push   edx
10002bd1:	50                   	push   eax
10002bd2:	e8 fc ff ff ff       	call   10002bd3 <firstRun(bool)+0x241>	10002bd3: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002bd7:	83 c4 10             	add    esp,0x10
10002bda:	a1 00 00 00 00       	mov    eax,ds:0x0	10002bdb: R_386_32	term
10002bdf:	83 ec 08             	sub    esp,0x8
10002be2:	6a 21                	push   0x21
10002be4:	50                   	push   eax
10002be5:	e8 fc ff ff ff       	call   10002be6 <firstRun(bool)+0x254>	10002be6: R_386_PC32	VgaText::setCursorX(int)
10002bea:	83 c4 10             	add    esp,0x10
10002bed:	a1 00 00 00 00       	mov    eax,ds:0x0	10002bee: R_386_32	term
10002bf2:	6a 07                	push   0x7
10002bf4:	6a 00                	push   0x0
10002bf6:	68 00 00 00 00       	push   0x0	10002bf7: R_386_32	currName
10002bfb:	50                   	push   eax
10002bfc:	e8 fc ff ff ff       	call   10002bfd <firstRun(bool)+0x26b>	10002bfd: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002c01:	83 c4 10             	add    esp,0x10
10002c04:	a1 00 00 00 00       	mov    eax,ds:0x0	10002c05: R_386_32	term
10002c09:	83 ec 04             	sub    esp,0x4
10002c0c:	6a 0b                	push   0xb
10002c0e:	6a 21                	push   0x21
10002c10:	50                   	push   eax
10002c11:	e8 fc ff ff ff       	call   10002c12 <firstRun(bool)+0x280>	10002c12: R_386_PC32	VgaText::setCursor(int, int)
10002c16:	83 c4 10             	add    esp,0x10
10002c19:	a1 00 00 00 00       	mov    eax,ds:0x0	10002c1a: R_386_32	term
10002c1e:	6a 07                	push   0x7
10002c20:	6a 00                	push   0x0
10002c22:	68 bc 56 00 10       	push   0x100056bc	10002c23: R_386_32	.text
10002c27:	50                   	push   eax
10002c28:	e8 fc ff ff ff       	call   10002c29 <firstRun(bool)+0x297>	10002c29: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002c2d:	83 c4 10             	add    esp,0x10
10002c30:	a1 00 00 00 00       	mov    eax,ds:0x0	10002c31: R_386_32	term
10002c35:	83 7d e0 01          	cmp    DWORD PTR [ebp-0x20],0x1
10002c39:	75 07                	jne    10002c42 <firstRun(bool)+0x2b0>
10002c3b:	ba d6 56 00 10       	mov    edx,0x100056d6	10002c3c: R_386_32	.text
10002c40:	eb 05                	jmp    10002c47 <firstRun(bool)+0x2b5>
10002c42:	ba da 56 00 10       	mov    edx,0x100056da	10002c43: R_386_32	.text
10002c47:	6a 0f                	push   0xf
10002c49:	6a 00                	push   0x0
10002c4b:	52                   	push   edx
10002c4c:	50                   	push   eax
10002c4d:	e8 fc ff ff ff       	call   10002c4e <firstRun(bool)+0x2bc>	10002c4e: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002c52:	83 c4 10             	add    esp,0x10
10002c55:	a1 00 00 00 00       	mov    eax,ds:0x0	10002c56: R_386_32	term
10002c5a:	83 ec 08             	sub    esp,0x8
10002c5d:	6a 21                	push   0x21
10002c5f:	50                   	push   eax
10002c60:	e8 fc ff ff ff       	call   10002c61 <firstRun(bool)+0x2cf>	10002c61: R_386_PC32	VgaText::setCursorX(int)
10002c65:	83 c4 10             	add    esp,0x10
10002c68:	a1 00 00 00 00       	mov    eax,ds:0x0	10002c69: R_386_32	term
10002c6d:	6a 07                	push   0x7
10002c6f:	6a 00                	push   0x0
10002c71:	68 00 00 00 00       	push   0x0	10002c72: R_386_32	currComp
10002c76:	50                   	push   eax
10002c77:	e8 fc ff ff ff       	call   10002c78 <firstRun(bool)+0x2e6>	10002c78: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002c7c:	83 c4 10             	add    esp,0x10
10002c7f:	a1 00 00 00 00       	mov    eax,ds:0x0	10002c80: R_386_32	term
10002c84:	83 ec 04             	sub    esp,0x4
10002c87:	6a 0d                	push   0xd
10002c89:	6a 18                	push   0x18
10002c8b:	50                   	push   eax
10002c8c:	e8 fc ff ff ff       	call   10002c8d <firstRun(bool)+0x2fb>	10002c8d: R_386_PC32	VgaText::setCursor(int, int)
10002c91:	83 c4 10             	add    esp,0x10
10002c94:	a1 00 00 00 00       	mov    eax,ds:0x0	10002c95: R_386_32	term
10002c99:	83 7d e0 02          	cmp    DWORD PTR [ebp-0x20],0x2
10002c9d:	75 07                	jne    10002ca6 <firstRun(bool)+0x314>
10002c9f:	ba de 56 00 10       	mov    edx,0x100056de	10002ca0: R_386_32	.text
10002ca4:	eb 05                	jmp    10002cab <firstRun(bool)+0x319>
10002ca6:	ba ea 56 00 10       	mov    edx,0x100056ea	10002ca7: R_386_32	.text
10002cab:	6a 0f                	push   0xf
10002cad:	6a 08                	push   0x8
10002caf:	52                   	push   edx
10002cb0:	50                   	push   eax
10002cb1:	e8 fc ff ff ff       	call   10002cb2 <firstRun(bool)+0x320>	10002cb2: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002cb6:	83 c4 10             	add    esp,0x10
10002cb9:	a1 00 00 00 00       	mov    eax,ds:0x0	10002cba: R_386_32	term
10002cbe:	83 ec 04             	sub    esp,0x4
10002cc1:	6a 0e                	push   0xe
10002cc3:	6a 18                	push   0x18
10002cc5:	50                   	push   eax
10002cc6:	e8 fc ff ff ff       	call   10002cc7 <firstRun(bool)+0x335>	10002cc7: R_386_PC32	VgaText::setCursor(int, int)
10002ccb:	83 c4 10             	add    esp,0x10
10002cce:	a1 00 00 00 00       	mov    eax,ds:0x0	10002ccf: R_386_32	term
10002cd3:	83 7d e0 02          	cmp    DWORD PTR [ebp-0x20],0x2
10002cd7:	75 07                	jne    10002ce0 <firstRun(bool)+0x34e>
10002cd9:	ba f6 56 00 10       	mov    edx,0x100056f6	10002cda: R_386_32	.text
10002cde:	eb 05                	jmp    10002ce5 <firstRun(bool)+0x353>
10002ce0:	ba ea 56 00 10       	mov    edx,0x100056ea	10002ce1: R_386_32	.text
10002ce5:	6a 0f                	push   0xf
10002ce7:	6a 08                	push   0x8
10002ce9:	52                   	push   edx
10002cea:	50                   	push   eax
10002ceb:	e8 fc ff ff ff       	call   10002cec <firstRun(bool)+0x35a>	10002cec: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002cf0:	83 c4 10             	add    esp,0x10
10002cf3:	a1 00 00 00 00       	mov    eax,ds:0x0	10002cf4: R_386_32	term
10002cf8:	83 ec 04             	sub    esp,0x4
10002cfb:	6a 0d                	push   0xd
10002cfd:	6a 32                	push   0x32
10002cff:	50                   	push   eax
10002d00:	e8 fc ff ff ff       	call   10002d01 <firstRun(bool)+0x36f>	10002d01: R_386_PC32	VgaText::setCursor(int, int)
10002d05:	83 c4 10             	add    esp,0x10
10002d08:	83 7d e0 02          	cmp    DWORD PTR [ebp-0x20],0x2
10002d0c:	74 19                	je     10002d27 <firstRun(bool)+0x395>
10002d0e:	a1 00 00 00 00       	mov    eax,ds:0x0	10002d0f: R_386_32	term
10002d13:	6a 08                	push   0x8
10002d15:	6a 0f                	push   0xf
10002d17:	68 00 57 00 10       	push   0x10005700	10002d18: R_386_32	.text
10002d1c:	50                   	push   eax
10002d1d:	e8 fc ff ff ff       	call   10002d1e <firstRun(bool)+0x38c>	10002d1e: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002d22:	83 c4 10             	add    esp,0x10
10002d25:	eb 17                	jmp    10002d3e <firstRun(bool)+0x3ac>
10002d27:	a1 00 00 00 00       	mov    eax,ds:0x0	10002d28: R_386_32	term
10002d2c:	6a 01                	push   0x1
10002d2e:	6a 0f                	push   0xf
10002d30:	68 00 57 00 10       	push   0x10005700	10002d31: R_386_32	.text
10002d35:	50                   	push   eax
10002d36:	e8 fc ff ff ff       	call   10002d37 <firstRun(bool)+0x3a5>	10002d37: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002d3b:	83 c4 10             	add    esp,0x10
10002d3e:	a1 00 00 00 00       	mov    eax,ds:0x0	10002d3f: R_386_32	term
10002d43:	83 7d e0 02          	cmp    DWORD PTR [ebp-0x20],0x2
10002d47:	75 07                	jne    10002d50 <firstRun(bool)+0x3be>
10002d49:	ba d6 56 00 10       	mov    edx,0x100056d6	10002d4a: R_386_32	.text
10002d4e:	eb 05                	jmp    10002d55 <firstRun(bool)+0x3c3>
10002d50:	ba da 56 00 10       	mov    edx,0x100056da	10002d51: R_386_32	.text
10002d55:	6a 0f                	push   0xf
10002d57:	6a 00                	push   0x0
10002d59:	52                   	push   edx
10002d5a:	50                   	push   eax
10002d5b:	e8 fc ff ff ff       	call   10002d5c <firstRun(bool)+0x3ca>	10002d5c: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10002d60:	83 c4 10             	add    esp,0x10
10002d63:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
10002d67:	75 28                	jne    10002d91 <firstRun(bool)+0x3ff>
10002d69:	8b 1d 00 00 00 00    	mov    ebx,DWORD PTR ds:0x0	10002d6b: R_386_32	term
10002d6f:	83 ec 0c             	sub    esp,0xc
10002d72:	68 00 00 00 00       	push   0x0	10002d73: R_386_32	currName
10002d77:	e8 fc ff ff ff       	call   10002d78 <firstRun(bool)+0x3e6>	10002d78: R_386_PC32	strlen
10002d7c:	83 c4 10             	add    esp,0x10
10002d7f:	83 c0 21             	add    eax,0x21
10002d82:	83 ec 04             	sub    esp,0x4
10002d85:	6a 09                	push   0x9
10002d87:	50                   	push   eax
10002d88:	53                   	push   ebx
10002d89:	e8 fc ff ff ff       	call   10002d8a <firstRun(bool)+0x3f8>	10002d8a: R_386_PC32	VgaText::setCursor(int, int)
10002d8e:	83 c4 10             	add    esp,0x10
10002d91:	83 7d e0 01          	cmp    DWORD PTR [ebp-0x20],0x1
10002d95:	75 28                	jne    10002dbf <firstRun(bool)+0x42d>
10002d97:	8b 1d 00 00 00 00    	mov    ebx,DWORD PTR ds:0x0	10002d99: R_386_32	term
10002d9d:	83 ec 0c             	sub    esp,0xc
10002da0:	68 00 00 00 00       	push   0x0	10002da1: R_386_32	currComp
10002da5:	e8 fc ff ff ff       	call   10002da6 <firstRun(bool)+0x414>	10002da6: R_386_PC32	strlen
10002daa:	83 c4 10             	add    esp,0x10
10002dad:	83 c0 21             	add    eax,0x21
10002db0:	83 ec 04             	sub    esp,0x4
10002db3:	6a 0b                	push   0xb
10002db5:	50                   	push   eax
10002db6:	53                   	push   ebx
10002db7:	e8 fc ff ff ff       	call   10002db8 <firstRun(bool)+0x426>	10002db8: R_386_PC32	VgaText::setCursor(int, int)
10002dbc:	83 c4 10             	add    esp,0x10
10002dbf:	83 7d e0 02          	cmp    DWORD PTR [ebp-0x20],0x2
10002dc3:	75 15                	jne    10002dda <firstRun(bool)+0x448>
10002dc5:	a1 00 00 00 00       	mov    eax,ds:0x0	10002dc6: R_386_32	term
10002dca:	83 ec 04             	sub    esp,0x4
10002dcd:	6a 02                	push   0x2
10002dcf:	6a 00                	push   0x0
10002dd1:	50                   	push   eax
10002dd2:	e8 fc ff ff ff       	call   10002dd3 <firstRun(bool)+0x441>	10002dd3: R_386_PC32	VgaText::setCursor(int, int)
10002dd7:	83 c4 10             	add    esp,0x10
10002dda:	a0 00 00 00 00       	mov    al,ds:0x0	10002ddb: R_386_32	installKey
10002ddf:	84 c0                	test   al,al
10002de1:	0f 94 c0             	sete   al
10002de4:	84 c0                	test   al,al
10002de6:	74 02                	je     10002dea <firstRun(bool)+0x458>
10002de8:	eb f0                	jmp    10002dda <firstRun(bool)+0x448>
10002dea:	a1 00 00 00 00       	mov    eax,ds:0x0	10002deb: R_386_32	term
10002def:	05 82 00 00 00       	add    eax,0x82
10002df4:	83 ec 04             	sub    esp,0x4
10002df7:	6a 10                	push   0x10
10002df9:	6a 00                	push   0x0
10002dfb:	50                   	push   eax
10002dfc:	e8 fc ff ff ff       	call   10002dfd <firstRun(bool)+0x46b>	10002dfd: R_386_PC32	memset
10002e01:	83 c4 10             	add    esp,0x10
10002e04:	a1 00 00 00 00       	mov    eax,ds:0x0	10002e05: R_386_32	term
10002e09:	05 02 01 00 00       	add    eax,0x102
10002e0e:	83 ec 04             	sub    esp,0x4
10002e11:	6a 10                	push   0x10
10002e13:	6a 00                	push   0x0
10002e15:	50                   	push   eax
10002e16:	e8 fc ff ff ff       	call   10002e17 <firstRun(bool)+0x485>	10002e17: R_386_PC32	memset
10002e1b:	83 c4 10             	add    esp,0x10
10002e1e:	a0 00 00 00 00       	mov    al,ds:0x0	10002e1f: R_386_32	installKey
10002e23:	3c 09                	cmp    al,0x9
10002e25:	74 09                	je     10002e30 <firstRun(bool)+0x49e>
10002e27:	a0 00 00 00 00       	mov    al,ds:0x0	10002e28: R_386_32	installKey
10002e2c:	3c 0a                	cmp    al,0xa
10002e2e:	75 04                	jne    10002e34 <firstRun(bool)+0x4a2>
10002e30:	b0 01                	mov    al,0x1
10002e32:	eb 02                	jmp    10002e36 <firstRun(bool)+0x4a4>
10002e34:	b0 00                	mov    al,0x0
10002e36:	84 c0                	test   al,al
10002e38:	74 62                	je     10002e9c <firstRun(bool)+0x50a>
10002e3a:	83 7d e0 02          	cmp    DWORD PTR [ebp-0x20],0x2
10002e3e:	75 0d                	jne    10002e4d <firstRun(bool)+0x4bb>
10002e40:	a0 00 00 00 00       	mov    al,ds:0x0	10002e41: R_386_32	installKey
10002e45:	3c 0a                	cmp    al,0xa
10002e47:	75 04                	jne    10002e4d <firstRun(bool)+0x4bb>
10002e49:	b0 01                	mov    al,0x1
10002e4b:	eb 02                	jmp    10002e4f <firstRun(bool)+0x4bd>
10002e4d:	b0 00                	mov    al,0x0
10002e4f:	84 c0                	test   al,al
10002e51:	74 24                	je     10002e77 <firstRun(bool)+0x4e5>
10002e53:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10002e55: R_386_32	installKey
10002e5a:	90                   	nop
10002e5b:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10002e5d: R_386_32	installKey
10002e62:	83 ec 0c             	sub    esp,0xc
10002e65:	68 a0 0f 00 00       	push   0xfa0
10002e6a:	e8 fc ff ff ff       	call   10002e6b <firstRun(bool)+0x4d9>	10002e6b: R_386_PC32	milliTenthSleep(unsigned int)
10002e6f:	83 c4 10             	add    esp,0x10
10002e72:	e9 77 01 00 00       	jmp    10002fee <firstRun(bool)+0x65c>
10002e77:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
10002e7a:	83 7d e0 03          	cmp    DWORD PTR [ebp-0x20],0x3
10002e7e:	75 07                	jne    10002e87 <firstRun(bool)+0x4f5>
10002e80:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
10002e87:	83 ec 0c             	sub    esp,0xc
10002e8a:	68 2c 01 00 00       	push   0x12c
10002e8f:	e8 fc ff ff ff       	call   10002e90 <firstRun(bool)+0x4fe>	10002e90: R_386_PC32	milliTenthSleep(unsigned int)
10002e94:	83 c4 10             	add    esp,0x10
10002e97:	e9 45 01 00 00       	jmp    10002fe1 <firstRun(bool)+0x64f>
10002e9c:	a0 00 00 00 00       	mov    al,ds:0x0	10002e9d: R_386_32	installKey
10002ea1:	3c 1f                	cmp    al,0x1f
10002ea3:	7e 0d                	jle    10002eb2 <firstRun(bool)+0x520>
10002ea5:	a0 00 00 00 00       	mov    al,ds:0x0	10002ea6: R_386_32	installKey
10002eaa:	3c 7f                	cmp    al,0x7f
10002eac:	74 04                	je     10002eb2 <firstRun(bool)+0x520>
10002eae:	b0 01                	mov    al,0x1
10002eb0:	eb 02                	jmp    10002eb4 <firstRun(bool)+0x522>
10002eb2:	b0 00                	mov    al,0x0
10002eb4:	84 c0                	test   al,al
10002eb6:	0f 84 83 00 00 00    	je     10002f3f <firstRun(bool)+0x5ad>
10002ebc:	a0 00 00 00 00       	mov    al,ds:0x0	10002ebd: R_386_32	installKey
10002ec1:	88 85 3a ff ff ff    	mov    BYTE PTR [ebp-0xc6],al
10002ec7:	c6 85 3b ff ff ff 00 	mov    BYTE PTR [ebp-0xc5],0x0
10002ece:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
10002ed2:	75 2c                	jne    10002f00 <firstRun(bool)+0x56e>
10002ed4:	83 ec 0c             	sub    esp,0xc
10002ed7:	68 00 00 00 00       	push   0x0	10002ed8: R_386_32	currName
10002edc:	e8 fc ff ff ff       	call   10002edd <firstRun(bool)+0x54b>	10002edd: R_386_PC32	strlen
10002ee1:	83 c4 10             	add    esp,0x10
10002ee4:	83 f8 17             	cmp    eax,0x17
10002ee7:	77 17                	ja     10002f00 <firstRun(bool)+0x56e>
10002ee9:	83 ec 08             	sub    esp,0x8
10002eec:	8d 85 3a ff ff ff    	lea    eax,[ebp-0xc6]
10002ef2:	50                   	push   eax
10002ef3:	68 00 00 00 00       	push   0x0	10002ef4: R_386_32	currName
10002ef8:	e8 fc ff ff ff       	call   10002ef9 <firstRun(bool)+0x567>	10002ef9: R_386_PC32	strcat
10002efd:	83 c4 10             	add    esp,0x10
10002f00:	83 7d e0 01          	cmp    DWORD PTR [ebp-0x20],0x1
10002f04:	0f 85 d7 00 00 00    	jne    10002fe1 <firstRun(bool)+0x64f>
10002f0a:	83 ec 0c             	sub    esp,0xc
10002f0d:	68 00 00 00 00       	push   0x0	10002f0e: R_386_32	currComp
10002f12:	e8 fc ff ff ff       	call   10002f13 <firstRun(bool)+0x581>	10002f13: R_386_PC32	strlen
10002f17:	83 c4 10             	add    esp,0x10
10002f1a:	83 f8 17             	cmp    eax,0x17
10002f1d:	0f 87 be 00 00 00    	ja     10002fe1 <firstRun(bool)+0x64f>
10002f23:	83 ec 08             	sub    esp,0x8
10002f26:	8d 85 3a ff ff ff    	lea    eax,[ebp-0xc6]
10002f2c:	50                   	push   eax
10002f2d:	68 00 00 00 00       	push   0x0	10002f2e: R_386_32	currComp
10002f32:	e8 fc ff ff ff       	call   10002f33 <firstRun(bool)+0x5a1>	10002f33: R_386_PC32	strcat
10002f37:	83 c4 10             	add    esp,0x10
10002f3a:	e9 a2 00 00 00       	jmp    10002fe1 <firstRun(bool)+0x64f>
10002f3f:	a0 00 00 00 00       	mov    al,ds:0x0	10002f40: R_386_32	installKey
10002f44:	3c 08                	cmp    al,0x8
10002f46:	0f 94 c0             	sete   al
10002f49:	84 c0                	test   al,al
10002f4b:	74 66                	je     10002fb3 <firstRun(bool)+0x621>
10002f4d:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
10002f51:	75 2c                	jne    10002f7f <firstRun(bool)+0x5ed>
10002f53:	83 ec 0c             	sub    esp,0xc
10002f56:	68 00 00 00 00       	push   0x0	10002f57: R_386_32	currName
10002f5b:	e8 fc ff ff ff       	call   10002f5c <firstRun(bool)+0x5ca>	10002f5c: R_386_PC32	strlen
10002f60:	83 c4 10             	add    esp,0x10
10002f63:	85 c0                	test   eax,eax
10002f65:	74 18                	je     10002f7f <firstRun(bool)+0x5ed>
10002f67:	83 ec 0c             	sub    esp,0xc
10002f6a:	68 00 00 00 00       	push   0x0	10002f6b: R_386_32	currName
10002f6f:	e8 fc ff ff ff       	call   10002f70 <firstRun(bool)+0x5de>	10002f70: R_386_PC32	strlen
10002f74:	83 c4 10             	add    esp,0x10
10002f77:	48                   	dec    eax
10002f78:	c6 80 00 00 00 00 00 	mov    BYTE PTR [eax+0x0],0x0	10002f7a: R_386_32	currName
10002f7f:	83 7d e0 01          	cmp    DWORD PTR [ebp-0x20],0x1
10002f83:	75 5c                	jne    10002fe1 <firstRun(bool)+0x64f>
10002f85:	83 ec 0c             	sub    esp,0xc
10002f88:	68 00 00 00 00       	push   0x0	10002f89: R_386_32	currComp
10002f8d:	e8 fc ff ff ff       	call   10002f8e <firstRun(bool)+0x5fc>	10002f8e: R_386_PC32	strlen
10002f92:	83 c4 10             	add    esp,0x10
10002f95:	85 c0                	test   eax,eax
10002f97:	74 48                	je     10002fe1 <firstRun(bool)+0x64f>
10002f99:	83 ec 0c             	sub    esp,0xc
10002f9c:	68 00 00 00 00       	push   0x0	10002f9d: R_386_32	currComp
10002fa1:	e8 fc ff ff ff       	call   10002fa2 <firstRun(bool)+0x610>	10002fa2: R_386_PC32	strlen
10002fa6:	83 c4 10             	add    esp,0x10
10002fa9:	48                   	dec    eax
10002faa:	c6 80 00 00 00 00 00 	mov    BYTE PTR [eax+0x0],0x0	10002fac: R_386_32	currComp
10002fb1:	eb 2e                	jmp    10002fe1 <firstRun(bool)+0x64f>
10002fb3:	a0 00 00 00 00       	mov    al,ds:0x0	10002fb4: R_386_32	installKey
10002fb8:	3c 7f                	cmp    al,0x7f
10002fba:	0f 94 c0             	sete   al
10002fbd:	84 c0                	test   al,al
10002fbf:	74 20                	je     10002fe1 <firstRun(bool)+0x64f>
10002fc1:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
10002fc4:	83 7d e0 ff          	cmp    DWORD PTR [ebp-0x20],0xffffffff
10002fc8:	75 07                	jne    10002fd1 <firstRun(bool)+0x63f>
10002fca:	c7 45 e0 02 00 00 00 	mov    DWORD PTR [ebp-0x20],0x2
10002fd1:	83 ec 0c             	sub    esp,0xc
10002fd4:	68 2c 01 00 00       	push   0x12c
10002fd9:	e8 fc ff ff ff       	call   10002fda <firstRun(bool)+0x648>	10002fda: R_386_PC32	milliTenthSleep(unsigned int)
10002fde:	83 c4 10             	add    esp,0x10
10002fe1:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10002fe3: R_386_32	installKey
10002fe8:	e9 9c fb ff ff       	jmp    10002b89 <firstRun(bool)+0x1f7>
10002fed:	90                   	nop
10002fee:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10002ff0: R_386_32	installKey
10002ff5:	e8 fc ff ff ff       	call   10002ff6 <firstRun(bool)+0x664>	10002ff6: R_386_PC32	drawBootScreen()
10002ffa:	83 ec 0c             	sub    esp,0xc
10002ffd:	68 09 57 00 10       	push   0x10005709	10002ffe: R_386_32	.text
10003002:	6a 0d                	push   0xd
10003004:	6a 32                	push   0x32
10003006:	6a 02                	push   0x2
10003008:	6a 16                	push   0x16
1000300a:	e8 fc ff ff ff       	call   1000300b <firstRun(bool)+0x679>	1000300b: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
1000300f:	83 c4 20             	add    esp,0x20
10003012:	a1 00 00 00 00       	mov    eax,ds:0x0	10003013: R_386_32	Krnl::computer
10003017:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
1000301d:	a1 00 00 00 00       	mov    eax,ds:0x0	1000301e: R_386_32	Krnl::computer
10003022:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
10003028:	8b 00                	mov    eax,DWORD PTR [eax]
1000302a:	83 c0 28             	add    eax,0x28
1000302d:	8b 00                	mov    eax,DWORD PTR [eax]
1000302f:	8d 95 18 ff ff ff    	lea    edx,[ebp-0xe8]
10003035:	83 ec 08             	sub    esp,0x8
10003038:	51                   	push   ecx
10003039:	52                   	push   edx
1000303a:	ff d0                	call   eax
1000303c:	83 c4 0c             	add    esp,0xc
1000303f:	8b 85 18 ff ff ff    	mov    eax,DWORD PTR [ebp-0xe8]
10003045:	8b 95 1c ff ff ff    	mov    edx,DWORD PTR [ebp-0xe4]
1000304b:	89 85 48 ff ff ff    	mov    DWORD PTR [ebp-0xb8],eax
10003051:	89 95 4c ff ff ff    	mov    DWORD PTR [ebp-0xb4],edx
10003057:	83 ec 08             	sub    esp,0x8
1000305a:	68 17 57 00 10       	push   0x10005717	1000305b: R_386_32	.text
1000305f:	8d 85 50 ff ff ff    	lea    eax,[ebp-0xb0]
10003065:	50                   	push   eax
10003066:	e8 fc ff ff ff       	call   10003067 <firstRun(bool)+0x6d5>	10003067: R_386_PC32	strcpy
1000306b:	83 c4 10             	add    esp,0x10
1000306e:	8a 85 48 ff ff ff    	mov    al,BYTE PTR [ebp-0xb8]
10003074:	0f b6 d0             	movzx  edx,al
10003077:	89 d0                	mov    eax,edx
10003079:	c1 e0 02             	shl    eax,0x2
1000307c:	01 d0                	add    eax,edx
1000307e:	c1 e0 03             	shl    eax,0x3
10003081:	01 d0                	add    eax,edx
10003083:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
1000308a:	01 d0                	add    eax,edx
1000308c:	66 c1 e8 08          	shr    ax,0x8
10003090:	c0 e8 03             	shr    al,0x3
10003093:	83 c0 30             	add    eax,0x30
10003096:	88 85 50 ff ff ff    	mov    BYTE PTR [ebp-0xb0],al
1000309c:	8a 8d 48 ff ff ff    	mov    cl,BYTE PTR [ebp-0xb8]
100030a2:	0f b6 d1             	movzx  edx,cl
100030a5:	89 d0                	mov    eax,edx
100030a7:	c1 e0 02             	shl    eax,0x2
100030aa:	01 d0                	add    eax,edx
100030ac:	c1 e0 03             	shl    eax,0x3
100030af:	01 d0                	add    eax,edx
100030b1:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
100030b8:	01 d0                	add    eax,edx
100030ba:	66 c1 e8 08          	shr    ax,0x8
100030be:	88 c2                	mov    dl,al
100030c0:	c0 ea 03             	shr    dl,0x3
100030c3:	88 d0                	mov    al,dl
100030c5:	c1 e0 02             	shl    eax,0x2
100030c8:	01 d0                	add    eax,edx
100030ca:	d1 e0                	shl    eax,1
100030cc:	29 c1                	sub    ecx,eax
100030ce:	88 ca                	mov    dl,cl
100030d0:	8d 42 30             	lea    eax,[edx+0x30]
100030d3:	88 85 51 ff ff ff    	mov    BYTE PTR [ebp-0xaf],al
100030d9:	8a 85 49 ff ff ff    	mov    al,BYTE PTR [ebp-0xb7]
100030df:	0f b6 c8             	movzx  ecx,al
100030e2:	b8 67 66 66 66       	mov    eax,0x66666667
100030e7:	f7 e9                	imul   ecx
100030e9:	c1 fa 02             	sar    edx,0x2
100030ec:	89 c8                	mov    eax,ecx
100030ee:	c1 f8 1f             	sar    eax,0x1f
100030f1:	29 c2                	sub    edx,eax
100030f3:	89 d0                	mov    eax,edx
100030f5:	83 c0 30             	add    eax,0x30
100030f8:	88 85 53 ff ff ff    	mov    BYTE PTR [ebp-0xad],al
100030fe:	8a 85 49 ff ff ff    	mov    al,BYTE PTR [ebp-0xb7]
10003104:	0f b6 c8             	movzx  ecx,al
10003107:	b8 67 66 66 66       	mov    eax,0x66666667
1000310c:	f7 e9                	imul   ecx
1000310e:	c1 fa 02             	sar    edx,0x2
10003111:	89 c8                	mov    eax,ecx
10003113:	c1 f8 1f             	sar    eax,0x1f
10003116:	29 c2                	sub    edx,eax
10003118:	89 d0                	mov    eax,edx
1000311a:	c1 e0 02             	shl    eax,0x2
1000311d:	01 d0                	add    eax,edx
1000311f:	01 c0                	add    eax,eax
10003121:	29 c1                	sub    ecx,eax
10003123:	89 ca                	mov    edx,ecx
10003125:	88 d0                	mov    al,dl
10003127:	83 c0 30             	add    eax,0x30
1000312a:	88 85 54 ff ff ff    	mov    BYTE PTR [ebp-0xac],al
10003130:	66 8b 85 4a ff ff ff 	mov    ax,WORD PTR [ebp-0xb6]
10003137:	0f b7 c8             	movzx  ecx,ax
1000313a:	b8 d3 4d 62 10       	mov    eax,0x10624dd3
1000313f:	f7 e9                	imul   ecx
10003141:	c1 fa 06             	sar    edx,0x6
10003144:	89 c8                	mov    eax,ecx
10003146:	c1 f8 1f             	sar    eax,0x1f
10003149:	29 c2                	sub    edx,eax
1000314b:	89 d0                	mov    eax,edx
1000314d:	b9 0a 00 00 00       	mov    ecx,0xa
10003152:	99                   	cdq    
10003153:	f7 f9                	idiv   ecx
10003155:	89 d0                	mov    eax,edx
10003157:	83 c0 30             	add    eax,0x30
1000315a:	88 85 56 ff ff ff    	mov    BYTE PTR [ebp-0xaa],al
10003160:	66 8b 85 4a ff ff ff 	mov    ax,WORD PTR [ebp-0xb6]
10003167:	0f b7 c8             	movzx  ecx,ax
1000316a:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
1000316f:	f7 e9                	imul   ecx
10003171:	c1 fa 05             	sar    edx,0x5
10003174:	89 c8                	mov    eax,ecx
10003176:	c1 f8 1f             	sar    eax,0x1f
10003179:	29 c2                	sub    edx,eax
1000317b:	89 d0                	mov    eax,edx
1000317d:	b9 0a 00 00 00       	mov    ecx,0xa
10003182:	99                   	cdq    
10003183:	f7 f9                	idiv   ecx
10003185:	89 d0                	mov    eax,edx
10003187:	83 c0 30             	add    eax,0x30
1000318a:	88 85 57 ff ff ff    	mov    BYTE PTR [ebp-0xa9],al
10003190:	66 8b 85 4a ff ff ff 	mov    ax,WORD PTR [ebp-0xb6]
10003197:	0f b7 c8             	movzx  ecx,ax
1000319a:	b8 67 66 66 66       	mov    eax,0x66666667
1000319f:	f7 e9                	imul   ecx
100031a1:	c1 fa 02             	sar    edx,0x2
100031a4:	89 c8                	mov    eax,ecx
100031a6:	c1 f8 1f             	sar    eax,0x1f
100031a9:	89 d1                	mov    ecx,edx
100031ab:	29 c1                	sub    ecx,eax
100031ad:	b8 67 66 66 66       	mov    eax,0x66666667
100031b2:	f7 e9                	imul   ecx
100031b4:	c1 fa 02             	sar    edx,0x2
100031b7:	89 c8                	mov    eax,ecx
100031b9:	c1 f8 1f             	sar    eax,0x1f
100031bc:	29 c2                	sub    edx,eax
100031be:	89 d0                	mov    eax,edx
100031c0:	c1 e0 02             	shl    eax,0x2
100031c3:	01 d0                	add    eax,edx
100031c5:	01 c0                	add    eax,eax
100031c7:	29 c1                	sub    ecx,eax
100031c9:	89 ca                	mov    edx,ecx
100031cb:	88 d0                	mov    al,dl
100031cd:	83 c0 30             	add    eax,0x30
100031d0:	88 85 58 ff ff ff    	mov    BYTE PTR [ebp-0xa8],al
100031d6:	66 8b 85 4a ff ff ff 	mov    ax,WORD PTR [ebp-0xb6]
100031dd:	0f b7 c0             	movzx  eax,ax
100031e0:	b9 0a 00 00 00       	mov    ecx,0xa
100031e5:	99                   	cdq    
100031e6:	f7 f9                	idiv   ecx
100031e8:	89 d0                	mov    eax,edx
100031ea:	83 c0 30             	add    eax,0x30
100031ed:	88 85 59 ff ff ff    	mov    BYTE PTR [ebp-0xa7],al
100031f3:	8a 85 4c ff ff ff    	mov    al,BYTE PTR [ebp-0xb4]
100031f9:	0f b6 d0             	movzx  edx,al
100031fc:	89 d0                	mov    eax,edx
100031fe:	c1 e0 02             	shl    eax,0x2
10003201:	01 d0                	add    eax,edx
10003203:	c1 e0 03             	shl    eax,0x3
10003206:	01 d0                	add    eax,edx
10003208:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
1000320f:	01 d0                	add    eax,edx
10003211:	66 c1 e8 08          	shr    ax,0x8
10003215:	c0 e8 03             	shr    al,0x3
10003218:	83 c0 30             	add    eax,0x30
1000321b:	88 85 5b ff ff ff    	mov    BYTE PTR [ebp-0xa5],al
10003221:	8a 8d 4c ff ff ff    	mov    cl,BYTE PTR [ebp-0xb4]
10003227:	0f b6 d1             	movzx  edx,cl
1000322a:	89 d0                	mov    eax,edx
1000322c:	c1 e0 02             	shl    eax,0x2
1000322f:	01 d0                	add    eax,edx
10003231:	c1 e0 03             	shl    eax,0x3
10003234:	01 d0                	add    eax,edx
10003236:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
1000323d:	01 d0                	add    eax,edx
1000323f:	66 c1 e8 08          	shr    ax,0x8
10003243:	88 c2                	mov    dl,al
10003245:	c0 ea 03             	shr    dl,0x3
10003248:	88 d0                	mov    al,dl
1000324a:	c1 e0 02             	shl    eax,0x2
1000324d:	01 d0                	add    eax,edx
1000324f:	d1 e0                	shl    eax,1
10003251:	29 c1                	sub    ecx,eax
10003253:	88 ca                	mov    dl,cl
10003255:	8d 42 30             	lea    eax,[edx+0x30]
10003258:	88 85 5c ff ff ff    	mov    BYTE PTR [ebp-0xa4],al
1000325e:	8a 85 4d ff ff ff    	mov    al,BYTE PTR [ebp-0xb3]
10003264:	0f b6 d0             	movzx  edx,al
10003267:	89 d0                	mov    eax,edx
10003269:	c1 e0 02             	shl    eax,0x2
1000326c:	01 d0                	add    eax,edx
1000326e:	c1 e0 03             	shl    eax,0x3
10003271:	01 d0                	add    eax,edx
10003273:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
1000327a:	01 d0                	add    eax,edx
1000327c:	66 c1 e8 08          	shr    ax,0x8
10003280:	c0 e8 03             	shr    al,0x3
10003283:	83 c0 30             	add    eax,0x30
10003286:	88 85 5e ff ff ff    	mov    BYTE PTR [ebp-0xa2],al
1000328c:	8a 8d 4d ff ff ff    	mov    cl,BYTE PTR [ebp-0xb3]
10003292:	0f b6 d1             	movzx  edx,cl
10003295:	89 d0                	mov    eax,edx
10003297:	c1 e0 02             	shl    eax,0x2
1000329a:	01 d0                	add    eax,edx
1000329c:	c1 e0 03             	shl    eax,0x3
1000329f:	01 d0                	add    eax,edx
100032a1:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
100032a8:	01 d0                	add    eax,edx
100032aa:	66 c1 e8 08          	shr    ax,0x8
100032ae:	88 c2                	mov    dl,al
100032b0:	c0 ea 03             	shr    dl,0x3
100032b3:	88 d0                	mov    al,dl
100032b5:	c1 e0 02             	shl    eax,0x2
100032b8:	01 d0                	add    eax,edx
100032ba:	d1 e0                	shl    eax,1
100032bc:	29 c1                	sub    ecx,eax
100032be:	88 ca                	mov    dl,cl
100032c0:	8d 42 30             	lea    eax,[edx+0x30]
100032c3:	88 85 5f ff ff ff    	mov    BYTE PTR [ebp-0xa1],al
100032c9:	8a 85 4e ff ff ff    	mov    al,BYTE PTR [ebp-0xb2]
100032cf:	0f b6 d0             	movzx  edx,al
100032d2:	89 d0                	mov    eax,edx
100032d4:	c1 e0 02             	shl    eax,0x2
100032d7:	01 d0                	add    eax,edx
100032d9:	c1 e0 03             	shl    eax,0x3
100032dc:	01 d0                	add    eax,edx
100032de:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
100032e5:	01 d0                	add    eax,edx
100032e7:	66 c1 e8 08          	shr    ax,0x8
100032eb:	c0 e8 03             	shr    al,0x3
100032ee:	83 c0 30             	add    eax,0x30
100032f1:	88 85 61 ff ff ff    	mov    BYTE PTR [ebp-0x9f],al
100032f7:	8a 8d 4e ff ff ff    	mov    cl,BYTE PTR [ebp-0xb2]
100032fd:	0f b6 d1             	movzx  edx,cl
10003300:	89 d0                	mov    eax,edx
10003302:	c1 e0 02             	shl    eax,0x2
10003305:	01 d0                	add    eax,edx
10003307:	c1 e0 03             	shl    eax,0x3
1000330a:	01 d0                	add    eax,edx
1000330c:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10003313:	01 d0                	add    eax,edx
10003315:	66 c1 e8 08          	shr    ax,0x8
10003319:	88 c2                	mov    dl,al
1000331b:	c0 ea 03             	shr    dl,0x3
1000331e:	88 d0                	mov    al,dl
10003320:	c1 e0 02             	shl    eax,0x2
10003323:	01 d0                	add    eax,edx
10003325:	d1 e0                	shl    eax,1
10003327:	29 c1                	sub    ecx,eax
10003329:	88 ca                	mov    dl,cl
1000332b:	8d 42 30             	lea    eax,[edx+0x30]
1000332e:	88 85 62 ff ff ff    	mov    BYTE PTR [ebp-0x9e],al
10003334:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
1000333b:	a1 00 00 00 00       	mov    eax,ds:0x0	1000333c: R_386_32	term
10003340:	83 ec 04             	sub    esp,0x4
10003343:	6a 05                	push   0x5
10003345:	6a 18                	push   0x18
10003347:	50                   	push   eax
10003348:	e8 fc ff ff ff       	call   10003349 <firstRun(bool)+0x9b7>	10003349: R_386_PC32	VgaText::setCursor(int, int)
1000334d:	83 c4 10             	add    esp,0x10
10003350:	a1 00 00 00 00       	mov    eax,ds:0x0	10003351: R_386_32	term
10003355:	83 ec 08             	sub    esp,0x8
10003358:	68 2c 57 00 10       	push   0x1000572c	10003359: R_386_32	.text
1000335d:	50                   	push   eax
1000335e:	e8 fc ff ff ff       	call   1000335f <firstRun(bool)+0x9cd>	1000335f: R_386_PC32	VgaText::puts(char const*)
10003363:	83 c4 10             	add    esp,0x10
10003366:	a1 00 00 00 00       	mov    eax,ds:0x0	10003367: R_386_32	term
1000336b:	83 ec 04             	sub    esp,0x4
1000336e:	6a 06                	push   0x6
10003370:	6a 18                	push   0x18
10003372:	50                   	push   eax
10003373:	e8 fc ff ff ff       	call   10003374 <firstRun(bool)+0x9e2>	10003374: R_386_PC32	VgaText::setCursor(int, int)
10003378:	83 c4 10             	add    esp,0x10
1000337b:	a1 00 00 00 00       	mov    eax,ds:0x0	1000337c: R_386_32	term
10003380:	83 ec 08             	sub    esp,0x8
10003383:	68 54 57 00 10       	push   0x10005754	10003384: R_386_32	.text
10003388:	50                   	push   eax
10003389:	e8 fc ff ff ff       	call   1000338a <firstRun(bool)+0x9f8>	1000338a: R_386_PC32	VgaText::puts(char const*)
1000338e:	83 c4 10             	add    esp,0x10
10003391:	a1 00 00 00 00       	mov    eax,ds:0x0	10003392: R_386_32	term
10003396:	83 ec 04             	sub    esp,0x4
10003399:	6a 09                	push   0x9
1000339b:	6a 1a                	push   0x1a
1000339d:	50                   	push   eax
1000339e:	e8 fc ff ff ff       	call   1000339f <firstRun(bool)+0xa0d>	1000339f: R_386_PC32	VgaText::setCursor(int, int)
100033a3:	83 c4 10             	add    esp,0x10
100033a6:	a1 00 00 00 00       	mov    eax,ds:0x0	100033a7: R_386_32	term
100033ab:	6a 0f                	push   0xf
100033ad:	6a 07                	push   0x7
100033af:	68 6a 57 00 10       	push   0x1000576a	100033b0: R_386_32	.text
100033b4:	50                   	push   eax
100033b5:	e8 fc ff ff ff       	call   100033b6 <firstRun(bool)+0xa24>	100033b6: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
100033ba:	83 c4 10             	add    esp,0x10
100033bd:	a1 00 00 00 00       	mov    eax,ds:0x0	100033be: R_386_32	term
100033c2:	83 ec 04             	sub    esp,0x4
100033c5:	6a 18                	push   0x18
100033c7:	6a 11                	push   0x11
100033c9:	50                   	push   eax
100033ca:	e8 fc ff ff ff       	call   100033cb <firstRun(bool)+0xa39>	100033cb: R_386_PC32	VgaText::setCursor(int, int)
100033cf:	83 c4 10             	add    esp,0x10
100033d2:	a1 00 00 00 00       	mov    eax,ds:0x0	100033d3: R_386_32	term
100033d7:	6a 0b                	push   0xb
100033d9:	6a 03                	push   0x3
100033db:	68 7e 57 00 10       	push   0x1000577e	100033dc: R_386_32	.text
100033e0:	50                   	push   eax
100033e1:	e8 fc ff ff ff       	call   100033e2 <firstRun(bool)+0xa50>	100033e2: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
100033e6:	83 c4 10             	add    esp,0x10
100033e9:	a1 00 00 00 00       	mov    eax,ds:0x0	100033ea: R_386_32	term
100033ee:	83 ec 04             	sub    esp,0x4
100033f1:	6a 08                	push   0x8
100033f3:	6a 1a                	push   0x1a
100033f5:	50                   	push   eax
100033f6:	e8 fc ff ff ff       	call   100033f7 <firstRun(bool)+0xa65>	100033f7: R_386_PC32	VgaText::setCursor(int, int)
100033fb:	83 c4 10             	add    esp,0x10
100033fe:	a1 00 00 00 00       	mov    eax,ds:0x0	100033ff: R_386_32	term
10003403:	83 ec 08             	sub    esp,0x8
10003406:	8d 95 50 ff ff ff    	lea    edx,[ebp-0xb0]
1000340c:	52                   	push   edx
1000340d:	50                   	push   eax
1000340e:	e8 fc ff ff ff       	call   1000340f <firstRun(bool)+0xa7d>	1000340f: R_386_PC32	VgaText::puts(char const*)
10003413:	83 c4 10             	add    esp,0x10
10003416:	a1 00 00 00 00       	mov    eax,ds:0x0	10003417: R_386_32	term
1000341b:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
1000341e:	83 c2 1a             	add    edx,0x1a
10003421:	83 ec 04             	sub    esp,0x4
10003424:	6a 08                	push   0x8
10003426:	52                   	push   edx
10003427:	50                   	push   eax
10003428:	e8 fc ff ff ff       	call   10003429 <firstRun(bool)+0xa97>	10003429: R_386_PC32	VgaText::setCursor(int, int)
1000342d:	83 c4 10             	add    esp,0x10
10003430:	a1 00 00 00 00       	mov    eax,ds:0x0	10003431: R_386_32	term
10003435:	8d 8d 50 ff ff ff    	lea    ecx,[ebp-0xb0]
1000343b:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
1000343e:	01 ca                	add    edx,ecx
10003440:	8a 12                	mov    dl,BYTE PTR [edx]
10003442:	0f be d2             	movsx  edx,dl
10003445:	6a 00                	push   0x0
10003447:	6a 0f                	push   0xf
10003449:	52                   	push   edx
1000344a:	50                   	push   eax
1000344b:	e8 fc ff ff ff       	call   1000344c <firstRun(bool)+0xaba>	1000344c: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
10003450:	83 c4 10             	add    esp,0x10
10003453:	8a 85 5b ff ff ff    	mov    al,BYTE PTR [ebp-0xa5]
10003459:	0f be c0             	movsx  eax,al
1000345c:	8d 50 d0             	lea    edx,[eax-0x30]
1000345f:	89 d0                	mov    eax,edx
10003461:	c1 e0 02             	shl    eax,0x2
10003464:	01 d0                	add    eax,edx
10003466:	01 c0                	add    eax,eax
10003468:	89 c2                	mov    edx,eax
1000346a:	8a 85 5c ff ff ff    	mov    al,BYTE PTR [ebp-0xa4]
10003470:	0f be c0             	movsx  eax,al
10003473:	83 e8 30             	sub    eax,0x30
10003476:	01 d0                	add    eax,edx
10003478:	89 45 c4             	mov    DWORD PTR [ebp-0x3c],eax
1000347b:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
1000347e:	b9 0c 00 00 00       	mov    ecx,0xc
10003483:	99                   	cdq    
10003484:	f7 f9                	idiv   ecx
10003486:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
10003489:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
1000348d:	75 07                	jne    10003496 <firstRun(bool)+0xb04>
1000348f:	c7 45 d8 0c 00 00 00 	mov    DWORD PTR [ebp-0x28],0xc
10003496:	8a 85 5e ff ff ff    	mov    al,BYTE PTR [ebp-0xa2]
1000349c:	0f be c0             	movsx  eax,al
1000349f:	8d 50 d0             	lea    edx,[eax-0x30]
100034a2:	89 d0                	mov    eax,edx
100034a4:	c1 e0 02             	shl    eax,0x2
100034a7:	01 d0                	add    eax,edx
100034a9:	01 c0                	add    eax,eax
100034ab:	89 c2                	mov    edx,eax
100034ad:	8a 85 5f ff ff ff    	mov    al,BYTE PTR [ebp-0xa1]
100034b3:	0f be c0             	movsx  eax,al
100034b6:	83 e8 30             	sub    eax,0x30
100034b9:	01 d0                	add    eax,edx
100034bb:	89 45 c0             	mov    DWORD PTR [ebp-0x40],eax
100034be:	83 ec 04             	sub    esp,0x4
100034c1:	6a 10                	push   0x10
100034c3:	6a 00                	push   0x0
100034c5:	8d 85 2a ff ff ff    	lea    eax,[ebp-0xd6]
100034cb:	50                   	push   eax
100034cc:	e8 fc ff ff ff       	call   100034cd <firstRun(bool)+0xb3b>	100034cd: R_386_PC32	memset
100034d1:	83 c4 10             	add    esp,0x10
100034d4:	c7 45 bc 00 00 00 00 	mov    DWORD PTR [ebp-0x44],0x0
100034db:	8b 45 bc             	mov    eax,DWORD PTR [ebp-0x44]
100034de:	8d 50 01             	lea    edx,[eax+0x1]
100034e1:	89 55 bc             	mov    DWORD PTR [ebp-0x44],edx
100034e4:	c6 84 05 2a ff ff ff 28 	mov    BYTE PTR [ebp+eax*1-0xd6],0x28
100034ec:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
100034ef:	b8 67 66 66 66       	mov    eax,0x66666667
100034f4:	f7 e9                	imul   ecx
100034f6:	c1 fa 02             	sar    edx,0x2
100034f9:	89 c8                	mov    eax,ecx
100034fb:	c1 f8 1f             	sar    eax,0x1f
100034fe:	29 c2                	sub    edx,eax
10003500:	89 d0                	mov    eax,edx
10003502:	8d 48 30             	lea    ecx,[eax+0x30]
10003505:	8b 45 bc             	mov    eax,DWORD PTR [ebp-0x44]
10003508:	8d 50 01             	lea    edx,[eax+0x1]
1000350b:	89 55 bc             	mov    DWORD PTR [ebp-0x44],edx
1000350e:	88 ca                	mov    dl,cl
10003510:	88 94 05 2a ff ff ff 	mov    BYTE PTR [ebp+eax*1-0xd6],dl
10003517:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
1000351a:	b8 67 66 66 66       	mov    eax,0x66666667
1000351f:	f7 e9                	imul   ecx
10003521:	c1 fa 02             	sar    edx,0x2
10003524:	89 c8                	mov    eax,ecx
10003526:	c1 f8 1f             	sar    eax,0x1f
10003529:	29 c2                	sub    edx,eax
1000352b:	89 d0                	mov    eax,edx
1000352d:	c1 e0 02             	shl    eax,0x2
10003530:	01 d0                	add    eax,edx
10003532:	01 c0                	add    eax,eax
10003534:	29 c1                	sub    ecx,eax
10003536:	89 ca                	mov    edx,ecx
10003538:	88 d0                	mov    al,dl
1000353a:	8d 48 30             	lea    ecx,[eax+0x30]
1000353d:	8b 45 bc             	mov    eax,DWORD PTR [ebp-0x44]
10003540:	8d 50 01             	lea    edx,[eax+0x1]
10003543:	89 55 bc             	mov    DWORD PTR [ebp-0x44],edx
10003546:	88 ca                	mov    dl,cl
10003548:	88 94 05 2a ff ff ff 	mov    BYTE PTR [ebp+eax*1-0xd6],dl
1000354f:	8b 45 bc             	mov    eax,DWORD PTR [ebp-0x44]
10003552:	8d 50 01             	lea    edx,[eax+0x1]
10003555:	89 55 bc             	mov    DWORD PTR [ebp-0x44],edx
10003558:	c6 84 05 2a ff ff ff 3a 	mov    BYTE PTR [ebp+eax*1-0xd6],0x3a
10003560:	8b 4d c0             	mov    ecx,DWORD PTR [ebp-0x40]
10003563:	b8 67 66 66 66       	mov    eax,0x66666667
10003568:	f7 e9                	imul   ecx
1000356a:	c1 fa 02             	sar    edx,0x2
1000356d:	89 c8                	mov    eax,ecx
1000356f:	c1 f8 1f             	sar    eax,0x1f
10003572:	29 c2                	sub    edx,eax
10003574:	89 d0                	mov    eax,edx
10003576:	8d 48 30             	lea    ecx,[eax+0x30]
10003579:	8b 45 bc             	mov    eax,DWORD PTR [ebp-0x44]
1000357c:	8d 50 01             	lea    edx,[eax+0x1]
1000357f:	89 55 bc             	mov    DWORD PTR [ebp-0x44],edx
10003582:	88 ca                	mov    dl,cl
10003584:	88 94 05 2a ff ff ff 	mov    BYTE PTR [ebp+eax*1-0xd6],dl
1000358b:	8b 4d c0             	mov    ecx,DWORD PTR [ebp-0x40]
1000358e:	b8 67 66 66 66       	mov    eax,0x66666667
10003593:	f7 e9                	imul   ecx
10003595:	c1 fa 02             	sar    edx,0x2
10003598:	89 c8                	mov    eax,ecx
1000359a:	c1 f8 1f             	sar    eax,0x1f
1000359d:	29 c2                	sub    edx,eax
1000359f:	89 d0                	mov    eax,edx
100035a1:	c1 e0 02             	shl    eax,0x2
100035a4:	01 d0                	add    eax,edx
100035a6:	01 c0                	add    eax,eax
100035a8:	29 c1                	sub    ecx,eax
100035aa:	89 ca                	mov    edx,ecx
100035ac:	88 d0                	mov    al,dl
100035ae:	8d 48 30             	lea    ecx,[eax+0x30]
100035b1:	8b 45 bc             	mov    eax,DWORD PTR [ebp-0x44]
100035b4:	8d 50 01             	lea    edx,[eax+0x1]
100035b7:	89 55 bc             	mov    DWORD PTR [ebp-0x44],edx
100035ba:	88 ca                	mov    dl,cl
100035bc:	88 94 05 2a ff ff ff 	mov    BYTE PTR [ebp+eax*1-0xd6],dl
100035c3:	8b 45 bc             	mov    eax,DWORD PTR [ebp-0x44]
100035c6:	8d 50 01             	lea    edx,[eax+0x1]
100035c9:	89 55 bc             	mov    DWORD PTR [ebp-0x44],edx
100035cc:	c6 84 05 2a ff ff ff 20 	mov    BYTE PTR [ebp+eax*1-0xd6],0x20
100035d4:	83 7d c4 0b          	cmp    DWORD PTR [ebp-0x3c],0xb
100035d8:	7e 04                	jle    100035de <firstRun(bool)+0xc4c>
100035da:	b2 50                	mov    dl,0x50
100035dc:	eb 02                	jmp    100035e0 <firstRun(bool)+0xc4e>
100035de:	b2 41                	mov    dl,0x41
100035e0:	8b 45 bc             	mov    eax,DWORD PTR [ebp-0x44]
100035e3:	8d 48 01             	lea    ecx,[eax+0x1]
100035e6:	89 4d bc             	mov    DWORD PTR [ebp-0x44],ecx
100035e9:	88 94 05 2a ff ff ff 	mov    BYTE PTR [ebp+eax*1-0xd6],dl
100035f0:	8b 45 bc             	mov    eax,DWORD PTR [ebp-0x44]
100035f3:	8d 50 01             	lea    edx,[eax+0x1]
100035f6:	89 55 bc             	mov    DWORD PTR [ebp-0x44],edx
100035f9:	c6 84 05 2a ff ff ff 4d 	mov    BYTE PTR [ebp+eax*1-0xd6],0x4d
10003601:	8b 45 bc             	mov    eax,DWORD PTR [ebp-0x44]
10003604:	8d 50 01             	lea    edx,[eax+0x1]
10003607:	89 55 bc             	mov    DWORD PTR [ebp-0x44],edx
1000360a:	c6 84 05 2a ff ff ff 29 	mov    BYTE PTR [ebp+eax*1-0xd6],0x29
10003612:	8b 1d 00 00 00 00    	mov    ebx,DWORD PTR ds:0x0	10003614: R_386_32	term
10003618:	83 ec 0c             	sub    esp,0xc
1000361b:	8d 85 50 ff ff ff    	lea    eax,[ebp-0xb0]
10003621:	50                   	push   eax
10003622:	e8 fc ff ff ff       	call   10003623 <firstRun(bool)+0xc91>	10003623: R_386_PC32	strlen
10003627:	83 c4 10             	add    esp,0x10
1000362a:	83 c0 1e             	add    eax,0x1e
1000362d:	83 ec 04             	sub    esp,0x4
10003630:	6a 08                	push   0x8
10003632:	50                   	push   eax
10003633:	53                   	push   ebx
10003634:	e8 fc ff ff ff       	call   10003635 <firstRun(bool)+0xca3>	10003635: R_386_PC32	VgaText::setCursor(int, int)
10003639:	83 c4 10             	add    esp,0x10
1000363c:	a1 00 00 00 00       	mov    eax,ds:0x0	1000363d: R_386_32	term
10003641:	83 ec 08             	sub    esp,0x8
10003644:	8d 95 2a ff ff ff    	lea    edx,[ebp-0xd6]
1000364a:	52                   	push   edx
1000364b:	50                   	push   eax
1000364c:	e8 fc ff ff ff       	call   1000364d <firstRun(bool)+0xcbb>	1000364d: R_386_PC32	VgaText::puts(char const*)
10003651:	83 c4 10             	add    esp,0x10
10003654:	a1 00 00 00 00       	mov    eax,ds:0x0	10003655: R_386_32	term
10003659:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
1000365c:	83 c2 1a             	add    edx,0x1a
1000365f:	83 ec 04             	sub    esp,0x4
10003662:	6a 08                	push   0x8
10003664:	52                   	push   edx
10003665:	50                   	push   eax
10003666:	e8 fc ff ff ff       	call   10003667 <firstRun(bool)+0xcd5>	10003667: R_386_PC32	VgaText::setCursor(int, int)
1000366b:	83 c4 10             	add    esp,0x10
1000366e:	a0 00 00 00 00       	mov    al,ds:0x0	1000366f: R_386_32	installKey
10003673:	84 c0                	test   al,al
10003675:	0f 94 c0             	sete   al
10003678:	84 c0                	test   al,al
1000367a:	74 02                	je     1000367e <firstRun(bool)+0xcec>
1000367c:	eb f0                	jmp    1000366e <firstRun(bool)+0xcdc>
1000367e:	a1 00 00 00 00       	mov    eax,ds:0x0	1000367f: R_386_32	term
10003683:	05 82 00 00 00       	add    eax,0x82
10003688:	83 ec 04             	sub    esp,0x4
1000368b:	6a 10                	push   0x10
1000368d:	6a 00                	push   0x0
1000368f:	50                   	push   eax
10003690:	e8 fc ff ff ff       	call   10003691 <firstRun(bool)+0xcff>	10003691: R_386_PC32	memset
10003695:	83 c4 10             	add    esp,0x10
10003698:	a1 00 00 00 00       	mov    eax,ds:0x0	10003699: R_386_32	term
1000369d:	05 02 01 00 00       	add    eax,0x102
100036a2:	83 ec 04             	sub    esp,0x4
100036a5:	6a 10                	push   0x10
100036a7:	6a 00                	push   0x0
100036a9:	50                   	push   eax
100036aa:	e8 fc ff ff ff       	call   100036ab <firstRun(bool)+0xd19>	100036ab: R_386_PC32	memset
100036af:	83 c4 10             	add    esp,0x10
100036b2:	a0 00 00 00 00       	mov    al,ds:0x0	100036b3: R_386_32	installKey
100036b7:	3c 03                	cmp    al,0x3
100036b9:	74 09                	je     100036c4 <firstRun(bool)+0xd32>
100036bb:	a0 00 00 00 00       	mov    al,ds:0x0	100036bc: R_386_32	installKey
100036c0:	3c 08                	cmp    al,0x8
100036c2:	75 04                	jne    100036c8 <firstRun(bool)+0xd36>
100036c4:	b0 01                	mov    al,0x1
100036c6:	eb 02                	jmp    100036ca <firstRun(bool)+0xd38>
100036c8:	b0 00                	mov    al,0x0
100036ca:	84 c0                	test   al,al
100036cc:	74 58                	je     10003726 <firstRun(bool)+0xd94>
100036ce:	ff 4d e4             	dec    DWORD PTR [ebp-0x1c]
100036d1:	83 7d e4 ff          	cmp    DWORD PTR [ebp-0x1c],0xffffffff
100036d5:	75 16                	jne    100036ed <firstRun(bool)+0xd5b>
100036d7:	83 ec 0c             	sub    esp,0xc
100036da:	8d 85 50 ff ff ff    	lea    eax,[ebp-0xb0]
100036e0:	50                   	push   eax
100036e1:	e8 fc ff ff ff       	call   100036e2 <firstRun(bool)+0xd50>	100036e2: R_386_PC32	strlen
100036e6:	83 c4 10             	add    esp,0x10
100036e9:	48                   	dec    eax
100036ea:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
100036ed:	8d 95 50 ff ff ff    	lea    edx,[ebp-0xb0]
100036f3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
100036f6:	01 d0                	add    eax,edx
100036f8:	8a 00                	mov    al,BYTE PTR [eax]
100036fa:	3c 20                	cmp    al,0x20
100036fc:	74 d0                	je     100036ce <firstRun(bool)+0xd3c>
100036fe:	8d 95 50 ff ff ff    	lea    edx,[ebp-0xb0]
10003704:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10003707:	01 d0                	add    eax,edx
10003709:	8a 00                	mov    al,BYTE PTR [eax]
1000370b:	3c 2f                	cmp    al,0x2f
1000370d:	74 bf                	je     100036ce <firstRun(bool)+0xd3c>
1000370f:	8d 95 50 ff ff ff    	lea    edx,[ebp-0xb0]
10003715:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10003718:	01 d0                	add    eax,edx
1000371a:	8a 00                	mov    al,BYTE PTR [eax]
1000371c:	3c 3a                	cmp    al,0x3a
1000371e:	0f 85 5e 04 00 00    	jne    10003b82 <firstRun(bool)+0x11f0>
10003724:	eb a8                	jmp    100036ce <firstRun(bool)+0xd3c>
10003726:	a0 00 00 00 00       	mov    al,ds:0x0	10003727: R_386_32	installKey
1000372b:	3c 2f                	cmp    al,0x2f
1000372d:	7e 09                	jle    10003738 <firstRun(bool)+0xda6>
1000372f:	a0 00 00 00 00       	mov    al,ds:0x0	10003730: R_386_32	installKey
10003734:	3c 39                	cmp    al,0x39
10003736:	7e 12                	jle    1000374a <firstRun(bool)+0xdb8>
10003738:	a0 00 00 00 00       	mov    al,ds:0x0	10003739: R_386_32	installKey
1000373d:	3c 20                	cmp    al,0x20
1000373f:	74 09                	je     1000374a <firstRun(bool)+0xdb8>
10003741:	a0 00 00 00 00       	mov    al,ds:0x0	10003742: R_386_32	installKey
10003746:	3c 04                	cmp    al,0x4
10003748:	75 04                	jne    1000374e <firstRun(bool)+0xdbc>
1000374a:	b0 01                	mov    al,0x1
1000374c:	eb 02                	jmp    10003750 <firstRun(bool)+0xdbe>
1000374e:	b0 00                	mov    al,0x0
10003750:	84 c0                	test   al,al
10003752:	0f 84 cf 01 00 00    	je     10003927 <firstRun(bool)+0xf95>
10003758:	a0 00 00 00 00       	mov    al,ds:0x0	10003759: R_386_32	installKey
1000375d:	3c 2f                	cmp    al,0x2f
1000375f:	7e 0d                	jle    1000376e <firstRun(bool)+0xddc>
10003761:	a0 00 00 00 00       	mov    al,ds:0x0	10003762: R_386_32	installKey
10003766:	3c 39                	cmp    al,0x39
10003768:	7f 04                	jg     1000376e <firstRun(bool)+0xddc>
1000376a:	b0 01                	mov    al,0x1
1000376c:	eb 02                	jmp    10003770 <firstRun(bool)+0xdde>
1000376e:	b0 00                	mov    al,0x0
10003770:	84 c0                	test   al,al
10003772:	0f 84 51 01 00 00    	je     100038c9 <firstRun(bool)+0xf37>
10003778:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
1000377c:	75 0d                	jne    1000378b <firstRun(bool)+0xdf9>
1000377e:	a0 00 00 00 00       	mov    al,ds:0x0	1000377f: R_386_32	installKey
10003783:	3c 33                	cmp    al,0x33
10003785:	7e 04                	jle    1000378b <firstRun(bool)+0xdf9>
10003787:	b0 01                	mov    al,0x1
10003789:	eb 02                	jmp    1000378d <firstRun(bool)+0xdfb>
1000378b:	b0 00                	mov    al,0x0
1000378d:	84 c0                	test   al,al
1000378f:	74 28                	je     100037b9 <firstRun(bool)+0xe27>
10003791:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10003794:	8d 50 01             	lea    edx,[eax+0x1]
10003797:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
1000379a:	c6 84 05 50 ff ff ff 30 	mov    BYTE PTR [ebp+eax*1-0xb0],0x30
100037a2:	a0 00 00 00 00       	mov    al,ds:0x0	100037a3: R_386_32	installKey
100037a7:	8d 8d 50 ff ff ff    	lea    ecx,[ebp-0xb0]
100037ad:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
100037b0:	01 ca                	add    edx,ecx
100037b2:	88 02                	mov    BYTE PTR [edx],al
100037b4:	e9 10 01 00 00       	jmp    100038c9 <firstRun(bool)+0xf37>
100037b9:	83 7d e4 03          	cmp    DWORD PTR [ebp-0x1c],0x3
100037bd:	75 0d                	jne    100037cc <firstRun(bool)+0xe3a>
100037bf:	a0 00 00 00 00       	mov    al,ds:0x0	100037c0: R_386_32	installKey
100037c4:	3c 31                	cmp    al,0x31
100037c6:	7e 04                	jle    100037cc <firstRun(bool)+0xe3a>
100037c8:	b0 01                	mov    al,0x1
100037ca:	eb 02                	jmp    100037ce <firstRun(bool)+0xe3c>
100037cc:	b0 00                	mov    al,0x0
100037ce:	84 c0                	test   al,al
100037d0:	74 28                	je     100037fa <firstRun(bool)+0xe68>
100037d2:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
100037d5:	8d 50 01             	lea    edx,[eax+0x1]
100037d8:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
100037db:	c6 84 05 50 ff ff ff 30 	mov    BYTE PTR [ebp+eax*1-0xb0],0x30
100037e3:	a0 00 00 00 00       	mov    al,ds:0x0	100037e4: R_386_32	installKey
100037e8:	8d 8d 50 ff ff ff    	lea    ecx,[ebp-0xb0]
100037ee:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
100037f1:	01 ca                	add    edx,ecx
100037f3:	88 02                	mov    BYTE PTR [edx],al
100037f5:	e9 cf 00 00 00       	jmp    100038c9 <firstRun(bool)+0xf37>
100037fa:	83 7d e4 0b          	cmp    DWORD PTR [ebp-0x1c],0xb
100037fe:	75 0d                	jne    1000380d <firstRun(bool)+0xe7b>
10003800:	a0 00 00 00 00       	mov    al,ds:0x0	10003801: R_386_32	installKey
10003805:	3c 32                	cmp    al,0x32
10003807:	7e 04                	jle    1000380d <firstRun(bool)+0xe7b>
10003809:	b0 01                	mov    al,0x1
1000380b:	eb 02                	jmp    1000380f <firstRun(bool)+0xe7d>
1000380d:	b0 00                	mov    al,0x0
1000380f:	84 c0                	test   al,al
10003811:	74 28                	je     1000383b <firstRun(bool)+0xea9>
10003813:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10003816:	8d 50 01             	lea    edx,[eax+0x1]
10003819:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
1000381c:	c6 84 05 50 ff ff ff 30 	mov    BYTE PTR [ebp+eax*1-0xb0],0x30
10003824:	a0 00 00 00 00       	mov    al,ds:0x0	10003825: R_386_32	installKey
10003829:	8d 8d 50 ff ff ff    	lea    ecx,[ebp-0xb0]
1000382f:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10003832:	01 ca                	add    edx,ecx
10003834:	88 02                	mov    BYTE PTR [edx],al
10003836:	e9 8e 00 00 00       	jmp    100038c9 <firstRun(bool)+0xf37>
1000383b:	83 7d e4 0e          	cmp    DWORD PTR [ebp-0x1c],0xe
1000383f:	75 0d                	jne    1000384e <firstRun(bool)+0xebc>
10003841:	a0 00 00 00 00       	mov    al,ds:0x0	10003842: R_386_32	installKey
10003846:	3c 35                	cmp    al,0x35
10003848:	7e 04                	jle    1000384e <firstRun(bool)+0xebc>
1000384a:	b0 01                	mov    al,0x1
1000384c:	eb 02                	jmp    10003850 <firstRun(bool)+0xebe>
1000384e:	b0 00                	mov    al,0x0
10003850:	84 c0                	test   al,al
10003852:	74 25                	je     10003879 <firstRun(bool)+0xee7>
10003854:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10003857:	8d 50 01             	lea    edx,[eax+0x1]
1000385a:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
1000385d:	c6 84 05 50 ff ff ff 30 	mov    BYTE PTR [ebp+eax*1-0xb0],0x30
10003865:	a0 00 00 00 00       	mov    al,ds:0x0	10003866: R_386_32	installKey
1000386a:	8d 8d 50 ff ff ff    	lea    ecx,[ebp-0xb0]
10003870:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10003873:	01 ca                	add    edx,ecx
10003875:	88 02                	mov    BYTE PTR [edx],al
10003877:	eb 50                	jmp    100038c9 <firstRun(bool)+0xf37>
10003879:	83 7d e4 11          	cmp    DWORD PTR [ebp-0x1c],0x11
1000387d:	75 0d                	jne    1000388c <firstRun(bool)+0xefa>
1000387f:	a0 00 00 00 00       	mov    al,ds:0x0	10003880: R_386_32	installKey
10003884:	3c 35                	cmp    al,0x35
10003886:	7e 04                	jle    1000388c <firstRun(bool)+0xefa>
10003888:	b0 01                	mov    al,0x1
1000388a:	eb 02                	jmp    1000388e <firstRun(bool)+0xefc>
1000388c:	b0 00                	mov    al,0x0
1000388e:	84 c0                	test   al,al
10003890:	74 25                	je     100038b7 <firstRun(bool)+0xf25>
10003892:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10003895:	8d 50 01             	lea    edx,[eax+0x1]
10003898:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
1000389b:	c6 84 05 50 ff ff ff 30 	mov    BYTE PTR [ebp+eax*1-0xb0],0x30
100038a3:	a0 00 00 00 00       	mov    al,ds:0x0	100038a4: R_386_32	installKey
100038a8:	8d 8d 50 ff ff ff    	lea    ecx,[ebp-0xb0]
100038ae:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
100038b1:	01 ca                	add    edx,ecx
100038b3:	88 02                	mov    BYTE PTR [edx],al
100038b5:	eb 12                	jmp    100038c9 <firstRun(bool)+0xf37>
100038b7:	a0 00 00 00 00       	mov    al,ds:0x0	100038b8: R_386_32	installKey
100038bc:	8d 8d 50 ff ff ff    	lea    ecx,[ebp-0xb0]
100038c2:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
100038c5:	01 ca                	add    edx,ecx
100038c7:	88 02                	mov    BYTE PTR [edx],al
100038c9:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
100038cc:	83 ec 0c             	sub    esp,0xc
100038cf:	8d 85 50 ff ff ff    	lea    eax,[ebp-0xb0]
100038d5:	50                   	push   eax
100038d6:	e8 fc ff ff ff       	call   100038d7 <firstRun(bool)+0xf45>	100038d7: R_386_PC32	strlen
100038db:	83 c4 10             	add    esp,0x10
100038de:	89 c2                	mov    edx,eax
100038e0:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
100038e3:	39 c2                	cmp    edx,eax
100038e5:	77 07                	ja     100038ee <firstRun(bool)+0xf5c>
100038e7:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
100038ee:	8d 95 50 ff ff ff    	lea    edx,[ebp-0xb0]
100038f4:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
100038f7:	01 d0                	add    eax,edx
100038f9:	8a 00                	mov    al,BYTE PTR [eax]
100038fb:	3c 20                	cmp    al,0x20
100038fd:	74 ca                	je     100038c9 <firstRun(bool)+0xf37>
100038ff:	8d 95 50 ff ff ff    	lea    edx,[ebp-0xb0]
10003905:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10003908:	01 d0                	add    eax,edx
1000390a:	8a 00                	mov    al,BYTE PTR [eax]
1000390c:	3c 2f                	cmp    al,0x2f
1000390e:	74 b9                	je     100038c9 <firstRun(bool)+0xf37>
10003910:	8d 95 50 ff ff ff    	lea    edx,[ebp-0xb0]
10003916:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10003919:	01 d0                	add    eax,edx
1000391b:	8a 00                	mov    al,BYTE PTR [eax]
1000391d:	3c 3a                	cmp    al,0x3a
1000391f:	0f 85 5d 02 00 00    	jne    10003b82 <firstRun(bool)+0x11f0>
10003925:	eb a2                	jmp    100038c9 <firstRun(bool)+0xf37>
10003927:	a0 00 00 00 00       	mov    al,ds:0x0	10003928: R_386_32	installKey
1000392c:	3c 0a                	cmp    al,0xa
1000392e:	0f 94 c0             	sete   al
10003931:	84 c0                	test   al,al
10003933:	0f 84 37 02 00 00    	je     10003b70 <firstRun(bool)+0x11de>
10003939:	8a 85 50 ff ff ff    	mov    al,BYTE PTR [ebp-0xb0]
1000393f:	0f be c0             	movsx  eax,al
10003942:	8d 50 d0             	lea    edx,[eax-0x30]
10003945:	89 d0                	mov    eax,edx
10003947:	c1 e0 02             	shl    eax,0x2
1000394a:	01 d0                	add    eax,edx
1000394c:	01 c0                	add    eax,eax
1000394e:	89 c2                	mov    edx,eax
10003950:	8a 85 51 ff ff ff    	mov    al,BYTE PTR [ebp-0xaf]
10003956:	0f be c0             	movsx  eax,al
10003959:	83 e8 30             	sub    eax,0x30
1000395c:	01 d0                	add    eax,edx
1000395e:	89 45 b8             	mov    DWORD PTR [ebp-0x48],eax
10003961:	8a 85 53 ff ff ff    	mov    al,BYTE PTR [ebp-0xad]
10003967:	0f be c0             	movsx  eax,al
1000396a:	8d 50 d0             	lea    edx,[eax-0x30]
1000396d:	89 d0                	mov    eax,edx
1000396f:	c1 e0 02             	shl    eax,0x2
10003972:	01 d0                	add    eax,edx
10003974:	01 c0                	add    eax,eax
10003976:	89 c2                	mov    edx,eax
10003978:	8a 85 54 ff ff ff    	mov    al,BYTE PTR [ebp-0xac]
1000397e:	0f be c0             	movsx  eax,al
10003981:	83 e8 30             	sub    eax,0x30
10003984:	01 d0                	add    eax,edx
10003986:	89 45 b4             	mov    DWORD PTR [ebp-0x4c],eax
10003989:	8a 85 56 ff ff ff    	mov    al,BYTE PTR [ebp-0xaa]
1000398f:	0f be c0             	movsx  eax,al
10003992:	8d 50 d0             	lea    edx,[eax-0x30]
10003995:	89 d0                	mov    eax,edx
10003997:	c1 e0 02             	shl    eax,0x2
1000399a:	01 d0                	add    eax,edx
1000399c:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
100039a3:	01 d0                	add    eax,edx
100039a5:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
100039ac:	01 d0                	add    eax,edx
100039ae:	c1 e0 03             	shl    eax,0x3
100039b1:	89 c1                	mov    ecx,eax
100039b3:	8a 85 57 ff ff ff    	mov    al,BYTE PTR [ebp-0xa9]
100039b9:	0f be c0             	movsx  eax,al
100039bc:	8d 50 d0             	lea    edx,[eax-0x30]
100039bf:	89 d0                	mov    eax,edx
100039c1:	c1 e0 02             	shl    eax,0x2
100039c4:	01 d0                	add    eax,edx
100039c6:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
100039cd:	01 d0                	add    eax,edx
100039cf:	c1 e0 02             	shl    eax,0x2
100039d2:	01 c1                	add    ecx,eax
100039d4:	8a 85 58 ff ff ff    	mov    al,BYTE PTR [ebp-0xa8]
100039da:	0f be c0             	movsx  eax,al
100039dd:	8d 50 d0             	lea    edx,[eax-0x30]
100039e0:	89 d0                	mov    eax,edx
100039e2:	c1 e0 02             	shl    eax,0x2
100039e5:	01 d0                	add    eax,edx
100039e7:	01 c0                	add    eax,eax
100039e9:	8d 14 01             	lea    edx,[ecx+eax*1]
100039ec:	8a 85 59 ff ff ff    	mov    al,BYTE PTR [ebp-0xa7]
100039f2:	0f be c0             	movsx  eax,al
100039f5:	83 e8 30             	sub    eax,0x30
100039f8:	01 d0                	add    eax,edx
100039fa:	89 45 b0             	mov    DWORD PTR [ebp-0x50],eax
100039fd:	8a 85 5b ff ff ff    	mov    al,BYTE PTR [ebp-0xa5]
10003a03:	0f be c0             	movsx  eax,al
10003a06:	8d 50 d0             	lea    edx,[eax-0x30]
10003a09:	89 d0                	mov    eax,edx
10003a0b:	c1 e0 02             	shl    eax,0x2
10003a0e:	01 d0                	add    eax,edx
10003a10:	01 c0                	add    eax,eax
10003a12:	89 c2                	mov    edx,eax
10003a14:	8a 85 5c ff ff ff    	mov    al,BYTE PTR [ebp-0xa4]
10003a1a:	0f be c0             	movsx  eax,al
10003a1d:	83 e8 30             	sub    eax,0x30
10003a20:	01 d0                	add    eax,edx
10003a22:	89 45 ac             	mov    DWORD PTR [ebp-0x54],eax
10003a25:	8a 85 5e ff ff ff    	mov    al,BYTE PTR [ebp-0xa2]
10003a2b:	0f be c0             	movsx  eax,al
10003a2e:	8d 50 d0             	lea    edx,[eax-0x30]
10003a31:	89 d0                	mov    eax,edx
10003a33:	c1 e0 02             	shl    eax,0x2
10003a36:	01 d0                	add    eax,edx
10003a38:	01 c0                	add    eax,eax
10003a3a:	89 c2                	mov    edx,eax
10003a3c:	8a 85 5f ff ff ff    	mov    al,BYTE PTR [ebp-0xa1]
10003a42:	0f be c0             	movsx  eax,al
10003a45:	83 e8 30             	sub    eax,0x30
10003a48:	01 d0                	add    eax,edx
10003a4a:	89 45 a8             	mov    DWORD PTR [ebp-0x58],eax
10003a4d:	8a 85 61 ff ff ff    	mov    al,BYTE PTR [ebp-0x9f]
10003a53:	0f be c0             	movsx  eax,al
10003a56:	8d 50 d0             	lea    edx,[eax-0x30]
10003a59:	89 d0                	mov    eax,edx
10003a5b:	c1 e0 02             	shl    eax,0x2
10003a5e:	01 d0                	add    eax,edx
10003a60:	01 c0                	add    eax,eax
10003a62:	89 c2                	mov    edx,eax
10003a64:	8a 85 62 ff ff ff    	mov    al,BYTE PTR [ebp-0x9e]
10003a6a:	0f be c0             	movsx  eax,al
10003a6d:	83 e8 30             	sub    eax,0x30
10003a70:	01 d0                	add    eax,edx
10003a72:	89 45 a4             	mov    DWORD PTR [ebp-0x5c],eax
10003a75:	8b 45 b0             	mov    eax,DWORD PTR [ebp-0x50]
10003a78:	83 e0 03             	and    eax,0x3
10003a7b:	85 c0                	test   eax,eax
10003a7d:	75 1f                	jne    10003a9e <firstRun(bool)+0x110c>
10003a7f:	8b 45 b0             	mov    eax,DWORD PTR [ebp-0x50]
10003a82:	b9 19 00 00 00       	mov    ecx,0x19
10003a87:	99                   	cdq    
10003a88:	f7 f9                	idiv   ecx
10003a8a:	89 d0                	mov    eax,edx
10003a8c:	85 c0                	test   eax,eax
10003a8e:	75 0a                	jne    10003a9a <firstRun(bool)+0x1108>
10003a90:	8b 45 b0             	mov    eax,DWORD PTR [ebp-0x50]
10003a93:	83 e0 0f             	and    eax,0xf
10003a96:	85 c0                	test   eax,eax
10003a98:	75 04                	jne    10003a9e <firstRun(bool)+0x110c>
10003a9a:	b0 01                	mov    al,0x1
10003a9c:	eb 02                	jmp    10003aa0 <firstRun(bool)+0x110e>
10003a9e:	b0 00                	mov    al,0x0
10003aa0:	88 45 a3             	mov    BYTE PTR [ebp-0x5d],al
10003aa3:	83 7d b8 1f          	cmp    DWORD PTR [ebp-0x48],0x1f
10003aa7:	7e 0c                	jle    10003ab5 <firstRun(bool)+0x1123>
10003aa9:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
10003ab0:	e9 cd 00 00 00       	jmp    10003b82 <firstRun(bool)+0x11f0>
10003ab5:	83 7d b8 1e          	cmp    DWORD PTR [ebp-0x48],0x1e
10003ab9:	7e 2a                	jle    10003ae5 <firstRun(bool)+0x1153>
10003abb:	83 7d b4 02          	cmp    DWORD PTR [ebp-0x4c],0x2
10003abf:	74 18                	je     10003ad9 <firstRun(bool)+0x1147>
10003ac1:	83 7d b4 04          	cmp    DWORD PTR [ebp-0x4c],0x4
10003ac5:	74 12                	je     10003ad9 <firstRun(bool)+0x1147>
10003ac7:	83 7d b4 06          	cmp    DWORD PTR [ebp-0x4c],0x6
10003acb:	74 0c                	je     10003ad9 <firstRun(bool)+0x1147>
10003acd:	83 7d b4 09          	cmp    DWORD PTR [ebp-0x4c],0x9
10003ad1:	74 06                	je     10003ad9 <firstRun(bool)+0x1147>
10003ad3:	83 7d b4 0b          	cmp    DWORD PTR [ebp-0x4c],0xb
10003ad7:	75 0c                	jne    10003ae5 <firstRun(bool)+0x1153>
10003ad9:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
10003ae0:	e9 9d 00 00 00       	jmp    10003b82 <firstRun(bool)+0x11f0>
10003ae5:	83 7d b8 1d          	cmp    DWORD PTR [ebp-0x48],0x1d
10003ae9:	75 19                	jne    10003b04 <firstRun(bool)+0x1172>
10003aeb:	83 7d b4 02          	cmp    DWORD PTR [ebp-0x4c],0x2
10003aef:	75 13                	jne    10003b04 <firstRun(bool)+0x1172>
10003af1:	8a 45 a3             	mov    al,BYTE PTR [ebp-0x5d]
10003af4:	83 f0 01             	xor    eax,0x1
10003af7:	84 c0                	test   al,al
10003af9:	74 09                	je     10003b04 <firstRun(bool)+0x1172>
10003afb:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
10003b02:	eb 7e                	jmp    10003b82 <firstRun(bool)+0x11f0>
10003b04:	83 7d b8 00          	cmp    DWORD PTR [ebp-0x48],0x0
10003b08:	75 09                	jne    10003b13 <firstRun(bool)+0x1181>
10003b0a:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
10003b11:	eb 6f                	jmp    10003b82 <firstRun(bool)+0x11f0>
10003b13:	83 7d b4 0c          	cmp    DWORD PTR [ebp-0x4c],0xc
10003b17:	7f 06                	jg     10003b1f <firstRun(bool)+0x118d>
10003b19:	83 7d b4 00          	cmp    DWORD PTR [ebp-0x4c],0x0
10003b1d:	75 09                	jne    10003b28 <firstRun(bool)+0x1196>
10003b1f:	c7 45 e4 03 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x3
10003b26:	eb 5a                	jmp    10003b82 <firstRun(bool)+0x11f0>
10003b28:	81 7d b0 b7 0b 00 00 	cmp    DWORD PTR [ebp-0x50],0xbb7
10003b2f:	7f 09                	jg     10003b3a <firstRun(bool)+0x11a8>
10003b31:	81 7d b0 b1 07 00 00 	cmp    DWORD PTR [ebp-0x50],0x7b1
10003b38:	7f 09                	jg     10003b43 <firstRun(bool)+0x11b1>
10003b3a:	c7 45 e4 06 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x6
10003b41:	eb 3f                	jmp    10003b82 <firstRun(bool)+0x11f0>
10003b43:	83 7d ac 17          	cmp    DWORD PTR [ebp-0x54],0x17
10003b47:	7e 09                	jle    10003b52 <firstRun(bool)+0x11c0>
10003b49:	c7 45 e4 0b 00 00 00 	mov    DWORD PTR [ebp-0x1c],0xb
10003b50:	eb 30                	jmp    10003b82 <firstRun(bool)+0x11f0>
10003b52:	83 7d a8 3b          	cmp    DWORD PTR [ebp-0x58],0x3b
10003b56:	7e 09                	jle    10003b61 <firstRun(bool)+0x11cf>
10003b58:	c7 45 e4 0e 00 00 00 	mov    DWORD PTR [ebp-0x1c],0xe
10003b5f:	eb 21                	jmp    10003b82 <firstRun(bool)+0x11f0>
10003b61:	83 7d a4 3b          	cmp    DWORD PTR [ebp-0x5c],0x3b
10003b65:	7e 37                	jle    10003b9e <firstRun(bool)+0x120c>
10003b67:	c7 45 e4 11 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x11
10003b6e:	eb 12                	jmp    10003b82 <firstRun(bool)+0x11f0>
10003b70:	a0 00 00 00 00       	mov    al,ds:0x0	10003b71: R_386_32	installKey
10003b75:	3c 1b                	cmp    al,0x1b
10003b77:	0f 94 c0             	sete   al
10003b7a:	84 c0                	test   al,al
10003b7c:	0f 85 2f ef ff ff    	jne    10002ab1 <firstRun(bool)+0x11f>
10003b82:	83 ec 0c             	sub    esp,0xc
10003b85:	68 4c 04 00 00       	push   0x44c
10003b8a:	e8 fc ff ff ff       	call   10003b8b <firstRun(bool)+0x11f9>	10003b8b: R_386_PC32	milliTenthSleep(unsigned int)
10003b8f:	83 c4 10             	add    esp,0x10
10003b92:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10003b94: R_386_32	installKey
10003b99:	e9 4b f8 ff ff       	jmp    100033e9 <firstRun(bool)+0xa57>
10003b9e:	90                   	nop
10003b9f:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10003ba1: R_386_32	installKey
10003ba6:	83 ec 0c             	sub    esp,0xc
10003ba9:	68 a0 0f 00 00       	push   0xfa0
10003bae:	e8 fc ff ff ff       	call   10003baf <firstRun(bool)+0x121d>	10003baf: R_386_PC32	milliTenthSleep(unsigned int)
10003bb3:	83 c4 10             	add    esp,0x10
10003bb6:	eb 01                	jmp    10003bb9 <firstRun(bool)+0x1227>
10003bb8:	90                   	nop
10003bb9:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10003bbb: R_386_32	installKey
10003bc0:	e8 fc ff ff ff       	call   10003bc1 <firstRun(bool)+0x122f>	10003bc1: R_386_PC32	drawBootScreen()
10003bc5:	83 ec 0c             	sub    esp,0xc
10003bc8:	68 09 57 00 10       	push   0x10005709	10003bc9: R_386_32	.text
10003bcd:	6a 14                	push   0x14
10003bcf:	6a 3c                	push   0x3c
10003bd1:	6a 01                	push   0x1
10003bd3:	6a 12                	push   0x12
10003bd5:	e8 fc ff ff ff       	call   10003bd6 <firstRun(bool)+0x1244>	10003bd6: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
10003bda:	83 c4 20             	add    esp,0x20
10003bdd:	a1 00 00 00 00       	mov    eax,ds:0x0	10003bde: R_386_32	term
10003be2:	83 ec 04             	sub    esp,0x4
10003be5:	6a 04                	push   0x4
10003be7:	6a 14                	push   0x14
10003be9:	50                   	push   eax
10003bea:	e8 fc ff ff ff       	call   10003beb <firstRun(bool)+0x1259>	10003beb: R_386_PC32	VgaText::setCursor(int, int)
10003bef:	83 c4 10             	add    esp,0x10
10003bf2:	a1 00 00 00 00       	mov    eax,ds:0x0	10003bf3: R_386_32	term
10003bf7:	83 ec 08             	sub    esp,0x8
10003bfa:	68 94 57 00 10       	push   0x10005794	10003bfb: R_386_32	.text
10003bff:	50                   	push   eax
10003c00:	e8 fc ff ff ff       	call   10003c01 <firstRun(bool)+0x126f>	10003c01: R_386_PC32	VgaText::puts(char const*)
10003c05:	83 c4 10             	add    esp,0x10
10003c08:	a1 00 00 00 00       	mov    eax,ds:0x0	10003c09: R_386_32	term
10003c0d:	83 ec 04             	sub    esp,0x4
10003c10:	6a 18                	push   0x18
10003c12:	6a 11                	push   0x11
10003c14:	50                   	push   eax
10003c15:	e8 fc ff ff ff       	call   10003c16 <firstRun(bool)+0x1284>	10003c16: R_386_PC32	VgaText::setCursor(int, int)
10003c1a:	83 c4 10             	add    esp,0x10
10003c1d:	a1 00 00 00 00       	mov    eax,ds:0x0	10003c1e: R_386_32	term
10003c22:	6a 0b                	push   0xb
10003c24:	6a 03                	push   0x3
10003c26:	68 7e 57 00 10       	push   0x1000577e	10003c27: R_386_32	.text
10003c2b:	50                   	push   eax
10003c2c:	e8 fc ff ff ff       	call   10003c2d <firstRun(bool)+0x129b>	10003c2d: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10003c31:	83 c4 10             	add    esp,0x10
10003c34:	e8 fc ff ff ff       	call   10003c35 <firstRun(bool)+0x12a3>	10003c35: R_386_PC32	loadTimezoneStrings()
10003c39:	89 45 9c             	mov    DWORD PTR [ebp-0x64],eax
10003c3c:	b8 d2 00 00 00       	mov    eax,0xd2
10003c41:	99                   	cdq    
10003c42:	f7 7d 9c             	idiv   DWORD PTR [ebp-0x64]
10003c45:	89 45 98             	mov    DWORD PTR [ebp-0x68],eax
10003c48:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
10003c4f:	83 7d d4 0d          	cmp    DWORD PTR [ebp-0x2c],0xd
10003c53:	7f 32                	jg     10003c87 <firstRun(bool)+0x12f5>
10003c55:	a1 00 00 00 00       	mov    eax,ds:0x0	10003c56: R_386_32	term
10003c5a:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
10003c5d:	83 c2 07             	add    edx,0x7
10003c60:	83 ec 04             	sub    esp,0x4
10003c63:	52                   	push   edx
10003c64:	6a 4b                	push   0x4b
10003c66:	50                   	push   eax
10003c67:	e8 fc ff ff ff       	call   10003c68 <firstRun(bool)+0x12d6>	10003c68: R_386_PC32	VgaText::setCursor(int, int)
10003c6c:	83 c4 10             	add    esp,0x10
10003c6f:	a1 00 00 00 00       	mov    eax,ds:0x0	10003c70: R_386_32	term
10003c74:	83 ec 08             	sub    esp,0x8
10003c77:	6a 20                	push   0x20
10003c79:	50                   	push   eax
10003c7a:	e8 fc ff ff ff       	call   10003c7b <firstRun(bool)+0x12e9>	10003c7b: R_386_PC32	VgaText::putchar(char)
10003c7f:	83 c4 10             	add    esp,0x10
10003c82:	ff 45 d4             	inc    DWORD PTR [ebp-0x2c]
10003c85:	eb c8                	jmp    10003c4f <firstRun(bool)+0x12bd>
10003c87:	c7 45 d0 00 00 00 00 	mov    DWORD PTR [ebp-0x30],0x0
10003c8e:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
10003c91:	3b 45 98             	cmp    eax,DWORD PTR [ebp-0x68]
10003c94:	7d 48                	jge    10003cde <firstRun(bool)+0x134c>
10003c96:	8b 0d 00 00 00 00    	mov    ecx,DWORD PTR ds:0x0	10003c98: R_386_32	term
10003c9c:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
10003c9f:	8d 58 07             	lea    ebx,[eax+0x7]
10003ca2:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
10003ca5:	89 d0                	mov    eax,edx
10003ca7:	01 c0                	add    eax,eax
10003ca9:	01 d0                	add    eax,edx
10003cab:	01 c0                	add    eax,eax
10003cad:	01 d0                	add    eax,edx
10003caf:	01 c0                	add    eax,eax
10003cb1:	99                   	cdq    
10003cb2:	f7 7d 9c             	idiv   DWORD PTR [ebp-0x64]
10003cb5:	01 d8                	add    eax,ebx
10003cb7:	83 ec 04             	sub    esp,0x4
10003cba:	50                   	push   eax
10003cbb:	6a 4b                	push   0x4b
10003cbd:	51                   	push   ecx
10003cbe:	e8 fc ff ff ff       	call   10003cbf <firstRun(bool)+0x132d>	10003cbf: R_386_PC32	VgaText::setCursor(int, int)
10003cc3:	83 c4 10             	add    esp,0x10
10003cc6:	a1 00 00 00 00       	mov    eax,ds:0x0	10003cc7: R_386_32	term
10003ccb:	83 ec 08             	sub    esp,0x8
10003cce:	6a db                	push   0xffffffdb
10003cd0:	50                   	push   eax
10003cd1:	e8 fc ff ff ff       	call   10003cd2 <firstRun(bool)+0x1340>	10003cd2: R_386_PC32	VgaText::putchar(char)
10003cd6:	83 c4 10             	add    esp,0x10
10003cd9:	ff 45 d0             	inc    DWORD PTR [ebp-0x30]
10003cdc:	eb b0                	jmp    10003c8e <firstRun(bool)+0x12fc>
10003cde:	a1 00 00 00 00       	mov    eax,ds:0x0	10003cdf: R_386_32	term
10003ce3:	83 ec 04             	sub    esp,0x4
10003ce6:	6a 06                	push   0x6
10003ce8:	6a 4b                	push   0x4b
10003cea:	50                   	push   eax
10003ceb:	e8 fc ff ff ff       	call   10003cec <firstRun(bool)+0x135a>	10003cec: R_386_PC32	VgaText::setCursor(int, int)
10003cf0:	83 c4 10             	add    esp,0x10
10003cf3:	a1 00 00 00 00       	mov    eax,ds:0x0	10003cf4: R_386_32	term
10003cf8:	83 ec 08             	sub    esp,0x8
10003cfb:	6a 1e                	push   0x1e
10003cfd:	50                   	push   eax
10003cfe:	e8 fc ff ff ff       	call   10003cff <firstRun(bool)+0x136d>	10003cff: R_386_PC32	VgaText::putchar(char)
10003d03:	83 c4 10             	add    esp,0x10
10003d06:	a1 00 00 00 00       	mov    eax,ds:0x0	10003d07: R_386_32	term
10003d0b:	83 ec 04             	sub    esp,0x4
10003d0e:	6a 14                	push   0x14
10003d10:	6a 4b                	push   0x4b
10003d12:	50                   	push   eax
10003d13:	e8 fc ff ff ff       	call   10003d14 <firstRun(bool)+0x1382>	10003d14: R_386_PC32	VgaText::setCursor(int, int)
10003d18:	83 c4 10             	add    esp,0x10
10003d1b:	a1 00 00 00 00       	mov    eax,ds:0x0	10003d1c: R_386_32	term
10003d20:	83 ec 08             	sub    esp,0x8
10003d23:	6a 1f                	push   0x1f
10003d25:	50                   	push   eax
10003d26:	e8 fc ff ff ff       	call   10003d27 <firstRun(bool)+0x1395>	10003d27: R_386_PC32	VgaText::putchar(char)
10003d2b:	83 c4 10             	add    esp,0x10
10003d2e:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
10003d35:	83 7d cc 0e          	cmp    DWORD PTR [ebp-0x34],0xe
10003d39:	7f 7e                	jg     10003db9 <firstRun(bool)+0x1427>
10003d3b:	a1 00 00 00 00       	mov    eax,ds:0x0	10003d3c: R_386_32	term
10003d40:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
10003d43:	83 c2 06             	add    edx,0x6
10003d46:	83 ec 04             	sub    esp,0x4
10003d49:	52                   	push   edx
10003d4a:	6a 14                	push   0x14
10003d4c:	50                   	push   eax
10003d4d:	e8 fc ff ff ff       	call   10003d4e <firstRun(bool)+0x13bc>	10003d4e: R_386_PC32	VgaText::setCursor(int, int)
10003d52:	83 c4 10             	add    esp,0x10
10003d55:	a1 00 00 00 00       	mov    eax,ds:0x0	10003d56: R_386_32	term
10003d5a:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
10003d5d:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
10003d60:	01 d1                	add    ecx,edx
10003d62:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10003d64: R_386_32	tzsel
10003d68:	39 d1                	cmp    ecx,edx
10003d6a:	75 07                	jne    10003d73 <firstRun(bool)+0x13e1>
10003d6c:	bb 00 00 00 00       	mov    ebx,0x0
10003d71:	eb 05                	jmp    10003d78 <firstRun(bool)+0x13e6>
10003d73:	bb 0f 00 00 00       	mov    ebx,0xf
10003d78:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
10003d7b:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
10003d7e:	01 d1                	add    ecx,edx
10003d80:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10003d82: R_386_32	tzsel
10003d86:	39 d1                	cmp    ecx,edx
10003d88:	75 07                	jne    10003d91 <firstRun(bool)+0x13ff>
10003d8a:	b9 0f 00 00 00       	mov    ecx,0xf
10003d8f:	eb 05                	jmp    10003d96 <firstRun(bool)+0x1404>
10003d91:	b9 00 00 00 00       	mov    ecx,0x0
10003d96:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
10003d99:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
10003d9c:	01 f2                	add    edx,esi
10003d9e:	8b 14 95 00 00 00 00 	mov    edx,DWORD PTR [edx*4+0x0]	10003da1: R_386_32	timezoneStrings
10003da5:	53                   	push   ebx
10003da6:	51                   	push   ecx
10003da7:	52                   	push   edx
10003da8:	50                   	push   eax
10003da9:	e8 fc ff ff ff       	call   10003daa <firstRun(bool)+0x1418>	10003daa: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10003dae:	83 c4 10             	add    esp,0x10
10003db1:	ff 45 cc             	inc    DWORD PTR [ebp-0x34]
10003db4:	e9 7c ff ff ff       	jmp    10003d35 <firstRun(bool)+0x13a3>
10003db9:	a0 00 00 00 00       	mov    al,ds:0x0	10003dba: R_386_32	installKey
10003dbe:	84 c0                	test   al,al
10003dc0:	0f 94 c0             	sete   al
10003dc3:	84 c0                	test   al,al
10003dc5:	74 02                	je     10003dc9 <firstRun(bool)+0x1437>
10003dc7:	eb f0                	jmp    10003db9 <firstRun(bool)+0x1427>
10003dc9:	a1 00 00 00 00       	mov    eax,ds:0x0	10003dca: R_386_32	term
10003dce:	05 82 00 00 00       	add    eax,0x82
10003dd3:	83 ec 04             	sub    esp,0x4
10003dd6:	6a 04                	push   0x4
10003dd8:	6a 00                	push   0x0
10003dda:	50                   	push   eax
10003ddb:	e8 fc ff ff ff       	call   10003ddc <firstRun(bool)+0x144a>	10003ddc: R_386_PC32	memset
10003de0:	83 c4 10             	add    esp,0x10
10003de3:	a1 00 00 00 00       	mov    eax,ds:0x0	10003de4: R_386_32	term
10003de8:	05 02 01 00 00       	add    eax,0x102
10003ded:	83 ec 04             	sub    esp,0x4
10003df0:	6a 04                	push   0x4
10003df2:	6a 00                	push   0x0
10003df4:	50                   	push   eax
10003df5:	e8 fc ff ff ff       	call   10003df6 <firstRun(bool)+0x1464>	10003df6: R_386_PC32	memset
10003dfa:	83 c4 10             	add    esp,0x10
10003dfd:	a0 00 00 00 00       	mov    al,ds:0x0	10003dfe: R_386_32	installKey
10003e02:	3c 01                	cmp    al,0x1
10003e04:	0f 94 c0             	sete   al
10003e07:	84 c0                	test   al,al
10003e09:	74 41                	je     10003e4c <firstRun(bool)+0x14ba>
10003e0b:	a1 00 00 00 00       	mov    eax,ds:0x0	10003e0c: R_386_32	tzsel
10003e10:	48                   	dec    eax
10003e11:	a3 00 00 00 00       	mov    ds:0x0,eax	10003e12: R_386_32	tzsel
10003e16:	a1 00 00 00 00       	mov    eax,ds:0x0	10003e17: R_386_32	tzsel
10003e1b:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
10003e1e:	83 f8 04             	cmp    eax,0x4
10003e21:	7f 03                	jg     10003e26 <firstRun(bool)+0x1494>
10003e23:	ff 4d dc             	dec    DWORD PTR [ebp-0x24]
10003e26:	a1 00 00 00 00       	mov    eax,ds:0x0	10003e27: R_386_32	tzsel
10003e2b:	85 c0                	test   eax,eax
10003e2d:	79 0a                	jns    10003e39 <firstRun(bool)+0x14a7>
10003e2f:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10003e31: R_386_32	tzsel
10003e39:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
10003e3d:	0f 89 82 00 00 00    	jns    10003ec5 <firstRun(bool)+0x1533>
10003e43:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
10003e4a:	eb 79                	jmp    10003ec5 <firstRun(bool)+0x1533>
10003e4c:	a0 00 00 00 00       	mov    al,ds:0x0	10003e4d: R_386_32	installKey
10003e51:	3c 02                	cmp    al,0x2
10003e53:	0f 94 c0             	sete   al
10003e56:	84 c0                	test   al,al
10003e58:	74 4b                	je     10003ea5 <firstRun(bool)+0x1513>
10003e5a:	a1 00 00 00 00       	mov    eax,ds:0x0	10003e5b: R_386_32	tzsel
10003e5f:	40                   	inc    eax
10003e60:	a3 00 00 00 00       	mov    ds:0x0,eax	10003e61: R_386_32	tzsel
10003e65:	a1 00 00 00 00       	mov    eax,ds:0x0	10003e66: R_386_32	tzsel
10003e6a:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
10003e6d:	83 f8 0a             	cmp    eax,0xa
10003e70:	7e 03                	jle    10003e75 <firstRun(bool)+0x14e3>
10003e72:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
10003e75:	8b 45 9c             	mov    eax,DWORD PTR [ebp-0x64]
10003e78:	8d 50 ff             	lea    edx,[eax-0x1]
10003e7b:	a1 00 00 00 00       	mov    eax,ds:0x0	10003e7c: R_386_32	tzsel
10003e80:	39 c2                	cmp    edx,eax
10003e82:	7f 0b                	jg     10003e8f <firstRun(bool)+0x14fd>
10003e84:	8b 45 9c             	mov    eax,DWORD PTR [ebp-0x64]
10003e87:	83 e8 02             	sub    eax,0x2
10003e8a:	a3 00 00 00 00       	mov    ds:0x0,eax	10003e8b: R_386_32	tzsel
10003e8f:	8b 45 9c             	mov    eax,DWORD PTR [ebp-0x64]
10003e92:	83 e8 0f             	sub    eax,0xf
10003e95:	39 45 dc             	cmp    DWORD PTR [ebp-0x24],eax
10003e98:	7c 2b                	jl     10003ec5 <firstRun(bool)+0x1533>
10003e9a:	8b 45 9c             	mov    eax,DWORD PTR [ebp-0x64]
10003e9d:	83 e8 10             	sub    eax,0x10
10003ea0:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
10003ea3:	eb 20                	jmp    10003ec5 <firstRun(bool)+0x1533>
10003ea5:	a0 00 00 00 00       	mov    al,ds:0x0	10003ea6: R_386_32	installKey
10003eaa:	3c 0a                	cmp    al,0xa
10003eac:	0f 94 c0             	sete   al
10003eaf:	84 c0                	test   al,al
10003eb1:	75 2e                	jne    10003ee1 <firstRun(bool)+0x154f>
10003eb3:	a0 00 00 00 00       	mov    al,ds:0x0	10003eb4: R_386_32	installKey
10003eb8:	3c 1b                	cmp    al,0x1b
10003eba:	0f 94 c0             	sete   al
10003ebd:	84 c0                	test   al,al
10003ebf:	0f 85 28 f1 ff ff    	jne    10002fed <firstRun(bool)+0x65b>
10003ec5:	83 ec 0c             	sub    esp,0xc
10003ec8:	68 f4 01 00 00       	push   0x1f4
10003ecd:	e8 fc ff ff ff       	call   10003ece <firstRun(bool)+0x153c>	10003ece: R_386_PC32	milliTenthSleep(unsigned int)
10003ed2:	83 c4 10             	add    esp,0x10
10003ed5:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10003ed7: R_386_32	installKey
10003edc:	e9 67 fd ff ff       	jmp    10003c48 <firstRun(bool)+0x12b6>
10003ee1:	90                   	nop
10003ee2:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10003ee4: R_386_32	installKey
10003ee9:	83 ec 0c             	sub    esp,0xc
10003eec:	68 a0 0f 00 00       	push   0xfa0
10003ef1:	e8 fc ff ff ff       	call   10003ef2 <firstRun(bool)+0x1560>	10003ef2: R_386_PC32	milliTenthSleep(unsigned int)
10003ef6:	83 c4 10             	add    esp,0x10
10003ef9:	eb 01                	jmp    10003efc <firstRun(bool)+0x156a>
10003efb:	90                   	nop
10003efc:	e8 fc ff ff ff       	call   10003efd <firstRun(bool)+0x156b>	10003efd: R_386_PC32	drawBootScreen()
10003f01:	83 ec 0c             	sub    esp,0xc
10003f04:	68 58 1b 00 00       	push   0x1b58
10003f09:	e8 fc ff ff ff       	call   10003f0a <firstRun(bool)+0x1578>	10003f0a: R_386_PC32	milliTenthSleep(unsigned int)
10003f0e:	83 c4 10             	add    esp,0x10
10003f11:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10003f13: R_386_32	installKey
10003f18:	e8 fc ff ff ff       	call   10003f19 <firstRun(bool)+0x1587>	10003f19: R_386_PC32	drawBootScreen()
10003f1d:	83 ec 0c             	sub    esp,0xc
10003f20:	68 c6 57 00 10       	push   0x100057c6	10003f21: R_386_32	.text
10003f25:	6a 10                	push   0x10
10003f27:	6a 37                	push   0x37
10003f29:	6a 03                	push   0x3
10003f2b:	6a 14                	push   0x14
10003f2d:	e8 fc ff ff ff       	call   10003f2e <firstRun(bool)+0x159c>	10003f2e: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
10003f32:	83 c4 20             	add    esp,0x20
10003f35:	a1 00 00 00 00       	mov    eax,ds:0x0	10003f36: R_386_32	term
10003f3a:	83 ec 04             	sub    esp,0x4
10003f3d:	6a 06                	push   0x6
10003f3f:	6a 16                	push   0x16
10003f41:	50                   	push   eax
10003f42:	e8 fc ff ff ff       	call   10003f43 <firstRun(bool)+0x15b1>	10003f43: R_386_PC32	VgaText::setCursor(int, int)
10003f47:	83 c4 10             	add    esp,0x10
10003f4a:	a1 00 00 00 00       	mov    eax,ds:0x0	10003f4b: R_386_32	term
10003f4f:	83 ec 08             	sub    esp,0x8
10003f52:	68 d8 57 00 10       	push   0x100057d8	10003f53: R_386_32	.text
10003f57:	50                   	push   eax
10003f58:	e8 fc ff ff ff       	call   10003f59 <firstRun(bool)+0x15c7>	10003f59: R_386_PC32	VgaText::puts(char const*)
10003f5d:	83 c4 10             	add    esp,0x10
10003f60:	a1 00 00 00 00       	mov    eax,ds:0x0	10003f61: R_386_32	term
10003f65:	83 ec 04             	sub    esp,0x4
10003f68:	6a 07                	push   0x7
10003f6a:	6a 16                	push   0x16
10003f6c:	50                   	push   eax
10003f6d:	e8 fc ff ff ff       	call   10003f6e <firstRun(bool)+0x15dc>	10003f6e: R_386_PC32	VgaText::setCursor(int, int)
10003f72:	83 c4 10             	add    esp,0x10
10003f75:	a1 00 00 00 00       	mov    eax,ds:0x0	10003f76: R_386_32	term
10003f7a:	83 ec 08             	sub    esp,0x8
10003f7d:	68 0c 58 00 10       	push   0x1000580c	10003f7e: R_386_32	.text
10003f82:	50                   	push   eax
10003f83:	e8 fc ff ff ff       	call   10003f84 <firstRun(bool)+0x15f2>	10003f84: R_386_PC32	VgaText::puts(char const*)
10003f88:	83 c4 10             	add    esp,0x10
10003f8b:	a1 00 00 00 00       	mov    eax,ds:0x0	10003f8c: R_386_32	term
10003f90:	83 ec 04             	sub    esp,0x4
10003f93:	6a 18                	push   0x18
10003f95:	6a 11                	push   0x11
10003f97:	50                   	push   eax
10003f98:	e8 fc ff ff ff       	call   10003f99 <firstRun(bool)+0x1607>	10003f99: R_386_PC32	VgaText::setCursor(int, int)
10003f9d:	83 c4 10             	add    esp,0x10
10003fa0:	a1 00 00 00 00       	mov    eax,ds:0x0	10003fa1: R_386_32	term
10003fa5:	6a 0b                	push   0xb
10003fa7:	6a 03                	push   0x3
10003fa9:	68 7e 57 00 10       	push   0x1000577e	10003faa: R_386_32	.text
10003fae:	50                   	push   eax
10003faf:	e8 fc ff ff ff       	call   10003fb0 <firstRun(bool)+0x161e>	10003fb0: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10003fb4:	83 c4 10             	add    esp,0x10
10003fb7:	c7 45 9c 03 00 00 00 	mov    DWORD PTR [ebp-0x64],0x3
10003fbe:	8d 85 3c ff ff ff    	lea    eax,[ebp-0xc4]
10003fc4:	bb 84 5a 00 10       	mov    ebx,0x10005a84	10003fc5: R_386_32	.text
10003fc9:	ba 03 00 00 00       	mov    edx,0x3
10003fce:	89 c7                	mov    edi,eax
10003fd0:	89 de                	mov    esi,ebx
10003fd2:	89 d1                	mov    ecx,edx
10003fd4:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10003fd6:	c7 45 c8 00 00 00 00 	mov    DWORD PTR [ebp-0x38],0x0
10003fdd:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
10003fe0:	3b 45 9c             	cmp    eax,DWORD PTR [ebp-0x64]
10003fe3:	7d 68                	jge    1000404d <firstRun(bool)+0x16bb>
10003fe5:	a1 00 00 00 00       	mov    eax,ds:0x0	10003fe6: R_386_32	term
10003fea:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
10003fed:	83 c2 09             	add    edx,0x9
10003ff0:	83 ec 04             	sub    esp,0x4
10003ff3:	52                   	push   edx
10003ff4:	6a 16                	push   0x16
10003ff6:	50                   	push   eax
10003ff7:	e8 fc ff ff ff       	call   10003ff8 <firstRun(bool)+0x1666>	10003ff8: R_386_PC32	VgaText::setCursor(int, int)
10003ffc:	83 c4 10             	add    esp,0x10
10003fff:	a1 00 00 00 00       	mov    eax,ds:0x0	10004000: R_386_32	term
10004004:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10004006: R_386_32	modesel
1000400a:	39 55 c8             	cmp    DWORD PTR [ebp-0x38],edx
1000400d:	75 07                	jne    10004016 <firstRun(bool)+0x1684>
1000400f:	bb 00 00 00 00       	mov    ebx,0x0
10004014:	eb 05                	jmp    1000401b <firstRun(bool)+0x1689>
10004016:	bb 0f 00 00 00       	mov    ebx,0xf
1000401b:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	1000401d: R_386_32	modesel
10004021:	39 55 c8             	cmp    DWORD PTR [ebp-0x38],edx
10004024:	75 07                	jne    1000402d <firstRun(bool)+0x169b>
10004026:	b9 0f 00 00 00       	mov    ecx,0xf
1000402b:	eb 05                	jmp    10004032 <firstRun(bool)+0x16a0>
1000402d:	b9 00 00 00 00       	mov    ecx,0x0
10004032:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
10004035:	8b 94 95 3c ff ff ff 	mov    edx,DWORD PTR [ebp+edx*4-0xc4]
1000403c:	53                   	push   ebx
1000403d:	51                   	push   ecx
1000403e:	52                   	push   edx
1000403f:	50                   	push   eax
10004040:	e8 fc ff ff ff       	call   10004041 <firstRun(bool)+0x16af>	10004041: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10004045:	83 c4 10             	add    esp,0x10
10004048:	ff 45 c8             	inc    DWORD PTR [ebp-0x38]
1000404b:	eb 90                	jmp    10003fdd <firstRun(bool)+0x164b>
1000404d:	a0 00 00 00 00       	mov    al,ds:0x0	1000404e: R_386_32	installKey
10004052:	84 c0                	test   al,al
10004054:	0f 94 c0             	sete   al
10004057:	84 c0                	test   al,al
10004059:	74 02                	je     1000405d <firstRun(bool)+0x16cb>
1000405b:	eb f0                	jmp    1000404d <firstRun(bool)+0x16bb>
1000405d:	a1 00 00 00 00       	mov    eax,ds:0x0	1000405e: R_386_32	term
10004062:	05 82 00 00 00       	add    eax,0x82
10004067:	83 ec 04             	sub    esp,0x4
1000406a:	6a 04                	push   0x4
1000406c:	6a 00                	push   0x0
1000406e:	50                   	push   eax
1000406f:	e8 fc ff ff ff       	call   10004070 <firstRun(bool)+0x16de>	10004070: R_386_PC32	memset
10004074:	83 c4 10             	add    esp,0x10
10004077:	a1 00 00 00 00       	mov    eax,ds:0x0	10004078: R_386_32	term
1000407c:	05 02 01 00 00       	add    eax,0x102
10004081:	83 ec 04             	sub    esp,0x4
10004084:	6a 04                	push   0x4
10004086:	6a 00                	push   0x0
10004088:	50                   	push   eax
10004089:	e8 fc ff ff ff       	call   1000408a <firstRun(bool)+0x16f8>	1000408a: R_386_PC32	memset
1000408e:	83 c4 10             	add    esp,0x10
10004091:	a0 00 00 00 00       	mov    al,ds:0x0	10004092: R_386_32	installKey
10004096:	3c 01                	cmp    al,0x1
10004098:	0f 94 c0             	sete   al
1000409b:	84 c0                	test   al,al
1000409d:	74 20                	je     100040bf <firstRun(bool)+0x172d>
1000409f:	a1 00 00 00 00       	mov    eax,ds:0x0	100040a0: R_386_32	modesel
100040a4:	48                   	dec    eax
100040a5:	a3 00 00 00 00       	mov    ds:0x0,eax	100040a6: R_386_32	modesel
100040aa:	a1 00 00 00 00       	mov    eax,ds:0x0	100040ab: R_386_32	modesel
100040af:	85 c0                	test   eax,eax
100040b1:	79 5a                	jns    1000410d <firstRun(bool)+0x177b>
100040b3:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	100040b5: R_386_32	modesel
100040bd:	eb 4e                	jmp    1000410d <firstRun(bool)+0x177b>
100040bf:	a0 00 00 00 00       	mov    al,ds:0x0	100040c0: R_386_32	installKey
100040c4:	3c 02                	cmp    al,0x2
100040c6:	0f 94 c0             	sete   al
100040c9:	84 c0                	test   al,al
100040cb:	74 20                	je     100040ed <firstRun(bool)+0x175b>
100040cd:	a1 00 00 00 00       	mov    eax,ds:0x0	100040ce: R_386_32	modesel
100040d2:	40                   	inc    eax
100040d3:	a3 00 00 00 00       	mov    ds:0x0,eax	100040d4: R_386_32	modesel
100040d8:	a1 00 00 00 00       	mov    eax,ds:0x0	100040d9: R_386_32	modesel
100040dd:	39 45 9c             	cmp    DWORD PTR [ebp-0x64],eax
100040e0:	7f 2b                	jg     1000410d <firstRun(bool)+0x177b>
100040e2:	8b 45 9c             	mov    eax,DWORD PTR [ebp-0x64]
100040e5:	48                   	dec    eax
100040e6:	a3 00 00 00 00       	mov    ds:0x0,eax	100040e7: R_386_32	modesel
100040eb:	eb 20                	jmp    1000410d <firstRun(bool)+0x177b>
100040ed:	a0 00 00 00 00       	mov    al,ds:0x0	100040ee: R_386_32	installKey
100040f2:	3c 0a                	cmp    al,0xa
100040f4:	0f 94 c0             	sete   al
100040f7:	84 c0                	test   al,al
100040f9:	75 2e                	jne    10004129 <firstRun(bool)+0x1797>
100040fb:	a0 00 00 00 00       	mov    al,ds:0x0	100040fc: R_386_32	installKey
10004100:	3c 1b                	cmp    al,0x1b
10004102:	0f 94 c0             	sete   al
10004105:	84 c0                	test   al,al
10004107:	0f 85 ab fa ff ff    	jne    10003bb8 <firstRun(bool)+0x1226>
1000410d:	83 ec 0c             	sub    esp,0xc
10004110:	68 f4 01 00 00       	push   0x1f4
10004115:	e8 fc ff ff ff       	call   10004116 <firstRun(bool)+0x1784>	10004116: R_386_PC32	milliTenthSleep(unsigned int)
1000411a:	83 c4 10             	add    esp,0x10
1000411d:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	1000411f: R_386_32	installKey
10004124:	e9 ad fe ff ff       	jmp    10003fd6 <firstRun(bool)+0x1644>
10004129:	90                   	nop
1000412a:	80 bd 24 ff ff ff 00 	cmp    BYTE PTR [ebp-0xdc],0x0
10004131:	0f 84 ff 00 00 00    	je     10004236 <firstRun(bool)+0x18a4>
10004137:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10004139: R_386_32	showSidebar
1000413e:	a1 00 00 00 00       	mov    eax,ds:0x0	1000413f: R_386_32	term
10004143:	83 ec 0c             	sub    esp,0xc
10004146:	50                   	push   eax
10004147:	e8 fc ff ff ff       	call   10004148 <firstRun(bool)+0x17b6>	10004148: R_386_PC32	setActiveTerminal(VgaText*)
1000414c:	83 c4 10             	add    esp,0x10
1000414f:	e8 fc ff ff ff       	call   10004150 <firstRun(bool)+0x17be>	10004150: R_386_PC32	drawBootScreen()
10004154:	83 ec 0c             	sub    esp,0xc
10004157:	68 41 58 00 10       	push   0x10005841	10004158: R_386_32	.text
1000415c:	6a 0d                	push   0xd
1000415e:	6a 32                	push   0x32
10004160:	6a 05                	push   0x5
10004162:	6a 16                	push   0x16
10004164:	e8 fc ff ff ff       	call   10004165 <firstRun(bool)+0x17d3>	10004165: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
10004169:	83 c4 20             	add    esp,0x20
1000416c:	a1 00 00 00 00       	mov    eax,ds:0x0	1000416d: R_386_32	term
10004171:	83 ec 04             	sub    esp,0x4
10004174:	6a 08                	push   0x8
10004176:	6a 18                	push   0x18
10004178:	50                   	push   eax
10004179:	e8 fc ff ff ff       	call   1000417a <firstRun(bool)+0x17e8>	1000417a: R_386_PC32	VgaText::setCursor(int, int)
1000417e:	83 c4 10             	add    esp,0x10
10004181:	a1 00 00 00 00       	mov    eax,ds:0x0	10004182: R_386_32	term
10004186:	83 ec 08             	sub    esp,0x8
10004189:	68 58 58 00 10       	push   0x10005858	1000418a: R_386_32	.text
1000418e:	50                   	push   eax
1000418f:	e8 fc ff ff ff       	call   10004190 <firstRun(bool)+0x17fe>	10004190: R_386_PC32	VgaText::puts(char const*)
10004194:	83 c4 10             	add    esp,0x10
10004197:	a1 00 00 00 00       	mov    eax,ds:0x0	10004198: R_386_32	term
1000419c:	83 ec 04             	sub    esp,0x4
1000419f:	6a 0a                	push   0xa
100041a1:	6a 18                	push   0x18
100041a3:	50                   	push   eax
100041a4:	e8 fc ff ff ff       	call   100041a5 <firstRun(bool)+0x1813>	100041a5: R_386_PC32	VgaText::setCursor(int, int)
100041a9:	83 c4 10             	add    esp,0x10
100041ac:	a1 00 00 00 00       	mov    eax,ds:0x0	100041ad: R_386_32	term
100041b1:	83 ec 08             	sub    esp,0x8
100041b4:	68 80 58 00 10       	push   0x10005880	100041b5: R_386_32	.text
100041b9:	50                   	push   eax
100041ba:	e8 fc ff ff ff       	call   100041bb <firstRun(bool)+0x1829>	100041bb: R_386_PC32	VgaText::puts(char const*)
100041bf:	83 c4 10             	add    esp,0x10
100041c2:	a1 00 00 00 00       	mov    eax,ds:0x0	100041c3: R_386_32	term
100041c7:	83 ec 04             	sub    esp,0x4
100041ca:	6a 0b                	push   0xb
100041cc:	6a 18                	push   0x18
100041ce:	50                   	push   eax
100041cf:	e8 fc ff ff ff       	call   100041d0 <firstRun(bool)+0x183e>	100041d0: R_386_PC32	VgaText::setCursor(int, int)
100041d4:	83 c4 10             	add    esp,0x10
100041d7:	a1 00 00 00 00       	mov    eax,ds:0x0	100041d8: R_386_32	term
100041dc:	83 ec 08             	sub    esp,0x8
100041df:	68 a9 58 00 10       	push   0x100058a9	100041e0: R_386_32	.text
100041e4:	50                   	push   eax
100041e5:	e8 fc ff ff ff       	call   100041e6 <firstRun(bool)+0x1854>	100041e6: R_386_PC32	VgaText::puts(char const*)
100041ea:	83 c4 10             	add    esp,0x10
100041ed:	a1 00 00 00 00       	mov    eax,ds:0x0	100041ee: R_386_32	term
100041f2:	83 ec 04             	sub    esp,0x4
100041f5:	6a 0e                	push   0xe
100041f7:	6a 18                	push   0x18
100041f9:	50                   	push   eax
100041fa:	e8 fc ff ff ff       	call   100041fb <firstRun(bool)+0x1869>	100041fb: R_386_PC32	VgaText::setCursor(int, int)
100041ff:	83 c4 10             	add    esp,0x10
10004202:	a1 00 00 00 00       	mov    eax,ds:0x0	10004203: R_386_32	term
10004207:	83 ec 08             	sub    esp,0x8
1000420a:	68 b8 58 00 10       	push   0x100058b8	1000420b: R_386_32	.text
1000420f:	50                   	push   eax
10004210:	e8 fc ff ff ff       	call   10004211 <firstRun(bool)+0x187f>	10004211: R_386_PC32	VgaText::puts(char const*)
10004215:	83 c4 10             	add    esp,0x10
10004218:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	1000421a: R_386_32	installKey
1000421f:	a0 00 00 00 00       	mov    al,ds:0x0	10004220: R_386_32	installKey
10004224:	84 c0                	test   al,al
10004226:	0f 94 c0             	sete   al
10004229:	84 c0                	test   al,al
1000422b:	74 02                	je     1000422f <firstRun(bool)+0x189d>
1000422d:	eb f0                	jmp    1000421f <firstRun(bool)+0x188d>
1000422f:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10004231: R_386_32	installKey
10004236:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10004238: R_386_32	installKey
1000423d:	83 ec 0c             	sub    esp,0xc
10004240:	68 84 03 00 00       	push   0x384
10004245:	e8 fc ff ff ff       	call   10004246 <firstRun(bool)+0x18b4>	10004246: R_386_PC32	milliTenthSleep(unsigned int)
1000424a:	83 c4 10             	add    esp,0x10
1000424d:	e8 fc ff ff ff       	call   1000424e <firstRun(bool)+0x18bc>	1000424e: R_386_PC32	drawBootScreen()
10004252:	83 ec 0c             	sub    esp,0xc
10004255:	68 18 2e 00 00       	push   0x2e18
1000425a:	e8 fc ff ff ff       	call   1000425b <firstRun(bool)+0x18c9>	1000425b: R_386_PC32	milliTenthSleep(unsigned int)
1000425f:	83 c4 10             	add    esp,0x10
10004262:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
10004269:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	1000426b: R_386_32	installKey
10004270:	e8 fc ff ff ff       	call   10004271 <firstRun(bool)+0x18df>	10004271: R_386_PC32	drawBootScreen()
10004275:	83 ec 0c             	sub    esp,0xc
10004278:	68 e2 58 00 10       	push   0x100058e2	10004279: R_386_32	.text
1000427d:	6a 0e                	push   0xe
1000427f:	6a 32                	push   0x32
10004281:	6a 02                	push   0x2
10004283:	6a 16                	push   0x16
10004285:	e8 fc ff ff ff       	call   10004286 <firstRun(bool)+0x18f4>	10004286: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
1000428a:	83 c4 20             	add    esp,0x20
1000428d:	a1 00 00 00 00       	mov    eax,ds:0x0	1000428e: R_386_32	term
10004292:	83 ec 04             	sub    esp,0x4
10004295:	6a 18                	push   0x18
10004297:	6a 11                	push   0x11
10004299:	50                   	push   eax
1000429a:	e8 fc ff ff ff       	call   1000429b <firstRun(bool)+0x1909>	1000429b: R_386_PC32	VgaText::setCursor(int, int)
1000429f:	83 c4 10             	add    esp,0x10
100042a2:	a1 00 00 00 00       	mov    eax,ds:0x0	100042a3: R_386_32	term
100042a7:	6a 0b                	push   0xb
100042a9:	6a 03                	push   0x3
100042ab:	68 7e 57 00 10       	push   0x1000577e	100042ac: R_386_32	.text
100042b0:	50                   	push   eax
100042b1:	e8 fc ff ff ff       	call   100042b2 <firstRun(bool)+0x1920>	100042b2: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
100042b6:	83 c4 10             	add    esp,0x10
100042b9:	a1 00 00 00 00       	mov    eax,ds:0x0	100042ba: R_386_32	term
100042be:	83 ec 04             	sub    esp,0x4
100042c1:	6a 05                	push   0x5
100042c3:	6a 18                	push   0x18
100042c5:	50                   	push   eax
100042c6:	e8 fc ff ff ff       	call   100042c7 <firstRun(bool)+0x1935>	100042c7: R_386_PC32	VgaText::setCursor(int, int)
100042cb:	83 c4 10             	add    esp,0x10
100042ce:	a1 00 00 00 00       	mov    eax,ds:0x0	100042cf: R_386_32	term
100042d3:	83 ec 08             	sub    esp,0x8
100042d6:	68 f0 58 00 10       	push   0x100058f0	100042d7: R_386_32	.text
100042db:	50                   	push   eax
100042dc:	e8 fc ff ff ff       	call   100042dd <firstRun(bool)+0x194b>	100042dd: R_386_PC32	VgaText::puts(char const*)
100042e1:	83 c4 10             	add    esp,0x10
100042e4:	a1 00 00 00 00       	mov    eax,ds:0x0	100042e5: R_386_32	term
100042e9:	83 ec 04             	sub    esp,0x4
100042ec:	6a 06                	push   0x6
100042ee:	6a 18                	push   0x18
100042f0:	50                   	push   eax
100042f1:	e8 fc ff ff ff       	call   100042f2 <firstRun(bool)+0x1960>	100042f2: R_386_PC32	VgaText::setCursor(int, int)
100042f6:	83 c4 10             	add    esp,0x10
100042f9:	a1 00 00 00 00       	mov    eax,ds:0x0	100042fa: R_386_32	term
100042fe:	83 ec 08             	sub    esp,0x8
10004301:	68 54 57 00 10       	push   0x10005754	10004302: R_386_32	.text
10004306:	50                   	push   eax
10004307:	e8 fc ff ff ff       	call   10004308 <firstRun(bool)+0x1976>	10004308: R_386_PC32	VgaText::puts(char const*)
1000430c:	83 c4 10             	add    esp,0x10
1000430f:	c6 05 10 00 00 00 00 	mov    BYTE PTR ds:0x10,0x0	10004311: R_386_32	pkeybuf
10004316:	c6 05 11 00 00 00 00 	mov    BYTE PTR ds:0x11,0x0	10004318: R_386_32	pkeybuf
1000431d:	a1 00 00 00 00       	mov    eax,ds:0x0	1000431e: R_386_32	term
10004322:	83 ec 04             	sub    esp,0x4
10004325:	6a 08                	push   0x8
10004327:	6a 1c                	push   0x1c
10004329:	50                   	push   eax
1000432a:	e8 fc ff ff ff       	call   1000432b <firstRun(bool)+0x1999>	1000432b: R_386_PC32	VgaText::setCursor(int, int)
1000432f:	83 c4 10             	add    esp,0x10
10004332:	a1 00 00 00 00       	mov    eax,ds:0x0	10004333: R_386_32	term
10004337:	83 ec 08             	sub    esp,0x8
1000433a:	68 00 00 00 00       	push   0x0	1000433b: R_386_32	pkeybuf
1000433f:	50                   	push   eax
10004340:	e8 fc ff ff ff       	call   10004341 <firstRun(bool)+0x19af>	10004341: R_386_PC32	VgaText::puts(char const*)
10004345:	83 c4 10             	add    esp,0x10
10004348:	a1 00 00 00 00       	mov    eax,ds:0x0	10004349: R_386_32	term
1000434d:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10004350:	83 c2 1c             	add    edx,0x1c
10004353:	83 ec 04             	sub    esp,0x4
10004356:	6a 08                	push   0x8
10004358:	52                   	push   edx
10004359:	50                   	push   eax
1000435a:	e8 fc ff ff ff       	call   1000435b <firstRun(bool)+0x19c9>	1000435b: R_386_PC32	VgaText::setCursor(int, int)
1000435f:	83 c4 10             	add    esp,0x10
10004362:	a1 00 00 00 00       	mov    eax,ds:0x0	10004363: R_386_32	term
10004367:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
1000436a:	81 c2 00 00 00 00    	add    edx,0x0	1000436c: R_386_32	pkeybuf
10004370:	8a 12                	mov    dl,BYTE PTR [edx]
10004372:	0f be d2             	movsx  edx,dl
10004375:	6a 00                	push   0x0
10004377:	6a 0f                	push   0xf
10004379:	52                   	push   edx
1000437a:	50                   	push   eax
1000437b:	e8 fc ff ff ff       	call   1000437c <firstRun(bool)+0x19ea>	1000437c: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
10004380:	83 c4 10             	add    esp,0x10
10004383:	a1 00 00 00 00       	mov    eax,ds:0x0	10004384: R_386_32	term
10004388:	83 ec 04             	sub    esp,0x4
1000438b:	6a 08                	push   0x8
1000438d:	6a 2c                	push   0x2c
1000438f:	50                   	push   eax
10004390:	e8 fc ff ff ff       	call   10004391 <firstRun(bool)+0x19ff>	10004391: R_386_PC32	VgaText::setCursor(int, int)
10004395:	83 c4 10             	add    esp,0x10
10004398:	a1 00 00 00 00       	mov    eax,ds:0x0	10004399: R_386_32	term
1000439d:	6a 0f                	push   0xf
1000439f:	6a 0f                	push   0xf
100043a1:	6a 20                	push   0x20
100043a3:	50                   	push   eax
100043a4:	e8 fc ff ff ff       	call   100043a5 <firstRun(bool)+0x1a13>	100043a5: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
100043a9:	83 c4 10             	add    esp,0x10
100043ac:	a1 00 00 00 00       	mov    eax,ds:0x0	100043ad: R_386_32	term
100043b1:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
100043b4:	83 c2 1c             	add    edx,0x1c
100043b7:	83 ec 04             	sub    esp,0x4
100043ba:	6a 08                	push   0x8
100043bc:	52                   	push   edx
100043bd:	50                   	push   eax
100043be:	e8 fc ff ff ff       	call   100043bf <firstRun(bool)+0x1a2d>	100043bf: R_386_PC32	VgaText::setCursor(int, int)
100043c3:	83 c4 10             	add    esp,0x10
100043c6:	a0 00 00 00 00       	mov    al,ds:0x0	100043c7: R_386_32	installKey
100043cb:	84 c0                	test   al,al
100043cd:	0f 94 c0             	sete   al
100043d0:	84 c0                	test   al,al
100043d2:	74 02                	je     100043d6 <firstRun(bool)+0x1a44>
100043d4:	eb f0                	jmp    100043c6 <firstRun(bool)+0x1a34>
100043d6:	a1 00 00 00 00       	mov    eax,ds:0x0	100043d7: R_386_32	term
100043db:	05 82 00 00 00       	add    eax,0x82
100043e0:	83 ec 04             	sub    esp,0x4
100043e3:	6a 10                	push   0x10
100043e5:	6a 00                	push   0x0
100043e7:	50                   	push   eax
100043e8:	e8 fc ff ff ff       	call   100043e9 <firstRun(bool)+0x1a57>	100043e9: R_386_PC32	memset
100043ed:	83 c4 10             	add    esp,0x10
100043f0:	a1 00 00 00 00       	mov    eax,ds:0x0	100043f1: R_386_32	term
100043f5:	05 02 01 00 00       	add    eax,0x102
100043fa:	83 ec 04             	sub    esp,0x4
100043fd:	6a 10                	push   0x10
100043ff:	6a 00                	push   0x0
10004401:	50                   	push   eax
10004402:	e8 fc ff ff ff       	call   10004403 <firstRun(bool)+0x1a71>	10004403: R_386_PC32	memset
10004407:	83 c4 10             	add    esp,0x10
1000440a:	a0 00 00 00 00       	mov    al,ds:0x0	1000440b: R_386_32	installKey
1000440f:	3c 03                	cmp    al,0x3
10004411:	74 09                	je     1000441c <firstRun(bool)+0x1a8a>
10004413:	a0 00 00 00 00       	mov    al,ds:0x0	10004414: R_386_32	installKey
10004418:	3c 08                	cmp    al,0x8
1000441a:	75 04                	jne    10004420 <firstRun(bool)+0x1a8e>
1000441c:	b0 01                	mov    al,0x1
1000441e:	eb 02                	jmp    10004422 <firstRun(bool)+0x1a90>
10004420:	b0 00                	mov    al,0x0
10004422:	84 c0                	test   al,al
10004424:	74 31                	je     10004457 <firstRun(bool)+0x1ac5>
10004426:	ff 4d e4             	dec    DWORD PTR [ebp-0x1c]
10004429:	83 7d e4 ff          	cmp    DWORD PTR [ebp-0x1c],0xffffffff
1000442d:	75 14                	jne    10004443 <firstRun(bool)+0x1ab1>
1000442f:	83 ec 0c             	sub    esp,0xc
10004432:	68 00 00 00 00       	push   0x0	10004433: R_386_32	pkeybuf
10004437:	e8 fc ff ff ff       	call   10004438 <firstRun(bool)+0x1aa6>	10004438: R_386_PC32	strlen
1000443c:	83 c4 10             	add    esp,0x10
1000443f:	48                   	dec    eax
10004440:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10004443:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10004446:	05 00 00 00 00       	add    eax,0x0	10004447: R_386_32	pkeybuf
1000444b:	8a 00                	mov    al,BYTE PTR [eax]
1000444d:	3c 2d                	cmp    al,0x2d
1000444f:	0f 85 6f 03 00 00    	jne    100047c4 <firstRun(bool)+0x1e32>
10004455:	eb cf                	jmp    10004426 <firstRun(bool)+0x1a94>
10004457:	a0 00 00 00 00       	mov    al,ds:0x0	10004458: R_386_32	installKey
1000445c:	3c 2f                	cmp    al,0x2f
1000445e:	7e 09                	jle    10004469 <firstRun(bool)+0x1ad7>
10004460:	a0 00 00 00 00       	mov    al,ds:0x0	10004461: R_386_32	installKey
10004465:	3c 39                	cmp    al,0x39
10004467:	7e 36                	jle    1000449f <firstRun(bool)+0x1b0d>
10004469:	a0 00 00 00 00       	mov    al,ds:0x0	1000446a: R_386_32	installKey
1000446e:	3c 40                	cmp    al,0x40
10004470:	7e 09                	jle    1000447b <firstRun(bool)+0x1ae9>
10004472:	a0 00 00 00 00       	mov    al,ds:0x0	10004473: R_386_32	installKey
10004477:	3c 5a                	cmp    al,0x5a
10004479:	7e 24                	jle    1000449f <firstRun(bool)+0x1b0d>
1000447b:	a0 00 00 00 00       	mov    al,ds:0x0	1000447c: R_386_32	installKey
10004480:	3c 60                	cmp    al,0x60
10004482:	7e 09                	jle    1000448d <firstRun(bool)+0x1afb>
10004484:	a0 00 00 00 00       	mov    al,ds:0x0	10004485: R_386_32	installKey
10004489:	3c 7a                	cmp    al,0x7a
1000448b:	7e 12                	jle    1000449f <firstRun(bool)+0x1b0d>
1000448d:	a0 00 00 00 00       	mov    al,ds:0x0	1000448e: R_386_32	installKey
10004492:	3c 20                	cmp    al,0x20
10004494:	74 09                	je     1000449f <firstRun(bool)+0x1b0d>
10004496:	a0 00 00 00 00       	mov    al,ds:0x0	10004497: R_386_32	installKey
1000449b:	3c 04                	cmp    al,0x4
1000449d:	75 04                	jne    100044a3 <firstRun(bool)+0x1b11>
1000449f:	b0 01                	mov    al,0x1
100044a1:	eb 02                	jmp    100044a5 <firstRun(bool)+0x1b13>
100044a3:	b0 00                	mov    al,0x0
100044a5:	84 c0                	test   al,al
100044a7:	0f 84 a3 00 00 00    	je     10004550 <firstRun(bool)+0x1bbe>
100044ad:	a0 00 00 00 00       	mov    al,ds:0x0	100044ae: R_386_32	installKey
100044b2:	3c 2f                	cmp    al,0x2f
100044b4:	7e 09                	jle    100044bf <firstRun(bool)+0x1b2d>
100044b6:	a0 00 00 00 00       	mov    al,ds:0x0	100044b7: R_386_32	installKey
100044bb:	3c 39                	cmp    al,0x39
100044bd:	7e 24                	jle    100044e3 <firstRun(bool)+0x1b51>
100044bf:	a0 00 00 00 00       	mov    al,ds:0x0	100044c0: R_386_32	installKey
100044c4:	3c 40                	cmp    al,0x40
100044c6:	7e 09                	jle    100044d1 <firstRun(bool)+0x1b3f>
100044c8:	a0 00 00 00 00       	mov    al,ds:0x0	100044c9: R_386_32	installKey
100044cd:	3c 5a                	cmp    al,0x5a
100044cf:	7e 12                	jle    100044e3 <firstRun(bool)+0x1b51>
100044d1:	a0 00 00 00 00       	mov    al,ds:0x0	100044d2: R_386_32	installKey
100044d6:	3c 60                	cmp    al,0x60
100044d8:	7e 0d                	jle    100044e7 <firstRun(bool)+0x1b55>
100044da:	a0 00 00 00 00       	mov    al,ds:0x0	100044db: R_386_32	installKey
100044df:	3c 7a                	cmp    al,0x7a
100044e1:	7f 04                	jg     100044e7 <firstRun(bool)+0x1b55>
100044e3:	b0 01                	mov    al,0x1
100044e5:	eb 02                	jmp    100044e9 <firstRun(bool)+0x1b57>
100044e7:	b0 00                	mov    al,0x0
100044e9:	84 c0                	test   al,al
100044eb:	74 2c                	je     10004519 <firstRun(bool)+0x1b87>
100044ed:	a0 00 00 00 00       	mov    al,ds:0x0	100044ee: R_386_32	installKey
100044f2:	3c 60                	cmp    al,0x60
100044f4:	7e 13                	jle    10004509 <firstRun(bool)+0x1b77>
100044f6:	a0 00 00 00 00       	mov    al,ds:0x0	100044f7: R_386_32	installKey
100044fb:	3c 7a                	cmp    al,0x7a
100044fd:	7f 0a                	jg     10004509 <firstRun(bool)+0x1b77>
100044ff:	a0 00 00 00 00       	mov    al,ds:0x0	10004500: R_386_32	installKey
10004504:	83 e8 20             	sub    eax,0x20
10004507:	eb 05                	jmp    1000450e <firstRun(bool)+0x1b7c>
10004509:	a0 00 00 00 00       	mov    al,ds:0x0	1000450a: R_386_32	installKey
1000450e:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10004511:	81 c2 00 00 00 00    	add    edx,0x0	10004513: R_386_32	pkeybuf
10004517:	88 02                	mov    BYTE PTR [edx],al
10004519:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
1000451c:	83 ec 0c             	sub    esp,0xc
1000451f:	68 00 00 00 00       	push   0x0	10004520: R_386_32	pkeybuf
10004524:	e8 fc ff ff ff       	call   10004525 <firstRun(bool)+0x1b93>	10004525: R_386_PC32	strlen
10004529:	83 c4 10             	add    esp,0x10
1000452c:	89 c2                	mov    edx,eax
1000452e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10004531:	39 c2                	cmp    edx,eax
10004533:	77 07                	ja     1000453c <firstRun(bool)+0x1baa>
10004535:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
1000453c:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
1000453f:	05 00 00 00 00       	add    eax,0x0	10004540: R_386_32	pkeybuf
10004544:	8a 00                	mov    al,BYTE PTR [eax]
10004546:	3c 2d                	cmp    al,0x2d
10004548:	0f 85 76 02 00 00    	jne    100047c4 <firstRun(bool)+0x1e32>
1000454e:	eb c9                	jmp    10004519 <firstRun(bool)+0x1b87>
10004550:	a0 00 00 00 00       	mov    al,ds:0x0	10004551: R_386_32	installKey
10004555:	3c 1b                	cmp    al,0x1b
10004557:	0f 94 c0             	sete   al
1000455a:	84 c0                	test   al,al
1000455c:	0f 85 99 f9 ff ff    	jne    10003efb <firstRun(bool)+0x1569>
10004562:	a0 00 00 00 00       	mov    al,ds:0x0	10004563: R_386_32	installKey
10004567:	3c 0a                	cmp    al,0xa
10004569:	0f 94 c0             	sete   al
1000456c:	84 c0                	test   al,al
1000456e:	0f 84 50 02 00 00    	je     100047c4 <firstRun(bool)+0x1e32>
10004574:	83 ec 0c             	sub    esp,0xc
10004577:	68 00 00 00 00       	push   0x0	10004578: R_386_32	pkeybuf
1000457c:	e8 fc ff ff ff       	call   1000457d <firstRun(bool)+0x1beb>	1000457d: R_386_PC32	checkExtendedKey(char*)
10004581:	83 c4 10             	add    esp,0x10
10004584:	85 c0                	test   eax,eax
10004586:	0f 95 c0             	setne  al
10004589:	88 45 97             	mov    BYTE PTR [ebp-0x69],al
1000458c:	80 7d 97 00          	cmp    BYTE PTR [ebp-0x69],0x0
10004590:	74 5b                	je     100045ed <firstRun(bool)+0x1c5b>
10004592:	83 ec 0c             	sub    esp,0xc
10004595:	68 f0 0a 00 00       	push   0xaf0
1000459a:	e8 fc ff ff ff       	call   1000459b <firstRun(bool)+0x1c09>	1000459b: R_386_PC32	milliTenthSleep(unsigned int)
1000459f:	83 c4 10             	add    esp,0x10
100045a2:	e8 fc ff ff ff       	call   100045a3 <firstRun(bool)+0x1c11>	100045a3: R_386_PC32	drawBootScreen()
100045a7:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100045a9: R_386_32	installKey
100045ae:	83 ec 0c             	sub    esp,0xc
100045b1:	68 84 03 00 00       	push   0x384
100045b6:	e8 fc ff ff ff       	call   100045b7 <firstRun(bool)+0x1c25>	100045b7: R_386_PC32	milliTenthSleep(unsigned int)
100045bb:	83 c4 10             	add    esp,0x10
100045be:	e8 fc ff ff ff       	call   100045bf <firstRun(bool)+0x1c2d>	100045bf: R_386_PC32	drawBootScreen()
100045c3:	83 ec 0c             	sub    esp,0xc
100045c6:	68 c0 12 00 00       	push   0x12c0
100045cb:	e8 fc ff ff ff       	call   100045cc <firstRun(bool)+0x1c3a>	100045cc: R_386_PC32	milliTenthSleep(unsigned int)
100045d0:	83 c4 10             	add    esp,0x10
100045d3:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100045d5: R_386_32	installKey
100045da:	90                   	nop
100045db:	80 bd 24 ff ff ff 00 	cmp    BYTE PTR [ebp-0xdc],0x0
100045e2:	0f 84 e8 01 00 00    	je     100047d0 <firstRun(bool)+0x1e3e>
100045e8:	e9 d2 02 00 00       	jmp    100048bf <firstRun(bool)+0x1f2d>
100045ed:	83 ec 0c             	sub    esp,0xc
100045f0:	68 f0 0a 00 00       	push   0xaf0
100045f5:	e8 fc ff ff ff       	call   100045f6 <firstRun(bool)+0x1c64>	100045f6: R_386_PC32	milliTenthSleep(unsigned int)
100045fa:	83 c4 10             	add    esp,0x10
100045fd:	e8 fc ff ff ff       	call   100045fe <firstRun(bool)+0x1c6c>	100045fe: R_386_PC32	drawBootScreen()
10004602:	83 ec 08             	sub    esp,0x8
10004605:	6a 01                	push   0x1
10004607:	68 e2 58 00 10       	push   0x100058e2	10004608: R_386_32	.text
1000460c:	6a 0e                	push   0xe
1000460e:	6a 32                	push   0x32
10004610:	6a 02                	push   0x2
10004612:	6a 16                	push   0x16
10004614:	e8 fc ff ff ff       	call   10004615 <firstRun(bool)+0x1c83>	10004615: R_386_PC32	drawBasicWindowX(int, int, int, int, char const*, bool)
10004619:	83 c4 20             	add    esp,0x20
1000461c:	a1 00 00 00 00       	mov    eax,ds:0x0	1000461d: R_386_32	term
10004621:	83 ec 04             	sub    esp,0x4
10004624:	6a 05                	push   0x5
10004626:	6a 18                	push   0x18
10004628:	50                   	push   eax
10004629:	e8 fc ff ff ff       	call   1000462a <firstRun(bool)+0x1c98>	1000462a: R_386_PC32	VgaText::setCursor(int, int)
1000462e:	83 c4 10             	add    esp,0x10
10004631:	a1 00 00 00 00       	mov    eax,ds:0x0	10004632: R_386_32	term
10004636:	6a 07                	push   0x7
10004638:	6a 00                	push   0x0
1000463a:	68 f0 58 00 10       	push   0x100058f0	1000463b: R_386_32	.text
1000463f:	50                   	push   eax
10004640:	e8 fc ff ff ff       	call   10004641 <firstRun(bool)+0x1caf>	10004641: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10004645:	83 c4 10             	add    esp,0x10
10004648:	a1 00 00 00 00       	mov    eax,ds:0x0	10004649: R_386_32	term
1000464d:	83 ec 04             	sub    esp,0x4
10004650:	6a 06                	push   0x6
10004652:	6a 18                	push   0x18
10004654:	50                   	push   eax
10004655:	e8 fc ff ff ff       	call   10004656 <firstRun(bool)+0x1cc4>	10004656: R_386_PC32	VgaText::setCursor(int, int)
1000465a:	83 c4 10             	add    esp,0x10
1000465d:	a1 00 00 00 00       	mov    eax,ds:0x0	1000465e: R_386_32	term
10004662:	6a 07                	push   0x7
10004664:	6a 00                	push   0x0
10004666:	68 54 57 00 10       	push   0x10005754	10004667: R_386_32	.text
1000466b:	50                   	push   eax
1000466c:	e8 fc ff ff ff       	call   1000466d <firstRun(bool)+0x1cdb>	1000466d: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10004671:	83 c4 10             	add    esp,0x10
10004674:	a1 00 00 00 00       	mov    eax,ds:0x0	10004675: R_386_32	term
10004679:	83 ec 04             	sub    esp,0x4
1000467c:	6a 08                	push   0x8
1000467e:	6a 1c                	push   0x1c
10004680:	50                   	push   eax
10004681:	e8 fc ff ff ff       	call   10004682 <firstRun(bool)+0x1cf0>	10004682: R_386_PC32	VgaText::setCursor(int, int)
10004686:	83 c4 10             	add    esp,0x10
10004689:	a1 00 00 00 00       	mov    eax,ds:0x0	1000468a: R_386_32	term
1000468e:	6a 07                	push   0x7
10004690:	6a 00                	push   0x0
10004692:	68 00 00 00 00       	push   0x0	10004693: R_386_32	pkeybuf
10004697:	50                   	push   eax
10004698:	e8 fc ff ff ff       	call   10004699 <firstRun(bool)+0x1d07>	10004699: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
1000469d:	83 c4 10             	add    esp,0x10
100046a0:	a1 00 00 00 00       	mov    eax,ds:0x0	100046a1: R_386_32	term
100046a5:	83 ec 04             	sub    esp,0x4
100046a8:	6a 08                	push   0x8
100046aa:	6a 2c                	push   0x2c
100046ac:	50                   	push   eax
100046ad:	e8 fc ff ff ff       	call   100046ae <firstRun(bool)+0x1d1c>	100046ae: R_386_PC32	VgaText::setCursor(int, int)
100046b2:	83 c4 10             	add    esp,0x10
100046b5:	a1 00 00 00 00       	mov    eax,ds:0x0	100046b6: R_386_32	term
100046ba:	6a 07                	push   0x7
100046bc:	6a 07                	push   0x7
100046be:	6a 20                	push   0x20
100046c0:	50                   	push   eax
100046c1:	e8 fc ff ff ff       	call   100046c2 <firstRun(bool)+0x1d30>	100046c2: R_386_PC32	VgaText::putchar(char, VgaColour, VgaColour)
100046c6:	83 c4 10             	add    esp,0x10
100046c9:	a1 00 00 00 00       	mov    eax,ds:0x0	100046ca: R_386_32	term
100046ce:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
100046d1:	83 c2 1c             	add    edx,0x1c
100046d4:	83 ec 04             	sub    esp,0x4
100046d7:	6a 08                	push   0x8
100046d9:	52                   	push   edx
100046da:	50                   	push   eax
100046db:	e8 fc ff ff ff       	call   100046dc <firstRun(bool)+0x1d4a>	100046dc: R_386_PC32	VgaText::setCursor(int, int)
100046e0:	83 c4 10             	add    esp,0x10
100046e3:	83 ec 0c             	sub    esp,0xc
100046e6:	68 41 58 00 10       	push   0x10005841	100046e7: R_386_32	.text
100046eb:	6a 0b                	push   0xb
100046ed:	6a 2b                	push   0x2b
100046ef:	6a 0a                	push   0xa
100046f1:	6a 22                	push   0x22
100046f3:	e8 fc ff ff ff       	call   100046f4 <firstRun(bool)+0x1d62>	100046f4: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
100046f8:	83 c4 20             	add    esp,0x20
100046fb:	a1 00 00 00 00       	mov    eax,ds:0x0	100046fc: R_386_32	term
10004700:	83 ec 04             	sub    esp,0x4
10004703:	6a 0d                	push   0xd
10004705:	6a 24                	push   0x24
10004707:	50                   	push   eax
10004708:	e8 fc ff ff ff       	call   10004709 <firstRun(bool)+0x1d77>	10004709: R_386_PC32	VgaText::setCursor(int, int)
1000470d:	83 c4 10             	add    esp,0x10
10004710:	a1 00 00 00 00       	mov    eax,ds:0x0	10004711: R_386_32	term
10004715:	83 ec 08             	sub    esp,0x8
10004718:	68 18 59 00 10       	push   0x10005918	10004719: R_386_32	.text
1000471d:	50                   	push   eax
1000471e:	e8 fc ff ff ff       	call   1000471f <firstRun(bool)+0x1d8d>	1000471f: R_386_PC32	VgaText::puts(char const*)
10004723:	83 c4 10             	add    esp,0x10
10004726:	a1 00 00 00 00       	mov    eax,ds:0x0	10004727: R_386_32	term
1000472b:	83 ec 04             	sub    esp,0x4
1000472e:	6a 0f                	push   0xf
10004730:	6a 24                	push   0x24
10004732:	50                   	push   eax
10004733:	e8 fc ff ff ff       	call   10004734 <firstRun(bool)+0x1da2>	10004734: R_386_PC32	VgaText::setCursor(int, int)
10004738:	83 c4 10             	add    esp,0x10
1000473b:	a1 00 00 00 00       	mov    eax,ds:0x0	1000473c: R_386_32	term
10004740:	83 ec 08             	sub    esp,0x8
10004743:	68 40 59 00 10       	push   0x10005940	10004744: R_386_32	.text
10004748:	50                   	push   eax
10004749:	e8 fc ff ff ff       	call   1000474a <firstRun(bool)+0x1db8>	1000474a: R_386_PC32	VgaText::puts(char const*)
1000474e:	83 c4 10             	add    esp,0x10
10004751:	a1 00 00 00 00       	mov    eax,ds:0x0	10004752: R_386_32	term
10004756:	83 ec 04             	sub    esp,0x4
10004759:	6a 10                	push   0x10
1000475b:	6a 24                	push   0x24
1000475d:	50                   	push   eax
1000475e:	e8 fc ff ff ff       	call   1000475f <firstRun(bool)+0x1dcd>	1000475f: R_386_PC32	VgaText::setCursor(int, int)
10004763:	83 c4 10             	add    esp,0x10
10004766:	a1 00 00 00 00       	mov    eax,ds:0x0	10004767: R_386_32	term
1000476b:	83 ec 08             	sub    esp,0x8
1000476e:	68 64 59 00 10       	push   0x10005964	1000476f: R_386_32	.text
10004773:	50                   	push   eax
10004774:	e8 fc ff ff ff       	call   10004775 <firstRun(bool)+0x1de3>	10004775: R_386_PC32	VgaText::puts(char const*)
10004779:	83 c4 10             	add    esp,0x10
1000477c:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	1000477e: R_386_32	installKey
10004783:	83 ec 0c             	sub    esp,0xc
10004786:	68 94 11 00 00       	push   0x1194
1000478b:	e8 fc ff ff ff       	call   1000478c <firstRun(bool)+0x1dfa>	1000478c: R_386_PC32	milliTenthSleep(unsigned int)
10004790:	83 c4 10             	add    esp,0x10
10004793:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10004795: R_386_32	installKey
1000479a:	a0 00 00 00 00       	mov    al,ds:0x0	1000479b: R_386_32	installKey
1000479f:	84 c0                	test   al,al
100047a1:	0f 94 c0             	sete   al
100047a4:	84 c0                	test   al,al
100047a6:	74 02                	je     100047aa <firstRun(bool)+0x1e18>
100047a8:	eb f0                	jmp    1000479a <firstRun(bool)+0x1e08>
100047aa:	e8 fc ff ff ff       	call   100047ab <firstRun(bool)+0x1e19>	100047ab: R_386_PC32	drawBootScreen()
100047af:	83 ec 0c             	sub    esp,0xc
100047b2:	68 9c 18 00 00       	push   0x189c
100047b7:	e8 fc ff ff ff       	call   100047b8 <firstRun(bool)+0x1e26>	100047b8: R_386_PC32	milliTenthSleep(unsigned int)
100047bc:	83 c4 10             	add    esp,0x10
100047bf:	e9 a5 fa ff ff       	jmp    10004269 <firstRun(bool)+0x18d7>
100047c4:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100047c6: R_386_32	installKey
100047cb:	e9 3f fb ff ff       	jmp    1000430f <firstRun(bool)+0x197d>
100047d0:	e8 fc ff ff ff       	call   100047d1 <firstRun(bool)+0x1e3f>	100047d1: R_386_PC32	drawBootScreen()
100047d5:	83 ec 0c             	sub    esp,0xc
100047d8:	68 85 59 00 10       	push   0x10005985	100047d9: R_386_32	.text
100047dd:	6a 0d                	push   0xd
100047df:	6a 32                	push   0x32
100047e1:	6a 05                	push   0x5
100047e3:	6a 16                	push   0x16
100047e5:	e8 fc ff ff ff       	call   100047e6 <firstRun(bool)+0x1e54>	100047e6: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
100047ea:	83 c4 20             	add    esp,0x20
100047ed:	83 ec 0c             	sub    esp,0xc
100047f0:	6a 00                	push   0x0
100047f2:	e8 fc ff ff ff       	call   100047f3 <firstRun(bool)+0x1e61>	100047f3: R_386_PC32	bootInstallTasks(int)
100047f7:	83 c4 10             	add    esp,0x10
100047fa:	83 ec 04             	sub    esp,0x4
100047fd:	6a 0c                	push   0xc
100047ff:	68 9d 59 00 10       	push   0x1000599d	10004800: R_386_32	.text
10004804:	68 ae 59 00 10       	push   0x100059ae	10004805: R_386_32	.text
10004809:	e8 fc ff ff ff       	call   1000480a <firstRun(bool)+0x1e78>	1000480a: R_386_PC32	Reg::readIntWithDefault(char*, char*, int)
1000480e:	83 c4 10             	add    esp,0x10
10004811:	89 45 90             	mov    DWORD PTR [ebp-0x70],eax
10004814:	83 ec 0c             	sub    esp,0xc
10004817:	ff 75 90             	push   DWORD PTR [ebp-0x70]
1000481a:	e8 fc ff ff ff       	call   1000481b <firstRun(bool)+0x1e89>	1000481b: R_386_PC32	Virt::setupPageSwapping(int)
1000481f:	83 c4 10             	add    esp,0x10
10004822:	83 ec 0c             	sub    esp,0xc
10004825:	6a 01                	push   0x1
10004827:	e8 fc ff ff ff       	call   10004828 <firstRun(bool)+0x1e96>	10004828: R_386_PC32	bootInstallTasks(int)
1000482c:	83 c4 10             	add    esp,0x10
1000482f:	83 ec 0c             	sub    esp,0xc
10004832:	68 b5 59 00 10       	push   0x100059b5	10004833: R_386_32	.text
10004837:	e8 fc ff ff ff       	call   10004838 <firstRun(bool)+0x1ea6>	10004838: R_386_PC32	rmtree(char*)
1000483c:	83 c4 10             	add    esp,0x10
1000483f:	83 ec 0c             	sub    esp,0xc
10004842:	68 cf 59 00 10       	push   0x100059cf	10004843: R_386_32	.text
10004847:	e8 fc ff ff ff       	call   10004848 <firstRun(bool)+0x1eb6>	10004848: R_386_PC32	rmtree(char*)
1000484c:	83 c4 10             	add    esp,0x10
1000484f:	83 ec 08             	sub    esp,0x8
10004852:	68 c0 01 00 00       	push   0x1c0
10004857:	68 b5 59 00 10       	push   0x100059b5	10004858: R_386_32	.text
1000485c:	e8 fc ff ff ff       	call   1000485d <firstRun(bool)+0x1ecb>	1000485d: R_386_PC32	mkdir(char const*, int)
10004861:	83 c4 10             	add    esp,0x10
10004864:	83 ec 08             	sub    esp,0x8
10004867:	68 c0 01 00 00       	push   0x1c0
1000486c:	68 cf 59 00 10       	push   0x100059cf	1000486d: R_386_32	.text
10004871:	e8 fc ff ff ff       	call   10004872 <firstRun(bool)+0x1ee0>	10004872: R_386_PC32	mkdir(char const*, int)
10004876:	83 c4 10             	add    esp,0x10
10004879:	83 ec 08             	sub    esp,0x8
1000487c:	68 b5 59 00 10       	push   0x100059b5	1000487d: R_386_32	.text
10004881:	68 e8 59 00 10       	push   0x100059e8	10004882: R_386_32	.text
10004886:	e8 fc ff ff ff       	call   10004887 <firstRun(bool)+0x1ef5>	10004887: R_386_PC32	copytree(char*, char*)
1000488b:	83 c4 10             	add    esp,0x10
1000488e:	83 ec 0c             	sub    esp,0xc
10004891:	6a 02                	push   0x2
10004893:	e8 fc ff ff ff       	call   10004894 <firstRun(bool)+0x1f02>	10004894: R_386_PC32	bootInstallTasks(int)
10004898:	83 c4 10             	add    esp,0x10
1000489b:	83 ec 0c             	sub    esp,0xc
1000489e:	68 00 00 00 00       	push   0x0	1000489f: R_386_32	currName
100048a3:	e8 fc ff ff ff       	call   100048a4 <firstRun(bool)+0x1f12>	100048a4: R_386_PC32	createUser(char const*)
100048a8:	83 c4 10             	add    esp,0x10
100048ab:	83 ec 0c             	sub    esp,0xc
100048ae:	6a 03                	push   0x3
100048b0:	e8 fc ff ff ff       	call   100048b1 <firstRun(bool)+0x1f1f>	100048b1: R_386_PC32	bootInstallTasks(int)
100048b5:	83 c4 10             	add    esp,0x10
100048b8:	c6 05 00 00 00 00 01 	mov    BYTE PTR ds:0x0,0x1	100048ba: R_386_32	VgaText::hiddenOut
100048bf:	8d 65 f4             	lea    esp,[ebp-0xc]
100048c2:	5b                   	pop    ebx
100048c3:	5e                   	pop    esi
100048c4:	5f                   	pop    edi
100048c5:	5d                   	pop    ebp
100048c6:	c3                   	ret    

100048c7 <loadExtensions()>:
100048c7:	55                   	push   ebp
100048c8:	89 e5                	mov    ebp,esp
100048ca:	83 ec 08             	sub    esp,0x8
100048cd:	83 ec 0c             	sub    esp,0xc
100048d0:	68 90 5a 00 10       	push   0x10005a90	100048d1: R_386_32	.text
100048d5:	e8 fc ff ff ff       	call   100048d6 <loadExtensions()+0xf>	100048d6: R_386_PC32	KeSetBootMessage(char const*)
100048da:	83 c4 10             	add    esp,0x10
100048dd:	90                   	nop
100048de:	c9                   	leave  
100048df:	c3                   	ret    

100048e0 <rgtree(Reghive_Tag*, int, int)>:
100048e0:	55                   	push   ebp
100048e1:	89 e5                	mov    ebp,esp
100048e3:	53                   	push   ebx
100048e4:	83 ec 44             	sub    esp,0x44
100048e7:	83 7d 0c 01          	cmp    DWORD PTR [ebp+0xc],0x1
100048eb:	75 16                	jne    10004903 <rgtree(Reghive_Tag*, int, int)+0x23>
100048ed:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
100048f1:	75 10                	jne    10004903 <rgtree(Reghive_Tag*, int, int)+0x23>
100048f3:	83 ec 0c             	sub    esp,0xc
100048f6:	68 a6 5a 00 10       	push   0x10005aa6	100048f7: R_386_32	.text
100048fb:	e8 fc ff ff ff       	call   100048fc <rgtree(Reghive_Tag*, int, int)+0x1c>	100048fc: R_386_PC32	Dbg::kprintf(char const*, ...)
10004900:	83 c4 10             	add    esp,0x10
10004903:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
10004907:	0f 8e a9 00 00 00    	jle    100049b6 <rgtree(Reghive_Tag*, int, int)+0xd6>
1000490d:	83 ec 04             	sub    esp,0x4
10004910:	6a 32                	push   0x32
10004912:	6a 00                	push   0x0
10004914:	8d 45 be             	lea    eax,[ebp-0x42]
10004917:	50                   	push   eax
10004918:	e8 fc ff ff ff       	call   10004919 <rgtree(Reghive_Tag*, int, int)+0x39>	10004919: R_386_PC32	memset
1000491d:	83 c4 10             	add    esp,0x10
10004920:	83 ec 04             	sub    esp,0x4
10004923:	8d 45 be             	lea    eax,[ebp-0x42]
10004926:	50                   	push   eax
10004927:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
1000492a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000492d:	e8 fc ff ff ff       	call   1000492e <rgtree(Reghive_Tag*, int, int)+0x4e>	1000492e: R_386_PC32	CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)
10004932:	83 c4 10             	add    esp,0x10
10004935:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10004938:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
1000493f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10004942:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
10004945:	7d 15                	jge    1000495c <rgtree(Reghive_Tag*, int, int)+0x7c>
10004947:	83 ec 0c             	sub    esp,0xc
1000494a:	68 fd 55 00 10       	push   0x100055fd	1000494b: R_386_32	.text
1000494f:	e8 fc ff ff ff       	call   10004950 <rgtree(Reghive_Tag*, int, int)+0x70>	10004950: R_386_PC32	Dbg::kprintf(char const*, ...)
10004954:	83 c4 10             	add    esp,0x10
10004957:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
1000495a:	eb e3                	jmp    1000493f <rgtree(Reghive_Tag*, int, int)+0x5f>
1000495c:	83 ec 08             	sub    esp,0x8
1000495f:	8d 45 be             	lea    eax,[ebp-0x42]
10004962:	50                   	push   eax
10004963:	68 ab 5a 00 10       	push   0x10005aab	10004964: R_386_32	.text
10004968:	e8 fc ff ff ff       	call   10004969 <rgtree(Reghive_Tag*, int, int)+0x89>	10004969: R_386_PC32	Dbg::kprintf(char const*, ...)
1000496d:	83 c4 10             	add    esp,0x10
10004970:	83 7d f0 4e          	cmp    DWORD PTR [ebp-0x10],0x4e
10004974:	75 27                	jne    1000499d <rgtree(Reghive_Tag*, int, int)+0xbd>
10004976:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
10004979:	8d 58 04             	lea    ebx,[eax+0x4]
1000497c:	83 ec 08             	sub    esp,0x8
1000497f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10004982:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10004985:	e8 fc ff ff ff       	call   10004986 <rgtree(Reghive_Tag*, int, int)+0xa6>	10004986: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
1000498a:	83 c4 10             	add    esp,0x10
1000498d:	83 ec 04             	sub    esp,0x4
10004990:	53                   	push   ebx
10004991:	50                   	push   eax
10004992:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10004995:	e8 fc ff ff ff       	call   10004996 <rgtree(Reghive_Tag*, int, int)+0xb6>	10004996: R_386_PC32	rgtree(Reghive_Tag*, int, int)
1000499a:	83 c4 10             	add    esp,0x10
1000499d:	83 ec 08             	sub    esp,0x8
100049a0:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
100049a3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100049a6:	e8 fc ff ff ff       	call   100049a7 <rgtree(Reghive_Tag*, int, int)+0xc7>	100049a7: R_386_PC32	CmGetNext(Reghive_Tag*, int)
100049ab:	83 c4 10             	add    esp,0x10
100049ae:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
100049b1:	e9 4d ff ff ff       	jmp    10004903 <rgtree(Reghive_Tag*, int, int)+0x23>
100049b6:	90                   	nop
100049b7:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
100049ba:	c9                   	leave  
100049bb:	c3                   	ret    

100049bc <begin(void*)>:
100049bc:	55                   	push   ebp
100049bd:	89 e5                	mov    ebp,esp
100049bf:	57                   	push   edi
100049c0:	56                   	push   esi
100049c1:	53                   	push   ebx
100049c2:	81 ec 5c 02 00 00    	sub    esp,0x25c
100049c8:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
100049cc:	83 ec 0c             	sub    esp,0xc
100049cf:	68 14 01 00 00       	push   0x114
100049d4:	e8 fc ff ff ff       	call   100049d5 <begin(void*)+0x19>	100049d5: R_386_PC32	operator new(unsigned long)
100049d9:	83 c4 10             	add    esp,0x10
100049dc:	89 c3                	mov    ebx,eax
100049de:	a1 00 00 00 00       	mov    eax,ds:0x0	100049df: R_386_32	kernelProcess
100049e3:	83 ec 04             	sub    esp,0x4
100049e6:	50                   	push   eax
100049e7:	68 b0 5a 00 10       	push   0x10005ab0	100049e8: R_386_32	.text
100049ec:	53                   	push   ebx
100049ed:	e8 fc ff ff ff       	call   100049ee <begin(void*)+0x32>	100049ee: R_386_PC32	File::File(char const*, Process*)
100049f2:	83 c4 10             	add    esp,0x10
100049f5:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
100049f8:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
100049fc:	75 10                	jne    10004a0e <begin(void*)+0x52>
100049fe:	83 ec 0c             	sub    esp,0xc
10004a01:	68 ce 5a 00 10       	push   0x10005ace	10004a02: R_386_32	.text
10004a06:	e8 fc ff ff ff       	call   10004a07 <begin(void*)+0x4b>	10004a07: R_386_PC32	KePanic(char const*)
10004a0b:	83 c4 10             	add    esp,0x10
10004a0e:	83 ec 08             	sub    esp,0x8
10004a11:	6a 01                	push   0x1
10004a13:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10004a16:	e8 fc ff ff ff       	call   10004a17 <begin(void*)+0x5b>	10004a17: R_386_PC32	File::open(FileOpenMode)
10004a1b:	83 c4 10             	add    esp,0x10
10004a1e:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
10004a21:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
10004a25:	75 10                	jne    10004a37 <begin(void*)+0x7b>
10004a27:	83 ec 0c             	sub    esp,0xc
10004a2a:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10004a2d:	e8 fc ff ff ff       	call   10004a2e <begin(void*)+0x72>	10004a2e: R_386_PC32	File::close()
10004a32:	83 c4 10             	add    esp,0x10
10004a35:	eb 04                	jmp    10004a3b <begin(void*)+0x7f>
10004a37:	c6 45 e7 01          	mov    BYTE PTR [ebp-0x19],0x1
10004a3b:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
10004a3f:	74 15                	je     10004a56 <begin(void*)+0x9a>
10004a41:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10004a44:	8b 00                	mov    eax,DWORD PTR [eax]
10004a46:	83 c0 08             	add    eax,0x8
10004a49:	8b 00                	mov    eax,DWORD PTR [eax]
10004a4b:	83 ec 0c             	sub    esp,0xc
10004a4e:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10004a51:	ff d0                	call   eax
10004a53:	83 c4 10             	add    esp,0x10
10004a56:	c6 05 00 00 00 00 01 	mov    BYTE PTR ds:0x0,0x1	10004a58: R_386_32	KeIsPreemptionOn
10004a5d:	80 7d e7 00          	cmp    BYTE PTR [ebp-0x19],0x0
10004a61:	74 0f                	je     10004a72 <begin(void*)+0xb6>
10004a63:	83 ec 0c             	sub    esp,0xc
10004a66:	6a 00                	push   0x0
10004a68:	e8 fc ff ff ff       	call   10004a69 <begin(void*)+0xad>	10004a69: R_386_PC32	firstRun(bool)
10004a6d:	83 c4 10             	add    esp,0x10
10004a70:	eb 05                	jmp    10004a77 <begin(void*)+0xbb>
10004a72:	e8 fc ff ff ff       	call   10004a73 <begin(void*)+0xb7>	10004a73: R_386_PC32	loadExtensions()
10004a77:	8d 45 b0             	lea    eax,[ebp-0x50]
10004a7a:	bb 0c 5d 00 10       	mov    ebx,0x10005d0c	10004a7b: R_386_32	.text
10004a7f:	ba 04 00 00 00       	mov    edx,0x4
10004a84:	89 c7                	mov    edi,eax
10004a86:	89 de                	mov    esi,ebx
10004a88:	89 d1                	mov    ecx,edx
10004a8a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10004a8c:	80 7d e7 00          	cmp    BYTE PTR [ebp-0x19],0x0
10004a90:	0f 84 e2 04 00 00    	je     10004f78 <begin(void*)+0x5bc>
10004a96:	83 ec 0c             	sub    esp,0xc
10004a99:	68 24 07 00 00       	push   0x724
10004a9e:	e8 fc ff ff ff       	call   10004a9f <begin(void*)+0xe3>	10004a9f: R_386_PC32	operator new(unsigned long)
10004aa3:	83 c4 10             	add    esp,0x10
10004aa6:	89 c3                	mov    ebx,eax
10004aa8:	8d 45 b0             	lea    eax,[ebp-0x50]
10004aab:	50                   	push   eax
10004aac:	6a 00                	push   0x0
10004aae:	68 de 5a 00 10       	push   0x10005ade	10004aaf: R_386_32	.text
10004ab3:	53                   	push   ebx
10004ab4:	e8 fc ff ff ff       	call   10004ab5 <begin(void*)+0xf9>	10004ab5: R_386_PC32	Process::Process(char const*, Process*, char**)
10004ab9:	83 c4 10             	add    esp,0x10
10004abc:	89 5d d0             	mov    DWORD PTR [ebp-0x30],ebx
10004abf:	83 ec 0c             	sub    esp,0xc
10004ac2:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10004ac5:	e8 fc ff ff ff       	call   10004ac6 <begin(void*)+0x10a>	10004ac6: R_386_PC32	Process::createUserThread()
10004aca:	83 c4 10             	add    esp,0x10
10004acd:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10004acf: R_386_32	VgaText::hiddenOut
10004ad4:	a1 00 00 00 00       	mov    eax,ds:0x0	10004ad5: R_386_32	term
10004ad9:	83 ec 0c             	sub    esp,0xc
10004adc:	50                   	push   eax
10004add:	e8 fc ff ff ff       	call   10004ade <begin(void*)+0x122>	10004ade: R_386_PC32	setActiveTerminal(VgaText*)
10004ae2:	83 c4 10             	add    esp,0x10
10004ae5:	e8 fc ff ff ff       	call   10004ae6 <begin(void*)+0x12a>	10004ae6: R_386_PC32	drawBootScreen()
10004aea:	83 ec 0c             	sub    esp,0xc
10004aed:	68 85 59 00 10       	push   0x10005985	10004aee: R_386_32	.text
10004af2:	6a 0d                	push   0xd
10004af4:	6a 32                	push   0x32
10004af6:	6a 05                	push   0x5
10004af8:	6a 16                	push   0x16
10004afa:	e8 fc ff ff ff       	call   10004afb <begin(void*)+0x13f>	10004afb: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
10004aff:	83 c4 20             	add    esp,0x20
10004b02:	83 ec 0c             	sub    esp,0xc
10004b05:	6a 03                	push   0x3
10004b07:	e8 fc ff ff ff       	call   10004b08 <begin(void*)+0x14c>	10004b08: R_386_PC32	bootInstallTasks(int)
10004b0c:	83 c4 10             	add    esp,0x10
10004b0f:	c6 05 00 00 00 00 01 	mov    BYTE PTR ds:0x0,0x1	10004b11: R_386_32	VgaText::hiddenOut
10004b16:	83 ec 0c             	sub    esp,0xc
10004b19:	68 14 01 00 00       	push   0x114
10004b1e:	e8 fc ff ff ff       	call   10004b1f <begin(void*)+0x163>	10004b1f: R_386_PC32	operator new(unsigned long)
10004b23:	83 c4 10             	add    esp,0x10
10004b26:	89 c3                	mov    ebx,eax
10004b28:	a1 00 00 00 00       	mov    eax,ds:0x0	10004b29: R_386_32	kernelProcess
10004b2d:	83 ec 04             	sub    esp,0x4
10004b30:	50                   	push   eax
10004b31:	68 fb 5a 00 10       	push   0x10005afb	10004b32: R_386_32	.text
10004b36:	53                   	push   ebx
10004b37:	e8 fc ff ff ff       	call   10004b38 <begin(void*)+0x17c>	10004b38: R_386_PC32	File::File(char const*, Process*)
10004b3c:	83 c4 10             	add    esp,0x10
10004b3f:	89 5d cc             	mov    DWORD PTR [ebp-0x34],ebx
10004b42:	83 ec 08             	sub    esp,0x8
10004b45:	6a 01                	push   0x1
10004b47:	ff 75 cc             	push   DWORD PTR [ebp-0x34]
10004b4a:	e8 fc ff ff ff       	call   10004b4b <begin(void*)+0x18f>	10004b4b: R_386_PC32	File::open(FileOpenMode)
10004b4f:	83 c4 10             	add    esp,0x10
10004b52:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
10004b55:	83 7d c8 00          	cmp    DWORD PTR [ebp-0x38],0x0
10004b59:	75 39                	jne    10004b94 <begin(void*)+0x1d8>
10004b5b:	83 ec 0c             	sub    esp,0xc
10004b5e:	ff 75 cc             	push   DWORD PTR [ebp-0x34]
10004b61:	e8 fc ff ff ff       	call   10004b62 <begin(void*)+0x1a6>	10004b62: R_386_PC32	File::close()
10004b66:	83 c4 10             	add    esp,0x10
10004b69:	83 ec 0c             	sub    esp,0xc
10004b6c:	ff 75 cc             	push   DWORD PTR [ebp-0x34]
10004b6f:	e8 fc ff ff ff       	call   10004b70 <begin(void*)+0x1b4>	10004b70: R_386_PC32	File::unlink()
10004b74:	83 c4 10             	add    esp,0x10
10004b77:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
10004b7b:	74 44                	je     10004bc1 <begin(void*)+0x205>
10004b7d:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
10004b80:	8b 00                	mov    eax,DWORD PTR [eax]
10004b82:	83 c0 08             	add    eax,0x8
10004b85:	8b 00                	mov    eax,DWORD PTR [eax]
10004b87:	83 ec 0c             	sub    esp,0xc
10004b8a:	ff 75 cc             	push   DWORD PTR [ebp-0x34]
10004b8d:	ff d0                	call   eax
10004b8f:	83 c4 10             	add    esp,0x10
10004b92:	eb 2d                	jmp    10004bc1 <begin(void*)+0x205>
10004b94:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
10004b98:	74 15                	je     10004baf <begin(void*)+0x1f3>
10004b9a:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
10004b9d:	8b 00                	mov    eax,DWORD PTR [eax]
10004b9f:	83 c0 08             	add    eax,0x8
10004ba2:	8b 00                	mov    eax,DWORD PTR [eax]
10004ba4:	83 ec 0c             	sub    esp,0xc
10004ba7:	ff 75 cc             	push   DWORD PTR [ebp-0x34]
10004baa:	ff d0                	call   eax
10004bac:	83 c4 10             	add    esp,0x10
10004baf:	83 ec 0c             	sub    esp,0xc
10004bb2:	6a 01                	push   0x1
10004bb4:	e8 fc ff ff ff       	call   10004bb5 <begin(void*)+0x1f9>	10004bb5: R_386_PC32	sleep(unsigned int)
10004bb9:	83 c4 10             	add    esp,0x10
10004bbc:	e9 55 ff ff ff       	jmp    10004b16 <begin(void*)+0x15a>
10004bc1:	90                   	nop
10004bc2:	83 ec 0c             	sub    esp,0xc
10004bc5:	6a 02                	push   0x2
10004bc7:	e8 fc ff ff ff       	call   10004bc8 <begin(void*)+0x20c>	10004bc8: R_386_PC32	sleep(unsigned int)
10004bcc:	83 c4 10             	add    esp,0x10
10004bcf:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10004bd1: R_386_32	VgaText::hiddenOut
10004bd6:	a1 00 00 00 00       	mov    eax,ds:0x0	10004bd7: R_386_32	term
10004bdb:	83 ec 0c             	sub    esp,0xc
10004bde:	50                   	push   eax
10004bdf:	e8 fc ff ff ff       	call   10004be0 <begin(void*)+0x224>	10004be0: R_386_PC32	setActiveTerminal(VgaText*)
10004be4:	83 c4 10             	add    esp,0x10
10004be7:	e8 fc ff ff ff       	call   10004be8 <begin(void*)+0x22c>	10004be8: R_386_PC32	drawBootScreen()
10004bec:	83 ec 0c             	sub    esp,0xc
10004bef:	68 85 59 00 10       	push   0x10005985	10004bf0: R_386_32	.text
10004bf4:	6a 0d                	push   0xd
10004bf6:	6a 32                	push   0x32
10004bf8:	6a 05                	push   0x5
10004bfa:	6a 16                	push   0x16
10004bfc:	e8 fc ff ff ff       	call   10004bfd <begin(void*)+0x241>	10004bfd: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
10004c01:	83 c4 20             	add    esp,0x20
10004c04:	83 ec 0c             	sub    esp,0xc
10004c07:	6a 04                	push   0x4
10004c09:	e8 fc ff ff ff       	call   10004c0a <begin(void*)+0x24e>	10004c0a: R_386_PC32	bootInstallTasks(int)
10004c0e:	83 c4 10             	add    esp,0x10
10004c11:	83 ec 08             	sub    esp,0x8
10004c14:	68 dd dd 00 00       	push   0xdddd
10004c19:	68 05 5b 00 10       	push   0x10005b05	10004c1a: R_386_32	.text
10004c1e:	e8 fc ff ff ff       	call   10004c1f <begin(void*)+0x263>	10004c1f: R_386_PC32	backupTree(char*, unsigned short)
10004c23:	83 c4 10             	add    esp,0x10
10004c26:	83 ec 08             	sub    esp,0x8
10004c29:	68 ee ee 00 00       	push   0xeeee
10004c2e:	68 18 5b 00 10       	push   0x10005b18	10004c2f: R_386_32	.text
10004c33:	e8 fc ff ff ff       	call   10004c34 <begin(void*)+0x278>	10004c34: R_386_PC32	backupTree(char*, unsigned short)
10004c38:	83 c4 10             	add    esp,0x10
10004c3b:	83 ec 08             	sub    esp,0x8
10004c3e:	68 ff ff 00 00       	push   0xffff
10004c43:	68 2a 5b 00 10       	push   0x10005b2a	10004c44: R_386_32	.text
10004c48:	e8 fc ff ff ff       	call   10004c49 <begin(void*)+0x28d>	10004c49: R_386_PC32	backupTree(char*, unsigned short)
10004c4d:	83 c4 10             	add    esp,0x10
10004c50:	83 ec 0c             	sub    esp,0xc
10004c53:	6a 05                	push   0x5
10004c55:	e8 fc ff ff ff       	call   10004c56 <begin(void*)+0x29a>	10004c56: R_386_PC32	bootInstallTasks(int)
10004c5a:	83 c4 10             	add    esp,0x10
10004c5d:	83 ec 0c             	sub    esp,0xc
10004c60:	68 40 5b 00 10       	push   0x10005b40	10004c61: R_386_32	.text
10004c65:	e8 fc ff ff ff       	call   10004c66 <begin(void*)+0x2aa>	10004c66: R_386_PC32	CmOpen(char const*)
10004c6a:	83 c4 10             	add    esp,0x10
10004c6d:	89 45 c4             	mov    DWORD PTR [ebp-0x3c],eax
10004c70:	83 ec 04             	sub    esp,0x4
10004c73:	68 65 5b 00 10       	push   0x10005b65	10004c74: R_386_32	.text
10004c78:	6a 00                	push   0x0
10004c7a:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
10004c7d:	e8 fc ff ff ff       	call   10004c7e <begin(void*)+0x2c2>	10004c7e: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
10004c82:	83 c4 10             	add    esp,0x10
10004c85:	83 ec 08             	sub    esp,0x8
10004c88:	68 65 5b 00 10       	push   0x10005b65	10004c89: R_386_32	.text
10004c8d:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
10004c90:	e8 fc ff ff ff       	call   10004c91 <begin(void*)+0x2d5>	10004c91: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10004c95:	83 c4 10             	add    esp,0x10
10004c98:	83 ec 08             	sub    esp,0x8
10004c9b:	50                   	push   eax
10004c9c:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
10004c9f:	e8 fc ff ff ff       	call   10004ca0 <begin(void*)+0x2e4>	10004ca0: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10004ca4:	83 c4 10             	add    esp,0x10
10004ca7:	83 ec 04             	sub    esp,0x4
10004caa:	68 6c 5b 00 10       	push   0x10005b6c	10004cab: R_386_32	.text
10004caf:	50                   	push   eax
10004cb0:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
10004cb3:	e8 fc ff ff ff       	call   10004cb4 <begin(void*)+0x2f8>	10004cb4: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
10004cb8:	83 c4 10             	add    esp,0x10
10004cbb:	83 ec 08             	sub    esp,0x8
10004cbe:	68 65 5b 00 10       	push   0x10005b65	10004cbf: R_386_32	.text
10004cc3:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
10004cc6:	e8 fc ff ff ff       	call   10004cc7 <begin(void*)+0x30b>	10004cc7: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10004ccb:	83 c4 10             	add    esp,0x10
10004cce:	83 ec 08             	sub    esp,0x8
10004cd1:	50                   	push   eax
10004cd2:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
10004cd5:	e8 fc ff ff ff       	call   10004cd6 <begin(void*)+0x31a>	10004cd6: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10004cda:	83 c4 10             	add    esp,0x10
10004cdd:	83 ec 04             	sub    esp,0x4
10004ce0:	68 72 5b 00 10       	push   0x10005b72	10004ce1: R_386_32	.text
10004ce5:	50                   	push   eax
10004ce6:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
10004ce9:	e8 fc ff ff ff       	call   10004cea <begin(void*)+0x32e>	10004cea: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
10004cee:	83 c4 10             	add    esp,0x10
10004cf1:	83 ec 08             	sub    esp,0x8
10004cf4:	68 77 5b 00 10       	push   0x10005b77	10004cf5: R_386_32	.text
10004cf9:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
10004cfc:	e8 fc ff ff ff       	call   10004cfd <begin(void*)+0x341>	10004cfd: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10004d01:	83 c4 10             	add    esp,0x10
10004d04:	83 ec 08             	sub    esp,0x8
10004d07:	50                   	push   eax
10004d08:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
10004d0b:	e8 fc ff ff ff       	call   10004d0c <begin(void*)+0x350>	10004d0c: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10004d10:	83 c4 10             	add    esp,0x10
10004d13:	83 ec 04             	sub    esp,0x4
10004d16:	68 84 5b 00 10       	push   0x10005b84	10004d17: R_386_32	.text
10004d1b:	50                   	push   eax
10004d1c:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
10004d1f:	e8 fc ff ff ff       	call   10004d20 <begin(void*)+0x364>	10004d20: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
10004d24:	83 c4 10             	add    esp,0x10
10004d27:	83 ec 08             	sub    esp,0x8
10004d2a:	68 77 5b 00 10       	push   0x10005b77	10004d2b: R_386_32	.text
10004d2f:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
10004d32:	e8 fc ff ff ff       	call   10004d33 <begin(void*)+0x377>	10004d33: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10004d37:	83 c4 10             	add    esp,0x10
10004d3a:	83 ec 08             	sub    esp,0x8
10004d3d:	50                   	push   eax
10004d3e:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
10004d41:	e8 fc ff ff ff       	call   10004d42 <begin(void*)+0x386>	10004d42: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10004d46:	83 c4 10             	add    esp,0x10
10004d49:	83 ec 04             	sub    esp,0x4
10004d4c:	68 89 5b 00 10       	push   0x10005b89	10004d4d: R_386_32	.text
10004d51:	50                   	push   eax
10004d52:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
10004d55:	e8 fc ff ff ff       	call   10004d56 <begin(void*)+0x39a>	10004d56: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
10004d5a:	83 c4 10             	add    esp,0x10
10004d5d:	83 ec 08             	sub    esp,0x8
10004d60:	68 77 5b 00 10       	push   0x10005b77	10004d61: R_386_32	.text
10004d65:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
10004d68:	e8 fc ff ff ff       	call   10004d69 <begin(void*)+0x3ad>	10004d69: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10004d6d:	83 c4 10             	add    esp,0x10
10004d70:	83 ec 08             	sub    esp,0x8
10004d73:	50                   	push   eax
10004d74:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
10004d77:	e8 fc ff ff ff       	call   10004d78 <begin(void*)+0x3bc>	10004d78: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10004d7c:	83 c4 10             	add    esp,0x10
10004d7f:	83 ec 04             	sub    esp,0x4
10004d82:	68 91 5b 00 10       	push   0x10005b91	10004d83: R_386_32	.text
10004d87:	50                   	push   eax
10004d88:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
10004d8b:	e8 fc ff ff ff       	call   10004d8c <begin(void*)+0x3d0>	10004d8c: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
10004d90:	83 c4 10             	add    esp,0x10
10004d93:	a1 00 00 00 00       	mov    eax,ds:0x0	10004d94: R_386_32	modesel
10004d98:	89 c3                	mov    ebx,eax
10004d9a:	89 c6                	mov    esi,eax
10004d9c:	c1 fe 1f             	sar    esi,0x1f
10004d9f:	83 ec 08             	sub    esp,0x8
10004da2:	68 9c 5b 00 10       	push   0x10005b9c	10004da3: R_386_32	.text
10004da7:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
10004daa:	e8 fc ff ff ff       	call   10004dab <begin(void*)+0x3ef>	10004dab: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10004daf:	83 c4 10             	add    esp,0x10
10004db2:	83 ec 08             	sub    esp,0x8
10004db5:	50                   	push   eax
10004db6:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
10004db9:	e8 fc ff ff ff       	call   10004dba <begin(void*)+0x3fe>	10004dba: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10004dbe:	83 c4 10             	add    esp,0x10
10004dc1:	83 ec 08             	sub    esp,0x8
10004dc4:	6a 6a                	push   0x6a
10004dc6:	56                   	push   esi
10004dc7:	53                   	push   ebx
10004dc8:	68 a8 5b 00 10       	push   0x10005ba8	10004dc9: R_386_32	.text
10004dcd:	50                   	push   eax
10004dce:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
10004dd1:	e8 fc ff ff ff       	call   10004dd2 <begin(void*)+0x416>	10004dd2: R_386_PC32	CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)
10004dd6:	83 c4 20             	add    esp,0x20
10004dd9:	83 ec 08             	sub    esp,0x8
10004ddc:	68 b0 5b 00 10       	push   0x10005bb0	10004ddd: R_386_32	.text
10004de1:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
10004de4:	e8 fc ff ff ff       	call   10004de5 <begin(void*)+0x429>	10004de5: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10004de9:	83 c4 10             	add    esp,0x10
10004dec:	83 ec 04             	sub    esp,0x4
10004def:	68 00 00 00 00       	push   0x0	10004df0: R_386_32	currName
10004df4:	50                   	push   eax
10004df5:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
10004df8:	e8 fc ff ff ff       	call   10004df9 <begin(void*)+0x43d>	10004df9: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10004dfd:	83 c4 10             	add    esp,0x10
10004e00:	83 ec 08             	sub    esp,0x8
10004e03:	68 c2 5b 00 10       	push   0x10005bc2	10004e04: R_386_32	.text
10004e08:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
10004e0b:	e8 fc ff ff ff       	call   10004e0c <begin(void*)+0x450>	10004e0c: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10004e10:	83 c4 10             	add    esp,0x10
10004e13:	83 ec 04             	sub    esp,0x4
10004e16:	68 00 00 00 00       	push   0x0	10004e17: R_386_32	currComp
10004e1b:	50                   	push   eax
10004e1c:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
10004e1f:	e8 fc ff ff ff       	call   10004e20 <begin(void*)+0x464>	10004e20: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10004e24:	83 c4 10             	add    esp,0x10
10004e27:	83 ec 08             	sub    esp,0x8
10004e2a:	68 d7 5b 00 10       	push   0x10005bd7	10004e2b: R_386_32	.text
10004e2f:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
10004e32:	e8 fc ff ff ff       	call   10004e33 <begin(void*)+0x477>	10004e33: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10004e37:	83 c4 10             	add    esp,0x10
10004e3a:	83 ec 04             	sub    esp,0x4
10004e3d:	68 00 00 00 00       	push   0x0	10004e3e: R_386_32	pkeybuf
10004e42:	50                   	push   eax
10004e43:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
10004e46:	e8 fc ff ff ff       	call   10004e47 <begin(void*)+0x48b>	10004e47: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
10004e4b:	83 c4 10             	add    esp,0x10
10004e4e:	83 ec 0c             	sub    esp,0xc
10004e51:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
10004e54:	e8 fc ff ff ff       	call   10004e55 <begin(void*)+0x499>	10004e55: R_386_PC32	CmClose(Reghive_Tag*)
10004e59:	83 c4 10             	add    esp,0x10
10004e5c:	a1 00 00 00 00       	mov    eax,ds:0x0	10004e5d: R_386_32	term
10004e61:	83 ec 0c             	sub    esp,0xc
10004e64:	50                   	push   eax
10004e65:	e8 fc ff ff ff       	call   10004e66 <begin(void*)+0x4aa>	10004e66: R_386_PC32	setActiveTerminal(VgaText*)
10004e6a:	83 c4 10             	add    esp,0x10
10004e6d:	e8 fc ff ff ff       	call   10004e6e <begin(void*)+0x4b2>	10004e6e: R_386_PC32	drawBootScreen()
10004e72:	83 ec 0c             	sub    esp,0xc
10004e75:	68 85 59 00 10       	push   0x10005985	10004e76: R_386_32	.text
10004e7a:	6a 0d                	push   0xd
10004e7c:	6a 32                	push   0x32
10004e7e:	6a 05                	push   0x5
10004e80:	6a 16                	push   0x16
10004e82:	e8 fc ff ff ff       	call   10004e83 <begin(void*)+0x4c7>	10004e83: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
10004e87:	83 c4 20             	add    esp,0x20
10004e8a:	a1 00 00 00 00       	mov    eax,ds:0x0	10004e8b: R_386_32	term
10004e8f:	83 ec 04             	sub    esp,0x4
10004e92:	6a 08                	push   0x8
10004e94:	6a 18                	push   0x18
10004e96:	50                   	push   eax
10004e97:	e8 fc ff ff ff       	call   10004e98 <begin(void*)+0x4dc>	10004e98: R_386_PC32	VgaText::setCursor(int, int)
10004e9c:	83 c4 10             	add    esp,0x10
10004e9f:	a1 00 00 00 00       	mov    eax,ds:0x0	10004ea0: R_386_32	term
10004ea4:	83 ec 08             	sub    esp,0x8
10004ea7:	68 f0 5b 00 10       	push   0x10005bf0	10004ea8: R_386_32	.text
10004eac:	50                   	push   eax
10004ead:	e8 fc ff ff ff       	call   10004eae <begin(void*)+0x4f2>	10004eae: R_386_PC32	VgaText::puts(char const*)
10004eb2:	83 c4 10             	add    esp,0x10
10004eb5:	a1 00 00 00 00       	mov    eax,ds:0x0	10004eb6: R_386_32	term
10004eba:	83 ec 04             	sub    esp,0x4
10004ebd:	6a 0a                	push   0xa
10004ebf:	6a 18                	push   0x18
10004ec1:	50                   	push   eax
10004ec2:	e8 fc ff ff ff       	call   10004ec3 <begin(void*)+0x507>	10004ec3: R_386_PC32	VgaText::setCursor(int, int)
10004ec7:	83 c4 10             	add    esp,0x10
10004eca:	a1 00 00 00 00       	mov    eax,ds:0x0	10004ecb: R_386_32	term
10004ecf:	83 ec 08             	sub    esp,0x8
10004ed2:	68 18 5c 00 10       	push   0x10005c18	10004ed3: R_386_32	.text
10004ed7:	50                   	push   eax
10004ed8:	e8 fc ff ff ff       	call   10004ed9 <begin(void*)+0x51d>	10004ed9: R_386_PC32	VgaText::puts(char const*)
10004edd:	83 c4 10             	add    esp,0x10
10004ee0:	a1 00 00 00 00       	mov    eax,ds:0x0	10004ee1: R_386_32	term
10004ee5:	83 ec 04             	sub    esp,0x4
10004ee8:	6a 0b                	push   0xb
10004eea:	6a 18                	push   0x18
10004eec:	50                   	push   eax
10004eed:	e8 fc ff ff ff       	call   10004eee <begin(void*)+0x532>	10004eee: R_386_PC32	VgaText::setCursor(int, int)
10004ef2:	83 c4 10             	add    esp,0x10
10004ef5:	a1 00 00 00 00       	mov    eax,ds:0x0	10004ef6: R_386_32	term
10004efa:	83 ec 08             	sub    esp,0x8
10004efd:	68 44 5c 00 10       	push   0x10005c44	10004efe: R_386_32	.text
10004f02:	50                   	push   eax
10004f03:	e8 fc ff ff ff       	call   10004f04 <begin(void*)+0x548>	10004f04: R_386_PC32	VgaText::puts(char const*)
10004f08:	83 c4 10             	add    esp,0x10
10004f0b:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10004f0d: R_386_32	installKey
10004f12:	a0 00 00 00 00       	mov    al,ds:0x0	10004f13: R_386_32	installKey
10004f17:	84 c0                	test   al,al
10004f19:	0f 94 c0             	sete   al
10004f1c:	84 c0                	test   al,al
10004f1e:	74 02                	je     10004f22 <begin(void*)+0x566>
10004f20:	eb f0                	jmp    10004f12 <begin(void*)+0x556>
10004f22:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10004f24: R_386_32	installKey
10004f29:	a1 00 00 00 00       	mov    eax,ds:0x0	10004f2a: R_386_32	term
10004f2e:	83 ec 04             	sub    esp,0x4
10004f31:	6a 0c                	push   0xc
10004f33:	6a 18                	push   0x18
10004f35:	50                   	push   eax
10004f36:	e8 fc ff ff ff       	call   10004f37 <begin(void*)+0x57b>	10004f37: R_386_PC32	VgaText::setCursor(int, int)
10004f3b:	83 c4 10             	add    esp,0x10
10004f3e:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10004f40: R_386_32	Krnl::computer
10004f44:	a1 00 00 00 00       	mov    eax,ds:0x0	10004f45: R_386_32	Krnl::computer
10004f49:	8b 00                	mov    eax,DWORD PTR [eax]
10004f4b:	83 c0 0c             	add    eax,0xc
10004f4e:	8b 00                	mov    eax,DWORD PTR [eax]
10004f50:	6a 00                	push   0x0
10004f52:	6a 00                	push   0x0
10004f54:	6a 01                	push   0x1
10004f56:	52                   	push   edx
10004f57:	ff d0                	call   eax
10004f59:	83 c4 10             	add    esp,0x10
10004f5c:	a1 00 00 00 00       	mov    eax,ds:0x0	10004f5d: R_386_32	term
10004f61:	6a 0f                	push   0xf
10004f63:	6a 0c                	push   0xc
10004f65:	68 58 5c 00 10       	push   0x10005c58	10004f66: R_386_32	.text
10004f6a:	50                   	push   eax
10004f6b:	e8 fc ff ff ff       	call   10004f6c <begin(void*)+0x5b0>	10004f6c: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
10004f70:	83 c4 10             	add    esp,0x10
10004f73:	e9 ad 03 00 00       	jmp    10005325 <begin(void*)+0x969>
10004f78:	83 ec 0c             	sub    esp,0xc
10004f7b:	68 40 5b 00 10       	push   0x10005b40	10004f7c: R_386_32	.text
10004f80:	e8 fc ff ff ff       	call   10004f81 <begin(void*)+0x5c5>	10004f81: R_386_PC32	CmOpen(char const*)
10004f85:	83 c4 10             	add    esp,0x10
10004f88:	89 45 c0             	mov    DWORD PTR [ebp-0x40],eax
10004f8b:	83 ec 08             	sub    esp,0x8
10004f8e:	68 d7 5b 00 10       	push   0x10005bd7	10004f8f: R_386_32	.text
10004f93:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
10004f96:	e8 fc ff ff ff       	call   10004f97 <begin(void*)+0x5db>	10004f97: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10004f9b:	83 c4 10             	add    esp,0x10
10004f9e:	83 ec 04             	sub    esp,0x4
10004fa1:	8d 95 b0 fd ff ff    	lea    edx,[ebp-0x250]
10004fa7:	52                   	push   edx
10004fa8:	50                   	push   eax
10004fa9:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
10004fac:	e8 fc ff ff ff       	call   10004fad <begin(void*)+0x5f1>	10004fad: R_386_PC32	CmGetString(Reghive_Tag*, int, char*)
10004fb1:	83 c4 10             	add    esp,0x10
10004fb4:	83 ec 08             	sub    esp,0x8
10004fb7:	68 7e 5c 00 10       	push   0x10005c7e	10004fb8: R_386_32	.text
10004fbc:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
10004fbf:	e8 fc ff ff ff       	call   10004fc0 <begin(void*)+0x604>	10004fc0: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10004fc4:	83 c4 10             	add    esp,0x10
10004fc7:	83 ec 04             	sub    esp,0x4
10004fca:	8d 55 a8             	lea    edx,[ebp-0x58]
10004fcd:	52                   	push   edx
10004fce:	50                   	push   eax
10004fcf:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
10004fd2:	e8 fc ff ff ff       	call   10004fd3 <begin(void*)+0x617>	10004fd3: R_386_PC32	CmGetInteger(Reghive_Tag*, int, unsigned long long*)
10004fd7:	83 c4 10             	add    esp,0x10
10004fda:	83 ec 0c             	sub    esp,0xc
10004fdd:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
10004fe0:	e8 fc ff ff ff       	call   10004fe1 <begin(void*)+0x625>	10004fe1: R_386_PC32	CmClose(Reghive_Tag*)
10004fe5:	83 c4 10             	add    esp,0x10
10004fe8:	83 ec 0c             	sub    esp,0xc
10004feb:	8d 85 b0 fd ff ff    	lea    eax,[ebp-0x250]
10004ff1:	50                   	push   eax
10004ff2:	e8 fc ff ff ff       	call   10004ff3 <begin(void*)+0x637>	10004ff3: R_386_PC32	checkExtendedKey(char*)
10004ff7:	83 c4 10             	add    esp,0x10
10004ffa:	85 c0                	test   eax,eax
10004ffc:	0f 94 c0             	sete   al
10004fff:	84 c0                	test   al,al
10005001:	0f 84 ed 01 00 00    	je     100051f4 <begin(void*)+0x838>
10005007:	83 ec 0c             	sub    esp,0xc
1000500a:	6a 01                	push   0x1
1000500c:	e8 fc ff ff ff       	call   1000500d <begin(void*)+0x651>	1000500d: R_386_PC32	firstRun(bool)
10005011:	83 c4 10             	add    esp,0x10
10005014:	83 ec 0c             	sub    esp,0xc
10005017:	68 40 5b 00 10       	push   0x10005b40	10005018: R_386_32	.text
1000501c:	e8 fc ff ff ff       	call   1000501d <begin(void*)+0x661>	1000501d: R_386_PC32	CmOpen(char const*)
10005021:	83 c4 10             	add    esp,0x10
10005024:	89 45 c0             	mov    DWORD PTR [ebp-0x40],eax
10005027:	83 ec 04             	sub    esp,0x4
1000502a:	68 65 5b 00 10       	push   0x10005b65	1000502b: R_386_32	.text
1000502f:	6a 00                	push   0x0
10005031:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
10005034:	e8 fc ff ff ff       	call   10005035 <begin(void*)+0x679>	10005035: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
10005039:	83 c4 10             	add    esp,0x10
1000503c:	83 ec 08             	sub    esp,0x8
1000503f:	68 65 5b 00 10       	push   0x10005b65	10005040: R_386_32	.text
10005044:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
10005047:	e8 fc ff ff ff       	call   10005048 <begin(void*)+0x68c>	10005048: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
1000504c:	83 c4 10             	add    esp,0x10
1000504f:	83 ec 08             	sub    esp,0x8
10005052:	50                   	push   eax
10005053:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
10005056:	e8 fc ff ff ff       	call   10005057 <begin(void*)+0x69b>	10005057: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
1000505b:	83 c4 10             	add    esp,0x10
1000505e:	83 ec 04             	sub    esp,0x4
10005061:	68 6c 5b 00 10       	push   0x10005b6c	10005062: R_386_32	.text
10005066:	50                   	push   eax
10005067:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
1000506a:	e8 fc ff ff ff       	call   1000506b <begin(void*)+0x6af>	1000506b: R_386_PC32	CmCreateDirectory(Reghive_Tag*, int, char const*)
1000506f:	83 c4 10             	add    esp,0x10
10005072:	83 ec 08             	sub    esp,0x8
10005075:	68 77 5b 00 10       	push   0x10005b77	10005076: R_386_32	.text
1000507a:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
1000507d:	e8 fc ff ff ff       	call   1000507e <begin(void*)+0x6c2>	1000507e: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
10005082:	83 c4 10             	add    esp,0x10
10005085:	83 ec 08             	sub    esp,0x8
10005088:	50                   	push   eax
10005089:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
1000508c:	e8 fc ff ff ff       	call   1000508d <begin(void*)+0x6d1>	1000508d: R_386_PC32	CmEnterDirectory(Reghive_Tag*, int)
10005091:	83 c4 10             	add    esp,0x10
10005094:	83 ec 04             	sub    esp,0x4
10005097:	68 91 5b 00 10       	push   0x10005b91	10005098: R_386_32	.text
1000509c:	50                   	push   eax
1000509d:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
100050a0:	e8 fc ff ff ff       	call   100050a1 <begin(void*)+0x6e5>	100050a1: R_386_PC32	CmCreateString(Reghive_Tag*, int, char const*)
100050a5:	83 c4 10             	add    esp,0x10
100050a8:	83 ec 08             	sub    esp,0x8
100050ab:	68 d7 5b 00 10       	push   0x10005bd7	100050ac: R_386_32	.text
100050b0:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
100050b3:	e8 fc ff ff ff       	call   100050b4 <begin(void*)+0x6f8>	100050b4: R_386_PC32	CmFindObjectFromPath(Reghive_Tag*, char const*)
100050b8:	83 c4 10             	add    esp,0x10
100050bb:	83 ec 04             	sub    esp,0x4
100050be:	68 00 00 00 00       	push   0x0	100050bf: R_386_32	pkeybuf
100050c3:	50                   	push   eax
100050c4:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
100050c7:	e8 fc ff ff ff       	call   100050c8 <begin(void*)+0x70c>	100050c8: R_386_PC32	CmSetString(Reghive_Tag*, int, char const*)
100050cc:	83 c4 10             	add    esp,0x10
100050cf:	83 ec 0c             	sub    esp,0xc
100050d2:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
100050d5:	e8 fc ff ff ff       	call   100050d6 <begin(void*)+0x71a>	100050d6: R_386_PC32	CmClose(Reghive_Tag*)
100050da:	83 c4 10             	add    esp,0x10
100050dd:	a1 00 00 00 00       	mov    eax,ds:0x0	100050de: R_386_32	term
100050e2:	83 ec 0c             	sub    esp,0xc
100050e5:	50                   	push   eax
100050e6:	e8 fc ff ff ff       	call   100050e7 <begin(void*)+0x72b>	100050e7: R_386_PC32	setActiveTerminal(VgaText*)
100050eb:	83 c4 10             	add    esp,0x10
100050ee:	e8 fc ff ff ff       	call   100050ef <begin(void*)+0x733>	100050ef: R_386_PC32	drawBootScreen()
100050f3:	83 ec 0c             	sub    esp,0xc
100050f6:	68 92 5c 00 10       	push   0x10005c92	100050f7: R_386_32	.text
100050fb:	6a 0d                	push   0xd
100050fd:	6a 32                	push   0x32
100050ff:	6a 05                	push   0x5
10005101:	6a 16                	push   0x16
10005103:	e8 fc ff ff ff       	call   10005104 <begin(void*)+0x748>	10005104: R_386_PC32	drawBasicWindow(int, int, int, int, char const*)
10005108:	83 c4 20             	add    esp,0x20
1000510b:	a1 00 00 00 00       	mov    eax,ds:0x0	1000510c: R_386_32	term
10005110:	83 ec 04             	sub    esp,0x4
10005113:	6a 08                	push   0x8
10005115:	6a 18                	push   0x18
10005117:	50                   	push   eax
10005118:	e8 fc ff ff ff       	call   10005119 <begin(void*)+0x75d>	10005119: R_386_PC32	VgaText::setCursor(int, int)
1000511d:	83 c4 10             	add    esp,0x10
10005120:	a1 00 00 00 00       	mov    eax,ds:0x0	10005121: R_386_32	term
10005125:	83 ec 08             	sub    esp,0x8
10005128:	68 a8 5c 00 10       	push   0x10005ca8	10005129: R_386_32	.text
1000512d:	50                   	push   eax
1000512e:	e8 fc ff ff ff       	call   1000512f <begin(void*)+0x773>	1000512f: R_386_PC32	VgaText::puts(char const*)
10005133:	83 c4 10             	add    esp,0x10
10005136:	a1 00 00 00 00       	mov    eax,ds:0x0	10005137: R_386_32	term
1000513b:	83 ec 04             	sub    esp,0x4
1000513e:	6a 0a                	push   0xa
10005140:	6a 18                	push   0x18
10005142:	50                   	push   eax
10005143:	e8 fc ff ff ff       	call   10005144 <begin(void*)+0x788>	10005144: R_386_PC32	VgaText::setCursor(int, int)
10005148:	83 c4 10             	add    esp,0x10
1000514b:	a1 00 00 00 00       	mov    eax,ds:0x0	1000514c: R_386_32	term
10005150:	83 ec 08             	sub    esp,0x8
10005153:	68 18 5c 00 10       	push   0x10005c18	10005154: R_386_32	.text
10005158:	50                   	push   eax
10005159:	e8 fc ff ff ff       	call   1000515a <begin(void*)+0x79e>	1000515a: R_386_PC32	VgaText::puts(char const*)
1000515e:	83 c4 10             	add    esp,0x10
10005161:	a1 00 00 00 00       	mov    eax,ds:0x0	10005162: R_386_32	term
10005166:	83 ec 04             	sub    esp,0x4
10005169:	6a 0b                	push   0xb
1000516b:	6a 18                	push   0x18
1000516d:	50                   	push   eax
1000516e:	e8 fc ff ff ff       	call   1000516f <begin(void*)+0x7b3>	1000516f: R_386_PC32	VgaText::setCursor(int, int)
10005173:	83 c4 10             	add    esp,0x10
10005176:	a1 00 00 00 00       	mov    eax,ds:0x0	10005177: R_386_32	term
1000517b:	83 ec 08             	sub    esp,0x8
1000517e:	68 44 5c 00 10       	push   0x10005c44	1000517f: R_386_32	.text
10005183:	50                   	push   eax
10005184:	e8 fc ff ff ff       	call   10005185 <begin(void*)+0x7c9>	10005185: R_386_PC32	VgaText::puts(char const*)
10005189:	83 c4 10             	add    esp,0x10
1000518c:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	1000518e: R_386_32	installKey
10005193:	a0 00 00 00 00       	mov    al,ds:0x0	10005194: R_386_32	installKey
10005198:	84 c0                	test   al,al
1000519a:	0f 94 c0             	sete   al
1000519d:	84 c0                	test   al,al
1000519f:	74 02                	je     100051a3 <begin(void*)+0x7e7>
100051a1:	eb f0                	jmp    10005193 <begin(void*)+0x7d7>
100051a3:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100051a5: R_386_32	installKey
100051aa:	a1 00 00 00 00       	mov    eax,ds:0x0	100051ab: R_386_32	term
100051af:	83 ec 04             	sub    esp,0x4
100051b2:	6a 0c                	push   0xc
100051b4:	6a 18                	push   0x18
100051b6:	50                   	push   eax
100051b7:	e8 fc ff ff ff       	call   100051b8 <begin(void*)+0x7fc>	100051b8: R_386_PC32	VgaText::setCursor(int, int)
100051bc:	83 c4 10             	add    esp,0x10
100051bf:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	100051c1: R_386_32	Krnl::computer
100051c5:	a1 00 00 00 00       	mov    eax,ds:0x0	100051c6: R_386_32	Krnl::computer
100051ca:	8b 00                	mov    eax,DWORD PTR [eax]
100051cc:	83 c0 0c             	add    eax,0xc
100051cf:	8b 00                	mov    eax,DWORD PTR [eax]
100051d1:	6a 00                	push   0x0
100051d3:	6a 00                	push   0x0
100051d5:	6a 01                	push   0x1
100051d7:	52                   	push   edx
100051d8:	ff d0                	call   eax
100051da:	83 c4 10             	add    esp,0x10
100051dd:	a1 00 00 00 00       	mov    eax,ds:0x0	100051de: R_386_32	term
100051e2:	6a 0f                	push   0xf
100051e4:	6a 0c                	push   0xc
100051e6:	68 58 5c 00 10       	push   0x10005c58	100051e7: R_386_32	.text
100051eb:	50                   	push   eax
100051ec:	e8 fc ff ff ff       	call   100051ed <begin(void*)+0x831>	100051ed: R_386_PC32	VgaText::puts(char const*, VgaColour, VgaColour)
100051f1:	83 c4 10             	add    esp,0x10
100051f4:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100051f6: R_386_32	VgaText::hiddenOut
100051fb:	83 ec 0c             	sub    esp,0xc
100051fe:	68 24 07 00 00       	push   0x724
10005203:	e8 fc ff ff ff       	call   10005204 <begin(void*)+0x848>	10005204: R_386_PC32	operator new(unsigned long)
10005208:	83 c4 10             	add    esp,0x10
1000520b:	89 c3                	mov    ebx,eax
1000520d:	6a 00                	push   0x0
1000520f:	6a 00                	push   0x0
10005211:	68 de 5a 00 10       	push   0x10005ade	10005212: R_386_32	.text
10005216:	53                   	push   ebx
10005217:	e8 fc ff ff ff       	call   10005218 <begin(void*)+0x85c>	10005218: R_386_PC32	Process::Process(char const*, Process*, char**)
1000521c:	83 c4 10             	add    esp,0x10
1000521f:	89 5d d0             	mov    DWORD PTR [ebp-0x30],ebx
10005222:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
10005225:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
1000522b:	83 ec 0c             	sub    esp,0xc
1000522e:	50                   	push   eax
1000522f:	e8 fc ff ff ff       	call   10005230 <begin(void*)+0x874>	10005230: R_386_PC32	setActiveTerminal(VgaText*)
10005234:	83 c4 10             	add    esp,0x10
10005237:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
1000523e:	83 7d e0 18          	cmp    DWORD PTR [ebp-0x20],0x18
10005242:	7f 2e                	jg     10005272 <begin(void*)+0x8b6>
10005244:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
1000524b:	83 7d dc 4f          	cmp    DWORD PTR [ebp-0x24],0x4f
1000524f:	7f 1c                	jg     1000526d <begin(void*)+0x8b1>
10005251:	83 ec 0c             	sub    esp,0xc
10005254:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
10005257:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
1000525a:	6a 00                	push   0x0
1000525c:	6a 07                	push   0x7
1000525e:	6a 20                	push   0x20
10005260:	e8 fc ff ff ff       	call   10005261 <begin(void*)+0x8a5>	10005261: R_386_PC32	HalConsoleWriteCharacter(char, int, int, int, int)
10005265:	83 c4 20             	add    esp,0x20
10005268:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
1000526b:	eb de                	jmp    1000524b <begin(void*)+0x88f>
1000526d:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
10005270:	eb cc                	jmp    1000523e <begin(void*)+0x882>
10005272:	83 ec 0c             	sub    esp,0xc
10005275:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10005278:	e8 fc ff ff ff       	call   10005279 <begin(void*)+0x8bd>	10005279: R_386_PC32	Process::createUserThread()
1000527d:	83 c4 10             	add    esp,0x10
10005280:	8b 45 a8             	mov    eax,DWORD PTR [ebp-0x58]
10005283:	8b 55 ac             	mov    edx,DWORD PTR [ebp-0x54]
10005286:	89 c1                	mov    ecx,eax
10005288:	83 f1 01             	xor    ecx,0x1
1000528b:	89 8d a0 fd ff ff    	mov    DWORD PTR [ebp-0x260],ecx
10005291:	89 d0                	mov    eax,edx
10005293:	80 f4 00             	xor    ah,0x0
10005296:	89 85 a4 fd ff ff    	mov    DWORD PTR [ebp-0x25c],eax
1000529c:	8b 8d a0 fd ff ff    	mov    ecx,DWORD PTR [ebp-0x260]
100052a2:	8b 9d a4 fd ff ff    	mov    ebx,DWORD PTR [ebp-0x25c]
100052a8:	89 d8                	mov    eax,ebx
100052aa:	09 c8                	or     eax,ecx
100052ac:	85 c0                	test   eax,eax
100052ae:	75 17                	jne    100052c7 <begin(void*)+0x90b>
100052b0:	a1 00 00 00 00       	mov    eax,ds:0x0	100052b1: R_386_32	kernelProcess
100052b5:	6a 01                	push   0x1
100052b7:	6a 00                	push   0x0
100052b9:	68 00 00 00 00       	push   0x0	100052ba: R_386_32	startGUI(void*)
100052be:	50                   	push   eax
100052bf:	e8 fc ff ff ff       	call   100052c0 <begin(void*)+0x904>	100052c0: R_386_PC32	Process::createThread(void (*)(void*), void*, int)
100052c4:	83 c4 10             	add    esp,0x10
100052c7:	8b 45 a8             	mov    eax,DWORD PTR [ebp-0x58]
100052ca:	8b 55 ac             	mov    edx,DWORD PTR [ebp-0x54]
100052cd:	89 c6                	mov    esi,eax
100052cf:	83 f6 02             	xor    esi,0x2
100052d2:	89 b5 98 fd ff ff    	mov    DWORD PTR [ebp-0x268],esi
100052d8:	89 d0                	mov    eax,edx
100052da:	80 f4 00             	xor    ah,0x0
100052dd:	89 85 9c fd ff ff    	mov    DWORD PTR [ebp-0x264],eax
100052e3:	8b b5 98 fd ff ff    	mov    esi,DWORD PTR [ebp-0x268]
100052e9:	8b bd 9c fd ff ff    	mov    edi,DWORD PTR [ebp-0x264]
100052ef:	89 f8                	mov    eax,edi
100052f1:	09 f0                	or     eax,esi
100052f3:	85 c0                	test   eax,eax
100052f5:	75 17                	jne    1000530e <begin(void*)+0x952>
100052f7:	a1 00 00 00 00       	mov    eax,ds:0x0	100052f8: R_386_32	kernelProcess
100052fc:	6a 01                	push   0x1
100052fe:	6a 00                	push   0x0
10005300:	68 00 00 00 00       	push   0x0	10005301: R_386_32	startGUIVESA(void*)
10005305:	50                   	push   eax
10005306:	e8 fc ff ff ff       	call   10005307 <begin(void*)+0x94b>	10005307: R_386_PC32	Process::createThread(void (*)(void*), void*, int)
1000530b:	83 c4 10             	add    esp,0x10
1000530e:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
10005311:	8b 00                	mov    eax,DWORD PTR [eax]
10005313:	83 ec 04             	sub    esp,0x4
10005316:	6a 00                	push   0x0
10005318:	8d 55 a4             	lea    edx,[ebp-0x5c]
1000531b:	52                   	push   edx
1000531c:	50                   	push   eax
1000531d:	e8 fc ff ff ff       	call   1000531e <begin(void*)+0x962>	1000531e: R_386_PC32	waitTask(int, int*, int)
10005322:	83 c4 10             	add    esp,0x10
10005325:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10005327: R_386_32	Krnl::computer
1000532b:	a1 00 00 00 00       	mov    eax,ds:0x0	1000532c: R_386_32	Krnl::computer
10005330:	8b 00                	mov    eax,DWORD PTR [eax]
10005332:	83 c0 0c             	add    eax,0xc
10005335:	8b 00                	mov    eax,DWORD PTR [eax]
10005337:	6a 00                	push   0x0
10005339:	6a 00                	push   0x0
1000533b:	6a 00                	push   0x0
1000533d:	52                   	push   edx
1000533e:	ff d0                	call   eax
10005340:	83 c4 10             	add    esp,0x10
10005343:	83 ec 0c             	sub    esp,0xc
10005346:	68 cc 5c 00 10       	push   0x10005ccc	10005347: R_386_32	.text
1000534b:	e8 fc ff ff ff       	call   1000534c <begin(void*)+0x990>	1000534c: R_386_PC32	KePanic(char const*)
10005350:	83 c4 10             	add    esp,0x10
10005353:	eb fe                	jmp    10005353 <begin(void*)+0x997>
10005355:	66 90                	xchg   ax,ax
10005357:	90                   	nop

10005358 <TERMINAL_KEYBUFFER_IN_SIZE>:
10005358:	80 00 00 00                                         ....

1000535c <TERMINAL_KEYBUFFER_OUT_SIZE>:
1000535c:	80 00 00 00 2e 00 2e 2e 00 2f 00 43 6f 75 6c 64     ........./.Could
1000536c:	6e 27 74 20 6f 70 65 6e 20 62 61 73 65 20 70 61     n't open base pa
1000537c:	74 68 2e 0a 00 25 73 20 2d 3e 20 25 73 0a 00 43     th...%s -> %s..C
1000538c:	4f 55 4c 44 20 4e 4f 54 20 43 52 45 41 54 45 00     OULD NOT CREATE.
1000539c:	43 4f 55 4c 44 20 4e 4f 54 20 43 4f 50 59 00 4e     COULD NOT COPY.N
100053ac:	4f 20 4d 45 4d 4f 52 59 00 42 61 63 6b 75 70 00     O MEMORY.Backup.
100053bc:	43 3a 2f 42 61 6e 61 6e 61 2f 53 79 73 74 65 6d     C:/Banana/System
100053cc:	2f 42 61 63 6b 75 70 2f 00 30 31 32 33 34 35 36     /Backup/.0123456
100053dc:	37 38 39 41 42 43 44 45 46 00 43 3a 2f 55 73 65     789ABCDEF.C:/Use
100053ec:	72 73 2f 00 2f 44 65 73 6b 74 6f 70 00 2f 44 6f     rs/./Desktop./Do
100053fc:	63 75 6d 65 6e 74 73 00 2f 44 6f 77 6e 6c 6f 61     cuments./Downloa
1000540c:	64 73 00 2f 50 68 6f 74 6f 73 00 2f 54 72 61 73     ds./Photos./Tras
1000541c:	68 20 42 69 6e 00 2f 4d 75 73 69 63 00 2f 4d 6f     h Bin./Music./Mo
1000542c:	76 69 65 73 00 43 3a 2f 42 61 6e 61 6e 61 2f 52     vies.C:/Banana/R
1000543c:	65 67 69 73 74 72 79 2f 55 73 65 72 2f 00 00 00     egistry/User/...
1000544c:	43 3a 2f 42 61 6e 61 6e 61 2f 52 65 67 69 73 74     C:/Banana/Regist
1000545c:	72 79 2f 44 65 66 61 75 6c 74 55 73 65 72 00 00     ry/DefaultUser..
1000546c:	43 68 65 63 6b 69 6e 67 0a 20 73 79 73 74 65 6d     Checking. system
1000547c:	0a 20 72 65 71 75 69 72 65 6d 65 6e 74 73 0a 0a     . requirements..
1000548c:	20 4c 65 67 61 6c 0a 20 6e 6f 74 69 63 65 73 0a      Legal. notices.
1000549c:	0a 20 43 68 6f 6f 73 69 6e 67 20 61 0a 20 70 61     . Choosing a. pa
100054ac:	72 74 69 74 69 6f 6e 0a 0a 20 46 6f 72 6d 61 74     rtition.. Format
100054bc:	74 69 6e 67 0a 0a 20 43 6f 70 79 69 6e 67 20 66     ting.. Copying f
100054cc:	69 6c 65 73 0a 0a 20 52 65 73 74 61 72 74 69 6e     iles.. Restartin
100054dc:	67 0a 20 79 6f 75 72 20 63 6f 6d 70 75 74 65 72     g. your computer
100054ec:	0a 0a 00 20 46 69 6e 61 6c 69 73 69 6e 67 20 74     ... Finalising t
100054fc:	68 65 0a 20 69 6e 73 74 61 6c 6c 61 74 69 6f 6e     he. installation
1000550c:	00 00 00 00 50 6c 65 61 73 65 20 77 61 69 74 20     ....Please wait 
1000551c:	77 68 69 6c 65 20 74 68 65 20 69 6e 73 74 61 6c     while the instal
1000552c:	6c 20 66 69 6e 69 73 68 65 73 2e 00 10 20 00 20     l finishes... . 
1000553c:	20 00 41 6c 6c 6f 63 61 74 69 6e 67 20 74 68 65      .Allocating the
1000554c:	20 73 77 61 70 66 69 6c 65 00 55 70 64 61 74 69      swapfile.Updati
1000555c:	6e 67 20 74 68 65 20 72 65 67 69 73 74 72 79 00     ng the registry.
1000556c:	43 72 65 61 74 69 6e 67 20 75 73 65 72 20 61 63     Creating user ac
1000557c:	63 6f 75 6e 74 00 49 6e 73 74 61 6c 6c 69 6e 67     count.Installing
1000558c:	20 70 61 63 6b 61 67 65 73 00 42 61 63 6b 69 6e      packages.Backin
1000559c:	67 20 75 70 20 73 79 73 74 65 6d 20 66 69 6c 65     g up system file
100055ac:	73 00 46 69 6e 69 73 68 69 6e 67 20 74 6f 75 63     s.Finishing touc
100055bc:	68 65 73 00 51 51 2d 30 30 30 2d 30 30 30 2d 30     hes.QQ-000-000-0
100055cc:	30 30 2d 51 00 00 00 00 43 3a 2f 42 61 6e 61 6e     00-Q....C:/Banan
100055dc:	61 2f 53 79 73 74 65 6d 2f 74 69 6d 65 7a 6f 6e     a/System/timezon
100055ec:	65 73 2e 74 78 74 00 73 69 7a 20 3d 20 25 64 0a     es.txt.siz = %d.
100055fc:	00 20 00 2e 2e 2e 20 00 25 64 3b 20 25 73 0a 00     . .... .%d; %s..
1000560c:	53 65 74 74 69 6e 67 20 75 70 20 74 68 65 20 73     Setting up the s
1000561c:	79 73 74 65 6d 20 66 6f 72 20 74 68 65 20 66 69     ystem for the fi
1000562c:	72 73 74 20 74 69 6d 65 00 0a 0a 0a 0a 0a 0a 00     rst time........
1000563c:	54 65 73 74 00 41 41 2d 30 30 30 30 30 2d 30 30     Test.AA-00000-00
1000564c:	30 30 30 2d 41 00 57 57 2d 38 38 33 38 38 2d 35     000-A.WW-88388-5
1000565c:	35 35 35 35 2d 4e 00 42 61 6e 61 6e 61 20 53 65     5555-N.Banana Se
1000566c:	74 75 70 00 50 6c 65 61 73 65 20 65 6e 74 65 72     tup.Please enter
1000567c:	20 79 6f 75 72 20 64 65 74 61 69 6c 73 2e 20 50      your details. P
1000568c:	72 65 73 73 20 54 41 42 20 74 6f 20 73 77 69 74     ress TAB to swit
1000569c:	63 68 00 62 65 74 77 65 65 6e 20 66 69 65 6c 64     ch.between field
100056ac:	73 2e 00 4e 61 6d 65 00 43 6f 6d 70 61 6e 79 00     s..Name.Company.
100056bc:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
100056cc:	20 20 20 20 20 20 20 20 20 00 20 20 11 00 20 20              .  ..  
100056dc:	20 00 50 72 65 73 73 20 45 4e 54 45 52 00 20 20      .Press ENTER.  
100056ec:	20 20 20 20 20 20 20 20 20 00 74 6f 20 73 75 62              .to sub
100056fc:	6d 69 74 00 20 20 20 4f 4b 20 20 20 00 44 61 74     mit.   OK   .Dat
1000570c:	65 20 61 6e 64 20 54 69 6d 65 00 31 34 2f 30 35     e and Time.14/05
1000571c:	2f 32 30 32 31 20 31 38 3a 35 35 3a 30 30 00 00     /2021 18:55:00..
1000572c:	50 6c 65 61 73 65 20 65 6e 74 65 72 20 74 68 65     Please enter the
1000573c:	20 63 75 72 72 65 6e 74 20 64 61 74 65 20 61 6e      current date an
1000574c:	64 20 74 69 6d 65 2c 00 61 6e 64 20 74 68 65 6e     d time,.and then
1000575c:	20 70 72 65 73 73 20 45 4e 54 45 52 2e 00 44 44      press ENTER..DD
1000576c:	2f 4d 4d 2f 59 59 59 59 20 48 48 3a 4d 4d 3a 53     /MM/YYYY HH:MM:S
1000577c:	53 00 45 53 43 3a 20 47 6f 20 62 61 63 6b 20 61     S.ESC: Go back a
1000578c:	20 73 63 72 65 65 6e 00 50 6c 65 61 73 65 20 73      screen.Please s
1000579c:	65 6c 65 63 74 20 79 6f 75 72 20 74 69 6d 65 7a     elect your timez
100057ac:	6f 6e 65 20 61 6e 64 20 74 68 65 6e 20 70 72 65     one and then pre
100057bc:	73 73 20 45 4e 54 45 52 2e 00 55 73 65 72 20 49     ss ENTER..User I
100057cc:	6e 74 65 72 66 61 63 65 00 00 00 00 50 6c 65 61     nterface....Plea
100057dc:	73 65 20 73 65 6c 65 63 74 20 74 68 65 20 75 73     se select the us
100057ec:	65 72 20 69 6e 74 65 72 66 61 63 65 20 79 6f 75     er interface you
100057fc:	20 77 61 6e 74 20 42 61 6e 61 6e 61 00 00 00 00      want Banana....
1000580c:	74 6f 20 62 6f 6f 74 20 69 6e 74 6f 20 62 79 20     to boot into by 
1000581c:	64 65 66 61 75 6c 74 20 77 68 65 6e 20 79 6f 75     default when you
1000582c:	20 73 74 61 72 74 20 74 68 65 20 63 6f 6d 70 75      start the compu
1000583c:	74 65 72 2e 00 49 6e 76 61 6c 69 64 20 50 72 6f     ter..Invalid Pro
1000584c:	64 75 63 74 20 4b 65 79 00 00 00 00 59 6f 75 20     duct Key....You 
1000585c:	64 6f 20 6e 6f 74 20 68 61 76 65 20 61 20 76 61     do not have a va
1000586c:	6c 69 64 20 70 72 6f 64 75 63 74 20 6b 65 79 2e     lid product key.
1000587c:	0a 00 00 00 59 6f 75 20 6e 65 65 64 20 61 20 76     ....You need a v
1000588c:	61 6c 69 64 20 70 72 6f 64 75 63 74 20 6b 65 79     alid product key
1000589c:	20 69 6e 20 6f 72 64 65 72 20 74 6f 00 75 73 65      in order to.use
100058ac:	20 42 61 6e 61 6e 61 2e 00 00 00 00 50 72 65 73      Banana.....Pres
100058bc:	73 20 45 4e 54 45 52 20 74 6f 20 72 65 2d 65 6e     s ENTER to re-en
100058cc:	74 65 72 20 79 6f 75 72 20 70 72 6f 64 75 63 74     ter your product
100058dc:	20 6b 65 79 2e 00 50 72 6f 64 75 63 74 20 4b 65      key..Product Ke
100058ec:	79 00 00 00 50 6c 65 61 73 65 20 65 6e 74 65 72     y...Please enter
100058fc:	20 79 6f 75 72 20 70 72 6f 64 75 63 74 20 6b 65      your product ke
1000590c:	79 20 62 65 6c 6f 77 2c 00 00 00 00 54 68 65 20     y below,....The 
1000591c:	65 6e 74 65 72 65 64 20 70 72 6f 64 75 63 74 20     entered product 
1000592c:	6b 65 79 20 77 61 73 20 69 6e 76 61 6c 69 64 2e     key was invalid.
1000593c:	00 00 00 00 50 72 65 73 73 20 61 6e 79 20 6b 65     ....Press any ke
1000594c:	79 20 74 6f 20 63 6f 6e 74 69 6e 75 65 20 61 6e     y to continue an
1000595c:	64 20 74 68 65 6e 00 00 65 6e 74 65 72 20 74 68     d then..enter th
1000596c:	65 20 70 72 6f 64 75 63 74 20 6b 65 79 20 63 6f     e product key co
1000597c:	72 72 65 63 74 6c 79 2e 00 46 69 6e 61 6c 69 73     rrectly..Finalis
1000598c:	69 6e 67 20 49 6e 73 74 61 6c 6c 61 74 69 6f 6e     ing Installation
1000599c:	00 40 6d 65 6d 6f 72 79 3a 73 77 61 70 66 69 6c     .@memory:swapfil
100059ac:	65 00 73 79 73 74 65 6d 00 43 3a 2f 42 61 6e 61     e.system.C:/Bana
100059bc:	6e 61 2f 52 65 67 69 73 74 72 79 2f 53 79 73 74     na/Registry/Syst
100059cc:	65 6d 00 43 3a 2f 42 61 6e 61 6e 61 2f 52 65 67     em.C:/Banana/Reg
100059dc:	69 73 74 72 79 2f 55 73 65 72 00 00 43 3a 2f 42     istry/User..C:/B
100059ec:	61 6e 61 6e 61 2f 52 65 67 69 73 74 72 79 2f 44     anana/Registry/D
100059fc:	65 66 61 75 6c 74 53 79 73 74 65 6d 00 00 00 00     efaultSystem....
10005a0c:	20 42 6f 6f 74 20 74 6f 20 63 6f 6d 6d 61 6e 64      Boot to command
10005a1c:	20 6c 69 6e 65 20 20 20 20 20 20 20 20 20 20 20      line           
10005a2c:	20 20 20 20 00 00 00 00 20 42 6f 6f 74 20 74 6f         .... Boot to
10005a3c:	20 67 72 61 70 68 69 63 61 6c 20 69 6e 74 65 72      graphical inter
10005a4c:	66 61 63 65 20 28 56 47 41 29 20 20 00 00 00 00     face (VGA)  ....
10005a5c:	20 42 6f 6f 74 20 74 6f 20 67 72 61 70 68 69 63      Boot to graphic
10005a6c:	61 6c 20 69 6e 74 65 72 66 61 63 65 20 28 56 45     al interface (VE
10005a7c:	53 41 29 20 00 00 00 00 0c 5a 00 10 34 5a 00 10     SA) .....Z..4Z..	10005a84: R_386_32	.text
	10005a88: R_386_32	.text
10005a8c:	5c 5a 00 10 4c 6f 61 64 69 6e 67 20 65 78 74 65     \Z..Loading exte	10005a8c: R_386_32	.text
10005a9c:	6e 73 69 6f 6e 73 2e 2e 2e 00 0a 0a 3a 0a 00 2f     nsions......:../
10005aac:	25 73 0a 00 43 3a 2f 42 61 6e 61 6e 61 2f 53 79     %s..C:/Banana/Sy
10005abc:	73 74 65 6d 2f 73 65 74 75 70 69 73 64 2e 6f 6e     stem/setupisd.on
10005acc:	65 00 53 59 53 49 4e 49 54 20 46 41 49 4c 55 52     e.SYSINIT FAILUR
10005adc:	45 00 43 3a 2f 42 61 6e 61 6e 61 2f 53 79 73 74     E.C:/Banana/Syst
10005aec:	65 6d 2f 63 6f 6d 6d 61 6e 64 2e 65 78 65 00 43     em/command.exe.C
10005afc:	3a 2f 44 45 2e 42 55 47 00 43 3a 2f 42 61 6e 61     :/DE.BUG.C:/Bana
10005b0c:	6e 61 2f 44 72 69 76 65 72 73 2f 00 43 3a 2f 42     na/Drivers/.C:/B
10005b1c:	61 6e 61 6e 61 2f 53 79 73 74 65 6d 2f 00 43 3a     anana/System/.C:
10005b2c:	2f 42 61 6e 61 6e 61 2f 52 65 67 69 73 74 72 79     /Banana/Registry
10005b3c:	2f 00 00 00 43 3a 2f 42 61 6e 61 6e 61 2f 52 65     /...C:/Banana/Re
10005b4c:	67 69 73 74 72 79 2f 53 79 73 74 65 6d 2f 53 59     gistry/System/SY
10005b5c:	53 54 45 4d 2e 52 45 47 00 42 41 4e 41 4e 41 00     STEM.REG.BANANA.
10005b6c:	53 45 54 55 50 00 42 4f 4f 54 00 42 41 4e 41 4e     SETUP.BOOT.BANAN
10005b7c:	41 2f 53 45 54 55 50 00 4e 41 4d 45 00 43 4f 4d     A/SETUP.NAME.COM
10005b8c:	50 41 4e 59 00 50 52 4f 44 55 43 54 4b 45 59 00     PANY.PRODUCTKEY.
10005b9c:	42 41 4e 41 4e 41 2f 42 4f 4f 54 00 41 55 54 4f     BANANA/BOOT.AUTO
10005bac:	47 55 49 00 42 41 4e 41 4e 41 2f 53 45 54 55 50     GUI.BANANA/SETUP
10005bbc:	2f 4e 41 4d 45 00 42 41 4e 41 4e 41 2f 53 45 54     /NAME.BANANA/SET
10005bcc:	55 50 2f 43 4f 4d 50 41 4e 59 00 42 41 4e 41 4e     UP/COMPANY.BANAN
10005bdc:	41 2f 53 45 54 55 50 2f 50 52 4f 44 55 43 54 4b     A/SETUP/PRODUCTK
10005bec:	45 59 00 00 54 68 65 20 69 6e 73 74 61 6c 6c 61     EY..The installa
10005bfc:	74 69 6f 6e 20 68 61 73 20 62 65 65 6e 20 63 6f     tion has been co
10005c0c:	6d 70 6c 65 74 65 64 2e 0a 00 00 00 50 6c 65 61     mpleted.....Plea
10005c1c:	73 65 20 70 72 65 73 73 20 45 4e 54 45 52 20 74     se press ENTER t
10005c2c:	6f 20 72 65 73 74 61 72 74 20 79 6f 75 72 20 63     o restart your c
10005c3c:	6f 6d 70 75 74 65 72 00 61 6e 64 20 73 74 61 72     omputer.and star
10005c4c:	74 20 42 61 6e 61 6e 61 2e 00 00 00 50 4c 45 41     t Banana....PLEA
10005c5c:	53 45 20 4d 41 4e 55 41 4c 4c 59 20 52 45 53 54     SE MANUALLY REST
10005c6c:	41 52 54 20 59 4f 55 52 20 43 4f 4d 50 55 54 45     ART YOUR COMPUTE
10005c7c:	52 00 42 41 4e 41 4e 41 2f 42 4f 4f 54 2f 41 55     R.BANANA/BOOT/AU
10005c8c:	54 4f 47 55 49 00 50 72 6f 64 75 63 74 20 4b 65     TOGUI.Product Ke
10005c9c:	79 20 55 70 64 61 74 65 64 00 00 00 59 6f 75 72     y Updated...Your
10005cac:	20 70 72 6f 64 75 63 74 20 6b 65 79 20 68 61 73      product key has
10005cbc:	20 62 65 65 6e 20 75 70 64 61 74 65 64 2e 0a 00      been updated...
10005ccc:	49 74 20 69 73 20 73 61 66 65 20 74 6f 20 74 75     It is safe to tu
10005cdc:	72 6e 20 6f 66 66 20 79 6f 75 72 20 50 43 00 63     rn off your PC.c
10005cec:	61 6c 6c 00 43 3a 2f 42 61 6e 61 6e 61 2f 53 79     all.C:/Banana/Sy
10005cfc:	73 74 65 6d 2f 69 6e 69 74 2e 62 61 74 00 00 00     stem/init.bat...
10005d0c:	de 5a 00 10 eb 5c 00 10 f0 5c 00 10 00 00 00 00     .Z...\...\......	10005d0c: R_386_32	.text
	10005d10: R_386_32	.text
	10005d14: R_386_32	.text
