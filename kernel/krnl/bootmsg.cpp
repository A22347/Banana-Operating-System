#include <core/common.hpp>
#include <krnl/bootmsg.hpp>
#include <krnl/hal.hpp>

#pragma GCC optimize ("Os")
#pragma GCC optimize ("-fno-strict-aliasing")
#pragma GCC optimize ("-fno-align-labels")
#pragma GCC optimize ("-fno-align-jumps")
#pragma GCC optimize ("-fno-align-loops")
#pragma GCC optimize ("-fno-align-functions")

uint8_t KiSplashScreen[] = { 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xBB, 0x20, 0x20, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xBB, 0x20, 0xDB, 0xDB, 0xDB, 0xBB, 0x20, 0x20, 0x20, 0xDB, 0xDB, 0xBB, 0x20, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xBB, 0x20, 0xDB, 0xDB, 0xDB, 0xBB, 0x20, 0x20, 0x20, 0xDB, 0xDB, 0xBB, 0x20, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xBB, 0x20, 0x0D, 0x0A, 0xDB, 0xDB, 0xC9, 0xCD, 0xCD, 0xDB, 0xDB, 0xBB, 0xDB, 0xDB, 0xC9, 0xCD, 0xCD, 0xDB, 0xDB, 0xBB, 0xDB, 0xDB, 0xDB, 0xDB, 0xBB, 0x20, 0x20, 0xDB, 0xDB, 0xBA, 0xDB, 0xDB, 0xC9, 0xCD, 0xCD, 0xDB, 0xDB, 0xBB, 0xDB, 0xDB, 0xDB, 0xDB, 0xBB, 0x20, 0x20, 0xDB, 0xDB, 0xBA, 0xDB, 0xDB, 0xC9, 0xCD, 0xCD, 0xDB, 0xDB, 0xBB, 0x0D, 0x0A, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xC9, 0xBC, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xBA, 0xDB, 0xDB, 0xC9, 0xDB, 0xDB, 0xBB, 0x20, 0xDB, 0xDB, 0xBA, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xBA, 0xDB, 0xDB, 0xC9, 0xDB, 0xDB, 0xBB, 0x20, 0xDB, 0xDB, 0xBA, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xBA, 0x0D, 0x0A, 0xDB, 0xDB, 0xC9, 0xCD, 0xCD, 0xDB, 0xDB, 0xBB, 0xDB, 0xDB, 0xC9, 0xCD, 0xCD, 0xDB, 0xDB, 0xBA, 0xDB, 0xDB, 0xBA, 0xC8, 0xDB, 0xDB, 0xBB, 0xDB, 0xDB, 0xBA, 0xDB, 0xDB, 0xC9, 0xCD, 0xCD, 0xDB, 0xDB, 0xBA, 0xDB, 0xDB, 0xBA, 0xC8, 0xDB, 0xDB, 0xBB, 0xDB, 0xDB, 0xBA, 0xDB, 0xDB, 0xC9, 0xCD, 0xCD, 0xDB, 0xDB, 0xBA, 0x0D, 0x0A, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xDB, 0xC9, 0xBC, 0xDB, 0xDB, 0xBA, 0x20, 0x20, 0xDB, 0xDB, 0xBA, 0xDB, 0xDB, 0xBA, 0x20, 0xC8, 0xDB, 0xDB, 0xDB, 0xDB, 0xBA, 0xDB, 0xDB, 0xBA, 0x20, 0x20, 0xDB, 0xDB, 0xBA, 0xDB, 0xDB, 0xBA, 0x20, 0xC8, 0xDB, 0xDB, 0xDB, 0xDB, 0xBA, 0xDB, 0xDB, 0xBA, 0x20, 0x20, 0xDB, 0xDB, 0xBA, 0x0D, 0x0A, 0xC8, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xBC, 0x20, 0xC8, 0xCD, 0xBC, 0x20, 0x20, 0xC8, 0xCD, 0xBC, 0xC8, 0xCD, 0xBC, 0x20, 0x20, 0xC8, 0xCD, 0xCD, 0xCD, 0xBC, 0xC8, 0xCD, 0xBC, 0x20, 0x20, 0xC8, 0xCD, 0xBC, 0xC8, 0xCD, 0xBC, 0x20, 0x20, 0xC8, 0xCD, 0xCD, 0xCD, 0xBC, 0xC8, 0xCD, 0xBC, 0x20, 0x20, 0xC8, 0xCD, 0xBC };

void KeDisplaySplashScreen()
{
	int x = 0;
	int y = 5;
	int addx = 10;
	for (int i = 0; i < sizeof(KiSplashScreen) && KiSplashScreen[i]; ++i) {
		if (KiSplashScreen[x + 54] == 0xDB && (KiSplashScreen[x + 53] & ~1) == 0xBA) ++addx;
		if (KiSplashScreen[i] == '\r') continue;
		if (KiSplashScreen[i] == '\n') {
			x = 0;
			++y;
			addx = 10;
		} else {
			HalConsoleWriteCharacter(KiSplashScreen[i], 0xE, 0x0, x + addx, y);
			++x;
		}
	}
}


void KeSetBootMessage(const char* msg)
{
	uint16_t vgatext[79];
	memset((void*) vgatext, 0, sizeof(vgatext));
	int xstart = (80 - strlen(msg)) / 2;
	for (int i = 0; msg[i]; ++i) {
		vgatext[xstart + i] = ((uint16_t) msg[i]) | 0x0F00;
	}

	uint16_t* b = (uint16_t*) 0xC20B8000;
	memcpy(b + 80 * 20, vgatext, sizeof(vgatext));
	
	while (true) {
		uint8_t a = inb(0x60);
		if (a == 0x1C || a == 0x5A) {
			while (true) {
				a = inb(0x60);
				if (a != 0x1C && a != 0x5A) return;
			}
		}
	}
}