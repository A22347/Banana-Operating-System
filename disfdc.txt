
packages/system/32/0002/floppy.sys:     file format elf32-i386


Disassembly of section .text:

10000000 <floppyMotorFunction(void*)-0x29>:
10000000:	53                   	push   ebx
10000001:	83 ec 14             	sub    esp,0x14
10000004:	68 a8 01 00 00       	push   0x1a8
10000009:	e8 fc ff ff ff       	call   1000000a <floppyMotorFunction(void*)-0x1f>	1000000a: R_386_PC32	operator new(unsigned long)
1000000e:	89 04 24             	mov    DWORD PTR [esp],eax
10000011:	89 c3                	mov    ebx,eax
10000013:	e8 fc ff ff ff       	call   10000014 <floppyMotorFunction(void*)-0x15>	10000014: R_386_PC32	Floppy::Floppy()
10000018:	58                   	pop    eax
10000019:	5a                   	pop    edx
1000001a:	53                   	push   ebx
1000001b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
1000001f:	e8 fc ff ff ff       	call   10000020 <floppyMotorFunction(void*)-0x9>	10000020: R_386_PC32	Device::addChild(Device*)
10000024:	83 c4 18             	add    esp,0x18
10000027:	5b                   	pop    ebx
10000028:	c3                   	ret    

10000029 <floppyMotorFunction(void*)>:
10000029:	56                   	push   esi
1000002a:	53                   	push   ebx
1000002b:	51                   	push   ecx
1000002c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
10000030:	e8 fc ff ff ff       	call   10000031 <floppyMotorFunction(void*)+0x8>	10000031: R_386_PC32	unlockScheduler()
10000035:	31 f6                	xor    esi,esi
10000037:	52                   	push   edx
10000038:	52                   	push   edx
10000039:	6a 00                	push   0x0
1000003b:	68 00 84 d7 17       	push   0x17d78400
10000040:	e8 fc ff ff ff       	call   10000041 <floppyMotorFunction(void*)+0x18>	10000041: R_386_PC32	nanoSleep(unsigned long long)
10000045:	83 c4 10             	add    esp,0x10
10000048:	83 bc b3 60 01 00 00 02 	cmp    DWORD PTR [ebx+esi*4+0x160],0x2
10000050:	75 55                	jne    100000a7 <floppyMotorFunction(void*)+0x7e>
10000052:	8b 84 b3 70 01 00 00 	mov    eax,DWORD PTR [ebx+esi*4+0x170]
10000059:	2d 90 01 00 00       	sub    eax,0x190
1000005e:	89 84 b3 70 01 00 00 	mov    DWORD PTR [ebx+esi*4+0x170],eax
10000065:	85 c0                	test   eax,eax
10000067:	7f 3e                	jg     100000a7 <floppyMotorFunction(void*)+0x7e>
10000069:	c7 84 b3 60 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+esi*4+0x160],0x0
10000074:	e8 fc ff ff ff       	call   10000075 <floppyMotorFunction(void*)+0x4c>	10000075: R_386_PC32	lockScheduler()
10000079:	50                   	push   eax
1000007a:	50                   	push   eax
1000007b:	6a 02                	push   0x2
1000007d:	53                   	push   ebx
1000007e:	e8 fc ff ff ff       	call   1000007f <floppyMotorFunction(void*)+0x56>	1000007f: R_386_PC32	Floppy::readPort(FloppyReg)
10000083:	83 c4 0c             	add    esp,0xc
10000086:	89 f1                	mov    ecx,esi
10000088:	ba 10 00 00 00       	mov    edx,0x10
1000008d:	d3 e2                	shl    edx,cl
1000008f:	f7 d2                	not    edx
10000091:	21 d0                	and    eax,edx
10000093:	0f b6 c0             	movzx  eax,al
10000096:	50                   	push   eax
10000097:	6a 02                	push   0x2
10000099:	53                   	push   ebx
1000009a:	e8 fc ff ff ff       	call   1000009b <floppyMotorFunction(void*)+0x72>	1000009b: R_386_PC32	Floppy::writePort(FloppyReg, unsigned char)
1000009f:	e8 fc ff ff ff       	call   100000a0 <floppyMotorFunction(void*)+0x77>	100000a0: R_386_PC32	unlockScheduler()
100000a4:	83 c4 10             	add    esp,0x10
100000a7:	46                   	inc    esi
100000a8:	83 fe 04             	cmp    esi,0x4
100000ab:	75 9b                	jne    10000048 <floppyMotorFunction(void*)+0x1f>
100000ad:	eb 86                	jmp    10000035 <floppyMotorFunction(void*)+0xc>
100000af:	90                   	nop

100000b0 <Floppy::Floppy()>:
100000b0:	55                   	push   ebp
100000b1:	89 e5                	mov    ebp,esp
100000b3:	83 ec 08             	sub    esp,0x8
100000b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100000b9:	83 ec 08             	sub    esp,0x8
100000bc:	68 98 07 00 10       	push   0x10000798	100000bd: R_386_32	.text
100000c1:	50                   	push   eax
100000c2:	e8 fc ff ff ff       	call   100000c3 <Floppy::Floppy()+0x13>	100000c3: R_386_PC32	HardDiskController::HardDiskController(char const*)
100000c7:	83 c4 10             	add    esp,0x10
100000ca:	ba 08 00 00 00       	mov    edx,0x8	100000cb: R_386_32	vtable for Floppy
100000cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100000d2:	89 10                	mov    DWORD PTR [eax],edx
100000d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100000d7:	66 c7 80 58 01 00 00 f0 03 	mov    WORD PTR [eax+0x158],0x3f0
100000e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100000e3:	c6 80 80 01 00 00 01 	mov    BYTE PTR [eax+0x180],0x1
100000ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100000ed:	c6 80 81 01 00 00 00 	mov    BYTE PTR [eax+0x181],0x0
100000f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100000f7:	c6 80 82 01 00 00 00 	mov    BYTE PTR [eax+0x182],0x0
100000fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000101:	c6 80 83 01 00 00 00 	mov    BYTE PTR [eax+0x183],0x0
10000108:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000010b:	c6 80 84 01 00 00 01 	mov    BYTE PTR [eax+0x184],0x1
10000112:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000115:	c6 80 85 01 00 00 01 	mov    BYTE PTR [eax+0x185],0x1
1000011c:	83 ec 0c             	sub    esp,0xc
1000011f:	68 af 07 00 10       	push   0x100007af	10000120: R_386_32	.text
10000124:	e8 fc ff ff ff       	call   10000125 <Floppy::Floppy()+0x75>	10000125: R_386_PC32	Dbg::kprintf(char const*, ...)
10000129:	83 c4 10             	add    esp,0x10
1000012c:	a1 00 00 00 00       	mov    eax,ds:0x0	1000012d: R_386_32	kernelProcess
10000131:	68 d2 00 00 00       	push   0xd2
10000136:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000139:	68 00 00 00 00       	push   0x0	1000013a: R_386_32	floppyMotorFunction(void*)
1000013e:	50                   	push   eax
1000013f:	e8 fc ff ff ff       	call   10000140 <Floppy::Floppy()+0x90>	10000140: R_386_PC32	Process::createThread(void (*)(void*), void*, int)
10000144:	83 c4 10             	add    esp,0x10
10000147:	89 c2                	mov    edx,eax
10000149:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000014c:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
10000152:	90                   	nop
10000153:	c9                   	leave  
10000154:	c3                   	ret    
10000155:	90                   	nop

10000156 <Floppy::wasFailure()>:
10000156:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
1000015a:	8a 82 82 01 00 00    	mov    al,BYTE PTR [edx+0x182]
10000160:	66 c7 82 82 01 00 00 00 01 	mov    WORD PTR [edx+0x182],0x100
10000169:	c3                   	ret    

1000016a <Floppy::writeCommand(unsigned char)>:
1000016a:	57                   	push   edi
1000016b:	56                   	push   esi
1000016c:	53                   	push   ebx
1000016d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
10000171:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
10000175:	80 bb 82 01 00 00 00 	cmp    BYTE PTR [ebx+0x182],0x0
1000017c:	74 10                	je     1000018e <Floppy::writeCommand(unsigned char)+0x24>
1000017e:	83 ec 0c             	sub    esp,0xc
10000181:	68 c1 07 00 10       	push   0x100007c1	10000182: R_386_32	.text
10000186:	e8 fc ff ff ff       	call   10000187 <Floppy::writeCommand(unsigned char)+0x1d>	10000187: R_386_PC32	Krnl::panic(char const*)
1000018b:	83 c4 10             	add    esp,0x10
1000018e:	80 bb 83 01 00 00 00 	cmp    BYTE PTR [ebx+0x183],0x0
10000195:	75 10                	jne    100001a7 <Floppy::writeCommand(unsigned char)+0x3d>
10000197:	83 ec 0c             	sub    esp,0xc
1000019a:	68 f1 07 00 10       	push   0x100007f1	1000019b: R_386_32	.text
1000019f:	e8 fc ff ff ff       	call   100001a0 <Floppy::writeCommand(unsigned char)+0x36>	100001a0: R_386_PC32	Krnl::panic(char const*)
100001a4:	83 c4 10             	add    esp,0x10
100001a7:	66 c7 83 82 01 00 00 00 00 	mov    WORD PTR [ebx+0x182],0x0
100001b0:	be 32 00 00 00       	mov    esi,0x32
100001b5:	52                   	push   edx
100001b6:	52                   	push   edx
100001b7:	6a 00                	push   0x0
100001b9:	68 80 96 98 00       	push   0x989680
100001be:	e8 fc ff ff ff       	call   100001bf <Floppy::writeCommand(unsigned char)+0x55>	100001bf: R_386_PC32	nanoSleep(unsigned long long)
100001c3:	59                   	pop    ecx
100001c4:	58                   	pop    eax
100001c5:	6a 04                	push   0x4
100001c7:	53                   	push   ebx
100001c8:	e8 fc ff ff ff       	call   100001c9 <Floppy::writeCommand(unsigned char)+0x5f>	100001c9: R_386_PC32	Floppy::readPort(FloppyReg)
100001cd:	83 c4 10             	add    esp,0x10
100001d0:	84 c0                	test   al,al
100001d2:	79 18                	jns    100001ec <Floppy::writeCommand(unsigned char)+0x82>
100001d4:	a8 40                	test   al,0x40
100001d6:	75 14                	jne    100001ec <Floppy::writeCommand(unsigned char)+0x82>
100001d8:	50                   	push   eax
100001d9:	89 f8                	mov    eax,edi
100001db:	0f b6 f8             	movzx  edi,al
100001de:	57                   	push   edi
100001df:	6a 05                	push   0x5
100001e1:	53                   	push   ebx
100001e2:	e8 fc ff ff ff       	call   100001e3 <Floppy::writeCommand(unsigned char)+0x79>	100001e3: R_386_PC32	Floppy::writePort(FloppyReg, unsigned char)
100001e7:	83 c4 10             	add    esp,0x10
100001ea:	eb 0a                	jmp    100001f6 <Floppy::writeCommand(unsigned char)+0x8c>
100001ec:	4e                   	dec    esi
100001ed:	75 c6                	jne    100001b5 <Floppy::writeCommand(unsigned char)+0x4b>
100001ef:	c6 83 82 01 00 00 01 	mov    BYTE PTR [ebx+0x182],0x1
100001f6:	5b                   	pop    ebx
100001f7:	5e                   	pop    esi
100001f8:	5f                   	pop    edi
100001f9:	c3                   	ret    

100001fa <Floppy::readData()>:
100001fa:	56                   	push   esi
100001fb:	53                   	push   ebx
100001fc:	51                   	push   ecx
100001fd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
10000201:	80 bb 82 01 00 00 00 	cmp    BYTE PTR [ebx+0x182],0x0
10000208:	74 10                	je     1000021a <Floppy::readData()+0x20>
1000020a:	83 ec 0c             	sub    esp,0xc
1000020d:	68 c1 07 00 10       	push   0x100007c1	1000020e: R_386_32	.text
10000212:	e8 fc ff ff ff       	call   10000213 <Floppy::readData()+0x19>	10000213: R_386_PC32	Krnl::panic(char const*)
10000217:	83 c4 10             	add    esp,0x10
1000021a:	80 bb 83 01 00 00 00 	cmp    BYTE PTR [ebx+0x183],0x0
10000221:	75 10                	jne    10000233 <Floppy::readData()+0x39>
10000223:	83 ec 0c             	sub    esp,0xc
10000226:	68 f1 07 00 10       	push   0x100007f1	10000227: R_386_32	.text
1000022b:	e8 fc ff ff ff       	call   1000022c <Floppy::readData()+0x32>	1000022c: R_386_PC32	Krnl::panic(char const*)
10000230:	83 c4 10             	add    esp,0x10
10000233:	66 c7 83 82 01 00 00 00 00 	mov    WORD PTR [ebx+0x182],0x0
1000023c:	be 32 00 00 00       	mov    esi,0x32
10000241:	50                   	push   eax
10000242:	50                   	push   eax
10000243:	6a 00                	push   0x0
10000245:	68 80 96 98 00       	push   0x989680
1000024a:	e8 fc ff ff ff       	call   1000024b <Floppy::readData()+0x51>	1000024b: R_386_PC32	nanoSleep(unsigned long long)
1000024f:	58                   	pop    eax
10000250:	5a                   	pop    edx
10000251:	6a 04                	push   0x4
10000253:	53                   	push   ebx
10000254:	e8 fc ff ff ff       	call   10000255 <Floppy::readData()+0x5b>	10000255: R_386_PC32	Floppy::readPort(FloppyReg)
10000259:	83 c4 10             	add    esp,0x10
1000025c:	84 c0                	test   al,al
1000025e:	79 13                	jns    10000273 <Floppy::readData()+0x79>
10000260:	a8 40                	test   al,0x40
10000262:	74 0f                	je     10000273 <Floppy::readData()+0x79>
10000264:	51                   	push   ecx
10000265:	51                   	push   ecx
10000266:	6a 05                	push   0x5
10000268:	53                   	push   ebx
10000269:	e8 fc ff ff ff       	call   1000026a <Floppy::readData()+0x70>	1000026a: R_386_PC32	Floppy::readPort(FloppyReg)
1000026e:	83 c4 10             	add    esp,0x10
10000271:	eb 0c                	jmp    1000027f <Floppy::readData()+0x85>
10000273:	4e                   	dec    esi
10000274:	75 cb                	jne    10000241 <Floppy::readData()+0x47>
10000276:	c6 83 82 01 00 00 01 	mov    BYTE PTR [ebx+0x182],0x1
1000027d:	31 c0                	xor    eax,eax
1000027f:	5a                   	pop    edx
10000280:	5b                   	pop    ebx
10000281:	5e                   	pop    esi
10000282:	c3                   	ret    
10000283:	90                   	nop

10000284 <Floppy::readPort(FloppyReg)>:
10000284:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
10000288:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
1000028e:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
10000292:	89 c2                	mov    edx,eax
10000294:	ec                   	in     al,dx
10000295:	c3                   	ret    

10000296 <Floppy::writePort(FloppyReg, unsigned char)>:
10000296:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
1000029a:	8b 90 58 01 00 00    	mov    edx,DWORD PTR [eax+0x158]
100002a0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
100002a4:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
100002a8:	ee                   	out    dx,al
100002a9:	c3                   	ret    

100002aa <Floppy::configure()>:
100002aa:	c3                   	ret    
100002ab:	90                   	nop

100002ac <Floppy::driveDetection()>:
100002ac:	57                   	push   edi
100002ad:	56                   	push   esi
100002ae:	53                   	push   ebx
100002af:	83 ec 0c             	sub    esp,0xc
100002b2:	68 1f 08 00 10       	push   0x1000081f	100002b3: R_386_32	.text
100002b7:	e8 fc ff ff ff       	call   100002b8 <Floppy::driveDetection()+0xc>	100002b8: R_386_PC32	Dbg::kprintf(char const*, ...)
100002bc:	83 c4 10             	add    esp,0x10
100002bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
100002c3:	66 81 b8 58 01 00 00 f0 03 	cmp    WORD PTR [eax+0x158],0x3f0
100002cc:	75 59                	jne    10000327 <Floppy::driveDetection()+0x7b>
100002ce:	50                   	push   eax
100002cf:	50                   	push   eax
100002d0:	6a 10                	push   0x10
100002d2:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	100002d4: R_386_32	Krnl::computer
100002d8:	e8 fc ff ff ff       	call   100002d9 <Floppy::driveDetection()+0x2d>	100002d9: R_386_PC32	Computer::readCMOS(unsigned char)
100002dd:	83 ec 0c             	sub    esp,0xc
100002e0:	0f b6 f0             	movzx  esi,al
100002e3:	89 e7                	mov    edi,esp
100002e5:	89 f3                	mov    ebx,esi
100002e7:	b9 15 00 00 00       	mov    ecx,0x15
100002ec:	c1 fe 04             	sar    esi,0x4
100002ef:	83 e3 0f             	and    ebx,0xf
100002f2:	6b f6 15             	imul   esi,esi,0x15
100002f5:	81 c6 00 00 00 00    	add    esi,0x0	100002f7: R_386_32	floppyTable
100002fb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
100002fd:	68 39 08 00 10       	push   0x10000839	100002fe: R_386_32	.text
10000302:	6b f3 15             	imul   esi,ebx,0x15
10000305:	e8 fc ff ff ff       	call   10000306 <Floppy::driveDetection()+0x5a>	10000306: R_386_PC32	Dbg::kprintf(char const*, ...)
1000030a:	81 c6 00 00 00 00    	add    esi,0x0	1000030c: R_386_32	floppyTable
10000310:	5a                   	pop    edx
10000311:	b9 15 00 00 00       	mov    ecx,0x15
10000316:	89 e7                	mov    edi,esp
10000318:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
1000031a:	68 4b 08 00 10       	push   0x1000084b	1000031b: R_386_32	.text
1000031f:	e8 fc ff ff ff       	call   10000320 <Floppy::driveDetection()+0x74>	10000320: R_386_PC32	Dbg::kprintf(char const*, ...)
10000324:	83 c4 20             	add    esp,0x20
10000327:	5b                   	pop    ebx
10000328:	5e                   	pop    esi
10000329:	5f                   	pop    edi
1000032a:	c3                   	ret    
1000032b:	90                   	nop

1000032c <Floppy::open(int, int, void*)>:
1000032c:	56                   	push   esi
1000032d:	53                   	push   ebx
1000032e:	50                   	push   eax
1000032f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
10000333:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
10000337:	0f b6 b3 c4 00 00 00 	movzx  esi,BYTE PTR [ebx+0xc4]
1000033e:	66 89 8b 58 01 00 00 	mov    WORD PTR [ebx+0x158],cx
10000345:	8d 04 b3             	lea    eax,[ebx+esi*4]
10000348:	89 f2                	mov    edx,esi
1000034a:	66 89 48 04          	mov    WORD PTR [eax+0x4],cx
1000034e:	c6 40 06 06          	mov    BYTE PTR [eax+0x6],0x6
10000352:	83 c2 02             	add    edx,0x2
10000355:	80 64 b3 07 3f       	and    BYTE PTR [ebx+esi*4+0x7],0x3f
1000035a:	83 c1 07             	add    ecx,0x7
1000035d:	8d 46 01             	lea    eax,[esi+0x1]
10000360:	0f b6 c0             	movzx  eax,al
10000363:	8d 34 83             	lea    esi,[ebx+eax*4]
10000366:	66 89 4e 04          	mov    WORD PTR [esi+0x4],cx
1000036a:	c6 46 06 01          	mov    BYTE PTR [esi+0x6],0x1
1000036e:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
10000374:	80 64 83 07 3f       	and    BYTE PTR [ebx+eax*4+0x7],0x3f
10000379:	c7 83 98 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x198],0x0
10000383:	c7 83 60 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x160],0x0
1000038d:	c7 83 9c 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x19c],0x0
10000397:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
100003a1:	c7 83 a0 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x1a0],0x0
100003ab:	c7 83 68 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x168],0x0
100003b5:	c7 83 a4 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x1a4],0x0
100003bf:	c7 83 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x16c],0x0
100003c9:	53                   	push   ebx
100003ca:	e8 fc ff ff ff       	call   100003cb <Floppy::open(int, int, void*)+0x9f>	100003cb: R_386_PC32	Floppy::wasFailure()
100003cf:	52                   	push   edx
100003d0:	52                   	push   edx
100003d1:	53                   	push   ebx
100003d2:	e8 fc ff ff ff       	call   100003d3 <Floppy::open(int, int, void*)+0xa7>	100003d3: R_386_PC32	Floppy::reset()
100003d7:	89 1c 24             	mov    DWORD PTR [esp],ebx
100003da:	e8 fc ff ff ff       	call   100003db <Floppy::open(int, int, void*)+0xaf>	100003db: R_386_PC32	Floppy::driveDetection()
100003df:	83 c4 14             	add    esp,0x14
100003e2:	31 c0                	xor    eax,eax
100003e4:	5b                   	pop    ebx
100003e5:	5e                   	pop    esi
100003e6:	c3                   	ret    
100003e7:	90                   	nop

100003e8 <Floppy::close(int, int, void*)>:
100003e8:	31 c0                	xor    eax,eax
100003ea:	c3                   	ret    
100003eb:	90                   	nop

100003ec <Floppy::senseInterrupt(int*, int*)>:
100003ec:	53                   	push   ebx
100003ed:	83 ec 10             	sub    esp,0x10
100003f0:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
100003f4:	6a 08                	push   0x8
100003f6:	53                   	push   ebx
100003f7:	e8 fc ff ff ff       	call   100003f8 <Floppy::senseInterrupt(int*, int*)+0xc>	100003f8: R_386_PC32	Floppy::writeCommand(unsigned char)
100003fc:	89 1c 24             	mov    DWORD PTR [esp],ebx
100003ff:	e8 fc ff ff ff       	call   10000400 <Floppy::senseInterrupt(int*, int*)+0x14>	10000400: R_386_PC32	Floppy::wasFailure()
10000404:	83 c4 10             	add    esp,0x10
10000407:	84 c0                	test   al,al
10000409:	74 04                	je     1000040f <Floppy::senseInterrupt(int*, int*)+0x23>
1000040b:	31 c0                	xor    eax,eax
1000040d:	eb 41                	jmp    10000450 <Floppy::senseInterrupt(int*, int*)+0x64>
1000040f:	83 ec 0c             	sub    esp,0xc
10000412:	53                   	push   ebx
10000413:	e8 fc ff ff ff       	call   10000414 <Floppy::senseInterrupt(int*, int*)+0x28>	10000414: R_386_PC32	Floppy::readData()
10000418:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
1000041c:	0f b6 c0             	movzx  eax,al
1000041f:	89 02                	mov    DWORD PTR [edx],eax
10000421:	89 1c 24             	mov    DWORD PTR [esp],ebx
10000424:	e8 fc ff ff ff       	call   10000425 <Floppy::senseInterrupt(int*, int*)+0x39>	10000425: R_386_PC32	Floppy::wasFailure()
10000429:	83 c4 10             	add    esp,0x10
1000042c:	84 c0                	test   al,al
1000042e:	75 db                	jne    1000040b <Floppy::senseInterrupt(int*, int*)+0x1f>
10000430:	83 ec 0c             	sub    esp,0xc
10000433:	53                   	push   ebx
10000434:	e8 fc ff ff ff       	call   10000435 <Floppy::senseInterrupt(int*, int*)+0x49>	10000435: R_386_PC32	Floppy::readData()
10000439:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
1000043d:	0f b6 c0             	movzx  eax,al
10000440:	89 02                	mov    DWORD PTR [edx],eax
10000442:	89 1c 24             	mov    DWORD PTR [esp],ebx
10000445:	e8 fc ff ff ff       	call   10000446 <Floppy::senseInterrupt(int*, int*)+0x5a>	10000446: R_386_PC32	Floppy::wasFailure()
1000044a:	83 c4 10             	add    esp,0x10
1000044d:	83 f0 01             	xor    eax,0x1
10000450:	83 c4 08             	add    esp,0x8
10000453:	5b                   	pop    ebx
10000454:	c3                   	ret    
10000455:	90                   	nop

10000456 <Floppy::lock()>:
10000456:	53                   	push   ebx
10000457:	83 ec 10             	sub    esp,0x10
1000045a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
1000045e:	6a 14                	push   0x14
10000460:	53                   	push   ebx
10000461:	e8 fc ff ff ff       	call   10000462 <Floppy::lock()+0xc>	10000462: R_386_PC32	Floppy::writeCommand(unsigned char)
10000466:	89 1c 24             	mov    DWORD PTR [esp],ebx
10000469:	e8 fc ff ff ff       	call   1000046a <Floppy::lock()+0x14>	1000046a: R_386_PC32	Floppy::wasFailure()
1000046e:	83 c4 10             	add    esp,0x10
10000471:	31 d2                	xor    edx,edx
10000473:	84 c0                	test   al,al
10000475:	75 19                	jne    10000490 <Floppy::lock()+0x3a>
10000477:	83 ec 0c             	sub    esp,0xc
1000047a:	53                   	push   ebx
1000047b:	e8 fc ff ff ff       	call   1000047c <Floppy::lock()+0x26>	1000047c: R_386_PC32	Floppy::readData()
10000480:	89 1c 24             	mov    DWORD PTR [esp],ebx
10000483:	e8 fc ff ff ff       	call   10000484 <Floppy::lock()+0x2e>	10000484: R_386_PC32	Floppy::wasFailure()
10000488:	83 c4 10             	add    esp,0x10
1000048b:	83 f0 01             	xor    eax,0x1
1000048e:	88 c2                	mov    dl,al
10000490:	88 d0                	mov    al,dl
10000492:	83 c4 08             	add    esp,0x8
10000495:	5b                   	pop    ebx
10000496:	c3                   	ret    
10000497:	90                   	nop

10000498 <Floppy::reset()>:
10000498:	57                   	push   edi
10000499:	56                   	push   esi
1000049a:	53                   	push   ebx
1000049b:	83 ec 10             	sub    esp,0x10
1000049e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
100004a2:	6a 02                	push   0x2
100004a4:	53                   	push   ebx
100004a5:	e8 fc ff ff ff       	call   100004a6 <Floppy::reset()+0xe>	100004a6: R_386_PC32	Floppy::readPort(FloppyReg)
100004aa:	6a 00                	push   0x0
100004ac:	88 c1                	mov    cl,al
100004ae:	6a 02                	push   0x2
100004b0:	53                   	push   ebx
100004b1:	e8 fc ff ff ff       	call   100004b2 <Floppy::reset()+0x1a>	100004b2: R_386_PC32	Floppy::writePort(FloppyReg, unsigned char)
100004b6:	88 c8                	mov    al,cl
100004b8:	83 c8 04             	or     eax,0x4
100004bb:	0f b6 c0             	movzx  eax,al
100004be:	50                   	push   eax
100004bf:	6a 02                	push   0x2
100004c1:	53                   	push   ebx
100004c2:	e8 fc ff ff ff       	call   100004c3 <Floppy::reset()+0x2b>	100004c3: R_386_PC32	Floppy::writePort(FloppyReg, unsigned char)
100004c7:	83 c4 20             	add    esp,0x20
100004ca:	f6 c1 08             	test   cl,0x8
100004cd:	74 0f                	je     100004de <Floppy::reset()+0x46>
100004cf:	83 ec 0c             	sub    esp,0xc
100004d2:	68 5d 08 00 10       	push   0x1000085d	100004d3: R_386_32	.text
100004d7:	e8 fc ff ff ff       	call   100004d8 <Floppy::reset()+0x40>	100004d8: R_386_PC32	Krnl::panic(char const*)
100004dc:	eb 10                	jmp    100004ee <Floppy::reset()+0x56>
100004de:	83 c9 0c             	or     ecx,0xc
100004e1:	57                   	push   edi
100004e2:	0f b6 c9             	movzx  ecx,cl
100004e5:	51                   	push   ecx
100004e6:	6a 02                	push   0x2
100004e8:	53                   	push   ebx
100004e9:	e8 fc ff ff ff       	call   100004ea <Floppy::reset()+0x52>	100004ea: R_386_PC32	Floppy::writePort(FloppyReg, unsigned char)
100004ee:	83 c4 10             	add    esp,0x10
100004f1:	80 bb 85 01 00 00 00 	cmp    BYTE PTR [ebx+0x185],0x0
100004f8:	74 51                	je     1000054b <Floppy::reset()+0xb3>
100004fa:	56                   	push   esi
100004fb:	8d 7c 24 10          	lea    edi,[esp+0x10]
100004ff:	57                   	push   edi
10000500:	8d 74 24 10          	lea    esi,[esp+0x10]
10000504:	56                   	push   esi
10000505:	53                   	push   ebx
10000506:	e8 fc ff ff ff       	call   10000507 <Floppy::reset()+0x6f>	10000507: R_386_PC32	Floppy::senseInterrupt(int*, int*)
1000050b:	83 c4 10             	add    esp,0x10
1000050e:	84 c0                	test   al,al
10000510:	75 09                	jne    1000051b <Floppy::reset()+0x83>
10000512:	c6 83 85 01 00 00 00 	mov    BYTE PTR [ebx+0x185],0x0
10000519:	eb 87                	jmp    100004a2 <Floppy::reset()+0xa>
1000051b:	51                   	push   ecx
1000051c:	57                   	push   edi
1000051d:	56                   	push   esi
1000051e:	53                   	push   ebx
1000051f:	e8 fc ff ff ff       	call   10000520 <Floppy::reset()+0x88>	10000520: R_386_PC32	Floppy::senseInterrupt(int*, int*)
10000524:	83 c4 10             	add    esp,0x10
10000527:	84 c0                	test   al,al
10000529:	74 e7                	je     10000512 <Floppy::reset()+0x7a>
1000052b:	52                   	push   edx
1000052c:	57                   	push   edi
1000052d:	56                   	push   esi
1000052e:	53                   	push   ebx
1000052f:	e8 fc ff ff ff       	call   10000530 <Floppy::reset()+0x98>	10000530: R_386_PC32	Floppy::senseInterrupt(int*, int*)
10000534:	83 c4 10             	add    esp,0x10
10000537:	84 c0                	test   al,al
10000539:	74 d7                	je     10000512 <Floppy::reset()+0x7a>
1000053b:	50                   	push   eax
1000053c:	57                   	push   edi
1000053d:	56                   	push   esi
1000053e:	53                   	push   ebx
1000053f:	e8 fc ff ff ff       	call   10000540 <Floppy::reset()+0xa8>	10000540: R_386_PC32	Floppy::senseInterrupt(int*, int*)
10000544:	83 c4 10             	add    esp,0x10
10000547:	84 c0                	test   al,al
10000549:	74 c7                	je     10000512 <Floppy::reset()+0x7a>
1000054b:	80 bb 80 01 00 00 00 	cmp    BYTE PTR [ebx+0x180],0x0
10000552:	75 09                	jne    1000055d <Floppy::reset()+0xc5>
10000554:	80 bb 81 01 00 00 00 	cmp    BYTE PTR [ebx+0x181],0x0
1000055b:	75 55                	jne    100005b2 <Floppy::reset()+0x11a>
1000055d:	80 bb 84 01 00 00 00 	cmp    BYTE PTR [ebx+0x184],0x0
10000564:	74 1f                	je     10000585 <Floppy::reset()+0xed>
10000566:	31 f6                	xor    esi,esi
10000568:	8b 84 b3 98 01 00 00 	mov    eax,DWORD PTR [ebx+esi*4+0x198]
1000056f:	85 c0                	test   eax,eax
10000571:	74 0c                	je     1000057f <Floppy::reset()+0xe7>
10000573:	83 ec 0c             	sub    esp,0xc
10000576:	50                   	push   eax
10000577:	e8 fc ff ff ff       	call   10000578 <Floppy::reset()+0xe0>	10000578: R_386_PC32	FloppyDrive::floppyConfigure()
1000057c:	83 c4 10             	add    esp,0x10
1000057f:	46                   	inc    esi
10000580:	83 fe 04             	cmp    esi,0x4
10000583:	75 e3                	jne    10000568 <Floppy::reset()+0xd0>
10000585:	80 bb 81 01 00 00 00 	cmp    BYTE PTR [ebx+0x181],0x0
1000058c:	75 24                	jne    100005b2 <Floppy::reset()+0x11a>
1000058e:	83 ec 0c             	sub    esp,0xc
10000591:	53                   	push   ebx
10000592:	e8 fc ff ff ff       	call   10000593 <Floppy::reset()+0xfb>	10000593: R_386_PC32	Floppy::lock()
10000597:	83 c4 10             	add    esp,0x10
1000059a:	83 f0 01             	xor    eax,0x1
1000059d:	c6 83 81 01 00 00 01 	mov    BYTE PTR [ebx+0x181],0x1
100005a4:	88 83 80 01 00 00    	mov    BYTE PTR [ebx+0x180],al
100005aa:	84 c0                	test   al,al
100005ac:	0f 85 f0 fe ff ff    	jne    100004a2 <Floppy::reset()+0xa>
100005b2:	83 c4 10             	add    esp,0x10
100005b5:	5b                   	pop    ebx
100005b6:	5e                   	pop    esi
100005b7:	5f                   	pop    edi
100005b8:	c3                   	ret    
100005b9:	90                   	nop

100005ba <Floppy::motor(int, bool)>:
100005ba:	56                   	push   esi
100005bb:	53                   	push   ebx
100005bc:	50                   	push   eax
100005bd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
100005c1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
100005c5:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
100005ca:	8d 1c 86             	lea    ebx,[esi+eax*4]
100005cd:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
100005d3:	74 6f                	je     10000644 <Floppy::motor(int, bool)+0x8a>
100005d5:	85 c0                	test   eax,eax
100005d7:	75 64                	jne    1000063d <Floppy::motor(int, bool)+0x83>
100005d9:	e8 fc ff ff ff       	call   100005da <Floppy::motor(int, bool)+0x20>	100005da: R_386_PC32	lockScheduler()
100005de:	50                   	push   eax
100005df:	50                   	push   eax
100005e0:	6a 02                	push   0x2
100005e2:	56                   	push   esi
100005e3:	e8 fc ff ff ff       	call   100005e4 <Floppy::motor(int, bool)+0x2a>	100005e4: R_386_PC32	Floppy::readPort(FloppyReg)
100005e8:	83 c4 0c             	add    esp,0xc
100005eb:	ba 10 00 00 00       	mov    edx,0x10
100005f0:	8a 4c 24 18          	mov    cl,BYTE PTR [esp+0x18]
100005f4:	d3 e2                	shl    edx,cl
100005f6:	09 d0                	or     eax,edx
100005f8:	0f b6 c0             	movzx  eax,al
100005fb:	50                   	push   eax
100005fc:	6a 02                	push   0x2
100005fe:	56                   	push   esi
100005ff:	e8 fc ff ff ff       	call   10000600 <Floppy::motor(int, bool)+0x46>	10000600: R_386_PC32	Floppy::writePort(FloppyReg, unsigned char)
10000604:	e8 fc ff ff ff       	call   10000605 <Floppy::motor(int, bool)+0x4b>	10000605: R_386_PC32	unlockScheduler()
10000609:	83 c4 10             	add    esp,0x10
1000060c:	83 bb 88 01 00 00 04 	cmp    DWORD PTR [ebx+0x188],0x4
10000613:	75 0b                	jne    10000620 <Floppy::motor(int, bool)+0x66>
10000615:	51                   	push   ecx
10000616:	51                   	push   ecx
10000617:	6a 00                	push   0x0
10000619:	68 00 a3 e1 11       	push   0x11e1a300
1000061e:	eb 09                	jmp    10000629 <Floppy::motor(int, bool)+0x6f>
10000620:	52                   	push   edx
10000621:	52                   	push   edx
10000622:	6a 00                	push   0x0
10000624:	68 00 65 cd 1d       	push   0x1dcd6500
10000629:	e8 fc ff ff ff       	call   1000062a <Floppy::motor(int, bool)+0x70>	1000062a: R_386_PC32	nanoSleep(unsigned long long)
1000062e:	83 c4 10             	add    esp,0x10
10000631:	c7 83 60 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x160],0x1
1000063b:	eb 1e                	jmp    1000065b <Floppy::motor(int, bool)+0xa1>
1000063d:	83 f8 02             	cmp    eax,0x2
10000640:	75 19                	jne    1000065b <Floppy::motor(int, bool)+0xa1>
10000642:	eb ed                	jmp    10000631 <Floppy::motor(int, bool)+0x77>
10000644:	48                   	dec    eax
10000645:	75 14                	jne    1000065b <Floppy::motor(int, bool)+0xa1>
10000647:	c7 83 60 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x160],0x2
10000651:	c7 83 70 01 00 00 c4 09 00 00 	mov    DWORD PTR [ebx+0x170],0x9c4
1000065b:	58                   	pop    eax
1000065c:	5b                   	pop    ebx
1000065d:	5e                   	pop    esi
1000065e:	c3                   	ret    
1000065f:	90                   	nop
10000660:	55                   	push   ebp
10000661:	89 e5                	mov    ebp,esp
10000663:	83 ec 08             	sub    esp,0x8
10000666:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000669:	83 ec 04             	sub    esp,0x4
1000066c:	68 00 02 00 00       	push   0x200
10000671:	68 65 08 00 10       	push   0x10000865	10000672: R_386_32	.text
10000676:	50                   	push   eax
10000677:	e8 fc ff ff ff       	call   10000678 <Floppy::motor(int, bool)+0xbe>	10000678: R_386_PC32	PhysicalDisk::PhysicalDisk(char const*, int)
1000067c:	83 c4 10             	add    esp,0x10
1000067f:	ba 08 00 00 00       	mov    edx,0x8	10000680: R_386_32	vtable for FloppyDrive
10000684:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000687:	89 10                	mov    DWORD PTR [eax],edx
10000689:	90                   	nop
1000068a:	c9                   	leave  
1000068b:	c3                   	ret    

1000068c <FloppyDrive::configure()>:
1000068c:	c3                   	ret    
1000068d:	90                   	nop
1000068e:	83 ec 10             	sub    esp,0x10
10000691:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10000695:	6a 01                	push   0x1
10000697:	ff b0 70 01 00 00    	push   DWORD PTR [eax+0x170]
1000069d:	ff b0 6c 01 00 00    	push   DWORD PTR [eax+0x16c]
100006a3:	e8 fc ff ff ff       	call   100006a4 <FloppyDrive::configure()+0x18>	100006a4: R_386_PC32	Floppy::motor(int, bool)
100006a8:	83 c4 1c             	add    esp,0x1c
100006ab:	c3                   	ret    
100006ac:	83 ec 10             	sub    esp,0x10
100006af:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
100006b3:	6a 00                	push   0x0
100006b5:	ff b0 70 01 00 00    	push   DWORD PTR [eax+0x170]
100006bb:	ff b0 6c 01 00 00    	push   DWORD PTR [eax+0x16c]
100006c1:	e8 fc ff ff ff       	call   100006c2 <FloppyDrive::configure()+0x36>	100006c2: R_386_PC32	Floppy::motor(int, bool)
100006c6:	83 c4 1c             	add    esp,0x1c
100006c9:	c3                   	ret    

100006ca <FloppyDrive::floppyConfigure()>:
100006ca:	53                   	push   ebx
100006cb:	83 ec 10             	sub    esp,0x10
100006ce:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
100006d2:	6a 13                	push   0x13
100006d4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
100006da:	e8 fc ff ff ff       	call   100006db <FloppyDrive::floppyConfigure()+0x11>	100006db: R_386_PC32	Floppy::writeCommand(unsigned char)
100006df:	5a                   	pop    edx
100006e0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
100006e6:	e8 fc ff ff ff       	call   100006e7 <FloppyDrive::floppyConfigure()+0x1d>	100006e7: R_386_PC32	Floppy::wasFailure()
100006eb:	83 c4 10             	add    esp,0x10
100006ee:	84 c0                	test   al,al
100006f0:	74 04                	je     100006f6 <FloppyDrive::floppyConfigure()+0x2c>
100006f2:	31 c0                	xor    eax,eax
100006f4:	eb 75                	jmp    1000076b <FloppyDrive::floppyConfigure()+0xa1>
100006f6:	50                   	push   eax
100006f7:	50                   	push   eax
100006f8:	6a 00                	push   0x0
100006fa:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
10000700:	e8 fc ff ff ff       	call   10000701 <FloppyDrive::floppyConfigure()+0x37>	10000701: R_386_PC32	Floppy::writeCommand(unsigned char)
10000705:	58                   	pop    eax
10000706:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
1000070c:	e8 fc ff ff ff       	call   1000070d <FloppyDrive::floppyConfigure()+0x43>	1000070d: R_386_PC32	Floppy::wasFailure()
10000711:	83 c4 10             	add    esp,0x10
10000714:	84 c0                	test   al,al
10000716:	75 da                	jne    100006f2 <FloppyDrive::floppyConfigure()+0x28>
10000718:	50                   	push   eax
10000719:	50                   	push   eax
1000071a:	6a 17                	push   0x17
1000071c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
10000722:	e8 fc ff ff ff       	call   10000723 <FloppyDrive::floppyConfigure()+0x59>	10000723: R_386_PC32	Floppy::writeCommand(unsigned char)
10000727:	58                   	pop    eax
10000728:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
1000072e:	e8 fc ff ff ff       	call   1000072f <FloppyDrive::floppyConfigure()+0x65>	1000072f: R_386_PC32	Floppy::wasFailure()
10000733:	83 c4 10             	add    esp,0x10
10000736:	84 c0                	test   al,al
10000738:	75 b8                	jne    100006f2 <FloppyDrive::floppyConfigure()+0x28>
1000073a:	50                   	push   eax
1000073b:	50                   	push   eax
1000073c:	6a 00                	push   0x0
1000073e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
10000744:	e8 fc ff ff ff       	call   10000745 <FloppyDrive::floppyConfigure()+0x7b>	10000745: R_386_PC32	Floppy::writeCommand(unsigned char)
10000749:	58                   	pop    eax
1000074a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
10000750:	e8 fc ff ff ff       	call   10000751 <FloppyDrive::floppyConfigure()+0x87>	10000751: R_386_PC32	Floppy::wasFailure()
10000755:	83 c4 10             	add    esp,0x10
10000758:	84 c0                	test   al,al
1000075a:	75 96                	jne    100006f2 <FloppyDrive::floppyConfigure()+0x28>
1000075c:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
10000762:	c6 80 85 01 00 00 00 	mov    BYTE PTR [eax+0x185],0x0
10000769:	b0 01                	mov    al,0x1
1000076b:	83 c4 08             	add    esp,0x8
1000076e:	5b                   	pop    ebx
1000076f:	c3                   	ret    

10000770 <FloppyDrive::open(int, int, void*)>:
10000770:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
10000774:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
10000778:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
1000077e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
10000782:	89 90 70 01 00 00    	mov    DWORD PTR [eax+0x170],edx
10000788:	31 c0                	xor    eax,eax
1000078a:	c3                   	ret    
1000078b:	90                   	nop

1000078c <FloppyDrive::close(int, int, void*)>:
1000078c:	31 c0                	xor    eax,eax
1000078e:	c3                   	ret    
1000078f:	90                   	nop
10000790:	96                   	xchg   esi,eax
10000791:	00 00                	add    BYTE PTR [eax],al
10000793:	00 2c 01             	add    BYTE PTR [ecx+eax*1],ch
10000796:	00 00                	add    BYTE PTR [eax],al
10000798:	46                   	inc    esi
10000799:	6c                   	ins    BYTE PTR es:[edi],dx
1000079a:	6f                   	outs   dx,DWORD PTR ds:[esi]
1000079b:	70 70                	jo     1000080d <FloppyDrive::close(int, int, void*)+0x81>
1000079d:	79 20                	jns    100007bf <FloppyDrive::close(int, int, void*)+0x33>
1000079f:	44                   	inc    esp
100007a0:	69 73 6b 20 43 6f 6e 	imul   esi,DWORD PTR [ebx+0x6b],0x6e6f4320
100007a7:	74 72                	je     1000081b <FloppyDrive::close(int, int, void*)+0x8f>
100007a9:	6f                   	outs   dx,DWORD PTR ds:[esi]
100007aa:	6c                   	ins    BYTE PTR es:[edi],dx
100007ab:	6c                   	ins    BYTE PTR es:[edi],dx
100007ac:	65 72 00             	gs jb  100007af <FloppyDrive::close(int, int, void*)+0x23>
100007af:	46                   	inc    esi
100007b0:	6c                   	ins    BYTE PTR es:[edi],dx
100007b1:	6f                   	outs   dx,DWORD PTR ds:[esi]
100007b2:	70 70                	jo     10000824 <FloppyDrive::close(int, int, void*)+0x98>
100007b4:	79 3a                	jns    100007f0 <FloppyDrive::close(int, int, void*)+0x64>
100007b6:	3a 46 6c             	cmp    al,BYTE PTR [esi+0x6c]
100007b9:	6f                   	outs   dx,DWORD PTR ds:[esi]
100007ba:	70 70                	jo     1000082c <FloppyDrive::close(int, int, void*)+0xa0>
100007bc:	79 28                	jns    100007e6 <FloppyDrive::close(int, int, void*)+0x5a>
100007be:	29 0a                	sub    DWORD PTR [edx],ecx
100007c0:	00 50 52             	add    BYTE PTR [eax+0x52],dl
100007c3:	45                   	inc    ebp
100007c4:	56                   	push   esi
100007c5:	49                   	dec    ecx
100007c6:	4f                   	dec    edi
100007c7:	55                   	push   ebp
100007c8:	53                   	push   ebx
100007c9:	20 43 4f             	and    BYTE PTR [ebx+0x4f],al
100007cc:	4d                   	dec    ebp
100007cd:	4d                   	dec    ebp
100007ce:	41                   	inc    ecx
100007cf:	4e                   	dec    esi
100007d0:	44                   	inc    esp
100007d1:	20 46 41             	and    BYTE PTR [esi+0x41],al
100007d4:	49                   	dec    ecx
100007d5:	4c                   	dec    esp
100007d6:	45                   	inc    ebp
100007d7:	44                   	inc    esp
100007d8:	2c 20                	sub    al,0x20
100007da:	43                   	inc    ebx
100007db:	41                   	inc    ecx
100007dc:	55                   	push   ebp
100007dd:	47                   	inc    edi
100007de:	48                   	dec    eax
100007df:	54                   	push   esp
100007e0:	20 42 59             	and    BYTE PTR [edx+0x59],al
100007e3:	20 77 72             	and    BYTE PTR [edi+0x72],dh
100007e6:	69 74 65 43 6f 6d 6d 61 	imul   esi,DWORD PTR [ebp+eiz*2+0x43],0x616d6d6f
100007ee:	6e                   	outs   dx,BYTE PTR ds:[esi]
100007ef:	64 00 44 49 44       	add    BYTE PTR fs:[ecx+ecx*2+0x44],al
100007f4:	20 4e 4f             	and    BYTE PTR [esi+0x4f],cl
100007f7:	54                   	push   esp
100007f8:	20 43 48             	and    BYTE PTR [ebx+0x48],al
100007fb:	45                   	inc    ebp
100007fc:	43                   	inc    ebx
100007fd:	4b                   	dec    ebx
100007fe:	20 46 4f             	and    BYTE PTR [esi+0x4f],al
10000801:	52                   	push   edx
10000802:	20 46 41             	and    BYTE PTR [esi+0x41],al
10000805:	49                   	dec    ecx
10000806:	4c                   	dec    esp
10000807:	55                   	push   ebp
10000808:	52                   	push   edx
10000809:	45                   	inc    ebp
1000080a:	20 42 45             	and    BYTE PTR [edx+0x45],al
1000080d:	46                   	inc    esi
1000080e:	4f                   	dec    edi
1000080f:	52                   	push   edx
10000810:	45                   	inc    ebp
10000811:	20 77 72             	and    BYTE PTR [edi+0x72],dh
10000814:	69 74 65 43 6f 6d 6d 61 	imul   esi,DWORD PTR [ebp+eiz*2+0x43],0x616d6d6f
1000081c:	6e                   	outs   dx,BYTE PTR ds:[esi]
1000081d:	64 00 46 6c          	add    BYTE PTR fs:[esi+0x6c],al
10000821:	6f                   	outs   dx,DWORD PTR ds:[esi]
10000822:	70 70                	jo     10000894 <vtable for FloppyDrive+0x1c>
10000824:	79 3a                	jns    10000860 <FloppyDrive::close(int, int, void*)+0xd4>
10000826:	3a 64 72 69          	cmp    ah,BYTE PTR [edx+esi*2+0x69]
1000082a:	76 65                	jbe    10000891 <vtable for FloppyDrive+0x19>
1000082c:	44                   	inc    esp
1000082d:	65 74 65             	gs je  10000895 <vtable for FloppyDrive+0x1d>
10000830:	63 74 69 6f          	arpl   WORD PTR [ecx+ebp*2+0x6f],si
10000834:	6e                   	outs   dx,BYTE PTR ds:[esi]
10000835:	28 29                	sub    BYTE PTR [ecx],ch
10000837:	0a 00                	or     al,BYTE PTR [eax]
10000839:	44                   	inc    esp
1000083a:	72 69                	jb     100008a5 <vtable for FloppyDrive+0x2d>
1000083c:	76 65                	jbe    100008a3 <vtable for FloppyDrive+0x2b>
1000083e:	20 74 79 70          	and    BYTE PTR [ecx+edi*2+0x70],dh
10000842:	65 20 30             	and    BYTE PTR gs:[eax],dh
10000845:	3a 20                	cmp    ah,BYTE PTR [eax]
10000847:	25 73 0a 00 44       	and    eax,0x44000a73
1000084c:	72 69                	jb     100008b7 <vtable for Floppy+0x3>
1000084e:	76 65                	jbe    100008b5 <vtable for Floppy+0x1>
10000850:	20 74 79 70          	and    BYTE PTR [ecx+edi*2+0x70],dh
10000854:	65 20 31             	and    BYTE PTR gs:[ecx],dh
10000857:	3a 20                	cmp    ah,BYTE PTR [eax]
10000859:	25 73 0a 00 55       	and    eax,0x55000a73
1000085e:	4e                   	dec    esi
1000085f:	49                   	dec    ecx
10000860:	4d                   	dec    ebp
10000861:	50                   	push   eax
10000862:	4c                   	dec    esp
10000863:	2e 00 46 6c          	add    BYTE PTR cs:[esi+0x6c],al
10000867:	6f                   	outs   dx,DWORD PTR ds:[esi]
10000868:	70 70                	jo     100008da <vtable for Floppy+0x26>
1000086a:	79 20                	jns    1000088c <vtable for FloppyDrive+0x14>
1000086c:	44                   	inc    esp
1000086d:	69 73 6b 20 44 72 69 	imul   esi,DWORD PTR [ebx+0x6b],0x69724420
10000874:	76 65                	jbe    100008db <vtable for Floppy+0x27>
10000876:	00                   	.byte 0x0
10000877:	90                   	nop

10000878 <vtable for FloppyDrive>:
	...
	10000888: R_386_32	FloppyDrive::open(int, int, void*)
	1000088c: R_386_32	FloppyDrive::close(int, int, void*)
	10000890: R_386_32	Device::hibernate()
	10000894: R_386_32	Device::wake()
	10000898: R_386_32	Device::detect()
	1000089c: R_386_32	Device::disableLegacy()
	100008a0: R_386_32	Device::powerSaving(PowerSavingLevel)
	100008a4: R_386_32	PhysicalDisk::eject()
	100008a8: R_386_32	__cxa_pure_virtual
	100008ac: R_386_32	__cxa_pure_virtual
	100008b0: R_386_32	FloppyDrive::configure()

100008b4 <vtable for Floppy>:
	...
	100008bc: R_386_32	Floppy::~Floppy()
	100008c0: R_386_32	Floppy::~Floppy()
	100008c4: R_386_32	Floppy::open(int, int, void*)
	100008c8: R_386_32	Floppy::close(int, int, void*)
	100008cc: R_386_32	Device::hibernate()
	100008d0: R_386_32	Device::wake()
	100008d4: R_386_32	Device::detect()
	100008d8: R_386_32	Device::disableLegacy()
	100008dc: R_386_32	Device::powerSaving(PowerSavingLevel)
	100008e0: R_386_32	Floppy::configure()

Disassembly of section .text._ZN6FloppyD2Ev:

100008e4 <Floppy::~Floppy()>:
100008e4:	55                   	push   ebp
100008e5:	89 e5                	mov    ebp,esp
100008e7:	83 ec 08             	sub    esp,0x8
100008ea:	ba 08 00 00 00       	mov    edx,0x8	100008eb: R_386_32	vtable for Floppy
100008ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100008f2:	89 10                	mov    DWORD PTR [eax],edx
100008f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100008f7:	83 ec 0c             	sub    esp,0xc
100008fa:	50                   	push   eax
100008fb:	e8 fc ff ff ff       	call   100008fc <Floppy::~Floppy()+0x18>	100008fc: R_386_PC32	HardDiskController::~HardDiskController()
10000900:	83 c4 10             	add    esp,0x10
10000903:	90                   	nop
10000904:	c9                   	leave  
10000905:	c3                   	ret    

Disassembly of section .text._ZN6FloppyD0Ev:

10000906 <Floppy::~Floppy()>:
10000906:	55                   	push   ebp
10000907:	89 e5                	mov    ebp,esp
10000909:	83 ec 08             	sub    esp,0x8
1000090c:	83 ec 0c             	sub    esp,0xc
1000090f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000912:	e8 fc ff ff ff       	call   10000913 <Floppy::~Floppy()+0xd>	10000913: R_386_PC32	Floppy::~Floppy()
10000917:	83 c4 10             	add    esp,0x10
1000091a:	83 ec 08             	sub    esp,0x8
1000091d:	68 a8 01 00 00       	push   0x1a8
10000922:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000925:	e8 fc ff ff ff       	call   10000926 <Floppy::~Floppy()+0x20>	10000926: R_386_PC32	operator delete(void*, unsigned long)
1000092a:	83 c4 10             	add    esp,0x10
1000092d:	c9                   	leave  
1000092e:	c3                   	ret    
