
packages/system/32/0002/floppy.sys:     file format elf32-i386


Disassembly of section .text:

10000000 <start(void*)-0x17>:
10000000:	55                   	push   ebp
10000001:	89 e5                	mov    ebp,esp
10000003:	83 ec 08             	sub    esp,0x8
10000006:	83 ec 0c             	sub    esp,0xc
10000009:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000000c:	e8 fc ff ff ff       	call   1000000d <start(void*)-0xa>	1000000d: R_386_PC32	start(void*)
10000011:	83 c4 10             	add    esp,0x10
10000014:	90                   	nop
10000015:	c9                   	leave  
10000016:	c3                   	ret    

10000017 <start(void*)>:
10000017:	55                   	push   ebp
10000018:	89 e5                	mov    ebp,esp
1000001a:	53                   	push   ebx
1000001b:	83 ec 14             	sub    esp,0x14
1000001e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000021:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
10000024:	83 ec 0c             	sub    esp,0xc
10000027:	68 b0 01 00 00       	push   0x1b0
1000002c:	e8 fc ff ff ff       	call   1000002d <start(void*)+0x16>	1000002d: R_386_PC32	operator new(unsigned long)
10000031:	83 c4 10             	add    esp,0x10
10000034:	89 c3                	mov    ebx,eax
10000036:	83 ec 0c             	sub    esp,0xc
10000039:	53                   	push   ebx
1000003a:	e8 fc ff ff ff       	call   1000003b <start(void*)+0x24>	1000003b: R_386_PC32	Floppy::Floppy()
1000003f:	83 c4 10             	add    esp,0x10
10000042:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
10000045:	83 ec 08             	sub    esp,0x8
10000048:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
1000004b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
1000004e:	e8 fc ff ff ff       	call   1000004f <start(void*)+0x38>	1000004f: R_386_PC32	Device::addChild(Device*)
10000053:	83 c4 10             	add    esp,0x10
10000056:	6a 00                	push   0x0
10000058:	6a 00                	push   0x0
1000005a:	68 f0 03 00 00       	push   0x3f0
1000005f:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000062:	e8 fc ff ff ff       	call   10000063 <start(void*)+0x4c>	10000063: R_386_PC32	Floppy::_open(int, int, void*)
10000067:	83 c4 10             	add    esp,0x10
1000006a:	90                   	nop
1000006b:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
1000006e:	c9                   	leave  
1000006f:	c3                   	ret    

10000070 <floppyMotorFunction(void*)>:
10000070:	55                   	push   ebp
10000071:	89 e5                	mov    ebp,esp
10000073:	83 ec 18             	sub    esp,0x18
10000076:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000079:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
1000007c:	e8 fc ff ff ff       	call   1000007d <floppyMotorFunction(void*)+0xd>	1000007d: R_386_PC32	unlockScheduler()
10000081:	83 ec 08             	sub    esp,0x8
10000084:	6a 00                	push   0x0
10000086:	68 00 84 d7 17       	push   0x17d78400
1000008b:	e8 fc ff ff ff       	call   1000008c <floppyMotorFunction(void*)+0x1c>	1000008c: R_386_PC32	nanoSleep(unsigned long long)
10000090:	83 c4 10             	add    esp,0x10
10000093:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
1000009a:	83 7d f4 03          	cmp    DWORD PTR [ebp-0xc],0x3
1000009e:	7f e1                	jg     10000081 <floppyMotorFunction(void*)+0x11>
100000a0:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100000a3:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
100000a6:	83 c2 58             	add    edx,0x58
100000a9:	8b 44 90 04          	mov    eax,DWORD PTR [eax+edx*4+0x4]
100000ad:	83 f8 02             	cmp    eax,0x2
100000b0:	0f 85 8a 00 00 00    	jne    10000140 <floppyMotorFunction(void*)+0xd0>
100000b6:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100000b9:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
100000bc:	83 c2 5c             	add    edx,0x5c
100000bf:	8b 44 90 04          	mov    eax,DWORD PTR [eax+edx*4+0x4]
100000c3:	8d 88 70 fe ff ff    	lea    ecx,[eax-0x190]
100000c9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100000cc:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
100000cf:	83 c2 5c             	add    edx,0x5c
100000d2:	89 4c 90 04          	mov    DWORD PTR [eax+edx*4+0x4],ecx
100000d6:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100000d9:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
100000dc:	83 c2 5c             	add    edx,0x5c
100000df:	8b 44 90 04          	mov    eax,DWORD PTR [eax+edx*4+0x4]
100000e3:	85 c0                	test   eax,eax
100000e5:	7f 59                	jg     10000140 <floppyMotorFunction(void*)+0xd0>
100000e7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100000ea:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
100000ed:	83 c2 58             	add    edx,0x58
100000f0:	c7 44 90 04 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x4],0x0
100000f8:	e8 fc ff ff ff       	call   100000f9 <floppyMotorFunction(void*)+0x89>	100000f9: R_386_PC32	lockScheduler()
100000fd:	83 ec 08             	sub    esp,0x8
10000100:	6a 02                	push   0x2
10000102:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000105:	e8 fc ff ff ff       	call   10000106 <floppyMotorFunction(void*)+0x96>	10000106: R_386_PC32	Floppy::readPort(FloppyReg)
1000010a:	83 c4 10             	add    esp,0x10
1000010d:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
10000110:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10000113:	ba 10 00 00 00       	mov    edx,0x10
10000118:	88 c1                	mov    cl,al
1000011a:	d3 e2                	shl    edx,cl
1000011c:	89 d0                	mov    eax,edx
1000011e:	f7 d0                	not    eax
10000120:	88 c2                	mov    dl,al
10000122:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
10000125:	21 d0                	and    eax,edx
10000127:	0f b6 c0             	movzx  eax,al
1000012a:	83 ec 04             	sub    esp,0x4
1000012d:	50                   	push   eax
1000012e:	6a 02                	push   0x2
10000130:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000133:	e8 fc ff ff ff       	call   10000134 <floppyMotorFunction(void*)+0xc4>	10000134: R_386_PC32	Floppy::writePort(FloppyReg, unsigned char)
10000138:	83 c4 10             	add    esp,0x10
1000013b:	e8 fc ff ff ff       	call   1000013c <floppyMotorFunction(void*)+0xcc>	1000013c: R_386_PC32	unlockScheduler()
10000140:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10000143:	e9 52 ff ff ff       	jmp    1000009a <floppyMotorFunction(void*)+0x2a>

10000148 <floppyIRQHandler(regs*, void*)>:
10000148:	55                   	push   ebp
10000149:	89 e5                	mov    ebp,esp
1000014b:	83 ec 10             	sub    esp,0x10
1000014e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000151:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
10000154:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000157:	c6 80 60 01 00 00 01 	mov    BYTE PTR [eax+0x160],0x1
1000015e:	90                   	nop
1000015f:	c9                   	leave  
10000160:	c3                   	ret    
10000161:	90                   	nop

10000162 <Floppy::Floppy()>:
10000162:	55                   	push   ebp
10000163:	89 e5                	mov    ebp,esp
10000165:	83 ec 08             	sub    esp,0x8
10000168:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000016b:	83 ec 08             	sub    esp,0x8
1000016e:	68 98 22 00 10       	push   0x10002298	1000016f: R_386_32	.text
10000173:	50                   	push   eax
10000174:	e8 fc ff ff ff       	call   10000175 <Floppy::Floppy()+0x13>	10000175: R_386_PC32	HardDiskController::HardDiskController(char const*)
10000179:	83 c4 10             	add    esp,0x10
1000017c:	ba 08 00 00 00       	mov    edx,0x8	1000017d: R_386_32	vtable for Floppy
10000181:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000184:	89 10                	mov    DWORD PTR [eax],edx
10000186:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000189:	66 c7 80 58 01 00 00 f0 03 	mov    WORD PTR [eax+0x158],0x3f0
10000192:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000195:	c6 80 84 01 00 00 01 	mov    BYTE PTR [eax+0x184],0x1
1000019c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000019f:	c6 80 85 01 00 00 00 	mov    BYTE PTR [eax+0x185],0x0
100001a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100001a9:	c6 80 86 01 00 00 00 	mov    BYTE PTR [eax+0x186],0x0
100001b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100001b3:	c6 80 87 01 00 00 00 	mov    BYTE PTR [eax+0x187],0x0
100001ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100001bd:	c6 80 88 01 00 00 01 	mov    BYTE PTR [eax+0x188],0x1
100001c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100001c7:	c6 80 89 01 00 00 01 	mov    BYTE PTR [eax+0x189],0x1
100001ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100001d1:	c6 80 8a 01 00 00 00 	mov    BYTE PTR [eax+0x18a],0x0
100001d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100001db:	c7 80 8c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x18c],0xffffffff
100001e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100001e8:	83 ec 0c             	sub    esp,0xc
100001eb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100001ee:	6a 01                	push   0x1
100001f0:	68 00 00 00 00       	push   0x0	100001f1: R_386_32	floppyIRQHandler(regs*, void*)
100001f5:	6a 06                	push   0x6
100001f7:	50                   	push   eax
100001f8:	e8 fc ff ff ff       	call   100001f9 <Floppy::Floppy()+0x97>	100001f9: R_386_PC32	Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)
100001fd:	83 c4 20             	add    esp,0x20
10000200:	89 c2                	mov    edx,eax
10000202:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000205:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
1000020b:	a1 00 00 00 00       	mov    eax,ds:0x0	1000020c: R_386_32	kernelProcess
10000210:	68 d2 00 00 00       	push   0xd2
10000215:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000218:	68 00 00 00 00       	push   0x0	10000219: R_386_32	floppyMotorFunction(void*)
1000021d:	50                   	push   eax
1000021e:	e8 fc ff ff ff       	call   1000021f <Floppy::Floppy()+0xbd>	1000021f: R_386_PC32	Process::createThread(void (*)(void*), void*, int)
10000223:	83 c4 10             	add    esp,0x10
10000226:	89 c2                	mov    edx,eax
10000228:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000022b:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
10000231:	90                   	nop
10000232:	c9                   	leave  
10000233:	c3                   	ret    

10000234 <Floppy::wasFailure()>:
10000234:	55                   	push   ebp
10000235:	89 e5                	mov    ebp,esp
10000237:	83 ec 10             	sub    esp,0x10
1000023a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000023d:	c6 80 87 01 00 00 01 	mov    BYTE PTR [eax+0x187],0x1
10000244:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000247:	8a 80 86 01 00 00    	mov    al,BYTE PTR [eax+0x186]
1000024d:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
10000250:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000253:	c6 80 86 01 00 00 00 	mov    BYTE PTR [eax+0x186],0x0
1000025a:	8a 45 ff             	mov    al,BYTE PTR [ebp-0x1]
1000025d:	c9                   	leave  
1000025e:	c3                   	ret    
1000025f:	90                   	nop

10000260 <Floppy::writeCommand(unsigned char)>:
10000260:	55                   	push   ebp
10000261:	89 e5                	mov    ebp,esp
10000263:	83 ec 28             	sub    esp,0x28
10000266:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000269:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
1000026c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000026f:	8a 80 86 01 00 00    	mov    al,BYTE PTR [eax+0x186]
10000275:	84 c0                	test   al,al
10000277:	74 10                	je     10000289 <Floppy::writeCommand(unsigned char)+0x29>
10000279:	83 ec 0c             	sub    esp,0xc
1000027c:	68 b0 22 00 10       	push   0x100022b0	1000027d: R_386_32	.text
10000281:	e8 fc ff ff ff       	call   10000282 <Floppy::writeCommand(unsigned char)+0x22>	10000282: R_386_PC32	Krnl::panic(char const*)
10000286:	83 c4 10             	add    esp,0x10
10000289:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000028c:	8a 80 87 01 00 00    	mov    al,BYTE PTR [eax+0x187]
10000292:	83 f0 01             	xor    eax,0x1
10000295:	84 c0                	test   al,al
10000297:	74 10                	je     100002a9 <Floppy::writeCommand(unsigned char)+0x49>
10000299:	83 ec 0c             	sub    esp,0xc
1000029c:	68 e0 22 00 10       	push   0x100022e0	1000029d: R_386_32	.text
100002a1:	e8 fc ff ff ff       	call   100002a2 <Floppy::writeCommand(unsigned char)+0x42>	100002a2: R_386_PC32	Krnl::panic(char const*)
100002a6:	83 c4 10             	add    esp,0x10
100002a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002ac:	c6 80 87 01 00 00 00 	mov    BYTE PTR [eax+0x187],0x0
100002b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002b6:	c6 80 86 01 00 00 00 	mov    BYTE PTR [eax+0x186],0x0
100002bd:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
100002c4:	83 7d f4 31          	cmp    DWORD PTR [ebp-0xc],0x31
100002c8:	7f 53                	jg     1000031d <Floppy::writeCommand(unsigned char)+0xbd>
100002ca:	83 ec 08             	sub    esp,0x8
100002cd:	6a 00                	push   0x0
100002cf:	68 80 96 98 00       	push   0x989680
100002d4:	e8 fc ff ff ff       	call   100002d5 <Floppy::writeCommand(unsigned char)+0x75>	100002d5: R_386_PC32	nanoSleep(unsigned long long)
100002d9:	83 c4 10             	add    esp,0x10
100002dc:	83 ec 08             	sub    esp,0x8
100002df:	6a 04                	push   0x4
100002e1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100002e4:	e8 fc ff ff ff       	call   100002e5 <Floppy::writeCommand(unsigned char)+0x85>	100002e5: R_386_PC32	Floppy::readPort(FloppyReg)
100002e9:	83 c4 10             	add    esp,0x10
100002ec:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
100002ef:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
100002f2:	84 c0                	test   al,al
100002f4:	79 22                	jns    10000318 <Floppy::writeCommand(unsigned char)+0xb8>
100002f6:	0f b6 45 f3          	movzx  eax,BYTE PTR [ebp-0xd]
100002fa:	83 e0 40             	and    eax,0x40
100002fd:	85 c0                	test   eax,eax
100002ff:	75 17                	jne    10000318 <Floppy::writeCommand(unsigned char)+0xb8>
10000301:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
10000305:	83 ec 04             	sub    esp,0x4
10000308:	50                   	push   eax
10000309:	6a 05                	push   0x5
1000030b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000030e:	e8 fc ff ff ff       	call   1000030f <Floppy::writeCommand(unsigned char)+0xaf>	1000030f: R_386_PC32	Floppy::writePort(FloppyReg, unsigned char)
10000313:	83 c4 10             	add    esp,0x10
10000316:	eb 0f                	jmp    10000327 <Floppy::writeCommand(unsigned char)+0xc7>
10000318:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
1000031b:	eb a7                	jmp    100002c4 <Floppy::writeCommand(unsigned char)+0x64>
1000031d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000320:	c6 80 86 01 00 00 01 	mov    BYTE PTR [eax+0x186],0x1
10000327:	c9                   	leave  
10000328:	c3                   	ret    
10000329:	90                   	nop

1000032a <Floppy::readData()>:
1000032a:	55                   	push   ebp
1000032b:	89 e5                	mov    ebp,esp
1000032d:	83 ec 18             	sub    esp,0x18
10000330:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000333:	8a 80 86 01 00 00    	mov    al,BYTE PTR [eax+0x186]
10000339:	84 c0                	test   al,al
1000033b:	74 10                	je     1000034d <Floppy::readData()+0x23>
1000033d:	83 ec 0c             	sub    esp,0xc
10000340:	68 b0 22 00 10       	push   0x100022b0	10000341: R_386_32	.text
10000345:	e8 fc ff ff ff       	call   10000346 <Floppy::readData()+0x1c>	10000346: R_386_PC32	Krnl::panic(char const*)
1000034a:	83 c4 10             	add    esp,0x10
1000034d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000350:	8a 80 87 01 00 00    	mov    al,BYTE PTR [eax+0x187]
10000356:	83 f0 01             	xor    eax,0x1
10000359:	84 c0                	test   al,al
1000035b:	74 10                	je     1000036d <Floppy::readData()+0x43>
1000035d:	83 ec 0c             	sub    esp,0xc
10000360:	68 e0 22 00 10       	push   0x100022e0	10000361: R_386_32	.text
10000365:	e8 fc ff ff ff       	call   10000366 <Floppy::readData()+0x3c>	10000366: R_386_PC32	Krnl::panic(char const*)
1000036a:	83 c4 10             	add    esp,0x10
1000036d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000370:	c6 80 87 01 00 00 00 	mov    BYTE PTR [eax+0x187],0x0
10000377:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000037a:	c6 80 86 01 00 00 00 	mov    BYTE PTR [eax+0x186],0x0
10000381:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
10000388:	83 7d f4 31          	cmp    DWORD PTR [ebp-0xc],0x31
1000038c:	7f 4e                	jg     100003dc <Floppy::readData()+0xb2>
1000038e:	83 ec 08             	sub    esp,0x8
10000391:	6a 00                	push   0x0
10000393:	68 80 96 98 00       	push   0x989680
10000398:	e8 fc ff ff ff       	call   10000399 <Floppy::readData()+0x6f>	10000399: R_386_PC32	nanoSleep(unsigned long long)
1000039d:	83 c4 10             	add    esp,0x10
100003a0:	83 ec 08             	sub    esp,0x8
100003a3:	6a 04                	push   0x4
100003a5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100003a8:	e8 fc ff ff ff       	call   100003a9 <Floppy::readData()+0x7f>	100003a9: R_386_PC32	Floppy::readPort(FloppyReg)
100003ad:	83 c4 10             	add    esp,0x10
100003b0:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
100003b3:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
100003b6:	84 c0                	test   al,al
100003b8:	79 1d                	jns    100003d7 <Floppy::readData()+0xad>
100003ba:	0f b6 45 f3          	movzx  eax,BYTE PTR [ebp-0xd]
100003be:	83 e0 40             	and    eax,0x40
100003c1:	85 c0                	test   eax,eax
100003c3:	74 12                	je     100003d7 <Floppy::readData()+0xad>
100003c5:	83 ec 08             	sub    esp,0x8
100003c8:	6a 05                	push   0x5
100003ca:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100003cd:	e8 fc ff ff ff       	call   100003ce <Floppy::readData()+0xa4>	100003ce: R_386_PC32	Floppy::readPort(FloppyReg)
100003d2:	83 c4 10             	add    esp,0x10
100003d5:	eb 11                	jmp    100003e8 <Floppy::readData()+0xbe>
100003d7:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
100003da:	eb ac                	jmp    10000388 <Floppy::readData()+0x5e>
100003dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100003df:	c6 80 86 01 00 00 01 	mov    BYTE PTR [eax+0x186],0x1
100003e6:	b0 00                	mov    al,0x0
100003e8:	c9                   	leave  
100003e9:	c3                   	ret    

100003ea <Floppy::readPort(FloppyReg)>:
100003ea:	55                   	push   ebp
100003eb:	89 e5                	mov    ebp,esp
100003ed:	83 ec 10             	sub    esp,0x10
100003f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100003f3:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
100003f9:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
100003fc:	01 d0                	add    eax,edx
100003fe:	0f b7 c0             	movzx  eax,ax
10000401:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
10000405:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
10000409:	89 c2                	mov    edx,eax
1000040b:	ec                   	in     al,dx
1000040c:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
1000040f:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
10000412:	90                   	nop
10000413:	c9                   	leave  
10000414:	c3                   	ret    
10000415:	90                   	nop

10000416 <Floppy::writePort(FloppyReg, unsigned char)>:
10000416:	55                   	push   ebp
10000417:	89 e5                	mov    ebp,esp
10000419:	83 ec 14             	sub    esp,0x14
1000041c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
1000041f:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
10000422:	0f b6 4d ec          	movzx  ecx,BYTE PTR [ebp-0x14]
10000426:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000429:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
1000042f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10000432:	01 d0                	add    eax,edx
10000434:	0f b7 c0             	movzx  eax,ax
10000437:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
1000043b:	88 4d fd             	mov    BYTE PTR [ebp-0x3],cl
1000043e:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
10000441:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
10000445:	ee                   	out    dx,al
10000446:	90                   	nop
10000447:	c9                   	leave  
10000448:	c3                   	ret    
10000449:	90                   	nop

1000044a <Floppy::driveDetection()>:
1000044a:	55                   	push   ebp
1000044b:	89 e5                	mov    ebp,esp
1000044d:	53                   	push   ebx
1000044e:	83 ec 24             	sub    esp,0x24
10000451:	83 ec 0c             	sub    esp,0xc
10000454:	68 0e 23 00 10       	push   0x1000230e	10000455: R_386_32	.text
10000459:	e8 fc ff ff ff       	call   1000045a <Floppy::driveDetection()+0x10>	1000045a: R_386_PC32	Dbg::kprintf(char const*, ...)
1000045e:	83 c4 10             	add    esp,0x10
10000461:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000464:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
1000046a:	66 3d f0 03          	cmp    ax,0x3f0
1000046e:	0f 85 06 01 00 00    	jne    1000057a <Floppy::driveDetection()+0x130>
10000474:	a1 00 00 00 00       	mov    eax,ds:0x0	10000475: R_386_32	Krnl::computer
10000479:	83 ec 08             	sub    esp,0x8
1000047c:	6a 10                	push   0x10
1000047e:	50                   	push   eax
1000047f:	e8 fc ff ff ff       	call   10000480 <Floppy::driveDetection()+0x36>	10000480: R_386_PC32	Computer::readCMOS(unsigned char)
10000484:	83 c4 10             	add    esp,0x10
10000487:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
1000048a:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
1000048e:	c1 f8 04             	sar    eax,0x4
10000491:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10000494:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
10000498:	83 e0 0f             	and    eax,0xf
1000049b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
1000049e:	83 ec 08             	sub    esp,0x8
100004a1:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
100004a4:	68 28 23 00 10       	push   0x10002328	100004a5: R_386_32	.text
100004a9:	e8 fc ff ff ff       	call   100004aa <Floppy::driveDetection()+0x60>	100004aa: R_386_PC32	Dbg::kprintf(char const*, ...)
100004ae:	83 c4 10             	add    esp,0x10
100004b1:	83 ec 08             	sub    esp,0x8
100004b4:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
100004b7:	68 3c 23 00 10       	push   0x1000233c	100004b8: R_386_32	.text
100004bc:	e8 fc ff ff ff       	call   100004bd <Floppy::driveDetection()+0x73>	100004bd: R_386_PC32	Dbg::kprintf(char const*, ...)
100004c1:	83 c4 10             	add    esp,0x10
100004c4:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
100004c8:	74 52                	je     1000051c <Floppy::driveDetection()+0xd2>
100004ca:	83 ec 0c             	sub    esp,0xc
100004cd:	68 74 01 00 00       	push   0x174
100004d2:	e8 fc ff ff ff       	call   100004d3 <Floppy::driveDetection()+0x89>	100004d3: R_386_PC32	operator new(unsigned long)
100004d7:	83 c4 10             	add    esp,0x10
100004da:	89 c3                	mov    ebx,eax
100004dc:	83 ec 0c             	sub    esp,0xc
100004df:	53                   	push   ebx
100004e0:	e8 fc ff ff ff       	call   100004e1 <Floppy::driveDetection()+0x97>	100004e1: R_386_PC32	FloppyDrive::FloppyDrive()
100004e5:	83 c4 10             	add    esp,0x10
100004e8:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
100004eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100004ee:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
100004f1:	89 90 90 01 00 00    	mov    DWORD PTR [eax+0x190],edx
100004f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100004fa:	83 ec 08             	sub    esp,0x8
100004fd:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
10000500:	50                   	push   eax
10000501:	e8 fc ff ff ff       	call   10000502 <Floppy::driveDetection()+0xb8>	10000502: R_386_PC32	Device::addChild(Device*)
10000506:	83 c4 10             	add    esp,0x10
10000509:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000050c:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
1000050f:	6a 00                	push   0x0
10000511:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
10000514:	e8 fc ff ff ff       	call   10000515 <Floppy::driveDetection()+0xcb>	10000515: R_386_PC32	FloppyDrive::_open(int, int, void*)
10000519:	83 c4 10             	add    esp,0x10
1000051c:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
10000520:	74 58                	je     1000057a <Floppy::driveDetection()+0x130>
10000522:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
10000526:	74 52                	je     1000057a <Floppy::driveDetection()+0x130>
10000528:	83 ec 0c             	sub    esp,0xc
1000052b:	68 74 01 00 00       	push   0x174
10000530:	e8 fc ff ff ff       	call   10000531 <Floppy::driveDetection()+0xe7>	10000531: R_386_PC32	operator new(unsigned long)
10000535:	83 c4 10             	add    esp,0x10
10000538:	89 c3                	mov    ebx,eax
1000053a:	83 ec 0c             	sub    esp,0xc
1000053d:	53                   	push   ebx
1000053e:	e8 fc ff ff ff       	call   1000053f <Floppy::driveDetection()+0xf5>	1000053f: R_386_PC32	FloppyDrive::FloppyDrive()
10000543:	83 c4 10             	add    esp,0x10
10000546:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
10000549:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000054c:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
1000054f:	89 90 94 01 00 00    	mov    DWORD PTR [eax+0x194],edx
10000555:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000558:	83 ec 08             	sub    esp,0x8
1000055b:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
1000055e:	50                   	push   eax
1000055f:	e8 fc ff ff ff       	call   10000560 <Floppy::driveDetection()+0x116>	10000560: R_386_PC32	Device::addChild(Device*)
10000564:	83 c4 10             	add    esp,0x10
10000567:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000056a:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
1000056d:	6a 01                	push   0x1
1000056f:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
10000572:	e8 fc ff ff ff       	call   10000573 <Floppy::driveDetection()+0x129>	10000573: R_386_PC32	FloppyDrive::_open(int, int, void*)
10000577:	83 c4 10             	add    esp,0x10
1000057a:	90                   	nop
1000057b:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
1000057e:	c9                   	leave  
1000057f:	c3                   	ret    

10000580 <Floppy::close(int, int, void*)>:
10000580:	b8 00 00 00 00       	mov    eax,0x0
10000585:	c3                   	ret    

10000586 <Floppy::open(int, int, void*)>:
10000586:	b8 00 00 00 00       	mov    eax,0x0
1000058b:	c3                   	ret    

1000058c <Floppy::_open(int, int, void*)>:
1000058c:	55                   	push   ebp
1000058d:	89 e5                	mov    ebp,esp
1000058f:	83 ec 18             	sub    esp,0x18
10000592:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000595:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10000598:	66 89 82 58 01 00 00 	mov    WORD PTR [edx+0x158],ax
1000059f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100005a2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
100005a8:	0f b6 c8             	movzx  ecx,al
100005ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100005ae:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
100005b4:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
100005b7:	66 89 44 8a 04       	mov    WORD PTR [edx+ecx*4+0x4],ax
100005bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100005bf:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
100005c5:	0f b6 d0             	movzx  edx,al
100005c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100005cb:	c6 44 90 06 06       	mov    BYTE PTR [eax+edx*4+0x6],0x6
100005d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100005d3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
100005d9:	8d 50 01             	lea    edx,[eax+0x1]
100005dc:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
100005df:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
100005e5:	0f b6 d0             	movzx  edx,al
100005e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100005eb:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
100005ef:	83 e1 3f             	and    ecx,0x3f
100005f2:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
100005f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100005f9:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
100005ff:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10000602:	8a 92 c4 00 00 00    	mov    dl,BYTE PTR [edx+0xc4]
10000608:	0f b6 ca             	movzx  ecx,dl
1000060b:	83 c0 07             	add    eax,0x7
1000060e:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10000611:	66 89 44 8a 04       	mov    WORD PTR [edx+ecx*4+0x4],ax
10000616:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000619:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
1000061f:	0f b6 d0             	movzx  edx,al
10000622:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000625:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
1000062a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000062d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10000633:	8d 50 01             	lea    edx,[eax+0x1]
10000636:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
10000639:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
1000063f:	0f b6 d0             	movzx  edx,al
10000642:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000645:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
10000649:	83 e1 3f             	and    ecx,0x3f
1000064c:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
10000650:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
10000657:	83 7d f4 03          	cmp    DWORD PTR [ebp-0xc],0x3
1000065b:	7f 26                	jg     10000683 <Floppy::_open(int, int, void*)+0xf7>
1000065d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000660:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10000663:	83 c2 68             	add    edx,0x68
10000666:	c7 04 90 00 00 00 00 	mov    DWORD PTR [eax+edx*4],0x0
1000066d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000670:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10000673:	83 c2 58             	add    edx,0x58
10000676:	c7 44 90 04 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x4],0x0
1000067e:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10000681:	eb d4                	jmp    10000657 <Floppy::_open(int, int, void*)+0xcb>
10000683:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000686:	e8 fc ff ff ff       	call   10000687 <Floppy::_open(int, int, void*)+0xfb>	10000687: R_386_PC32	Floppy::wasFailure()
1000068b:	83 c4 04             	add    esp,0x4
1000068e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000691:	c6 80 89 01 00 00 01 	mov    BYTE PTR [eax+0x189],0x1
10000698:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000069b:	c6 80 85 01 00 00 00 	mov    BYTE PTR [eax+0x185],0x0
100006a2:	83 ec 0c             	sub    esp,0xc
100006a5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100006a8:	e8 fc ff ff ff       	call   100006a9 <Floppy::_open(int, int, void*)+0x11d>	100006a9: R_386_PC32	Floppy::reset()
100006ad:	83 c4 10             	add    esp,0x10
100006b0:	83 ec 0c             	sub    esp,0xc
100006b3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100006b6:	e8 fc ff ff ff       	call   100006b7 <Floppy::_open(int, int, void*)+0x12b>	100006b7: R_386_PC32	Floppy::driveDetection()
100006bb:	83 c4 10             	add    esp,0x10
100006be:	b8 00 00 00 00       	mov    eax,0x0
100006c3:	c9                   	leave  
100006c4:	c3                   	ret    
100006c5:	90                   	nop

100006c6 <Floppy::senseInterrupt(int*, int*)>:
100006c6:	55                   	push   ebp
100006c7:	89 e5                	mov    ebp,esp
100006c9:	83 ec 08             	sub    esp,0x8
100006cc:	83 ec 08             	sub    esp,0x8
100006cf:	6a 08                	push   0x8
100006d1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100006d4:	e8 fc ff ff ff       	call   100006d5 <Floppy::senseInterrupt(int*, int*)+0xf>	100006d5: R_386_PC32	Floppy::writeCommand(unsigned char)
100006d9:	83 c4 10             	add    esp,0x10
100006dc:	83 ec 0c             	sub    esp,0xc
100006df:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100006e2:	e8 fc ff ff ff       	call   100006e3 <Floppy::senseInterrupt(int*, int*)+0x1d>	100006e3: R_386_PC32	Floppy::wasFailure()
100006e7:	83 c4 10             	add    esp,0x10
100006ea:	84 c0                	test   al,al
100006ec:	74 04                	je     100006f2 <Floppy::senseInterrupt(int*, int*)+0x2c>
100006ee:	b0 00                	mov    al,0x0
100006f0:	eb 5a                	jmp    1000074c <Floppy::senseInterrupt(int*, int*)+0x86>
100006f2:	83 ec 0c             	sub    esp,0xc
100006f5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100006f8:	e8 fc ff ff ff       	call   100006f9 <Floppy::senseInterrupt(int*, int*)+0x33>	100006f9: R_386_PC32	Floppy::readData()
100006fd:	83 c4 10             	add    esp,0x10
10000700:	0f b6 d0             	movzx  edx,al
10000703:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000706:	89 10                	mov    DWORD PTR [eax],edx
10000708:	83 ec 0c             	sub    esp,0xc
1000070b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000070e:	e8 fc ff ff ff       	call   1000070f <Floppy::senseInterrupt(int*, int*)+0x49>	1000070f: R_386_PC32	Floppy::wasFailure()
10000713:	83 c4 10             	add    esp,0x10
10000716:	84 c0                	test   al,al
10000718:	74 04                	je     1000071e <Floppy::senseInterrupt(int*, int*)+0x58>
1000071a:	b0 00                	mov    al,0x0
1000071c:	eb 2e                	jmp    1000074c <Floppy::senseInterrupt(int*, int*)+0x86>
1000071e:	83 ec 0c             	sub    esp,0xc
10000721:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000724:	e8 fc ff ff ff       	call   10000725 <Floppy::senseInterrupt(int*, int*)+0x5f>	10000725: R_386_PC32	Floppy::readData()
10000729:	83 c4 10             	add    esp,0x10
1000072c:	0f b6 d0             	movzx  edx,al
1000072f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
10000732:	89 10                	mov    DWORD PTR [eax],edx
10000734:	83 ec 0c             	sub    esp,0xc
10000737:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000073a:	e8 fc ff ff ff       	call   1000073b <Floppy::senseInterrupt(int*, int*)+0x75>	1000073b: R_386_PC32	Floppy::wasFailure()
1000073f:	83 c4 10             	add    esp,0x10
10000742:	84 c0                	test   al,al
10000744:	74 04                	je     1000074a <Floppy::senseInterrupt(int*, int*)+0x84>
10000746:	b0 00                	mov    al,0x0
10000748:	eb 02                	jmp    1000074c <Floppy::senseInterrupt(int*, int*)+0x86>
1000074a:	b0 01                	mov    al,0x1
1000074c:	c9                   	leave  
1000074d:	c3                   	ret    

1000074e <Floppy::lock()>:
1000074e:	55                   	push   ebp
1000074f:	89 e5                	mov    ebp,esp
10000751:	83 ec 08             	sub    esp,0x8
10000754:	83 ec 08             	sub    esp,0x8
10000757:	6a 14                	push   0x14
10000759:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000075c:	e8 fc ff ff ff       	call   1000075d <Floppy::lock()+0xf>	1000075d: R_386_PC32	Floppy::writeCommand(unsigned char)
10000761:	83 c4 10             	add    esp,0x10
10000764:	83 ec 0c             	sub    esp,0xc
10000767:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000076a:	e8 fc ff ff ff       	call   1000076b <Floppy::lock()+0x1d>	1000076b: R_386_PC32	Floppy::wasFailure()
1000076f:	83 c4 10             	add    esp,0x10
10000772:	84 c0                	test   al,al
10000774:	74 04                	je     1000077a <Floppy::lock()+0x2c>
10000776:	b0 00                	mov    al,0x0
10000778:	eb 26                	jmp    100007a0 <Floppy::lock()+0x52>
1000077a:	83 ec 0c             	sub    esp,0xc
1000077d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000780:	e8 fc ff ff ff       	call   10000781 <Floppy::lock()+0x33>	10000781: R_386_PC32	Floppy::readData()
10000785:	83 c4 10             	add    esp,0x10
10000788:	83 ec 0c             	sub    esp,0xc
1000078b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000078e:	e8 fc ff ff ff       	call   1000078f <Floppy::lock()+0x41>	1000078f: R_386_PC32	Floppy::wasFailure()
10000793:	83 c4 10             	add    esp,0x10
10000796:	84 c0                	test   al,al
10000798:	74 04                	je     1000079e <Floppy::lock()+0x50>
1000079a:	b0 00                	mov    al,0x0
1000079c:	eb 02                	jmp    100007a0 <Floppy::lock()+0x52>
1000079e:	b0 01                	mov    al,0x1
100007a0:	c9                   	leave  
100007a1:	c3                   	ret    

100007a2 <Floppy::waitIRQ(int)>:
100007a2:	55                   	push   ebp
100007a3:	89 e5                	mov    ebp,esp
100007a5:	83 ec 18             	sub    esp,0x18
100007a8:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
100007af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100007b2:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
100007b8:	84 c0                	test   al,al
100007ba:	75 21                	jne    100007dd <Floppy::waitIRQ(int)+0x3b>
100007bc:	83 ec 08             	sub    esp,0x8
100007bf:	6a 00                	push   0x0
100007c1:	68 80 f0 fa 02       	push   0x2faf080
100007c6:	e8 fc ff ff ff       	call   100007c7 <Floppy::waitIRQ(int)+0x25>	100007c7: R_386_PC32	nanoSleep(unsigned long long)
100007cb:	83 c4 10             	add    esp,0x10
100007ce:	83 45 f4 32          	add    DWORD PTR [ebp-0xc],0x32
100007d2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
100007d5:	3b 45 0c             	cmp    eax,DWORD PTR [ebp+0xc]
100007d8:	7d 02                	jge    100007dc <Floppy::waitIRQ(int)+0x3a>
100007da:	eb d3                	jmp    100007af <Floppy::waitIRQ(int)+0xd>
100007dc:	90                   	nop
100007dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100007e0:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
100007e6:	c9                   	leave  
100007e7:	c3                   	ret    

100007e8 <Floppy::reset()>:
100007e8:	55                   	push   ebp
100007e9:	89 e5                	mov    ebp,esp
100007eb:	83 ec 28             	sub    esp,0x28
100007ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100007f1:	c6 80 60 01 00 00 00 	mov    BYTE PTR [eax+0x160],0x0
100007f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100007fb:	c7 80 8c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x18c],0xffffffff
10000805:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000808:	c6 80 8a 01 00 00 00 	mov    BYTE PTR [eax+0x18a],0x0
1000080f:	6a 02                	push   0x2
10000811:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000814:	e8 fc ff ff ff       	call   10000815 <Floppy::reset()+0x2d>	10000815: R_386_PC32	Floppy::readPort(FloppyReg)
10000819:	83 c4 08             	add    esp,0x8
1000081c:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
1000081f:	6a 00                	push   0x0
10000821:	6a 02                	push   0x2
10000823:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000826:	e8 fc ff ff ff       	call   10000827 <Floppy::reset()+0x3f>	10000827: R_386_PC32	Floppy::writePort(FloppyReg, unsigned char)
1000082b:	83 c4 0c             	add    esp,0xc
1000082e:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
10000831:	83 c8 0c             	or     eax,0xc
10000834:	0f b6 c0             	movzx  eax,al
10000837:	50                   	push   eax
10000838:	6a 02                	push   0x2
1000083a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000083d:	e8 fc ff ff ff       	call   1000083e <Floppy::reset()+0x56>	1000083e: R_386_PC32	Floppy::writePort(FloppyReg, unsigned char)
10000842:	83 c4 0c             	add    esp,0xc
10000845:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
10000849:	83 e0 08             	and    eax,0x8
1000084c:	85 c0                	test   eax,eax
1000084e:	74 3f                	je     1000088f <Floppy::reset()+0xa7>
10000850:	83 ec 08             	sub    esp,0x8
10000853:	68 90 01 00 00       	push   0x190
10000858:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000085b:	e8 fc ff ff ff       	call   1000085c <Floppy::reset()+0x74>	1000085c: R_386_PC32	Floppy::waitIRQ(int)
10000860:	83 c4 10             	add    esp,0x10
10000863:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
10000866:	8a 45 ee             	mov    al,BYTE PTR [ebp-0x12]
10000869:	83 f0 01             	xor    eax,0x1
1000086c:	84 c0                	test   al,al
1000086e:	74 3e                	je     100008ae <Floppy::reset()+0xc6>
10000870:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
10000873:	83 c8 0c             	or     eax,0xc
10000876:	0f b6 c0             	movzx  eax,al
10000879:	83 ec 04             	sub    esp,0x4
1000087c:	50                   	push   eax
1000087d:	6a 02                	push   0x2
1000087f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000882:	e8 fc ff ff ff       	call   10000883 <Floppy::reset()+0x9b>	10000883: R_386_PC32	Floppy::writePort(FloppyReg, unsigned char)
10000887:	83 c4 10             	add    esp,0x10
1000088a:	e9 5f ff ff ff       	jmp    100007ee <Floppy::reset()+0x6>
1000088f:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
10000892:	83 c8 0c             	or     eax,0xc
10000895:	0f b6 c0             	movzx  eax,al
10000898:	83 ec 04             	sub    esp,0x4
1000089b:	50                   	push   eax
1000089c:	6a 02                	push   0x2
1000089e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100008a1:	e8 fc ff ff ff       	call   100008a2 <Floppy::reset()+0xba>	100008a2: R_386_PC32	Floppy::writePort(FloppyReg, unsigned char)
100008a6:	83 c4 10             	add    esp,0x10
100008a9:	e9 40 ff ff ff       	jmp    100007ee <Floppy::reset()+0x6>
100008ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100008b1:	8a 80 89 01 00 00    	mov    al,BYTE PTR [eax+0x189]
100008b7:	84 c0                	test   al,al
100008b9:	0f 84 8f 00 00 00    	je     1000094e <Floppy::reset()+0x166>
100008bf:	83 ec 04             	sub    esp,0x4
100008c2:	8d 45 e4             	lea    eax,[ebp-0x1c]
100008c5:	50                   	push   eax
100008c6:	8d 45 e8             	lea    eax,[ebp-0x18]
100008c9:	50                   	push   eax
100008ca:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100008cd:	e8 fc ff ff ff       	call   100008ce <Floppy::reset()+0xe6>	100008ce: R_386_PC32	Floppy::senseInterrupt(int*, int*)
100008d2:	83 c4 10             	add    esp,0x10
100008d5:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
100008d8:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
100008dc:	74 19                	je     100008f7 <Floppy::reset()+0x10f>
100008de:	83 ec 04             	sub    esp,0x4
100008e1:	8d 45 e4             	lea    eax,[ebp-0x1c]
100008e4:	50                   	push   eax
100008e5:	8d 45 e8             	lea    eax,[ebp-0x18]
100008e8:	50                   	push   eax
100008e9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100008ec:	e8 fc ff ff ff       	call   100008ed <Floppy::reset()+0x105>	100008ed: R_386_PC32	Floppy::senseInterrupt(int*, int*)
100008f1:	83 c4 10             	add    esp,0x10
100008f4:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
100008f7:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
100008fb:	74 19                	je     10000916 <Floppy::reset()+0x12e>
100008fd:	83 ec 04             	sub    esp,0x4
10000900:	8d 45 e4             	lea    eax,[ebp-0x1c]
10000903:	50                   	push   eax
10000904:	8d 45 e8             	lea    eax,[ebp-0x18]
10000907:	50                   	push   eax
10000908:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000090b:	e8 fc ff ff ff       	call   1000090c <Floppy::reset()+0x124>	1000090c: R_386_PC32	Floppy::senseInterrupt(int*, int*)
10000910:	83 c4 10             	add    esp,0x10
10000913:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
10000916:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
1000091a:	74 19                	je     10000935 <Floppy::reset()+0x14d>
1000091c:	83 ec 04             	sub    esp,0x4
1000091f:	8d 45 e4             	lea    eax,[ebp-0x1c]
10000922:	50                   	push   eax
10000923:	8d 45 e8             	lea    eax,[ebp-0x18]
10000926:	50                   	push   eax
10000927:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000092a:	e8 fc ff ff ff       	call   1000092b <Floppy::reset()+0x143>	1000092b: R_386_PC32	Floppy::senseInterrupt(int*, int*)
1000092f:	83 c4 10             	add    esp,0x10
10000932:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
10000935:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
10000938:	83 f0 01             	xor    eax,0x1
1000093b:	84 c0                	test   al,al
1000093d:	74 0f                	je     1000094e <Floppy::reset()+0x166>
1000093f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000942:	c6 80 89 01 00 00 00 	mov    BYTE PTR [eax+0x189],0x0
10000949:	e9 a0 fe ff ff       	jmp    100007ee <Floppy::reset()+0x6>
1000094e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000951:	8a 80 84 01 00 00    	mov    al,BYTE PTR [eax+0x184]
10000957:	84 c0                	test   al,al
10000959:	75 14                	jne    1000096f <Floppy::reset()+0x187>
1000095b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000095e:	8a 80 85 01 00 00    	mov    al,BYTE PTR [eax+0x185]
10000964:	83 f0 01             	xor    eax,0x1
10000967:	84 c0                	test   al,al
10000969:	0f 84 8f 00 00 00    	je     100009fe <Floppy::reset()+0x216>
1000096f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000972:	8a 80 88 01 00 00    	mov    al,BYTE PTR [eax+0x188]
10000978:	84 c0                	test   al,al
1000097a:	74 3a                	je     100009b6 <Floppy::reset()+0x1ce>
1000097c:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
10000983:	83 7d f0 03          	cmp    DWORD PTR [ebp-0x10],0x3
10000987:	7f 2d                	jg     100009b6 <Floppy::reset()+0x1ce>
10000989:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000098c:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
1000098f:	83 c2 68             	add    edx,0x68
10000992:	8b 04 90             	mov    eax,DWORD PTR [eax+edx*4]
10000995:	85 c0                	test   eax,eax
10000997:	74 18                	je     100009b1 <Floppy::reset()+0x1c9>
10000999:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000099c:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
1000099f:	83 c2 68             	add    edx,0x68
100009a2:	8b 04 90             	mov    eax,DWORD PTR [eax+edx*4]
100009a5:	83 ec 0c             	sub    esp,0xc
100009a8:	50                   	push   eax
100009a9:	e8 fc ff ff ff       	call   100009aa <Floppy::reset()+0x1c2>	100009aa: R_386_PC32	FloppyDrive::floppyConfigure()
100009ae:	83 c4 10             	add    esp,0x10
100009b1:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
100009b4:	eb cd                	jmp    10000983 <Floppy::reset()+0x19b>
100009b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100009b9:	8a 80 85 01 00 00    	mov    al,BYTE PTR [eax+0x185]
100009bf:	83 f0 01             	xor    eax,0x1
100009c2:	84 c0                	test   al,al
100009c4:	74 38                	je     100009fe <Floppy::reset()+0x216>
100009c6:	83 ec 0c             	sub    esp,0xc
100009c9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100009cc:	e8 fc ff ff ff       	call   100009cd <Floppy::reset()+0x1e5>	100009cd: R_386_PC32	Floppy::lock()
100009d1:	83 c4 10             	add    esp,0x10
100009d4:	83 f0 01             	xor    eax,0x1
100009d7:	88 c2                	mov    dl,al
100009d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100009dc:	88 90 84 01 00 00    	mov    BYTE PTR [eax+0x184],dl
100009e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100009e5:	c6 80 85 01 00 00 01 	mov    BYTE PTR [eax+0x185],0x1
100009ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100009ef:	8a 80 84 01 00 00    	mov    al,BYTE PTR [eax+0x184]
100009f5:	84 c0                	test   al,al
100009f7:	74 05                	je     100009fe <Floppy::reset()+0x216>
100009f9:	e9 f0 fd ff ff       	jmp    100007ee <Floppy::reset()+0x6>
100009fe:	90                   	nop
100009ff:	c9                   	leave  
10000a00:	c3                   	ret    
10000a01:	90                   	nop

10000a02 <Floppy::dmaInit(bool)>:
10000a02:	55                   	push   ebp
10000a03:	89 e5                	mov    ebp,esp
10000a05:	83 ec 48             	sub    esp,0x48
10000a08:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000a0b:	88 45 c4             	mov    BYTE PTR [ebp-0x3c],al
10000a0e:	a1 00 71 00 10       	mov    eax,ds:0x10007100	10000a0f: R_386_32	.bss
10000a13:	85 c0                	test   eax,eax
10000a15:	75 15                	jne    10000a2c <Floppy::dmaInit(bool)+0x2a>
10000a17:	83 ec 0c             	sub    esp,0xc
10000a1a:	68 00 48 00 00       	push   0x4800
10000a1f:	e8 fc ff ff ff       	call   10000a20 <Floppy::dmaInit(bool)+0x1e>	10000a20: R_386_PC32	Phys::allocateDMA(unsigned long)
10000a24:	83 c4 10             	add    esp,0x10
10000a27:	a3 00 71 00 10       	mov    ds:0x10007100,eax	10000a28: R_386_32	.bss
10000a2c:	a1 00 71 00 10       	mov    eax,ds:0x10007100	10000a2d: R_386_32	.bss
10000a31:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
10000a34:	c7 45 c8 ff 47 00 00 	mov    DWORD PTR [ebp-0x38],0x47ff
10000a3b:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
10000a3e:	c1 e8 18             	shr    eax,0x18
10000a41:	85 c0                	test   eax,eax
10000a43:	75 1c                	jne    10000a61 <Floppy::dmaInit(bool)+0x5f>
10000a45:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
10000a48:	c1 e8 10             	shr    eax,0x10
10000a4b:	85 c0                	test   eax,eax
10000a4d:	75 12                	jne    10000a61 <Floppy::dmaInit(bool)+0x5f>
10000a4f:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
10000a52:	0f b7 d0             	movzx  edx,ax
10000a55:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
10000a58:	01 d0                	add    eax,edx
10000a5a:	c1 e8 10             	shr    eax,0x10
10000a5d:	85 c0                	test   eax,eax
10000a5f:	74 10                	je     10000a71 <Floppy::dmaInit(bool)+0x6f>
10000a61:	83 ec 0c             	sub    esp,0xc
10000a64:	68 50 23 00 10       	push   0x10002350	10000a65: R_386_32	.text
10000a69:	e8 fc ff ff ff       	call   10000a6a <Floppy::dmaInit(bool)+0x68>	10000a6a: R_386_PC32	Krnl::panic(char const*)
10000a6e:	83 c4 10             	add    esp,0x10
10000a71:	66 c7 45 da 0a 00    	mov    WORD PTR [ebp-0x26],0xa
10000a77:	c6 45 d9 06          	mov    BYTE PTR [ebp-0x27],0x6
10000a7b:	8a 45 d9             	mov    al,BYTE PTR [ebp-0x27]
10000a7e:	66 8b 55 da          	mov    dx,WORD PTR [ebp-0x26]
10000a82:	ee                   	out    dx,al
10000a83:	66 c7 45 de 0c 00    	mov    WORD PTR [ebp-0x22],0xc
10000a89:	c6 45 dd ff          	mov    BYTE PTR [ebp-0x23],0xff
10000a8d:	8a 45 dd             	mov    al,BYTE PTR [ebp-0x23]
10000a90:	66 8b 55 de          	mov    dx,WORD PTR [ebp-0x22]
10000a94:	ee                   	out    dx,al
10000a95:	8a 45 cc             	mov    al,BYTE PTR [ebp-0x34]
10000a98:	0f b6 c0             	movzx  eax,al
10000a9b:	66 c7 45 e2 04 00    	mov    WORD PTR [ebp-0x1e],0x4
10000aa1:	88 45 e1             	mov    BYTE PTR [ebp-0x1f],al
10000aa4:	8a 45 e1             	mov    al,BYTE PTR [ebp-0x1f]
10000aa7:	66 8b 55 e2          	mov    dx,WORD PTR [ebp-0x1e]
10000aab:	ee                   	out    dx,al
10000aac:	8a 45 cd             	mov    al,BYTE PTR [ebp-0x33]
10000aaf:	0f b6 c0             	movzx  eax,al
10000ab2:	66 c7 45 e6 04 00    	mov    WORD PTR [ebp-0x1a],0x4
10000ab8:	88 45 e5             	mov    BYTE PTR [ebp-0x1b],al
10000abb:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
10000abe:	66 8b 55 e6          	mov    dx,WORD PTR [ebp-0x1a]
10000ac2:	ee                   	out    dx,al
10000ac3:	8a 45 ce             	mov    al,BYTE PTR [ebp-0x32]
10000ac6:	0f b6 c0             	movzx  eax,al
10000ac9:	66 c7 45 ea 81 00    	mov    WORD PTR [ebp-0x16],0x81
10000acf:	88 45 e9             	mov    BYTE PTR [ebp-0x17],al
10000ad2:	8a 45 e9             	mov    al,BYTE PTR [ebp-0x17]
10000ad5:	66 8b 55 ea          	mov    dx,WORD PTR [ebp-0x16]
10000ad9:	ee                   	out    dx,al
10000ada:	66 c7 45 ee 0c 00    	mov    WORD PTR [ebp-0x12],0xc
10000ae0:	c6 45 ed ff          	mov    BYTE PTR [ebp-0x13],0xff
10000ae4:	8a 45 ed             	mov    al,BYTE PTR [ebp-0x13]
10000ae7:	66 8b 55 ee          	mov    dx,WORD PTR [ebp-0x12]
10000aeb:	ee                   	out    dx,al
10000aec:	8a 45 c8             	mov    al,BYTE PTR [ebp-0x38]
10000aef:	0f b6 c0             	movzx  eax,al
10000af2:	66 c7 45 f2 05 00    	mov    WORD PTR [ebp-0xe],0x5
10000af8:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
10000afb:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
10000afe:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
10000b02:	ee                   	out    dx,al
10000b03:	8a 45 c9             	mov    al,BYTE PTR [ebp-0x37]
10000b06:	0f b6 c0             	movzx  eax,al
10000b09:	66 c7 45 f6 05 00    	mov    WORD PTR [ebp-0xa],0x5
10000b0f:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
10000b12:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
10000b15:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
10000b19:	ee                   	out    dx,al
10000b1a:	80 7d c4 00          	cmp    BYTE PTR [ebp-0x3c],0x0
10000b1e:	74 07                	je     10000b27 <Floppy::dmaInit(bool)+0x125>
10000b20:	b8 4a 00 00 00       	mov    eax,0x4a
10000b25:	eb 05                	jmp    10000b2c <Floppy::dmaInit(bool)+0x12a>
10000b27:	b8 46 00 00 00       	mov    eax,0x46
10000b2c:	66 c7 45 d2 0b 00    	mov    WORD PTR [ebp-0x2e],0xb
10000b32:	88 45 d1             	mov    BYTE PTR [ebp-0x2f],al
10000b35:	8a 45 d1             	mov    al,BYTE PTR [ebp-0x2f]
10000b38:	66 8b 55 d2          	mov    dx,WORD PTR [ebp-0x2e]
10000b3c:	ee                   	out    dx,al
10000b3d:	66 c7 45 d6 0a 00    	mov    WORD PTR [ebp-0x2a],0xa
10000b43:	c6 45 d5 02          	mov    BYTE PTR [ebp-0x2b],0x2
10000b47:	8a 45 d5             	mov    al,BYTE PTR [ebp-0x2b]
10000b4a:	66 8b 55 d6          	mov    dx,WORD PTR [ebp-0x2a]
10000b4e:	ee                   	out    dx,al
10000b4f:	a1 00 71 00 10       	mov    eax,ds:0x10007100	10000b50: R_386_32	.bss
10000b54:	a3 00 00 00 00       	mov    ds:0x0,eax	10000b55: R_386_32	_TEMP_dma
10000b59:	90                   	nop
10000b5a:	c9                   	leave  
10000b5b:	c3                   	ret    

10000b5c <Floppy::specify(int)>:
10000b5c:	55                   	push   ebp
10000b5d:	89 e5                	mov    ebp,esp
10000b5f:	57                   	push   edi
10000b60:	56                   	push   esi
10000b61:	53                   	push   ebx
10000b62:	83 ec 3c             	sub    esp,0x3c
10000b65:	8d 45 c0             	lea    eax,[ebp-0x40]
10000b68:	bb 90 23 00 10       	mov    ebx,0x10002390	10000b69: R_386_32	.text
10000b6d:	ba 04 00 00 00       	mov    edx,0x4
10000b72:	89 c7                	mov    edi,eax
10000b74:	89 de                	mov    esi,ebx
10000b76:	89 d1                	mov    ecx,edx
10000b78:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000b7a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000b7d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10000b80:	83 c2 64             	add    edx,0x64
10000b83:	8b 14 90             	mov    edx,DWORD PTR [eax+edx*4]
10000b86:	89 d0                	mov    eax,edx
10000b88:	c1 e0 02             	shl    eax,0x2
10000b8b:	01 d0                	add    eax,edx
10000b8d:	c1 e0 02             	shl    eax,0x2
10000b90:	01 d0                	add    eax,edx
10000b92:	05 10 00 00 00       	add    eax,0x10	10000b93: R_386_32	floppyTable
10000b97:	8a 00                	mov    al,BYTE PTR [eax]
10000b99:	0f be c0             	movsx  eax,al
10000b9c:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10000b9f:	83 7d e4 ff          	cmp    DWORD PTR [ebp-0x1c],0xffffffff
10000ba3:	75 10                	jne    10000bb5 <Floppy::specify(int)+0x59>
10000ba5:	83 ec 0c             	sub    esp,0xc
10000ba8:	68 78 23 00 10       	push   0x10002378	10000ba9: R_386_32	.text
10000bad:	e8 fc ff ff ff       	call   10000bae <Floppy::specify(int)+0x52>	10000bae: R_386_PC32	Krnl::panic(char const*)
10000bb2:	83 c4 10             	add    esp,0x10
10000bb5:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10000bb8:	8b 44 85 c0          	mov    eax,DWORD PTR [ebp+eax*4-0x40]
10000bbc:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
10000bbf:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10000bc2:	89 c2                	mov    edx,eax
10000bc4:	c1 e0 03             	shl    eax,0x3
10000bc7:	89 d1                	mov    ecx,edx
10000bc9:	29 c1                	sub    ecx,eax
10000bcb:	b8 83 de 1b 43       	mov    eax,0x431bde83
10000bd0:	f7 e9                	imul   ecx
10000bd2:	c1 fa 11             	sar    edx,0x11
10000bd5:	89 c8                	mov    eax,ecx
10000bd7:	c1 f8 1f             	sar    eax,0x1f
10000bda:	29 c2                	sub    edx,eax
10000bdc:	89 d0                	mov    eax,edx
10000bde:	83 c0 10             	add    eax,0x10
10000be1:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
10000be4:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
10000be7:	89 d0                	mov    eax,edx
10000be9:	01 c0                	add    eax,eax
10000beb:	01 d0                	add    eax,edx
10000bed:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10000bf4:	01 d0                	add    eax,edx
10000bf6:	01 c0                	add    eax,eax
10000bf8:	89 c1                	mov    ecx,eax
10000bfa:	b8 83 de 1b 43       	mov    eax,0x431bde83
10000bff:	f7 e9                	imul   ecx
10000c01:	c1 fa 12             	sar    edx,0x12
10000c04:	89 c8                	mov    eax,ecx
10000c06:	c1 f8 1f             	sar    eax,0x1f
10000c09:	29 c2                	sub    edx,eax
10000c0b:	89 d0                	mov    eax,edx
10000c0d:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
10000c10:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
10000c17:	c7 45 d0 00 00 00 00 	mov    DWORD PTR [ebp-0x30],0x0
10000c1e:	83 ec 08             	sub    esp,0x8
10000c21:	6a 03                	push   0x3
10000c23:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000c26:	e8 fc ff ff ff       	call   10000c27 <Floppy::specify(int)+0xcb>	10000c27: R_386_PC32	Floppy::writeCommand(unsigned char)
10000c2b:	83 c4 10             	add    esp,0x10
10000c2e:	83 ec 0c             	sub    esp,0xc
10000c31:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000c34:	e8 fc ff ff ff       	call   10000c35 <Floppy::specify(int)+0xd9>	10000c35: R_386_PC32	Floppy::wasFailure()
10000c39:	83 c4 10             	add    esp,0x10
10000c3c:	84 c0                	test   al,al
10000c3e:	74 04                	je     10000c44 <Floppy::specify(int)+0xe8>
10000c40:	b0 00                	mov    al,0x0
10000c42:	eb 6b                	jmp    10000caf <Floppy::specify(int)+0x153>
10000c44:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000c47:	c1 e0 04             	shl    eax,0x4
10000c4a:	88 c2                	mov    dl,al
10000c4c:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000c4f:	09 d0                	or     eax,edx
10000c51:	0f b6 c0             	movzx  eax,al
10000c54:	83 ec 08             	sub    esp,0x8
10000c57:	50                   	push   eax
10000c58:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000c5b:	e8 fc ff ff ff       	call   10000c5c <Floppy::specify(int)+0x100>	10000c5c: R_386_PC32	Floppy::writeCommand(unsigned char)
10000c60:	83 c4 10             	add    esp,0x10
10000c63:	83 ec 0c             	sub    esp,0xc
10000c66:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000c69:	e8 fc ff ff ff       	call   10000c6a <Floppy::specify(int)+0x10e>	10000c6a: R_386_PC32	Floppy::wasFailure()
10000c6e:	83 c4 10             	add    esp,0x10
10000c71:	84 c0                	test   al,al
10000c73:	74 04                	je     10000c79 <Floppy::specify(int)+0x11d>
10000c75:	b0 00                	mov    al,0x0
10000c77:	eb 36                	jmp    10000caf <Floppy::specify(int)+0x153>
10000c79:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10000c7c:	01 c0                	add    eax,eax
10000c7e:	88 c2                	mov    dl,al
10000c80:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
10000c83:	09 d0                	or     eax,edx
10000c85:	0f b6 c0             	movzx  eax,al
10000c88:	83 ec 08             	sub    esp,0x8
10000c8b:	50                   	push   eax
10000c8c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000c8f:	e8 fc ff ff ff       	call   10000c90 <Floppy::specify(int)+0x134>	10000c90: R_386_PC32	Floppy::writeCommand(unsigned char)
10000c94:	83 c4 10             	add    esp,0x10
10000c97:	83 ec 0c             	sub    esp,0xc
10000c9a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000c9d:	e8 fc ff ff ff       	call   10000c9e <Floppy::specify(int)+0x142>	10000c9e: R_386_PC32	Floppy::wasFailure()
10000ca2:	83 c4 10             	add    esp,0x10
10000ca5:	84 c0                	test   al,al
10000ca7:	74 04                	je     10000cad <Floppy::specify(int)+0x151>
10000ca9:	b0 00                	mov    al,0x0
10000cab:	eb 02                	jmp    10000caf <Floppy::specify(int)+0x153>
10000cad:	b0 01                	mov    al,0x1
10000caf:	8d 65 f4             	lea    esp,[ebp-0xc]
10000cb2:	5b                   	pop    ebx
10000cb3:	5e                   	pop    esi
10000cb4:	5f                   	pop    edi
10000cb5:	5d                   	pop    ebp
10000cb6:	c3                   	ret    
10000cb7:	90                   	nop

10000cb8 <Floppy::select(int, bool)>:
10000cb8:	55                   	push   ebp
10000cb9:	89 e5                	mov    ebp,esp
10000cbb:	83 ec 28             	sub    esp,0x28
10000cbe:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
10000cc1:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
10000cc4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000cc7:	8b 80 8c 01 00 00    	mov    eax,DWORD PTR [eax+0x18c]
10000ccd:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
10000cd0:	75 27                	jne    10000cf9 <Floppy::select(int, bool)+0x41>
10000cd2:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
10000cd5:	83 f0 01             	xor    eax,0x1
10000cd8:	84 c0                	test   al,al
10000cda:	74 1d                	je     10000cf9 <Floppy::select(int, bool)+0x41>
10000cdc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000cdf:	8b 80 8c 01 00 00    	mov    eax,DWORD PTR [eax+0x18c]
10000ce5:	83 f8 ff             	cmp    eax,0xffffffff
10000ce8:	74 0f                	je     10000cf9 <Floppy::select(int, bool)+0x41>
10000cea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000ced:	c6 80 8a 01 00 00 00 	mov    BYTE PTR [eax+0x18a],0x0
10000cf4:	e9 0a 02 00 00       	jmp    10000f03 <Floppy::select(int, bool)+0x24b>
10000cf9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000cfc:	8a 80 8a 01 00 00    	mov    al,BYTE PTR [eax+0x18a]
10000d02:	83 f0 01             	xor    eax,0x1
10000d05:	84 c0                	test   al,al
10000d07:	75 12                	jne    10000d1b <Floppy::select(int, bool)+0x63>
10000d09:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000d0c:	8b 80 8c 01 00 00    	mov    eax,DWORD PTR [eax+0x18c]
10000d12:	83 f8 ff             	cmp    eax,0xffffffff
10000d15:	0f 85 e8 01 00 00    	jne    10000f03 <Floppy::select(int, bool)+0x24b>
10000d1b:	83 ec 0c             	sub    esp,0xc
10000d1e:	68 a0 23 00 10       	push   0x100023a0	10000d1f: R_386_32	.text
10000d23:	e8 fc ff ff ff       	call   10000d24 <Floppy::select(int, bool)+0x6c>	10000d24: R_386_PC32	Dbg::kprintf(char const*, ...)
10000d28:	83 c4 10             	add    esp,0x10
10000d2b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000d2e:	8b 80 8c 01 00 00    	mov    eax,DWORD PTR [eax+0x18c]
10000d34:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
10000d37:	0f 84 8e 01 00 00    	je     10000ecb <Floppy::select(int, bool)+0x213>
10000d3d:	83 ec 0c             	sub    esp,0xc
10000d40:	68 ad 23 00 10       	push   0x100023ad	10000d41: R_386_32	.text
10000d45:	e8 fc ff ff ff       	call   10000d46 <Floppy::select(int, bool)+0x8e>	10000d46: R_386_PC32	Dbg::kprintf(char const*, ...)
10000d4a:	83 c4 10             	add    esp,0x10
10000d4d:	e8 fc ff ff ff       	call   10000d4e <Floppy::select(int, bool)+0x96>	10000d4e: R_386_PC32	lockScheduler()
10000d52:	83 ec 0c             	sub    esp,0xc
10000d55:	68 ba 23 00 10       	push   0x100023ba	10000d56: R_386_32	.text
10000d5a:	e8 fc ff ff ff       	call   10000d5b <Floppy::select(int, bool)+0xa3>	10000d5b: R_386_PC32	Dbg::kprintf(char const*, ...)
10000d5f:	83 c4 10             	add    esp,0x10
10000d62:	83 ec 08             	sub    esp,0x8
10000d65:	6a 02                	push   0x2
10000d67:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000d6a:	e8 fc ff ff ff       	call   10000d6b <Floppy::select(int, bool)+0xb3>	10000d6b: R_386_PC32	Floppy::readPort(FloppyReg)
10000d6f:	83 c4 10             	add    esp,0x10
10000d72:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
10000d75:	80 65 f7 fc          	and    BYTE PTR [ebp-0x9],0xfc
10000d79:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000d7c:	88 c2                	mov    dl,al
10000d7e:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
10000d81:	09 d0                	or     eax,edx
10000d83:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
10000d86:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
10000d8a:	83 ec 04             	sub    esp,0x4
10000d8d:	50                   	push   eax
10000d8e:	6a 02                	push   0x2
10000d90:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000d93:	e8 fc ff ff ff       	call   10000d94 <Floppy::select(int, bool)+0xdc>	10000d94: R_386_PC32	Floppy::writePort(FloppyReg, unsigned char)
10000d98:	83 c4 10             	add    esp,0x10
10000d9b:	83 ec 08             	sub    esp,0x8
10000d9e:	6a 00                	push   0x0
10000da0:	68 00 b4 c4 04       	push   0x4c4b400
10000da5:	e8 fc ff ff ff       	call   10000da6 <Floppy::select(int, bool)+0xee>	10000da6: R_386_PC32	nanoSleep(unsigned long long)
10000daa:	83 c4 10             	add    esp,0x10
10000dad:	83 ec 0c             	sub    esp,0xc
10000db0:	68 c7 23 00 10       	push   0x100023c7	10000db1: R_386_32	.text
10000db5:	e8 fc ff ff ff       	call   10000db6 <Floppy::select(int, bool)+0xfe>	10000db6: R_386_PC32	Dbg::kprintf(char const*, ...)
10000dba:	83 c4 10             	add    esp,0x10
10000dbd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000dc0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10000dc3:	83 c2 64             	add    edx,0x64
10000dc6:	8b 14 90             	mov    edx,DWORD PTR [eax+edx*4]
10000dc9:	89 d0                	mov    eax,edx
10000dcb:	c1 e0 02             	shl    eax,0x2
10000dce:	01 d0                	add    eax,edx
10000dd0:	c1 e0 02             	shl    eax,0x2
10000dd3:	01 d0                	add    eax,edx
10000dd5:	05 10 00 00 00       	add    eax,0x10	10000dd6: R_386_32	floppyTable
10000dda:	8a 00                	mov    al,BYTE PTR [eax]
10000ddc:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
10000ddf:	80 7d f6 ff          	cmp    BYTE PTR [ebp-0xa],0xff
10000de3:	75 10                	jne    10000df5 <Floppy::select(int, bool)+0x13d>
10000de5:	83 ec 0c             	sub    esp,0xc
10000de8:	68 d4 23 00 10       	push   0x100023d4	10000de9: R_386_32	.text
10000ded:	e8 fc ff ff ff       	call   10000dee <Floppy::select(int, bool)+0x136>	10000dee: R_386_PC32	Krnl::panic(char const*)
10000df2:	83 c4 10             	add    esp,0x10
10000df5:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
10000df8:	0f b6 c0             	movzx  eax,al
10000dfb:	83 ec 04             	sub    esp,0x4
10000dfe:	50                   	push   eax
10000dff:	6a 07                	push   0x7
10000e01:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000e04:	e8 fc ff ff ff       	call   10000e05 <Floppy::select(int, bool)+0x14d>	10000e05: R_386_PC32	Floppy::writePort(FloppyReg, unsigned char)
10000e09:	83 c4 10             	add    esp,0x10
10000e0c:	e8 fc ff ff ff       	call   10000e0d <Floppy::select(int, bool)+0x155>	10000e0d: R_386_PC32	unlockScheduler()
10000e11:	83 ec 0c             	sub    esp,0xc
10000e14:	68 03 24 00 10       	push   0x10002403	10000e15: R_386_32	.text
10000e19:	e8 fc ff ff ff       	call   10000e1a <Floppy::select(int, bool)+0x162>	10000e1a: R_386_PC32	Dbg::kprintf(char const*, ...)
10000e1e:	83 c4 10             	add    esp,0x10
10000e21:	83 ec 08             	sub    esp,0x8
10000e24:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10000e27:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000e2a:	e8 fc ff ff ff       	call   10000e2b <Floppy::select(int, bool)+0x173>	10000e2b: R_386_PC32	Floppy::specify(int)
10000e2f:	83 c4 10             	add    esp,0x10
10000e32:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
10000e35:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
10000e38:	83 f0 01             	xor    eax,0x1
10000e3b:	84 c0                	test   al,al
10000e3d:	74 25                	je     10000e64 <Floppy::select(int, bool)+0x1ac>
10000e3f:	83 ec 0c             	sub    esp,0xc
10000e42:	68 10 24 00 10       	push   0x10002410	10000e43: R_386_32	.text
10000e47:	e8 fc ff ff ff       	call   10000e48 <Floppy::select(int, bool)+0x190>	10000e48: R_386_PC32	Dbg::kprintf(char const*, ...)
10000e4c:	83 c4 10             	add    esp,0x10
10000e4f:	83 ec 0c             	sub    esp,0xc
10000e52:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000e55:	e8 fc ff ff ff       	call   10000e56 <Floppy::select(int, bool)+0x19e>	10000e56: R_386_PC32	Floppy::reset()
10000e5a:	83 c4 10             	add    esp,0x10
10000e5d:	b0 00                	mov    al,0x0
10000e5f:	e9 c1 00 00 00       	jmp    10000f25 <Floppy::select(int, bool)+0x26d>
10000e64:	83 ec 0c             	sub    esp,0xc
10000e67:	68 21 24 00 10       	push   0x10002421	10000e68: R_386_32	.text
10000e6c:	e8 fc ff ff ff       	call   10000e6d <Floppy::select(int, bool)+0x1b5>	10000e6d: R_386_PC32	Dbg::kprintf(char const*, ...)
10000e71:	83 c4 10             	add    esp,0x10
10000e74:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000e77:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10000e7a:	83 c2 68             	add    edx,0x68
10000e7d:	8b 04 90             	mov    eax,DWORD PTR [eax+edx*4]
10000e80:	83 ec 0c             	sub    esp,0xc
10000e83:	50                   	push   eax
10000e84:	e8 fc ff ff ff       	call   10000e85 <Floppy::select(int, bool)+0x1cd>	10000e85: R_386_PC32	FloppyDrive::calibrate()
10000e89:	83 c4 10             	add    esp,0x10
10000e8c:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
10000e8f:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
10000e92:	83 f0 01             	xor    eax,0x1
10000e95:	84 c0                	test   al,al
10000e97:	74 22                	je     10000ebb <Floppy::select(int, bool)+0x203>
10000e99:	83 ec 0c             	sub    esp,0xc
10000e9c:	68 2e 24 00 10       	push   0x1000242e	10000e9d: R_386_32	.text
10000ea1:	e8 fc ff ff ff       	call   10000ea2 <Floppy::select(int, bool)+0x1ea>	10000ea2: R_386_PC32	Dbg::kprintf(char const*, ...)
10000ea6:	83 c4 10             	add    esp,0x10
10000ea9:	83 ec 0c             	sub    esp,0xc
10000eac:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000eaf:	e8 fc ff ff ff       	call   10000eb0 <Floppy::select(int, bool)+0x1f8>	10000eb0: R_386_PC32	Floppy::reset()
10000eb4:	83 c4 10             	add    esp,0x10
10000eb7:	b0 00                	mov    al,0x0
10000eb9:	eb 6a                	jmp    10000f25 <Floppy::select(int, bool)+0x26d>
10000ebb:	83 ec 0c             	sub    esp,0xc
10000ebe:	68 40 24 00 10       	push   0x10002440	10000ebf: R_386_32	.text
10000ec3:	e8 fc ff ff ff       	call   10000ec4 <Floppy::select(int, bool)+0x20c>	10000ec4: R_386_PC32	Dbg::kprintf(char const*, ...)
10000ec8:	83 c4 10             	add    esp,0x10
10000ecb:	83 ec 0c             	sub    esp,0xc
10000ece:	68 4d 24 00 10       	push   0x1000244d	10000ecf: R_386_32	.text
10000ed3:	e8 fc ff ff ff       	call   10000ed4 <Floppy::select(int, bool)+0x21c>	10000ed4: R_386_PC32	Dbg::kprintf(char const*, ...)
10000ed8:	83 c4 10             	add    esp,0x10
10000edb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000ede:	8a 55 e4             	mov    dl,BYTE PTR [ebp-0x1c]
10000ee1:	88 90 8a 01 00 00    	mov    BYTE PTR [eax+0x18a],dl
10000ee7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000eea:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10000eed:	89 90 8c 01 00 00    	mov    DWORD PTR [eax+0x18c],edx
10000ef3:	83 ec 0c             	sub    esp,0xc
10000ef6:	68 5a 24 00 10       	push   0x1000245a	10000ef7: R_386_32	.text
10000efb:	e8 fc ff ff ff       	call   10000efc <Floppy::select(int, bool)+0x244>	10000efc: R_386_PC32	Dbg::kprintf(char const*, ...)
10000f00:	83 c4 10             	add    esp,0x10
10000f03:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000f06:	8a 80 8a 01 00 00    	mov    al,BYTE PTR [eax+0x18a]
10000f0c:	84 c0                	test   al,al
10000f0e:	74 12                	je     10000f22 <Floppy::select(int, bool)+0x26a>
10000f10:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000f13:	8b 80 8c 01 00 00    	mov    eax,DWORD PTR [eax+0x18c]
10000f19:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
10000f1c:	75 04                	jne    10000f22 <Floppy::select(int, bool)+0x26a>
10000f1e:	b0 01                	mov    al,0x1
10000f20:	eb 02                	jmp    10000f24 <Floppy::select(int, bool)+0x26c>
10000f22:	b0 00                	mov    al,0x0
10000f24:	90                   	nop
10000f25:	c9                   	leave  
10000f26:	c3                   	ret    
10000f27:	90                   	nop

10000f28 <Floppy::motor(int, bool)>:
10000f28:	55                   	push   ebp
10000f29:	89 e5                	mov    ebp,esp
10000f2b:	83 ec 28             	sub    esp,0x28
10000f2e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
10000f31:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
10000f34:	80 7d e4 00          	cmp    BYTE PTR [ebp-0x1c],0x0
10000f38:	0f 84 ca 00 00 00    	je     10001008 <Floppy::motor(int, bool)+0xe0>
10000f3e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000f41:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10000f44:	83 c2 58             	add    edx,0x58
10000f47:	8b 44 90 04          	mov    eax,DWORD PTR [eax+edx*4+0x4]
10000f4b:	85 c0                	test   eax,eax
10000f4d:	0f 85 90 00 00 00    	jne    10000fe3 <Floppy::motor(int, bool)+0xbb>
10000f53:	e8 fc ff ff ff       	call   10000f54 <Floppy::motor(int, bool)+0x2c>	10000f54: R_386_PC32	lockScheduler()
10000f58:	83 ec 08             	sub    esp,0x8
10000f5b:	6a 02                	push   0x2
10000f5d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000f60:	e8 fc ff ff ff       	call   10000f61 <Floppy::motor(int, bool)+0x39>	10000f61: R_386_PC32	Floppy::readPort(FloppyReg)
10000f65:	83 c4 10             	add    esp,0x10
10000f68:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
10000f6b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000f6e:	ba 10 00 00 00       	mov    edx,0x10
10000f73:	88 c1                	mov    cl,al
10000f75:	d3 e2                	shl    edx,cl
10000f77:	89 d0                	mov    eax,edx
10000f79:	88 c2                	mov    dl,al
10000f7b:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
10000f7e:	09 d0                	or     eax,edx
10000f80:	0f b6 c0             	movzx  eax,al
10000f83:	83 ec 04             	sub    esp,0x4
10000f86:	50                   	push   eax
10000f87:	6a 02                	push   0x2
10000f89:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000f8c:	e8 fc ff ff ff       	call   10000f8d <Floppy::motor(int, bool)+0x65>	10000f8d: R_386_PC32	Floppy::writePort(FloppyReg, unsigned char)
10000f91:	83 c4 10             	add    esp,0x10
10000f94:	e8 fc ff ff ff       	call   10000f95 <Floppy::motor(int, bool)+0x6d>	10000f95: R_386_PC32	unlockScheduler()
10000f99:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000f9c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10000f9f:	83 c2 64             	add    edx,0x64
10000fa2:	8b 04 90             	mov    eax,DWORD PTR [eax+edx*4]
10000fa5:	83 f8 04             	cmp    eax,0x4
10000fa8:	75 14                	jne    10000fbe <Floppy::motor(int, bool)+0x96>
10000faa:	83 ec 08             	sub    esp,0x8
10000fad:	6a 00                	push   0x0
10000faf:	68 00 a3 e1 11       	push   0x11e1a300
10000fb4:	e8 fc ff ff ff       	call   10000fb5 <Floppy::motor(int, bool)+0x8d>	10000fb5: R_386_PC32	nanoSleep(unsigned long long)
10000fb9:	83 c4 10             	add    esp,0x10
10000fbc:	eb 12                	jmp    10000fd0 <Floppy::motor(int, bool)+0xa8>
10000fbe:	83 ec 08             	sub    esp,0x8
10000fc1:	6a 00                	push   0x0
10000fc3:	68 00 65 cd 1d       	push   0x1dcd6500
10000fc8:	e8 fc ff ff ff       	call   10000fc9 <Floppy::motor(int, bool)+0xa1>	10000fc9: R_386_PC32	nanoSleep(unsigned long long)
10000fcd:	83 c4 10             	add    esp,0x10
10000fd0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000fd3:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10000fd6:	83 c2 58             	add    edx,0x58
10000fd9:	c7 44 90 04 01 00 00 00 	mov    DWORD PTR [eax+edx*4+0x4],0x1
10000fe1:	eb 59                	jmp    1000103c <Floppy::motor(int, bool)+0x114>
10000fe3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000fe6:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10000fe9:	83 c2 58             	add    edx,0x58
10000fec:	8b 44 90 04          	mov    eax,DWORD PTR [eax+edx*4+0x4]
10000ff0:	83 f8 02             	cmp    eax,0x2
10000ff3:	75 47                	jne    1000103c <Floppy::motor(int, bool)+0x114>
10000ff5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000ff8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10000ffb:	83 c2 58             	add    edx,0x58
10000ffe:	c7 44 90 04 01 00 00 00 	mov    DWORD PTR [eax+edx*4+0x4],0x1
10001006:	eb 34                	jmp    1000103c <Floppy::motor(int, bool)+0x114>
10001008:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000100b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
1000100e:	83 c2 58             	add    edx,0x58
10001011:	8b 44 90 04          	mov    eax,DWORD PTR [eax+edx*4+0x4]
10001015:	83 f8 01             	cmp    eax,0x1
10001018:	75 22                	jne    1000103c <Floppy::motor(int, bool)+0x114>
1000101a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000101d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10001020:	83 c2 58             	add    edx,0x58
10001023:	c7 44 90 04 02 00 00 00 	mov    DWORD PTR [eax+edx*4+0x4],0x2
1000102b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000102e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10001031:	83 c2 5c             	add    edx,0x5c
10001034:	c7 44 90 04 c4 09 00 00 	mov    DWORD PTR [eax+edx*4+0x4],0x9c4
1000103c:	90                   	nop
1000103d:	c9                   	leave  
1000103e:	c3                   	ret    
1000103f:	90                   	nop

10001040 <FloppyDrive::FloppyDrive()>:
10001040:	55                   	push   ebp
10001041:	89 e5                	mov    ebp,esp
10001043:	83 ec 08             	sub    esp,0x8
10001046:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001049:	83 ec 04             	sub    esp,0x4
1000104c:	68 00 02 00 00       	push   0x200
10001051:	68 67 24 00 10       	push   0x10002467	10001052: R_386_32	.text
10001056:	50                   	push   eax
10001057:	e8 fc ff ff ff       	call   10001058 <FloppyDrive::FloppyDrive()+0x18>	10001058: R_386_PC32	PhysicalDisk::PhysicalDisk(char const*, int)
1000105c:	83 c4 10             	add    esp,0x10
1000105f:	ba 08 00 00 00       	mov    edx,0x8	10001060: R_386_32	vtable for FloppyDrive
10001064:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001067:	89 10                	mov    DWORD PTR [eax],edx
10001069:	90                   	nop
1000106a:	c9                   	leave  
1000106b:	c3                   	ret    

1000106c <FloppyDrive::motorOn()>:
1000106c:	55                   	push   ebp
1000106d:	89 e5                	mov    ebp,esp
1000106f:	83 ec 08             	sub    esp,0x8
10001072:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001075:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
1000107b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
1000107e:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
10001084:	83 ec 04             	sub    esp,0x4
10001087:	6a 01                	push   0x1
10001089:	52                   	push   edx
1000108a:	50                   	push   eax
1000108b:	e8 fc ff ff ff       	call   1000108c <FloppyDrive::motorOn()+0x20>	1000108c: R_386_PC32	Floppy::motor(int, bool)
10001090:	83 c4 10             	add    esp,0x10
10001093:	90                   	nop
10001094:	c9                   	leave  
10001095:	c3                   	ret    

10001096 <FloppyDrive::motorOff()>:
10001096:	55                   	push   ebp
10001097:	89 e5                	mov    ebp,esp
10001099:	83 ec 08             	sub    esp,0x8
1000109c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000109f:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100010a5:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
100010a8:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
100010ae:	83 ec 04             	sub    esp,0x4
100010b1:	6a 00                	push   0x0
100010b3:	52                   	push   edx
100010b4:	50                   	push   eax
100010b5:	e8 fc ff ff ff       	call   100010b6 <FloppyDrive::motorOff()+0x20>	100010b6: R_386_PC32	Floppy::motor(int, bool)
100010ba:	83 c4 10             	add    esp,0x10
100010bd:	90                   	nop
100010be:	c9                   	leave  
100010bf:	c3                   	ret    

100010c0 <FloppyDrive::floppyConfigure()>:
100010c0:	55                   	push   ebp
100010c1:	89 e5                	mov    ebp,esp
100010c3:	83 ec 18             	sub    esp,0x18
100010c6:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
100010ca:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
100010ce:	c6 45 f5 01          	mov    BYTE PTR [ebp-0xb],0x1
100010d2:	c7 45 f0 08 00 00 00 	mov    DWORD PTR [ebp-0x10],0x8
100010d9:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
100010e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100010e3:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100010e9:	83 ec 08             	sub    esp,0x8
100010ec:	6a 13                	push   0x13
100010ee:	50                   	push   eax
100010ef:	e8 fc ff ff ff       	call   100010f0 <FloppyDrive::floppyConfigure()+0x30>	100010f0: R_386_PC32	Floppy::writeCommand(unsigned char)
100010f4:	83 c4 10             	add    esp,0x10
100010f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100010fa:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001100:	83 ec 0c             	sub    esp,0xc
10001103:	50                   	push   eax
10001104:	e8 fc ff ff ff       	call   10001105 <FloppyDrive::floppyConfigure()+0x45>	10001105: R_386_PC32	Floppy::wasFailure()
10001109:	83 c4 10             	add    esp,0x10
1000110c:	84 c0                	test   al,al
1000110e:	74 07                	je     10001117 <FloppyDrive::floppyConfigure()+0x57>
10001110:	b0 00                	mov    al,0x0
10001112:	e9 de 00 00 00       	jmp    100011f5 <FloppyDrive::floppyConfigure()+0x135>
10001117:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000111a:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001120:	83 ec 08             	sub    esp,0x8
10001123:	6a 00                	push   0x0
10001125:	50                   	push   eax
10001126:	e8 fc ff ff ff       	call   10001127 <FloppyDrive::floppyConfigure()+0x67>	10001127: R_386_PC32	Floppy::writeCommand(unsigned char)
1000112b:	83 c4 10             	add    esp,0x10
1000112e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001131:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001137:	83 ec 0c             	sub    esp,0xc
1000113a:	50                   	push   eax
1000113b:	e8 fc ff ff ff       	call   1000113c <FloppyDrive::floppyConfigure()+0x7c>	1000113c: R_386_PC32	Floppy::wasFailure()
10001140:	83 c4 10             	add    esp,0x10
10001143:	84 c0                	test   al,al
10001145:	74 07                	je     1000114e <FloppyDrive::floppyConfigure()+0x8e>
10001147:	b0 00                	mov    al,0x0
10001149:	e9 a7 00 00 00       	jmp    100011f5 <FloppyDrive::floppyConfigure()+0x135>
1000114e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001151:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001157:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
1000115b:	c1 e2 06             	shl    edx,0x6
1000115e:	88 d1                	mov    cl,dl
10001160:	0f b6 55 f6          	movzx  edx,BYTE PTR [ebp-0xa]
10001164:	c1 e2 05             	shl    edx,0x5
10001167:	09 d1                	or     ecx,edx
10001169:	0f b6 55 f5          	movzx  edx,BYTE PTR [ebp-0xb]
1000116d:	c1 e2 04             	shl    edx,0x4
10001170:	09 d1                	or     ecx,edx
10001172:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
10001175:	4a                   	dec    edx
10001176:	09 ca                	or     edx,ecx
10001178:	0f b6 d2             	movzx  edx,dl
1000117b:	83 ec 08             	sub    esp,0x8
1000117e:	52                   	push   edx
1000117f:	50                   	push   eax
10001180:	e8 fc ff ff ff       	call   10001181 <FloppyDrive::floppyConfigure()+0xc1>	10001181: R_386_PC32	Floppy::writeCommand(unsigned char)
10001185:	83 c4 10             	add    esp,0x10
10001188:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000118b:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001191:	83 ec 0c             	sub    esp,0xc
10001194:	50                   	push   eax
10001195:	e8 fc ff ff ff       	call   10001196 <FloppyDrive::floppyConfigure()+0xd6>	10001196: R_386_PC32	Floppy::wasFailure()
1000119a:	83 c4 10             	add    esp,0x10
1000119d:	84 c0                	test   al,al
1000119f:	74 04                	je     100011a5 <FloppyDrive::floppyConfigure()+0xe5>
100011a1:	b0 00                	mov    al,0x0
100011a3:	eb 50                	jmp    100011f5 <FloppyDrive::floppyConfigure()+0x135>
100011a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100011a8:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100011ae:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
100011b1:	0f b6 d2             	movzx  edx,dl
100011b4:	83 ec 08             	sub    esp,0x8
100011b7:	52                   	push   edx
100011b8:	50                   	push   eax
100011b9:	e8 fc ff ff ff       	call   100011ba <FloppyDrive::floppyConfigure()+0xfa>	100011ba: R_386_PC32	Floppy::writeCommand(unsigned char)
100011be:	83 c4 10             	add    esp,0x10
100011c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100011c4:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100011ca:	83 ec 0c             	sub    esp,0xc
100011cd:	50                   	push   eax
100011ce:	e8 fc ff ff ff       	call   100011cf <FloppyDrive::floppyConfigure()+0x10f>	100011cf: R_386_PC32	Floppy::wasFailure()
100011d3:	83 c4 10             	add    esp,0x10
100011d6:	84 c0                	test   al,al
100011d8:	74 04                	je     100011de <FloppyDrive::floppyConfigure()+0x11e>
100011da:	b0 00                	mov    al,0x0
100011dc:	eb 17                	jmp    100011f5 <FloppyDrive::floppyConfigure()+0x135>
100011de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100011e1:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100011e7:	8a 55 f5             	mov    dl,BYTE PTR [ebp-0xb]
100011ea:	83 f2 01             	xor    edx,0x1
100011ed:	88 90 89 01 00 00    	mov    BYTE PTR [eax+0x189],dl
100011f3:	b0 01                	mov    al,0x1
100011f5:	c9                   	leave  
100011f6:	c3                   	ret    
100011f7:	90                   	nop

100011f8 <FloppyDrive::open(int, int, void*)>:
100011f8:	b8 00 00 00 00       	mov    eax,0x0
100011fd:	c3                   	ret    

100011fe <FloppyDrive::_open(int, int, void*)>:
100011fe:	55                   	push   ebp
100011ff:	89 e5                	mov    ebp,esp
10001201:	83 ec 08             	sub    esp,0x8
10001204:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001207:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
1000120a:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
10001210:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001213:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10001216:	89 90 70 01 00 00    	mov    DWORD PTR [eax+0x170],edx
1000121c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000121f:	c7 80 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [eax+0x15c],0x200
10001229:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000122c:	c6 80 68 01 00 00 01 	mov    BYTE PTR [eax+0x168],0x1
10001233:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
10001236:	89 d0                	mov    eax,edx
10001238:	c1 e0 02             	shl    eax,0x2
1000123b:	01 d0                	add    eax,edx
1000123d:	c1 e0 02             	shl    eax,0x2
10001240:	01 d0                	add    eax,edx
10001242:	05 11 00 00 00       	add    eax,0x11	10001243: R_386_32	floppyTable
10001247:	8a 00                	mov    al,BYTE PTR [eax]
10001249:	0f b6 c8             	movzx  ecx,al
1000124c:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
1000124f:	89 d0                	mov    eax,edx
10001251:	c1 e0 02             	shl    eax,0x2
10001254:	01 d0                	add    eax,edx
10001256:	c1 e0 02             	shl    eax,0x2
10001259:	01 d0                	add    eax,edx
1000125b:	05 13 00 00 00       	add    eax,0x13	1000125c: R_386_32	floppyTable
10001260:	8a 00                	mov    al,BYTE PTR [eax]
10001262:	0f b6 c0             	movzx  eax,al
10001265:	0f af c8             	imul   ecx,eax
10001268:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
1000126b:	89 d0                	mov    eax,edx
1000126d:	c1 e0 02             	shl    eax,0x2
10001270:	01 d0                	add    eax,edx
10001272:	c1 e0 02             	shl    eax,0x2
10001275:	01 d0                	add    eax,edx
10001277:	05 12 00 00 00       	add    eax,0x12	10001278: R_386_32	floppyTable
1000127c:	8a 00                	mov    al,BYTE PTR [eax]
1000127e:	0f b6 c0             	movzx  eax,al
10001281:	0f af c1             	imul   eax,ecx
10001284:	89 c2                	mov    edx,eax
10001286:	c1 ea 1f             	shr    edx,0x1f
10001289:	01 d0                	add    eax,edx
1000128b:	d1 f8                	sar    eax,1
1000128d:	99                   	cdq    
1000128e:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
10001291:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
10001297:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
1000129d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100012a0:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
100012a6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
100012ac:	83 ec 04             	sub    esp,0x4
100012af:	52                   	push   edx
100012b0:	50                   	push   eax
100012b1:	68 79 24 00 10       	push   0x10002479	100012b2: R_386_32	.text
100012b6:	e8 fc ff ff ff       	call   100012b7 <FloppyDrive::_open(int, int, void*)+0xb9>	100012b7: R_386_PC32	Dbg::kprintf(char const*, ...)
100012bb:	83 c4 10             	add    esp,0x10
100012be:	83 ec 0c             	sub    esp,0xc
100012c1:	68 8b 24 00 10       	push   0x1000248b	100012c2: R_386_32	.text
100012c6:	e8 fc ff ff ff       	call   100012c7 <FloppyDrive::_open(int, int, void*)+0xc9>	100012c7: R_386_PC32	Dbg::kprintf(char const*, ...)
100012cb:	83 c4 10             	add    esp,0x10
100012ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100012d1:	83 ec 0c             	sub    esp,0xc
100012d4:	50                   	push   eax
100012d5:	e8 fc ff ff ff       	call   100012d6 <FloppyDrive::_open(int, int, void*)+0xd8>	100012d6: R_386_PC32	PhysicalDisk::startCache()
100012da:	83 c4 10             	add    esp,0x10
100012dd:	83 ec 0c             	sub    esp,0xc
100012e0:	68 a1 24 00 10       	push   0x100024a1	100012e1: R_386_32	.text
100012e5:	e8 fc ff ff ff       	call   100012e6 <FloppyDrive::_open(int, int, void*)+0xe8>	100012e6: R_386_PC32	Dbg::kprintf(char const*, ...)
100012ea:	83 c4 10             	add    esp,0x10
100012ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100012f0:	83 ec 0c             	sub    esp,0xc
100012f3:	50                   	push   eax
100012f4:	e8 fc ff ff ff       	call   100012f5 <FloppyDrive::_open(int, int, void*)+0xf7>	100012f5: R_386_PC32	createPartitionsForDisk(PhysicalDisk*)
100012f9:	83 c4 10             	add    esp,0x10
100012fc:	83 ec 0c             	sub    esp,0xc
100012ff:	68 b7 24 00 10       	push   0x100024b7	10001300: R_386_32	.text
10001304:	e8 fc ff ff ff       	call   10001305 <FloppyDrive::_open(int, int, void*)+0x107>	10001305: R_386_PC32	Dbg::kprintf(char const*, ...)
10001309:	83 c4 10             	add    esp,0x10
1000130c:	b8 00 00 00 00       	mov    eax,0x0
10001311:	c9                   	leave  
10001312:	c3                   	ret    
10001313:	90                   	nop

10001314 <FloppyDrive::close(int, int, void*)>:
10001314:	b8 00 00 00 00       	mov    eax,0x0
10001319:	c3                   	ret    

1000131a <FloppyDrive::unselect()>:
1000131a:	55                   	push   ebp
1000131b:	89 e5                	mov    ebp,esp
1000131d:	83 ec 08             	sub    esp,0x8
10001320:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001323:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001329:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
1000132c:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
10001332:	83 ec 04             	sub    esp,0x4
10001335:	6a 00                	push   0x0
10001337:	52                   	push   edx
10001338:	50                   	push   eax
10001339:	e8 fc ff ff ff       	call   1000133a <FloppyDrive::unselect()+0x20>	1000133a: R_386_PC32	Floppy::select(int, bool)
1000133e:	83 c4 10             	add    esp,0x10
10001341:	90                   	nop
10001342:	c9                   	leave  
10001343:	c3                   	ret    

10001344 <FloppyDrive::select()>:
10001344:	55                   	push   ebp
10001345:	89 e5                	mov    ebp,esp
10001347:	83 ec 18             	sub    esp,0x18
1000134a:	83 ec 0c             	sub    esp,0xc
1000134d:	68 cd 24 00 10       	push   0x100024cd	1000134e: R_386_32	.text
10001352:	e8 fc ff ff ff       	call   10001353 <FloppyDrive::select()+0xf>	10001353: R_386_PC32	Dbg::kprintf(char const*, ...)
10001357:	83 c4 10             	add    esp,0x10
1000135a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000135d:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001363:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10001366:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
1000136c:	83 ec 04             	sub    esp,0x4
1000136f:	6a 01                	push   0x1
10001371:	52                   	push   edx
10001372:	50                   	push   eax
10001373:	e8 fc ff ff ff       	call   10001374 <FloppyDrive::select()+0x30>	10001374: R_386_PC32	Floppy::select(int, bool)
10001378:	83 c4 10             	add    esp,0x10
1000137b:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
1000137e:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
10001382:	75 24                	jne    100013a8 <FloppyDrive::select()+0x64>
10001384:	83 ec 0c             	sub    esp,0xc
10001387:	68 e4 24 00 10       	push   0x100024e4	10001388: R_386_32	.text
1000138c:	e8 fc ff ff ff       	call   1000138d <FloppyDrive::select()+0x49>	1000138d: R_386_PC32	Dbg::kprintf(char const*, ...)
10001391:	83 c4 10             	add    esp,0x10
10001394:	83 ec 08             	sub    esp,0x8
10001397:	6a 00                	push   0x0
10001399:	68 80 d1 f0 08       	push   0x8f0d180
1000139e:	e8 fc ff ff ff       	call   1000139f <FloppyDrive::select()+0x5b>	1000139f: R_386_PC32	nanoSleep(unsigned long long)
100013a3:	83 c4 10             	add    esp,0x10
100013a6:	eb a2                	jmp    1000134a <FloppyDrive::select()+0x6>
100013a8:	90                   	nop
100013a9:	c9                   	leave  
100013aa:	c3                   	ret    
100013ab:	90                   	nop

100013ac <FloppyDrive::seek(int, int)>:
100013ac:	55                   	push   ebp
100013ad:	89 e5                	mov    ebp,esp
100013af:	83 ec 18             	sub    esp,0x18
100013b2:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
100013b9:	83 7d f4 04          	cmp    DWORD PTR [ebp-0xc],0x4
100013bd:	7e 33                	jle    100013f2 <FloppyDrive::seek(int, int)+0x46>
100013bf:	83 ec 0c             	sub    esp,0xc
100013c2:	68 04 25 00 10       	push   0x10002504	100013c3: R_386_32	.text
100013c7:	e8 fc ff ff ff       	call   100013c8 <FloppyDrive::seek(int, int)+0x1c>	100013c8: R_386_PC32	Dbg::kprintf(char const*, ...)
100013cc:	83 c4 10             	add    esp,0x10
100013cf:	83 ec 0c             	sub    esp,0xc
100013d2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100013d5:	e8 fc ff ff ff       	call   100013d6 <FloppyDrive::seek(int, int)+0x2a>	100013d6: R_386_PC32	FloppyDrive::motorOff()
100013da:	83 c4 10             	add    esp,0x10
100013dd:	83 ec 0c             	sub    esp,0xc
100013e0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100013e3:	e8 fc ff ff ff       	call   100013e4 <FloppyDrive::seek(int, int)+0x38>	100013e4: R_386_PC32	FloppyDrive::unselect()
100013e8:	83 c4 10             	add    esp,0x10
100013eb:	b0 00                	mov    al,0x0
100013ed:	e9 c6 02 00 00       	jmp    100016b8 <FloppyDrive::seek(int, int)+0x30c>
100013f2:	83 ec 0c             	sub    esp,0xc
100013f5:	68 2b 25 00 10       	push   0x1000252b	100013f6: R_386_32	.text
100013fa:	e8 fc ff ff ff       	call   100013fb <FloppyDrive::seek(int, int)+0x4f>	100013fb: R_386_PC32	Dbg::kprintf(char const*, ...)
100013ff:	83 c4 10             	add    esp,0x10
10001402:	83 ec 0c             	sub    esp,0xc
10001405:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001408:	e8 fc ff ff ff       	call   10001409 <FloppyDrive::seek(int, int)+0x5d>	10001409: R_386_PC32	FloppyDrive::select()
1000140d:	83 c4 10             	add    esp,0x10
10001410:	83 ec 0c             	sub    esp,0xc
10001413:	68 38 25 00 10       	push   0x10002538	10001414: R_386_32	.text
10001418:	e8 fc ff ff ff       	call   10001419 <FloppyDrive::seek(int, int)+0x6d>	10001419: R_386_PC32	Dbg::kprintf(char const*, ...)
1000141d:	83 c4 10             	add    esp,0x10
10001420:	83 ec 0c             	sub    esp,0xc
10001423:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001426:	e8 fc ff ff ff       	call   10001427 <FloppyDrive::seek(int, int)+0x7b>	10001427: R_386_PC32	FloppyDrive::motorOn()
1000142b:	83 c4 10             	add    esp,0x10
1000142e:	83 ec 0c             	sub    esp,0xc
10001431:	68 44 25 00 10       	push   0x10002544	10001432: R_386_32	.text
10001436:	e8 fc ff ff ff       	call   10001437 <FloppyDrive::seek(int, int)+0x8b>	10001437: R_386_PC32	Dbg::kprintf(char const*, ...)
1000143b:	83 c4 10             	add    esp,0x10
1000143e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001441:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001447:	83 ec 08             	sub    esp,0x8
1000144a:	6a 0f                	push   0xf
1000144c:	50                   	push   eax
1000144d:	e8 fc ff ff ff       	call   1000144e <FloppyDrive::seek(int, int)+0xa2>	1000144e: R_386_PC32	Floppy::writeCommand(unsigned char)
10001452:	83 c4 10             	add    esp,0x10
10001455:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001458:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
1000145e:	83 ec 0c             	sub    esp,0xc
10001461:	50                   	push   eax
10001462:	e8 fc ff ff ff       	call   10001463 <FloppyDrive::seek(int, int)+0xb7>	10001463: R_386_PC32	Floppy::wasFailure()
10001467:	83 c4 10             	add    esp,0x10
1000146a:	84 c0                	test   al,al
1000146c:	74 3d                	je     100014ab <FloppyDrive::seek(int, int)+0xff>
1000146e:	83 ec 0c             	sub    esp,0xc
10001471:	68 4f 25 00 10       	push   0x1000254f	10001472: R_386_32	.text
10001476:	e8 fc ff ff ff       	call   10001477 <FloppyDrive::seek(int, int)+0xcb>	10001477: R_386_PC32	Dbg::kprintf(char const*, ...)
1000147b:	83 c4 10             	add    esp,0x10
1000147e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001481:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001487:	83 ec 0c             	sub    esp,0xc
1000148a:	50                   	push   eax
1000148b:	e8 fc ff ff ff       	call   1000148c <FloppyDrive::seek(int, int)+0xe0>	1000148c: R_386_PC32	Floppy::reset()
10001490:	83 c4 10             	add    esp,0x10
10001493:	83 ec 0c             	sub    esp,0xc
10001496:	68 5b 25 00 10       	push   0x1000255b	10001497: R_386_32	.text
1000149b:	e8 fc ff ff ff       	call   1000149c <FloppyDrive::seek(int, int)+0xf0>	1000149c: R_386_PC32	Dbg::kprintf(char const*, ...)
100014a0:	83 c4 10             	add    esp,0x10
100014a3:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
100014a6:	e9 0e ff ff ff       	jmp    100013b9 <FloppyDrive::seek(int, int)+0xd>
100014ab:	83 ec 0c             	sub    esp,0xc
100014ae:	68 67 25 00 10       	push   0x10002567	100014af: R_386_32	.text
100014b3:	e8 fc ff ff ff       	call   100014b4 <FloppyDrive::seek(int, int)+0x108>	100014b4: R_386_PC32	Dbg::kprintf(char const*, ...)
100014b8:	83 c4 10             	add    esp,0x10
100014bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100014be:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100014c4:	c6 80 60 01 00 00 00 	mov    BYTE PTR [eax+0x160],0x0
100014cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100014ce:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100014d4:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
100014d7:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
100014dd:	88 d1                	mov    cl,dl
100014df:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
100014e2:	c1 e2 02             	shl    edx,0x2
100014e5:	09 ca                	or     edx,ecx
100014e7:	0f b6 d2             	movzx  edx,dl
100014ea:	83 ec 08             	sub    esp,0x8
100014ed:	52                   	push   edx
100014ee:	50                   	push   eax
100014ef:	e8 fc ff ff ff       	call   100014f0 <FloppyDrive::seek(int, int)+0x144>	100014f0: R_386_PC32	Floppy::writeCommand(unsigned char)
100014f4:	83 c4 10             	add    esp,0x10
100014f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100014fa:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001500:	83 ec 0c             	sub    esp,0xc
10001503:	50                   	push   eax
10001504:	e8 fc ff ff ff       	call   10001505 <FloppyDrive::seek(int, int)+0x159>	10001505: R_386_PC32	Floppy::wasFailure()
10001509:	83 c4 10             	add    esp,0x10
1000150c:	84 c0                	test   al,al
1000150e:	74 1d                	je     1000152d <FloppyDrive::seek(int, int)+0x181>
10001510:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001513:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001519:	83 ec 0c             	sub    esp,0xc
1000151c:	50                   	push   eax
1000151d:	e8 fc ff ff ff       	call   1000151e <FloppyDrive::seek(int, int)+0x172>	1000151e: R_386_PC32	Floppy::reset()
10001522:	83 c4 10             	add    esp,0x10
10001525:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10001528:	e9 8c fe ff ff       	jmp    100013b9 <FloppyDrive::seek(int, int)+0xd>
1000152d:	83 ec 0c             	sub    esp,0xc
10001530:	68 72 25 00 10       	push   0x10002572	10001531: R_386_32	.text
10001535:	e8 fc ff ff ff       	call   10001536 <FloppyDrive::seek(int, int)+0x18a>	10001536: R_386_PC32	Dbg::kprintf(char const*, ...)
1000153a:	83 c4 10             	add    esp,0x10
1000153d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001540:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001546:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10001549:	0f b6 d2             	movzx  edx,dl
1000154c:	83 ec 08             	sub    esp,0x8
1000154f:	52                   	push   edx
10001550:	50                   	push   eax
10001551:	e8 fc ff ff ff       	call   10001552 <FloppyDrive::seek(int, int)+0x1a6>	10001552: R_386_PC32	Floppy::writeCommand(unsigned char)
10001556:	83 c4 10             	add    esp,0x10
10001559:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000155c:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001562:	83 ec 0c             	sub    esp,0xc
10001565:	50                   	push   eax
10001566:	e8 fc ff ff ff       	call   10001567 <FloppyDrive::seek(int, int)+0x1bb>	10001567: R_386_PC32	Floppy::wasFailure()
1000156b:	83 c4 10             	add    esp,0x10
1000156e:	84 c0                	test   al,al
10001570:	74 1d                	je     1000158f <FloppyDrive::seek(int, int)+0x1e3>
10001572:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001575:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
1000157b:	83 ec 0c             	sub    esp,0xc
1000157e:	50                   	push   eax
1000157f:	e8 fc ff ff ff       	call   10001580 <FloppyDrive::seek(int, int)+0x1d4>	10001580: R_386_PC32	Floppy::reset()
10001584:	83 c4 10             	add    esp,0x10
10001587:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
1000158a:	e9 2a fe ff ff       	jmp    100013b9 <FloppyDrive::seek(int, int)+0xd>
1000158f:	83 ec 0c             	sub    esp,0xc
10001592:	68 7d 25 00 10       	push   0x1000257d	10001593: R_386_32	.text
10001597:	e8 fc ff ff ff       	call   10001598 <FloppyDrive::seek(int, int)+0x1ec>	10001598: R_386_PC32	Dbg::kprintf(char const*, ...)
1000159c:	83 c4 10             	add    esp,0x10
1000159f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100015a2:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100015a8:	83 ec 08             	sub    esp,0x8
100015ab:	68 dc 05 00 00       	push   0x5dc
100015b0:	50                   	push   eax
100015b1:	e8 fc ff ff ff       	call   100015b2 <FloppyDrive::seek(int, int)+0x206>	100015b2: R_386_PC32	Floppy::waitIRQ(int)
100015b6:	83 c4 10             	add    esp,0x10
100015b9:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
100015bc:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
100015bf:	83 f0 01             	xor    eax,0x1
100015c2:	84 c0                	test   al,al
100015c4:	74 2d                	je     100015f3 <FloppyDrive::seek(int, int)+0x247>
100015c6:	83 ec 0c             	sub    esp,0xc
100015c9:	68 88 25 00 10       	push   0x10002588	100015ca: R_386_32	.text
100015ce:	e8 fc ff ff ff       	call   100015cf <FloppyDrive::seek(int, int)+0x223>	100015cf: R_386_PC32	Dbg::kprintf(char const*, ...)
100015d3:	83 c4 10             	add    esp,0x10
100015d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100015d9:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100015df:	83 ec 0c             	sub    esp,0xc
100015e2:	50                   	push   eax
100015e3:	e8 fc ff ff ff       	call   100015e4 <FloppyDrive::seek(int, int)+0x238>	100015e4: R_386_PC32	Floppy::reset()
100015e8:	83 c4 10             	add    esp,0x10
100015eb:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
100015ee:	e9 c6 fd ff ff       	jmp    100013b9 <FloppyDrive::seek(int, int)+0xd>
100015f3:	83 ec 0c             	sub    esp,0xc
100015f6:	68 96 25 00 10       	push   0x10002596	100015f7: R_386_32	.text
100015fb:	e8 fc ff ff ff       	call   100015fc <FloppyDrive::seek(int, int)+0x250>	100015fc: R_386_PC32	Dbg::kprintf(char const*, ...)
10001600:	83 c4 10             	add    esp,0x10
10001603:	c7 45 ec c0 00 00 00 	mov    DWORD PTR [ebp-0x14],0xc0
1000160a:	c7 45 e8 ff ff ff ff 	mov    DWORD PTR [ebp-0x18],0xffffffff
10001611:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001614:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
1000161a:	83 ec 04             	sub    esp,0x4
1000161d:	8d 55 e8             	lea    edx,[ebp-0x18]
10001620:	52                   	push   edx
10001621:	8d 55 ec             	lea    edx,[ebp-0x14]
10001624:	52                   	push   edx
10001625:	50                   	push   eax
10001626:	e8 fc ff ff ff       	call   10001627 <FloppyDrive::seek(int, int)+0x27b>	10001627: R_386_PC32	Floppy::senseInterrupt(int*, int*)
1000162b:	83 c4 10             	add    esp,0x10
1000162e:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
10001631:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
10001634:	83 f0 01             	xor    eax,0x1
10001637:	84 c0                	test   al,al
10001639:	74 15                	je     10001650 <FloppyDrive::seek(int, int)+0x2a4>
1000163b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000163e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001644:	83 ec 0c             	sub    esp,0xc
10001647:	50                   	push   eax
10001648:	e8 fc ff ff ff       	call   10001649 <FloppyDrive::seek(int, int)+0x29d>	10001649: R_386_PC32	Floppy::reset()
1000164d:	83 c4 10             	add    esp,0x10
10001650:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
10001653:	83 f0 01             	xor    eax,0x1
10001656:	84 c0                	test   al,al
10001658:	75 08                	jne    10001662 <FloppyDrive::seek(int, int)+0x2b6>
1000165a:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
1000165d:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
10001660:	74 08                	je     1000166a <FloppyDrive::seek(int, int)+0x2be>
10001662:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10001665:	e9 4f fd ff ff       	jmp    100013b9 <FloppyDrive::seek(int, int)+0xd>
1000166a:	83 ec 0c             	sub    esp,0xc
1000166d:	68 a1 25 00 10       	push   0x100025a1	1000166e: R_386_32	.text
10001672:	e8 fc ff ff ff       	call   10001673 <FloppyDrive::seek(int, int)+0x2c7>	10001673: R_386_PC32	Dbg::kprintf(char const*, ...)
10001677:	83 c4 10             	add    esp,0x10
1000167a:	83 ec 0c             	sub    esp,0xc
1000167d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001680:	e8 fc ff ff ff       	call   10001681 <FloppyDrive::seek(int, int)+0x2d5>	10001681: R_386_PC32	FloppyDrive::motorOff()
10001685:	83 c4 10             	add    esp,0x10
10001688:	83 ec 0c             	sub    esp,0xc
1000168b:	68 ae 25 00 10       	push   0x100025ae	1000168c: R_386_32	.text
10001690:	e8 fc ff ff ff       	call   10001691 <FloppyDrive::seek(int, int)+0x2e5>	10001691: R_386_PC32	Dbg::kprintf(char const*, ...)
10001695:	83 c4 10             	add    esp,0x10
10001698:	83 ec 0c             	sub    esp,0xc
1000169b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000169e:	e8 fc ff ff ff       	call   1000169f <FloppyDrive::seek(int, int)+0x2f3>	1000169f: R_386_PC32	FloppyDrive::unselect()
100016a3:	83 c4 10             	add    esp,0x10
100016a6:	83 ec 0c             	sub    esp,0xc
100016a9:	68 bb 25 00 10       	push   0x100025bb	100016aa: R_386_32	.text
100016ae:	e8 fc ff ff ff       	call   100016af <FloppyDrive::seek(int, int)+0x303>	100016af: R_386_PC32	Dbg::kprintf(char const*, ...)
100016b3:	83 c4 10             	add    esp,0x10
100016b6:	b0 01                	mov    al,0x1
100016b8:	c9                   	leave  
100016b9:	c3                   	ret    

100016ba <FloppyDrive::calibrate()>:
100016ba:	55                   	push   ebp
100016bb:	89 e5                	mov    ebp,esp
100016bd:	83 ec 18             	sub    esp,0x18
100016c0:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
100016c7:	83 7d f4 04          	cmp    DWORD PTR [ebp-0xc],0x4
100016cb:	7e 33                	jle    10001700 <FloppyDrive::calibrate()+0x46>
100016cd:	83 ec 0c             	sub    esp,0xc
100016d0:	68 c8 25 00 10       	push   0x100025c8	100016d1: R_386_32	.text
100016d5:	e8 fc ff ff ff       	call   100016d6 <FloppyDrive::calibrate()+0x1c>	100016d6: R_386_PC32	Dbg::kprintf(char const*, ...)
100016da:	83 c4 10             	add    esp,0x10
100016dd:	83 ec 0c             	sub    esp,0xc
100016e0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100016e3:	e8 fc ff ff ff       	call   100016e4 <FloppyDrive::calibrate()+0x2a>	100016e4: R_386_PC32	FloppyDrive::motorOff()
100016e8:	83 c4 10             	add    esp,0x10
100016eb:	83 ec 0c             	sub    esp,0xc
100016ee:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100016f1:	e8 fc ff ff ff       	call   100016f2 <FloppyDrive::calibrate()+0x38>	100016f2: R_386_PC32	FloppyDrive::unselect()
100016f6:	83 c4 10             	add    esp,0x10
100016f9:	b0 00                	mov    al,0x0
100016fb:	e9 a3 01 00 00       	jmp    100018a3 <FloppyDrive::calibrate()+0x1e9>
10001700:	83 ec 0c             	sub    esp,0xc
10001703:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001706:	e8 fc ff ff ff       	call   10001707 <FloppyDrive::calibrate()+0x4d>	10001707: R_386_PC32	FloppyDrive::select()
1000170b:	83 c4 10             	add    esp,0x10
1000170e:	83 ec 0c             	sub    esp,0xc
10001711:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001714:	e8 fc ff ff ff       	call   10001715 <FloppyDrive::calibrate()+0x5b>	10001715: R_386_PC32	FloppyDrive::motorOn()
10001719:	83 c4 10             	add    esp,0x10
1000171c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000171f:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001725:	83 ec 08             	sub    esp,0x8
10001728:	6a 07                	push   0x7
1000172a:	50                   	push   eax
1000172b:	e8 fc ff ff ff       	call   1000172c <FloppyDrive::calibrate()+0x72>	1000172c: R_386_PC32	Floppy::writeCommand(unsigned char)
10001730:	83 c4 10             	add    esp,0x10
10001733:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001736:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
1000173c:	83 ec 0c             	sub    esp,0xc
1000173f:	50                   	push   eax
10001740:	e8 fc ff ff ff       	call   10001741 <FloppyDrive::calibrate()+0x87>	10001741: R_386_PC32	Floppy::wasFailure()
10001745:	83 c4 10             	add    esp,0x10
10001748:	84 c0                	test   al,al
1000174a:	74 1d                	je     10001769 <FloppyDrive::calibrate()+0xaf>
1000174c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000174f:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001755:	83 ec 0c             	sub    esp,0xc
10001758:	50                   	push   eax
10001759:	e8 fc ff ff ff       	call   1000175a <FloppyDrive::calibrate()+0xa0>	1000175a: R_386_PC32	Floppy::reset()
1000175e:	83 c4 10             	add    esp,0x10
10001761:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10001764:	e9 5e ff ff ff       	jmp    100016c7 <FloppyDrive::calibrate()+0xd>
10001769:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000176c:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001772:	c6 80 60 01 00 00 00 	mov    BYTE PTR [eax+0x160],0x0
10001779:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000177c:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001782:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10001785:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
1000178b:	0f b6 d2             	movzx  edx,dl
1000178e:	83 ec 08             	sub    esp,0x8
10001791:	52                   	push   edx
10001792:	50                   	push   eax
10001793:	e8 fc ff ff ff       	call   10001794 <FloppyDrive::calibrate()+0xda>	10001794: R_386_PC32	Floppy::writeCommand(unsigned char)
10001798:	83 c4 10             	add    esp,0x10
1000179b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000179e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100017a4:	83 ec 0c             	sub    esp,0xc
100017a7:	50                   	push   eax
100017a8:	e8 fc ff ff ff       	call   100017a9 <FloppyDrive::calibrate()+0xef>	100017a9: R_386_PC32	Floppy::wasFailure()
100017ad:	83 c4 10             	add    esp,0x10
100017b0:	84 c0                	test   al,al
100017b2:	74 1d                	je     100017d1 <FloppyDrive::calibrate()+0x117>
100017b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100017b7:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100017bd:	83 ec 0c             	sub    esp,0xc
100017c0:	50                   	push   eax
100017c1:	e8 fc ff ff ff       	call   100017c2 <FloppyDrive::calibrate()+0x108>	100017c2: R_386_PC32	Floppy::reset()
100017c6:	83 c4 10             	add    esp,0x10
100017c9:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
100017cc:	e9 f6 fe ff ff       	jmp    100016c7 <FloppyDrive::calibrate()+0xd>
100017d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100017d4:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100017da:	83 ec 08             	sub    esp,0x8
100017dd:	68 dc 05 00 00       	push   0x5dc
100017e2:	50                   	push   eax
100017e3:	e8 fc ff ff ff       	call   100017e4 <FloppyDrive::calibrate()+0x12a>	100017e4: R_386_PC32	Floppy::waitIRQ(int)
100017e8:	83 c4 10             	add    esp,0x10
100017eb:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
100017ee:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
100017f1:	83 f0 01             	xor    eax,0x1
100017f4:	84 c0                	test   al,al
100017f6:	74 1d                	je     10001815 <FloppyDrive::calibrate()+0x15b>
100017f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100017fb:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001801:	83 ec 0c             	sub    esp,0xc
10001804:	50                   	push   eax
10001805:	e8 fc ff ff ff       	call   10001806 <FloppyDrive::calibrate()+0x14c>	10001806: R_386_PC32	Floppy::reset()
1000180a:	83 c4 10             	add    esp,0x10
1000180d:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10001810:	e9 b2 fe ff ff       	jmp    100016c7 <FloppyDrive::calibrate()+0xd>
10001815:	c7 45 ec c0 00 00 00 	mov    DWORD PTR [ebp-0x14],0xc0
1000181c:	c7 45 e8 ff ff ff ff 	mov    DWORD PTR [ebp-0x18],0xffffffff
10001823:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001826:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
1000182c:	83 ec 04             	sub    esp,0x4
1000182f:	8d 55 e8             	lea    edx,[ebp-0x18]
10001832:	52                   	push   edx
10001833:	8d 55 ec             	lea    edx,[ebp-0x14]
10001836:	52                   	push   edx
10001837:	50                   	push   eax
10001838:	e8 fc ff ff ff       	call   10001839 <FloppyDrive::calibrate()+0x17f>	10001839: R_386_PC32	Floppy::senseInterrupt(int*, int*)
1000183d:	83 c4 10             	add    esp,0x10
10001840:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
10001843:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
10001846:	83 f0 01             	xor    eax,0x1
10001849:	84 c0                	test   al,al
1000184b:	74 15                	je     10001862 <FloppyDrive::calibrate()+0x1a8>
1000184d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001850:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001856:	83 ec 0c             	sub    esp,0xc
10001859:	50                   	push   eax
1000185a:	e8 fc ff ff ff       	call   1000185b <FloppyDrive::calibrate()+0x1a1>	1000185b: R_386_PC32	Floppy::reset()
1000185f:	83 c4 10             	add    esp,0x10
10001862:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
10001865:	83 f0 01             	xor    eax,0x1
10001868:	84 c0                	test   al,al
1000186a:	75 11                	jne    1000187d <FloppyDrive::calibrate()+0x1c3>
1000186c:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
1000186f:	85 c0                	test   eax,eax
10001871:	75 0a                	jne    1000187d <FloppyDrive::calibrate()+0x1c3>
10001873:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
10001876:	83 e0 20             	and    eax,0x20
10001879:	85 c0                	test   eax,eax
1000187b:	75 08                	jne    10001885 <FloppyDrive::calibrate()+0x1cb>
1000187d:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10001880:	e9 42 fe ff ff       	jmp    100016c7 <FloppyDrive::calibrate()+0xd>
10001885:	83 ec 0c             	sub    esp,0xc
10001888:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000188b:	e8 fc ff ff ff       	call   1000188c <FloppyDrive::calibrate()+0x1d2>	1000188c: R_386_PC32	FloppyDrive::motorOff()
10001890:	83 c4 10             	add    esp,0x10
10001893:	83 ec 0c             	sub    esp,0xc
10001896:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001899:	e8 fc ff ff ff       	call   1000189a <FloppyDrive::calibrate()+0x1e0>	1000189a: R_386_PC32	FloppyDrive::unselect()
1000189e:	83 c4 10             	add    esp,0x10
100018a1:	b0 01                	mov    al,0x1
100018a3:	c9                   	leave  
100018a4:	c3                   	ret    
100018a5:	90                   	nop

100018a6 <FloppyDrive::doTrack(int, bool, unsigned char*)>:
100018a6:	55                   	push   ebp
100018a7:	89 e5                	mov    ebp,esp
100018a9:	83 ec 28             	sub    esp,0x28
100018ac:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
100018af:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
100018b2:	80 7d e4 00          	cmp    BYTE PTR [ebp-0x1c],0x0
100018b6:	74 10                	je     100018c8 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x22>
100018b8:	83 ec 0c             	sub    esp,0xc
100018bb:	68 f4 25 00 10       	push   0x100025f4	100018bc: R_386_32	.text
100018c0:	e8 fc ff ff ff       	call   100018c1 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x1b>	100018c1: R_386_PC32	Krnl::panic(char const*)
100018c5:	83 c4 10             	add    esp,0x10
100018c8:	80 7d e4 00          	cmp    BYTE PTR [ebp-0x1c],0x0
100018cc:	74 07                	je     100018d5 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x2f>
100018ce:	b8 c5 00 00 00       	mov    eax,0xc5
100018d3:	eb 05                	jmp    100018da <FloppyDrive::doTrack(int, bool, unsigned char*)+0x34>
100018d5:	b8 c6 00 00 00       	mov    eax,0xc6
100018da:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
100018dd:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
100018e4:	83 ec 0c             	sub    esp,0xc
100018e7:	68 1b 26 00 10       	push   0x1000261b	100018e8: R_386_32	.text
100018ec:	e8 fc ff ff ff       	call   100018ed <FloppyDrive::doTrack(int, bool, unsigned char*)+0x47>	100018ed: R_386_PC32	Dbg::kprintf(char const*, ...)
100018f1:	83 c4 10             	add    esp,0x10
100018f4:	83 7d f4 14          	cmp    DWORD PTR [ebp-0xc],0x14
100018f8:	75 26                	jne    10001920 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x7a>
100018fa:	83 ec 0c             	sub    esp,0xc
100018fd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001900:	e8 fc ff ff ff       	call   10001901 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x5b>	10001901: R_386_PC32	FloppyDrive::motorOff()
10001905:	83 c4 10             	add    esp,0x10
10001908:	83 ec 0c             	sub    esp,0xc
1000190b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000190e:	e8 fc ff ff ff       	call   1000190f <FloppyDrive::doTrack(int, bool, unsigned char*)+0x69>	1000190f: R_386_PC32	FloppyDrive::unselect()
10001913:	83 c4 10             	add    esp,0x10
10001916:	b8 fe ff ff ff       	mov    eax,0xfffffffe
1000191b:	e9 67 07 00 00       	jmp    10002087 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x7e1>
10001920:	83 ec 0c             	sub    esp,0xc
10001923:	68 25 26 00 10       	push   0x10002625	10001924: R_386_32	.text
10001928:	e8 fc ff ff ff       	call   10001929 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x83>	10001929: R_386_PC32	Dbg::kprintf(char const*, ...)
1000192d:	83 c4 10             	add    esp,0x10
10001930:	83 ec 04             	sub    esp,0x4
10001933:	6a 00                	push   0x0
10001935:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10001938:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000193b:	e8 fc ff ff ff       	call   1000193c <FloppyDrive::doTrack(int, bool, unsigned char*)+0x96>	1000193c: R_386_PC32	FloppyDrive::seek(int, int)
10001940:	83 c4 10             	add    esp,0x10
10001943:	83 f0 01             	xor    eax,0x1
10001946:	84 c0                	test   al,al
10001948:	74 0a                	je     10001954 <FloppyDrive::doTrack(int, bool, unsigned char*)+0xae>
1000194a:	b8 ff ff ff ff       	mov    eax,0xffffffff
1000194f:	e9 33 07 00 00       	jmp    10002087 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x7e1>
10001954:	83 ec 04             	sub    esp,0x4
10001957:	6a 01                	push   0x1
10001959:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
1000195c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000195f:	e8 fc ff ff ff       	call   10001960 <FloppyDrive::doTrack(int, bool, unsigned char*)+0xba>	10001960: R_386_PC32	FloppyDrive::seek(int, int)
10001964:	83 c4 10             	add    esp,0x10
10001967:	83 f0 01             	xor    eax,0x1
1000196a:	84 c0                	test   al,al
1000196c:	74 0a                	je     10001978 <FloppyDrive::doTrack(int, bool, unsigned char*)+0xd2>
1000196e:	b8 ff ff ff ff       	mov    eax,0xffffffff
10001973:	e9 0f 07 00 00       	jmp    10002087 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x7e1>
10001978:	83 ec 0c             	sub    esp,0xc
1000197b:	68 35 26 00 10       	push   0x10002635	1000197c: R_386_32	.text
10001980:	e8 fc ff ff ff       	call   10001981 <FloppyDrive::doTrack(int, bool, unsigned char*)+0xdb>	10001981: R_386_PC32	Dbg::kprintf(char const*, ...)
10001985:	83 c4 10             	add    esp,0x10
10001988:	83 ec 0c             	sub    esp,0xc
1000198b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000198e:	e8 fc ff ff ff       	call   1000198f <FloppyDrive::doTrack(int, bool, unsigned char*)+0xe9>	1000198f: R_386_PC32	FloppyDrive::motorOn()
10001993:	83 c4 10             	add    esp,0x10
10001996:	83 ec 0c             	sub    esp,0xc
10001999:	68 41 26 00 10       	push   0x10002641	1000199a: R_386_32	.text
1000199e:	e8 fc ff ff ff       	call   1000199f <FloppyDrive::doTrack(int, bool, unsigned char*)+0xf9>	1000199f: R_386_PC32	Dbg::kprintf(char const*, ...)
100019a3:	83 c4 10             	add    esp,0x10
100019a6:	83 ec 0c             	sub    esp,0xc
100019a9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100019ac:	e8 fc ff ff ff       	call   100019ad <FloppyDrive::doTrack(int, bool, unsigned char*)+0x107>	100019ad: R_386_PC32	FloppyDrive::select()
100019b1:	83 c4 10             	add    esp,0x10
100019b4:	83 ec 0c             	sub    esp,0xc
100019b7:	68 4c 26 00 10       	push   0x1000264c	100019b8: R_386_32	.text
100019bc:	e8 fc ff ff ff       	call   100019bd <FloppyDrive::doTrack(int, bool, unsigned char*)+0x117>	100019bd: R_386_PC32	Dbg::kprintf(char const*, ...)
100019c1:	83 c4 10             	add    esp,0x10
100019c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100019c7:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100019cd:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
100019d1:	83 ec 08             	sub    esp,0x8
100019d4:	52                   	push   edx
100019d5:	50                   	push   eax
100019d6:	e8 fc ff ff ff       	call   100019d7 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x131>	100019d7: R_386_PC32	Floppy::dmaInit(bool)
100019db:	83 c4 10             	add    esp,0x10
100019de:	83 ec 0c             	sub    esp,0xc
100019e1:	68 57 26 00 10       	push   0x10002657	100019e2: R_386_32	.text
100019e6:	e8 fc ff ff ff       	call   100019e7 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x141>	100019e7: R_386_PC32	Dbg::kprintf(char const*, ...)
100019eb:	83 c4 10             	add    esp,0x10
100019ee:	83 ec 08             	sub    esp,0x8
100019f1:	6a 00                	push   0x0
100019f3:	68 00 e1 f5 05       	push   0x5f5e100
100019f8:	e8 fc ff ff ff       	call   100019f9 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x153>	100019f9: R_386_PC32	nanoSleep(unsigned long long)
100019fd:	83 c4 10             	add    esp,0x10
10001a00:	83 ec 0c             	sub    esp,0xc
10001a03:	68 64 26 00 10       	push   0x10002664	10001a04: R_386_32	.text
10001a08:	e8 fc ff ff ff       	call   10001a09 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x163>	10001a09: R_386_PC32	Dbg::kprintf(char const*, ...)
10001a0d:	83 c4 10             	add    esp,0x10
10001a10:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001a13:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001a19:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
10001a1c:	0f b6 d2             	movzx  edx,dl
10001a1f:	83 ec 08             	sub    esp,0x8
10001a22:	52                   	push   edx
10001a23:	50                   	push   eax
10001a24:	e8 fc ff ff ff       	call   10001a25 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x17f>	10001a25: R_386_PC32	Floppy::writeCommand(unsigned char)
10001a29:	83 c4 10             	add    esp,0x10
10001a2c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001a2f:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001a35:	83 ec 0c             	sub    esp,0xc
10001a38:	50                   	push   eax
10001a39:	e8 fc ff ff ff       	call   10001a3a <FloppyDrive::doTrack(int, bool, unsigned char*)+0x194>	10001a3a: R_386_PC32	Floppy::wasFailure()
10001a3e:	83 c4 10             	add    esp,0x10
10001a41:	84 c0                	test   al,al
10001a43:	74 1d                	je     10001a62 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x1bc>
10001a45:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001a48:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001a4e:	83 ec 0c             	sub    esp,0xc
10001a51:	50                   	push   eax
10001a52:	e8 fc ff ff ff       	call   10001a53 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x1ad>	10001a53: R_386_PC32	Floppy::reset()
10001a57:	83 c4 10             	add    esp,0x10
10001a5a:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10001a5d:	e9 82 fe ff ff       	jmp    100018e4 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x3e>
10001a62:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001a65:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001a6b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10001a6e:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
10001a74:	0f b6 d2             	movzx  edx,dl
10001a77:	83 ec 08             	sub    esp,0x8
10001a7a:	52                   	push   edx
10001a7b:	50                   	push   eax
10001a7c:	e8 fc ff ff ff       	call   10001a7d <FloppyDrive::doTrack(int, bool, unsigned char*)+0x1d7>	10001a7d: R_386_PC32	Floppy::writeCommand(unsigned char)
10001a81:	83 c4 10             	add    esp,0x10
10001a84:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001a87:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001a8d:	83 ec 0c             	sub    esp,0xc
10001a90:	50                   	push   eax
10001a91:	e8 fc ff ff ff       	call   10001a92 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x1ec>	10001a92: R_386_PC32	Floppy::wasFailure()
10001a96:	83 c4 10             	add    esp,0x10
10001a99:	84 c0                	test   al,al
10001a9b:	74 1d                	je     10001aba <FloppyDrive::doTrack(int, bool, unsigned char*)+0x214>
10001a9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001aa0:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001aa6:	83 ec 0c             	sub    esp,0xc
10001aa9:	50                   	push   eax
10001aaa:	e8 fc ff ff ff       	call   10001aab <FloppyDrive::doTrack(int, bool, unsigned char*)+0x205>	10001aab: R_386_PC32	Floppy::reset()
10001aaf:	83 c4 10             	add    esp,0x10
10001ab2:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10001ab5:	e9 2a fe ff ff       	jmp    100018e4 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x3e>
10001aba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001abd:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001ac3:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10001ac6:	0f b6 d2             	movzx  edx,dl
10001ac9:	83 ec 08             	sub    esp,0x8
10001acc:	52                   	push   edx
10001acd:	50                   	push   eax
10001ace:	e8 fc ff ff ff       	call   10001acf <FloppyDrive::doTrack(int, bool, unsigned char*)+0x229>	10001acf: R_386_PC32	Floppy::writeCommand(unsigned char)
10001ad3:	83 c4 10             	add    esp,0x10
10001ad6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001ad9:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001adf:	83 ec 0c             	sub    esp,0xc
10001ae2:	50                   	push   eax
10001ae3:	e8 fc ff ff ff       	call   10001ae4 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x23e>	10001ae4: R_386_PC32	Floppy::wasFailure()
10001ae8:	83 c4 10             	add    esp,0x10
10001aeb:	84 c0                	test   al,al
10001aed:	74 1d                	je     10001b0c <FloppyDrive::doTrack(int, bool, unsigned char*)+0x266>
10001aef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001af2:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001af8:	83 ec 0c             	sub    esp,0xc
10001afb:	50                   	push   eax
10001afc:	e8 fc ff ff ff       	call   10001afd <FloppyDrive::doTrack(int, bool, unsigned char*)+0x257>	10001afd: R_386_PC32	Floppy::reset()
10001b01:	83 c4 10             	add    esp,0x10
10001b04:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10001b07:	e9 d8 fd ff ff       	jmp    100018e4 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x3e>
10001b0c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001b0f:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001b15:	83 ec 08             	sub    esp,0x8
10001b18:	6a 00                	push   0x0
10001b1a:	50                   	push   eax
10001b1b:	e8 fc ff ff ff       	call   10001b1c <FloppyDrive::doTrack(int, bool, unsigned char*)+0x276>	10001b1c: R_386_PC32	Floppy::writeCommand(unsigned char)
10001b20:	83 c4 10             	add    esp,0x10
10001b23:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001b26:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001b2c:	83 ec 0c             	sub    esp,0xc
10001b2f:	50                   	push   eax
10001b30:	e8 fc ff ff ff       	call   10001b31 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x28b>	10001b31: R_386_PC32	Floppy::wasFailure()
10001b35:	83 c4 10             	add    esp,0x10
10001b38:	84 c0                	test   al,al
10001b3a:	74 1d                	je     10001b59 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x2b3>
10001b3c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001b3f:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001b45:	83 ec 0c             	sub    esp,0xc
10001b48:	50                   	push   eax
10001b49:	e8 fc ff ff ff       	call   10001b4a <FloppyDrive::doTrack(int, bool, unsigned char*)+0x2a4>	10001b4a: R_386_PC32	Floppy::reset()
10001b4e:	83 c4 10             	add    esp,0x10
10001b51:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10001b54:	e9 8b fd ff ff       	jmp    100018e4 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x3e>
10001b59:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001b5c:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001b62:	83 ec 08             	sub    esp,0x8
10001b65:	6a 01                	push   0x1
10001b67:	50                   	push   eax
10001b68:	e8 fc ff ff ff       	call   10001b69 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x2c3>	10001b69: R_386_PC32	Floppy::writeCommand(unsigned char)
10001b6d:	83 c4 10             	add    esp,0x10
10001b70:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001b73:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001b79:	83 ec 0c             	sub    esp,0xc
10001b7c:	50                   	push   eax
10001b7d:	e8 fc ff ff ff       	call   10001b7e <FloppyDrive::doTrack(int, bool, unsigned char*)+0x2d8>	10001b7e: R_386_PC32	Floppy::wasFailure()
10001b82:	83 c4 10             	add    esp,0x10
10001b85:	84 c0                	test   al,al
10001b87:	74 1d                	je     10001ba6 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x300>
10001b89:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001b8c:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001b92:	83 ec 0c             	sub    esp,0xc
10001b95:	50                   	push   eax
10001b96:	e8 fc ff ff ff       	call   10001b97 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x2f1>	10001b97: R_386_PC32	Floppy::reset()
10001b9b:	83 c4 10             	add    esp,0x10
10001b9e:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10001ba1:	e9 3e fd ff ff       	jmp    100018e4 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x3e>
10001ba6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001ba9:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001baf:	83 ec 08             	sub    esp,0x8
10001bb2:	6a 02                	push   0x2
10001bb4:	50                   	push   eax
10001bb5:	e8 fc ff ff ff       	call   10001bb6 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x310>	10001bb6: R_386_PC32	Floppy::writeCommand(unsigned char)
10001bba:	83 c4 10             	add    esp,0x10
10001bbd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001bc0:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001bc6:	83 ec 0c             	sub    esp,0xc
10001bc9:	50                   	push   eax
10001bca:	e8 fc ff ff ff       	call   10001bcb <FloppyDrive::doTrack(int, bool, unsigned char*)+0x325>	10001bcb: R_386_PC32	Floppy::wasFailure()
10001bcf:	83 c4 10             	add    esp,0x10
10001bd2:	84 c0                	test   al,al
10001bd4:	74 1d                	je     10001bf3 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x34d>
10001bd6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001bd9:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001bdf:	83 ec 0c             	sub    esp,0xc
10001be2:	50                   	push   eax
10001be3:	e8 fc ff ff ff       	call   10001be4 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x33e>	10001be4: R_386_PC32	Floppy::reset()
10001be8:	83 c4 10             	add    esp,0x10
10001beb:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10001bee:	e9 f1 fc ff ff       	jmp    100018e4 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x3e>
10001bf3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001bf6:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001bfc:	83 ec 08             	sub    esp,0x8
10001bff:	6a 12                	push   0x12
10001c01:	50                   	push   eax
10001c02:	e8 fc ff ff ff       	call   10001c03 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x35d>	10001c03: R_386_PC32	Floppy::writeCommand(unsigned char)
10001c07:	83 c4 10             	add    esp,0x10
10001c0a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001c0d:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001c13:	83 ec 0c             	sub    esp,0xc
10001c16:	50                   	push   eax
10001c17:	e8 fc ff ff ff       	call   10001c18 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x372>	10001c18: R_386_PC32	Floppy::wasFailure()
10001c1c:	83 c4 10             	add    esp,0x10
10001c1f:	84 c0                	test   al,al
10001c21:	74 1d                	je     10001c40 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x39a>
10001c23:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001c26:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001c2c:	83 ec 0c             	sub    esp,0xc
10001c2f:	50                   	push   eax
10001c30:	e8 fc ff ff ff       	call   10001c31 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x38b>	10001c31: R_386_PC32	Floppy::reset()
10001c35:	83 c4 10             	add    esp,0x10
10001c38:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10001c3b:	e9 a4 fc ff ff       	jmp    100018e4 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x3e>
10001c40:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001c43:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001c49:	83 ec 08             	sub    esp,0x8
10001c4c:	6a 1b                	push   0x1b
10001c4e:	50                   	push   eax
10001c4f:	e8 fc ff ff ff       	call   10001c50 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x3aa>	10001c50: R_386_PC32	Floppy::writeCommand(unsigned char)
10001c54:	83 c4 10             	add    esp,0x10
10001c57:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001c5a:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001c60:	83 ec 0c             	sub    esp,0xc
10001c63:	50                   	push   eax
10001c64:	e8 fc ff ff ff       	call   10001c65 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x3bf>	10001c65: R_386_PC32	Floppy::wasFailure()
10001c69:	83 c4 10             	add    esp,0x10
10001c6c:	84 c0                	test   al,al
10001c6e:	74 1d                	je     10001c8d <FloppyDrive::doTrack(int, bool, unsigned char*)+0x3e7>
10001c70:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001c73:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001c79:	83 ec 0c             	sub    esp,0xc
10001c7c:	50                   	push   eax
10001c7d:	e8 fc ff ff ff       	call   10001c7e <FloppyDrive::doTrack(int, bool, unsigned char*)+0x3d8>	10001c7e: R_386_PC32	Floppy::reset()
10001c82:	83 c4 10             	add    esp,0x10
10001c85:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10001c88:	e9 57 fc ff ff       	jmp    100018e4 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x3e>
10001c8d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001c90:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001c96:	c6 80 60 01 00 00 00 	mov    BYTE PTR [eax+0x160],0x0
10001c9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001ca0:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001ca6:	83 ec 08             	sub    esp,0x8
10001ca9:	68 ff 00 00 00       	push   0xff
10001cae:	50                   	push   eax
10001caf:	e8 fc ff ff ff       	call   10001cb0 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x40a>	10001cb0: R_386_PC32	Floppy::writeCommand(unsigned char)
10001cb4:	83 c4 10             	add    esp,0x10
10001cb7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001cba:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001cc0:	83 ec 0c             	sub    esp,0xc
10001cc3:	50                   	push   eax
10001cc4:	e8 fc ff ff ff       	call   10001cc5 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x41f>	10001cc5: R_386_PC32	Floppy::wasFailure()
10001cc9:	83 c4 10             	add    esp,0x10
10001ccc:	84 c0                	test   al,al
10001cce:	74 1d                	je     10001ced <FloppyDrive::doTrack(int, bool, unsigned char*)+0x447>
10001cd0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001cd3:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001cd9:	83 ec 0c             	sub    esp,0xc
10001cdc:	50                   	push   eax
10001cdd:	e8 fc ff ff ff       	call   10001cde <FloppyDrive::doTrack(int, bool, unsigned char*)+0x438>	10001cde: R_386_PC32	Floppy::reset()
10001ce2:	83 c4 10             	add    esp,0x10
10001ce5:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10001ce8:	e9 f7 fb ff ff       	jmp    100018e4 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x3e>
10001ced:	83 ec 0c             	sub    esp,0xc
10001cf0:	68 70 26 00 10       	push   0x10002670	10001cf1: R_386_32	.text
10001cf5:	e8 fc ff ff ff       	call   10001cf6 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x450>	10001cf6: R_386_PC32	Dbg::kprintf(char const*, ...)
10001cfa:	83 c4 10             	add    esp,0x10
10001cfd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001d00:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001d06:	83 ec 08             	sub    esp,0x8
10001d09:	68 e8 03 00 00       	push   0x3e8
10001d0e:	50                   	push   eax
10001d0f:	e8 fc ff ff ff       	call   10001d10 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x46a>	10001d10: R_386_PC32	Floppy::waitIRQ(int)
10001d14:	83 c4 10             	add    esp,0x10
10001d17:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
10001d1a:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
10001d1d:	83 f0 01             	xor    eax,0x1
10001d20:	84 c0                	test   al,al
10001d22:	74 2d                	je     10001d51 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x4ab>
10001d24:	83 ec 0c             	sub    esp,0xc
10001d27:	68 83 26 00 10       	push   0x10002683	10001d28: R_386_32	.text
10001d2c:	e8 fc ff ff ff       	call   10001d2d <FloppyDrive::doTrack(int, bool, unsigned char*)+0x487>	10001d2d: R_386_PC32	Dbg::kprintf(char const*, ...)
10001d31:	83 c4 10             	add    esp,0x10
10001d34:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001d37:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001d3d:	83 ec 0c             	sub    esp,0xc
10001d40:	50                   	push   eax
10001d41:	e8 fc ff ff ff       	call   10001d42 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x49c>	10001d42: R_386_PC32	Floppy::reset()
10001d46:	83 c4 10             	add    esp,0x10
10001d49:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10001d4c:	e9 93 fb ff ff       	jmp    100018e4 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x3e>
10001d51:	83 ec 0c             	sub    esp,0xc
10001d54:	68 8c 26 00 10       	push   0x1000268c	10001d55: R_386_32	.text
10001d59:	e8 fc ff ff ff       	call   10001d5a <FloppyDrive::doTrack(int, bool, unsigned char*)+0x4b4>	10001d5a: R_386_PC32	Dbg::kprintf(char const*, ...)
10001d5e:	83 c4 10             	add    esp,0x10
10001d61:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001d64:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001d6a:	83 ec 0c             	sub    esp,0xc
10001d6d:	50                   	push   eax
10001d6e:	e8 fc ff ff ff       	call   10001d6f <FloppyDrive::doTrack(int, bool, unsigned char*)+0x4c9>	10001d6f: R_386_PC32	Floppy::readData()
10001d73:	83 c4 10             	add    esp,0x10
10001d76:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
10001d79:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001d7c:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001d82:	83 ec 0c             	sub    esp,0xc
10001d85:	50                   	push   eax
10001d86:	e8 fc ff ff ff       	call   10001d87 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x4e1>	10001d87: R_386_PC32	Floppy::wasFailure()
10001d8b:	83 c4 10             	add    esp,0x10
10001d8e:	84 c0                	test   al,al
10001d90:	74 2d                	je     10001dbf <FloppyDrive::doTrack(int, bool, unsigned char*)+0x519>
10001d92:	83 ec 0c             	sub    esp,0xc
10001d95:	68 96 26 00 10       	push   0x10002696	10001d96: R_386_32	.text
10001d9a:	e8 fc ff ff ff       	call   10001d9b <FloppyDrive::doTrack(int, bool, unsigned char*)+0x4f5>	10001d9b: R_386_PC32	Dbg::kprintf(char const*, ...)
10001d9f:	83 c4 10             	add    esp,0x10
10001da2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001da5:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001dab:	83 ec 0c             	sub    esp,0xc
10001dae:	50                   	push   eax
10001daf:	e8 fc ff ff ff       	call   10001db0 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x50a>	10001db0: R_386_PC32	Floppy::reset()
10001db4:	83 c4 10             	add    esp,0x10
10001db7:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10001dba:	e9 25 fb ff ff       	jmp    100018e4 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x3e>
10001dbf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001dc2:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001dc8:	83 ec 0c             	sub    esp,0xc
10001dcb:	50                   	push   eax
10001dcc:	e8 fc ff ff ff       	call   10001dcd <FloppyDrive::doTrack(int, bool, unsigned char*)+0x527>	10001dcd: R_386_PC32	Floppy::readData()
10001dd1:	83 c4 10             	add    esp,0x10
10001dd4:	88 45 ed             	mov    BYTE PTR [ebp-0x13],al
10001dd7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001dda:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001de0:	83 ec 0c             	sub    esp,0xc
10001de3:	50                   	push   eax
10001de4:	e8 fc ff ff ff       	call   10001de5 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x53f>	10001de5: R_386_PC32	Floppy::wasFailure()
10001de9:	83 c4 10             	add    esp,0x10
10001dec:	84 c0                	test   al,al
10001dee:	74 2d                	je     10001e1d <FloppyDrive::doTrack(int, bool, unsigned char*)+0x577>
10001df0:	83 ec 0c             	sub    esp,0xc
10001df3:	68 96 26 00 10       	push   0x10002696	10001df4: R_386_32	.text
10001df8:	e8 fc ff ff ff       	call   10001df9 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x553>	10001df9: R_386_PC32	Dbg::kprintf(char const*, ...)
10001dfd:	83 c4 10             	add    esp,0x10
10001e00:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001e03:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001e09:	83 ec 0c             	sub    esp,0xc
10001e0c:	50                   	push   eax
10001e0d:	e8 fc ff ff ff       	call   10001e0e <FloppyDrive::doTrack(int, bool, unsigned char*)+0x568>	10001e0e: R_386_PC32	Floppy::reset()
10001e12:	83 c4 10             	add    esp,0x10
10001e15:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10001e18:	e9 c7 fa ff ff       	jmp    100018e4 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x3e>
10001e1d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001e20:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001e26:	83 ec 0c             	sub    esp,0xc
10001e29:	50                   	push   eax
10001e2a:	e8 fc ff ff ff       	call   10001e2b <FloppyDrive::doTrack(int, bool, unsigned char*)+0x585>	10001e2b: R_386_PC32	Floppy::readData()
10001e2f:	83 c4 10             	add    esp,0x10
10001e32:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
10001e35:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001e38:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001e3e:	83 ec 0c             	sub    esp,0xc
10001e41:	50                   	push   eax
10001e42:	e8 fc ff ff ff       	call   10001e43 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x59d>	10001e43: R_386_PC32	Floppy::wasFailure()
10001e47:	83 c4 10             	add    esp,0x10
10001e4a:	84 c0                	test   al,al
10001e4c:	74 2d                	je     10001e7b <FloppyDrive::doTrack(int, bool, unsigned char*)+0x5d5>
10001e4e:	83 ec 0c             	sub    esp,0xc
10001e51:	68 96 26 00 10       	push   0x10002696	10001e52: R_386_32	.text
10001e56:	e8 fc ff ff ff       	call   10001e57 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x5b1>	10001e57: R_386_PC32	Dbg::kprintf(char const*, ...)
10001e5b:	83 c4 10             	add    esp,0x10
10001e5e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001e61:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001e67:	83 ec 0c             	sub    esp,0xc
10001e6a:	50                   	push   eax
10001e6b:	e8 fc ff ff ff       	call   10001e6c <FloppyDrive::doTrack(int, bool, unsigned char*)+0x5c6>	10001e6c: R_386_PC32	Floppy::reset()
10001e70:	83 c4 10             	add    esp,0x10
10001e73:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10001e76:	e9 69 fa ff ff       	jmp    100018e4 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x3e>
10001e7b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001e7e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001e84:	83 ec 0c             	sub    esp,0xc
10001e87:	50                   	push   eax
10001e88:	e8 fc ff ff ff       	call   10001e89 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x5e3>	10001e89: R_386_PC32	Floppy::readData()
10001e8d:	83 c4 10             	add    esp,0x10
10001e90:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
10001e93:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001e96:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001e9c:	83 ec 0c             	sub    esp,0xc
10001e9f:	50                   	push   eax
10001ea0:	e8 fc ff ff ff       	call   10001ea1 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x5fb>	10001ea1: R_386_PC32	Floppy::wasFailure()
10001ea5:	83 c4 10             	add    esp,0x10
10001ea8:	84 c0                	test   al,al
10001eaa:	74 2d                	je     10001ed9 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x633>
10001eac:	83 ec 0c             	sub    esp,0xc
10001eaf:	68 96 26 00 10       	push   0x10002696	10001eb0: R_386_32	.text
10001eb4:	e8 fc ff ff ff       	call   10001eb5 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x60f>	10001eb5: R_386_PC32	Dbg::kprintf(char const*, ...)
10001eb9:	83 c4 10             	add    esp,0x10
10001ebc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001ebf:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001ec5:	83 ec 0c             	sub    esp,0xc
10001ec8:	50                   	push   eax
10001ec9:	e8 fc ff ff ff       	call   10001eca <FloppyDrive::doTrack(int, bool, unsigned char*)+0x624>	10001eca: R_386_PC32	Floppy::reset()
10001ece:	83 c4 10             	add    esp,0x10
10001ed1:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10001ed4:	e9 0b fa ff ff       	jmp    100018e4 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x3e>
10001ed9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001edc:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001ee2:	83 ec 0c             	sub    esp,0xc
10001ee5:	50                   	push   eax
10001ee6:	e8 fc ff ff ff       	call   10001ee7 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x641>	10001ee7: R_386_PC32	Floppy::readData()
10001eeb:	83 c4 10             	add    esp,0x10
10001eee:	88 45 ea             	mov    BYTE PTR [ebp-0x16],al
10001ef1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001ef4:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001efa:	83 ec 0c             	sub    esp,0xc
10001efd:	50                   	push   eax
10001efe:	e8 fc ff ff ff       	call   10001eff <FloppyDrive::doTrack(int, bool, unsigned char*)+0x659>	10001eff: R_386_PC32	Floppy::wasFailure()
10001f03:	83 c4 10             	add    esp,0x10
10001f06:	84 c0                	test   al,al
10001f08:	74 2d                	je     10001f37 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x691>
10001f0a:	83 ec 0c             	sub    esp,0xc
10001f0d:	68 96 26 00 10       	push   0x10002696	10001f0e: R_386_32	.text
10001f12:	e8 fc ff ff ff       	call   10001f13 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x66d>	10001f13: R_386_PC32	Dbg::kprintf(char const*, ...)
10001f17:	83 c4 10             	add    esp,0x10
10001f1a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001f1d:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001f23:	83 ec 0c             	sub    esp,0xc
10001f26:	50                   	push   eax
10001f27:	e8 fc ff ff ff       	call   10001f28 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x682>	10001f28: R_386_PC32	Floppy::reset()
10001f2c:	83 c4 10             	add    esp,0x10
10001f2f:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10001f32:	e9 ad f9 ff ff       	jmp    100018e4 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x3e>
10001f37:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001f3a:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001f40:	83 ec 0c             	sub    esp,0xc
10001f43:	50                   	push   eax
10001f44:	e8 fc ff ff ff       	call   10001f45 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x69f>	10001f45: R_386_PC32	Floppy::readData()
10001f49:	83 c4 10             	add    esp,0x10
10001f4c:	88 45 e9             	mov    BYTE PTR [ebp-0x17],al
10001f4f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001f52:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001f58:	83 ec 0c             	sub    esp,0xc
10001f5b:	50                   	push   eax
10001f5c:	e8 fc ff ff ff       	call   10001f5d <FloppyDrive::doTrack(int, bool, unsigned char*)+0x6b7>	10001f5d: R_386_PC32	Floppy::wasFailure()
10001f61:	83 c4 10             	add    esp,0x10
10001f64:	84 c0                	test   al,al
10001f66:	74 2d                	je     10001f95 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x6ef>
10001f68:	83 ec 0c             	sub    esp,0xc
10001f6b:	68 96 26 00 10       	push   0x10002696	10001f6c: R_386_32	.text
10001f70:	e8 fc ff ff ff       	call   10001f71 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x6cb>	10001f71: R_386_PC32	Dbg::kprintf(char const*, ...)
10001f75:	83 c4 10             	add    esp,0x10
10001f78:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001f7b:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001f81:	83 ec 0c             	sub    esp,0xc
10001f84:	50                   	push   eax
10001f85:	e8 fc ff ff ff       	call   10001f86 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x6e0>	10001f86: R_386_PC32	Floppy::reset()
10001f8a:	83 c4 10             	add    esp,0x10
10001f8d:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10001f90:	e9 4f f9 ff ff       	jmp    100018e4 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x3e>
10001f95:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001f98:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001f9e:	83 ec 0c             	sub    esp,0xc
10001fa1:	50                   	push   eax
10001fa2:	e8 fc ff ff ff       	call   10001fa3 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x6fd>	10001fa3: R_386_PC32	Floppy::readData()
10001fa7:	83 c4 10             	add    esp,0x10
10001faa:	88 45 e8             	mov    BYTE PTR [ebp-0x18],al
10001fad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001fb0:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001fb6:	83 ec 0c             	sub    esp,0xc
10001fb9:	50                   	push   eax
10001fba:	e8 fc ff ff ff       	call   10001fbb <FloppyDrive::doTrack(int, bool, unsigned char*)+0x715>	10001fbb: R_386_PC32	Floppy::wasFailure()
10001fbf:	83 c4 10             	add    esp,0x10
10001fc2:	84 c0                	test   al,al
10001fc4:	74 2d                	je     10001ff3 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x74d>
10001fc6:	83 ec 0c             	sub    esp,0xc
10001fc9:	68 96 26 00 10       	push   0x10002696	10001fca: R_386_32	.text
10001fce:	e8 fc ff ff ff       	call   10001fcf <FloppyDrive::doTrack(int, bool, unsigned char*)+0x729>	10001fcf: R_386_PC32	Dbg::kprintf(char const*, ...)
10001fd3:	83 c4 10             	add    esp,0x10
10001fd6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001fd9:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001fdf:	83 ec 0c             	sub    esp,0xc
10001fe2:	50                   	push   eax
10001fe3:	e8 fc ff ff ff       	call   10001fe4 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x73e>	10001fe4: R_386_PC32	Floppy::reset()
10001fe8:	83 c4 10             	add    esp,0x10
10001feb:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10001fee:	e9 f1 f8 ff ff       	jmp    100018e4 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x3e>
10001ff3:	83 ec 0c             	sub    esp,0xc
10001ff6:	68 af 26 00 10       	push   0x100026af	10001ff7: R_386_32	.text
10001ffb:	e8 fc ff ff ff       	call   10001ffc <FloppyDrive::doTrack(int, bool, unsigned char*)+0x756>	10001ffc: R_386_PC32	Dbg::kprintf(char const*, ...)
10002000:	83 c4 10             	add    esp,0x10
10002003:	83 ec 0c             	sub    esp,0xc
10002006:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002009:	e8 fc ff ff ff       	call   1000200a <FloppyDrive::doTrack(int, bool, unsigned char*)+0x764>	1000200a: R_386_PC32	FloppyDrive::motorOff()
1000200e:	83 c4 10             	add    esp,0x10
10002011:	83 ec 0c             	sub    esp,0xc
10002014:	68 c3 26 00 10       	push   0x100026c3	10002015: R_386_32	.text
10002019:	e8 fc ff ff ff       	call   1000201a <FloppyDrive::doTrack(int, bool, unsigned char*)+0x774>	1000201a: R_386_PC32	Dbg::kprintf(char const*, ...)
1000201e:	83 c4 10             	add    esp,0x10
10002021:	83 ec 0c             	sub    esp,0xc
10002024:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002027:	e8 fc ff ff ff       	call   10002028 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x782>	10002028: R_386_PC32	FloppyDrive::unselect()
1000202c:	83 c4 10             	add    esp,0x10
1000202f:	83 ec 0c             	sub    esp,0xc
10002032:	68 ce 26 00 10       	push   0x100026ce	10002033: R_386_32	.text
10002037:	e8 fc ff ff ff       	call   10002038 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x792>	10002038: R_386_PC32	Dbg::kprintf(char const*, ...)
1000203c:	83 c4 10             	add    esp,0x10
1000203f:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
10002042:	83 f0 01             	xor    eax,0x1
10002045:	84 c0                	test   al,al
10002047:	74 39                	je     10002082 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x7dc>
10002049:	83 ec 0c             	sub    esp,0xc
1000204c:	68 d9 26 00 10       	push   0x100026d9	1000204d: R_386_32	.text
10002051:	e8 fc ff ff ff       	call   10002052 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x7ac>	10002052: R_386_PC32	Dbg::kprintf(char const*, ...)
10002056:	83 c4 10             	add    esp,0x10
10002059:	a1 00 00 00 00       	mov    eax,ds:0x0	1000205a: R_386_32	_TEMP_dma
1000205e:	83 ec 04             	sub    esp,0x4
10002061:	68 00 48 00 00       	push   0x4800
10002066:	50                   	push   eax
10002067:	ff 75 14             	push   DWORD PTR [ebp+0x14]
1000206a:	e8 fc ff ff ff       	call   1000206b <FloppyDrive::doTrack(int, bool, unsigned char*)+0x7c5>	1000206b: R_386_PC32	memcpy
1000206f:	83 c4 10             	add    esp,0x10
10002072:	83 ec 0c             	sub    esp,0xc
10002075:	68 eb 26 00 10       	push   0x100026eb	10002076: R_386_32	.text
1000207a:	e8 fc ff ff ff       	call   1000207b <FloppyDrive::doTrack(int, bool, unsigned char*)+0x7d5>	1000207b: R_386_PC32	Dbg::kprintf(char const*, ...)
1000207f:	83 c4 10             	add    esp,0x10
10002082:	b8 00 00 00 00       	mov    eax,0x0
10002087:	c9                   	leave  
10002088:	c3                   	ret    
10002089:	90                   	nop

1000208a <FloppyDrive::lbaToCHS(unsigned int, int*, int*, int*)>:
1000208a:	55                   	push   ebp
1000208b:	89 e5                	mov    ebp,esp
1000208d:	83 ec 10             	sub    esp,0x10
10002090:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002093:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10002099:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
1000209c:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
100020a2:	83 c2 64             	add    edx,0x64
100020a5:	8b 14 90             	mov    edx,DWORD PTR [eax+edx*4]
100020a8:	89 d0                	mov    eax,edx
100020aa:	c1 e0 02             	shl    eax,0x2
100020ad:	01 d0                	add    eax,edx
100020af:	c1 e0 02             	shl    eax,0x2
100020b2:	01 d0                	add    eax,edx
100020b4:	05 13 00 00 00       	add    eax,0x13	100020b5: R_386_32	floppyTable
100020b9:	8a 00                	mov    al,BYTE PTR [eax]
100020bb:	0f b6 c0             	movzx  eax,al
100020be:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
100020c1:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100020c4:	01 c0                	add    eax,eax
100020c6:	89 c1                	mov    ecx,eax
100020c8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100020cb:	ba 00 00 00 00       	mov    edx,0x0
100020d0:	f7 f1                	div    ecx
100020d2:	89 c2                	mov    edx,eax
100020d4:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
100020d7:	89 10                	mov    DWORD PTR [eax],edx
100020d9:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100020dc:	01 c0                	add    eax,eax
100020de:	89 c1                	mov    ecx,eax
100020e0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100020e3:	ba 00 00 00 00       	mov    edx,0x0
100020e8:	f7 f1                	div    ecx
100020ea:	89 d0                	mov    eax,edx
100020ec:	8b 4d fc             	mov    ecx,DWORD PTR [ebp-0x4]
100020ef:	ba 00 00 00 00       	mov    edx,0x0
100020f4:	f7 f1                	div    ecx
100020f6:	89 c2                	mov    edx,eax
100020f8:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
100020fb:	89 10                	mov    DWORD PTR [eax],edx
100020fd:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10002100:	01 c0                	add    eax,eax
10002102:	89 c1                	mov    ecx,eax
10002104:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10002107:	ba 00 00 00 00       	mov    edx,0x0
1000210c:	f7 f1                	div    ecx
1000210e:	89 d0                	mov    eax,edx
10002110:	8b 4d fc             	mov    ecx,DWORD PTR [ebp-0x4]
10002113:	ba 00 00 00 00       	mov    edx,0x0
10002118:	f7 f1                	div    ecx
1000211a:	89 d0                	mov    eax,edx
1000211c:	40                   	inc    eax
1000211d:	89 c2                	mov    edx,eax
1000211f:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
10002122:	89 10                	mov    DWORD PTR [eax],edx
10002124:	90                   	nop
10002125:	c9                   	leave  
10002126:	c3                   	ret    
10002127:	90                   	nop

10002128 <FloppyDrive::read(unsigned long long, int, void*)>:
10002128:	55                   	push   ebp
10002129:	89 e5                	mov    ebp,esp
1000212b:	83 ec 28             	sub    esp,0x28
1000212e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10002131:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
10002134:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
10002137:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
1000213a:	83 ec 0c             	sub    esp,0xc
1000213d:	68 f9 26 00 10       	push   0x100026f9	1000213e: R_386_32	.text
10002142:	e8 fc ff ff ff       	call   10002143 <FloppyDrive::read(unsigned long long, int, void*)+0x1b>	10002143: R_386_PC32	Dbg::kprintf(char const*, ...)
10002147:	83 c4 10             	add    esp,0x10
1000214a:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
1000214d:	83 ec 0c             	sub    esp,0xc
10002150:	8d 55 ec             	lea    edx,[ebp-0x14]
10002153:	52                   	push   edx
10002154:	8d 55 f0             	lea    edx,[ebp-0x10]
10002157:	52                   	push   edx
10002158:	8d 55 f4             	lea    edx,[ebp-0xc]
1000215b:	52                   	push   edx
1000215c:	50                   	push   eax
1000215d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002160:	e8 fc ff ff ff       	call   10002161 <FloppyDrive::read(unsigned long long, int, void*)+0x39>	10002161: R_386_PC32	FloppyDrive::lbaToCHS(unsigned int, int*, int*, int*)
10002165:	83 c4 20             	add    esp,0x20
10002168:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
1000216b:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
1000216e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10002171:	51                   	push   ecx
10002172:	52                   	push   edx
10002173:	50                   	push   eax
10002174:	68 14 27 00 10       	push   0x10002714	10002175: R_386_32	.text
10002179:	e8 fc ff ff ff       	call   1000217a <FloppyDrive::read(unsigned long long, int, void*)+0x52>	1000217a: R_386_PC32	Dbg::kprintf(char const*, ...)
1000217e:	83 c4 10             	add    esp,0x10
10002181:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10002184:	68 00 00 00 00       	push   0x0	10002185: R_386_32	_TEMP_trackBuffer
10002189:	6a 00                	push   0x0
1000218b:	50                   	push   eax
1000218c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000218f:	e8 fc ff ff ff       	call   10002190 <FloppyDrive::read(unsigned long long, int, void*)+0x68>	10002190: R_386_PC32	FloppyDrive::doTrack(int, bool, unsigned char*)
10002194:	83 c4 10             	add    esp,0x10
10002197:	83 ec 0c             	sub    esp,0xc
1000219a:	68 2c 27 00 10       	push   0x1000272c	1000219b: R_386_32	.text
1000219f:	e8 fc ff ff ff       	call   100021a0 <FloppyDrive::read(unsigned long long, int, void*)+0x78>	100021a0: R_386_PC32	Dbg::kprintf(char const*, ...)
100021a4:	83 c4 10             	add    esp,0x10
100021a7:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
100021aa:	48                   	dec    eax
100021ab:	c1 e0 09             	shl    eax,0x9
100021ae:	05 00 00 00 00       	add    eax,0x0	100021af: R_386_32	_TEMP_trackBuffer
100021b3:	83 ec 04             	sub    esp,0x4
100021b6:	68 00 02 00 00       	push   0x200
100021bb:	50                   	push   eax
100021bc:	ff 75 18             	push   DWORD PTR [ebp+0x18]
100021bf:	e8 fc ff ff ff       	call   100021c0 <FloppyDrive::read(unsigned long long, int, void*)+0x98>	100021c0: R_386_PC32	memcpy
100021c4:	83 c4 10             	add    esp,0x10
100021c7:	83 ec 0c             	sub    esp,0xc
100021ca:	68 38 27 00 10       	push   0x10002738	100021cb: R_386_32	.text
100021cf:	e8 fc ff ff ff       	call   100021d0 <FloppyDrive::read(unsigned long long, int, void*)+0xa8>	100021d0: R_386_PC32	Dbg::kprintf(char const*, ...)
100021d4:	83 c4 10             	add    esp,0x10
100021d7:	b8 00 00 00 00       	mov    eax,0x0
100021dc:	c9                   	leave  
100021dd:	c3                   	ret    

100021de <FloppyDrive::write(unsigned long long, int, void*)>:
100021de:	55                   	push   ebp
100021df:	89 e5                	mov    ebp,esp
100021e1:	83 ec 08             	sub    esp,0x8
100021e4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100021e7:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
100021ea:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
100021ed:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
100021f0:	b8 fd ff ff ff       	mov    eax,0xfffffffd
100021f5:	c9                   	leave  
100021f6:	c3                   	ret    
100021f7:	90                   	nop

100021f8 <FloppyDrive::~FloppyDrive()>:
100021f8:	55                   	push   ebp
100021f9:	89 e5                	mov    ebp,esp
100021fb:	83 ec 08             	sub    esp,0x8
100021fe:	ba 08 00 00 00       	mov    edx,0x8	100021ff: R_386_32	vtable for FloppyDrive
10002203:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002206:	89 10                	mov    DWORD PTR [eax],edx
10002208:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000220b:	83 ec 0c             	sub    esp,0xc
1000220e:	50                   	push   eax
1000220f:	e8 fc ff ff ff       	call   10002210 <FloppyDrive::~FloppyDrive()+0x18>	10002210: R_386_PC32	PhysicalDisk::~PhysicalDisk()
10002214:	83 c4 10             	add    esp,0x10
10002217:	90                   	nop
10002218:	c9                   	leave  
10002219:	c3                   	ret    

1000221a <FloppyDrive::~FloppyDrive()>:
1000221a:	55                   	push   ebp
1000221b:	89 e5                	mov    ebp,esp
1000221d:	83 ec 08             	sub    esp,0x8
10002220:	83 ec 0c             	sub    esp,0xc
10002223:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002226:	e8 fc ff ff ff       	call   10002227 <FloppyDrive::~FloppyDrive()+0xd>	10002227: R_386_PC32	FloppyDrive::~FloppyDrive()
1000222b:	83 c4 10             	add    esp,0x10
1000222e:	83 ec 08             	sub    esp,0x8
10002231:	68 74 01 00 00       	push   0x174
10002236:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002239:	e8 fc ff ff ff       	call   1000223a <FloppyDrive::~FloppyDrive()+0x20>	1000223a: R_386_PC32	operator delete(void*, unsigned long)
1000223e:	83 c4 10             	add    esp,0x10
10002241:	c9                   	leave  
10002242:	c3                   	ret    
10002243:	90                   	nop

10002244 <Floppy::~Floppy()>:
10002244:	55                   	push   ebp
10002245:	89 e5                	mov    ebp,esp
10002247:	83 ec 08             	sub    esp,0x8
1000224a:	ba 08 00 00 00       	mov    edx,0x8	1000224b: R_386_32	vtable for Floppy
1000224f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002252:	89 10                	mov    DWORD PTR [eax],edx
10002254:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002257:	83 ec 0c             	sub    esp,0xc
1000225a:	50                   	push   eax
1000225b:	e8 fc ff ff ff       	call   1000225c <Floppy::~Floppy()+0x18>	1000225c: R_386_PC32	HardDiskController::~HardDiskController()
10002260:	83 c4 10             	add    esp,0x10
10002263:	90                   	nop
10002264:	c9                   	leave  
10002265:	c3                   	ret    

10002266 <Floppy::~Floppy()>:
10002266:	55                   	push   ebp
10002267:	89 e5                	mov    ebp,esp
10002269:	83 ec 08             	sub    esp,0x8
1000226c:	83 ec 0c             	sub    esp,0xc
1000226f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002272:	e8 fc ff ff ff       	call   10002273 <Floppy::~Floppy()+0xd>	10002273: R_386_PC32	Floppy::~Floppy()
10002277:	83 c4 10             	add    esp,0x10
1000227a:	83 ec 08             	sub    esp,0x8
1000227d:	68 b0 01 00 00       	push   0x1b0
10002282:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002285:	e8 fc ff ff ff       	call   10002286 <Floppy::~Floppy()+0x20>	10002286: R_386_PC32	operator delete(void*, unsigned long)
1000228a:	83 c4 10             	add    esp,0x10
1000228d:	c9                   	leave  
1000228e:	c3                   	ret    
1000228f:	90                   	nop
10002290:	96                   	xchg   esi,eax
10002291:	00 00                	add    BYTE PTR [eax],al
10002293:	00 2c 01             	add    BYTE PTR [ecx+eax*1],ch
10002296:	00 00                	add    BYTE PTR [eax],al
10002298:	46                   	inc    esi
10002299:	6c                   	ins    BYTE PTR es:[edi],dx
1000229a:	6f                   	outs   dx,DWORD PTR ds:[esi]
1000229b:	70 70                	jo     1000230d <Floppy::~Floppy()+0xa7>
1000229d:	79 20                	jns    100022bf <Floppy::~Floppy()+0x59>
1000229f:	44                   	inc    esp
100022a0:	69 73 6b 20 43 6f 6e 	imul   esi,DWORD PTR [ebx+0x6b],0x6e6f4320
100022a7:	74 72                	je     1000231b <Floppy::~Floppy()+0xb5>
100022a9:	6f                   	outs   dx,DWORD PTR ds:[esi]
100022aa:	6c                   	ins    BYTE PTR es:[edi],dx
100022ab:	6c                   	ins    BYTE PTR es:[edi],dx
100022ac:	65 72 00             	gs jb  100022af <Floppy::~Floppy()+0x49>
100022af:	00 50 52             	add    BYTE PTR [eax+0x52],dl
100022b2:	45                   	inc    ebp
100022b3:	56                   	push   esi
100022b4:	49                   	dec    ecx
100022b5:	4f                   	dec    edi
100022b6:	55                   	push   ebp
100022b7:	53                   	push   ebx
100022b8:	20 43 4f             	and    BYTE PTR [ebx+0x4f],al
100022bb:	4d                   	dec    ebp
100022bc:	4d                   	dec    ebp
100022bd:	41                   	inc    ecx
100022be:	4e                   	dec    esi
100022bf:	44                   	inc    esp
100022c0:	20 46 41             	and    BYTE PTR [esi+0x41],al
100022c3:	49                   	dec    ecx
100022c4:	4c                   	dec    esp
100022c5:	45                   	inc    ebp
100022c6:	44                   	inc    esp
100022c7:	2c 20                	sub    al,0x20
100022c9:	43                   	inc    ebx
100022ca:	41                   	inc    ecx
100022cb:	55                   	push   ebp
100022cc:	47                   	inc    edi
100022cd:	48                   	dec    eax
100022ce:	54                   	push   esp
100022cf:	20 42 59             	and    BYTE PTR [edx+0x59],al
100022d2:	20 77 72             	and    BYTE PTR [edi+0x72],dh
100022d5:	69 74 65 43 6f 6d 6d 61 	imul   esi,DWORD PTR [ebp+eiz*2+0x43],0x616d6d6f
100022dd:	6e                   	outs   dx,BYTE PTR ds:[esi]
100022de:	64 00 44 49 44       	add    BYTE PTR fs:[ecx+ecx*2+0x44],al
100022e3:	20 4e 4f             	and    BYTE PTR [esi+0x4f],cl
100022e6:	54                   	push   esp
100022e7:	20 43 48             	and    BYTE PTR [ebx+0x48],al
100022ea:	45                   	inc    ebp
100022eb:	43                   	inc    ebx
100022ec:	4b                   	dec    ebx
100022ed:	20 46 4f             	and    BYTE PTR [esi+0x4f],al
100022f0:	52                   	push   edx
100022f1:	20 46 41             	and    BYTE PTR [esi+0x41],al
100022f4:	49                   	dec    ecx
100022f5:	4c                   	dec    esp
100022f6:	55                   	push   ebp
100022f7:	52                   	push   edx
100022f8:	45                   	inc    ebp
100022f9:	20 42 45             	and    BYTE PTR [edx+0x45],al
100022fc:	46                   	inc    esi
100022fd:	4f                   	dec    edi
100022fe:	52                   	push   edx
100022ff:	45                   	inc    ebp
10002300:	20 77 72             	and    BYTE PTR [edi+0x72],dh
10002303:	69 74 65 43 6f 6d 6d 61 	imul   esi,DWORD PTR [ebp+eiz*2+0x43],0x616d6d6f
1000230b:	6e                   	outs   dx,BYTE PTR ds:[esi]
1000230c:	64 00 46 6c          	add    BYTE PTR fs:[esi+0x6c],al
10002310:	6f                   	outs   dx,DWORD PTR ds:[esi]
10002311:	70 70                	jo     10002383 <Floppy::~Floppy()+0x11d>
10002313:	79 3a                	jns    1000234f <Floppy::~Floppy()+0xe9>
10002315:	3a 64 72 69          	cmp    ah,BYTE PTR [edx+esi*2+0x69]
10002319:	76 65                	jbe    10002380 <Floppy::~Floppy()+0x11a>
1000231b:	44                   	inc    esp
1000231c:	65 74 65             	gs je  10002384 <Floppy::~Floppy()+0x11e>
1000231f:	63 74 69 6f          	arpl   WORD PTR [ecx+ebp*2+0x6f],si
10002323:	6e                   	outs   dx,BYTE PTR ds:[esi]
10002324:	28 29                	sub    BYTE PTR [ecx],ch
10002326:	0a 00                	or     al,BYTE PTR [eax]
10002328:	44                   	inc    esp
10002329:	72 69                	jb     10002394 <Floppy::~Floppy()+0x12e>
1000232b:	76 65                	jbe    10002392 <Floppy::~Floppy()+0x12c>
1000232d:	20 74 79 70          	and    BYTE PTR [ecx+edi*2+0x70],dh
10002331:	65 20 30             	and    BYTE PTR gs:[eax],dh
10002334:	3a 20                	cmp    ah,BYTE PTR [eax]
10002336:	30 78 25             	xor    BYTE PTR [eax+0x25],bh
10002339:	58                   	pop    eax
1000233a:	0a 00                	or     al,BYTE PTR [eax]
1000233c:	44                   	inc    esp
1000233d:	72 69                	jb     100023a8 <Floppy::~Floppy()+0x142>
1000233f:	76 65                	jbe    100023a6 <Floppy::~Floppy()+0x140>
10002341:	20 74 79 70          	and    BYTE PTR [ecx+edi*2+0x70],dh
10002345:	65 20 31             	and    BYTE PTR gs:[ecx],dh
10002348:	3a 20                	cmp    ah,BYTE PTR [eax]
1000234a:	30 78 25             	xor    BYTE PTR [eax+0x25],bh
1000234d:	58                   	pop    eax
1000234e:	0a 00                	or     al,BYTE PTR [eax]
10002350:	66 6c                	data16 ins BYTE PTR es:[edi],dx
10002352:	6f                   	outs   dx,DWORD PTR ds:[esi]
10002353:	70 70                	jo     100023c5 <Floppy::~Floppy()+0x15f>
10002355:	79 5f                	jns    100023b6 <Floppy::~Floppy()+0x150>
10002357:	64 6d                	fs ins DWORD PTR es:[edi],dx
10002359:	61                   	popa   
1000235a:	5f                   	pop    edi
1000235b:	69 6e 69 74 3a 20 73 	imul   ebp,DWORD PTR [esi+0x69],0x73203a74
10002362:	74 61                	je     100023c5 <Floppy::~Floppy()+0x15f>
10002364:	74 69                	je     100023cf <Floppy::~Floppy()+0x169>
10002366:	63 20                	arpl   WORD PTR [eax],sp
10002368:	62 75 66             	bound  esi,QWORD PTR [ebp+0x66]
1000236b:	66 65 72 20          	data16 gs jb 1000238f <Floppy::~Floppy()+0x129>
1000236f:	70 72                	jo     100023e3 <Floppy::~Floppy()+0x17d>
10002371:	6f                   	outs   dx,DWORD PTR ds:[esi]
10002372:	62 6c 65 6d          	bound  ebp,QWORD PTR [ebp+eiz*2+0x6d]
10002376:	0a 00                	or     al,BYTE PTR [eax]
10002378:	53                   	push   ebx
10002379:	50                   	push   eax
1000237a:	45                   	inc    ebp
1000237b:	43                   	inc    ebx
1000237c:	49                   	dec    ecx
1000237d:	46                   	inc    esi
1000237e:	59                   	pop    ecx
1000237f:	20 42 41             	and    BYTE PTR [edx+0x41],al
10002382:	44                   	inc    esp
10002383:	20 44 41 54          	and    BYTE PTR [ecx+eax*2+0x54],al
10002387:	41                   	inc    ecx
10002388:	52                   	push   edx
10002389:	41                   	inc    ecx
1000238a:	54                   	push   esp
1000238b:	45                   	inc    ebp
1000238c:	00 00                	add    BYTE PTR [eax],al
1000238e:	00 00                	add    BYTE PTR [eax],al
10002390:	20 a1 07 00 e0 93    	and    BYTE PTR [ecx-0x6c1ffff9],ah
10002396:	04 00                	add    al,0x0
10002398:	90                   	nop
10002399:	d0 03                	rol    BYTE PTR [ebx],1
1000239b:	00 40 42             	add    BYTE PTR [eax+0x42],al
1000239e:	0f 00                	(bad)  
100023a0:	73 65                	jae    10002407 <Floppy::~Floppy()+0x1a1>
100023a2:	6c                   	ins    BYTE PTR es:[edi],dx
100023a3:	65 63 74 20 28       	arpl   WORD PTR gs:[eax+eiz*1+0x28],si
100023a8:	41                   	inc    ecx
100023a9:	29 2e                	sub    DWORD PTR [esi],ebp
100023ab:	0a 00                	or     al,BYTE PTR [eax]
100023ad:	73 65                	jae    10002414 <Floppy::~Floppy()+0x1ae>
100023af:	6c                   	ins    BYTE PTR es:[edi],dx
100023b0:	65 63 74 20 28       	arpl   WORD PTR gs:[eax+eiz*1+0x28],si
100023b5:	42                   	inc    edx
100023b6:	29 2e                	sub    DWORD PTR [esi],ebp
100023b8:	0a 00                	or     al,BYTE PTR [eax]
100023ba:	73 65                	jae    10002421 <Floppy::~Floppy()+0x1bb>
100023bc:	6c                   	ins    BYTE PTR es:[edi],dx
100023bd:	65 63 74 20 28       	arpl   WORD PTR gs:[eax+eiz*1+0x28],si
100023c2:	43                   	inc    ebx
100023c3:	29 2e                	sub    DWORD PTR [esi],ebp
100023c5:	0a 00                	or     al,BYTE PTR [eax]
100023c7:	73 65                	jae    1000242e <Floppy::~Floppy()+0x1c8>
100023c9:	6c                   	ins    BYTE PTR es:[edi],dx
100023ca:	65 63 74 20 28       	arpl   WORD PTR gs:[eax+eiz*1+0x28],si
100023cf:	44                   	inc    esp
100023d0:	29 2e                	sub    DWORD PTR [esi],ebp
100023d2:	0a 00                	or     al,BYTE PTR [eax]
100023d4:	55                   	push   ebp
100023d5:	4e                   	dec    esi
100023d6:	53                   	push   ebx
100023d7:	55                   	push   ebp
100023d8:	50                   	push   eax
100023d9:	50                   	push   eax
100023da:	4f                   	dec    edi
100023db:	52                   	push   edx
100023dc:	54                   	push   esp
100023dd:	45                   	inc    ebp
100023de:	44                   	inc    esp
100023df:	20 46 4c             	and    BYTE PTR [esi+0x4c],al
100023e2:	4f                   	dec    edi
100023e3:	50                   	push   eax
100023e4:	50                   	push   eax
100023e5:	59                   	pop    ecx
100023e6:	20 46 4f             	and    BYTE PTR [esi+0x4f],al
100023e9:	52                   	push   edx
100023ea:	4d                   	dec    ebp
100023eb:	41                   	inc    ecx
100023ec:	54                   	push   esp
100023ed:	20 28                	and    BYTE PTR [eax],ch
100023ef:	44                   	inc    esp
100023f0:	41                   	inc    ecx
100023f1:	54                   	push   esp
100023f2:	41                   	inc    ecx
100023f3:	52                   	push   edx
100023f4:	41                   	inc    ecx
100023f5:	54                   	push   esp
100023f6:	45                   	inc    ebp
100023f7:	20 4e 4f             	and    BYTE PTR [esi+0x4f],cl
100023fa:	54                   	push   esp
100023fb:	20 4b 4e             	and    BYTE PTR [ebx+0x4e],cl
100023fe:	4f                   	dec    edi
100023ff:	57                   	push   edi
10002400:	4e                   	dec    esi
10002401:	29 00                	sub    DWORD PTR [eax],eax
10002403:	73 65                	jae    1000246a <Floppy::~Floppy()+0x204>
10002405:	6c                   	ins    BYTE PTR es:[edi],dx
10002406:	65 63 74 20 28       	arpl   WORD PTR gs:[eax+eiz*1+0x28],si
1000240b:	45                   	inc    ebp
1000240c:	29 2e                	sub    DWORD PTR [esi],ebp
1000240e:	0a 00                	or     al,BYTE PTR [eax]
10002410:	73 70                	jae    10002482 <Floppy::~Floppy()+0x21c>
10002412:	65 63 69 66          	arpl   WORD PTR gs:[ecx+0x66],bp
10002416:	69 79 20 72 65 73 65 	imul   edi,DWORD PTR [ecx+0x20],0x65736572
1000241d:	74 2e                	je     1000244d <Floppy::~Floppy()+0x1e7>
1000241f:	0a 00                	or     al,BYTE PTR [eax]
10002421:	73 65                	jae    10002488 <Floppy::~Floppy()+0x222>
10002423:	6c                   	ins    BYTE PTR es:[edi],dx
10002424:	65 63 74 20 28       	arpl   WORD PTR gs:[eax+eiz*1+0x28],si
10002429:	46                   	inc    esi
1000242a:	29 2e                	sub    DWORD PTR [esi],ebp
1000242c:	0a 00                	or     al,BYTE PTR [eax]
1000242e:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
10002431:	69 62 72 61 74 65 20 	imul   esp,DWORD PTR [edx+0x72],0x20657461
10002438:	72 65                	jb     1000249f <Floppy::~Floppy()+0x239>
1000243a:	73 65                	jae    100024a1 <Floppy::~Floppy()+0x23b>
1000243c:	74 2e                	je     1000246c <Floppy::~Floppy()+0x206>
1000243e:	0a 00                	or     al,BYTE PTR [eax]
10002440:	73 65                	jae    100024a7 <Floppy::~Floppy()+0x241>
10002442:	6c                   	ins    BYTE PTR es:[edi],dx
10002443:	65 63 74 20 28       	arpl   WORD PTR gs:[eax+eiz*1+0x28],si
10002448:	47                   	inc    edi
10002449:	29 2e                	sub    DWORD PTR [esi],ebp
1000244b:	0a 00                	or     al,BYTE PTR [eax]
1000244d:	73 65                	jae    100024b4 <Floppy::~Floppy()+0x24e>
1000244f:	6c                   	ins    BYTE PTR es:[edi],dx
10002450:	65 63 74 20 28       	arpl   WORD PTR gs:[eax+eiz*1+0x28],si
10002455:	48                   	dec    eax
10002456:	29 2e                	sub    DWORD PTR [esi],ebp
10002458:	0a 00                	or     al,BYTE PTR [eax]
1000245a:	73 65                	jae    100024c1 <Floppy::~Floppy()+0x25b>
1000245c:	6c                   	ins    BYTE PTR es:[edi],dx
1000245d:	65 63 74 20 28       	arpl   WORD PTR gs:[eax+eiz*1+0x28],si
10002462:	49                   	dec    ecx
10002463:	29 2e                	sub    DWORD PTR [esi],ebp
10002465:	0a 00                	or     al,BYTE PTR [eax]
10002467:	46                   	inc    esi
10002468:	6c                   	ins    BYTE PTR es:[edi],dx
10002469:	6f                   	outs   dx,DWORD PTR ds:[esi]
1000246a:	70 70                	jo     100024dc <Floppy::~Floppy()+0x276>
1000246c:	79 20                	jns    1000248e <Floppy::~Floppy()+0x228>
1000246e:	44                   	inc    esp
1000246f:	69 73 6b 20 44 72 69 	imul   esi,DWORD PTR [ebx+0x6b],0x69724420
10002476:	76 65                	jbe    100024dd <Floppy::~Floppy()+0x277>
10002478:	00 73 69             	add    BYTE PTR [ebx+0x69],dh
1000247b:	7a 65                	jp     100024e2 <Floppy::~Floppy()+0x27c>
1000247d:	20 69 6e             	and    BYTE PTR [ecx+0x6e],ch
10002480:	20 4b 42             	and    BYTE PTR [ebx+0x42],cl
10002483:	73 20                	jae    100024a5 <Floppy::~Floppy()+0x23f>
10002485:	3d 20 25 64 0a       	cmp    eax,0xa642520
1000248a:	00 46 6c             	add    BYTE PTR [esi+0x6c],al
1000248d:	6f                   	outs   dx,DWORD PTR ds:[esi]
1000248e:	70 70                	jo     10002500 <Floppy::~Floppy()+0x29a>
10002490:	79 44                	jns    100024d6 <Floppy::~Floppy()+0x270>
10002492:	72 69                	jb     100024fd <Floppy::~Floppy()+0x297>
10002494:	76 65                	jbe    100024fb <Floppy::~Floppy()+0x295>
10002496:	3a 3a                	cmp    bh,BYTE PTR [edx]
10002498:	5f                   	pop    edi
10002499:	6f                   	outs   dx,DWORD PTR ds:[esi]
1000249a:	70 65                	jo     10002501 <Floppy::~Floppy()+0x29b>
1000249c:	6e                   	outs   dx,BYTE PTR ds:[esi]
1000249d:	20 31                	and    BYTE PTR [ecx],dh
1000249f:	0a 00                	or     al,BYTE PTR [eax]
100024a1:	46                   	inc    esi
100024a2:	6c                   	ins    BYTE PTR es:[edi],dx
100024a3:	6f                   	outs   dx,DWORD PTR ds:[esi]
100024a4:	70 70                	jo     10002516 <Floppy::~Floppy()+0x2b0>
100024a6:	79 44                	jns    100024ec <Floppy::~Floppy()+0x286>
100024a8:	72 69                	jb     10002513 <Floppy::~Floppy()+0x2ad>
100024aa:	76 65                	jbe    10002511 <Floppy::~Floppy()+0x2ab>
100024ac:	3a 3a                	cmp    bh,BYTE PTR [edx]
100024ae:	5f                   	pop    edi
100024af:	6f                   	outs   dx,DWORD PTR ds:[esi]
100024b0:	70 65                	jo     10002517 <Floppy::~Floppy()+0x2b1>
100024b2:	6e                   	outs   dx,BYTE PTR ds:[esi]
100024b3:	20 32                	and    BYTE PTR [edx],dh
100024b5:	0a 00                	or     al,BYTE PTR [eax]
100024b7:	46                   	inc    esi
100024b8:	6c                   	ins    BYTE PTR es:[edi],dx
100024b9:	6f                   	outs   dx,DWORD PTR ds:[esi]
100024ba:	70 70                	jo     1000252c <Floppy::~Floppy()+0x2c6>
100024bc:	79 44                	jns    10002502 <Floppy::~Floppy()+0x29c>
100024be:	72 69                	jb     10002529 <Floppy::~Floppy()+0x2c3>
100024c0:	76 65                	jbe    10002527 <Floppy::~Floppy()+0x2c1>
100024c2:	3a 3a                	cmp    bh,BYTE PTR [edx]
100024c4:	5f                   	pop    edi
100024c5:	6f                   	outs   dx,DWORD PTR ds:[esi]
100024c6:	70 65                	jo     1000252d <Floppy::~Floppy()+0x2c7>
100024c8:	6e                   	outs   dx,BYTE PTR ds:[esi]
100024c9:	20 33                	and    BYTE PTR [ebx],dh
100024cb:	0a 00                	or     al,BYTE PTR [eax]
100024cd:	46                   	inc    esi
100024ce:	6c                   	ins    BYTE PTR es:[edi],dx
100024cf:	6f                   	outs   dx,DWORD PTR ds:[esi]
100024d0:	70 70                	jo     10002542 <Floppy::~Floppy()+0x2dc>
100024d2:	79 44                	jns    10002518 <Floppy::~Floppy()+0x2b2>
100024d4:	72 69                	jb     1000253f <Floppy::~Floppy()+0x2d9>
100024d6:	76 65                	jbe    1000253d <Floppy::~Floppy()+0x2d7>
100024d8:	3a 3a                	cmp    bh,BYTE PTR [edx]
100024da:	73 65                	jae    10002541 <Floppy::~Floppy()+0x2db>
100024dc:	6c                   	ins    BYTE PTR es:[edi],dx
100024dd:	65 63 74 0a 00       	arpl   WORD PTR gs:[edx+ecx*1+0x0],si
100024e2:	00 00                	add    BYTE PTR [eax],al
100024e4:	73 65                	jae    1000254b <Floppy::~Floppy()+0x2e5>
100024e6:	6c                   	ins    BYTE PTR es:[edi],dx
100024e7:	65 63 74 69 6f       	arpl   WORD PTR gs:[ecx+ebp*2+0x6f],si
100024ec:	6e                   	outs   dx,BYTE PTR ds:[esi]
100024ed:	20 6c 6f 63          	and    BYTE PTR [edi+ebp*2+0x63],ch
100024f1:	6b 65 64 20          	imul   esp,DWORD PTR [ebp+0x64],0x20
100024f5:	6f                   	outs   dx,DWORD PTR ds:[esi]
100024f6:	72 20                	jb     10002518 <Floppy::~Floppy()+0x2b2>
100024f8:	66 61                	popaw  
100024fa:	69 6c 65 64 2e 2e 2e 0a 	imul   ebp,DWORD PTR [ebp+eiz*2+0x64],0xa2e2e2e
10002502:	00 00                	add    BYTE PTR [eax],al
10002504:	73 65                	jae    1000256b <Floppy::~Floppy()+0x305>
10002506:	65 6b 3a 20          	imul   edi,DWORD PTR gs:[edx],0x20
1000250a:	35 20 72 65 74       	xor    eax,0x74657220
1000250f:	72 69                	jb     1000257a <Floppy::~Floppy()+0x314>
10002511:	65 73 2c             	gs jae 10002540 <Floppy::~Floppy()+0x2da>
10002514:	20 63 6f             	and    BYTE PTR [ebx+0x6f],ah
10002517:	75 6c                	jne    10002585 <Floppy::~Floppy()+0x31f>
10002519:	64 20 6e 6f          	and    BYTE PTR fs:[esi+0x6f],ch
1000251d:	74 20                	je     1000253f <Floppy::~Floppy()+0x2d9>
1000251f:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
10002522:	69 62 72 61 74 65 2e 	imul   esp,DWORD PTR [edx+0x72],0x2e657461
10002529:	0a 00                	or     al,BYTE PTR [eax]
1000252b:	73 65                	jae    10002592 <Floppy::~Floppy()+0x32c>
1000252d:	65 6b 20 28          	imul   esp,DWORD PTR gs:[eax],0x28
10002531:	73 65                	jae    10002598 <Floppy::~Floppy()+0x332>
10002533:	6c                   	ins    BYTE PTR es:[edi],dx
10002534:	29 2e                	sub    DWORD PTR [esi],ebp
10002536:	0a 00                	or     al,BYTE PTR [eax]
10002538:	73 65                	jae    1000259f <Floppy::~Floppy()+0x339>
1000253a:	65 6b 20 28          	imul   esp,DWORD PTR gs:[eax],0x28
1000253e:	6f                   	outs   dx,DWORD PTR ds:[esi]
1000253f:	6e                   	outs   dx,BYTE PTR ds:[esi]
10002540:	29 2e                	sub    DWORD PTR [esi],ebp
10002542:	0a 00                	or     al,BYTE PTR [eax]
10002544:	73 65                	jae    100025ab <Floppy::~Floppy()+0x345>
10002546:	65 6b 20 28          	imul   esp,DWORD PTR gs:[eax],0x28
1000254a:	31 29                	xor    DWORD PTR [ecx],ebp
1000254c:	2e 0a 00             	or     al,BYTE PTR cs:[eax]
1000254f:	73 65                	jae    100025b6 <Floppy::~Floppy()+0x350>
10002551:	65 6b 20 28          	imul   esp,DWORD PTR gs:[eax],0x28
10002555:	61                   	popa   
10002556:	61                   	popa   
10002557:	29 2e                	sub    DWORD PTR [esi],ebp
10002559:	0a 00                	or     al,BYTE PTR [eax]
1000255b:	73 65                	jae    100025c2 <Floppy::~Floppy()+0x35c>
1000255d:	65 6b 20 28          	imul   esp,DWORD PTR gs:[eax],0x28
10002561:	62 62 29             	bound  esp,QWORD PTR [edx+0x29]
10002564:	2e 0a 00             	or     al,BYTE PTR cs:[eax]
10002567:	73 65                	jae    100025ce <Floppy::~Floppy()+0x368>
10002569:	65 6b 20 28          	imul   esp,DWORD PTR gs:[eax],0x28
1000256d:	32 29                	xor    ch,BYTE PTR [ecx]
1000256f:	2e 0a 00             	or     al,BYTE PTR cs:[eax]
10002572:	73 65                	jae    100025d9 <Floppy::~Floppy()+0x373>
10002574:	65 6b 20 28          	imul   esp,DWORD PTR gs:[eax],0x28
10002578:	33 29                	xor    ebp,DWORD PTR [ecx]
1000257a:	2e 0a 00             	or     al,BYTE PTR cs:[eax]
1000257d:	73 65                	jae    100025e4 <Floppy::~Floppy()+0x37e>
1000257f:	65 6b 20 28          	imul   esp,DWORD PTR gs:[eax],0x28
10002583:	34 29                	xor    al,0x29
10002585:	2e 0a 00             	or     al,BYTE PTR cs:[eax]
10002588:	73 65                	jae    100025ef <Floppy::~Floppy()+0x389>
1000258a:	65 6b 20 28          	imul   esp,DWORD PTR gs:[eax],0x28
1000258e:	6e                   	outs   dx,BYTE PTR ds:[esi]
1000258f:	69 72 71 29 2e 0a 00 	imul   esi,DWORD PTR [edx+0x71],0xa2e29
10002596:	73 65                	jae    100025fd <Floppy::~Floppy()+0x397>
10002598:	65 6b 20 28          	imul   esp,DWORD PTR gs:[eax],0x28
1000259c:	35 29 2e 0a 00       	xor    eax,0xa2e29
100025a1:	73 65                	jae    10002608 <Floppy::~Floppy()+0x3a2>
100025a3:	65 6b 20 28          	imul   esp,DWORD PTR gs:[eax],0x28
100025a7:	73 69                	jae    10002612 <Floppy::~Floppy()+0x3ac>
100025a9:	64 29 2e             	sub    DWORD PTR fs:[esi],ebp
100025ac:	0a 00                	or     al,BYTE PTR [eax]
100025ae:	73 65                	jae    10002615 <Floppy::~Floppy()+0x3af>
100025b0:	65 6b 20 28          	imul   esp,DWORD PTR gs:[eax],0x28
100025b4:	6f                   	outs   dx,DWORD PTR ds:[esi]
100025b5:	66 66 29 2e          	data16 sub WORD PTR [esi],bp
100025b9:	0a 00                	or     al,BYTE PTR [eax]
100025bb:	73 65                	jae    10002622 <Floppy::~Floppy()+0x3bc>
100025bd:	65 6b 20 28          	imul   esp,DWORD PTR gs:[eax],0x28
100025c1:	75 6e                	jne    10002631 <Floppy::~Floppy()+0x3cb>
100025c3:	29 2e                	sub    DWORD PTR [esi],ebp
100025c5:	0a 00                	or     al,BYTE PTR [eax]
100025c7:	00 63 61             	add    BYTE PTR [ebx+0x61],ah
100025ca:	6c                   	ins    BYTE PTR es:[edi],dx
100025cb:	69 62 72 61 74 65 3a 	imul   esp,DWORD PTR [edx+0x72],0x3a657461
100025d2:	20 35 20 72 65 74    	and    BYTE PTR ds:0x74657220,dh
100025d8:	72 69                	jb     10002643 <Floppy::~Floppy()+0x3dd>
100025da:	65 73 2c             	gs jae 10002609 <Floppy::~Floppy()+0x3a3>
100025dd:	20 63 6f             	and    BYTE PTR [ebx+0x6f],ah
100025e0:	75 6c                	jne    1000264e <Floppy::~Floppy()+0x3e8>
100025e2:	64 20 6e 6f          	and    BYTE PTR fs:[esi+0x6f],ch
100025e6:	74 20                	je     10002608 <Floppy::~Floppy()+0x3a2>
100025e8:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
100025eb:	69 62 72 61 74 65 2e 	imul   esp,DWORD PTR [edx+0x72],0x2e657461
100025f2:	0a 00                	or     al,BYTE PTR [eax]
100025f4:	57                   	push   edi
100025f5:	52                   	push   edx
100025f6:	49                   	dec    ecx
100025f7:	54                   	push   esp
100025f8:	45                   	inc    ebp
100025f9:	3a 20                	cmp    ah,BYTE PTR [eax]
100025fb:	4e                   	dec    esi
100025fc:	45                   	inc    ebp
100025fd:	45                   	inc    ebp
100025fe:	44                   	inc    esp
100025ff:	20 54 4f 20          	and    BYTE PTR [edi+ecx*2+0x20],dl
10002603:	43                   	inc    ebx
10002604:	4f                   	dec    edi
10002605:	50                   	push   eax
10002606:	59                   	pop    ecx
10002607:	20 44 41 54          	and    BYTE PTR [ecx+eax*2+0x54],al
1000260b:	41                   	inc    ecx
1000260c:	20 54 4f 20          	and    BYTE PTR [edi+ecx*2+0x20],dl
10002610:	44                   	inc    esp
10002611:	4d                   	dec    ebp
10002612:	41                   	inc    ecx
10002613:	20 42 55             	and    BYTE PTR [edx+0x55],al
10002616:	46                   	inc    esi
10002617:	46                   	inc    esi
10002618:	45                   	inc    ebp
10002619:	52                   	push   edx
1000261a:	00 20                	add    BYTE PTR [eax],ah
1000261c:	72 65                	jb     10002683 <Floppy::~Floppy()+0x41d>
1000261e:	74 72                	je     10002692 <Floppy::~Floppy()+0x42c>
10002620:	79 3a                	jns    1000265c <Floppy::~Floppy()+0x3f6>
10002622:	20 0a                	and    BYTE PTR [edx],cl
10002624:	00 41 62             	add    BYTE PTR [ecx+0x62],al
10002627:	6f                   	outs   dx,DWORD PTR ds:[esi]
10002628:	75 74                	jne    1000269e <Floppy::~Floppy()+0x438>
1000262a:	20 74 6f 20          	and    BYTE PTR [edi+ebp*2+0x20],dh
1000262e:	73 65                	jae    10002695 <Floppy::~Floppy()+0x42f>
10002630:	65 6b 2e 0a          	imul   ebp,DWORD PTR gs:[esi],0xa
10002634:	00 53 65             	add    BYTE PTR [ebx+0x65],dl
10002637:	65 6b 20 64          	imul   esp,DWORD PTR gs:[eax],0x64
1000263b:	6f                   	outs   dx,DWORD PTR ds:[esi]
1000263c:	6e                   	outs   dx,BYTE PTR ds:[esi]
1000263d:	65 2e 0a 00          	gs or  al,BYTE PTR cs:[eax]
10002641:	4d                   	dec    ebp
10002642:	6f                   	outs   dx,DWORD PTR ds:[esi]
10002643:	74 6f                	je     100026b4 <Floppy::~Floppy()+0x44e>
10002645:	72 20                	jb     10002667 <Floppy::~Floppy()+0x401>
10002647:	6f                   	outs   dx,DWORD PTR ds:[esi]
10002648:	6e                   	outs   dx,BYTE PTR ds:[esi]
10002649:	2e 0a 00             	or     al,BYTE PTR cs:[eax]
1000264c:	53                   	push   ebx
1000264d:	65 6c                	gs ins BYTE PTR es:[edi],dx
1000264f:	65 63 74 65 64       	arpl   WORD PTR gs:[ebp+eiz*2+0x64],si
10002654:	2e 0a 00             	or     al,BYTE PTR cs:[eax]
10002657:	44                   	inc    esp
10002658:	4d                   	dec    ebp
10002659:	41                   	inc    ecx
1000265a:	20 69 6e             	and    BYTE PTR [ecx+0x6e],ch
1000265d:	69 74 27 64 2e 0a 00 73 	imul   esi,DWORD PTR [edi+eiz*1+0x64],0x73000a2e
10002665:	6c                   	ins    BYTE PTR es:[edi],dx
10002666:	65 65 70 20          	gs gs jo 1000268a <Floppy::~Floppy()+0x424>
1000266a:	64 6f                	outs   dx,DWORD PTR fs:[esi]
1000266c:	6e                   	outs   dx,BYTE PTR ds:[esi]
1000266d:	65 0a 00             	or     al,BYTE PTR gs:[eax]
10002670:	61                   	popa   
10002671:	62 6f 75             	bound  ebp,QWORD PTR [edi+0x75]
10002674:	74 20                	je     10002696 <Floppy::~Floppy()+0x430>
10002676:	74 6f                	je     100026e7 <Floppy::~Floppy()+0x481>
10002678:	20 77 61             	and    BYTE PTR [edi+0x61],dh
1000267b:	69 74 49 52 51 2e 0a 00 	imul   esi,DWORD PTR [ecx+ecx*2+0x52],0xa2e51
10002683:	6e                   	outs   dx,BYTE PTR ds:[esi]
10002684:	6f                   	outs   dx,DWORD PTR ds:[esi]
10002685:	20 49 52             	and    BYTE PTR [ecx+0x52],cl
10002688:	51                   	push   ecx
10002689:	2e 0a 00             	or     al,BYTE PTR cs:[eax]
1000268c:	67 6f                	outs   dx,DWORD PTR ds:[si]
1000268e:	74 20                	je     100026b0 <Floppy::~Floppy()+0x44a>
10002690:	49                   	dec    ecx
10002691:	52                   	push   edx
10002692:	51                   	push   ecx
10002693:	2e 0a 00             	or     al,BYTE PTR cs:[eax]
10002696:	66 61                	popaw  
10002698:	69 6c 75 72 65 20 72 65 	imul   ebp,DWORD PTR [ebp+esi*2+0x72],0x65722065
100026a0:	61                   	popa   
100026a1:	64 69 6e 67 20 73 74 61 	imul   ebp,DWORD PTR fs:[esi+0x67],0x61747320
100026a9:	74 75                	je     10002720 <Floppy::~Floppy()+0x4ba>
100026ab:	73 2e                	jae    100026db <Floppy::~Floppy()+0x475>
100026ad:	0a 00                	or     al,BYTE PTR [eax]
100026af:	72 65                	jb     10002716 <Floppy::~Floppy()+0x4b0>
100026b1:	61                   	popa   
100026b2:	64 20 72 65          	and    BYTE PTR fs:[edx+0x65],dh
100026b6:	73 75                	jae    1000272d <Floppy::~Floppy()+0x4c7>
100026b8:	6c                   	ins    BYTE PTR es:[edi],dx
100026b9:	74 20                	je     100026db <Floppy::~Floppy()+0x475>
100026bb:	62 79 74             	bound  edi,QWORD PTR [ecx+0x74]
100026be:	65 73 2e             	gs jae 100026ef <Floppy::~Floppy()+0x489>
100026c1:	0a 00                	or     al,BYTE PTR [eax]
100026c3:	6d                   	ins    DWORD PTR es:[edi],dx
100026c4:	6f                   	outs   dx,DWORD PTR ds:[esi]
100026c5:	74 6f                	je     10002736 <Floppy::~Floppy()+0x4d0>
100026c7:	72 20                	jb     100026e9 <Floppy::~Floppy()+0x483>
100026c9:	6f                   	outs   dx,DWORD PTR ds:[esi]
100026ca:	66 66 0a 00          	data16 data16 or al,BYTE PTR [eax]
100026ce:	75 6e                	jne    1000273e <Floppy::~Floppy()+0x4d8>
100026d0:	73 65                	jae    10002737 <Floppy::~Floppy()+0x4d1>
100026d2:	6c                   	ins    BYTE PTR es:[edi],dx
100026d3:	65 63 74 2e 0a       	arpl   WORD PTR gs:[esi+ebp*1+0xa],si
100026d8:	00 61 62             	add    BYTE PTR [ecx+0x62],ah
100026db:	6f                   	outs   dx,DWORD PTR ds:[esi]
100026dc:	75 74                	jne    10002752 <vtable for FloppyDrive+0xa>
100026de:	20 74 6f 20          	and    BYTE PTR [edi+ebp*2+0x20],dh
100026e2:	6d                   	ins    DWORD PTR es:[edi],dx
100026e3:	65 6d                	gs ins DWORD PTR es:[edi],dx
100026e5:	63 70 79             	arpl   WORD PTR [eax+0x79],si
100026e8:	2e 0a 00             	or     al,BYTE PTR cs:[eax]
100026eb:	64 6f                	outs   dx,DWORD PTR fs:[esi]
100026ed:	6e                   	outs   dx,BYTE PTR ds:[esi]
100026ee:	65 20 6d 65          	and    BYTE PTR gs:[ebp+0x65],ch
100026f2:	6d                   	ins    DWORD PTR es:[edi],dx
100026f3:	63 70 79             	arpl   WORD PTR [eax+0x79],si
100026f6:	2e 0a 00             	or     al,BYTE PTR cs:[eax]
100026f9:	46                   	inc    esi
100026fa:	6c                   	ins    BYTE PTR es:[edi],dx
100026fb:	6f                   	outs   dx,DWORD PTR ds:[esi]
100026fc:	70 70                	jo     1000276e <vtable for FloppyDrive+0x26>
100026fe:	79 44                	jns    10002744 <Floppy::~Floppy()+0x4de>
10002700:	72 69                	jb     1000276b <vtable for FloppyDrive+0x23>
10002702:	76 65                	jbe    10002769 <vtable for FloppyDrive+0x21>
10002704:	3a 3a                	cmp    bh,BYTE PTR [edx]
10002706:	72 65                	jb     1000276d <vtable for FloppyDrive+0x25>
10002708:	61                   	popa   
10002709:	64 20 63 61          	and    BYTE PTR fs:[ebx+0x61],ah
1000270d:	6c                   	ins    BYTE PTR es:[edi],dx
1000270e:	6c                   	ins    BYTE PTR es:[edi],dx
1000270f:	65 64 2e 0a 00       	gs fs or al,BYTE PTR cs:[eax]
10002714:	43                   	inc    ebx
10002715:	20 30                	and    BYTE PTR [eax],dh
10002717:	78 25                	js     1000273e <Floppy::~Floppy()+0x4d8>
10002719:	58                   	pop    eax
1000271a:	2c 20                	sub    al,0x20
1000271c:	48                   	dec    eax
1000271d:	20 30                	and    BYTE PTR [eax],dh
1000271f:	78 25                	js     10002746 <Floppy::~Floppy()+0x4e0>
10002721:	58                   	pop    eax
10002722:	2c 20                	sub    al,0x20
10002724:	53                   	push   ebx
10002725:	20 30                	and    BYTE PTR [eax],dh
10002727:	78 25                	js     1000274e <vtable for FloppyDrive+0x6>
10002729:	58                   	pop    eax
1000272a:	0a 00                	or     al,BYTE PTR [eax]
1000272c:	64 69 64 20 74 72 61 63 6b 	imul   esp,DWORD PTR fs:[eax+eiz*1+0x74],0x6b636172
10002735:	2e 0a 00             	or     al,BYTE PTR cs:[eax]
10002738:	64 69 64 20 6d 65 6d 63 70 	imul   esp,DWORD PTR fs:[eax+eiz*1+0x6d],0x70636d65
10002741:	79 2e                	jns    10002771 <vtable for FloppyDrive+0x29>
10002743:	0a 00                	or     al,BYTE PTR [eax]
10002745:	66 90                	xchg   ax,ax
10002747:	90                   	nop

10002748 <vtable for FloppyDrive>:
	...
	10002750: R_386_32	FloppyDrive::~FloppyDrive()
	10002754: R_386_32	FloppyDrive::~FloppyDrive()
	10002758: R_386_32	FloppyDrive::open(int, int, void*)
	1000275c: R_386_32	FloppyDrive::close(int, int, void*)
	10002760: R_386_32	Device::hibernate()
	10002764: R_386_32	Device::wake()
	10002768: R_386_32	Device::detect()
	1000276c: R_386_32	Device::disableLegacy()
	10002770: R_386_32	Device::powerSaving(PowerSavingLevel)
	10002774: R_386_32	PhysicalDisk::eject()
	10002778: R_386_32	FloppyDrive::read(unsigned long long, int, void*)
	1000277c: R_386_32	FloppyDrive::write(unsigned long long, int, void*)

10002780 <vtable for Floppy>:
	...
	10002788: R_386_32	Floppy::~Floppy()
	1000278c: R_386_32	Floppy::~Floppy()
	10002790: R_386_32	Floppy::open(int, int, void*)
	10002794: R_386_32	Floppy::close(int, int, void*)
	10002798: R_386_32	Device::hibernate()
	1000279c: R_386_32	Device::wake()
	100027a0: R_386_32	Device::detect()
	100027a4: R_386_32	Device::disableLegacy()
	100027a8: R_386_32	Device::powerSaving(PowerSavingLevel)
