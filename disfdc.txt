
packages/system/32/0002/floppy.sys:     file format elf32-i386


Disassembly of section .text:

10000000 <start(Device*)-0x17>:
10000000:	55                   	push   ebp
10000001:	89 e5                	mov    ebp,esp
10000003:	83 ec 08             	sub    esp,0x8
10000006:	83 ec 0c             	sub    esp,0xc
10000009:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000000c:	e8 fc ff ff ff       	call   1000000d <start(Device*)-0xa>	1000000d: R_386_PC32	start(Device*)
10000011:	83 c4 10             	add    esp,0x10
10000014:	90                   	nop
10000015:	c9                   	leave  
10000016:	c3                   	ret    

10000017 <start(Device*)>:
10000017:	55                   	push   ebp
10000018:	89 e5                	mov    ebp,esp
1000001a:	53                   	push   ebx
1000001b:	83 ec 14             	sub    esp,0x14
1000001e:	83 ec 0c             	sub    esp,0xc
10000021:	68 a8 01 00 00       	push   0x1a8
10000026:	e8 fc ff ff ff       	call   10000027 <start(Device*)+0x10>	10000027: R_386_PC32	operator new(unsigned long)
1000002b:	83 c4 10             	add    esp,0x10
1000002e:	89 c3                	mov    ebx,eax
10000030:	83 ec 0c             	sub    esp,0xc
10000033:	53                   	push   ebx
10000034:	e8 fc ff ff ff       	call   10000035 <start(Device*)+0x1e>	10000035: R_386_PC32	Floppy::Floppy()
10000039:	83 c4 10             	add    esp,0x10
1000003c:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
1000003f:	83 ec 08             	sub    esp,0x8
10000042:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10000045:	68 74 0c 00 10       	push   0x10000c74	10000046: R_386_32	.text
1000004a:	e8 fc ff ff ff       	call   1000004b <start(Device*)+0x34>	1000004b: R_386_PC32	Dbg::kprintf(char const*, ...)
1000004f:	83 c4 10             	add    esp,0x10
10000052:	83 ec 08             	sub    esp,0x8
10000055:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10000058:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000005b:	e8 fc ff ff ff       	call   1000005c <start(Device*)+0x45>	1000005c: R_386_PC32	Device::addChild(Device*)
10000060:	83 c4 10             	add    esp,0x10
10000063:	c7 45 ec 25 00 00 00 	mov    DWORD PTR [ebp-0x14],0x25
1000006a:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
10000071:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
10000074:	83 ec 08             	sub    esp,0x8
10000077:	50                   	push   eax
10000078:	68 80 0c 00 10       	push   0x10000c80	10000079: R_386_32	.text
1000007d:	e8 fc ff ff ff       	call   1000007e <start(Device*)+0x67>	1000007e: R_386_PC32	Dbg::kprintf(char const*, ...)
10000082:	83 c4 10             	add    esp,0x10
10000085:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10000088:	8b 00                	mov    eax,DWORD PTR [eax]
1000008a:	83 c0 24             	add    eax,0x24
1000008d:	8b 00                	mov    eax,DWORD PTR [eax]
1000008f:	83 ec 0c             	sub    esp,0xc
10000092:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10000095:	ff d0                	call   eax
10000097:	83 c4 10             	add    esp,0x10
1000009a:	90                   	nop
1000009b:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
1000009e:	c9                   	leave  
1000009f:	c3                   	ret    

100000a0 <floppyMotorFunction(void*)>:
100000a0:	55                   	push   ebp
100000a1:	89 e5                	mov    ebp,esp
100000a3:	83 ec 18             	sub    esp,0x18
100000a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100000a9:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
100000ac:	e8 fc ff ff ff       	call   100000ad <floppyMotorFunction(void*)+0xd>	100000ad: R_386_PC32	unlockScheduler()
100000b1:	83 ec 08             	sub    esp,0x8
100000b4:	6a 00                	push   0x0
100000b6:	68 00 84 d7 17       	push   0x17d78400
100000bb:	e8 fc ff ff ff       	call   100000bc <floppyMotorFunction(void*)+0x1c>	100000bc: R_386_PC32	nanoSleep(unsigned long long)
100000c0:	83 c4 10             	add    esp,0x10
100000c3:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
100000ca:	83 7d f4 03          	cmp    DWORD PTR [ebp-0xc],0x3
100000ce:	7f e1                	jg     100000b1 <floppyMotorFunction(void*)+0x11>
100000d0:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100000d3:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
100000d6:	83 c2 58             	add    edx,0x58
100000d9:	8b 04 90             	mov    eax,DWORD PTR [eax+edx*4]
100000dc:	83 f8 02             	cmp    eax,0x2
100000df:	0f 85 86 00 00 00    	jne    1000016b <floppyMotorFunction(void*)+0xcb>
100000e5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100000e8:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
100000eb:	83 c2 5c             	add    edx,0x5c
100000ee:	8b 04 90             	mov    eax,DWORD PTR [eax+edx*4]
100000f1:	8d 88 70 fe ff ff    	lea    ecx,[eax-0x190]
100000f7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100000fa:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
100000fd:	83 c2 5c             	add    edx,0x5c
10000100:	89 0c 90             	mov    DWORD PTR [eax+edx*4],ecx
10000103:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10000106:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10000109:	83 c2 5c             	add    edx,0x5c
1000010c:	8b 04 90             	mov    eax,DWORD PTR [eax+edx*4]
1000010f:	85 c0                	test   eax,eax
10000111:	7f 58                	jg     1000016b <floppyMotorFunction(void*)+0xcb>
10000113:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10000116:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10000119:	83 c2 58             	add    edx,0x58
1000011c:	c7 04 90 00 00 00 00 	mov    DWORD PTR [eax+edx*4],0x0
10000123:	e8 fc ff ff ff       	call   10000124 <floppyMotorFunction(void*)+0x84>	10000124: R_386_PC32	lockScheduler()
10000128:	83 ec 08             	sub    esp,0x8
1000012b:	6a 02                	push   0x2
1000012d:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000130:	e8 fc ff ff ff       	call   10000131 <floppyMotorFunction(void*)+0x91>	10000131: R_386_PC32	Floppy::readPort(FloppyReg)
10000135:	83 c4 10             	add    esp,0x10
10000138:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
1000013b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
1000013e:	ba 10 00 00 00       	mov    edx,0x10
10000143:	88 c1                	mov    cl,al
10000145:	d3 e2                	shl    edx,cl
10000147:	89 d0                	mov    eax,edx
10000149:	f7 d0                	not    eax
1000014b:	88 c2                	mov    dl,al
1000014d:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
10000150:	21 d0                	and    eax,edx
10000152:	0f b6 c0             	movzx  eax,al
10000155:	83 ec 04             	sub    esp,0x4
10000158:	50                   	push   eax
10000159:	6a 02                	push   0x2
1000015b:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
1000015e:	e8 fc ff ff ff       	call   1000015f <floppyMotorFunction(void*)+0xbf>	1000015f: R_386_PC32	Floppy::writePort(FloppyReg, unsigned char)
10000163:	83 c4 10             	add    esp,0x10
10000166:	e8 fc ff ff ff       	call   10000167 <floppyMotorFunction(void*)+0xc7>	10000167: R_386_PC32	unlockScheduler()
1000016b:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
1000016e:	e9 57 ff ff ff       	jmp    100000ca <floppyMotorFunction(void*)+0x2a>
10000173:	90                   	nop

10000174 <Floppy::Floppy()>:
10000174:	55                   	push   ebp
10000175:	89 e5                	mov    ebp,esp
10000177:	83 ec 08             	sub    esp,0x8
1000017a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000017d:	83 ec 08             	sub    esp,0x8
10000180:	68 86 0c 00 10       	push   0x10000c86	10000181: R_386_32	.text
10000185:	50                   	push   eax
10000186:	e8 fc ff ff ff       	call   10000187 <Floppy::Floppy()+0x13>	10000187: R_386_PC32	HardDiskController::HardDiskController(char const*)
1000018b:	83 c4 10             	add    esp,0x10
1000018e:	ba 08 00 00 00       	mov    edx,0x8	1000018f: R_386_32	vtable for Floppy
10000193:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000196:	89 10                	mov    DWORD PTR [eax],edx
10000198:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000019b:	66 c7 80 58 01 00 00 f0 03 	mov    WORD PTR [eax+0x158],0x3f0
100001a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100001a7:	c6 80 80 01 00 00 01 	mov    BYTE PTR [eax+0x180],0x1
100001ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100001b1:	c6 80 81 01 00 00 00 	mov    BYTE PTR [eax+0x181],0x0
100001b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100001bb:	c6 80 82 01 00 00 00 	mov    BYTE PTR [eax+0x182],0x0
100001c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100001c5:	c6 80 83 01 00 00 00 	mov    BYTE PTR [eax+0x183],0x0
100001cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100001cf:	c6 80 84 01 00 00 01 	mov    BYTE PTR [eax+0x184],0x1
100001d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100001d9:	c6 80 85 01 00 00 01 	mov    BYTE PTR [eax+0x185],0x1
100001e0:	83 ec 0c             	sub    esp,0xc
100001e3:	68 9d 0c 00 10       	push   0x10000c9d	100001e4: R_386_32	.text
100001e8:	e8 fc ff ff ff       	call   100001e9 <Floppy::Floppy()+0x75>	100001e9: R_386_PC32	Dbg::kprintf(char const*, ...)
100001ed:	83 c4 10             	add    esp,0x10
100001f0:	a1 00 00 00 00       	mov    eax,ds:0x0	100001f1: R_386_32	kernelProcess
100001f5:	68 d2 00 00 00       	push   0xd2
100001fa:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100001fd:	68 00 00 00 00       	push   0x0	100001fe: R_386_32	floppyMotorFunction(void*)
10000202:	50                   	push   eax
10000203:	e8 fc ff ff ff       	call   10000204 <Floppy::Floppy()+0x90>	10000204: R_386_PC32	Process::createThread(void (*)(void*), void*, int)
10000208:	83 c4 10             	add    esp,0x10
1000020b:	89 c2                	mov    edx,eax
1000020d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000210:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
10000216:	90                   	nop
10000217:	c9                   	leave  
10000218:	c3                   	ret    
10000219:	90                   	nop

1000021a <Floppy::wasFailure()>:
1000021a:	55                   	push   ebp
1000021b:	89 e5                	mov    ebp,esp
1000021d:	83 ec 10             	sub    esp,0x10
10000220:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000223:	c6 80 83 01 00 00 01 	mov    BYTE PTR [eax+0x183],0x1
1000022a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000022d:	8a 80 82 01 00 00    	mov    al,BYTE PTR [eax+0x182]
10000233:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
10000236:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000239:	c6 80 82 01 00 00 00 	mov    BYTE PTR [eax+0x182],0x0
10000240:	8a 45 ff             	mov    al,BYTE PTR [ebp-0x1]
10000243:	c9                   	leave  
10000244:	c3                   	ret    
10000245:	90                   	nop

10000246 <Floppy::writeCommand(unsigned char)>:
10000246:	55                   	push   ebp
10000247:	89 e5                	mov    ebp,esp
10000249:	83 ec 28             	sub    esp,0x28
1000024c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
1000024f:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
10000252:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000255:	8a 80 82 01 00 00    	mov    al,BYTE PTR [eax+0x182]
1000025b:	84 c0                	test   al,al
1000025d:	74 10                	je     1000026f <Floppy::writeCommand(unsigned char)+0x29>
1000025f:	83 ec 0c             	sub    esp,0xc
10000262:	68 b0 0c 00 10       	push   0x10000cb0	10000263: R_386_32	.text
10000267:	e8 fc ff ff ff       	call   10000268 <Floppy::writeCommand(unsigned char)+0x22>	10000268: R_386_PC32	Krnl::panic(char const*)
1000026c:	83 c4 10             	add    esp,0x10
1000026f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000272:	8a 80 83 01 00 00    	mov    al,BYTE PTR [eax+0x183]
10000278:	83 f0 01             	xor    eax,0x1
1000027b:	84 c0                	test   al,al
1000027d:	74 10                	je     1000028f <Floppy::writeCommand(unsigned char)+0x49>
1000027f:	83 ec 0c             	sub    esp,0xc
10000282:	68 e0 0c 00 10       	push   0x10000ce0	10000283: R_386_32	.text
10000287:	e8 fc ff ff ff       	call   10000288 <Floppy::writeCommand(unsigned char)+0x42>	10000288: R_386_PC32	Krnl::panic(char const*)
1000028c:	83 c4 10             	add    esp,0x10
1000028f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000292:	c6 80 83 01 00 00 00 	mov    BYTE PTR [eax+0x183],0x0
10000299:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000029c:	c6 80 82 01 00 00 00 	mov    BYTE PTR [eax+0x182],0x0
100002a3:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
100002aa:	83 7d f4 31          	cmp    DWORD PTR [ebp-0xc],0x31
100002ae:	7f 53                	jg     10000303 <Floppy::writeCommand(unsigned char)+0xbd>
100002b0:	83 ec 08             	sub    esp,0x8
100002b3:	6a 00                	push   0x0
100002b5:	68 80 96 98 00       	push   0x989680
100002ba:	e8 fc ff ff ff       	call   100002bb <Floppy::writeCommand(unsigned char)+0x75>	100002bb: R_386_PC32	nanoSleep(unsigned long long)
100002bf:	83 c4 10             	add    esp,0x10
100002c2:	83 ec 08             	sub    esp,0x8
100002c5:	6a 04                	push   0x4
100002c7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100002ca:	e8 fc ff ff ff       	call   100002cb <Floppy::writeCommand(unsigned char)+0x85>	100002cb: R_386_PC32	Floppy::readPort(FloppyReg)
100002cf:	83 c4 10             	add    esp,0x10
100002d2:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
100002d5:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
100002d8:	84 c0                	test   al,al
100002da:	79 22                	jns    100002fe <Floppy::writeCommand(unsigned char)+0xb8>
100002dc:	0f b6 45 f3          	movzx  eax,BYTE PTR [ebp-0xd]
100002e0:	83 e0 40             	and    eax,0x40
100002e3:	85 c0                	test   eax,eax
100002e5:	75 17                	jne    100002fe <Floppy::writeCommand(unsigned char)+0xb8>
100002e7:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
100002eb:	83 ec 04             	sub    esp,0x4
100002ee:	50                   	push   eax
100002ef:	6a 05                	push   0x5
100002f1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100002f4:	e8 fc ff ff ff       	call   100002f5 <Floppy::writeCommand(unsigned char)+0xaf>	100002f5: R_386_PC32	Floppy::writePort(FloppyReg, unsigned char)
100002f9:	83 c4 10             	add    esp,0x10
100002fc:	eb 0f                	jmp    1000030d <Floppy::writeCommand(unsigned char)+0xc7>
100002fe:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10000301:	eb a7                	jmp    100002aa <Floppy::writeCommand(unsigned char)+0x64>
10000303:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000306:	c6 80 82 01 00 00 01 	mov    BYTE PTR [eax+0x182],0x1
1000030d:	c9                   	leave  
1000030e:	c3                   	ret    
1000030f:	90                   	nop

10000310 <Floppy::readData()>:
10000310:	55                   	push   ebp
10000311:	89 e5                	mov    ebp,esp
10000313:	83 ec 18             	sub    esp,0x18
10000316:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000319:	8a 80 82 01 00 00    	mov    al,BYTE PTR [eax+0x182]
1000031f:	84 c0                	test   al,al
10000321:	74 10                	je     10000333 <Floppy::readData()+0x23>
10000323:	83 ec 0c             	sub    esp,0xc
10000326:	68 b0 0c 00 10       	push   0x10000cb0	10000327: R_386_32	.text
1000032b:	e8 fc ff ff ff       	call   1000032c <Floppy::readData()+0x1c>	1000032c: R_386_PC32	Krnl::panic(char const*)
10000330:	83 c4 10             	add    esp,0x10
10000333:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000336:	8a 80 83 01 00 00    	mov    al,BYTE PTR [eax+0x183]
1000033c:	83 f0 01             	xor    eax,0x1
1000033f:	84 c0                	test   al,al
10000341:	74 10                	je     10000353 <Floppy::readData()+0x43>
10000343:	83 ec 0c             	sub    esp,0xc
10000346:	68 e0 0c 00 10       	push   0x10000ce0	10000347: R_386_32	.text
1000034b:	e8 fc ff ff ff       	call   1000034c <Floppy::readData()+0x3c>	1000034c: R_386_PC32	Krnl::panic(char const*)
10000350:	83 c4 10             	add    esp,0x10
10000353:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000356:	c6 80 83 01 00 00 00 	mov    BYTE PTR [eax+0x183],0x0
1000035d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000360:	c6 80 82 01 00 00 00 	mov    BYTE PTR [eax+0x182],0x0
10000367:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
1000036e:	83 7d f4 31          	cmp    DWORD PTR [ebp-0xc],0x31
10000372:	7f 4e                	jg     100003c2 <Floppy::readData()+0xb2>
10000374:	83 ec 08             	sub    esp,0x8
10000377:	6a 00                	push   0x0
10000379:	68 80 96 98 00       	push   0x989680
1000037e:	e8 fc ff ff ff       	call   1000037f <Floppy::readData()+0x6f>	1000037f: R_386_PC32	nanoSleep(unsigned long long)
10000383:	83 c4 10             	add    esp,0x10
10000386:	83 ec 08             	sub    esp,0x8
10000389:	6a 04                	push   0x4
1000038b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000038e:	e8 fc ff ff ff       	call   1000038f <Floppy::readData()+0x7f>	1000038f: R_386_PC32	Floppy::readPort(FloppyReg)
10000393:	83 c4 10             	add    esp,0x10
10000396:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
10000399:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
1000039c:	84 c0                	test   al,al
1000039e:	79 1d                	jns    100003bd <Floppy::readData()+0xad>
100003a0:	0f b6 45 f3          	movzx  eax,BYTE PTR [ebp-0xd]
100003a4:	83 e0 40             	and    eax,0x40
100003a7:	85 c0                	test   eax,eax
100003a9:	74 12                	je     100003bd <Floppy::readData()+0xad>
100003ab:	83 ec 08             	sub    esp,0x8
100003ae:	6a 05                	push   0x5
100003b0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100003b3:	e8 fc ff ff ff       	call   100003b4 <Floppy::readData()+0xa4>	100003b4: R_386_PC32	Floppy::readPort(FloppyReg)
100003b8:	83 c4 10             	add    esp,0x10
100003bb:	eb 11                	jmp    100003ce <Floppy::readData()+0xbe>
100003bd:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
100003c0:	eb ac                	jmp    1000036e <Floppy::readData()+0x5e>
100003c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100003c5:	c6 80 82 01 00 00 01 	mov    BYTE PTR [eax+0x182],0x1
100003cc:	b0 00                	mov    al,0x0
100003ce:	c9                   	leave  
100003cf:	c3                   	ret    

100003d0 <Floppy::readPort(FloppyReg)>:
100003d0:	55                   	push   ebp
100003d1:	89 e5                	mov    ebp,esp
100003d3:	83 ec 10             	sub    esp,0x10
100003d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100003d9:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
100003df:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
100003e2:	01 d0                	add    eax,edx
100003e4:	0f b7 c0             	movzx  eax,ax
100003e7:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
100003eb:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
100003ef:	89 c2                	mov    edx,eax
100003f1:	ec                   	in     al,dx
100003f2:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
100003f5:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
100003f8:	90                   	nop
100003f9:	c9                   	leave  
100003fa:	c3                   	ret    
100003fb:	90                   	nop

100003fc <Floppy::writePort(FloppyReg, unsigned char)>:
100003fc:	55                   	push   ebp
100003fd:	89 e5                	mov    ebp,esp
100003ff:	83 ec 14             	sub    esp,0x14
10000402:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
10000405:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
10000408:	0f b6 4d ec          	movzx  ecx,BYTE PTR [ebp-0x14]
1000040c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000040f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
10000415:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10000418:	01 d0                	add    eax,edx
1000041a:	0f b7 c0             	movzx  eax,ax
1000041d:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
10000421:	88 4d fd             	mov    BYTE PTR [ebp-0x3],cl
10000424:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
10000427:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
1000042b:	ee                   	out    dx,al
1000042c:	90                   	nop
1000042d:	c9                   	leave  
1000042e:	c3                   	ret    
1000042f:	90                   	nop

10000430 <Floppy::configure()>:
10000430:	90                   	nop
10000431:	c3                   	ret    

10000432 <Floppy::driveDetection()>:
10000432:	55                   	push   ebp
10000433:	89 e5                	mov    ebp,esp
10000435:	57                   	push   edi
10000436:	56                   	push   esi
10000437:	53                   	push   ebx
10000438:	83 ec 1c             	sub    esp,0x1c
1000043b:	83 ec 0c             	sub    esp,0xc
1000043e:	68 0e 0d 00 10       	push   0x10000d0e	1000043f: R_386_32	.text
10000443:	e8 fc ff ff ff       	call   10000444 <Floppy::driveDetection()+0x12>	10000444: R_386_PC32	Dbg::kprintf(char const*, ...)
10000448:	83 c4 10             	add    esp,0x10
1000044b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000044e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
10000454:	66 3d f0 03          	cmp    ax,0x3f0
10000458:	0f 85 92 00 00 00    	jne    100004f0 <Floppy::driveDetection()+0xbe>
1000045e:	a1 00 00 00 00       	mov    eax,ds:0x0	1000045f: R_386_32	Krnl::computer
10000463:	83 ec 08             	sub    esp,0x8
10000466:	6a 10                	push   0x10
10000468:	50                   	push   eax
10000469:	e8 fc ff ff ff       	call   1000046a <Floppy::driveDetection()+0x38>	1000046a: R_386_PC32	Computer::readCMOS(unsigned char)
1000046e:	83 c4 10             	add    esp,0x10
10000471:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
10000474:	0f b6 45 e7          	movzx  eax,BYTE PTR [ebp-0x19]
10000478:	c1 f8 04             	sar    eax,0x4
1000047b:	89 c2                	mov    edx,eax
1000047d:	83 ec 04             	sub    esp,0x4
10000480:	89 d0                	mov    eax,edx
10000482:	c1 e0 02             	shl    eax,0x2
10000485:	01 d0                	add    eax,edx
10000487:	c1 e0 02             	shl    eax,0x2
1000048a:	01 d0                	add    eax,edx
1000048c:	05 00 00 00 00       	add    eax,0x0	1000048d: R_386_32	floppyTable
10000491:	83 ec 18             	sub    esp,0x18
10000494:	89 e2                	mov    edx,esp
10000496:	89 c3                	mov    ebx,eax
10000498:	b8 15 00 00 00       	mov    eax,0x15
1000049d:	89 d7                	mov    edi,edx
1000049f:	89 de                	mov    esi,ebx
100004a1:	89 c1                	mov    ecx,eax
100004a3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
100004a5:	68 28 0d 00 10       	push   0x10000d28	100004a6: R_386_32	.text
100004aa:	e8 fc ff ff ff       	call   100004ab <Floppy::driveDetection()+0x79>	100004ab: R_386_PC32	Dbg::kprintf(char const*, ...)
100004af:	83 c4 20             	add    esp,0x20
100004b2:	0f b6 45 e7          	movzx  eax,BYTE PTR [ebp-0x19]
100004b6:	83 e0 0f             	and    eax,0xf
100004b9:	89 c2                	mov    edx,eax
100004bb:	83 ec 04             	sub    esp,0x4
100004be:	89 d0                	mov    eax,edx
100004c0:	c1 e0 02             	shl    eax,0x2
100004c3:	01 d0                	add    eax,edx
100004c5:	c1 e0 02             	shl    eax,0x2
100004c8:	01 d0                	add    eax,edx
100004ca:	05 00 00 00 00       	add    eax,0x0	100004cb: R_386_32	floppyTable
100004cf:	83 ec 18             	sub    esp,0x18
100004d2:	89 e2                	mov    edx,esp
100004d4:	89 c3                	mov    ebx,eax
100004d6:	b8 15 00 00 00       	mov    eax,0x15
100004db:	89 d7                	mov    edi,edx
100004dd:	89 de                	mov    esi,ebx
100004df:	89 c1                	mov    ecx,eax
100004e1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
100004e3:	68 3a 0d 00 10       	push   0x10000d3a	100004e4: R_386_32	.text
100004e8:	e8 fc ff ff ff       	call   100004e9 <Floppy::driveDetection()+0xb7>	100004e9: R_386_PC32	Dbg::kprintf(char const*, ...)
100004ed:	83 c4 20             	add    esp,0x20
100004f0:	90                   	nop
100004f1:	8d 65 f4             	lea    esp,[ebp-0xc]
100004f4:	5b                   	pop    ebx
100004f5:	5e                   	pop    esi
100004f6:	5f                   	pop    edi
100004f7:	5d                   	pop    ebp
100004f8:	c3                   	ret    
100004f9:	90                   	nop

100004fa <Floppy::open(int, int, void*)>:
100004fa:	55                   	push   ebp
100004fb:	89 e5                	mov    ebp,esp
100004fd:	83 ec 18             	sub    esp,0x18
10000500:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000503:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10000506:	66 89 82 58 01 00 00 	mov    WORD PTR [edx+0x158],ax
1000050d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000510:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10000516:	0f b6 c8             	movzx  ecx,al
10000519:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000051c:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
10000522:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10000525:	66 89 44 8a 04       	mov    WORD PTR [edx+ecx*4+0x4],ax
1000052a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000052d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10000533:	0f b6 d0             	movzx  edx,al
10000536:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000539:	c6 44 90 06 06       	mov    BYTE PTR [eax+edx*4+0x6],0x6
1000053e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000541:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10000547:	8d 50 01             	lea    edx,[eax+0x1]
1000054a:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
1000054d:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
10000553:	0f b6 d0             	movzx  edx,al
10000556:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000559:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
1000055d:	83 e1 3f             	and    ecx,0x3f
10000560:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
10000564:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000567:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
1000056d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10000570:	8a 92 c4 00 00 00    	mov    dl,BYTE PTR [edx+0xc4]
10000576:	0f b6 ca             	movzx  ecx,dl
10000579:	83 c0 07             	add    eax,0x7
1000057c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
1000057f:	66 89 44 8a 04       	mov    WORD PTR [edx+ecx*4+0x4],ax
10000584:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000587:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
1000058d:	0f b6 d0             	movzx  edx,al
10000590:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000593:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
10000598:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000059b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
100005a1:	8d 50 01             	lea    edx,[eax+0x1]
100005a4:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
100005a7:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
100005ad:	0f b6 d0             	movzx  edx,al
100005b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100005b3:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
100005b7:	83 e1 3f             	and    ecx,0x3f
100005ba:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
100005be:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
100005c5:	83 7d f4 03          	cmp    DWORD PTR [ebp-0xc],0x3
100005c9:	7f 26                	jg     100005f1 <Floppy::open(int, int, void*)+0xf7>
100005cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100005ce:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
100005d1:	83 c2 64             	add    edx,0x64
100005d4:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
100005dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100005df:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
100005e2:	83 c2 58             	add    edx,0x58
100005e5:	c7 04 90 00 00 00 00 	mov    DWORD PTR [eax+edx*4],0x0
100005ec:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
100005ef:	eb d4                	jmp    100005c5 <Floppy::open(int, int, void*)+0xcb>
100005f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100005f4:	8b 00                	mov    eax,DWORD PTR [eax]
100005f6:	83 c0 24             	add    eax,0x24
100005f9:	8b 00                	mov    eax,DWORD PTR [eax]
100005fb:	83 ec 0c             	sub    esp,0xc
100005fe:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000601:	ff d0                	call   eax
10000603:	83 c4 10             	add    esp,0x10
10000606:	83 ec 0c             	sub    esp,0xc
10000609:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000060c:	e8 fc ff ff ff       	call   1000060d <Floppy::open(int, int, void*)+0x113>	1000060d: R_386_PC32	Floppy::reset()
10000611:	83 c4 10             	add    esp,0x10
10000614:	83 ec 0c             	sub    esp,0xc
10000617:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000061a:	e8 fc ff ff ff       	call   1000061b <Floppy::open(int, int, void*)+0x121>	1000061b: R_386_PC32	Floppy::driveDetection()
1000061f:	83 c4 10             	add    esp,0x10
10000622:	b8 00 00 00 00       	mov    eax,0x0
10000627:	c9                   	leave  
10000628:	c3                   	ret    
10000629:	90                   	nop

1000062a <Floppy::close(int, int, void*)>:
1000062a:	b8 00 00 00 00       	mov    eax,0x0
1000062f:	c3                   	ret    

10000630 <Floppy::senseInterrupt(int*, int*)>:
10000630:	55                   	push   ebp
10000631:	89 e5                	mov    ebp,esp
10000633:	83 ec 08             	sub    esp,0x8
10000636:	83 ec 08             	sub    esp,0x8
10000639:	6a 08                	push   0x8
1000063b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000063e:	e8 fc ff ff ff       	call   1000063f <Floppy::senseInterrupt(int*, int*)+0xf>	1000063f: R_386_PC32	Floppy::writeCommand(unsigned char)
10000643:	83 c4 10             	add    esp,0x10
10000646:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000649:	8b 00                	mov    eax,DWORD PTR [eax]
1000064b:	83 c0 24             	add    eax,0x24
1000064e:	8b 00                	mov    eax,DWORD PTR [eax]
10000650:	83 ec 0c             	sub    esp,0xc
10000653:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000656:	ff d0                	call   eax
10000658:	83 c4 10             	add    esp,0x10
1000065b:	84 c0                	test   al,al
1000065d:	74 04                	je     10000663 <Floppy::senseInterrupt(int*, int*)+0x33>
1000065f:	b0 00                	mov    al,0x0
10000661:	eb 68                	jmp    100006cb <Floppy::senseInterrupt(int*, int*)+0x9b>
10000663:	83 ec 0c             	sub    esp,0xc
10000666:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000669:	e8 fc ff ff ff       	call   1000066a <Floppy::senseInterrupt(int*, int*)+0x3a>	1000066a: R_386_PC32	Floppy::readData()
1000066e:	83 c4 10             	add    esp,0x10
10000671:	0f b6 d0             	movzx  edx,al
10000674:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000677:	89 10                	mov    DWORD PTR [eax],edx
10000679:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000067c:	8b 00                	mov    eax,DWORD PTR [eax]
1000067e:	83 c0 24             	add    eax,0x24
10000681:	8b 00                	mov    eax,DWORD PTR [eax]
10000683:	83 ec 0c             	sub    esp,0xc
10000686:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000689:	ff d0                	call   eax
1000068b:	83 c4 10             	add    esp,0x10
1000068e:	84 c0                	test   al,al
10000690:	74 04                	je     10000696 <Floppy::senseInterrupt(int*, int*)+0x66>
10000692:	b0 00                	mov    al,0x0
10000694:	eb 35                	jmp    100006cb <Floppy::senseInterrupt(int*, int*)+0x9b>
10000696:	83 ec 0c             	sub    esp,0xc
10000699:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000069c:	e8 fc ff ff ff       	call   1000069d <Floppy::senseInterrupt(int*, int*)+0x6d>	1000069d: R_386_PC32	Floppy::readData()
100006a1:	83 c4 10             	add    esp,0x10
100006a4:	0f b6 d0             	movzx  edx,al
100006a7:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
100006aa:	89 10                	mov    DWORD PTR [eax],edx
100006ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100006af:	8b 00                	mov    eax,DWORD PTR [eax]
100006b1:	83 c0 24             	add    eax,0x24
100006b4:	8b 00                	mov    eax,DWORD PTR [eax]
100006b6:	83 ec 0c             	sub    esp,0xc
100006b9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100006bc:	ff d0                	call   eax
100006be:	83 c4 10             	add    esp,0x10
100006c1:	84 c0                	test   al,al
100006c3:	74 04                	je     100006c9 <Floppy::senseInterrupt(int*, int*)+0x99>
100006c5:	b0 00                	mov    al,0x0
100006c7:	eb 02                	jmp    100006cb <Floppy::senseInterrupt(int*, int*)+0x9b>
100006c9:	b0 01                	mov    al,0x1
100006cb:	c9                   	leave  
100006cc:	c3                   	ret    
100006cd:	90                   	nop

100006ce <Floppy::lock()>:
100006ce:	55                   	push   ebp
100006cf:	89 e5                	mov    ebp,esp
100006d1:	83 ec 08             	sub    esp,0x8
100006d4:	83 ec 08             	sub    esp,0x8
100006d7:	6a 14                	push   0x14
100006d9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100006dc:	e8 fc ff ff ff       	call   100006dd <Floppy::lock()+0xf>	100006dd: R_386_PC32	Floppy::writeCommand(unsigned char)
100006e1:	83 c4 10             	add    esp,0x10
100006e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100006e7:	8b 00                	mov    eax,DWORD PTR [eax]
100006e9:	83 c0 24             	add    eax,0x24
100006ec:	8b 00                	mov    eax,DWORD PTR [eax]
100006ee:	83 ec 0c             	sub    esp,0xc
100006f1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100006f4:	ff d0                	call   eax
100006f6:	83 c4 10             	add    esp,0x10
100006f9:	84 c0                	test   al,al
100006fb:	74 04                	je     10000701 <Floppy::lock()+0x33>
100006fd:	b0 00                	mov    al,0x0
100006ff:	eb 2d                	jmp    1000072e <Floppy::lock()+0x60>
10000701:	83 ec 0c             	sub    esp,0xc
10000704:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000707:	e8 fc ff ff ff       	call   10000708 <Floppy::lock()+0x3a>	10000708: R_386_PC32	Floppy::readData()
1000070c:	83 c4 10             	add    esp,0x10
1000070f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000712:	8b 00                	mov    eax,DWORD PTR [eax]
10000714:	83 c0 24             	add    eax,0x24
10000717:	8b 00                	mov    eax,DWORD PTR [eax]
10000719:	83 ec 0c             	sub    esp,0xc
1000071c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000071f:	ff d0                	call   eax
10000721:	83 c4 10             	add    esp,0x10
10000724:	84 c0                	test   al,al
10000726:	74 04                	je     1000072c <Floppy::lock()+0x5e>
10000728:	b0 00                	mov    al,0x0
1000072a:	eb 02                	jmp    1000072e <Floppy::lock()+0x60>
1000072c:	b0 01                	mov    al,0x1
1000072e:	c9                   	leave  
1000072f:	c3                   	ret    

10000730 <Floppy::reset()>:
10000730:	55                   	push   ebp
10000731:	89 e5                	mov    ebp,esp
10000733:	83 ec 28             	sub    esp,0x28
10000736:	6a 02                	push   0x2
10000738:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000073b:	e8 fc ff ff ff       	call   1000073c <Floppy::reset()+0xc>	1000073c: R_386_PC32	Floppy::readPort(FloppyReg)
10000740:	83 c4 08             	add    esp,0x8
10000743:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
10000746:	6a 00                	push   0x0
10000748:	6a 02                	push   0x2
1000074a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000074d:	e8 fc ff ff ff       	call   1000074e <Floppy::reset()+0x1e>	1000074e: R_386_PC32	Floppy::writePort(FloppyReg, unsigned char)
10000752:	83 c4 0c             	add    esp,0xc
10000755:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
10000758:	83 c8 04             	or     eax,0x4
1000075b:	0f b6 c0             	movzx  eax,al
1000075e:	50                   	push   eax
1000075f:	6a 02                	push   0x2
10000761:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000764:	e8 fc ff ff ff       	call   10000765 <Floppy::reset()+0x35>	10000765: R_386_PC32	Floppy::writePort(FloppyReg, unsigned char)
10000769:	83 c4 0c             	add    esp,0xc
1000076c:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
10000770:	83 e0 08             	and    eax,0x8
10000773:	85 c0                	test   eax,eax
10000775:	74 12                	je     10000789 <Floppy::reset()+0x59>
10000777:	83 ec 0c             	sub    esp,0xc
1000077a:	68 4c 0d 00 10       	push   0x10000d4c	1000077b: R_386_32	.text
1000077f:	e8 fc ff ff ff       	call   10000780 <Floppy::reset()+0x50>	10000780: R_386_PC32	Krnl::panic(char const*)
10000784:	83 c4 10             	add    esp,0x10
10000787:	eb 1a                	jmp    100007a3 <Floppy::reset()+0x73>
10000789:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
1000078c:	83 c8 0c             	or     eax,0xc
1000078f:	0f b6 c0             	movzx  eax,al
10000792:	83 ec 04             	sub    esp,0x4
10000795:	50                   	push   eax
10000796:	6a 02                	push   0x2
10000798:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000079b:	e8 fc ff ff ff       	call   1000079c <Floppy::reset()+0x6c>	1000079c: R_386_PC32	Floppy::writePort(FloppyReg, unsigned char)
100007a0:	83 c4 10             	add    esp,0x10
100007a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100007a6:	8a 80 85 01 00 00    	mov    al,BYTE PTR [eax+0x185]
100007ac:	84 c0                	test   al,al
100007ae:	0f 84 8f 00 00 00    	je     10000843 <Floppy::reset()+0x113>
100007b4:	83 ec 04             	sub    esp,0x4
100007b7:	8d 45 e4             	lea    eax,[ebp-0x1c]
100007ba:	50                   	push   eax
100007bb:	8d 45 e8             	lea    eax,[ebp-0x18]
100007be:	50                   	push   eax
100007bf:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100007c2:	e8 fc ff ff ff       	call   100007c3 <Floppy::reset()+0x93>	100007c3: R_386_PC32	Floppy::senseInterrupt(int*, int*)
100007c7:	83 c4 10             	add    esp,0x10
100007ca:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
100007cd:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
100007d1:	74 19                	je     100007ec <Floppy::reset()+0xbc>
100007d3:	83 ec 04             	sub    esp,0x4
100007d6:	8d 45 e4             	lea    eax,[ebp-0x1c]
100007d9:	50                   	push   eax
100007da:	8d 45 e8             	lea    eax,[ebp-0x18]
100007dd:	50                   	push   eax
100007de:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100007e1:	e8 fc ff ff ff       	call   100007e2 <Floppy::reset()+0xb2>	100007e2: R_386_PC32	Floppy::senseInterrupt(int*, int*)
100007e6:	83 c4 10             	add    esp,0x10
100007e9:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
100007ec:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
100007f0:	74 19                	je     1000080b <Floppy::reset()+0xdb>
100007f2:	83 ec 04             	sub    esp,0x4
100007f5:	8d 45 e4             	lea    eax,[ebp-0x1c]
100007f8:	50                   	push   eax
100007f9:	8d 45 e8             	lea    eax,[ebp-0x18]
100007fc:	50                   	push   eax
100007fd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000800:	e8 fc ff ff ff       	call   10000801 <Floppy::reset()+0xd1>	10000801: R_386_PC32	Floppy::senseInterrupt(int*, int*)
10000805:	83 c4 10             	add    esp,0x10
10000808:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
1000080b:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
1000080f:	74 19                	je     1000082a <Floppy::reset()+0xfa>
10000811:	83 ec 04             	sub    esp,0x4
10000814:	8d 45 e4             	lea    eax,[ebp-0x1c]
10000817:	50                   	push   eax
10000818:	8d 45 e8             	lea    eax,[ebp-0x18]
1000081b:	50                   	push   eax
1000081c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000081f:	e8 fc ff ff ff       	call   10000820 <Floppy::reset()+0xf0>	10000820: R_386_PC32	Floppy::senseInterrupt(int*, int*)
10000824:	83 c4 10             	add    esp,0x10
10000827:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
1000082a:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
1000082d:	83 f0 01             	xor    eax,0x1
10000830:	84 c0                	test   al,al
10000832:	74 0f                	je     10000843 <Floppy::reset()+0x113>
10000834:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000837:	c6 80 85 01 00 00 00 	mov    BYTE PTR [eax+0x185],0x0
1000083e:	e9 f3 fe ff ff       	jmp    10000736 <Floppy::reset()+0x6>
10000843:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000846:	8a 80 80 01 00 00    	mov    al,BYTE PTR [eax+0x180]
1000084c:	84 c0                	test   al,al
1000084e:	75 14                	jne    10000864 <Floppy::reset()+0x134>
10000850:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000853:	8a 80 81 01 00 00    	mov    al,BYTE PTR [eax+0x181]
10000859:	83 f0 01             	xor    eax,0x1
1000085c:	84 c0                	test   al,al
1000085e:	0f 84 91 00 00 00    	je     100008f5 <Floppy::reset()+0x1c5>
10000864:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000867:	8a 80 84 01 00 00    	mov    al,BYTE PTR [eax+0x184]
1000086d:	84 c0                	test   al,al
1000086f:	74 3c                	je     100008ad <Floppy::reset()+0x17d>
10000871:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
10000878:	83 7d f0 03          	cmp    DWORD PTR [ebp-0x10],0x3
1000087c:	7f 2f                	jg     100008ad <Floppy::reset()+0x17d>
1000087e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000881:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
10000884:	83 c2 64             	add    edx,0x64
10000887:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
1000088b:	85 c0                	test   eax,eax
1000088d:	74 19                	je     100008a8 <Floppy::reset()+0x178>
1000088f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000892:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
10000895:	83 c2 64             	add    edx,0x64
10000898:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
1000089c:	83 ec 0c             	sub    esp,0xc
1000089f:	50                   	push   eax
100008a0:	e8 fc ff ff ff       	call   100008a1 <Floppy::reset()+0x171>	100008a1: R_386_PC32	FloppyDrive::floppyConfigure()
100008a5:	83 c4 10             	add    esp,0x10
100008a8:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
100008ab:	eb cb                	jmp    10000878 <Floppy::reset()+0x148>
100008ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100008b0:	8a 80 81 01 00 00    	mov    al,BYTE PTR [eax+0x181]
100008b6:	83 f0 01             	xor    eax,0x1
100008b9:	84 c0                	test   al,al
100008bb:	74 38                	je     100008f5 <Floppy::reset()+0x1c5>
100008bd:	83 ec 0c             	sub    esp,0xc
100008c0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100008c3:	e8 fc ff ff ff       	call   100008c4 <Floppy::reset()+0x194>	100008c4: R_386_PC32	Floppy::lock()
100008c8:	83 c4 10             	add    esp,0x10
100008cb:	83 f0 01             	xor    eax,0x1
100008ce:	88 c2                	mov    dl,al
100008d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100008d3:	88 90 80 01 00 00    	mov    BYTE PTR [eax+0x180],dl
100008d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100008dc:	c6 80 81 01 00 00 01 	mov    BYTE PTR [eax+0x181],0x1
100008e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100008e6:	8a 80 80 01 00 00    	mov    al,BYTE PTR [eax+0x180]
100008ec:	84 c0                	test   al,al
100008ee:	74 05                	je     100008f5 <Floppy::reset()+0x1c5>
100008f0:	e9 41 fe ff ff       	jmp    10000736 <Floppy::reset()+0x6>
100008f5:	90                   	nop
100008f6:	c9                   	leave  
100008f7:	c3                   	ret    

100008f8 <Floppy::motor(int, bool)>:
100008f8:	55                   	push   ebp
100008f9:	89 e5                	mov    ebp,esp
100008fb:	83 ec 28             	sub    esp,0x28
100008fe:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
10000901:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
10000904:	80 7d e4 00          	cmp    BYTE PTR [ebp-0x1c],0x0
10000908:	0f 84 c7 00 00 00    	je     100009d5 <Floppy::motor(int, bool)+0xdd>
1000090e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000911:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10000914:	83 c2 58             	add    edx,0x58
10000917:	8b 04 90             	mov    eax,DWORD PTR [eax+edx*4]
1000091a:	85 c0                	test   eax,eax
1000091c:	0f 85 90 00 00 00    	jne    100009b2 <Floppy::motor(int, bool)+0xba>
10000922:	e8 fc ff ff ff       	call   10000923 <Floppy::motor(int, bool)+0x2b>	10000923: R_386_PC32	lockScheduler()
10000927:	83 ec 08             	sub    esp,0x8
1000092a:	6a 02                	push   0x2
1000092c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000092f:	e8 fc ff ff ff       	call   10000930 <Floppy::motor(int, bool)+0x38>	10000930: R_386_PC32	Floppy::readPort(FloppyReg)
10000934:	83 c4 10             	add    esp,0x10
10000937:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
1000093a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
1000093d:	ba 10 00 00 00       	mov    edx,0x10
10000942:	88 c1                	mov    cl,al
10000944:	d3 e2                	shl    edx,cl
10000946:	89 d0                	mov    eax,edx
10000948:	88 c2                	mov    dl,al
1000094a:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
1000094d:	09 d0                	or     eax,edx
1000094f:	0f b6 c0             	movzx  eax,al
10000952:	83 ec 04             	sub    esp,0x4
10000955:	50                   	push   eax
10000956:	6a 02                	push   0x2
10000958:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000095b:	e8 fc ff ff ff       	call   1000095c <Floppy::motor(int, bool)+0x64>	1000095c: R_386_PC32	Floppy::writePort(FloppyReg, unsigned char)
10000960:	83 c4 10             	add    esp,0x10
10000963:	e8 fc ff ff ff       	call   10000964 <Floppy::motor(int, bool)+0x6c>	10000964: R_386_PC32	unlockScheduler()
10000968:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000096b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
1000096e:	83 c2 60             	add    edx,0x60
10000971:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
10000975:	83 f8 04             	cmp    eax,0x4
10000978:	75 14                	jne    1000098e <Floppy::motor(int, bool)+0x96>
1000097a:	83 ec 08             	sub    esp,0x8
1000097d:	6a 00                	push   0x0
1000097f:	68 00 a3 e1 11       	push   0x11e1a300
10000984:	e8 fc ff ff ff       	call   10000985 <Floppy::motor(int, bool)+0x8d>	10000985: R_386_PC32	nanoSleep(unsigned long long)
10000989:	83 c4 10             	add    esp,0x10
1000098c:	eb 12                	jmp    100009a0 <Floppy::motor(int, bool)+0xa8>
1000098e:	83 ec 08             	sub    esp,0x8
10000991:	6a 00                	push   0x0
10000993:	68 00 65 cd 1d       	push   0x1dcd6500
10000998:	e8 fc ff ff ff       	call   10000999 <Floppy::motor(int, bool)+0xa1>	10000999: R_386_PC32	nanoSleep(unsigned long long)
1000099d:	83 c4 10             	add    esp,0x10
100009a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100009a3:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
100009a6:	83 c2 58             	add    edx,0x58
100009a9:	c7 04 90 01 00 00 00 	mov    DWORD PTR [eax+edx*4],0x1
100009b0:	eb 54                	jmp    10000a06 <Floppy::motor(int, bool)+0x10e>
100009b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100009b5:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
100009b8:	83 c2 58             	add    edx,0x58
100009bb:	8b 04 90             	mov    eax,DWORD PTR [eax+edx*4]
100009be:	83 f8 02             	cmp    eax,0x2
100009c1:	75 43                	jne    10000a06 <Floppy::motor(int, bool)+0x10e>
100009c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100009c6:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
100009c9:	83 c2 58             	add    edx,0x58
100009cc:	c7 04 90 01 00 00 00 	mov    DWORD PTR [eax+edx*4],0x1
100009d3:	eb 31                	jmp    10000a06 <Floppy::motor(int, bool)+0x10e>
100009d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100009d8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
100009db:	83 c2 58             	add    edx,0x58
100009de:	8b 04 90             	mov    eax,DWORD PTR [eax+edx*4]
100009e1:	83 f8 01             	cmp    eax,0x1
100009e4:	75 20                	jne    10000a06 <Floppy::motor(int, bool)+0x10e>
100009e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100009e9:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
100009ec:	83 c2 58             	add    edx,0x58
100009ef:	c7 04 90 02 00 00 00 	mov    DWORD PTR [eax+edx*4],0x2
100009f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100009f9:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
100009fc:	83 c2 5c             	add    edx,0x5c
100009ff:	c7 04 90 c4 09 00 00 	mov    DWORD PTR [eax+edx*4],0x9c4
10000a06:	90                   	nop
10000a07:	c9                   	leave  
10000a08:	c3                   	ret    
10000a09:	90                   	nop
10000a0a:	55                   	push   ebp
10000a0b:	89 e5                	mov    ebp,esp
10000a0d:	83 ec 08             	sub    esp,0x8
10000a10:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000a13:	83 ec 04             	sub    esp,0x4
10000a16:	68 00 02 00 00       	push   0x200
10000a1b:	68 54 0d 00 10       	push   0x10000d54	10000a1c: R_386_32	.text
10000a20:	50                   	push   eax
10000a21:	e8 fc ff ff ff       	call   10000a22 <Floppy::motor(int, bool)+0x12a>	10000a22: R_386_PC32	PhysicalDisk::PhysicalDisk(char const*, int)
10000a26:	83 c4 10             	add    esp,0x10
10000a29:	ba 08 00 00 00       	mov    edx,0x8	10000a2a: R_386_32	vtable for FloppyDrive
10000a2e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000a31:	89 10                	mov    DWORD PTR [eax],edx
10000a33:	90                   	nop
10000a34:	c9                   	leave  
10000a35:	c3                   	ret    

10000a36 <FloppyDrive::configure()>:
10000a36:	90                   	nop
10000a37:	c3                   	ret    
10000a38:	55                   	push   ebp
10000a39:	89 e5                	mov    ebp,esp
10000a3b:	83 ec 08             	sub    esp,0x8
10000a3e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000a41:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10000a47:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10000a4a:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
10000a50:	83 ec 04             	sub    esp,0x4
10000a53:	6a 01                	push   0x1
10000a55:	52                   	push   edx
10000a56:	50                   	push   eax
10000a57:	e8 fc ff ff ff       	call   10000a58 <FloppyDrive::configure()+0x22>	10000a58: R_386_PC32	Floppy::motor(int, bool)
10000a5c:	83 c4 10             	add    esp,0x10
10000a5f:	90                   	nop
10000a60:	c9                   	leave  
10000a61:	c3                   	ret    
10000a62:	55                   	push   ebp
10000a63:	89 e5                	mov    ebp,esp
10000a65:	83 ec 08             	sub    esp,0x8
10000a68:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000a6b:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10000a71:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10000a74:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
10000a7a:	83 ec 04             	sub    esp,0x4
10000a7d:	6a 00                	push   0x0
10000a7f:	52                   	push   edx
10000a80:	50                   	push   eax
10000a81:	e8 fc ff ff ff       	call   10000a82 <FloppyDrive::configure()+0x4c>	10000a82: R_386_PC32	Floppy::motor(int, bool)
10000a86:	83 c4 10             	add    esp,0x10
10000a89:	90                   	nop
10000a8a:	c9                   	leave  
10000a8b:	c3                   	ret    

10000a8c <FloppyDrive::floppyConfigure()>:
10000a8c:	55                   	push   ebp
10000a8d:	89 e5                	mov    ebp,esp
10000a8f:	83 ec 18             	sub    esp,0x18
10000a92:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
10000a96:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
10000a9a:	c6 45 f5 01          	mov    BYTE PTR [ebp-0xb],0x1
10000a9e:	c7 45 f0 08 00 00 00 	mov    DWORD PTR [ebp-0x10],0x8
10000aa5:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
10000aac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000aaf:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10000ab5:	83 ec 08             	sub    esp,0x8
10000ab8:	6a 13                	push   0x13
10000aba:	50                   	push   eax
10000abb:	e8 fc ff ff ff       	call   10000abc <FloppyDrive::floppyConfigure()+0x30>	10000abc: R_386_PC32	Floppy::writeCommand(unsigned char)
10000ac0:	83 c4 10             	add    esp,0x10
10000ac3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000ac6:	8b 90 6c 01 00 00    	mov    edx,DWORD PTR [eax+0x16c]
10000acc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000acf:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10000ad5:	8b 00                	mov    eax,DWORD PTR [eax]
10000ad7:	83 c0 24             	add    eax,0x24
10000ada:	8b 00                	mov    eax,DWORD PTR [eax]
10000adc:	83 ec 0c             	sub    esp,0xc
10000adf:	52                   	push   edx
10000ae0:	ff d0                	call   eax
10000ae2:	83 c4 10             	add    esp,0x10
10000ae5:	84 c0                	test   al,al
10000ae7:	74 07                	je     10000af0 <FloppyDrive::floppyConfigure()+0x64>
10000ae9:	b0 00                	mov    al,0x0
10000aeb:	e9 05 01 00 00       	jmp    10000bf5 <FloppyDrive::floppyConfigure()+0x169>
10000af0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000af3:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10000af9:	83 ec 08             	sub    esp,0x8
10000afc:	6a 00                	push   0x0
10000afe:	50                   	push   eax
10000aff:	e8 fc ff ff ff       	call   10000b00 <FloppyDrive::floppyConfigure()+0x74>	10000b00: R_386_PC32	Floppy::writeCommand(unsigned char)
10000b04:	83 c4 10             	add    esp,0x10
10000b07:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000b0a:	8b 90 6c 01 00 00    	mov    edx,DWORD PTR [eax+0x16c]
10000b10:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000b13:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10000b19:	8b 00                	mov    eax,DWORD PTR [eax]
10000b1b:	83 c0 24             	add    eax,0x24
10000b1e:	8b 00                	mov    eax,DWORD PTR [eax]
10000b20:	83 ec 0c             	sub    esp,0xc
10000b23:	52                   	push   edx
10000b24:	ff d0                	call   eax
10000b26:	83 c4 10             	add    esp,0x10
10000b29:	84 c0                	test   al,al
10000b2b:	74 07                	je     10000b34 <FloppyDrive::floppyConfigure()+0xa8>
10000b2d:	b0 00                	mov    al,0x0
10000b2f:	e9 c1 00 00 00       	jmp    10000bf5 <FloppyDrive::floppyConfigure()+0x169>
10000b34:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000b37:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10000b3d:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
10000b41:	c1 e2 06             	shl    edx,0x6
10000b44:	88 d1                	mov    cl,dl
10000b46:	0f b6 55 f6          	movzx  edx,BYTE PTR [ebp-0xa]
10000b4a:	c1 e2 05             	shl    edx,0x5
10000b4d:	09 d1                	or     ecx,edx
10000b4f:	0f b6 55 f5          	movzx  edx,BYTE PTR [ebp-0xb]
10000b53:	c1 e2 04             	shl    edx,0x4
10000b56:	09 d1                	or     ecx,edx
10000b58:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
10000b5b:	4a                   	dec    edx
10000b5c:	09 ca                	or     edx,ecx
10000b5e:	0f b6 d2             	movzx  edx,dl
10000b61:	83 ec 08             	sub    esp,0x8
10000b64:	52                   	push   edx
10000b65:	50                   	push   eax
10000b66:	e8 fc ff ff ff       	call   10000b67 <FloppyDrive::floppyConfigure()+0xdb>	10000b67: R_386_PC32	Floppy::writeCommand(unsigned char)
10000b6b:	83 c4 10             	add    esp,0x10
10000b6e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000b71:	8b 90 6c 01 00 00    	mov    edx,DWORD PTR [eax+0x16c]
10000b77:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000b7a:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10000b80:	8b 00                	mov    eax,DWORD PTR [eax]
10000b82:	83 c0 24             	add    eax,0x24
10000b85:	8b 00                	mov    eax,DWORD PTR [eax]
10000b87:	83 ec 0c             	sub    esp,0xc
10000b8a:	52                   	push   edx
10000b8b:	ff d0                	call   eax
10000b8d:	83 c4 10             	add    esp,0x10
10000b90:	84 c0                	test   al,al
10000b92:	74 04                	je     10000b98 <FloppyDrive::floppyConfigure()+0x10c>
10000b94:	b0 00                	mov    al,0x0
10000b96:	eb 5d                	jmp    10000bf5 <FloppyDrive::floppyConfigure()+0x169>
10000b98:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000b9b:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10000ba1:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
10000ba4:	0f b6 d2             	movzx  edx,dl
10000ba7:	83 ec 08             	sub    esp,0x8
10000baa:	52                   	push   edx
10000bab:	50                   	push   eax
10000bac:	e8 fc ff ff ff       	call   10000bad <FloppyDrive::floppyConfigure()+0x121>	10000bad: R_386_PC32	Floppy::writeCommand(unsigned char)
10000bb1:	83 c4 10             	add    esp,0x10
10000bb4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000bb7:	8b 90 6c 01 00 00    	mov    edx,DWORD PTR [eax+0x16c]
10000bbd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000bc0:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10000bc6:	8b 00                	mov    eax,DWORD PTR [eax]
10000bc8:	83 c0 24             	add    eax,0x24
10000bcb:	8b 00                	mov    eax,DWORD PTR [eax]
10000bcd:	83 ec 0c             	sub    esp,0xc
10000bd0:	52                   	push   edx
10000bd1:	ff d0                	call   eax
10000bd3:	83 c4 10             	add    esp,0x10
10000bd6:	84 c0                	test   al,al
10000bd8:	74 04                	je     10000bde <FloppyDrive::floppyConfigure()+0x152>
10000bda:	b0 00                	mov    al,0x0
10000bdc:	eb 17                	jmp    10000bf5 <FloppyDrive::floppyConfigure()+0x169>
10000bde:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000be1:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10000be7:	8a 55 f5             	mov    dl,BYTE PTR [ebp-0xb]
10000bea:	83 f2 01             	xor    edx,0x1
10000bed:	88 90 85 01 00 00    	mov    BYTE PTR [eax+0x185],dl
10000bf3:	b0 01                	mov    al,0x1
10000bf5:	c9                   	leave  
10000bf6:	c3                   	ret    
10000bf7:	90                   	nop

10000bf8 <FloppyDrive::open(int, int, void*)>:
10000bf8:	55                   	push   ebp
10000bf9:	89 e5                	mov    ebp,esp
10000bfb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000bfe:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
10000c01:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
10000c07:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000c0a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10000c0d:	89 90 70 01 00 00    	mov    DWORD PTR [eax+0x170],edx
10000c13:	b8 00 00 00 00       	mov    eax,0x0
10000c18:	5d                   	pop    ebp
10000c19:	c3                   	ret    

10000c1a <FloppyDrive::close(int, int, void*)>:
10000c1a:	b8 00 00 00 00       	mov    eax,0x0
10000c1f:	c3                   	ret    

10000c20 <Floppy::~Floppy()>:
10000c20:	55                   	push   ebp
10000c21:	89 e5                	mov    ebp,esp
10000c23:	83 ec 08             	sub    esp,0x8
10000c26:	ba 08 00 00 00       	mov    edx,0x8	10000c27: R_386_32	vtable for Floppy
10000c2b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000c2e:	89 10                	mov    DWORD PTR [eax],edx
10000c30:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000c33:	83 ec 0c             	sub    esp,0xc
10000c36:	50                   	push   eax
10000c37:	e8 fc ff ff ff       	call   10000c38 <Floppy::~Floppy()+0x18>	10000c38: R_386_PC32	HardDiskController::~HardDiskController()
10000c3c:	83 c4 10             	add    esp,0x10
10000c3f:	90                   	nop
10000c40:	c9                   	leave  
10000c41:	c3                   	ret    

10000c42 <Floppy::~Floppy()>:
10000c42:	55                   	push   ebp
10000c43:	89 e5                	mov    ebp,esp
10000c45:	83 ec 08             	sub    esp,0x8
10000c48:	83 ec 0c             	sub    esp,0xc
10000c4b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000c4e:	e8 fc ff ff ff       	call   10000c4f <Floppy::~Floppy()+0xd>	10000c4f: R_386_PC32	Floppy::~Floppy()
10000c53:	83 c4 10             	add    esp,0x10
10000c56:	83 ec 08             	sub    esp,0x8
10000c59:	68 a8 01 00 00       	push   0x1a8
10000c5e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000c61:	e8 fc ff ff ff       	call   10000c62 <Floppy::~Floppy()+0x20>	10000c62: R_386_PC32	operator delete(void*, unsigned long)
10000c66:	83 c4 10             	add    esp,0x10
10000c69:	c9                   	leave  
10000c6a:	c3                   	ret    
10000c6b:	90                   	nop
10000c6c:	96                   	xchg   esi,eax
10000c6d:	00 00                	add    BYTE PTR [eax],al
10000c6f:	00 2c 01             	add    BYTE PTR [ecx+eax*1],ch
10000c72:	00 00                	add    BYTE PTR [eax],al
10000c74:	64 65 76 20          	fs gs jbe 10000c98 <Floppy::~Floppy()+0x56>
10000c78:	3d 20 30 78 25       	cmp    eax,0x25783020
10000c7d:	58                   	pop    eax
10000c7e:	0a 00                	or     al,BYTE PTR [eax]
10000c80:	30 78 25             	xor    BYTE PTR [eax+0x25],bh
10000c83:	58                   	pop    eax
10000c84:	0a 00                	or     al,BYTE PTR [eax]
10000c86:	46                   	inc    esi
10000c87:	6c                   	ins    BYTE PTR es:[edi],dx
10000c88:	6f                   	outs   dx,DWORD PTR ds:[esi]
10000c89:	70 70                	jo     10000cfb <Floppy::~Floppy()+0xb9>
10000c8b:	79 20                	jns    10000cad <Floppy::~Floppy()+0x6b>
10000c8d:	44                   	inc    esp
10000c8e:	69 73 6b 20 43 6f 6e 	imul   esi,DWORD PTR [ebx+0x6b],0x6e6f4320
10000c95:	74 72                	je     10000d09 <Floppy::~Floppy()+0xc7>
10000c97:	6f                   	outs   dx,DWORD PTR ds:[esi]
10000c98:	6c                   	ins    BYTE PTR es:[edi],dx
10000c99:	6c                   	ins    BYTE PTR es:[edi],dx
10000c9a:	65 72 00             	gs jb  10000c9d <Floppy::~Floppy()+0x5b>
10000c9d:	46                   	inc    esi
10000c9e:	6c                   	ins    BYTE PTR es:[edi],dx
10000c9f:	6f                   	outs   dx,DWORD PTR ds:[esi]
10000ca0:	70 70                	jo     10000d12 <Floppy::~Floppy()+0xd0>
10000ca2:	79 3a                	jns    10000cde <Floppy::~Floppy()+0x9c>
10000ca4:	3a 46 6c             	cmp    al,BYTE PTR [esi+0x6c]
10000ca7:	6f                   	outs   dx,DWORD PTR ds:[esi]
10000ca8:	70 70                	jo     10000d1a <Floppy::~Floppy()+0xd8>
10000caa:	79 28                	jns    10000cd4 <Floppy::~Floppy()+0x92>
10000cac:	29 0a                	sub    DWORD PTR [edx],ecx
10000cae:	00 00                	add    BYTE PTR [eax],al
10000cb0:	50                   	push   eax
10000cb1:	52                   	push   edx
10000cb2:	45                   	inc    ebp
10000cb3:	56                   	push   esi
10000cb4:	49                   	dec    ecx
10000cb5:	4f                   	dec    edi
10000cb6:	55                   	push   ebp
10000cb7:	53                   	push   ebx
10000cb8:	20 43 4f             	and    BYTE PTR [ebx+0x4f],al
10000cbb:	4d                   	dec    ebp
10000cbc:	4d                   	dec    ebp
10000cbd:	41                   	inc    ecx
10000cbe:	4e                   	dec    esi
10000cbf:	44                   	inc    esp
10000cc0:	20 46 41             	and    BYTE PTR [esi+0x41],al
10000cc3:	49                   	dec    ecx
10000cc4:	4c                   	dec    esp
10000cc5:	45                   	inc    ebp
10000cc6:	44                   	inc    esp
10000cc7:	2c 20                	sub    al,0x20
10000cc9:	43                   	inc    ebx
10000cca:	41                   	inc    ecx
10000ccb:	55                   	push   ebp
10000ccc:	47                   	inc    edi
10000ccd:	48                   	dec    eax
10000cce:	54                   	push   esp
10000ccf:	20 42 59             	and    BYTE PTR [edx+0x59],al
10000cd2:	20 77 72             	and    BYTE PTR [edi+0x72],dh
10000cd5:	69 74 65 43 6f 6d 6d 61 	imul   esi,DWORD PTR [ebp+eiz*2+0x43],0x616d6d6f
10000cdd:	6e                   	outs   dx,BYTE PTR ds:[esi]
10000cde:	64 00 44 49 44       	add    BYTE PTR fs:[ecx+ecx*2+0x44],al
10000ce3:	20 4e 4f             	and    BYTE PTR [esi+0x4f],cl
10000ce6:	54                   	push   esp
10000ce7:	20 43 48             	and    BYTE PTR [ebx+0x48],al
10000cea:	45                   	inc    ebp
10000ceb:	43                   	inc    ebx
10000cec:	4b                   	dec    ebx
10000ced:	20 46 4f             	and    BYTE PTR [esi+0x4f],al
10000cf0:	52                   	push   edx
10000cf1:	20 46 41             	and    BYTE PTR [esi+0x41],al
10000cf4:	49                   	dec    ecx
10000cf5:	4c                   	dec    esp
10000cf6:	55                   	push   ebp
10000cf7:	52                   	push   edx
10000cf8:	45                   	inc    ebp
10000cf9:	20 42 45             	and    BYTE PTR [edx+0x45],al
10000cfc:	46                   	inc    esi
10000cfd:	4f                   	dec    edi
10000cfe:	52                   	push   edx
10000cff:	45                   	inc    ebp
10000d00:	20 77 72             	and    BYTE PTR [edi+0x72],dh
10000d03:	69 74 65 43 6f 6d 6d 61 	imul   esi,DWORD PTR [ebp+eiz*2+0x43],0x616d6d6f
10000d0b:	6e                   	outs   dx,BYTE PTR ds:[esi]
10000d0c:	64 00 46 6c          	add    BYTE PTR fs:[esi+0x6c],al
10000d10:	6f                   	outs   dx,DWORD PTR ds:[esi]
10000d11:	70 70                	jo     10000d83 <vtable for FloppyDrive+0x1b>
10000d13:	79 3a                	jns    10000d4f <Floppy::~Floppy()+0x10d>
10000d15:	3a 64 72 69          	cmp    ah,BYTE PTR [edx+esi*2+0x69]
10000d19:	76 65                	jbe    10000d80 <vtable for FloppyDrive+0x18>
10000d1b:	44                   	inc    esp
10000d1c:	65 74 65             	gs je  10000d84 <vtable for FloppyDrive+0x1c>
10000d1f:	63 74 69 6f          	arpl   WORD PTR [ecx+ebp*2+0x6f],si
10000d23:	6e                   	outs   dx,BYTE PTR ds:[esi]
10000d24:	28 29                	sub    BYTE PTR [ecx],ch
10000d26:	0a 00                	or     al,BYTE PTR [eax]
10000d28:	44                   	inc    esp
10000d29:	72 69                	jb     10000d94 <vtable for FloppyDrive+0x2c>
10000d2b:	76 65                	jbe    10000d92 <vtable for FloppyDrive+0x2a>
10000d2d:	20 74 79 70          	and    BYTE PTR [ecx+edi*2+0x70],dh
10000d31:	65 20 30             	and    BYTE PTR gs:[eax],dh
10000d34:	3a 20                	cmp    ah,BYTE PTR [eax]
10000d36:	25 73 0a 00 44       	and    eax,0x44000a73
10000d3b:	72 69                	jb     10000da6 <vtable for Floppy+0x2>
10000d3d:	76 65                	jbe    10000da4 <vtable for Floppy>
10000d3f:	20 74 79 70          	and    BYTE PTR [ecx+edi*2+0x70],dh
10000d43:	65 20 31             	and    BYTE PTR gs:[ecx],dh
10000d46:	3a 20                	cmp    ah,BYTE PTR [eax]
10000d48:	25 73 0a 00 55       	and    eax,0x55000a73
10000d4d:	4e                   	dec    esi
10000d4e:	49                   	dec    ecx
10000d4f:	4d                   	dec    ebp
10000d50:	50                   	push   eax
10000d51:	4c                   	dec    esp
10000d52:	2e 00 46 6c          	add    BYTE PTR cs:[esi+0x6c],al
10000d56:	6f                   	outs   dx,DWORD PTR ds:[esi]
10000d57:	70 70                	jo     10000dc9 <vtable for Floppy+0x25>
10000d59:	79 20                	jns    10000d7b <vtable for FloppyDrive+0x13>
10000d5b:	44                   	inc    esp
10000d5c:	69 73 6b 20 44 72 69 	imul   esi,DWORD PTR [ebx+0x6b],0x69724420
10000d63:	76 65                	jbe    10000dca <vtable for Floppy+0x26>
10000d65:	00 66 90             	add    BYTE PTR [esi-0x70],ah

10000d68 <vtable for FloppyDrive>:
	...
	10000d78: R_386_32	FloppyDrive::open(int, int, void*)
	10000d7c: R_386_32	FloppyDrive::close(int, int, void*)
	10000d80: R_386_32	Device::hibernate()
	10000d84: R_386_32	Device::wake()
	10000d88: R_386_32	Device::detect()
	10000d8c: R_386_32	Device::disableLegacy()
	10000d90: R_386_32	Device::powerSaving(PowerSavingLevel)
	10000d94: R_386_32	PhysicalDisk::eject()
	10000d98: R_386_32	__cxa_pure_virtual
	10000d9c: R_386_32	__cxa_pure_virtual
	10000da0: R_386_32	FloppyDrive::configure()

10000da4 <vtable for Floppy>:
	...
	10000dac: R_386_32	Floppy::~Floppy()
	10000db0: R_386_32	Floppy::~Floppy()
	10000db4: R_386_32	Floppy::open(int, int, void*)
	10000db8: R_386_32	Floppy::close(int, int, void*)
	10000dbc: R_386_32	Device::hibernate()
	10000dc0: R_386_32	Device::wake()
	10000dc4: R_386_32	Device::detect()
	10000dc8: R_386_32	Device::disableLegacy()
	10000dcc: R_386_32	Device::powerSaving(PowerSavingLevel)
	10000dd0: R_386_32	Floppy::wasFailure()
	10000dd4: R_386_32	Floppy::configure()
