
packages/system/32/0002/floppy.sys:     file format elf32-i386


Disassembly of section .text:

10000000 <start(void*)-0x17>:
10000000:	55                   	push   ebp
10000001:	89 e5                	mov    ebp,esp
10000003:	83 ec 08             	sub    esp,0x8
10000006:	83 ec 0c             	sub    esp,0xc
10000009:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000000c:	e8 fc ff ff ff       	call   1000000d <start(void*)-0xa>	1000000d: R_386_PC32	start(void*)
10000011:	83 c4 10             	add    esp,0x10
10000014:	90                   	nop
10000015:	c9                   	leave  
10000016:	c3                   	ret    

10000017 <start(void*)>:
10000017:	55                   	push   ebp
10000018:	89 e5                	mov    ebp,esp
1000001a:	53                   	push   ebx
1000001b:	83 ec 14             	sub    esp,0x14
1000001e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000021:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
10000024:	83 ec 0c             	sub    esp,0xc
10000027:	68 a8 01 00 00       	push   0x1a8
1000002c:	e8 fc ff ff ff       	call   1000002d <start(void*)+0x16>	1000002d: R_386_PC32	operator new(unsigned long)
10000031:	83 c4 10             	add    esp,0x10
10000034:	89 c3                	mov    ebx,eax
10000036:	83 ec 0c             	sub    esp,0xc
10000039:	53                   	push   ebx
1000003a:	e8 fc ff ff ff       	call   1000003b <start(void*)+0x24>	1000003b: R_386_PC32	Floppy::Floppy()
1000003f:	83 c4 10             	add    esp,0x10
10000042:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
10000045:	83 ec 08             	sub    esp,0x8
10000048:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
1000004b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
1000004e:	e8 fc ff ff ff       	call   1000004f <start(void*)+0x38>	1000004f: R_386_PC32	Device::addChild(Device*)
10000053:	83 c4 10             	add    esp,0x10
10000056:	6a 00                	push   0x0
10000058:	6a 00                	push   0x0
1000005a:	68 f0 03 00 00       	push   0x3f0
1000005f:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000062:	e8 fc ff ff ff       	call   10000063 <start(void*)+0x4c>	10000063: R_386_PC32	Floppy::_open(int, int, void*)
10000067:	83 c4 10             	add    esp,0x10
1000006a:	90                   	nop
1000006b:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
1000006e:	c9                   	leave  
1000006f:	c3                   	ret    

10000070 <floppyMotorFunction(void*)>:
10000070:	55                   	push   ebp
10000071:	89 e5                	mov    ebp,esp
10000073:	83 ec 18             	sub    esp,0x18
10000076:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000079:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
1000007c:	e8 fc ff ff ff       	call   1000007d <floppyMotorFunction(void*)+0xd>	1000007d: R_386_PC32	unlockScheduler()
10000081:	83 ec 08             	sub    esp,0x8
10000084:	6a 00                	push   0x0
10000086:	68 00 84 d7 17       	push   0x17d78400
1000008b:	e8 fc ff ff ff       	call   1000008c <floppyMotorFunction(void*)+0x1c>	1000008c: R_386_PC32	nanoSleep(unsigned long long)
10000090:	83 c4 10             	add    esp,0x10
10000093:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
1000009a:	83 7d f4 03          	cmp    DWORD PTR [ebp-0xc],0x3
1000009e:	7f e1                	jg     10000081 <floppyMotorFunction(void*)+0x11>
100000a0:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100000a3:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
100000a6:	83 c2 58             	add    edx,0x58
100000a9:	8b 04 90             	mov    eax,DWORD PTR [eax+edx*4]
100000ac:	83 f8 02             	cmp    eax,0x2
100000af:	0f 85 86 00 00 00    	jne    1000013b <floppyMotorFunction(void*)+0xcb>
100000b5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100000b8:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
100000bb:	83 c2 5c             	add    edx,0x5c
100000be:	8b 04 90             	mov    eax,DWORD PTR [eax+edx*4]
100000c1:	8d 88 70 fe ff ff    	lea    ecx,[eax-0x190]
100000c7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100000ca:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
100000cd:	83 c2 5c             	add    edx,0x5c
100000d0:	89 0c 90             	mov    DWORD PTR [eax+edx*4],ecx
100000d3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100000d6:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
100000d9:	83 c2 5c             	add    edx,0x5c
100000dc:	8b 04 90             	mov    eax,DWORD PTR [eax+edx*4]
100000df:	85 c0                	test   eax,eax
100000e1:	7f 58                	jg     1000013b <floppyMotorFunction(void*)+0xcb>
100000e3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100000e6:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
100000e9:	83 c2 58             	add    edx,0x58
100000ec:	c7 04 90 00 00 00 00 	mov    DWORD PTR [eax+edx*4],0x0
100000f3:	e8 fc ff ff ff       	call   100000f4 <floppyMotorFunction(void*)+0x84>	100000f4: R_386_PC32	lockScheduler()
100000f8:	83 ec 08             	sub    esp,0x8
100000fb:	6a 02                	push   0x2
100000fd:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000100:	e8 fc ff ff ff       	call   10000101 <floppyMotorFunction(void*)+0x91>	10000101: R_386_PC32	Floppy::readPort(FloppyReg)
10000105:	83 c4 10             	add    esp,0x10
10000108:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
1000010b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
1000010e:	ba 10 00 00 00       	mov    edx,0x10
10000113:	88 c1                	mov    cl,al
10000115:	d3 e2                	shl    edx,cl
10000117:	89 d0                	mov    eax,edx
10000119:	f7 d0                	not    eax
1000011b:	88 c2                	mov    dl,al
1000011d:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
10000120:	21 d0                	and    eax,edx
10000122:	0f b6 c0             	movzx  eax,al
10000125:	83 ec 04             	sub    esp,0x4
10000128:	50                   	push   eax
10000129:	6a 02                	push   0x2
1000012b:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
1000012e:	e8 fc ff ff ff       	call   1000012f <floppyMotorFunction(void*)+0xbf>	1000012f: R_386_PC32	Floppy::writePort(FloppyReg, unsigned char)
10000133:	83 c4 10             	add    esp,0x10
10000136:	e8 fc ff ff ff       	call   10000137 <floppyMotorFunction(void*)+0xc7>	10000137: R_386_PC32	unlockScheduler()
1000013b:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
1000013e:	e9 57 ff ff ff       	jmp    1000009a <floppyMotorFunction(void*)+0x2a>
10000143:	90                   	nop

10000144 <Floppy::Floppy()>:
10000144:	55                   	push   ebp
10000145:	89 e5                	mov    ebp,esp
10000147:	83 ec 08             	sub    esp,0x8
1000014a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000014d:	83 ec 08             	sub    esp,0x8
10000150:	68 68 0c 00 10       	push   0x10000c68	10000151: R_386_32	.text
10000155:	50                   	push   eax
10000156:	e8 fc ff ff ff       	call   10000157 <Floppy::Floppy()+0x13>	10000157: R_386_PC32	HardDiskController::HardDiskController(char const*)
1000015b:	83 c4 10             	add    esp,0x10
1000015e:	ba 08 00 00 00       	mov    edx,0x8	1000015f: R_386_32	vtable for Floppy
10000163:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000166:	89 10                	mov    DWORD PTR [eax],edx
10000168:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000016b:	66 c7 80 58 01 00 00 f0 03 	mov    WORD PTR [eax+0x158],0x3f0
10000174:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000177:	c6 80 80 01 00 00 01 	mov    BYTE PTR [eax+0x180],0x1
1000017e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000181:	c6 80 81 01 00 00 00 	mov    BYTE PTR [eax+0x181],0x0
10000188:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000018b:	c6 80 82 01 00 00 00 	mov    BYTE PTR [eax+0x182],0x0
10000192:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000195:	c6 80 83 01 00 00 00 	mov    BYTE PTR [eax+0x183],0x0
1000019c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000019f:	c6 80 84 01 00 00 01 	mov    BYTE PTR [eax+0x184],0x1
100001a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100001a9:	c6 80 85 01 00 00 01 	mov    BYTE PTR [eax+0x185],0x1
100001b0:	83 ec 0c             	sub    esp,0xc
100001b3:	68 7f 0c 00 10       	push   0x10000c7f	100001b4: R_386_32	.text
100001b8:	e8 fc ff ff ff       	call   100001b9 <Floppy::Floppy()+0x75>	100001b9: R_386_PC32	Dbg::kprintf(char const*, ...)
100001bd:	83 c4 10             	add    esp,0x10
100001c0:	a1 00 00 00 00       	mov    eax,ds:0x0	100001c1: R_386_32	kernelProcess
100001c5:	68 d2 00 00 00       	push   0xd2
100001ca:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100001cd:	68 00 00 00 00       	push   0x0	100001ce: R_386_32	floppyMotorFunction(void*)
100001d2:	50                   	push   eax
100001d3:	e8 fc ff ff ff       	call   100001d4 <Floppy::Floppy()+0x90>	100001d4: R_386_PC32	Process::createThread(void (*)(void*), void*, int)
100001d8:	83 c4 10             	add    esp,0x10
100001db:	89 c2                	mov    edx,eax
100001dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100001e0:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
100001e6:	90                   	nop
100001e7:	c9                   	leave  
100001e8:	c3                   	ret    
100001e9:	90                   	nop

100001ea <Floppy::wasFailure()>:
100001ea:	55                   	push   ebp
100001eb:	89 e5                	mov    ebp,esp
100001ed:	83 ec 10             	sub    esp,0x10
100001f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100001f3:	c6 80 83 01 00 00 01 	mov    BYTE PTR [eax+0x183],0x1
100001fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100001fd:	8a 80 82 01 00 00    	mov    al,BYTE PTR [eax+0x182]
10000203:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
10000206:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000209:	c6 80 82 01 00 00 00 	mov    BYTE PTR [eax+0x182],0x0
10000210:	8a 45 ff             	mov    al,BYTE PTR [ebp-0x1]
10000213:	c9                   	leave  
10000214:	c3                   	ret    
10000215:	90                   	nop

10000216 <Floppy::writeCommand(unsigned char)>:
10000216:	55                   	push   ebp
10000217:	89 e5                	mov    ebp,esp
10000219:	83 ec 28             	sub    esp,0x28
1000021c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
1000021f:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
10000222:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000225:	8a 80 82 01 00 00    	mov    al,BYTE PTR [eax+0x182]
1000022b:	84 c0                	test   al,al
1000022d:	74 10                	je     1000023f <Floppy::writeCommand(unsigned char)+0x29>
1000022f:	83 ec 0c             	sub    esp,0xc
10000232:	68 94 0c 00 10       	push   0x10000c94	10000233: R_386_32	.text
10000237:	e8 fc ff ff ff       	call   10000238 <Floppy::writeCommand(unsigned char)+0x22>	10000238: R_386_PC32	Krnl::panic(char const*)
1000023c:	83 c4 10             	add    esp,0x10
1000023f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000242:	8a 80 83 01 00 00    	mov    al,BYTE PTR [eax+0x183]
10000248:	83 f0 01             	xor    eax,0x1
1000024b:	84 c0                	test   al,al
1000024d:	74 10                	je     1000025f <Floppy::writeCommand(unsigned char)+0x49>
1000024f:	83 ec 0c             	sub    esp,0xc
10000252:	68 c4 0c 00 10       	push   0x10000cc4	10000253: R_386_32	.text
10000257:	e8 fc ff ff ff       	call   10000258 <Floppy::writeCommand(unsigned char)+0x42>	10000258: R_386_PC32	Krnl::panic(char const*)
1000025c:	83 c4 10             	add    esp,0x10
1000025f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000262:	c6 80 83 01 00 00 00 	mov    BYTE PTR [eax+0x183],0x0
10000269:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000026c:	c6 80 82 01 00 00 00 	mov    BYTE PTR [eax+0x182],0x0
10000273:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
1000027a:	83 7d f4 31          	cmp    DWORD PTR [ebp-0xc],0x31
1000027e:	7f 53                	jg     100002d3 <Floppy::writeCommand(unsigned char)+0xbd>
10000280:	83 ec 08             	sub    esp,0x8
10000283:	6a 00                	push   0x0
10000285:	68 80 96 98 00       	push   0x989680
1000028a:	e8 fc ff ff ff       	call   1000028b <Floppy::writeCommand(unsigned char)+0x75>	1000028b: R_386_PC32	nanoSleep(unsigned long long)
1000028f:	83 c4 10             	add    esp,0x10
10000292:	83 ec 08             	sub    esp,0x8
10000295:	6a 04                	push   0x4
10000297:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000029a:	e8 fc ff ff ff       	call   1000029b <Floppy::writeCommand(unsigned char)+0x85>	1000029b: R_386_PC32	Floppy::readPort(FloppyReg)
1000029f:	83 c4 10             	add    esp,0x10
100002a2:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
100002a5:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
100002a8:	84 c0                	test   al,al
100002aa:	79 22                	jns    100002ce <Floppy::writeCommand(unsigned char)+0xb8>
100002ac:	0f b6 45 f3          	movzx  eax,BYTE PTR [ebp-0xd]
100002b0:	83 e0 40             	and    eax,0x40
100002b3:	85 c0                	test   eax,eax
100002b5:	75 17                	jne    100002ce <Floppy::writeCommand(unsigned char)+0xb8>
100002b7:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
100002bb:	83 ec 04             	sub    esp,0x4
100002be:	50                   	push   eax
100002bf:	6a 05                	push   0x5
100002c1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100002c4:	e8 fc ff ff ff       	call   100002c5 <Floppy::writeCommand(unsigned char)+0xaf>	100002c5: R_386_PC32	Floppy::writePort(FloppyReg, unsigned char)
100002c9:	83 c4 10             	add    esp,0x10
100002cc:	eb 0f                	jmp    100002dd <Floppy::writeCommand(unsigned char)+0xc7>
100002ce:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
100002d1:	eb a7                	jmp    1000027a <Floppy::writeCommand(unsigned char)+0x64>
100002d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002d6:	c6 80 82 01 00 00 01 	mov    BYTE PTR [eax+0x182],0x1
100002dd:	c9                   	leave  
100002de:	c3                   	ret    
100002df:	90                   	nop

100002e0 <Floppy::readData()>:
100002e0:	55                   	push   ebp
100002e1:	89 e5                	mov    ebp,esp
100002e3:	83 ec 18             	sub    esp,0x18
100002e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002e9:	8a 80 82 01 00 00    	mov    al,BYTE PTR [eax+0x182]
100002ef:	84 c0                	test   al,al
100002f1:	74 10                	je     10000303 <Floppy::readData()+0x23>
100002f3:	83 ec 0c             	sub    esp,0xc
100002f6:	68 94 0c 00 10       	push   0x10000c94	100002f7: R_386_32	.text
100002fb:	e8 fc ff ff ff       	call   100002fc <Floppy::readData()+0x1c>	100002fc: R_386_PC32	Krnl::panic(char const*)
10000300:	83 c4 10             	add    esp,0x10
10000303:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000306:	8a 80 83 01 00 00    	mov    al,BYTE PTR [eax+0x183]
1000030c:	83 f0 01             	xor    eax,0x1
1000030f:	84 c0                	test   al,al
10000311:	74 10                	je     10000323 <Floppy::readData()+0x43>
10000313:	83 ec 0c             	sub    esp,0xc
10000316:	68 c4 0c 00 10       	push   0x10000cc4	10000317: R_386_32	.text
1000031b:	e8 fc ff ff ff       	call   1000031c <Floppy::readData()+0x3c>	1000031c: R_386_PC32	Krnl::panic(char const*)
10000320:	83 c4 10             	add    esp,0x10
10000323:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000326:	c6 80 83 01 00 00 00 	mov    BYTE PTR [eax+0x183],0x0
1000032d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000330:	c6 80 82 01 00 00 00 	mov    BYTE PTR [eax+0x182],0x0
10000337:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
1000033e:	83 7d f4 31          	cmp    DWORD PTR [ebp-0xc],0x31
10000342:	7f 4e                	jg     10000392 <Floppy::readData()+0xb2>
10000344:	83 ec 08             	sub    esp,0x8
10000347:	6a 00                	push   0x0
10000349:	68 80 96 98 00       	push   0x989680
1000034e:	e8 fc ff ff ff       	call   1000034f <Floppy::readData()+0x6f>	1000034f: R_386_PC32	nanoSleep(unsigned long long)
10000353:	83 c4 10             	add    esp,0x10
10000356:	83 ec 08             	sub    esp,0x8
10000359:	6a 04                	push   0x4
1000035b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000035e:	e8 fc ff ff ff       	call   1000035f <Floppy::readData()+0x7f>	1000035f: R_386_PC32	Floppy::readPort(FloppyReg)
10000363:	83 c4 10             	add    esp,0x10
10000366:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
10000369:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
1000036c:	84 c0                	test   al,al
1000036e:	79 1d                	jns    1000038d <Floppy::readData()+0xad>
10000370:	0f b6 45 f3          	movzx  eax,BYTE PTR [ebp-0xd]
10000374:	83 e0 40             	and    eax,0x40
10000377:	85 c0                	test   eax,eax
10000379:	74 12                	je     1000038d <Floppy::readData()+0xad>
1000037b:	83 ec 08             	sub    esp,0x8
1000037e:	6a 05                	push   0x5
10000380:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000383:	e8 fc ff ff ff       	call   10000384 <Floppy::readData()+0xa4>	10000384: R_386_PC32	Floppy::readPort(FloppyReg)
10000388:	83 c4 10             	add    esp,0x10
1000038b:	eb 11                	jmp    1000039e <Floppy::readData()+0xbe>
1000038d:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10000390:	eb ac                	jmp    1000033e <Floppy::readData()+0x5e>
10000392:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000395:	c6 80 82 01 00 00 01 	mov    BYTE PTR [eax+0x182],0x1
1000039c:	b0 00                	mov    al,0x0
1000039e:	c9                   	leave  
1000039f:	c3                   	ret    

100003a0 <Floppy::readPort(FloppyReg)>:
100003a0:	55                   	push   ebp
100003a1:	89 e5                	mov    ebp,esp
100003a3:	83 ec 10             	sub    esp,0x10
100003a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100003a9:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
100003af:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
100003b2:	01 d0                	add    eax,edx
100003b4:	0f b7 c0             	movzx  eax,ax
100003b7:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
100003bb:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
100003bf:	89 c2                	mov    edx,eax
100003c1:	ec                   	in     al,dx
100003c2:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
100003c5:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
100003c8:	90                   	nop
100003c9:	c9                   	leave  
100003ca:	c3                   	ret    
100003cb:	90                   	nop

100003cc <Floppy::writePort(FloppyReg, unsigned char)>:
100003cc:	55                   	push   ebp
100003cd:	89 e5                	mov    ebp,esp
100003cf:	83 ec 14             	sub    esp,0x14
100003d2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
100003d5:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
100003d8:	0f b6 4d ec          	movzx  ecx,BYTE PTR [ebp-0x14]
100003dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100003df:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
100003e5:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
100003e8:	01 d0                	add    eax,edx
100003ea:	0f b7 c0             	movzx  eax,ax
100003ed:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
100003f1:	88 4d fd             	mov    BYTE PTR [ebp-0x3],cl
100003f4:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
100003f7:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
100003fb:	ee                   	out    dx,al
100003fc:	90                   	nop
100003fd:	c9                   	leave  
100003fe:	c3                   	ret    
100003ff:	90                   	nop

10000400 <Floppy::driveDetection()>:
10000400:	55                   	push   ebp
10000401:	89 e5                	mov    ebp,esp
10000403:	57                   	push   edi
10000404:	56                   	push   esi
10000405:	53                   	push   ebx
10000406:	83 ec 1c             	sub    esp,0x1c
10000409:	83 ec 0c             	sub    esp,0xc
1000040c:	68 f2 0c 00 10       	push   0x10000cf2	1000040d: R_386_32	.text
10000411:	e8 fc ff ff ff       	call   10000412 <Floppy::driveDetection()+0x12>	10000412: R_386_PC32	Dbg::kprintf(char const*, ...)
10000416:	83 c4 10             	add    esp,0x10
10000419:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000041c:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
10000422:	66 3d f0 03          	cmp    ax,0x3f0
10000426:	0f 85 92 00 00 00    	jne    100004be <Floppy::driveDetection()+0xbe>
1000042c:	a1 00 00 00 00       	mov    eax,ds:0x0	1000042d: R_386_32	Krnl::computer
10000431:	83 ec 08             	sub    esp,0x8
10000434:	6a 10                	push   0x10
10000436:	50                   	push   eax
10000437:	e8 fc ff ff ff       	call   10000438 <Floppy::driveDetection()+0x38>	10000438: R_386_PC32	Computer::readCMOS(unsigned char)
1000043c:	83 c4 10             	add    esp,0x10
1000043f:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
10000442:	0f b6 45 e7          	movzx  eax,BYTE PTR [ebp-0x19]
10000446:	c1 f8 04             	sar    eax,0x4
10000449:	89 c2                	mov    edx,eax
1000044b:	83 ec 04             	sub    esp,0x4
1000044e:	89 d0                	mov    eax,edx
10000450:	c1 e0 02             	shl    eax,0x2
10000453:	01 d0                	add    eax,edx
10000455:	c1 e0 02             	shl    eax,0x2
10000458:	01 d0                	add    eax,edx
1000045a:	05 00 00 00 00       	add    eax,0x0	1000045b: R_386_32	floppyTable
1000045f:	83 ec 18             	sub    esp,0x18
10000462:	89 e2                	mov    edx,esp
10000464:	89 c3                	mov    ebx,eax
10000466:	b8 15 00 00 00       	mov    eax,0x15
1000046b:	89 d7                	mov    edi,edx
1000046d:	89 de                	mov    esi,ebx
1000046f:	89 c1                	mov    ecx,eax
10000471:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
10000473:	68 0c 0d 00 10       	push   0x10000d0c	10000474: R_386_32	.text
10000478:	e8 fc ff ff ff       	call   10000479 <Floppy::driveDetection()+0x79>	10000479: R_386_PC32	Dbg::kprintf(char const*, ...)
1000047d:	83 c4 20             	add    esp,0x20
10000480:	0f b6 45 e7          	movzx  eax,BYTE PTR [ebp-0x19]
10000484:	83 e0 0f             	and    eax,0xf
10000487:	89 c2                	mov    edx,eax
10000489:	83 ec 04             	sub    esp,0x4
1000048c:	89 d0                	mov    eax,edx
1000048e:	c1 e0 02             	shl    eax,0x2
10000491:	01 d0                	add    eax,edx
10000493:	c1 e0 02             	shl    eax,0x2
10000496:	01 d0                	add    eax,edx
10000498:	05 00 00 00 00       	add    eax,0x0	10000499: R_386_32	floppyTable
1000049d:	83 ec 18             	sub    esp,0x18
100004a0:	89 e2                	mov    edx,esp
100004a2:	89 c3                	mov    ebx,eax
100004a4:	b8 15 00 00 00       	mov    eax,0x15
100004a9:	89 d7                	mov    edi,edx
100004ab:	89 de                	mov    esi,ebx
100004ad:	89 c1                	mov    ecx,eax
100004af:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
100004b1:	68 1e 0d 00 10       	push   0x10000d1e	100004b2: R_386_32	.text
100004b6:	e8 fc ff ff ff       	call   100004b7 <Floppy::driveDetection()+0xb7>	100004b7: R_386_PC32	Dbg::kprintf(char const*, ...)
100004bb:	83 c4 20             	add    esp,0x20
100004be:	90                   	nop
100004bf:	8d 65 f4             	lea    esp,[ebp-0xc]
100004c2:	5b                   	pop    ebx
100004c3:	5e                   	pop    esi
100004c4:	5f                   	pop    edi
100004c5:	5d                   	pop    ebp
100004c6:	c3                   	ret    
100004c7:	90                   	nop

100004c8 <Floppy::close(int, int, void*)>:
100004c8:	b8 00 00 00 00       	mov    eax,0x0
100004cd:	c3                   	ret    

100004ce <Floppy::open(int, int, void*)>:
100004ce:	b8 00 00 00 00       	mov    eax,0x0
100004d3:	c3                   	ret    

100004d4 <Floppy::_open(int, int, void*)>:
100004d4:	55                   	push   ebp
100004d5:	89 e5                	mov    ebp,esp
100004d7:	83 ec 18             	sub    esp,0x18
100004da:	83 ec 0c             	sub    esp,0xc
100004dd:	68 30 0d 00 10       	push   0x10000d30	100004de: R_386_32	.text
100004e2:	e8 fc ff ff ff       	call   100004e3 <Floppy::_open(int, int, void*)+0xf>	100004e3: R_386_PC32	Dbg::kprintf(char const*, ...)
100004e7:	83 c4 10             	add    esp,0x10
100004ea:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100004ed:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
100004f0:	66 89 82 58 01 00 00 	mov    WORD PTR [edx+0x158],ax
100004f7:	83 ec 0c             	sub    esp,0xc
100004fa:	68 40 0d 00 10       	push   0x10000d40	100004fb: R_386_32	.text
100004ff:	e8 fc ff ff ff       	call   10000500 <Floppy::_open(int, int, void*)+0x2c>	10000500: R_386_PC32	Dbg::kprintf(char const*, ...)
10000504:	83 c4 10             	add    esp,0x10
10000507:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000050a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10000510:	0f b6 c8             	movzx  ecx,al
10000513:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000516:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
1000051c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
1000051f:	66 89 44 8a 04       	mov    WORD PTR [edx+ecx*4+0x4],ax
10000524:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000527:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
1000052d:	0f b6 d0             	movzx  edx,al
10000530:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000533:	c6 44 90 06 06       	mov    BYTE PTR [eax+edx*4+0x6],0x6
10000538:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000053b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10000541:	8d 50 01             	lea    edx,[eax+0x1]
10000544:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
10000547:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
1000054d:	0f b6 d0             	movzx  edx,al
10000550:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000553:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
10000557:	83 e1 3f             	and    ecx,0x3f
1000055a:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
1000055e:	83 ec 0c             	sub    esp,0xc
10000561:	68 50 0d 00 10       	push   0x10000d50	10000562: R_386_32	.text
10000566:	e8 fc ff ff ff       	call   10000567 <Floppy::_open(int, int, void*)+0x93>	10000567: R_386_PC32	Dbg::kprintf(char const*, ...)
1000056b:	83 c4 10             	add    esp,0x10
1000056e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000571:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
10000577:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
1000057a:	8a 92 c4 00 00 00    	mov    dl,BYTE PTR [edx+0xc4]
10000580:	0f b6 ca             	movzx  ecx,dl
10000583:	83 c0 07             	add    eax,0x7
10000586:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10000589:	66 89 44 8a 04       	mov    WORD PTR [edx+ecx*4+0x4],ax
1000058e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000591:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10000597:	0f b6 d0             	movzx  edx,al
1000059a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000059d:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
100005a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100005a5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
100005ab:	8d 50 01             	lea    edx,[eax+0x1]
100005ae:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
100005b1:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
100005b7:	0f b6 d0             	movzx  edx,al
100005ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100005bd:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
100005c1:	83 e1 3f             	and    ecx,0x3f
100005c4:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
100005c8:	83 ec 0c             	sub    esp,0xc
100005cb:	68 60 0d 00 10       	push   0x10000d60	100005cc: R_386_32	.text
100005d0:	e8 fc ff ff ff       	call   100005d1 <Floppy::_open(int, int, void*)+0xfd>	100005d1: R_386_PC32	Dbg::kprintf(char const*, ...)
100005d5:	83 c4 10             	add    esp,0x10
100005d8:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
100005df:	83 7d f4 03          	cmp    DWORD PTR [ebp-0xc],0x3
100005e3:	7f 26                	jg     1000060b <Floppy::_open(int, int, void*)+0x137>
100005e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100005e8:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
100005eb:	83 c2 64             	add    edx,0x64
100005ee:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
100005f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100005f9:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
100005fc:	83 c2 58             	add    edx,0x58
100005ff:	c7 04 90 00 00 00 00 	mov    DWORD PTR [eax+edx*4],0x0
10000606:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10000609:	eb d4                	jmp    100005df <Floppy::_open(int, int, void*)+0x10b>
1000060b:	83 ec 0c             	sub    esp,0xc
1000060e:	68 70 0d 00 10       	push   0x10000d70	1000060f: R_386_32	.text
10000613:	e8 fc ff ff ff       	call   10000614 <Floppy::_open(int, int, void*)+0x140>	10000614: R_386_PC32	Dbg::kprintf(char const*, ...)
10000618:	83 c4 10             	add    esp,0x10
1000061b:	83 ec 0c             	sub    esp,0xc
1000061e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000621:	e8 fc ff ff ff       	call   10000622 <Floppy::_open(int, int, void*)+0x14e>	10000622: R_386_PC32	Floppy::wasFailure()
10000626:	83 c4 10             	add    esp,0x10
10000629:	83 ec 0c             	sub    esp,0xc
1000062c:	68 80 0d 00 10       	push   0x10000d80	1000062d: R_386_32	.text
10000631:	e8 fc ff ff ff       	call   10000632 <Floppy::_open(int, int, void*)+0x15e>	10000632: R_386_PC32	Dbg::kprintf(char const*, ...)
10000636:	83 c4 10             	add    esp,0x10
10000639:	83 ec 0c             	sub    esp,0xc
1000063c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000063f:	e8 fc ff ff ff       	call   10000640 <Floppy::_open(int, int, void*)+0x16c>	10000640: R_386_PC32	Floppy::reset()
10000644:	83 c4 10             	add    esp,0x10
10000647:	83 ec 0c             	sub    esp,0xc
1000064a:	68 90 0d 00 10       	push   0x10000d90	1000064b: R_386_32	.text
1000064f:	e8 fc ff ff ff       	call   10000650 <Floppy::_open(int, int, void*)+0x17c>	10000650: R_386_PC32	Dbg::kprintf(char const*, ...)
10000654:	83 c4 10             	add    esp,0x10
10000657:	83 ec 0c             	sub    esp,0xc
1000065a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000065d:	e8 fc ff ff ff       	call   1000065e <Floppy::_open(int, int, void*)+0x18a>	1000065e: R_386_PC32	Floppy::driveDetection()
10000662:	83 c4 10             	add    esp,0x10
10000665:	83 ec 0c             	sub    esp,0xc
10000668:	68 a0 0d 00 10       	push   0x10000da0	10000669: R_386_32	.text
1000066d:	e8 fc ff ff ff       	call   1000066e <Floppy::_open(int, int, void*)+0x19a>	1000066e: R_386_PC32	Dbg::kprintf(char const*, ...)
10000672:	83 c4 10             	add    esp,0x10
10000675:	b8 00 00 00 00       	mov    eax,0x0
1000067a:	c9                   	leave  
1000067b:	c3                   	ret    

1000067c <Floppy::senseInterrupt(int*, int*)>:
1000067c:	55                   	push   ebp
1000067d:	89 e5                	mov    ebp,esp
1000067f:	83 ec 08             	sub    esp,0x8
10000682:	83 ec 08             	sub    esp,0x8
10000685:	6a 08                	push   0x8
10000687:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000068a:	e8 fc ff ff ff       	call   1000068b <Floppy::senseInterrupt(int*, int*)+0xf>	1000068b: R_386_PC32	Floppy::writeCommand(unsigned char)
1000068f:	83 c4 10             	add    esp,0x10
10000692:	83 ec 0c             	sub    esp,0xc
10000695:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000698:	e8 fc ff ff ff       	call   10000699 <Floppy::senseInterrupt(int*, int*)+0x1d>	10000699: R_386_PC32	Floppy::wasFailure()
1000069d:	83 c4 10             	add    esp,0x10
100006a0:	84 c0                	test   al,al
100006a2:	74 04                	je     100006a8 <Floppy::senseInterrupt(int*, int*)+0x2c>
100006a4:	b0 00                	mov    al,0x0
100006a6:	eb 5a                	jmp    10000702 <Floppy::senseInterrupt(int*, int*)+0x86>
100006a8:	83 ec 0c             	sub    esp,0xc
100006ab:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100006ae:	e8 fc ff ff ff       	call   100006af <Floppy::senseInterrupt(int*, int*)+0x33>	100006af: R_386_PC32	Floppy::readData()
100006b3:	83 c4 10             	add    esp,0x10
100006b6:	0f b6 d0             	movzx  edx,al
100006b9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100006bc:	89 10                	mov    DWORD PTR [eax],edx
100006be:	83 ec 0c             	sub    esp,0xc
100006c1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100006c4:	e8 fc ff ff ff       	call   100006c5 <Floppy::senseInterrupt(int*, int*)+0x49>	100006c5: R_386_PC32	Floppy::wasFailure()
100006c9:	83 c4 10             	add    esp,0x10
100006cc:	84 c0                	test   al,al
100006ce:	74 04                	je     100006d4 <Floppy::senseInterrupt(int*, int*)+0x58>
100006d0:	b0 00                	mov    al,0x0
100006d2:	eb 2e                	jmp    10000702 <Floppy::senseInterrupt(int*, int*)+0x86>
100006d4:	83 ec 0c             	sub    esp,0xc
100006d7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100006da:	e8 fc ff ff ff       	call   100006db <Floppy::senseInterrupt(int*, int*)+0x5f>	100006db: R_386_PC32	Floppy::readData()
100006df:	83 c4 10             	add    esp,0x10
100006e2:	0f b6 d0             	movzx  edx,al
100006e5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
100006e8:	89 10                	mov    DWORD PTR [eax],edx
100006ea:	83 ec 0c             	sub    esp,0xc
100006ed:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100006f0:	e8 fc ff ff ff       	call   100006f1 <Floppy::senseInterrupt(int*, int*)+0x75>	100006f1: R_386_PC32	Floppy::wasFailure()
100006f5:	83 c4 10             	add    esp,0x10
100006f8:	84 c0                	test   al,al
100006fa:	74 04                	je     10000700 <Floppy::senseInterrupt(int*, int*)+0x84>
100006fc:	b0 00                	mov    al,0x0
100006fe:	eb 02                	jmp    10000702 <Floppy::senseInterrupt(int*, int*)+0x86>
10000700:	b0 01                	mov    al,0x1
10000702:	c9                   	leave  
10000703:	c3                   	ret    

10000704 <Floppy::lock()>:
10000704:	55                   	push   ebp
10000705:	89 e5                	mov    ebp,esp
10000707:	83 ec 08             	sub    esp,0x8
1000070a:	83 ec 08             	sub    esp,0x8
1000070d:	6a 14                	push   0x14
1000070f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000712:	e8 fc ff ff ff       	call   10000713 <Floppy::lock()+0xf>	10000713: R_386_PC32	Floppy::writeCommand(unsigned char)
10000717:	83 c4 10             	add    esp,0x10
1000071a:	83 ec 0c             	sub    esp,0xc
1000071d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000720:	e8 fc ff ff ff       	call   10000721 <Floppy::lock()+0x1d>	10000721: R_386_PC32	Floppy::wasFailure()
10000725:	83 c4 10             	add    esp,0x10
10000728:	84 c0                	test   al,al
1000072a:	74 04                	je     10000730 <Floppy::lock()+0x2c>
1000072c:	b0 00                	mov    al,0x0
1000072e:	eb 26                	jmp    10000756 <Floppy::lock()+0x52>
10000730:	83 ec 0c             	sub    esp,0xc
10000733:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000736:	e8 fc ff ff ff       	call   10000737 <Floppy::lock()+0x33>	10000737: R_386_PC32	Floppy::readData()
1000073b:	83 c4 10             	add    esp,0x10
1000073e:	83 ec 0c             	sub    esp,0xc
10000741:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000744:	e8 fc ff ff ff       	call   10000745 <Floppy::lock()+0x41>	10000745: R_386_PC32	Floppy::wasFailure()
10000749:	83 c4 10             	add    esp,0x10
1000074c:	84 c0                	test   al,al
1000074e:	74 04                	je     10000754 <Floppy::lock()+0x50>
10000750:	b0 00                	mov    al,0x0
10000752:	eb 02                	jmp    10000756 <Floppy::lock()+0x52>
10000754:	b0 01                	mov    al,0x1
10000756:	c9                   	leave  
10000757:	c3                   	ret    

10000758 <Floppy::reset()>:
10000758:	55                   	push   ebp
10000759:	89 e5                	mov    ebp,esp
1000075b:	83 ec 28             	sub    esp,0x28
1000075e:	6a 02                	push   0x2
10000760:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000763:	e8 fc ff ff ff       	call   10000764 <Floppy::reset()+0xc>	10000764: R_386_PC32	Floppy::readPort(FloppyReg)
10000768:	83 c4 08             	add    esp,0x8
1000076b:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
1000076e:	6a 00                	push   0x0
10000770:	6a 02                	push   0x2
10000772:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000775:	e8 fc ff ff ff       	call   10000776 <Floppy::reset()+0x1e>	10000776: R_386_PC32	Floppy::writePort(FloppyReg, unsigned char)
1000077a:	83 c4 0c             	add    esp,0xc
1000077d:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
10000780:	83 c8 04             	or     eax,0x4
10000783:	0f b6 c0             	movzx  eax,al
10000786:	50                   	push   eax
10000787:	6a 02                	push   0x2
10000789:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000078c:	e8 fc ff ff ff       	call   1000078d <Floppy::reset()+0x35>	1000078d: R_386_PC32	Floppy::writePort(FloppyReg, unsigned char)
10000791:	83 c4 0c             	add    esp,0xc
10000794:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
10000798:	83 e0 08             	and    eax,0x8
1000079b:	85 c0                	test   eax,eax
1000079d:	74 12                	je     100007b1 <Floppy::reset()+0x59>
1000079f:	83 ec 0c             	sub    esp,0xc
100007a2:	68 b0 0d 00 10       	push   0x10000db0	100007a3: R_386_32	.text
100007a7:	e8 fc ff ff ff       	call   100007a8 <Floppy::reset()+0x50>	100007a8: R_386_PC32	Krnl::panic(char const*)
100007ac:	83 c4 10             	add    esp,0x10
100007af:	eb 1a                	jmp    100007cb <Floppy::reset()+0x73>
100007b1:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
100007b4:	83 c8 0c             	or     eax,0xc
100007b7:	0f b6 c0             	movzx  eax,al
100007ba:	83 ec 04             	sub    esp,0x4
100007bd:	50                   	push   eax
100007be:	6a 02                	push   0x2
100007c0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100007c3:	e8 fc ff ff ff       	call   100007c4 <Floppy::reset()+0x6c>	100007c4: R_386_PC32	Floppy::writePort(FloppyReg, unsigned char)
100007c8:	83 c4 10             	add    esp,0x10
100007cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100007ce:	8a 80 85 01 00 00    	mov    al,BYTE PTR [eax+0x185]
100007d4:	84 c0                	test   al,al
100007d6:	0f 84 8f 00 00 00    	je     1000086b <Floppy::reset()+0x113>
100007dc:	83 ec 04             	sub    esp,0x4
100007df:	8d 45 e4             	lea    eax,[ebp-0x1c]
100007e2:	50                   	push   eax
100007e3:	8d 45 e8             	lea    eax,[ebp-0x18]
100007e6:	50                   	push   eax
100007e7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100007ea:	e8 fc ff ff ff       	call   100007eb <Floppy::reset()+0x93>	100007eb: R_386_PC32	Floppy::senseInterrupt(int*, int*)
100007ef:	83 c4 10             	add    esp,0x10
100007f2:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
100007f5:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
100007f9:	74 19                	je     10000814 <Floppy::reset()+0xbc>
100007fb:	83 ec 04             	sub    esp,0x4
100007fe:	8d 45 e4             	lea    eax,[ebp-0x1c]
10000801:	50                   	push   eax
10000802:	8d 45 e8             	lea    eax,[ebp-0x18]
10000805:	50                   	push   eax
10000806:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000809:	e8 fc ff ff ff       	call   1000080a <Floppy::reset()+0xb2>	1000080a: R_386_PC32	Floppy::senseInterrupt(int*, int*)
1000080e:	83 c4 10             	add    esp,0x10
10000811:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
10000814:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
10000818:	74 19                	je     10000833 <Floppy::reset()+0xdb>
1000081a:	83 ec 04             	sub    esp,0x4
1000081d:	8d 45 e4             	lea    eax,[ebp-0x1c]
10000820:	50                   	push   eax
10000821:	8d 45 e8             	lea    eax,[ebp-0x18]
10000824:	50                   	push   eax
10000825:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000828:	e8 fc ff ff ff       	call   10000829 <Floppy::reset()+0xd1>	10000829: R_386_PC32	Floppy::senseInterrupt(int*, int*)
1000082d:	83 c4 10             	add    esp,0x10
10000830:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
10000833:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
10000837:	74 19                	je     10000852 <Floppy::reset()+0xfa>
10000839:	83 ec 04             	sub    esp,0x4
1000083c:	8d 45 e4             	lea    eax,[ebp-0x1c]
1000083f:	50                   	push   eax
10000840:	8d 45 e8             	lea    eax,[ebp-0x18]
10000843:	50                   	push   eax
10000844:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000847:	e8 fc ff ff ff       	call   10000848 <Floppy::reset()+0xf0>	10000848: R_386_PC32	Floppy::senseInterrupt(int*, int*)
1000084c:	83 c4 10             	add    esp,0x10
1000084f:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
10000852:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
10000855:	83 f0 01             	xor    eax,0x1
10000858:	84 c0                	test   al,al
1000085a:	74 0f                	je     1000086b <Floppy::reset()+0x113>
1000085c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000085f:	c6 80 85 01 00 00 00 	mov    BYTE PTR [eax+0x185],0x0
10000866:	e9 f3 fe ff ff       	jmp    1000075e <Floppy::reset()+0x6>
1000086b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000086e:	8a 80 80 01 00 00    	mov    al,BYTE PTR [eax+0x180]
10000874:	84 c0                	test   al,al
10000876:	75 14                	jne    1000088c <Floppy::reset()+0x134>
10000878:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000087b:	8a 80 81 01 00 00    	mov    al,BYTE PTR [eax+0x181]
10000881:	83 f0 01             	xor    eax,0x1
10000884:	84 c0                	test   al,al
10000886:	0f 84 91 00 00 00    	je     1000091d <Floppy::reset()+0x1c5>
1000088c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000088f:	8a 80 84 01 00 00    	mov    al,BYTE PTR [eax+0x184]
10000895:	84 c0                	test   al,al
10000897:	74 3c                	je     100008d5 <Floppy::reset()+0x17d>
10000899:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
100008a0:	83 7d f0 03          	cmp    DWORD PTR [ebp-0x10],0x3
100008a4:	7f 2f                	jg     100008d5 <Floppy::reset()+0x17d>
100008a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100008a9:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
100008ac:	83 c2 64             	add    edx,0x64
100008af:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
100008b3:	85 c0                	test   eax,eax
100008b5:	74 19                	je     100008d0 <Floppy::reset()+0x178>
100008b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100008ba:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
100008bd:	83 c2 64             	add    edx,0x64
100008c0:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
100008c4:	83 ec 0c             	sub    esp,0xc
100008c7:	50                   	push   eax
100008c8:	e8 fc ff ff ff       	call   100008c9 <Floppy::reset()+0x171>	100008c9: R_386_PC32	FloppyDrive::floppyConfigure()
100008cd:	83 c4 10             	add    esp,0x10
100008d0:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
100008d3:	eb cb                	jmp    100008a0 <Floppy::reset()+0x148>
100008d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100008d8:	8a 80 81 01 00 00    	mov    al,BYTE PTR [eax+0x181]
100008de:	83 f0 01             	xor    eax,0x1
100008e1:	84 c0                	test   al,al
100008e3:	74 38                	je     1000091d <Floppy::reset()+0x1c5>
100008e5:	83 ec 0c             	sub    esp,0xc
100008e8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100008eb:	e8 fc ff ff ff       	call   100008ec <Floppy::reset()+0x194>	100008ec: R_386_PC32	Floppy::lock()
100008f0:	83 c4 10             	add    esp,0x10
100008f3:	83 f0 01             	xor    eax,0x1
100008f6:	88 c2                	mov    dl,al
100008f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100008fb:	88 90 80 01 00 00    	mov    BYTE PTR [eax+0x180],dl
10000901:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000904:	c6 80 81 01 00 00 01 	mov    BYTE PTR [eax+0x181],0x1
1000090b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000090e:	8a 80 80 01 00 00    	mov    al,BYTE PTR [eax+0x180]
10000914:	84 c0                	test   al,al
10000916:	74 05                	je     1000091d <Floppy::reset()+0x1c5>
10000918:	e9 41 fe ff ff       	jmp    1000075e <Floppy::reset()+0x6>
1000091d:	90                   	nop
1000091e:	c9                   	leave  
1000091f:	c3                   	ret    

10000920 <Floppy::motor(int, bool)>:
10000920:	55                   	push   ebp
10000921:	89 e5                	mov    ebp,esp
10000923:	83 ec 28             	sub    esp,0x28
10000926:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
10000929:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
1000092c:	80 7d e4 00          	cmp    BYTE PTR [ebp-0x1c],0x0
10000930:	0f 84 c7 00 00 00    	je     100009fd <Floppy::motor(int, bool)+0xdd>
10000936:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000939:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
1000093c:	83 c2 58             	add    edx,0x58
1000093f:	8b 04 90             	mov    eax,DWORD PTR [eax+edx*4]
10000942:	85 c0                	test   eax,eax
10000944:	0f 85 90 00 00 00    	jne    100009da <Floppy::motor(int, bool)+0xba>
1000094a:	e8 fc ff ff ff       	call   1000094b <Floppy::motor(int, bool)+0x2b>	1000094b: R_386_PC32	lockScheduler()
1000094f:	83 ec 08             	sub    esp,0x8
10000952:	6a 02                	push   0x2
10000954:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000957:	e8 fc ff ff ff       	call   10000958 <Floppy::motor(int, bool)+0x38>	10000958: R_386_PC32	Floppy::readPort(FloppyReg)
1000095c:	83 c4 10             	add    esp,0x10
1000095f:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
10000962:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000965:	ba 10 00 00 00       	mov    edx,0x10
1000096a:	88 c1                	mov    cl,al
1000096c:	d3 e2                	shl    edx,cl
1000096e:	89 d0                	mov    eax,edx
10000970:	88 c2                	mov    dl,al
10000972:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
10000975:	09 d0                	or     eax,edx
10000977:	0f b6 c0             	movzx  eax,al
1000097a:	83 ec 04             	sub    esp,0x4
1000097d:	50                   	push   eax
1000097e:	6a 02                	push   0x2
10000980:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000983:	e8 fc ff ff ff       	call   10000984 <Floppy::motor(int, bool)+0x64>	10000984: R_386_PC32	Floppy::writePort(FloppyReg, unsigned char)
10000988:	83 c4 10             	add    esp,0x10
1000098b:	e8 fc ff ff ff       	call   1000098c <Floppy::motor(int, bool)+0x6c>	1000098c: R_386_PC32	unlockScheduler()
10000990:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000993:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10000996:	83 c2 60             	add    edx,0x60
10000999:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
1000099d:	83 f8 04             	cmp    eax,0x4
100009a0:	75 14                	jne    100009b6 <Floppy::motor(int, bool)+0x96>
100009a2:	83 ec 08             	sub    esp,0x8
100009a5:	6a 00                	push   0x0
100009a7:	68 00 a3 e1 11       	push   0x11e1a300
100009ac:	e8 fc ff ff ff       	call   100009ad <Floppy::motor(int, bool)+0x8d>	100009ad: R_386_PC32	nanoSleep(unsigned long long)
100009b1:	83 c4 10             	add    esp,0x10
100009b4:	eb 12                	jmp    100009c8 <Floppy::motor(int, bool)+0xa8>
100009b6:	83 ec 08             	sub    esp,0x8
100009b9:	6a 00                	push   0x0
100009bb:	68 00 65 cd 1d       	push   0x1dcd6500
100009c0:	e8 fc ff ff ff       	call   100009c1 <Floppy::motor(int, bool)+0xa1>	100009c1: R_386_PC32	nanoSleep(unsigned long long)
100009c5:	83 c4 10             	add    esp,0x10
100009c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100009cb:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
100009ce:	83 c2 58             	add    edx,0x58
100009d1:	c7 04 90 01 00 00 00 	mov    DWORD PTR [eax+edx*4],0x1
100009d8:	eb 54                	jmp    10000a2e <Floppy::motor(int, bool)+0x10e>
100009da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100009dd:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
100009e0:	83 c2 58             	add    edx,0x58
100009e3:	8b 04 90             	mov    eax,DWORD PTR [eax+edx*4]
100009e6:	83 f8 02             	cmp    eax,0x2
100009e9:	75 43                	jne    10000a2e <Floppy::motor(int, bool)+0x10e>
100009eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100009ee:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
100009f1:	83 c2 58             	add    edx,0x58
100009f4:	c7 04 90 01 00 00 00 	mov    DWORD PTR [eax+edx*4],0x1
100009fb:	eb 31                	jmp    10000a2e <Floppy::motor(int, bool)+0x10e>
100009fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000a00:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10000a03:	83 c2 58             	add    edx,0x58
10000a06:	8b 04 90             	mov    eax,DWORD PTR [eax+edx*4]
10000a09:	83 f8 01             	cmp    eax,0x1
10000a0c:	75 20                	jne    10000a2e <Floppy::motor(int, bool)+0x10e>
10000a0e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000a11:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10000a14:	83 c2 58             	add    edx,0x58
10000a17:	c7 04 90 02 00 00 00 	mov    DWORD PTR [eax+edx*4],0x2
10000a1e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000a21:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10000a24:	83 c2 5c             	add    edx,0x5c
10000a27:	c7 04 90 c4 09 00 00 	mov    DWORD PTR [eax+edx*4],0x9c4
10000a2e:	90                   	nop
10000a2f:	c9                   	leave  
10000a30:	c3                   	ret    
10000a31:	90                   	nop
10000a32:	55                   	push   ebp
10000a33:	89 e5                	mov    ebp,esp
10000a35:	83 ec 08             	sub    esp,0x8
10000a38:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000a3b:	83 ec 04             	sub    esp,0x4
10000a3e:	68 00 02 00 00       	push   0x200
10000a43:	68 b8 0d 00 10       	push   0x10000db8	10000a44: R_386_32	.text
10000a48:	50                   	push   eax
10000a49:	e8 fc ff ff ff       	call   10000a4a <Floppy::motor(int, bool)+0x12a>	10000a4a: R_386_PC32	PhysicalDisk::PhysicalDisk(char const*, int)
10000a4e:	83 c4 10             	add    esp,0x10
10000a51:	ba 08 00 00 00       	mov    edx,0x8	10000a52: R_386_32	vtable for FloppyDrive
10000a56:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000a59:	89 10                	mov    DWORD PTR [eax],edx
10000a5b:	90                   	nop
10000a5c:	c9                   	leave  
10000a5d:	c3                   	ret    
10000a5e:	55                   	push   ebp
10000a5f:	89 e5                	mov    ebp,esp
10000a61:	83 ec 08             	sub    esp,0x8
10000a64:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000a67:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10000a6d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10000a70:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
10000a76:	83 ec 04             	sub    esp,0x4
10000a79:	6a 01                	push   0x1
10000a7b:	52                   	push   edx
10000a7c:	50                   	push   eax
10000a7d:	e8 fc ff ff ff       	call   10000a7e <Floppy::motor(int, bool)+0x15e>	10000a7e: R_386_PC32	Floppy::motor(int, bool)
10000a82:	83 c4 10             	add    esp,0x10
10000a85:	90                   	nop
10000a86:	c9                   	leave  
10000a87:	c3                   	ret    
10000a88:	55                   	push   ebp
10000a89:	89 e5                	mov    ebp,esp
10000a8b:	83 ec 08             	sub    esp,0x8
10000a8e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000a91:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10000a97:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10000a9a:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
10000aa0:	83 ec 04             	sub    esp,0x4
10000aa3:	6a 00                	push   0x0
10000aa5:	52                   	push   edx
10000aa6:	50                   	push   eax
10000aa7:	e8 fc ff ff ff       	call   10000aa8 <Floppy::motor(int, bool)+0x188>	10000aa8: R_386_PC32	Floppy::motor(int, bool)
10000aac:	83 c4 10             	add    esp,0x10
10000aaf:	90                   	nop
10000ab0:	c9                   	leave  
10000ab1:	c3                   	ret    

10000ab2 <FloppyDrive::floppyConfigure()>:
10000ab2:	55                   	push   ebp
10000ab3:	89 e5                	mov    ebp,esp
10000ab5:	83 ec 18             	sub    esp,0x18
10000ab8:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
10000abc:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
10000ac0:	c6 45 f5 01          	mov    BYTE PTR [ebp-0xb],0x1
10000ac4:	c7 45 f0 08 00 00 00 	mov    DWORD PTR [ebp-0x10],0x8
10000acb:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
10000ad2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000ad5:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10000adb:	83 ec 08             	sub    esp,0x8
10000ade:	6a 13                	push   0x13
10000ae0:	50                   	push   eax
10000ae1:	e8 fc ff ff ff       	call   10000ae2 <FloppyDrive::floppyConfigure()+0x30>	10000ae2: R_386_PC32	Floppy::writeCommand(unsigned char)
10000ae6:	83 c4 10             	add    esp,0x10
10000ae9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000aec:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10000af2:	83 ec 0c             	sub    esp,0xc
10000af5:	50                   	push   eax
10000af6:	e8 fc ff ff ff       	call   10000af7 <FloppyDrive::floppyConfigure()+0x45>	10000af7: R_386_PC32	Floppy::wasFailure()
10000afb:	83 c4 10             	add    esp,0x10
10000afe:	84 c0                	test   al,al
10000b00:	74 07                	je     10000b09 <FloppyDrive::floppyConfigure()+0x57>
10000b02:	b0 00                	mov    al,0x0
10000b04:	e9 de 00 00 00       	jmp    10000be7 <FloppyDrive::floppyConfigure()+0x135>
10000b09:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000b0c:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10000b12:	83 ec 08             	sub    esp,0x8
10000b15:	6a 00                	push   0x0
10000b17:	50                   	push   eax
10000b18:	e8 fc ff ff ff       	call   10000b19 <FloppyDrive::floppyConfigure()+0x67>	10000b19: R_386_PC32	Floppy::writeCommand(unsigned char)
10000b1d:	83 c4 10             	add    esp,0x10
10000b20:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000b23:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10000b29:	83 ec 0c             	sub    esp,0xc
10000b2c:	50                   	push   eax
10000b2d:	e8 fc ff ff ff       	call   10000b2e <FloppyDrive::floppyConfigure()+0x7c>	10000b2e: R_386_PC32	Floppy::wasFailure()
10000b32:	83 c4 10             	add    esp,0x10
10000b35:	84 c0                	test   al,al
10000b37:	74 07                	je     10000b40 <FloppyDrive::floppyConfigure()+0x8e>
10000b39:	b0 00                	mov    al,0x0
10000b3b:	e9 a7 00 00 00       	jmp    10000be7 <FloppyDrive::floppyConfigure()+0x135>
10000b40:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000b43:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10000b49:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
10000b4d:	c1 e2 06             	shl    edx,0x6
10000b50:	88 d1                	mov    cl,dl
10000b52:	0f b6 55 f6          	movzx  edx,BYTE PTR [ebp-0xa]
10000b56:	c1 e2 05             	shl    edx,0x5
10000b59:	09 d1                	or     ecx,edx
10000b5b:	0f b6 55 f5          	movzx  edx,BYTE PTR [ebp-0xb]
10000b5f:	c1 e2 04             	shl    edx,0x4
10000b62:	09 d1                	or     ecx,edx
10000b64:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
10000b67:	4a                   	dec    edx
10000b68:	09 ca                	or     edx,ecx
10000b6a:	0f b6 d2             	movzx  edx,dl
10000b6d:	83 ec 08             	sub    esp,0x8
10000b70:	52                   	push   edx
10000b71:	50                   	push   eax
10000b72:	e8 fc ff ff ff       	call   10000b73 <FloppyDrive::floppyConfigure()+0xc1>	10000b73: R_386_PC32	Floppy::writeCommand(unsigned char)
10000b77:	83 c4 10             	add    esp,0x10
10000b7a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000b7d:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10000b83:	83 ec 0c             	sub    esp,0xc
10000b86:	50                   	push   eax
10000b87:	e8 fc ff ff ff       	call   10000b88 <FloppyDrive::floppyConfigure()+0xd6>	10000b88: R_386_PC32	Floppy::wasFailure()
10000b8c:	83 c4 10             	add    esp,0x10
10000b8f:	84 c0                	test   al,al
10000b91:	74 04                	je     10000b97 <FloppyDrive::floppyConfigure()+0xe5>
10000b93:	b0 00                	mov    al,0x0
10000b95:	eb 50                	jmp    10000be7 <FloppyDrive::floppyConfigure()+0x135>
10000b97:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000b9a:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10000ba0:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
10000ba3:	0f b6 d2             	movzx  edx,dl
10000ba6:	83 ec 08             	sub    esp,0x8
10000ba9:	52                   	push   edx
10000baa:	50                   	push   eax
10000bab:	e8 fc ff ff ff       	call   10000bac <FloppyDrive::floppyConfigure()+0xfa>	10000bac: R_386_PC32	Floppy::writeCommand(unsigned char)
10000bb0:	83 c4 10             	add    esp,0x10
10000bb3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000bb6:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10000bbc:	83 ec 0c             	sub    esp,0xc
10000bbf:	50                   	push   eax
10000bc0:	e8 fc ff ff ff       	call   10000bc1 <FloppyDrive::floppyConfigure()+0x10f>	10000bc1: R_386_PC32	Floppy::wasFailure()
10000bc5:	83 c4 10             	add    esp,0x10
10000bc8:	84 c0                	test   al,al
10000bca:	74 04                	je     10000bd0 <FloppyDrive::floppyConfigure()+0x11e>
10000bcc:	b0 00                	mov    al,0x0
10000bce:	eb 17                	jmp    10000be7 <FloppyDrive::floppyConfigure()+0x135>
10000bd0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000bd3:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10000bd9:	8a 55 f5             	mov    dl,BYTE PTR [ebp-0xb]
10000bdc:	83 f2 01             	xor    edx,0x1
10000bdf:	88 90 85 01 00 00    	mov    BYTE PTR [eax+0x185],dl
10000be5:	b0 01                	mov    al,0x1
10000be7:	c9                   	leave  
10000be8:	c3                   	ret    
10000be9:	90                   	nop

10000bea <FloppyDrive::open(int, int, void*)>:
10000bea:	55                   	push   ebp
10000beb:	89 e5                	mov    ebp,esp
10000bed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000bf0:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
10000bf3:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
10000bf9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000bfc:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10000bff:	89 90 70 01 00 00    	mov    DWORD PTR [eax+0x170],edx
10000c05:	b8 00 00 00 00       	mov    eax,0x0
10000c0a:	5d                   	pop    ebp
10000c0b:	c3                   	ret    

10000c0c <FloppyDrive::close(int, int, void*)>:
10000c0c:	b8 00 00 00 00       	mov    eax,0x0
10000c11:	c3                   	ret    

10000c12 <Floppy::~Floppy()>:
10000c12:	55                   	push   ebp
10000c13:	89 e5                	mov    ebp,esp
10000c15:	83 ec 08             	sub    esp,0x8
10000c18:	ba 08 00 00 00       	mov    edx,0x8	10000c19: R_386_32	vtable for Floppy
10000c1d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000c20:	89 10                	mov    DWORD PTR [eax],edx
10000c22:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000c25:	83 ec 0c             	sub    esp,0xc
10000c28:	50                   	push   eax
10000c29:	e8 fc ff ff ff       	call   10000c2a <Floppy::~Floppy()+0x18>	10000c2a: R_386_PC32	HardDiskController::~HardDiskController()
10000c2e:	83 c4 10             	add    esp,0x10
10000c31:	90                   	nop
10000c32:	c9                   	leave  
10000c33:	c3                   	ret    

10000c34 <Floppy::~Floppy()>:
10000c34:	55                   	push   ebp
10000c35:	89 e5                	mov    ebp,esp
10000c37:	83 ec 08             	sub    esp,0x8
10000c3a:	83 ec 0c             	sub    esp,0xc
10000c3d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000c40:	e8 fc ff ff ff       	call   10000c41 <Floppy::~Floppy()+0xd>	10000c41: R_386_PC32	Floppy::~Floppy()
10000c45:	83 c4 10             	add    esp,0x10
10000c48:	83 ec 08             	sub    esp,0x8
10000c4b:	68 a8 01 00 00       	push   0x1a8
10000c50:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000c53:	e8 fc ff ff ff       	call   10000c54 <Floppy::~Floppy()+0x20>	10000c54: R_386_PC32	operator delete(void*, unsigned long)
10000c58:	83 c4 10             	add    esp,0x10
10000c5b:	c9                   	leave  
10000c5c:	c3                   	ret    
10000c5d:	66 90                	xchg   ax,ax
10000c5f:	90                   	nop
10000c60:	96                   	xchg   esi,eax
10000c61:	00 00                	add    BYTE PTR [eax],al
10000c63:	00 2c 01             	add    BYTE PTR [ecx+eax*1],ch
10000c66:	00 00                	add    BYTE PTR [eax],al
10000c68:	46                   	inc    esi
10000c69:	6c                   	ins    BYTE PTR es:[edi],dx
10000c6a:	6f                   	outs   dx,DWORD PTR ds:[esi]
10000c6b:	70 70                	jo     10000cdd <Floppy::~Floppy()+0xa9>
10000c6d:	79 20                	jns    10000c8f <Floppy::~Floppy()+0x5b>
10000c6f:	44                   	inc    esp
10000c70:	69 73 6b 20 43 6f 6e 	imul   esi,DWORD PTR [ebx+0x6b],0x6e6f4320
10000c77:	74 72                	je     10000ceb <Floppy::~Floppy()+0xb7>
10000c79:	6f                   	outs   dx,DWORD PTR ds:[esi]
10000c7a:	6c                   	ins    BYTE PTR es:[edi],dx
10000c7b:	6c                   	ins    BYTE PTR es:[edi],dx
10000c7c:	65 72 00             	gs jb  10000c7f <Floppy::~Floppy()+0x4b>
10000c7f:	46                   	inc    esi
10000c80:	6c                   	ins    BYTE PTR es:[edi],dx
10000c81:	6f                   	outs   dx,DWORD PTR ds:[esi]
10000c82:	70 70                	jo     10000cf4 <Floppy::~Floppy()+0xc0>
10000c84:	79 3a                	jns    10000cc0 <Floppy::~Floppy()+0x8c>
10000c86:	3a 46 6c             	cmp    al,BYTE PTR [esi+0x6c]
10000c89:	6f                   	outs   dx,DWORD PTR ds:[esi]
10000c8a:	70 70                	jo     10000cfc <Floppy::~Floppy()+0xc8>
10000c8c:	79 28                	jns    10000cb6 <Floppy::~Floppy()+0x82>
10000c8e:	29 0a                	sub    DWORD PTR [edx],ecx
10000c90:	00 00                	add    BYTE PTR [eax],al
10000c92:	00 00                	add    BYTE PTR [eax],al
10000c94:	50                   	push   eax
10000c95:	52                   	push   edx
10000c96:	45                   	inc    ebp
10000c97:	56                   	push   esi
10000c98:	49                   	dec    ecx
10000c99:	4f                   	dec    edi
10000c9a:	55                   	push   ebp
10000c9b:	53                   	push   ebx
10000c9c:	20 43 4f             	and    BYTE PTR [ebx+0x4f],al
10000c9f:	4d                   	dec    ebp
10000ca0:	4d                   	dec    ebp
10000ca1:	41                   	inc    ecx
10000ca2:	4e                   	dec    esi
10000ca3:	44                   	inc    esp
10000ca4:	20 46 41             	and    BYTE PTR [esi+0x41],al
10000ca7:	49                   	dec    ecx
10000ca8:	4c                   	dec    esp
10000ca9:	45                   	inc    ebp
10000caa:	44                   	inc    esp
10000cab:	2c 20                	sub    al,0x20
10000cad:	43                   	inc    ebx
10000cae:	41                   	inc    ecx
10000caf:	55                   	push   ebp
10000cb0:	47                   	inc    edi
10000cb1:	48                   	dec    eax
10000cb2:	54                   	push   esp
10000cb3:	20 42 59             	and    BYTE PTR [edx+0x59],al
10000cb6:	20 77 72             	and    BYTE PTR [edi+0x72],dh
10000cb9:	69 74 65 43 6f 6d 6d 61 	imul   esi,DWORD PTR [ebp+eiz*2+0x43],0x616d6d6f
10000cc1:	6e                   	outs   dx,BYTE PTR ds:[esi]
10000cc2:	64 00 44 49 44       	add    BYTE PTR fs:[ecx+ecx*2+0x44],al
10000cc7:	20 4e 4f             	and    BYTE PTR [esi+0x4f],cl
10000cca:	54                   	push   esp
10000ccb:	20 43 48             	and    BYTE PTR [ebx+0x48],al
10000cce:	45                   	inc    ebp
10000ccf:	43                   	inc    ebx
10000cd0:	4b                   	dec    ebx
10000cd1:	20 46 4f             	and    BYTE PTR [esi+0x4f],al
10000cd4:	52                   	push   edx
10000cd5:	20 46 41             	and    BYTE PTR [esi+0x41],al
10000cd8:	49                   	dec    ecx
10000cd9:	4c                   	dec    esp
10000cda:	55                   	push   ebp
10000cdb:	52                   	push   edx
10000cdc:	45                   	inc    ebp
10000cdd:	20 42 45             	and    BYTE PTR [edx+0x45],al
10000ce0:	46                   	inc    esi
10000ce1:	4f                   	dec    edi
10000ce2:	52                   	push   edx
10000ce3:	45                   	inc    ebp
10000ce4:	20 77 72             	and    BYTE PTR [edi+0x72],dh
10000ce7:	69 74 65 43 6f 6d 6d 61 	imul   esi,DWORD PTR [ebp+eiz*2+0x43],0x616d6d6f
10000cef:	6e                   	outs   dx,BYTE PTR ds:[esi]
10000cf0:	64 00 46 6c          	add    BYTE PTR fs:[esi+0x6c],al
10000cf4:	6f                   	outs   dx,DWORD PTR ds:[esi]
10000cf5:	70 70                	jo     10000d67 <Floppy::~Floppy()+0x133>
10000cf7:	79 3a                	jns    10000d33 <Floppy::~Floppy()+0xff>
10000cf9:	3a 64 72 69          	cmp    ah,BYTE PTR [edx+esi*2+0x69]
10000cfd:	76 65                	jbe    10000d64 <Floppy::~Floppy()+0x130>
10000cff:	44                   	inc    esp
10000d00:	65 74 65             	gs je  10000d68 <Floppy::~Floppy()+0x134>
10000d03:	63 74 69 6f          	arpl   WORD PTR [ecx+ebp*2+0x6f],si
10000d07:	6e                   	outs   dx,BYTE PTR ds:[esi]
10000d08:	28 29                	sub    BYTE PTR [ecx],ch
10000d0a:	0a 00                	or     al,BYTE PTR [eax]
10000d0c:	44                   	inc    esp
10000d0d:	72 69                	jb     10000d78 <Floppy::~Floppy()+0x144>
10000d0f:	76 65                	jbe    10000d76 <Floppy::~Floppy()+0x142>
10000d11:	20 74 79 70          	and    BYTE PTR [ecx+edi*2+0x70],dh
10000d15:	65 20 30             	and    BYTE PTR gs:[eax],dh
10000d18:	3a 20                	cmp    ah,BYTE PTR [eax]
10000d1a:	25 73 0a 00 44       	and    eax,0x44000a73
10000d1f:	72 69                	jb     10000d8a <Floppy::~Floppy()+0x156>
10000d21:	76 65                	jbe    10000d88 <Floppy::~Floppy()+0x154>
10000d23:	20 74 79 70          	and    BYTE PTR [ecx+edi*2+0x70],dh
10000d27:	65 20 31             	and    BYTE PTR gs:[ecx],dh
10000d2a:	3a 20                	cmp    ah,BYTE PTR [eax]
10000d2c:	25 73 0a 00 46       	and    eax,0x46000a73
10000d31:	6c                   	ins    BYTE PTR es:[edi],dx
10000d32:	6f                   	outs   dx,DWORD PTR ds:[esi]
10000d33:	70 70                	jo     10000da5 <Floppy::~Floppy()+0x171>
10000d35:	79 3a                	jns    10000d71 <Floppy::~Floppy()+0x13d>
10000d37:	3a 6f 70             	cmp    ch,BYTE PTR [edi+0x70]
10000d3a:	65 6e                	outs   dx,BYTE PTR gs:[esi]
10000d3c:	20 31                	and    BYTE PTR [ecx],dh
10000d3e:	0a 00                	or     al,BYTE PTR [eax]
10000d40:	46                   	inc    esi
10000d41:	6c                   	ins    BYTE PTR es:[edi],dx
10000d42:	6f                   	outs   dx,DWORD PTR ds:[esi]
10000d43:	70 70                	jo     10000db5 <Floppy::~Floppy()+0x181>
10000d45:	79 3a                	jns    10000d81 <Floppy::~Floppy()+0x14d>
10000d47:	3a 6f 70             	cmp    ch,BYTE PTR [edi+0x70]
10000d4a:	65 6e                	outs   dx,BYTE PTR gs:[esi]
10000d4c:	20 32                	and    BYTE PTR [edx],dh
10000d4e:	0a 00                	or     al,BYTE PTR [eax]
10000d50:	46                   	inc    esi
10000d51:	6c                   	ins    BYTE PTR es:[edi],dx
10000d52:	6f                   	outs   dx,DWORD PTR ds:[esi]
10000d53:	70 70                	jo     10000dc5 <Floppy::~Floppy()+0x191>
10000d55:	79 3a                	jns    10000d91 <Floppy::~Floppy()+0x15d>
10000d57:	3a 6f 70             	cmp    ch,BYTE PTR [edi+0x70]
10000d5a:	65 6e                	outs   dx,BYTE PTR gs:[esi]
10000d5c:	20 33                	and    BYTE PTR [ebx],dh
10000d5e:	0a 00                	or     al,BYTE PTR [eax]
10000d60:	46                   	inc    esi
10000d61:	6c                   	ins    BYTE PTR es:[edi],dx
10000d62:	6f                   	outs   dx,DWORD PTR ds:[esi]
10000d63:	70 70                	jo     10000dd5 <vtable for FloppyDrive+0x9>
10000d65:	79 3a                	jns    10000da1 <Floppy::~Floppy()+0x16d>
10000d67:	3a 6f 70             	cmp    ch,BYTE PTR [edi+0x70]
10000d6a:	65 6e                	outs   dx,BYTE PTR gs:[esi]
10000d6c:	20 34 0a             	and    BYTE PTR [edx+ecx*1],dh
10000d6f:	00 46 6c             	add    BYTE PTR [esi+0x6c],al
10000d72:	6f                   	outs   dx,DWORD PTR ds:[esi]
10000d73:	70 70                	jo     10000de5 <vtable for FloppyDrive+0x19>
10000d75:	79 3a                	jns    10000db1 <Floppy::~Floppy()+0x17d>
10000d77:	3a 6f 70             	cmp    ch,BYTE PTR [edi+0x70]
10000d7a:	65 6e                	outs   dx,BYTE PTR gs:[esi]
10000d7c:	20 35 0a 00 46 6c    	and    BYTE PTR ds:0x6c46000a,dh
10000d82:	6f                   	outs   dx,DWORD PTR ds:[esi]
10000d83:	70 70                	jo     10000df5 <vtable for FloppyDrive+0x29>
10000d85:	79 3a                	jns    10000dc1 <Floppy::~Floppy()+0x18d>
10000d87:	3a 6f 70             	cmp    ch,BYTE PTR [edi+0x70]
10000d8a:	65 6e                	outs   dx,BYTE PTR gs:[esi]
10000d8c:	20 36                	and    BYTE PTR [esi],dh
10000d8e:	0a 00                	or     al,BYTE PTR [eax]
10000d90:	46                   	inc    esi
10000d91:	6c                   	ins    BYTE PTR es:[edi],dx
10000d92:	6f                   	outs   dx,DWORD PTR ds:[esi]
10000d93:	70 70                	jo     10000e05 <vtable for Floppy+0x1>
10000d95:	79 3a                	jns    10000dd1 <vtable for FloppyDrive+0x5>
10000d97:	3a 6f 70             	cmp    ch,BYTE PTR [edi+0x70]
10000d9a:	65 6e                	outs   dx,BYTE PTR gs:[esi]
10000d9c:	20 37                	and    BYTE PTR [edi],dh
10000d9e:	0a 00                	or     al,BYTE PTR [eax]
10000da0:	46                   	inc    esi
10000da1:	6c                   	ins    BYTE PTR es:[edi],dx
10000da2:	6f                   	outs   dx,DWORD PTR ds:[esi]
10000da3:	70 70                	jo     10000e15 <vtable for Floppy+0x11>
10000da5:	79 3a                	jns    10000de1 <vtable for FloppyDrive+0x15>
10000da7:	3a 6f 70             	cmp    ch,BYTE PTR [edi+0x70]
10000daa:	65 6e                	outs   dx,BYTE PTR gs:[esi]
10000dac:	20 38                	and    BYTE PTR [eax],bh
10000dae:	0a 00                	or     al,BYTE PTR [eax]
10000db0:	55                   	push   ebp
10000db1:	4e                   	dec    esi
10000db2:	49                   	dec    ecx
10000db3:	4d                   	dec    ebp
10000db4:	50                   	push   eax
10000db5:	4c                   	dec    esp
10000db6:	2e 00 46 6c          	add    BYTE PTR cs:[esi+0x6c],al
10000dba:	6f                   	outs   dx,DWORD PTR ds:[esi]
10000dbb:	70 70                	jo     10000e2d <vtable for Floppy+0x29>
10000dbd:	79 20                	jns    10000ddf <vtable for FloppyDrive+0x13>
10000dbf:	44                   	inc    esp
10000dc0:	69 73 6b 20 44 72 69 	imul   esi,DWORD PTR [ebx+0x6b],0x69724420
10000dc7:	76 65                	jbe    10000e2e <vtable for Floppy+0x2a>
10000dc9:	00 66 90             	add    BYTE PTR [esi-0x70],ah

10000dcc <vtable for FloppyDrive>:
	...
	10000ddc: R_386_32	FloppyDrive::open(int, int, void*)
	10000de0: R_386_32	FloppyDrive::close(int, int, void*)
	10000de4: R_386_32	Device::hibernate()
	10000de8: R_386_32	Device::wake()
	10000dec: R_386_32	Device::detect()
	10000df0: R_386_32	Device::disableLegacy()
	10000df4: R_386_32	Device::powerSaving(PowerSavingLevel)
	10000df8: R_386_32	PhysicalDisk::eject()
	10000dfc: R_386_32	__cxa_pure_virtual
	10000e00: R_386_32	__cxa_pure_virtual

10000e04 <vtable for Floppy>:
	...
	10000e0c: R_386_32	Floppy::~Floppy()
	10000e10: R_386_32	Floppy::~Floppy()
	10000e14: R_386_32	Floppy::open(int, int, void*)
	10000e18: R_386_32	Floppy::close(int, int, void*)
	10000e1c: R_386_32	Device::hibernate()
	10000e20: R_386_32	Device::wake()
	10000e24: R_386_32	Device::detect()
	10000e28: R_386_32	Device::disableLegacy()
	10000e2c: R_386_32	Device::powerSaving(PowerSavingLevel)
