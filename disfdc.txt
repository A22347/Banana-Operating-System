
packages/system/32/0002/floppy.sys:     file format elf32-i386


Disassembly of section .text:

10000000 <start(Device*)-0x17>:
10000000:	55                   	push   ebp
10000001:	89 e5                	mov    ebp,esp
10000003:	83 ec 08             	sub    esp,0x8
10000006:	83 ec 0c             	sub    esp,0xc
10000009:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000000c:	e8 fc ff ff ff       	call   1000000d <start(Device*)-0xa>	1000000d: R_386_PC32	start(Device*)
10000011:	83 c4 10             	add    esp,0x10
10000014:	90                   	nop
10000015:	c9                   	leave  
10000016:	c3                   	ret    

10000017 <start(Device*)>:
10000017:	55                   	push   ebp
10000018:	89 e5                	mov    ebp,esp
1000001a:	53                   	push   ebx
1000001b:	83 ec 14             	sub    esp,0x14
1000001e:	83 ec 0c             	sub    esp,0xc
10000021:	68 a8 01 00 00       	push   0x1a8
10000026:	e8 fc ff ff ff       	call   10000027 <start(Device*)+0x10>	10000027: R_386_PC32	operator new(unsigned long)
1000002b:	83 c4 10             	add    esp,0x10
1000002e:	89 c3                	mov    ebx,eax
10000030:	83 ec 0c             	sub    esp,0xc
10000033:	53                   	push   ebx
10000034:	e8 fc ff ff ff       	call   10000035 <start(Device*)+0x1e>	10000035: R_386_PC32	Floppy::Floppy()
10000039:	83 c4 10             	add    esp,0x10
1000003c:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
1000003f:	83 ec 08             	sub    esp,0x8
10000042:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10000045:	68 48 0c 00 10       	push   0x10000c48	10000046: R_386_32	.text
1000004a:	e8 fc ff ff ff       	call   1000004b <start(Device*)+0x34>	1000004b: R_386_PC32	Dbg::kprintf(char const*, ...)
1000004f:	83 c4 10             	add    esp,0x10
10000052:	83 ec 08             	sub    esp,0x8
10000055:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10000058:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000005b:	e8 fc ff ff ff       	call   1000005c <start(Device*)+0x45>	1000005c: R_386_PC32	Device::addChild(Device*)
10000060:	83 c4 10             	add    esp,0x10
10000063:	c7 45 e8 25 00 00 00 	mov    DWORD PTR [ebp-0x18],0x25
1000006a:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
10000071:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
10000074:	83 ec 08             	sub    esp,0x8
10000077:	50                   	push   eax
10000078:	68 54 0c 00 10       	push   0x10000c54	10000079: R_386_32	.text
1000007d:	e8 fc ff ff ff       	call   1000007e <start(Device*)+0x67>	1000007e: R_386_PC32	Dbg::kprintf(char const*, ...)
10000082:	83 c4 10             	add    esp,0x10
10000085:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
1000008c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
1000008f:	8b 00                	mov    eax,DWORD PTR [eax]
10000091:	83 ec 04             	sub    esp,0x4
10000094:	50                   	push   eax
10000095:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000098:	68 5a 0c 00 10       	push   0x10000c5a	10000099: R_386_32	.text
1000009d:	e8 fc ff ff ff       	call   1000009e <start(Device*)+0x87>	1000009e: R_386_PC32	Dbg::kprintf(char const*, ...)
100000a2:	83 c4 10             	add    esp,0x10
100000a5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
100000a8:	8b 00                	mov    eax,DWORD PTR [eax]
100000aa:	83 c0 24             	add    eax,0x24
100000ad:	8b 00                	mov    eax,DWORD PTR [eax]
100000af:	83 ec 0c             	sub    esp,0xc
100000b2:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
100000b5:	ff d0                	call   eax
100000b7:	83 c4 10             	add    esp,0x10
100000ba:	90                   	nop
100000bb:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
100000be:	c9                   	leave  
100000bf:	c3                   	ret    

100000c0 <floppyMotorFunction(void*)>:
100000c0:	55                   	push   ebp
100000c1:	89 e5                	mov    ebp,esp
100000c3:	83 ec 18             	sub    esp,0x18
100000c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100000c9:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
100000cc:	e8 fc ff ff ff       	call   100000cd <floppyMotorFunction(void*)+0xd>	100000cd: R_386_PC32	unlockScheduler()
100000d1:	83 ec 08             	sub    esp,0x8
100000d4:	6a 00                	push   0x0
100000d6:	68 00 84 d7 17       	push   0x17d78400
100000db:	e8 fc ff ff ff       	call   100000dc <floppyMotorFunction(void*)+0x1c>	100000dc: R_386_PC32	nanoSleep(unsigned long long)
100000e0:	83 c4 10             	add    esp,0x10
100000e3:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
100000ea:	83 7d f4 03          	cmp    DWORD PTR [ebp-0xc],0x3
100000ee:	7f e1                	jg     100000d1 <floppyMotorFunction(void*)+0x11>
100000f0:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100000f3:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
100000f6:	83 c2 58             	add    edx,0x58
100000f9:	8b 04 90             	mov    eax,DWORD PTR [eax+edx*4]
100000fc:	83 f8 02             	cmp    eax,0x2
100000ff:	0f 85 86 00 00 00    	jne    1000018b <floppyMotorFunction(void*)+0xcb>
10000105:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10000108:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
1000010b:	83 c2 5c             	add    edx,0x5c
1000010e:	8b 04 90             	mov    eax,DWORD PTR [eax+edx*4]
10000111:	8d 88 70 fe ff ff    	lea    ecx,[eax-0x190]
10000117:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
1000011a:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
1000011d:	83 c2 5c             	add    edx,0x5c
10000120:	89 0c 90             	mov    DWORD PTR [eax+edx*4],ecx
10000123:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10000126:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10000129:	83 c2 5c             	add    edx,0x5c
1000012c:	8b 04 90             	mov    eax,DWORD PTR [eax+edx*4]
1000012f:	85 c0                	test   eax,eax
10000131:	7f 58                	jg     1000018b <floppyMotorFunction(void*)+0xcb>
10000133:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10000136:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10000139:	83 c2 58             	add    edx,0x58
1000013c:	c7 04 90 00 00 00 00 	mov    DWORD PTR [eax+edx*4],0x0
10000143:	e8 fc ff ff ff       	call   10000144 <floppyMotorFunction(void*)+0x84>	10000144: R_386_PC32	lockScheduler()
10000148:	83 ec 08             	sub    esp,0x8
1000014b:	6a 02                	push   0x2
1000014d:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000150:	e8 fc ff ff ff       	call   10000151 <floppyMotorFunction(void*)+0x91>	10000151: R_386_PC32	Floppy::readPort(FloppyReg)
10000155:	83 c4 10             	add    esp,0x10
10000158:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
1000015b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
1000015e:	ba 10 00 00 00       	mov    edx,0x10
10000163:	88 c1                	mov    cl,al
10000165:	d3 e2                	shl    edx,cl
10000167:	89 d0                	mov    eax,edx
10000169:	f7 d0                	not    eax
1000016b:	88 c2                	mov    dl,al
1000016d:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
10000170:	21 d0                	and    eax,edx
10000172:	0f b6 c0             	movzx  eax,al
10000175:	83 ec 04             	sub    esp,0x4
10000178:	50                   	push   eax
10000179:	6a 02                	push   0x2
1000017b:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
1000017e:	e8 fc ff ff ff       	call   1000017f <floppyMotorFunction(void*)+0xbf>	1000017f: R_386_PC32	Floppy::writePort(FloppyReg, unsigned char)
10000183:	83 c4 10             	add    esp,0x10
10000186:	e8 fc ff ff ff       	call   10000187 <floppyMotorFunction(void*)+0xc7>	10000187: R_386_PC32	unlockScheduler()
1000018b:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
1000018e:	e9 57 ff ff ff       	jmp    100000ea <floppyMotorFunction(void*)+0x2a>
10000193:	90                   	nop

10000194 <Floppy::Floppy()>:
10000194:	55                   	push   ebp
10000195:	89 e5                	mov    ebp,esp
10000197:	83 ec 08             	sub    esp,0x8
1000019a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000019d:	83 ec 08             	sub    esp,0x8
100001a0:	68 66 0c 00 10       	push   0x10000c66	100001a1: R_386_32	.text
100001a5:	50                   	push   eax
100001a6:	e8 fc ff ff ff       	call   100001a7 <Floppy::Floppy()+0x13>	100001a7: R_386_PC32	HardDiskController::HardDiskController(char const*)
100001ab:	83 c4 10             	add    esp,0x10
100001ae:	ba 08 00 00 00       	mov    edx,0x8	100001af: R_386_32	vtable for Floppy
100001b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100001b6:	89 10                	mov    DWORD PTR [eax],edx
100001b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100001bb:	66 c7 80 58 01 00 00 f0 03 	mov    WORD PTR [eax+0x158],0x3f0
100001c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100001c7:	c6 80 80 01 00 00 01 	mov    BYTE PTR [eax+0x180],0x1
100001ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100001d1:	c6 80 81 01 00 00 00 	mov    BYTE PTR [eax+0x181],0x0
100001d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100001db:	c6 80 82 01 00 00 00 	mov    BYTE PTR [eax+0x182],0x0
100001e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100001e5:	c6 80 83 01 00 00 00 	mov    BYTE PTR [eax+0x183],0x0
100001ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100001ef:	c6 80 84 01 00 00 01 	mov    BYTE PTR [eax+0x184],0x1
100001f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100001f9:	c6 80 85 01 00 00 01 	mov    BYTE PTR [eax+0x185],0x1
10000200:	83 ec 0c             	sub    esp,0xc
10000203:	68 7d 0c 00 10       	push   0x10000c7d	10000204: R_386_32	.text
10000208:	e8 fc ff ff ff       	call   10000209 <Floppy::Floppy()+0x75>	10000209: R_386_PC32	Dbg::kprintf(char const*, ...)
1000020d:	83 c4 10             	add    esp,0x10
10000210:	a1 00 00 00 00       	mov    eax,ds:0x0	10000211: R_386_32	kernelProcess
10000215:	68 d2 00 00 00       	push   0xd2
1000021a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000021d:	68 00 00 00 00       	push   0x0	1000021e: R_386_32	floppyMotorFunction(void*)
10000222:	50                   	push   eax
10000223:	e8 fc ff ff ff       	call   10000224 <Floppy::Floppy()+0x90>	10000224: R_386_PC32	Process::createThread(void (*)(void*), void*, int)
10000228:	83 c4 10             	add    esp,0x10
1000022b:	89 c2                	mov    edx,eax
1000022d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000230:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
10000236:	90                   	nop
10000237:	c9                   	leave  
10000238:	c3                   	ret    
10000239:	90                   	nop

1000023a <Floppy::wasFailure()>:
1000023a:	55                   	push   ebp
1000023b:	89 e5                	mov    ebp,esp
1000023d:	83 ec 10             	sub    esp,0x10
10000240:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000243:	c6 80 83 01 00 00 01 	mov    BYTE PTR [eax+0x183],0x1
1000024a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000024d:	8a 80 82 01 00 00    	mov    al,BYTE PTR [eax+0x182]
10000253:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
10000256:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000259:	c6 80 82 01 00 00 00 	mov    BYTE PTR [eax+0x182],0x0
10000260:	8a 45 ff             	mov    al,BYTE PTR [ebp-0x1]
10000263:	c9                   	leave  
10000264:	c3                   	ret    
10000265:	90                   	nop

10000266 <Floppy::writeCommand(unsigned char)>:
10000266:	55                   	push   ebp
10000267:	89 e5                	mov    ebp,esp
10000269:	83 ec 28             	sub    esp,0x28
1000026c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
1000026f:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
10000272:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000275:	8a 80 82 01 00 00    	mov    al,BYTE PTR [eax+0x182]
1000027b:	84 c0                	test   al,al
1000027d:	74 10                	je     1000028f <Floppy::writeCommand(unsigned char)+0x29>
1000027f:	83 ec 0c             	sub    esp,0xc
10000282:	68 90 0c 00 10       	push   0x10000c90	10000283: R_386_32	.text
10000287:	e8 fc ff ff ff       	call   10000288 <Floppy::writeCommand(unsigned char)+0x22>	10000288: R_386_PC32	Krnl::panic(char const*)
1000028c:	83 c4 10             	add    esp,0x10
1000028f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000292:	8a 80 83 01 00 00    	mov    al,BYTE PTR [eax+0x183]
10000298:	83 f0 01             	xor    eax,0x1
1000029b:	84 c0                	test   al,al
1000029d:	74 10                	je     100002af <Floppy::writeCommand(unsigned char)+0x49>
1000029f:	83 ec 0c             	sub    esp,0xc
100002a2:	68 c0 0c 00 10       	push   0x10000cc0	100002a3: R_386_32	.text
100002a7:	e8 fc ff ff ff       	call   100002a8 <Floppy::writeCommand(unsigned char)+0x42>	100002a8: R_386_PC32	Krnl::panic(char const*)
100002ac:	83 c4 10             	add    esp,0x10
100002af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002b2:	c6 80 83 01 00 00 00 	mov    BYTE PTR [eax+0x183],0x0
100002b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002bc:	c6 80 82 01 00 00 00 	mov    BYTE PTR [eax+0x182],0x0
100002c3:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
100002ca:	83 7d f4 31          	cmp    DWORD PTR [ebp-0xc],0x31
100002ce:	7f 53                	jg     10000323 <Floppy::writeCommand(unsigned char)+0xbd>
100002d0:	83 ec 08             	sub    esp,0x8
100002d3:	6a 00                	push   0x0
100002d5:	68 80 96 98 00       	push   0x989680
100002da:	e8 fc ff ff ff       	call   100002db <Floppy::writeCommand(unsigned char)+0x75>	100002db: R_386_PC32	nanoSleep(unsigned long long)
100002df:	83 c4 10             	add    esp,0x10
100002e2:	83 ec 08             	sub    esp,0x8
100002e5:	6a 04                	push   0x4
100002e7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100002ea:	e8 fc ff ff ff       	call   100002eb <Floppy::writeCommand(unsigned char)+0x85>	100002eb: R_386_PC32	Floppy::readPort(FloppyReg)
100002ef:	83 c4 10             	add    esp,0x10
100002f2:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
100002f5:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
100002f8:	84 c0                	test   al,al
100002fa:	79 22                	jns    1000031e <Floppy::writeCommand(unsigned char)+0xb8>
100002fc:	0f b6 45 f3          	movzx  eax,BYTE PTR [ebp-0xd]
10000300:	83 e0 40             	and    eax,0x40
10000303:	85 c0                	test   eax,eax
10000305:	75 17                	jne    1000031e <Floppy::writeCommand(unsigned char)+0xb8>
10000307:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
1000030b:	83 ec 04             	sub    esp,0x4
1000030e:	50                   	push   eax
1000030f:	6a 05                	push   0x5
10000311:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000314:	e8 fc ff ff ff       	call   10000315 <Floppy::writeCommand(unsigned char)+0xaf>	10000315: R_386_PC32	Floppy::writePort(FloppyReg, unsigned char)
10000319:	83 c4 10             	add    esp,0x10
1000031c:	eb 0f                	jmp    1000032d <Floppy::writeCommand(unsigned char)+0xc7>
1000031e:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10000321:	eb a7                	jmp    100002ca <Floppy::writeCommand(unsigned char)+0x64>
10000323:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000326:	c6 80 82 01 00 00 01 	mov    BYTE PTR [eax+0x182],0x1
1000032d:	c9                   	leave  
1000032e:	c3                   	ret    
1000032f:	90                   	nop

10000330 <Floppy::readData()>:
10000330:	55                   	push   ebp
10000331:	89 e5                	mov    ebp,esp
10000333:	83 ec 18             	sub    esp,0x18
10000336:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000339:	8a 80 82 01 00 00    	mov    al,BYTE PTR [eax+0x182]
1000033f:	84 c0                	test   al,al
10000341:	74 10                	je     10000353 <Floppy::readData()+0x23>
10000343:	83 ec 0c             	sub    esp,0xc
10000346:	68 90 0c 00 10       	push   0x10000c90	10000347: R_386_32	.text
1000034b:	e8 fc ff ff ff       	call   1000034c <Floppy::readData()+0x1c>	1000034c: R_386_PC32	Krnl::panic(char const*)
10000350:	83 c4 10             	add    esp,0x10
10000353:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000356:	8a 80 83 01 00 00    	mov    al,BYTE PTR [eax+0x183]
1000035c:	83 f0 01             	xor    eax,0x1
1000035f:	84 c0                	test   al,al
10000361:	74 10                	je     10000373 <Floppy::readData()+0x43>
10000363:	83 ec 0c             	sub    esp,0xc
10000366:	68 c0 0c 00 10       	push   0x10000cc0	10000367: R_386_32	.text
1000036b:	e8 fc ff ff ff       	call   1000036c <Floppy::readData()+0x3c>	1000036c: R_386_PC32	Krnl::panic(char const*)
10000370:	83 c4 10             	add    esp,0x10
10000373:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000376:	c6 80 83 01 00 00 00 	mov    BYTE PTR [eax+0x183],0x0
1000037d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000380:	c6 80 82 01 00 00 00 	mov    BYTE PTR [eax+0x182],0x0
10000387:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
1000038e:	83 7d f4 31          	cmp    DWORD PTR [ebp-0xc],0x31
10000392:	7f 4e                	jg     100003e2 <Floppy::readData()+0xb2>
10000394:	83 ec 08             	sub    esp,0x8
10000397:	6a 00                	push   0x0
10000399:	68 80 96 98 00       	push   0x989680
1000039e:	e8 fc ff ff ff       	call   1000039f <Floppy::readData()+0x6f>	1000039f: R_386_PC32	nanoSleep(unsigned long long)
100003a3:	83 c4 10             	add    esp,0x10
100003a6:	83 ec 08             	sub    esp,0x8
100003a9:	6a 04                	push   0x4
100003ab:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100003ae:	e8 fc ff ff ff       	call   100003af <Floppy::readData()+0x7f>	100003af: R_386_PC32	Floppy::readPort(FloppyReg)
100003b3:	83 c4 10             	add    esp,0x10
100003b6:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
100003b9:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
100003bc:	84 c0                	test   al,al
100003be:	79 1d                	jns    100003dd <Floppy::readData()+0xad>
100003c0:	0f b6 45 f3          	movzx  eax,BYTE PTR [ebp-0xd]
100003c4:	83 e0 40             	and    eax,0x40
100003c7:	85 c0                	test   eax,eax
100003c9:	74 12                	je     100003dd <Floppy::readData()+0xad>
100003cb:	83 ec 08             	sub    esp,0x8
100003ce:	6a 05                	push   0x5
100003d0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100003d3:	e8 fc ff ff ff       	call   100003d4 <Floppy::readData()+0xa4>	100003d4: R_386_PC32	Floppy::readPort(FloppyReg)
100003d8:	83 c4 10             	add    esp,0x10
100003db:	eb 11                	jmp    100003ee <Floppy::readData()+0xbe>
100003dd:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
100003e0:	eb ac                	jmp    1000038e <Floppy::readData()+0x5e>
100003e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100003e5:	c6 80 82 01 00 00 01 	mov    BYTE PTR [eax+0x182],0x1
100003ec:	b0 00                	mov    al,0x0
100003ee:	c9                   	leave  
100003ef:	c3                   	ret    

100003f0 <Floppy::readPort(FloppyReg)>:
100003f0:	55                   	push   ebp
100003f1:	89 e5                	mov    ebp,esp
100003f3:	83 ec 10             	sub    esp,0x10
100003f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100003f9:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
100003ff:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10000402:	01 d0                	add    eax,edx
10000404:	0f b7 c0             	movzx  eax,ax
10000407:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
1000040b:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
1000040f:	89 c2                	mov    edx,eax
10000411:	ec                   	in     al,dx
10000412:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
10000415:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
10000418:	90                   	nop
10000419:	c9                   	leave  
1000041a:	c3                   	ret    
1000041b:	90                   	nop

1000041c <Floppy::writePort(FloppyReg, unsigned char)>:
1000041c:	55                   	push   ebp
1000041d:	89 e5                	mov    ebp,esp
1000041f:	83 ec 14             	sub    esp,0x14
10000422:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
10000425:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
10000428:	0f b6 4d ec          	movzx  ecx,BYTE PTR [ebp-0x14]
1000042c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000042f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
10000435:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10000438:	01 d0                	add    eax,edx
1000043a:	0f b7 c0             	movzx  eax,ax
1000043d:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
10000441:	88 4d fd             	mov    BYTE PTR [ebp-0x3],cl
10000444:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
10000447:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
1000044b:	ee                   	out    dx,al
1000044c:	90                   	nop
1000044d:	c9                   	leave  
1000044e:	c3                   	ret    
1000044f:	90                   	nop

10000450 <Floppy::configure()>:
10000450:	90                   	nop
10000451:	c3                   	ret    

10000452 <Floppy::driveDetection()>:
10000452:	55                   	push   ebp
10000453:	89 e5                	mov    ebp,esp
10000455:	57                   	push   edi
10000456:	56                   	push   esi
10000457:	53                   	push   ebx
10000458:	83 ec 1c             	sub    esp,0x1c
1000045b:	83 ec 0c             	sub    esp,0xc
1000045e:	68 ee 0c 00 10       	push   0x10000cee	1000045f: R_386_32	.text
10000463:	e8 fc ff ff ff       	call   10000464 <Floppy::driveDetection()+0x12>	10000464: R_386_PC32	Dbg::kprintf(char const*, ...)
10000468:	83 c4 10             	add    esp,0x10
1000046b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000046e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
10000474:	66 3d f0 03          	cmp    ax,0x3f0
10000478:	0f 85 92 00 00 00    	jne    10000510 <Floppy::driveDetection()+0xbe>
1000047e:	a1 00 00 00 00       	mov    eax,ds:0x0	1000047f: R_386_32	Krnl::computer
10000483:	83 ec 08             	sub    esp,0x8
10000486:	6a 10                	push   0x10
10000488:	50                   	push   eax
10000489:	e8 fc ff ff ff       	call   1000048a <Floppy::driveDetection()+0x38>	1000048a: R_386_PC32	Computer::readCMOS(unsigned char)
1000048e:	83 c4 10             	add    esp,0x10
10000491:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
10000494:	0f b6 45 e7          	movzx  eax,BYTE PTR [ebp-0x19]
10000498:	c1 f8 04             	sar    eax,0x4
1000049b:	89 c2                	mov    edx,eax
1000049d:	83 ec 04             	sub    esp,0x4
100004a0:	89 d0                	mov    eax,edx
100004a2:	c1 e0 02             	shl    eax,0x2
100004a5:	01 d0                	add    eax,edx
100004a7:	c1 e0 02             	shl    eax,0x2
100004aa:	01 d0                	add    eax,edx
100004ac:	05 00 00 00 00       	add    eax,0x0	100004ad: R_386_32	floppyTable
100004b1:	83 ec 18             	sub    esp,0x18
100004b4:	89 e2                	mov    edx,esp
100004b6:	89 c3                	mov    ebx,eax
100004b8:	b8 15 00 00 00       	mov    eax,0x15
100004bd:	89 d7                	mov    edi,edx
100004bf:	89 de                	mov    esi,ebx
100004c1:	89 c1                	mov    ecx,eax
100004c3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
100004c5:	68 08 0d 00 10       	push   0x10000d08	100004c6: R_386_32	.text
100004ca:	e8 fc ff ff ff       	call   100004cb <Floppy::driveDetection()+0x79>	100004cb: R_386_PC32	Dbg::kprintf(char const*, ...)
100004cf:	83 c4 20             	add    esp,0x20
100004d2:	0f b6 45 e7          	movzx  eax,BYTE PTR [ebp-0x19]
100004d6:	83 e0 0f             	and    eax,0xf
100004d9:	89 c2                	mov    edx,eax
100004db:	83 ec 04             	sub    esp,0x4
100004de:	89 d0                	mov    eax,edx
100004e0:	c1 e0 02             	shl    eax,0x2
100004e3:	01 d0                	add    eax,edx
100004e5:	c1 e0 02             	shl    eax,0x2
100004e8:	01 d0                	add    eax,edx
100004ea:	05 00 00 00 00       	add    eax,0x0	100004eb: R_386_32	floppyTable
100004ef:	83 ec 18             	sub    esp,0x18
100004f2:	89 e2                	mov    edx,esp
100004f4:	89 c3                	mov    ebx,eax
100004f6:	b8 15 00 00 00       	mov    eax,0x15
100004fb:	89 d7                	mov    edi,edx
100004fd:	89 de                	mov    esi,ebx
100004ff:	89 c1                	mov    ecx,eax
10000501:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
10000503:	68 1a 0d 00 10       	push   0x10000d1a	10000504: R_386_32	.text
10000508:	e8 fc ff ff ff       	call   10000509 <Floppy::driveDetection()+0xb7>	10000509: R_386_PC32	Dbg::kprintf(char const*, ...)
1000050d:	83 c4 20             	add    esp,0x20
10000510:	90                   	nop
10000511:	8d 65 f4             	lea    esp,[ebp-0xc]
10000514:	5b                   	pop    ebx
10000515:	5e                   	pop    esi
10000516:	5f                   	pop    edi
10000517:	5d                   	pop    ebp
10000518:	c3                   	ret    
10000519:	90                   	nop

1000051a <Floppy::open(int, int, void*)>:
1000051a:	55                   	push   ebp
1000051b:	89 e5                	mov    ebp,esp
1000051d:	83 ec 18             	sub    esp,0x18
10000520:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000523:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10000526:	66 89 82 58 01 00 00 	mov    WORD PTR [edx+0x158],ax
1000052d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000530:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10000536:	0f b6 c8             	movzx  ecx,al
10000539:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000053c:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
10000542:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10000545:	66 89 44 8a 04       	mov    WORD PTR [edx+ecx*4+0x4],ax
1000054a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000054d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10000553:	0f b6 d0             	movzx  edx,al
10000556:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000559:	c6 44 90 06 06       	mov    BYTE PTR [eax+edx*4+0x6],0x6
1000055e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000561:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10000567:	8d 50 01             	lea    edx,[eax+0x1]
1000056a:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
1000056d:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
10000573:	0f b6 d0             	movzx  edx,al
10000576:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000579:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
1000057d:	83 e1 3f             	and    ecx,0x3f
10000580:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
10000584:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000587:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
1000058d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10000590:	8a 92 c4 00 00 00    	mov    dl,BYTE PTR [edx+0xc4]
10000596:	0f b6 ca             	movzx  ecx,dl
10000599:	83 c0 07             	add    eax,0x7
1000059c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
1000059f:	66 89 44 8a 04       	mov    WORD PTR [edx+ecx*4+0x4],ax
100005a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100005a7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
100005ad:	0f b6 d0             	movzx  edx,al
100005b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100005b3:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
100005b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100005bb:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
100005c1:	8d 50 01             	lea    edx,[eax+0x1]
100005c4:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
100005c7:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
100005cd:	0f b6 d0             	movzx  edx,al
100005d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100005d3:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
100005d7:	83 e1 3f             	and    ecx,0x3f
100005da:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
100005de:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
100005e5:	83 7d f4 03          	cmp    DWORD PTR [ebp-0xc],0x3
100005e9:	7f 26                	jg     10000611 <Floppy::open(int, int, void*)+0xf7>
100005eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100005ee:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
100005f1:	83 c2 64             	add    edx,0x64
100005f4:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
100005fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100005ff:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10000602:	83 c2 58             	add    edx,0x58
10000605:	c7 04 90 00 00 00 00 	mov    DWORD PTR [eax+edx*4],0x0
1000060c:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
1000060f:	eb d4                	jmp    100005e5 <Floppy::open(int, int, void*)+0xcb>
10000611:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000614:	8b 00                	mov    eax,DWORD PTR [eax]
10000616:	83 c0 24             	add    eax,0x24
10000619:	8b 00                	mov    eax,DWORD PTR [eax]
1000061b:	83 ec 0c             	sub    esp,0xc
1000061e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000621:	ff d0                	call   eax
10000623:	83 c4 10             	add    esp,0x10
10000626:	83 ec 0c             	sub    esp,0xc
10000629:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000062c:	e8 fc ff ff ff       	call   1000062d <Floppy::open(int, int, void*)+0x113>	1000062d: R_386_PC32	Floppy::reset()
10000631:	83 c4 10             	add    esp,0x10
10000634:	83 ec 0c             	sub    esp,0xc
10000637:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000063a:	e8 fc ff ff ff       	call   1000063b <Floppy::open(int, int, void*)+0x121>	1000063b: R_386_PC32	Floppy::driveDetection()
1000063f:	83 c4 10             	add    esp,0x10
10000642:	b8 00 00 00 00       	mov    eax,0x0
10000647:	c9                   	leave  
10000648:	c3                   	ret    
10000649:	90                   	nop

1000064a <Floppy::close(int, int, void*)>:
1000064a:	b8 00 00 00 00       	mov    eax,0x0
1000064f:	c3                   	ret    

10000650 <Floppy::senseInterrupt(int*, int*)>:
10000650:	55                   	push   ebp
10000651:	89 e5                	mov    ebp,esp
10000653:	83 ec 08             	sub    esp,0x8
10000656:	83 ec 08             	sub    esp,0x8
10000659:	6a 08                	push   0x8
1000065b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000065e:	e8 fc ff ff ff       	call   1000065f <Floppy::senseInterrupt(int*, int*)+0xf>	1000065f: R_386_PC32	Floppy::writeCommand(unsigned char)
10000663:	83 c4 10             	add    esp,0x10
10000666:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000669:	8b 00                	mov    eax,DWORD PTR [eax]
1000066b:	83 c0 24             	add    eax,0x24
1000066e:	8b 00                	mov    eax,DWORD PTR [eax]
10000670:	83 ec 0c             	sub    esp,0xc
10000673:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000676:	ff d0                	call   eax
10000678:	83 c4 10             	add    esp,0x10
1000067b:	84 c0                	test   al,al
1000067d:	74 04                	je     10000683 <Floppy::senseInterrupt(int*, int*)+0x33>
1000067f:	b0 00                	mov    al,0x0
10000681:	eb 68                	jmp    100006eb <Floppy::senseInterrupt(int*, int*)+0x9b>
10000683:	83 ec 0c             	sub    esp,0xc
10000686:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000689:	e8 fc ff ff ff       	call   1000068a <Floppy::senseInterrupt(int*, int*)+0x3a>	1000068a: R_386_PC32	Floppy::readData()
1000068e:	83 c4 10             	add    esp,0x10
10000691:	0f b6 d0             	movzx  edx,al
10000694:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000697:	89 10                	mov    DWORD PTR [eax],edx
10000699:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000069c:	8b 00                	mov    eax,DWORD PTR [eax]
1000069e:	83 c0 24             	add    eax,0x24
100006a1:	8b 00                	mov    eax,DWORD PTR [eax]
100006a3:	83 ec 0c             	sub    esp,0xc
100006a6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100006a9:	ff d0                	call   eax
100006ab:	83 c4 10             	add    esp,0x10
100006ae:	84 c0                	test   al,al
100006b0:	74 04                	je     100006b6 <Floppy::senseInterrupt(int*, int*)+0x66>
100006b2:	b0 00                	mov    al,0x0
100006b4:	eb 35                	jmp    100006eb <Floppy::senseInterrupt(int*, int*)+0x9b>
100006b6:	83 ec 0c             	sub    esp,0xc
100006b9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100006bc:	e8 fc ff ff ff       	call   100006bd <Floppy::senseInterrupt(int*, int*)+0x6d>	100006bd: R_386_PC32	Floppy::readData()
100006c1:	83 c4 10             	add    esp,0x10
100006c4:	0f b6 d0             	movzx  edx,al
100006c7:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
100006ca:	89 10                	mov    DWORD PTR [eax],edx
100006cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100006cf:	8b 00                	mov    eax,DWORD PTR [eax]
100006d1:	83 c0 24             	add    eax,0x24
100006d4:	8b 00                	mov    eax,DWORD PTR [eax]
100006d6:	83 ec 0c             	sub    esp,0xc
100006d9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100006dc:	ff d0                	call   eax
100006de:	83 c4 10             	add    esp,0x10
100006e1:	84 c0                	test   al,al
100006e3:	74 04                	je     100006e9 <Floppy::senseInterrupt(int*, int*)+0x99>
100006e5:	b0 00                	mov    al,0x0
100006e7:	eb 02                	jmp    100006eb <Floppy::senseInterrupt(int*, int*)+0x9b>
100006e9:	b0 01                	mov    al,0x1
100006eb:	c9                   	leave  
100006ec:	c3                   	ret    
100006ed:	90                   	nop

100006ee <Floppy::lock()>:
100006ee:	55                   	push   ebp
100006ef:	89 e5                	mov    ebp,esp
100006f1:	83 ec 08             	sub    esp,0x8
100006f4:	83 ec 08             	sub    esp,0x8
100006f7:	6a 14                	push   0x14
100006f9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100006fc:	e8 fc ff ff ff       	call   100006fd <Floppy::lock()+0xf>	100006fd: R_386_PC32	Floppy::writeCommand(unsigned char)
10000701:	83 c4 10             	add    esp,0x10
10000704:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000707:	8b 00                	mov    eax,DWORD PTR [eax]
10000709:	83 c0 24             	add    eax,0x24
1000070c:	8b 00                	mov    eax,DWORD PTR [eax]
1000070e:	83 ec 0c             	sub    esp,0xc
10000711:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000714:	ff d0                	call   eax
10000716:	83 c4 10             	add    esp,0x10
10000719:	84 c0                	test   al,al
1000071b:	74 04                	je     10000721 <Floppy::lock()+0x33>
1000071d:	b0 00                	mov    al,0x0
1000071f:	eb 2d                	jmp    1000074e <Floppy::lock()+0x60>
10000721:	83 ec 0c             	sub    esp,0xc
10000724:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000727:	e8 fc ff ff ff       	call   10000728 <Floppy::lock()+0x3a>	10000728: R_386_PC32	Floppy::readData()
1000072c:	83 c4 10             	add    esp,0x10
1000072f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000732:	8b 00                	mov    eax,DWORD PTR [eax]
10000734:	83 c0 24             	add    eax,0x24
10000737:	8b 00                	mov    eax,DWORD PTR [eax]
10000739:	83 ec 0c             	sub    esp,0xc
1000073c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000073f:	ff d0                	call   eax
10000741:	83 c4 10             	add    esp,0x10
10000744:	84 c0                	test   al,al
10000746:	74 04                	je     1000074c <Floppy::lock()+0x5e>
10000748:	b0 00                	mov    al,0x0
1000074a:	eb 02                	jmp    1000074e <Floppy::lock()+0x60>
1000074c:	b0 01                	mov    al,0x1
1000074e:	c9                   	leave  
1000074f:	c3                   	ret    

10000750 <Floppy::reset()>:
10000750:	55                   	push   ebp
10000751:	89 e5                	mov    ebp,esp
10000753:	83 ec 28             	sub    esp,0x28
10000756:	6a 02                	push   0x2
10000758:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000075b:	e8 fc ff ff ff       	call   1000075c <Floppy::reset()+0xc>	1000075c: R_386_PC32	Floppy::readPort(FloppyReg)
10000760:	83 c4 08             	add    esp,0x8
10000763:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
10000766:	6a 00                	push   0x0
10000768:	6a 02                	push   0x2
1000076a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000076d:	e8 fc ff ff ff       	call   1000076e <Floppy::reset()+0x1e>	1000076e: R_386_PC32	Floppy::writePort(FloppyReg, unsigned char)
10000772:	83 c4 0c             	add    esp,0xc
10000775:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
10000778:	83 c8 04             	or     eax,0x4
1000077b:	0f b6 c0             	movzx  eax,al
1000077e:	50                   	push   eax
1000077f:	6a 02                	push   0x2
10000781:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000784:	e8 fc ff ff ff       	call   10000785 <Floppy::reset()+0x35>	10000785: R_386_PC32	Floppy::writePort(FloppyReg, unsigned char)
10000789:	83 c4 0c             	add    esp,0xc
1000078c:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
10000790:	83 e0 08             	and    eax,0x8
10000793:	85 c0                	test   eax,eax
10000795:	74 12                	je     100007a9 <Floppy::reset()+0x59>
10000797:	83 ec 0c             	sub    esp,0xc
1000079a:	68 2c 0d 00 10       	push   0x10000d2c	1000079b: R_386_32	.text
1000079f:	e8 fc ff ff ff       	call   100007a0 <Floppy::reset()+0x50>	100007a0: R_386_PC32	Krnl::panic(char const*)
100007a4:	83 c4 10             	add    esp,0x10
100007a7:	eb 1a                	jmp    100007c3 <Floppy::reset()+0x73>
100007a9:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
100007ac:	83 c8 0c             	or     eax,0xc
100007af:	0f b6 c0             	movzx  eax,al
100007b2:	83 ec 04             	sub    esp,0x4
100007b5:	50                   	push   eax
100007b6:	6a 02                	push   0x2
100007b8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100007bb:	e8 fc ff ff ff       	call   100007bc <Floppy::reset()+0x6c>	100007bc: R_386_PC32	Floppy::writePort(FloppyReg, unsigned char)
100007c0:	83 c4 10             	add    esp,0x10
100007c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100007c6:	8a 80 85 01 00 00    	mov    al,BYTE PTR [eax+0x185]
100007cc:	84 c0                	test   al,al
100007ce:	0f 84 8f 00 00 00    	je     10000863 <Floppy::reset()+0x113>
100007d4:	83 ec 04             	sub    esp,0x4
100007d7:	8d 45 e4             	lea    eax,[ebp-0x1c]
100007da:	50                   	push   eax
100007db:	8d 45 e8             	lea    eax,[ebp-0x18]
100007de:	50                   	push   eax
100007df:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100007e2:	e8 fc ff ff ff       	call   100007e3 <Floppy::reset()+0x93>	100007e3: R_386_PC32	Floppy::senseInterrupt(int*, int*)
100007e7:	83 c4 10             	add    esp,0x10
100007ea:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
100007ed:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
100007f1:	74 19                	je     1000080c <Floppy::reset()+0xbc>
100007f3:	83 ec 04             	sub    esp,0x4
100007f6:	8d 45 e4             	lea    eax,[ebp-0x1c]
100007f9:	50                   	push   eax
100007fa:	8d 45 e8             	lea    eax,[ebp-0x18]
100007fd:	50                   	push   eax
100007fe:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000801:	e8 fc ff ff ff       	call   10000802 <Floppy::reset()+0xb2>	10000802: R_386_PC32	Floppy::senseInterrupt(int*, int*)
10000806:	83 c4 10             	add    esp,0x10
10000809:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
1000080c:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
10000810:	74 19                	je     1000082b <Floppy::reset()+0xdb>
10000812:	83 ec 04             	sub    esp,0x4
10000815:	8d 45 e4             	lea    eax,[ebp-0x1c]
10000818:	50                   	push   eax
10000819:	8d 45 e8             	lea    eax,[ebp-0x18]
1000081c:	50                   	push   eax
1000081d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000820:	e8 fc ff ff ff       	call   10000821 <Floppy::reset()+0xd1>	10000821: R_386_PC32	Floppy::senseInterrupt(int*, int*)
10000825:	83 c4 10             	add    esp,0x10
10000828:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
1000082b:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
1000082f:	74 19                	je     1000084a <Floppy::reset()+0xfa>
10000831:	83 ec 04             	sub    esp,0x4
10000834:	8d 45 e4             	lea    eax,[ebp-0x1c]
10000837:	50                   	push   eax
10000838:	8d 45 e8             	lea    eax,[ebp-0x18]
1000083b:	50                   	push   eax
1000083c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000083f:	e8 fc ff ff ff       	call   10000840 <Floppy::reset()+0xf0>	10000840: R_386_PC32	Floppy::senseInterrupt(int*, int*)
10000844:	83 c4 10             	add    esp,0x10
10000847:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
1000084a:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
1000084d:	83 f0 01             	xor    eax,0x1
10000850:	84 c0                	test   al,al
10000852:	74 0f                	je     10000863 <Floppy::reset()+0x113>
10000854:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000857:	c6 80 85 01 00 00 00 	mov    BYTE PTR [eax+0x185],0x0
1000085e:	e9 f3 fe ff ff       	jmp    10000756 <Floppy::reset()+0x6>
10000863:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000866:	8a 80 80 01 00 00    	mov    al,BYTE PTR [eax+0x180]
1000086c:	84 c0                	test   al,al
1000086e:	75 14                	jne    10000884 <Floppy::reset()+0x134>
10000870:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000873:	8a 80 81 01 00 00    	mov    al,BYTE PTR [eax+0x181]
10000879:	83 f0 01             	xor    eax,0x1
1000087c:	84 c0                	test   al,al
1000087e:	0f 84 91 00 00 00    	je     10000915 <Floppy::reset()+0x1c5>
10000884:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000887:	8a 80 84 01 00 00    	mov    al,BYTE PTR [eax+0x184]
1000088d:	84 c0                	test   al,al
1000088f:	74 3c                	je     100008cd <Floppy::reset()+0x17d>
10000891:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
10000898:	83 7d f0 03          	cmp    DWORD PTR [ebp-0x10],0x3
1000089c:	7f 2f                	jg     100008cd <Floppy::reset()+0x17d>
1000089e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100008a1:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
100008a4:	83 c2 64             	add    edx,0x64
100008a7:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
100008ab:	85 c0                	test   eax,eax
100008ad:	74 19                	je     100008c8 <Floppy::reset()+0x178>
100008af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100008b2:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
100008b5:	83 c2 64             	add    edx,0x64
100008b8:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
100008bc:	83 ec 0c             	sub    esp,0xc
100008bf:	50                   	push   eax
100008c0:	e8 fc ff ff ff       	call   100008c1 <Floppy::reset()+0x171>	100008c1: R_386_PC32	FloppyDrive::floppyConfigure()
100008c5:	83 c4 10             	add    esp,0x10
100008c8:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
100008cb:	eb cb                	jmp    10000898 <Floppy::reset()+0x148>
100008cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100008d0:	8a 80 81 01 00 00    	mov    al,BYTE PTR [eax+0x181]
100008d6:	83 f0 01             	xor    eax,0x1
100008d9:	84 c0                	test   al,al
100008db:	74 38                	je     10000915 <Floppy::reset()+0x1c5>
100008dd:	83 ec 0c             	sub    esp,0xc
100008e0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100008e3:	e8 fc ff ff ff       	call   100008e4 <Floppy::reset()+0x194>	100008e4: R_386_PC32	Floppy::lock()
100008e8:	83 c4 10             	add    esp,0x10
100008eb:	83 f0 01             	xor    eax,0x1
100008ee:	88 c2                	mov    dl,al
100008f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100008f3:	88 90 80 01 00 00    	mov    BYTE PTR [eax+0x180],dl
100008f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100008fc:	c6 80 81 01 00 00 01 	mov    BYTE PTR [eax+0x181],0x1
10000903:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000906:	8a 80 80 01 00 00    	mov    al,BYTE PTR [eax+0x180]
1000090c:	84 c0                	test   al,al
1000090e:	74 05                	je     10000915 <Floppy::reset()+0x1c5>
10000910:	e9 41 fe ff ff       	jmp    10000756 <Floppy::reset()+0x6>
10000915:	90                   	nop
10000916:	c9                   	leave  
10000917:	c3                   	ret    

10000918 <Floppy::motor(int, bool)>:
10000918:	55                   	push   ebp
10000919:	89 e5                	mov    ebp,esp
1000091b:	83 ec 28             	sub    esp,0x28
1000091e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
10000921:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
10000924:	80 7d e4 00          	cmp    BYTE PTR [ebp-0x1c],0x0
10000928:	0f 84 c7 00 00 00    	je     100009f5 <Floppy::motor(int, bool)+0xdd>
1000092e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000931:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10000934:	83 c2 58             	add    edx,0x58
10000937:	8b 04 90             	mov    eax,DWORD PTR [eax+edx*4]
1000093a:	85 c0                	test   eax,eax
1000093c:	0f 85 90 00 00 00    	jne    100009d2 <Floppy::motor(int, bool)+0xba>
10000942:	e8 fc ff ff ff       	call   10000943 <Floppy::motor(int, bool)+0x2b>	10000943: R_386_PC32	lockScheduler()
10000947:	83 ec 08             	sub    esp,0x8
1000094a:	6a 02                	push   0x2
1000094c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000094f:	e8 fc ff ff ff       	call   10000950 <Floppy::motor(int, bool)+0x38>	10000950: R_386_PC32	Floppy::readPort(FloppyReg)
10000954:	83 c4 10             	add    esp,0x10
10000957:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
1000095a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
1000095d:	ba 10 00 00 00       	mov    edx,0x10
10000962:	88 c1                	mov    cl,al
10000964:	d3 e2                	shl    edx,cl
10000966:	89 d0                	mov    eax,edx
10000968:	88 c2                	mov    dl,al
1000096a:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
1000096d:	09 d0                	or     eax,edx
1000096f:	0f b6 c0             	movzx  eax,al
10000972:	83 ec 04             	sub    esp,0x4
10000975:	50                   	push   eax
10000976:	6a 02                	push   0x2
10000978:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000097b:	e8 fc ff ff ff       	call   1000097c <Floppy::motor(int, bool)+0x64>	1000097c: R_386_PC32	Floppy::writePort(FloppyReg, unsigned char)
10000980:	83 c4 10             	add    esp,0x10
10000983:	e8 fc ff ff ff       	call   10000984 <Floppy::motor(int, bool)+0x6c>	10000984: R_386_PC32	unlockScheduler()
10000988:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000098b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
1000098e:	83 c2 60             	add    edx,0x60
10000991:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
10000995:	83 f8 04             	cmp    eax,0x4
10000998:	75 14                	jne    100009ae <Floppy::motor(int, bool)+0x96>
1000099a:	83 ec 08             	sub    esp,0x8
1000099d:	6a 00                	push   0x0
1000099f:	68 00 a3 e1 11       	push   0x11e1a300
100009a4:	e8 fc ff ff ff       	call   100009a5 <Floppy::motor(int, bool)+0x8d>	100009a5: R_386_PC32	nanoSleep(unsigned long long)
100009a9:	83 c4 10             	add    esp,0x10
100009ac:	eb 12                	jmp    100009c0 <Floppy::motor(int, bool)+0xa8>
100009ae:	83 ec 08             	sub    esp,0x8
100009b1:	6a 00                	push   0x0
100009b3:	68 00 65 cd 1d       	push   0x1dcd6500
100009b8:	e8 fc ff ff ff       	call   100009b9 <Floppy::motor(int, bool)+0xa1>	100009b9: R_386_PC32	nanoSleep(unsigned long long)
100009bd:	83 c4 10             	add    esp,0x10
100009c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100009c3:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
100009c6:	83 c2 58             	add    edx,0x58
100009c9:	c7 04 90 01 00 00 00 	mov    DWORD PTR [eax+edx*4],0x1
100009d0:	eb 54                	jmp    10000a26 <Floppy::motor(int, bool)+0x10e>
100009d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100009d5:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
100009d8:	83 c2 58             	add    edx,0x58
100009db:	8b 04 90             	mov    eax,DWORD PTR [eax+edx*4]
100009de:	83 f8 02             	cmp    eax,0x2
100009e1:	75 43                	jne    10000a26 <Floppy::motor(int, bool)+0x10e>
100009e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100009e6:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
100009e9:	83 c2 58             	add    edx,0x58
100009ec:	c7 04 90 01 00 00 00 	mov    DWORD PTR [eax+edx*4],0x1
100009f3:	eb 31                	jmp    10000a26 <Floppy::motor(int, bool)+0x10e>
100009f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100009f8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
100009fb:	83 c2 58             	add    edx,0x58
100009fe:	8b 04 90             	mov    eax,DWORD PTR [eax+edx*4]
10000a01:	83 f8 01             	cmp    eax,0x1
10000a04:	75 20                	jne    10000a26 <Floppy::motor(int, bool)+0x10e>
10000a06:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000a09:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10000a0c:	83 c2 58             	add    edx,0x58
10000a0f:	c7 04 90 02 00 00 00 	mov    DWORD PTR [eax+edx*4],0x2
10000a16:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000a19:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10000a1c:	83 c2 5c             	add    edx,0x5c
10000a1f:	c7 04 90 c4 09 00 00 	mov    DWORD PTR [eax+edx*4],0x9c4
10000a26:	90                   	nop
10000a27:	c9                   	leave  
10000a28:	c3                   	ret    
10000a29:	90                   	nop
10000a2a:	55                   	push   ebp
10000a2b:	89 e5                	mov    ebp,esp
10000a2d:	83 ec 08             	sub    esp,0x8
10000a30:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000a33:	83 ec 04             	sub    esp,0x4
10000a36:	68 00 02 00 00       	push   0x200
10000a3b:	68 34 0d 00 10       	push   0x10000d34	10000a3c: R_386_32	.text
10000a40:	50                   	push   eax
10000a41:	e8 fc ff ff ff       	call   10000a42 <Floppy::motor(int, bool)+0x12a>	10000a42: R_386_PC32	PhysicalDisk::PhysicalDisk(char const*, int)
10000a46:	83 c4 10             	add    esp,0x10
10000a49:	ba 08 00 00 00       	mov    edx,0x8	10000a4a: R_386_32	vtable for FloppyDrive
10000a4e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000a51:	89 10                	mov    DWORD PTR [eax],edx
10000a53:	90                   	nop
10000a54:	c9                   	leave  
10000a55:	c3                   	ret    

10000a56 <FloppyDrive::configure()>:
10000a56:	90                   	nop
10000a57:	c3                   	ret    
10000a58:	55                   	push   ebp
10000a59:	89 e5                	mov    ebp,esp
10000a5b:	83 ec 08             	sub    esp,0x8
10000a5e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000a61:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10000a67:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10000a6a:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
10000a70:	83 ec 04             	sub    esp,0x4
10000a73:	6a 01                	push   0x1
10000a75:	52                   	push   edx
10000a76:	50                   	push   eax
10000a77:	e8 fc ff ff ff       	call   10000a78 <FloppyDrive::configure()+0x22>	10000a78: R_386_PC32	Floppy::motor(int, bool)
10000a7c:	83 c4 10             	add    esp,0x10
10000a7f:	90                   	nop
10000a80:	c9                   	leave  
10000a81:	c3                   	ret    
10000a82:	55                   	push   ebp
10000a83:	89 e5                	mov    ebp,esp
10000a85:	83 ec 08             	sub    esp,0x8
10000a88:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000a8b:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10000a91:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10000a94:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
10000a9a:	83 ec 04             	sub    esp,0x4
10000a9d:	6a 00                	push   0x0
10000a9f:	52                   	push   edx
10000aa0:	50                   	push   eax
10000aa1:	e8 fc ff ff ff       	call   10000aa2 <FloppyDrive::configure()+0x4c>	10000aa2: R_386_PC32	Floppy::motor(int, bool)
10000aa6:	83 c4 10             	add    esp,0x10
10000aa9:	90                   	nop
10000aaa:	c9                   	leave  
10000aab:	c3                   	ret    

10000aac <FloppyDrive::floppyConfigure()>:
10000aac:	55                   	push   ebp
10000aad:	89 e5                	mov    ebp,esp
10000aaf:	83 ec 18             	sub    esp,0x18
10000ab2:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
10000ab6:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
10000aba:	c6 45 f5 01          	mov    BYTE PTR [ebp-0xb],0x1
10000abe:	c7 45 f0 08 00 00 00 	mov    DWORD PTR [ebp-0x10],0x8
10000ac5:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
10000acc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000acf:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10000ad5:	83 ec 08             	sub    esp,0x8
10000ad8:	6a 13                	push   0x13
10000ada:	50                   	push   eax
10000adb:	e8 fc ff ff ff       	call   10000adc <FloppyDrive::floppyConfigure()+0x30>	10000adc: R_386_PC32	Floppy::writeCommand(unsigned char)
10000ae0:	83 c4 10             	add    esp,0x10
10000ae3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000ae6:	8b 90 6c 01 00 00    	mov    edx,DWORD PTR [eax+0x16c]
10000aec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000aef:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10000af5:	8b 00                	mov    eax,DWORD PTR [eax]
10000af7:	83 c0 24             	add    eax,0x24
10000afa:	8b 00                	mov    eax,DWORD PTR [eax]
10000afc:	83 ec 0c             	sub    esp,0xc
10000aff:	52                   	push   edx
10000b00:	ff d0                	call   eax
10000b02:	83 c4 10             	add    esp,0x10
10000b05:	84 c0                	test   al,al
10000b07:	74 07                	je     10000b10 <FloppyDrive::floppyConfigure()+0x64>
10000b09:	b0 00                	mov    al,0x0
10000b0b:	e9 05 01 00 00       	jmp    10000c15 <FloppyDrive::floppyConfigure()+0x169>
10000b10:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000b13:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10000b19:	83 ec 08             	sub    esp,0x8
10000b1c:	6a 00                	push   0x0
10000b1e:	50                   	push   eax
10000b1f:	e8 fc ff ff ff       	call   10000b20 <FloppyDrive::floppyConfigure()+0x74>	10000b20: R_386_PC32	Floppy::writeCommand(unsigned char)
10000b24:	83 c4 10             	add    esp,0x10
10000b27:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000b2a:	8b 90 6c 01 00 00    	mov    edx,DWORD PTR [eax+0x16c]
10000b30:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000b33:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10000b39:	8b 00                	mov    eax,DWORD PTR [eax]
10000b3b:	83 c0 24             	add    eax,0x24
10000b3e:	8b 00                	mov    eax,DWORD PTR [eax]
10000b40:	83 ec 0c             	sub    esp,0xc
10000b43:	52                   	push   edx
10000b44:	ff d0                	call   eax
10000b46:	83 c4 10             	add    esp,0x10
10000b49:	84 c0                	test   al,al
10000b4b:	74 07                	je     10000b54 <FloppyDrive::floppyConfigure()+0xa8>
10000b4d:	b0 00                	mov    al,0x0
10000b4f:	e9 c1 00 00 00       	jmp    10000c15 <FloppyDrive::floppyConfigure()+0x169>
10000b54:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000b57:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10000b5d:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
10000b61:	c1 e2 06             	shl    edx,0x6
10000b64:	88 d1                	mov    cl,dl
10000b66:	0f b6 55 f6          	movzx  edx,BYTE PTR [ebp-0xa]
10000b6a:	c1 e2 05             	shl    edx,0x5
10000b6d:	09 d1                	or     ecx,edx
10000b6f:	0f b6 55 f5          	movzx  edx,BYTE PTR [ebp-0xb]
10000b73:	c1 e2 04             	shl    edx,0x4
10000b76:	09 d1                	or     ecx,edx
10000b78:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
10000b7b:	4a                   	dec    edx
10000b7c:	09 ca                	or     edx,ecx
10000b7e:	0f b6 d2             	movzx  edx,dl
10000b81:	83 ec 08             	sub    esp,0x8
10000b84:	52                   	push   edx
10000b85:	50                   	push   eax
10000b86:	e8 fc ff ff ff       	call   10000b87 <FloppyDrive::floppyConfigure()+0xdb>	10000b87: R_386_PC32	Floppy::writeCommand(unsigned char)
10000b8b:	83 c4 10             	add    esp,0x10
10000b8e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000b91:	8b 90 6c 01 00 00    	mov    edx,DWORD PTR [eax+0x16c]
10000b97:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000b9a:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10000ba0:	8b 00                	mov    eax,DWORD PTR [eax]
10000ba2:	83 c0 24             	add    eax,0x24
10000ba5:	8b 00                	mov    eax,DWORD PTR [eax]
10000ba7:	83 ec 0c             	sub    esp,0xc
10000baa:	52                   	push   edx
10000bab:	ff d0                	call   eax
10000bad:	83 c4 10             	add    esp,0x10
10000bb0:	84 c0                	test   al,al
10000bb2:	74 04                	je     10000bb8 <FloppyDrive::floppyConfigure()+0x10c>
10000bb4:	b0 00                	mov    al,0x0
10000bb6:	eb 5d                	jmp    10000c15 <FloppyDrive::floppyConfigure()+0x169>
10000bb8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000bbb:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10000bc1:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
10000bc4:	0f b6 d2             	movzx  edx,dl
10000bc7:	83 ec 08             	sub    esp,0x8
10000bca:	52                   	push   edx
10000bcb:	50                   	push   eax
10000bcc:	e8 fc ff ff ff       	call   10000bcd <FloppyDrive::floppyConfigure()+0x121>	10000bcd: R_386_PC32	Floppy::writeCommand(unsigned char)
10000bd1:	83 c4 10             	add    esp,0x10
10000bd4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000bd7:	8b 90 6c 01 00 00    	mov    edx,DWORD PTR [eax+0x16c]
10000bdd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000be0:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10000be6:	8b 00                	mov    eax,DWORD PTR [eax]
10000be8:	83 c0 24             	add    eax,0x24
10000beb:	8b 00                	mov    eax,DWORD PTR [eax]
10000bed:	83 ec 0c             	sub    esp,0xc
10000bf0:	52                   	push   edx
10000bf1:	ff d0                	call   eax
10000bf3:	83 c4 10             	add    esp,0x10
10000bf6:	84 c0                	test   al,al
10000bf8:	74 04                	je     10000bfe <FloppyDrive::floppyConfigure()+0x152>
10000bfa:	b0 00                	mov    al,0x0
10000bfc:	eb 17                	jmp    10000c15 <FloppyDrive::floppyConfigure()+0x169>
10000bfe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000c01:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10000c07:	8a 55 f5             	mov    dl,BYTE PTR [ebp-0xb]
10000c0a:	83 f2 01             	xor    edx,0x1
10000c0d:	88 90 85 01 00 00    	mov    BYTE PTR [eax+0x185],dl
10000c13:	b0 01                	mov    al,0x1
10000c15:	c9                   	leave  
10000c16:	c3                   	ret    
10000c17:	90                   	nop

10000c18 <FloppyDrive::open(int, int, void*)>:
10000c18:	55                   	push   ebp
10000c19:	89 e5                	mov    ebp,esp
10000c1b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000c1e:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
10000c21:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
10000c27:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000c2a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10000c2d:	89 90 70 01 00 00    	mov    DWORD PTR [eax+0x170],edx
10000c33:	b8 00 00 00 00       	mov    eax,0x0
10000c38:	5d                   	pop    ebp
10000c39:	c3                   	ret    

10000c3a <FloppyDrive::close(int, int, void*)>:
10000c3a:	b8 00 00 00 00       	mov    eax,0x0
10000c3f:	c3                   	ret    
10000c40:	96                   	xchg   esi,eax
10000c41:	00 00                	add    BYTE PTR [eax],al
10000c43:	00 2c 01             	add    BYTE PTR [ecx+eax*1],ch
10000c46:	00 00                	add    BYTE PTR [eax],al
10000c48:	64 65 76 20          	fs gs jbe 10000c6c <FloppyDrive::close(int, int, void*)+0x32>
10000c4c:	3d 20 30 78 25       	cmp    eax,0x25783020
10000c51:	58                   	pop    eax
10000c52:	0a 00                	or     al,BYTE PTR [eax]
10000c54:	30 78 25             	xor    BYTE PTR [eax+0x25],bh
10000c57:	58                   	pop    eax
10000c58:	0a 00                	or     al,BYTE PTR [eax]
10000c5a:	30 78 25             	xor    BYTE PTR [eax+0x25],bh
10000c5d:	58                   	pop    eax
10000c5e:	2c 20                	sub    al,0x20
10000c60:	30 78 25             	xor    BYTE PTR [eax+0x25],bh
10000c63:	58                   	pop    eax
10000c64:	0a 00                	or     al,BYTE PTR [eax]
10000c66:	46                   	inc    esi
10000c67:	6c                   	ins    BYTE PTR es:[edi],dx
10000c68:	6f                   	outs   dx,DWORD PTR ds:[esi]
10000c69:	70 70                	jo     10000cdb <FloppyDrive::close(int, int, void*)+0xa1>
10000c6b:	79 20                	jns    10000c8d <FloppyDrive::close(int, int, void*)+0x53>
10000c6d:	44                   	inc    esp
10000c6e:	69 73 6b 20 43 6f 6e 	imul   esi,DWORD PTR [ebx+0x6b],0x6e6f4320
10000c75:	74 72                	je     10000ce9 <FloppyDrive::close(int, int, void*)+0xaf>
10000c77:	6f                   	outs   dx,DWORD PTR ds:[esi]
10000c78:	6c                   	ins    BYTE PTR es:[edi],dx
10000c79:	6c                   	ins    BYTE PTR es:[edi],dx
10000c7a:	65 72 00             	gs jb  10000c7d <FloppyDrive::close(int, int, void*)+0x43>
10000c7d:	46                   	inc    esi
10000c7e:	6c                   	ins    BYTE PTR es:[edi],dx
10000c7f:	6f                   	outs   dx,DWORD PTR ds:[esi]
10000c80:	70 70                	jo     10000cf2 <FloppyDrive::close(int, int, void*)+0xb8>
10000c82:	79 3a                	jns    10000cbe <FloppyDrive::close(int, int, void*)+0x84>
10000c84:	3a 46 6c             	cmp    al,BYTE PTR [esi+0x6c]
10000c87:	6f                   	outs   dx,DWORD PTR ds:[esi]
10000c88:	70 70                	jo     10000cfa <FloppyDrive::close(int, int, void*)+0xc0>
10000c8a:	79 28                	jns    10000cb4 <FloppyDrive::close(int, int, void*)+0x7a>
10000c8c:	29 0a                	sub    DWORD PTR [edx],ecx
10000c8e:	00 00                	add    BYTE PTR [eax],al
10000c90:	50                   	push   eax
10000c91:	52                   	push   edx
10000c92:	45                   	inc    ebp
10000c93:	56                   	push   esi
10000c94:	49                   	dec    ecx
10000c95:	4f                   	dec    edi
10000c96:	55                   	push   ebp
10000c97:	53                   	push   ebx
10000c98:	20 43 4f             	and    BYTE PTR [ebx+0x4f],al
10000c9b:	4d                   	dec    ebp
10000c9c:	4d                   	dec    ebp
10000c9d:	41                   	inc    ecx
10000c9e:	4e                   	dec    esi
10000c9f:	44                   	inc    esp
10000ca0:	20 46 41             	and    BYTE PTR [esi+0x41],al
10000ca3:	49                   	dec    ecx
10000ca4:	4c                   	dec    esp
10000ca5:	45                   	inc    ebp
10000ca6:	44                   	inc    esp
10000ca7:	2c 20                	sub    al,0x20
10000ca9:	43                   	inc    ebx
10000caa:	41                   	inc    ecx
10000cab:	55                   	push   ebp
10000cac:	47                   	inc    edi
10000cad:	48                   	dec    eax
10000cae:	54                   	push   esp
10000caf:	20 42 59             	and    BYTE PTR [edx+0x59],al
10000cb2:	20 77 72             	and    BYTE PTR [edi+0x72],dh
10000cb5:	69 74 65 43 6f 6d 6d 61 	imul   esi,DWORD PTR [ebp+eiz*2+0x43],0x616d6d6f
10000cbd:	6e                   	outs   dx,BYTE PTR ds:[esi]
10000cbe:	64 00 44 49 44       	add    BYTE PTR fs:[ecx+ecx*2+0x44],al
10000cc3:	20 4e 4f             	and    BYTE PTR [esi+0x4f],cl
10000cc6:	54                   	push   esp
10000cc7:	20 43 48             	and    BYTE PTR [ebx+0x48],al
10000cca:	45                   	inc    ebp
10000ccb:	43                   	inc    ebx
10000ccc:	4b                   	dec    ebx
10000ccd:	20 46 4f             	and    BYTE PTR [esi+0x4f],al
10000cd0:	52                   	push   edx
10000cd1:	20 46 41             	and    BYTE PTR [esi+0x41],al
10000cd4:	49                   	dec    ecx
10000cd5:	4c                   	dec    esp
10000cd6:	55                   	push   ebp
10000cd7:	52                   	push   edx
10000cd8:	45                   	inc    ebp
10000cd9:	20 42 45             	and    BYTE PTR [edx+0x45],al
10000cdc:	46                   	inc    esi
10000cdd:	4f                   	dec    edi
10000cde:	52                   	push   edx
10000cdf:	45                   	inc    ebp
10000ce0:	20 77 72             	and    BYTE PTR [edi+0x72],dh
10000ce3:	69 74 65 43 6f 6d 6d 61 	imul   esi,DWORD PTR [ebp+eiz*2+0x43],0x616d6d6f
10000ceb:	6e                   	outs   dx,BYTE PTR ds:[esi]
10000cec:	64 00 46 6c          	add    BYTE PTR fs:[esi+0x6c],al
10000cf0:	6f                   	outs   dx,DWORD PTR ds:[esi]
10000cf1:	70 70                	jo     10000d63 <vtable for FloppyDrive+0x1b>
10000cf3:	79 3a                	jns    10000d2f <FloppyDrive::close(int, int, void*)+0xf5>
10000cf5:	3a 64 72 69          	cmp    ah,BYTE PTR [edx+esi*2+0x69]
10000cf9:	76 65                	jbe    10000d60 <vtable for FloppyDrive+0x18>
10000cfb:	44                   	inc    esp
10000cfc:	65 74 65             	gs je  10000d64 <vtable for FloppyDrive+0x1c>
10000cff:	63 74 69 6f          	arpl   WORD PTR [ecx+ebp*2+0x6f],si
10000d03:	6e                   	outs   dx,BYTE PTR ds:[esi]
10000d04:	28 29                	sub    BYTE PTR [ecx],ch
10000d06:	0a 00                	or     al,BYTE PTR [eax]
10000d08:	44                   	inc    esp
10000d09:	72 69                	jb     10000d74 <vtable for FloppyDrive+0x2c>
10000d0b:	76 65                	jbe    10000d72 <vtable for FloppyDrive+0x2a>
10000d0d:	20 74 79 70          	and    BYTE PTR [ecx+edi*2+0x70],dh
10000d11:	65 20 30             	and    BYTE PTR gs:[eax],dh
10000d14:	3a 20                	cmp    ah,BYTE PTR [eax]
10000d16:	25 73 0a 00 44       	and    eax,0x44000a73
10000d1b:	72 69                	jb     10000d86 <vtable for Floppy+0x2>
10000d1d:	76 65                	jbe    10000d84 <vtable for Floppy>
10000d1f:	20 74 79 70          	and    BYTE PTR [ecx+edi*2+0x70],dh
10000d23:	65 20 31             	and    BYTE PTR gs:[ecx],dh
10000d26:	3a 20                	cmp    ah,BYTE PTR [eax]
10000d28:	25 73 0a 00 55       	and    eax,0x55000a73
10000d2d:	4e                   	dec    esi
10000d2e:	49                   	dec    ecx
10000d2f:	4d                   	dec    ebp
10000d30:	50                   	push   eax
10000d31:	4c                   	dec    esp
10000d32:	2e 00 46 6c          	add    BYTE PTR cs:[esi+0x6c],al
10000d36:	6f                   	outs   dx,DWORD PTR ds:[esi]
10000d37:	70 70                	jo     10000da9 <vtable for Floppy+0x25>
10000d39:	79 20                	jns    10000d5b <vtable for FloppyDrive+0x13>
10000d3b:	44                   	inc    esp
10000d3c:	69 73 6b 20 44 72 69 	imul   esi,DWORD PTR [ebx+0x6b],0x69724420
10000d43:	76 65                	jbe    10000daa <vtable for Floppy+0x26>
10000d45:	00 66 90             	add    BYTE PTR [esi-0x70],ah

10000d48 <vtable for FloppyDrive>:
	...
	10000d58: R_386_32	FloppyDrive::open(int, int, void*)
	10000d5c: R_386_32	FloppyDrive::close(int, int, void*)
	10000d60: R_386_32	Device::hibernate()
	10000d64: R_386_32	Device::wake()
	10000d68: R_386_32	Device::detect()
	10000d6c: R_386_32	Device::disableLegacy()
	10000d70: R_386_32	Device::powerSaving(PowerSavingLevel)
	10000d74: R_386_32	PhysicalDisk::eject()
	10000d78: R_386_32	__cxa_pure_virtual
	10000d7c: R_386_32	__cxa_pure_virtual
	10000d80: R_386_32	FloppyDrive::configure()

10000d84 <vtable for Floppy>:
	...
	10000d8c: R_386_32	Floppy::~Floppy()
	10000d90: R_386_32	Floppy::~Floppy()
	10000d94: R_386_32	Floppy::open(int, int, void*)
	10000d98: R_386_32	Floppy::close(int, int, void*)
	10000d9c: R_386_32	Device::hibernate()
	10000da0: R_386_32	Device::wake()
	10000da4: R_386_32	Device::detect()
	10000da8: R_386_32	Device::disableLegacy()
	10000dac: R_386_32	Device::powerSaving(PowerSavingLevel)
	10000db0: R_386_32	Floppy::wasFailure()
	10000db4: R_386_32	Floppy::configure()

Disassembly of section .text._ZN6FloppyD2Ev:

10000db8 <Floppy::~Floppy()>:
10000db8:	55                   	push   ebp
10000db9:	89 e5                	mov    ebp,esp
10000dbb:	83 ec 08             	sub    esp,0x8
10000dbe:	ba 08 00 00 00       	mov    edx,0x8	10000dbf: R_386_32	vtable for Floppy
10000dc3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000dc6:	89 10                	mov    DWORD PTR [eax],edx
10000dc8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000dcb:	83 ec 0c             	sub    esp,0xc
10000dce:	50                   	push   eax
10000dcf:	e8 fc ff ff ff       	call   10000dd0 <Floppy::~Floppy()+0x18>	10000dd0: R_386_PC32	HardDiskController::~HardDiskController()
10000dd4:	83 c4 10             	add    esp,0x10
10000dd7:	90                   	nop
10000dd8:	c9                   	leave  
10000dd9:	c3                   	ret    

Disassembly of section .text._ZN6FloppyD0Ev:

10000dda <Floppy::~Floppy()>:
10000dda:	55                   	push   ebp
10000ddb:	89 e5                	mov    ebp,esp
10000ddd:	83 ec 08             	sub    esp,0x8
10000de0:	83 ec 0c             	sub    esp,0xc
10000de3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000de6:	e8 fc ff ff ff       	call   10000de7 <Floppy::~Floppy()+0xd>	10000de7: R_386_PC32	Floppy::~Floppy()
10000deb:	83 c4 10             	add    esp,0x10
10000dee:	83 ec 08             	sub    esp,0x8
10000df1:	68 a8 01 00 00       	push   0x1a8
10000df6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000df9:	e8 fc ff ff ff       	call   10000dfa <Floppy::~Floppy()+0x20>	10000dfa: R_386_PC32	operator delete(void*, unsigned long)
10000dfe:	83 c4 10             	add    esp,0x10
10000e01:	c9                   	leave  
10000e02:	c3                   	ret    
