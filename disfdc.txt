
packages/system/32/0002/floppy.sys:     file format elf32-i386


Disassembly of section .text:

10000000 <start(void*)-0x17>:
10000000:	55                   	push   ebp
10000001:	89 e5                	mov    ebp,esp
10000003:	83 ec 08             	sub    esp,0x8
10000006:	83 ec 0c             	sub    esp,0xc
10000009:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000000c:	e8 fc ff ff ff       	call   1000000d <start(void*)-0xa>	1000000d: R_386_PC32	start(void*)
10000011:	83 c4 10             	add    esp,0x10
10000014:	90                   	nop
10000015:	c9                   	leave  
10000016:	c3                   	ret    

10000017 <start(void*)>:
10000017:	55                   	push   ebp
10000018:	89 e5                	mov    ebp,esp
1000001a:	53                   	push   ebx
1000001b:	83 ec 14             	sub    esp,0x14
1000001e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000021:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
10000024:	83 ec 0c             	sub    esp,0xc
10000027:	68 b0 01 00 00       	push   0x1b0
1000002c:	e8 fc ff ff ff       	call   1000002d <start(void*)+0x16>	1000002d: R_386_PC32	operator new(unsigned long)
10000031:	83 c4 10             	add    esp,0x10
10000034:	89 c3                	mov    ebx,eax
10000036:	83 ec 0c             	sub    esp,0xc
10000039:	53                   	push   ebx
1000003a:	e8 fc ff ff ff       	call   1000003b <start(void*)+0x24>	1000003b: R_386_PC32	Floppy::Floppy()
1000003f:	83 c4 10             	add    esp,0x10
10000042:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
10000045:	83 ec 08             	sub    esp,0x8
10000048:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
1000004b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
1000004e:	e8 fc ff ff ff       	call   1000004f <start(void*)+0x38>	1000004f: R_386_PC32	Device::addChild(Device*)
10000053:	83 c4 10             	add    esp,0x10
10000056:	6a 00                	push   0x0
10000058:	6a 00                	push   0x0
1000005a:	68 f0 03 00 00       	push   0x3f0
1000005f:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000062:	e8 fc ff ff ff       	call   10000063 <start(void*)+0x4c>	10000063: R_386_PC32	Floppy::_open(int, int, void*)
10000067:	83 c4 10             	add    esp,0x10
1000006a:	90                   	nop
1000006b:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
1000006e:	c9                   	leave  
1000006f:	c3                   	ret    

10000070 <floppyMotorFunction(void*)>:
10000070:	55                   	push   ebp
10000071:	89 e5                	mov    ebp,esp
10000073:	83 ec 18             	sub    esp,0x18
10000076:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000079:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
1000007c:	e8 fc ff ff ff       	call   1000007d <floppyMotorFunction(void*)+0xd>	1000007d: R_386_PC32	unlockScheduler()
10000081:	83 ec 08             	sub    esp,0x8
10000084:	6a 00                	push   0x0
10000086:	68 00 84 d7 17       	push   0x17d78400
1000008b:	e8 fc ff ff ff       	call   1000008c <floppyMotorFunction(void*)+0x1c>	1000008c: R_386_PC32	nanoSleep(unsigned long long)
10000090:	83 c4 10             	add    esp,0x10
10000093:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
1000009a:	83 7d f4 03          	cmp    DWORD PTR [ebp-0xc],0x3
1000009e:	7f e1                	jg     10000081 <floppyMotorFunction(void*)+0x11>
100000a0:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100000a3:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
100000a6:	83 c2 58             	add    edx,0x58
100000a9:	8b 44 90 04          	mov    eax,DWORD PTR [eax+edx*4+0x4]
100000ad:	83 f8 02             	cmp    eax,0x2
100000b0:	0f 85 8a 00 00 00    	jne    10000140 <floppyMotorFunction(void*)+0xd0>
100000b6:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100000b9:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
100000bc:	83 c2 5c             	add    edx,0x5c
100000bf:	8b 44 90 04          	mov    eax,DWORD PTR [eax+edx*4+0x4]
100000c3:	8d 88 70 fe ff ff    	lea    ecx,[eax-0x190]
100000c9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100000cc:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
100000cf:	83 c2 5c             	add    edx,0x5c
100000d2:	89 4c 90 04          	mov    DWORD PTR [eax+edx*4+0x4],ecx
100000d6:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100000d9:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
100000dc:	83 c2 5c             	add    edx,0x5c
100000df:	8b 44 90 04          	mov    eax,DWORD PTR [eax+edx*4+0x4]
100000e3:	85 c0                	test   eax,eax
100000e5:	7f 59                	jg     10000140 <floppyMotorFunction(void*)+0xd0>
100000e7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100000ea:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
100000ed:	83 c2 58             	add    edx,0x58
100000f0:	c7 44 90 04 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x4],0x0
100000f8:	e8 fc ff ff ff       	call   100000f9 <floppyMotorFunction(void*)+0x89>	100000f9: R_386_PC32	lockScheduler()
100000fd:	83 ec 08             	sub    esp,0x8
10000100:	6a 02                	push   0x2
10000102:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000105:	e8 fc ff ff ff       	call   10000106 <floppyMotorFunction(void*)+0x96>	10000106: R_386_PC32	Floppy::readPort(FloppyReg)
1000010a:	83 c4 10             	add    esp,0x10
1000010d:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
10000110:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10000113:	ba 10 00 00 00       	mov    edx,0x10
10000118:	88 c1                	mov    cl,al
1000011a:	d3 e2                	shl    edx,cl
1000011c:	89 d0                	mov    eax,edx
1000011e:	f7 d0                	not    eax
10000120:	88 c2                	mov    dl,al
10000122:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
10000125:	21 d0                	and    eax,edx
10000127:	0f b6 c0             	movzx  eax,al
1000012a:	83 ec 04             	sub    esp,0x4
1000012d:	50                   	push   eax
1000012e:	6a 02                	push   0x2
10000130:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000133:	e8 fc ff ff ff       	call   10000134 <floppyMotorFunction(void*)+0xc4>	10000134: R_386_PC32	Floppy::writePort(FloppyReg, unsigned char)
10000138:	83 c4 10             	add    esp,0x10
1000013b:	e8 fc ff ff ff       	call   1000013c <floppyMotorFunction(void*)+0xcc>	1000013c: R_386_PC32	unlockScheduler()
10000140:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10000143:	e9 52 ff ff ff       	jmp    1000009a <floppyMotorFunction(void*)+0x2a>

10000148 <floppyIRQHandler(regs*, void*)>:
10000148:	55                   	push   ebp
10000149:	89 e5                	mov    ebp,esp
1000014b:	83 ec 10             	sub    esp,0x10
1000014e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000151:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
10000154:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000157:	c6 80 60 01 00 00 01 	mov    BYTE PTR [eax+0x160],0x1
1000015e:	90                   	nop
1000015f:	c9                   	leave  
10000160:	c3                   	ret    
10000161:	90                   	nop

10000162 <Floppy::Floppy()>:
10000162:	55                   	push   ebp
10000163:	89 e5                	mov    ebp,esp
10000165:	83 ec 08             	sub    esp,0x8
10000168:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000016b:	83 ec 08             	sub    esp,0x8
1000016e:	68 84 24 00 10       	push   0x10002484	1000016f: R_386_32	.text
10000173:	50                   	push   eax
10000174:	e8 fc ff ff ff       	call   10000175 <Floppy::Floppy()+0x13>	10000175: R_386_PC32	HardDiskController::HardDiskController(char const*)
10000179:	83 c4 10             	add    esp,0x10
1000017c:	ba 08 00 00 00       	mov    edx,0x8	1000017d: R_386_32	vtable for Floppy
10000181:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000184:	89 10                	mov    DWORD PTR [eax],edx
10000186:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000189:	66 c7 80 58 01 00 00 f0 03 	mov    WORD PTR [eax+0x158],0x3f0
10000192:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000195:	c6 80 84 01 00 00 01 	mov    BYTE PTR [eax+0x184],0x1
1000019c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000019f:	c6 80 85 01 00 00 00 	mov    BYTE PTR [eax+0x185],0x0
100001a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100001a9:	c6 80 86 01 00 00 00 	mov    BYTE PTR [eax+0x186],0x0
100001b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100001b3:	c6 80 87 01 00 00 00 	mov    BYTE PTR [eax+0x187],0x0
100001ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100001bd:	c6 80 88 01 00 00 01 	mov    BYTE PTR [eax+0x188],0x1
100001c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100001c7:	c6 80 89 01 00 00 01 	mov    BYTE PTR [eax+0x189],0x1
100001ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100001d1:	c6 80 8a 01 00 00 00 	mov    BYTE PTR [eax+0x18a],0x0
100001d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100001db:	c7 80 8c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x18c],0xffffffff
100001e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100001e8:	83 ec 0c             	sub    esp,0xc
100001eb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100001ee:	6a 01                	push   0x1
100001f0:	68 00 00 00 00       	push   0x0	100001f1: R_386_32	floppyIRQHandler(regs*, void*)
100001f5:	6a 06                	push   0x6
100001f7:	50                   	push   eax
100001f8:	e8 fc ff ff ff       	call   100001f9 <Floppy::Floppy()+0x97>	100001f9: R_386_PC32	Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)
100001fd:	83 c4 20             	add    esp,0x20
10000200:	89 c2                	mov    edx,eax
10000202:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000205:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
1000020b:	a1 00 00 00 00       	mov    eax,ds:0x0	1000020c: R_386_32	kernelProcess
10000210:	68 d2 00 00 00       	push   0xd2
10000215:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000218:	68 00 00 00 00       	push   0x0	10000219: R_386_32	floppyMotorFunction(void*)
1000021d:	50                   	push   eax
1000021e:	e8 fc ff ff ff       	call   1000021f <Floppy::Floppy()+0xbd>	1000021f: R_386_PC32	Process::createThread(void (*)(void*), void*, int)
10000223:	83 c4 10             	add    esp,0x10
10000226:	89 c2                	mov    edx,eax
10000228:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000022b:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
10000231:	90                   	nop
10000232:	c9                   	leave  
10000233:	c3                   	ret    

10000234 <Floppy::wasFailure()>:
10000234:	55                   	push   ebp
10000235:	89 e5                	mov    ebp,esp
10000237:	83 ec 10             	sub    esp,0x10
1000023a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000023d:	c6 80 87 01 00 00 01 	mov    BYTE PTR [eax+0x187],0x1
10000244:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000247:	8a 80 86 01 00 00    	mov    al,BYTE PTR [eax+0x186]
1000024d:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
10000250:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000253:	c6 80 86 01 00 00 00 	mov    BYTE PTR [eax+0x186],0x0
1000025a:	8a 45 ff             	mov    al,BYTE PTR [ebp-0x1]
1000025d:	c9                   	leave  
1000025e:	c3                   	ret    
1000025f:	90                   	nop

10000260 <Floppy::writeCommand(unsigned char)>:
10000260:	55                   	push   ebp
10000261:	89 e5                	mov    ebp,esp
10000263:	83 ec 28             	sub    esp,0x28
10000266:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000269:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
1000026c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000026f:	8a 80 86 01 00 00    	mov    al,BYTE PTR [eax+0x186]
10000275:	84 c0                	test   al,al
10000277:	74 10                	je     10000289 <Floppy::writeCommand(unsigned char)+0x29>
10000279:	83 ec 0c             	sub    esp,0xc
1000027c:	68 9c 24 00 10       	push   0x1000249c	1000027d: R_386_32	.text
10000281:	e8 fc ff ff ff       	call   10000282 <Floppy::writeCommand(unsigned char)+0x22>	10000282: R_386_PC32	Krnl::panic(char const*)
10000286:	83 c4 10             	add    esp,0x10
10000289:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000028c:	8a 80 87 01 00 00    	mov    al,BYTE PTR [eax+0x187]
10000292:	83 f0 01             	xor    eax,0x1
10000295:	84 c0                	test   al,al
10000297:	74 10                	je     100002a9 <Floppy::writeCommand(unsigned char)+0x49>
10000299:	83 ec 0c             	sub    esp,0xc
1000029c:	68 cc 24 00 10       	push   0x100024cc	1000029d: R_386_32	.text
100002a1:	e8 fc ff ff ff       	call   100002a2 <Floppy::writeCommand(unsigned char)+0x42>	100002a2: R_386_PC32	Krnl::panic(char const*)
100002a6:	83 c4 10             	add    esp,0x10
100002a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002ac:	c6 80 87 01 00 00 00 	mov    BYTE PTR [eax+0x187],0x0
100002b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002b6:	c6 80 86 01 00 00 00 	mov    BYTE PTR [eax+0x186],0x0
100002bd:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
100002c4:	83 7d f4 31          	cmp    DWORD PTR [ebp-0xc],0x31
100002c8:	7f 53                	jg     1000031d <Floppy::writeCommand(unsigned char)+0xbd>
100002ca:	83 ec 08             	sub    esp,0x8
100002cd:	6a 00                	push   0x0
100002cf:	68 80 96 98 00       	push   0x989680
100002d4:	e8 fc ff ff ff       	call   100002d5 <Floppy::writeCommand(unsigned char)+0x75>	100002d5: R_386_PC32	nanoSleep(unsigned long long)
100002d9:	83 c4 10             	add    esp,0x10
100002dc:	83 ec 08             	sub    esp,0x8
100002df:	6a 04                	push   0x4
100002e1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100002e4:	e8 fc ff ff ff       	call   100002e5 <Floppy::writeCommand(unsigned char)+0x85>	100002e5: R_386_PC32	Floppy::readPort(FloppyReg)
100002e9:	83 c4 10             	add    esp,0x10
100002ec:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
100002ef:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
100002f2:	84 c0                	test   al,al
100002f4:	79 22                	jns    10000318 <Floppy::writeCommand(unsigned char)+0xb8>
100002f6:	0f b6 45 f3          	movzx  eax,BYTE PTR [ebp-0xd]
100002fa:	83 e0 40             	and    eax,0x40
100002fd:	85 c0                	test   eax,eax
100002ff:	75 17                	jne    10000318 <Floppy::writeCommand(unsigned char)+0xb8>
10000301:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
10000305:	83 ec 04             	sub    esp,0x4
10000308:	50                   	push   eax
10000309:	6a 05                	push   0x5
1000030b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000030e:	e8 fc ff ff ff       	call   1000030f <Floppy::writeCommand(unsigned char)+0xaf>	1000030f: R_386_PC32	Floppy::writePort(FloppyReg, unsigned char)
10000313:	83 c4 10             	add    esp,0x10
10000316:	eb 0f                	jmp    10000327 <Floppy::writeCommand(unsigned char)+0xc7>
10000318:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
1000031b:	eb a7                	jmp    100002c4 <Floppy::writeCommand(unsigned char)+0x64>
1000031d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000320:	c6 80 86 01 00 00 01 	mov    BYTE PTR [eax+0x186],0x1
10000327:	c9                   	leave  
10000328:	c3                   	ret    
10000329:	90                   	nop

1000032a <Floppy::readData()>:
1000032a:	55                   	push   ebp
1000032b:	89 e5                	mov    ebp,esp
1000032d:	83 ec 18             	sub    esp,0x18
10000330:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000333:	8a 80 86 01 00 00    	mov    al,BYTE PTR [eax+0x186]
10000339:	84 c0                	test   al,al
1000033b:	74 10                	je     1000034d <Floppy::readData()+0x23>
1000033d:	83 ec 0c             	sub    esp,0xc
10000340:	68 9c 24 00 10       	push   0x1000249c	10000341: R_386_32	.text
10000345:	e8 fc ff ff ff       	call   10000346 <Floppy::readData()+0x1c>	10000346: R_386_PC32	Krnl::panic(char const*)
1000034a:	83 c4 10             	add    esp,0x10
1000034d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000350:	8a 80 87 01 00 00    	mov    al,BYTE PTR [eax+0x187]
10000356:	83 f0 01             	xor    eax,0x1
10000359:	84 c0                	test   al,al
1000035b:	74 10                	je     1000036d <Floppy::readData()+0x43>
1000035d:	83 ec 0c             	sub    esp,0xc
10000360:	68 cc 24 00 10       	push   0x100024cc	10000361: R_386_32	.text
10000365:	e8 fc ff ff ff       	call   10000366 <Floppy::readData()+0x3c>	10000366: R_386_PC32	Krnl::panic(char const*)
1000036a:	83 c4 10             	add    esp,0x10
1000036d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000370:	c6 80 87 01 00 00 00 	mov    BYTE PTR [eax+0x187],0x0
10000377:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000037a:	c6 80 86 01 00 00 00 	mov    BYTE PTR [eax+0x186],0x0
10000381:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
10000388:	83 7d f4 31          	cmp    DWORD PTR [ebp-0xc],0x31
1000038c:	7f 4e                	jg     100003dc <Floppy::readData()+0xb2>
1000038e:	83 ec 08             	sub    esp,0x8
10000391:	6a 00                	push   0x0
10000393:	68 80 96 98 00       	push   0x989680
10000398:	e8 fc ff ff ff       	call   10000399 <Floppy::readData()+0x6f>	10000399: R_386_PC32	nanoSleep(unsigned long long)
1000039d:	83 c4 10             	add    esp,0x10
100003a0:	83 ec 08             	sub    esp,0x8
100003a3:	6a 04                	push   0x4
100003a5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100003a8:	e8 fc ff ff ff       	call   100003a9 <Floppy::readData()+0x7f>	100003a9: R_386_PC32	Floppy::readPort(FloppyReg)
100003ad:	83 c4 10             	add    esp,0x10
100003b0:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
100003b3:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
100003b6:	84 c0                	test   al,al
100003b8:	79 1d                	jns    100003d7 <Floppy::readData()+0xad>
100003ba:	0f b6 45 f3          	movzx  eax,BYTE PTR [ebp-0xd]
100003be:	83 e0 40             	and    eax,0x40
100003c1:	85 c0                	test   eax,eax
100003c3:	74 12                	je     100003d7 <Floppy::readData()+0xad>
100003c5:	83 ec 08             	sub    esp,0x8
100003c8:	6a 05                	push   0x5
100003ca:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100003cd:	e8 fc ff ff ff       	call   100003ce <Floppy::readData()+0xa4>	100003ce: R_386_PC32	Floppy::readPort(FloppyReg)
100003d2:	83 c4 10             	add    esp,0x10
100003d5:	eb 11                	jmp    100003e8 <Floppy::readData()+0xbe>
100003d7:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
100003da:	eb ac                	jmp    10000388 <Floppy::readData()+0x5e>
100003dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100003df:	c6 80 86 01 00 00 01 	mov    BYTE PTR [eax+0x186],0x1
100003e6:	b0 00                	mov    al,0x0
100003e8:	c9                   	leave  
100003e9:	c3                   	ret    

100003ea <Floppy::readPort(FloppyReg)>:
100003ea:	55                   	push   ebp
100003eb:	89 e5                	mov    ebp,esp
100003ed:	83 ec 10             	sub    esp,0x10
100003f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100003f3:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
100003f9:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
100003fc:	01 d0                	add    eax,edx
100003fe:	0f b7 c0             	movzx  eax,ax
10000401:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
10000405:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
10000409:	89 c2                	mov    edx,eax
1000040b:	ec                   	in     al,dx
1000040c:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
1000040f:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
10000412:	90                   	nop
10000413:	c9                   	leave  
10000414:	c3                   	ret    
10000415:	90                   	nop

10000416 <Floppy::writePort(FloppyReg, unsigned char)>:
10000416:	55                   	push   ebp
10000417:	89 e5                	mov    ebp,esp
10000419:	83 ec 14             	sub    esp,0x14
1000041c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
1000041f:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
10000422:	0f b6 4d ec          	movzx  ecx,BYTE PTR [ebp-0x14]
10000426:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000429:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
1000042f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10000432:	01 d0                	add    eax,edx
10000434:	0f b7 c0             	movzx  eax,ax
10000437:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
1000043b:	88 4d fd             	mov    BYTE PTR [ebp-0x3],cl
1000043e:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
10000441:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
10000445:	ee                   	out    dx,al
10000446:	90                   	nop
10000447:	c9                   	leave  
10000448:	c3                   	ret    
10000449:	90                   	nop

1000044a <Floppy::driveDetection()>:
1000044a:	55                   	push   ebp
1000044b:	89 e5                	mov    ebp,esp
1000044d:	53                   	push   ebx
1000044e:	83 ec 24             	sub    esp,0x24
10000451:	83 ec 0c             	sub    esp,0xc
10000454:	68 fa 24 00 10       	push   0x100024fa	10000455: R_386_32	.text
10000459:	e8 fc ff ff ff       	call   1000045a <Floppy::driveDetection()+0x10>	1000045a: R_386_PC32	Dbg::kprintf(char const*, ...)
1000045e:	83 c4 10             	add    esp,0x10
10000461:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000464:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
1000046a:	66 3d f0 03          	cmp    ax,0x3f0
1000046e:	0f 85 1e 01 00 00    	jne    10000592 <Floppy::driveDetection()+0x148>
10000474:	a1 00 00 00 00       	mov    eax,ds:0x0	10000475: R_386_32	Krnl::computer
10000479:	83 ec 08             	sub    esp,0x8
1000047c:	6a 10                	push   0x10
1000047e:	50                   	push   eax
1000047f:	e8 fc ff ff ff       	call   10000480 <Floppy::driveDetection()+0x36>	10000480: R_386_PC32	Computer::readCMOS(unsigned char)
10000484:	83 c4 10             	add    esp,0x10
10000487:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
1000048a:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
1000048e:	c1 f8 04             	sar    eax,0x4
10000491:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10000494:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
10000498:	83 e0 0f             	and    eax,0xf
1000049b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
1000049e:	83 ec 08             	sub    esp,0x8
100004a1:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
100004a4:	68 14 25 00 10       	push   0x10002514	100004a5: R_386_32	.text
100004a9:	e8 fc ff ff ff       	call   100004aa <Floppy::driveDetection()+0x60>	100004aa: R_386_PC32	Dbg::kprintf(char const*, ...)
100004ae:	83 c4 10             	add    esp,0x10
100004b1:	83 ec 08             	sub    esp,0x8
100004b4:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
100004b7:	68 28 25 00 10       	push   0x10002528	100004b8: R_386_32	.text
100004bc:	e8 fc ff ff ff       	call   100004bd <Floppy::driveDetection()+0x73>	100004bd: R_386_PC32	Dbg::kprintf(char const*, ...)
100004c1:	83 c4 10             	add    esp,0x10
100004c4:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
100004c8:	74 5e                	je     10000528 <Floppy::driveDetection()+0xde>
100004ca:	83 ec 0c             	sub    esp,0xc
100004cd:	68 74 01 00 00       	push   0x174
100004d2:	e8 fc ff ff ff       	call   100004d3 <Floppy::driveDetection()+0x89>	100004d3: R_386_PC32	operator new(unsigned long)
100004d7:	83 c4 10             	add    esp,0x10
100004da:	89 c3                	mov    ebx,eax
100004dc:	83 ec 0c             	sub    esp,0xc
100004df:	53                   	push   ebx
100004e0:	e8 fc ff ff ff       	call   100004e1 <Floppy::driveDetection()+0x97>	100004e1: R_386_PC32	FloppyDrive::FloppyDrive()
100004e5:	83 c4 10             	add    esp,0x10
100004e8:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
100004eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100004ee:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
100004f1:	89 90 90 01 00 00    	mov    DWORD PTR [eax+0x190],edx
100004f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100004fa:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
100004fd:	89 90 a0 01 00 00    	mov    DWORD PTR [eax+0x1a0],edx
10000503:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000506:	83 ec 08             	sub    esp,0x8
10000509:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
1000050c:	50                   	push   eax
1000050d:	e8 fc ff ff ff       	call   1000050e <Floppy::driveDetection()+0xc4>	1000050e: R_386_PC32	Device::addChild(Device*)
10000512:	83 c4 10             	add    esp,0x10
10000515:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000518:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
1000051b:	6a 00                	push   0x0
1000051d:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
10000520:	e8 fc ff ff ff       	call   10000521 <Floppy::driveDetection()+0xd7>	10000521: R_386_PC32	FloppyDrive::_open(int, int, void*)
10000525:	83 c4 10             	add    esp,0x10
10000528:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
1000052c:	74 64                	je     10000592 <Floppy::driveDetection()+0x148>
1000052e:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
10000532:	74 5e                	je     10000592 <Floppy::driveDetection()+0x148>
10000534:	83 ec 0c             	sub    esp,0xc
10000537:	68 74 01 00 00       	push   0x174
1000053c:	e8 fc ff ff ff       	call   1000053d <Floppy::driveDetection()+0xf3>	1000053d: R_386_PC32	operator new(unsigned long)
10000541:	83 c4 10             	add    esp,0x10
10000544:	89 c3                	mov    ebx,eax
10000546:	83 ec 0c             	sub    esp,0xc
10000549:	53                   	push   ebx
1000054a:	e8 fc ff ff ff       	call   1000054b <Floppy::driveDetection()+0x101>	1000054b: R_386_PC32	FloppyDrive::FloppyDrive()
1000054f:	83 c4 10             	add    esp,0x10
10000552:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
10000555:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000558:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
1000055b:	89 90 94 01 00 00    	mov    DWORD PTR [eax+0x194],edx
10000561:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000564:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10000567:	89 90 a4 01 00 00    	mov    DWORD PTR [eax+0x1a4],edx
1000056d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000570:	83 ec 08             	sub    esp,0x8
10000573:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
10000576:	50                   	push   eax
10000577:	e8 fc ff ff ff       	call   10000578 <Floppy::driveDetection()+0x12e>	10000578: R_386_PC32	Device::addChild(Device*)
1000057c:	83 c4 10             	add    esp,0x10
1000057f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000582:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
10000585:	6a 01                	push   0x1
10000587:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
1000058a:	e8 fc ff ff ff       	call   1000058b <Floppy::driveDetection()+0x141>	1000058b: R_386_PC32	FloppyDrive::_open(int, int, void*)
1000058f:	83 c4 10             	add    esp,0x10
10000592:	90                   	nop
10000593:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
10000596:	c9                   	leave  
10000597:	c3                   	ret    

10000598 <Floppy::close(int, int, void*)>:
10000598:	b8 00 00 00 00       	mov    eax,0x0
1000059d:	c3                   	ret    

1000059e <Floppy::open(int, int, void*)>:
1000059e:	b8 00 00 00 00       	mov    eax,0x0
100005a3:	c3                   	ret    

100005a4 <Floppy::_open(int, int, void*)>:
100005a4:	55                   	push   ebp
100005a5:	89 e5                	mov    ebp,esp
100005a7:	83 ec 18             	sub    esp,0x18
100005aa:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100005ad:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
100005b0:	66 89 82 58 01 00 00 	mov    WORD PTR [edx+0x158],ax
100005b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100005ba:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
100005c0:	0f b6 c8             	movzx  ecx,al
100005c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100005c6:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
100005cc:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
100005cf:	66 89 44 8a 04       	mov    WORD PTR [edx+ecx*4+0x4],ax
100005d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100005d7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
100005dd:	0f b6 d0             	movzx  edx,al
100005e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100005e3:	c6 44 90 06 06       	mov    BYTE PTR [eax+edx*4+0x6],0x6
100005e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100005eb:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
100005f1:	8d 50 01             	lea    edx,[eax+0x1]
100005f4:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
100005f7:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
100005fd:	0f b6 d0             	movzx  edx,al
10000600:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000603:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
10000607:	83 e1 3f             	and    ecx,0x3f
1000060a:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
1000060e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000611:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
10000617:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
1000061a:	8a 92 c4 00 00 00    	mov    dl,BYTE PTR [edx+0xc4]
10000620:	0f b6 ca             	movzx  ecx,dl
10000623:	83 c0 07             	add    eax,0x7
10000626:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10000629:	66 89 44 8a 04       	mov    WORD PTR [edx+ecx*4+0x4],ax
1000062e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000631:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10000637:	0f b6 d0             	movzx  edx,al
1000063a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000063d:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
10000642:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000645:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
1000064b:	8d 50 01             	lea    edx,[eax+0x1]
1000064e:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
10000651:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
10000657:	0f b6 d0             	movzx  edx,al
1000065a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000065d:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
10000661:	83 e1 3f             	and    ecx,0x3f
10000664:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
10000668:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
1000066f:	83 7d f4 03          	cmp    DWORD PTR [ebp-0xc],0x3
10000673:	7f 26                	jg     1000069b <Floppy::_open(int, int, void*)+0xf7>
10000675:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000678:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
1000067b:	83 c2 68             	add    edx,0x68
1000067e:	c7 04 90 00 00 00 00 	mov    DWORD PTR [eax+edx*4],0x0
10000685:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000688:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
1000068b:	83 c2 58             	add    edx,0x58
1000068e:	c7 44 90 04 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x4],0x0
10000696:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10000699:	eb d4                	jmp    1000066f <Floppy::_open(int, int, void*)+0xcb>
1000069b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000069e:	e8 fc ff ff ff       	call   1000069f <Floppy::_open(int, int, void*)+0xfb>	1000069f: R_386_PC32	Floppy::wasFailure()
100006a3:	83 c4 04             	add    esp,0x4
100006a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100006a9:	c6 80 89 01 00 00 01 	mov    BYTE PTR [eax+0x189],0x1
100006b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100006b3:	c6 80 85 01 00 00 00 	mov    BYTE PTR [eax+0x185],0x0
100006ba:	83 ec 0c             	sub    esp,0xc
100006bd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100006c0:	e8 fc ff ff ff       	call   100006c1 <Floppy::_open(int, int, void*)+0x11d>	100006c1: R_386_PC32	Floppy::reset()
100006c5:	83 c4 10             	add    esp,0x10
100006c8:	83 ec 0c             	sub    esp,0xc
100006cb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100006ce:	e8 fc ff ff ff       	call   100006cf <Floppy::_open(int, int, void*)+0x12b>	100006cf: R_386_PC32	Floppy::driveDetection()
100006d3:	83 c4 10             	add    esp,0x10
100006d6:	b8 00 00 00 00       	mov    eax,0x0
100006db:	c9                   	leave  
100006dc:	c3                   	ret    
100006dd:	90                   	nop

100006de <Floppy::senseInterrupt(int*, int*)>:
100006de:	55                   	push   ebp
100006df:	89 e5                	mov    ebp,esp
100006e1:	83 ec 08             	sub    esp,0x8
100006e4:	83 ec 08             	sub    esp,0x8
100006e7:	6a 08                	push   0x8
100006e9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100006ec:	e8 fc ff ff ff       	call   100006ed <Floppy::senseInterrupt(int*, int*)+0xf>	100006ed: R_386_PC32	Floppy::writeCommand(unsigned char)
100006f1:	83 c4 10             	add    esp,0x10
100006f4:	83 ec 0c             	sub    esp,0xc
100006f7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100006fa:	e8 fc ff ff ff       	call   100006fb <Floppy::senseInterrupt(int*, int*)+0x1d>	100006fb: R_386_PC32	Floppy::wasFailure()
100006ff:	83 c4 10             	add    esp,0x10
10000702:	84 c0                	test   al,al
10000704:	74 04                	je     1000070a <Floppy::senseInterrupt(int*, int*)+0x2c>
10000706:	b0 00                	mov    al,0x0
10000708:	eb 5a                	jmp    10000764 <Floppy::senseInterrupt(int*, int*)+0x86>
1000070a:	83 ec 0c             	sub    esp,0xc
1000070d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000710:	e8 fc ff ff ff       	call   10000711 <Floppy::senseInterrupt(int*, int*)+0x33>	10000711: R_386_PC32	Floppy::readData()
10000715:	83 c4 10             	add    esp,0x10
10000718:	0f b6 d0             	movzx  edx,al
1000071b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
1000071e:	89 10                	mov    DWORD PTR [eax],edx
10000720:	83 ec 0c             	sub    esp,0xc
10000723:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000726:	e8 fc ff ff ff       	call   10000727 <Floppy::senseInterrupt(int*, int*)+0x49>	10000727: R_386_PC32	Floppy::wasFailure()
1000072b:	83 c4 10             	add    esp,0x10
1000072e:	84 c0                	test   al,al
10000730:	74 04                	je     10000736 <Floppy::senseInterrupt(int*, int*)+0x58>
10000732:	b0 00                	mov    al,0x0
10000734:	eb 2e                	jmp    10000764 <Floppy::senseInterrupt(int*, int*)+0x86>
10000736:	83 ec 0c             	sub    esp,0xc
10000739:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000073c:	e8 fc ff ff ff       	call   1000073d <Floppy::senseInterrupt(int*, int*)+0x5f>	1000073d: R_386_PC32	Floppy::readData()
10000741:	83 c4 10             	add    esp,0x10
10000744:	0f b6 d0             	movzx  edx,al
10000747:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
1000074a:	89 10                	mov    DWORD PTR [eax],edx
1000074c:	83 ec 0c             	sub    esp,0xc
1000074f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000752:	e8 fc ff ff ff       	call   10000753 <Floppy::senseInterrupt(int*, int*)+0x75>	10000753: R_386_PC32	Floppy::wasFailure()
10000757:	83 c4 10             	add    esp,0x10
1000075a:	84 c0                	test   al,al
1000075c:	74 04                	je     10000762 <Floppy::senseInterrupt(int*, int*)+0x84>
1000075e:	b0 00                	mov    al,0x0
10000760:	eb 02                	jmp    10000764 <Floppy::senseInterrupt(int*, int*)+0x86>
10000762:	b0 01                	mov    al,0x1
10000764:	c9                   	leave  
10000765:	c3                   	ret    

10000766 <Floppy::lock()>:
10000766:	55                   	push   ebp
10000767:	89 e5                	mov    ebp,esp
10000769:	83 ec 08             	sub    esp,0x8
1000076c:	83 ec 08             	sub    esp,0x8
1000076f:	6a 14                	push   0x14
10000771:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000774:	e8 fc ff ff ff       	call   10000775 <Floppy::lock()+0xf>	10000775: R_386_PC32	Floppy::writeCommand(unsigned char)
10000779:	83 c4 10             	add    esp,0x10
1000077c:	83 ec 0c             	sub    esp,0xc
1000077f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000782:	e8 fc ff ff ff       	call   10000783 <Floppy::lock()+0x1d>	10000783: R_386_PC32	Floppy::wasFailure()
10000787:	83 c4 10             	add    esp,0x10
1000078a:	84 c0                	test   al,al
1000078c:	74 04                	je     10000792 <Floppy::lock()+0x2c>
1000078e:	b0 00                	mov    al,0x0
10000790:	eb 26                	jmp    100007b8 <Floppy::lock()+0x52>
10000792:	83 ec 0c             	sub    esp,0xc
10000795:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000798:	e8 fc ff ff ff       	call   10000799 <Floppy::lock()+0x33>	10000799: R_386_PC32	Floppy::readData()
1000079d:	83 c4 10             	add    esp,0x10
100007a0:	83 ec 0c             	sub    esp,0xc
100007a3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100007a6:	e8 fc ff ff ff       	call   100007a7 <Floppy::lock()+0x41>	100007a7: R_386_PC32	Floppy::wasFailure()
100007ab:	83 c4 10             	add    esp,0x10
100007ae:	84 c0                	test   al,al
100007b0:	74 04                	je     100007b6 <Floppy::lock()+0x50>
100007b2:	b0 00                	mov    al,0x0
100007b4:	eb 02                	jmp    100007b8 <Floppy::lock()+0x52>
100007b6:	b0 01                	mov    al,0x1
100007b8:	c9                   	leave  
100007b9:	c3                   	ret    

100007ba <Floppy::waitIRQ(int)>:
100007ba:	55                   	push   ebp
100007bb:	89 e5                	mov    ebp,esp
100007bd:	83 ec 18             	sub    esp,0x18
100007c0:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
100007c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100007ca:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
100007d0:	84 c0                	test   al,al
100007d2:	75 21                	jne    100007f5 <Floppy::waitIRQ(int)+0x3b>
100007d4:	83 ec 08             	sub    esp,0x8
100007d7:	6a 00                	push   0x0
100007d9:	68 80 f0 fa 02       	push   0x2faf080
100007de:	e8 fc ff ff ff       	call   100007df <Floppy::waitIRQ(int)+0x25>	100007df: R_386_PC32	nanoSleep(unsigned long long)
100007e3:	83 c4 10             	add    esp,0x10
100007e6:	83 45 f4 32          	add    DWORD PTR [ebp-0xc],0x32
100007ea:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
100007ed:	3b 45 0c             	cmp    eax,DWORD PTR [ebp+0xc]
100007f0:	7d 02                	jge    100007f4 <Floppy::waitIRQ(int)+0x3a>
100007f2:	eb d3                	jmp    100007c7 <Floppy::waitIRQ(int)+0xd>
100007f4:	90                   	nop
100007f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100007f8:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
100007fe:	c9                   	leave  
100007ff:	c3                   	ret    

10000800 <Floppy::reset()>:
10000800:	55                   	push   ebp
10000801:	89 e5                	mov    ebp,esp
10000803:	83 ec 28             	sub    esp,0x28
10000806:	83 ec 0c             	sub    esp,0xc
10000809:	68 3c 25 00 10       	push   0x1000253c	1000080a: R_386_32	.text
1000080e:	e8 fc ff ff ff       	call   1000080f <Floppy::reset()+0xf>	1000080f: R_386_PC32	Dbg::kprintf(char const*, ...)
10000813:	83 c4 10             	add    esp,0x10
10000816:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000819:	c6 80 60 01 00 00 00 	mov    BYTE PTR [eax+0x160],0x0
10000820:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000823:	c7 80 8c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x18c],0xffffffff
1000082d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000830:	c6 80 8a 01 00 00 00 	mov    BYTE PTR [eax+0x18a],0x0
10000837:	83 ec 08             	sub    esp,0x8
1000083a:	6a 02                	push   0x2
1000083c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000083f:	e8 fc ff ff ff       	call   10000840 <Floppy::reset()+0x40>	10000840: R_386_PC32	Floppy::readPort(FloppyReg)
10000844:	83 c4 10             	add    esp,0x10
10000847:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
1000084a:	83 ec 04             	sub    esp,0x4
1000084d:	6a 00                	push   0x0
1000084f:	6a 02                	push   0x2
10000851:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000854:	e8 fc ff ff ff       	call   10000855 <Floppy::reset()+0x55>	10000855: R_386_PC32	Floppy::writePort(FloppyReg, unsigned char)
10000859:	83 c4 10             	add    esp,0x10
1000085c:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
1000085f:	83 c8 0c             	or     eax,0xc
10000862:	0f b6 c0             	movzx  eax,al
10000865:	83 ec 04             	sub    esp,0x4
10000868:	50                   	push   eax
10000869:	6a 02                	push   0x2
1000086b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000086e:	e8 fc ff ff ff       	call   1000086f <Floppy::reset()+0x6f>	1000086f: R_386_PC32	Floppy::writePort(FloppyReg, unsigned char)
10000873:	83 c4 10             	add    esp,0x10
10000876:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
1000087a:	83 e0 08             	and    eax,0x8
1000087d:	85 c0                	test   eax,eax
1000087f:	74 3f                	je     100008c0 <Floppy::reset()+0xc0>
10000881:	83 ec 08             	sub    esp,0x8
10000884:	68 90 01 00 00       	push   0x190
10000889:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000088c:	e8 fc ff ff ff       	call   1000088d <Floppy::reset()+0x8d>	1000088d: R_386_PC32	Floppy::waitIRQ(int)
10000891:	83 c4 10             	add    esp,0x10
10000894:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
10000897:	8a 45 ee             	mov    al,BYTE PTR [ebp-0x12]
1000089a:	83 f0 01             	xor    eax,0x1
1000089d:	84 c0                	test   al,al
1000089f:	74 3e                	je     100008df <Floppy::reset()+0xdf>
100008a1:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
100008a4:	83 c8 0c             	or     eax,0xc
100008a7:	0f b6 c0             	movzx  eax,al
100008aa:	83 ec 04             	sub    esp,0x4
100008ad:	50                   	push   eax
100008ae:	6a 02                	push   0x2
100008b0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100008b3:	e8 fc ff ff ff       	call   100008b4 <Floppy::reset()+0xb4>	100008b4: R_386_PC32	Floppy::writePort(FloppyReg, unsigned char)
100008b8:	83 c4 10             	add    esp,0x10
100008bb:	e9 56 ff ff ff       	jmp    10000816 <Floppy::reset()+0x16>
100008c0:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
100008c3:	83 c8 0c             	or     eax,0xc
100008c6:	0f b6 c0             	movzx  eax,al
100008c9:	83 ec 04             	sub    esp,0x4
100008cc:	50                   	push   eax
100008cd:	6a 02                	push   0x2
100008cf:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100008d2:	e8 fc ff ff ff       	call   100008d3 <Floppy::reset()+0xd3>	100008d3: R_386_PC32	Floppy::writePort(FloppyReg, unsigned char)
100008d7:	83 c4 10             	add    esp,0x10
100008da:	e9 37 ff ff ff       	jmp    10000816 <Floppy::reset()+0x16>
100008df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100008e2:	8a 80 89 01 00 00    	mov    al,BYTE PTR [eax+0x189]
100008e8:	84 c0                	test   al,al
100008ea:	0f 84 8f 00 00 00    	je     1000097f <Floppy::reset()+0x17f>
100008f0:	83 ec 04             	sub    esp,0x4
100008f3:	8d 45 e4             	lea    eax,[ebp-0x1c]
100008f6:	50                   	push   eax
100008f7:	8d 45 e8             	lea    eax,[ebp-0x18]
100008fa:	50                   	push   eax
100008fb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100008fe:	e8 fc ff ff ff       	call   100008ff <Floppy::reset()+0xff>	100008ff: R_386_PC32	Floppy::senseInterrupt(int*, int*)
10000903:	83 c4 10             	add    esp,0x10
10000906:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
10000909:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
1000090d:	74 19                	je     10000928 <Floppy::reset()+0x128>
1000090f:	83 ec 04             	sub    esp,0x4
10000912:	8d 45 e4             	lea    eax,[ebp-0x1c]
10000915:	50                   	push   eax
10000916:	8d 45 e8             	lea    eax,[ebp-0x18]
10000919:	50                   	push   eax
1000091a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000091d:	e8 fc ff ff ff       	call   1000091e <Floppy::reset()+0x11e>	1000091e: R_386_PC32	Floppy::senseInterrupt(int*, int*)
10000922:	83 c4 10             	add    esp,0x10
10000925:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
10000928:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
1000092c:	74 19                	je     10000947 <Floppy::reset()+0x147>
1000092e:	83 ec 04             	sub    esp,0x4
10000931:	8d 45 e4             	lea    eax,[ebp-0x1c]
10000934:	50                   	push   eax
10000935:	8d 45 e8             	lea    eax,[ebp-0x18]
10000938:	50                   	push   eax
10000939:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000093c:	e8 fc ff ff ff       	call   1000093d <Floppy::reset()+0x13d>	1000093d: R_386_PC32	Floppy::senseInterrupt(int*, int*)
10000941:	83 c4 10             	add    esp,0x10
10000944:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
10000947:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
1000094b:	74 19                	je     10000966 <Floppy::reset()+0x166>
1000094d:	83 ec 04             	sub    esp,0x4
10000950:	8d 45 e4             	lea    eax,[ebp-0x1c]
10000953:	50                   	push   eax
10000954:	8d 45 e8             	lea    eax,[ebp-0x18]
10000957:	50                   	push   eax
10000958:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000095b:	e8 fc ff ff ff       	call   1000095c <Floppy::reset()+0x15c>	1000095c: R_386_PC32	Floppy::senseInterrupt(int*, int*)
10000960:	83 c4 10             	add    esp,0x10
10000963:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
10000966:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
10000969:	83 f0 01             	xor    eax,0x1
1000096c:	84 c0                	test   al,al
1000096e:	74 0f                	je     1000097f <Floppy::reset()+0x17f>
10000970:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000973:	c6 80 89 01 00 00 00 	mov    BYTE PTR [eax+0x189],0x0
1000097a:	e9 97 fe ff ff       	jmp    10000816 <Floppy::reset()+0x16>
1000097f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000982:	8a 80 84 01 00 00    	mov    al,BYTE PTR [eax+0x184]
10000988:	84 c0                	test   al,al
1000098a:	75 14                	jne    100009a0 <Floppy::reset()+0x1a0>
1000098c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000098f:	8a 80 85 01 00 00    	mov    al,BYTE PTR [eax+0x185]
10000995:	83 f0 01             	xor    eax,0x1
10000998:	84 c0                	test   al,al
1000099a:	0f 84 8f 00 00 00    	je     10000a2f <Floppy::reset()+0x22f>
100009a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100009a3:	8a 80 88 01 00 00    	mov    al,BYTE PTR [eax+0x188]
100009a9:	84 c0                	test   al,al
100009ab:	74 3a                	je     100009e7 <Floppy::reset()+0x1e7>
100009ad:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
100009b4:	83 7d f0 03          	cmp    DWORD PTR [ebp-0x10],0x3
100009b8:	7f 2d                	jg     100009e7 <Floppy::reset()+0x1e7>
100009ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100009bd:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
100009c0:	83 c2 68             	add    edx,0x68
100009c3:	8b 04 90             	mov    eax,DWORD PTR [eax+edx*4]
100009c6:	85 c0                	test   eax,eax
100009c8:	74 18                	je     100009e2 <Floppy::reset()+0x1e2>
100009ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100009cd:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
100009d0:	83 c2 68             	add    edx,0x68
100009d3:	8b 04 90             	mov    eax,DWORD PTR [eax+edx*4]
100009d6:	83 ec 0c             	sub    esp,0xc
100009d9:	50                   	push   eax
100009da:	e8 fc ff ff ff       	call   100009db <Floppy::reset()+0x1db>	100009db: R_386_PC32	FloppyDrive::floppyConfigure()
100009df:	83 c4 10             	add    esp,0x10
100009e2:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
100009e5:	eb cd                	jmp    100009b4 <Floppy::reset()+0x1b4>
100009e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100009ea:	8a 80 85 01 00 00    	mov    al,BYTE PTR [eax+0x185]
100009f0:	83 f0 01             	xor    eax,0x1
100009f3:	84 c0                	test   al,al
100009f5:	74 38                	je     10000a2f <Floppy::reset()+0x22f>
100009f7:	83 ec 0c             	sub    esp,0xc
100009fa:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100009fd:	e8 fc ff ff ff       	call   100009fe <Floppy::reset()+0x1fe>	100009fe: R_386_PC32	Floppy::lock()
10000a02:	83 c4 10             	add    esp,0x10
10000a05:	83 f0 01             	xor    eax,0x1
10000a08:	88 c2                	mov    dl,al
10000a0a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000a0d:	88 90 84 01 00 00    	mov    BYTE PTR [eax+0x184],dl
10000a13:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000a16:	c6 80 85 01 00 00 01 	mov    BYTE PTR [eax+0x185],0x1
10000a1d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000a20:	8a 80 84 01 00 00    	mov    al,BYTE PTR [eax+0x184]
10000a26:	84 c0                	test   al,al
10000a28:	74 05                	je     10000a2f <Floppy::reset()+0x22f>
10000a2a:	e9 e7 fd ff ff       	jmp    10000816 <Floppy::reset()+0x16>
10000a2f:	90                   	nop
10000a30:	c9                   	leave  
10000a31:	c3                   	ret    

10000a32 <Floppy::dmaInit(bool)>:
10000a32:	55                   	push   ebp
10000a33:	89 e5                	mov    ebp,esp
10000a35:	83 ec 48             	sub    esp,0x48
10000a38:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000a3b:	88 45 c4             	mov    BYTE PTR [ebp-0x3c],al
10000a3e:	a1 60 74 00 10       	mov    eax,ds:0x10007460	10000a3f: R_386_32	.bss
10000a43:	85 c0                	test   eax,eax
10000a45:	75 15                	jne    10000a5c <Floppy::dmaInit(bool)+0x2a>
10000a47:	83 ec 0c             	sub    esp,0xc
10000a4a:	68 00 48 00 00       	push   0x4800
10000a4f:	e8 fc ff ff ff       	call   10000a50 <Floppy::dmaInit(bool)+0x1e>	10000a50: R_386_PC32	Phys::allocateDMA(unsigned long)
10000a54:	83 c4 10             	add    esp,0x10
10000a57:	a3 60 74 00 10       	mov    ds:0x10007460,eax	10000a58: R_386_32	.bss
10000a5c:	a1 60 74 00 10       	mov    eax,ds:0x10007460	10000a5d: R_386_32	.bss
10000a61:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
10000a64:	c7 45 c8 ff 47 00 00 	mov    DWORD PTR [ebp-0x38],0x47ff
10000a6b:	66 c7 45 da 0a 00    	mov    WORD PTR [ebp-0x26],0xa
10000a71:	c6 45 d9 06          	mov    BYTE PTR [ebp-0x27],0x6
10000a75:	8a 45 d9             	mov    al,BYTE PTR [ebp-0x27]
10000a78:	66 8b 55 da          	mov    dx,WORD PTR [ebp-0x26]
10000a7c:	ee                   	out    dx,al
10000a7d:	66 c7 45 de 0c 00    	mov    WORD PTR [ebp-0x22],0xc
10000a83:	c6 45 dd ff          	mov    BYTE PTR [ebp-0x23],0xff
10000a87:	8a 45 dd             	mov    al,BYTE PTR [ebp-0x23]
10000a8a:	66 8b 55 de          	mov    dx,WORD PTR [ebp-0x22]
10000a8e:	ee                   	out    dx,al
10000a8f:	8a 45 cc             	mov    al,BYTE PTR [ebp-0x34]
10000a92:	0f b6 c0             	movzx  eax,al
10000a95:	66 c7 45 e2 04 00    	mov    WORD PTR [ebp-0x1e],0x4
10000a9b:	88 45 e1             	mov    BYTE PTR [ebp-0x1f],al
10000a9e:	8a 45 e1             	mov    al,BYTE PTR [ebp-0x1f]
10000aa1:	66 8b 55 e2          	mov    dx,WORD PTR [ebp-0x1e]
10000aa5:	ee                   	out    dx,al
10000aa6:	8a 45 cd             	mov    al,BYTE PTR [ebp-0x33]
10000aa9:	0f b6 c0             	movzx  eax,al
10000aac:	66 c7 45 e6 04 00    	mov    WORD PTR [ebp-0x1a],0x4
10000ab2:	88 45 e5             	mov    BYTE PTR [ebp-0x1b],al
10000ab5:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
10000ab8:	66 8b 55 e6          	mov    dx,WORD PTR [ebp-0x1a]
10000abc:	ee                   	out    dx,al
10000abd:	8a 45 ce             	mov    al,BYTE PTR [ebp-0x32]
10000ac0:	0f b6 c0             	movzx  eax,al
10000ac3:	66 c7 45 ea 81 00    	mov    WORD PTR [ebp-0x16],0x81
10000ac9:	88 45 e9             	mov    BYTE PTR [ebp-0x17],al
10000acc:	8a 45 e9             	mov    al,BYTE PTR [ebp-0x17]
10000acf:	66 8b 55 ea          	mov    dx,WORD PTR [ebp-0x16]
10000ad3:	ee                   	out    dx,al
10000ad4:	66 c7 45 ee 0c 00    	mov    WORD PTR [ebp-0x12],0xc
10000ada:	c6 45 ed ff          	mov    BYTE PTR [ebp-0x13],0xff
10000ade:	8a 45 ed             	mov    al,BYTE PTR [ebp-0x13]
10000ae1:	66 8b 55 ee          	mov    dx,WORD PTR [ebp-0x12]
10000ae5:	ee                   	out    dx,al
10000ae6:	8a 45 c8             	mov    al,BYTE PTR [ebp-0x38]
10000ae9:	0f b6 c0             	movzx  eax,al
10000aec:	66 c7 45 f2 05 00    	mov    WORD PTR [ebp-0xe],0x5
10000af2:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
10000af5:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
10000af8:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
10000afc:	ee                   	out    dx,al
10000afd:	8a 45 c9             	mov    al,BYTE PTR [ebp-0x37]
10000b00:	0f b6 c0             	movzx  eax,al
10000b03:	66 c7 45 f6 05 00    	mov    WORD PTR [ebp-0xa],0x5
10000b09:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
10000b0c:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
10000b0f:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
10000b13:	ee                   	out    dx,al
10000b14:	80 7d c4 00          	cmp    BYTE PTR [ebp-0x3c],0x0
10000b18:	74 07                	je     10000b21 <Floppy::dmaInit(bool)+0xef>
10000b1a:	b8 4a 00 00 00       	mov    eax,0x4a
10000b1f:	eb 05                	jmp    10000b26 <Floppy::dmaInit(bool)+0xf4>
10000b21:	b8 46 00 00 00       	mov    eax,0x46
10000b26:	66 c7 45 d2 0b 00    	mov    WORD PTR [ebp-0x2e],0xb
10000b2c:	88 45 d1             	mov    BYTE PTR [ebp-0x2f],al
10000b2f:	8a 45 d1             	mov    al,BYTE PTR [ebp-0x2f]
10000b32:	66 8b 55 d2          	mov    dx,WORD PTR [ebp-0x2e]
10000b36:	ee                   	out    dx,al
10000b37:	66 c7 45 d6 0a 00    	mov    WORD PTR [ebp-0x2a],0xa
10000b3d:	c6 45 d5 02          	mov    BYTE PTR [ebp-0x2b],0x2
10000b41:	8a 45 d5             	mov    al,BYTE PTR [ebp-0x2b]
10000b44:	66 8b 55 d6          	mov    dx,WORD PTR [ebp-0x2a]
10000b48:	ee                   	out    dx,al
10000b49:	a1 60 74 00 10       	mov    eax,ds:0x10007460	10000b4a: R_386_32	.bss
10000b4e:	a3 00 00 00 00       	mov    ds:0x0,eax	10000b4f: R_386_32	_TEMP_dma
10000b53:	90                   	nop
10000b54:	c9                   	leave  
10000b55:	c3                   	ret    

10000b56 <Floppy::specify(int)>:
10000b56:	55                   	push   ebp
10000b57:	89 e5                	mov    ebp,esp
10000b59:	57                   	push   edi
10000b5a:	56                   	push   esi
10000b5b:	53                   	push   ebx
10000b5c:	83 ec 3c             	sub    esp,0x3c
10000b5f:	8d 45 c0             	lea    eax,[ebp-0x40]
10000b62:	bb 68 25 00 10       	mov    ebx,0x10002568	10000b63: R_386_32	.text
10000b67:	ba 04 00 00 00       	mov    edx,0x4
10000b6c:	89 c7                	mov    edi,eax
10000b6e:	89 de                	mov    esi,ebx
10000b70:	89 d1                	mov    ecx,edx
10000b72:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000b74:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000b77:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10000b7a:	83 c2 64             	add    edx,0x64
10000b7d:	8b 14 90             	mov    edx,DWORD PTR [eax+edx*4]
10000b80:	89 d0                	mov    eax,edx
10000b82:	c1 e0 02             	shl    eax,0x2
10000b85:	01 d0                	add    eax,edx
10000b87:	c1 e0 02             	shl    eax,0x2
10000b8a:	01 d0                	add    eax,edx
10000b8c:	05 10 00 00 00       	add    eax,0x10	10000b8d: R_386_32	floppyTable
10000b91:	8a 00                	mov    al,BYTE PTR [eax]
10000b93:	0f be c0             	movsx  eax,al
10000b96:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10000b99:	83 7d e4 ff          	cmp    DWORD PTR [ebp-0x1c],0xffffffff
10000b9d:	75 10                	jne    10000baf <Floppy::specify(int)+0x59>
10000b9f:	83 ec 0c             	sub    esp,0xc
10000ba2:	68 52 25 00 10       	push   0x10002552	10000ba3: R_386_32	.text
10000ba7:	e8 fc ff ff ff       	call   10000ba8 <Floppy::specify(int)+0x52>	10000ba8: R_386_PC32	Krnl::panic(char const*)
10000bac:	83 c4 10             	add    esp,0x10
10000baf:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10000bb2:	8b 44 85 c0          	mov    eax,DWORD PTR [ebp+eax*4-0x40]
10000bb6:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
10000bb9:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10000bbc:	89 c2                	mov    edx,eax
10000bbe:	c1 e0 03             	shl    eax,0x3
10000bc1:	89 d1                	mov    ecx,edx
10000bc3:	29 c1                	sub    ecx,eax
10000bc5:	b8 83 de 1b 43       	mov    eax,0x431bde83
10000bca:	f7 e9                	imul   ecx
10000bcc:	c1 fa 11             	sar    edx,0x11
10000bcf:	89 c8                	mov    eax,ecx
10000bd1:	c1 f8 1f             	sar    eax,0x1f
10000bd4:	29 c2                	sub    edx,eax
10000bd6:	89 d0                	mov    eax,edx
10000bd8:	83 c0 10             	add    eax,0x10
10000bdb:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
10000bde:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
10000be1:	89 d0                	mov    eax,edx
10000be3:	01 c0                	add    eax,eax
10000be5:	01 d0                	add    eax,edx
10000be7:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10000bee:	01 d0                	add    eax,edx
10000bf0:	01 c0                	add    eax,eax
10000bf2:	89 c1                	mov    ecx,eax
10000bf4:	b8 83 de 1b 43       	mov    eax,0x431bde83
10000bf9:	f7 e9                	imul   ecx
10000bfb:	c1 fa 12             	sar    edx,0x12
10000bfe:	89 c8                	mov    eax,ecx
10000c00:	c1 f8 1f             	sar    eax,0x1f
10000c03:	29 c2                	sub    edx,eax
10000c05:	89 d0                	mov    eax,edx
10000c07:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
10000c0a:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
10000c11:	c7 45 d0 00 00 00 00 	mov    DWORD PTR [ebp-0x30],0x0
10000c18:	83 ec 08             	sub    esp,0x8
10000c1b:	6a 03                	push   0x3
10000c1d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000c20:	e8 fc ff ff ff       	call   10000c21 <Floppy::specify(int)+0xcb>	10000c21: R_386_PC32	Floppy::writeCommand(unsigned char)
10000c25:	83 c4 10             	add    esp,0x10
10000c28:	83 ec 0c             	sub    esp,0xc
10000c2b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000c2e:	e8 fc ff ff ff       	call   10000c2f <Floppy::specify(int)+0xd9>	10000c2f: R_386_PC32	Floppy::wasFailure()
10000c33:	83 c4 10             	add    esp,0x10
10000c36:	84 c0                	test   al,al
10000c38:	74 04                	je     10000c3e <Floppy::specify(int)+0xe8>
10000c3a:	b0 00                	mov    al,0x0
10000c3c:	eb 6b                	jmp    10000ca9 <Floppy::specify(int)+0x153>
10000c3e:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000c41:	c1 e0 04             	shl    eax,0x4
10000c44:	88 c2                	mov    dl,al
10000c46:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000c49:	09 d0                	or     eax,edx
10000c4b:	0f b6 c0             	movzx  eax,al
10000c4e:	83 ec 08             	sub    esp,0x8
10000c51:	50                   	push   eax
10000c52:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000c55:	e8 fc ff ff ff       	call   10000c56 <Floppy::specify(int)+0x100>	10000c56: R_386_PC32	Floppy::writeCommand(unsigned char)
10000c5a:	83 c4 10             	add    esp,0x10
10000c5d:	83 ec 0c             	sub    esp,0xc
10000c60:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000c63:	e8 fc ff ff ff       	call   10000c64 <Floppy::specify(int)+0x10e>	10000c64: R_386_PC32	Floppy::wasFailure()
10000c68:	83 c4 10             	add    esp,0x10
10000c6b:	84 c0                	test   al,al
10000c6d:	74 04                	je     10000c73 <Floppy::specify(int)+0x11d>
10000c6f:	b0 00                	mov    al,0x0
10000c71:	eb 36                	jmp    10000ca9 <Floppy::specify(int)+0x153>
10000c73:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10000c76:	01 c0                	add    eax,eax
10000c78:	88 c2                	mov    dl,al
10000c7a:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
10000c7d:	09 d0                	or     eax,edx
10000c7f:	0f b6 c0             	movzx  eax,al
10000c82:	83 ec 08             	sub    esp,0x8
10000c85:	50                   	push   eax
10000c86:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000c89:	e8 fc ff ff ff       	call   10000c8a <Floppy::specify(int)+0x134>	10000c8a: R_386_PC32	Floppy::writeCommand(unsigned char)
10000c8e:	83 c4 10             	add    esp,0x10
10000c91:	83 ec 0c             	sub    esp,0xc
10000c94:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000c97:	e8 fc ff ff ff       	call   10000c98 <Floppy::specify(int)+0x142>	10000c98: R_386_PC32	Floppy::wasFailure()
10000c9c:	83 c4 10             	add    esp,0x10
10000c9f:	84 c0                	test   al,al
10000ca1:	74 04                	je     10000ca7 <Floppy::specify(int)+0x151>
10000ca3:	b0 00                	mov    al,0x0
10000ca5:	eb 02                	jmp    10000ca9 <Floppy::specify(int)+0x153>
10000ca7:	b0 01                	mov    al,0x1
10000ca9:	8d 65 f4             	lea    esp,[ebp-0xc]
10000cac:	5b                   	pop    ebx
10000cad:	5e                   	pop    esi
10000cae:	5f                   	pop    edi
10000caf:	5d                   	pop    ebp
10000cb0:	c3                   	ret    
10000cb1:	90                   	nop

10000cb2 <Floppy::select(int, bool)>:
10000cb2:	55                   	push   ebp
10000cb3:	89 e5                	mov    ebp,esp
10000cb5:	83 ec 28             	sub    esp,0x28
10000cb8:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
10000cbb:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
10000cbe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000cc1:	8b 80 8c 01 00 00    	mov    eax,DWORD PTR [eax+0x18c]
10000cc7:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
10000cca:	75 27                	jne    10000cf3 <Floppy::select(int, bool)+0x41>
10000ccc:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
10000ccf:	83 f0 01             	xor    eax,0x1
10000cd2:	84 c0                	test   al,al
10000cd4:	74 1d                	je     10000cf3 <Floppy::select(int, bool)+0x41>
10000cd6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000cd9:	8b 80 8c 01 00 00    	mov    eax,DWORD PTR [eax+0x18c]
10000cdf:	83 f8 ff             	cmp    eax,0xffffffff
10000ce2:	74 0f                	je     10000cf3 <Floppy::select(int, bool)+0x41>
10000ce4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000ce7:	c6 80 8a 01 00 00 00 	mov    BYTE PTR [eax+0x18a],0x0
10000cee:	e9 1d 02 00 00       	jmp    10000f10 <Floppy::select(int, bool)+0x25e>
10000cf3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000cf6:	8a 80 8a 01 00 00    	mov    al,BYTE PTR [eax+0x18a]
10000cfc:	83 f0 01             	xor    eax,0x1
10000cff:	84 c0                	test   al,al
10000d01:	75 12                	jne    10000d15 <Floppy::select(int, bool)+0x63>
10000d03:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000d06:	8b 80 8c 01 00 00    	mov    eax,DWORD PTR [eax+0x18c]
10000d0c:	83 f8 ff             	cmp    eax,0xffffffff
10000d0f:	0f 85 fb 01 00 00    	jne    10000f10 <Floppy::select(int, bool)+0x25e>
10000d15:	83 ec 08             	sub    esp,0x8
10000d18:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10000d1b:	68 78 25 00 10       	push   0x10002578	10000d1c: R_386_32	.text
10000d20:	e8 fc ff ff ff       	call   10000d21 <Floppy::select(int, bool)+0x6f>	10000d21: R_386_PC32	Dbg::kprintf(char const*, ...)
10000d25:	83 c4 10             	add    esp,0x10
10000d28:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000d2b:	8b 80 8c 01 00 00    	mov    eax,DWORD PTR [eax+0x18c]
10000d31:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
10000d34:	0f 84 9e 01 00 00    	je     10000ed8 <Floppy::select(int, bool)+0x226>
10000d3a:	83 ec 0c             	sub    esp,0xc
10000d3d:	68 88 25 00 10       	push   0x10002588	10000d3e: R_386_32	.text
10000d42:	e8 fc ff ff ff       	call   10000d43 <Floppy::select(int, bool)+0x91>	10000d43: R_386_PC32	Dbg::kprintf(char const*, ...)
10000d47:	83 c4 10             	add    esp,0x10
10000d4a:	e8 fc ff ff ff       	call   10000d4b <Floppy::select(int, bool)+0x99>	10000d4b: R_386_PC32	lockScheduler()
10000d4f:	83 ec 0c             	sub    esp,0xc
10000d52:	68 95 25 00 10       	push   0x10002595	10000d53: R_386_32	.text
10000d57:	e8 fc ff ff ff       	call   10000d58 <Floppy::select(int, bool)+0xa6>	10000d58: R_386_PC32	Dbg::kprintf(char const*, ...)
10000d5c:	83 c4 10             	add    esp,0x10
10000d5f:	83 ec 08             	sub    esp,0x8
10000d62:	6a 02                	push   0x2
10000d64:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000d67:	e8 fc ff ff ff       	call   10000d68 <Floppy::select(int, bool)+0xb6>	10000d68: R_386_PC32	Floppy::readPort(FloppyReg)
10000d6c:	83 c4 10             	add    esp,0x10
10000d6f:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
10000d72:	80 65 f7 fc          	and    BYTE PTR [ebp-0x9],0xfc
10000d76:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000d79:	88 c2                	mov    dl,al
10000d7b:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
10000d7e:	09 d0                	or     eax,edx
10000d80:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
10000d83:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
10000d87:	83 ec 04             	sub    esp,0x4
10000d8a:	50                   	push   eax
10000d8b:	6a 02                	push   0x2
10000d8d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000d90:	e8 fc ff ff ff       	call   10000d91 <Floppy::select(int, bool)+0xdf>	10000d91: R_386_PC32	Floppy::writePort(FloppyReg, unsigned char)
10000d95:	83 c4 10             	add    esp,0x10
10000d98:	83 ec 08             	sub    esp,0x8
10000d9b:	6a 00                	push   0x0
10000d9d:	68 00 b4 c4 04       	push   0x4c4b400
10000da2:	e8 fc ff ff ff       	call   10000da3 <Floppy::select(int, bool)+0xf1>	10000da3: R_386_PC32	nanoSleep(unsigned long long)
10000da7:	83 c4 10             	add    esp,0x10
10000daa:	83 ec 0c             	sub    esp,0xc
10000dad:	68 a2 25 00 10       	push   0x100025a2	10000dae: R_386_32	.text
10000db2:	e8 fc ff ff ff       	call   10000db3 <Floppy::select(int, bool)+0x101>	10000db3: R_386_PC32	Dbg::kprintf(char const*, ...)
10000db7:	83 c4 10             	add    esp,0x10
10000dba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000dbd:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10000dc0:	83 c2 64             	add    edx,0x64
10000dc3:	8b 14 90             	mov    edx,DWORD PTR [eax+edx*4]
10000dc6:	89 d0                	mov    eax,edx
10000dc8:	c1 e0 02             	shl    eax,0x2
10000dcb:	01 d0                	add    eax,edx
10000dcd:	c1 e0 02             	shl    eax,0x2
10000dd0:	01 d0                	add    eax,edx
10000dd2:	05 10 00 00 00       	add    eax,0x10	10000dd3: R_386_32	floppyTable
10000dd7:	8a 00                	mov    al,BYTE PTR [eax]
10000dd9:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
10000ddc:	80 7d f6 ff          	cmp    BYTE PTR [ebp-0xa],0xff
10000de0:	75 10                	jne    10000df2 <Floppy::select(int, bool)+0x140>
10000de2:	83 ec 0c             	sub    esp,0xc
10000de5:	68 b0 25 00 10       	push   0x100025b0	10000de6: R_386_32	.text
10000dea:	e8 fc ff ff ff       	call   10000deb <Floppy::select(int, bool)+0x139>	10000deb: R_386_PC32	Krnl::panic(char const*)
10000def:	83 c4 10             	add    esp,0x10
10000df2:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
10000df5:	0f b6 c0             	movzx  eax,al
10000df8:	83 ec 04             	sub    esp,0x4
10000dfb:	50                   	push   eax
10000dfc:	6a 07                	push   0x7
10000dfe:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000e01:	e8 fc ff ff ff       	call   10000e02 <Floppy::select(int, bool)+0x150>	10000e02: R_386_PC32	Floppy::writePort(FloppyReg, unsigned char)
10000e06:	83 c4 10             	add    esp,0x10
10000e09:	e8 fc ff ff ff       	call   10000e0a <Floppy::select(int, bool)+0x158>	10000e0a: R_386_PC32	unlockScheduler()
10000e0e:	83 ec 0c             	sub    esp,0xc
10000e11:	68 df 25 00 10       	push   0x100025df	10000e12: R_386_32	.text
10000e16:	e8 fc ff ff ff       	call   10000e17 <Floppy::select(int, bool)+0x165>	10000e17: R_386_PC32	Dbg::kprintf(char const*, ...)
10000e1b:	83 c4 10             	add    esp,0x10
10000e1e:	83 ec 08             	sub    esp,0x8
10000e21:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10000e24:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000e27:	e8 fc ff ff ff       	call   10000e28 <Floppy::select(int, bool)+0x176>	10000e28: R_386_PC32	Floppy::specify(int)
10000e2c:	83 c4 10             	add    esp,0x10
10000e2f:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
10000e32:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
10000e35:	83 f0 01             	xor    eax,0x1
10000e38:	84 c0                	test   al,al
10000e3a:	74 25                	je     10000e61 <Floppy::select(int, bool)+0x1af>
10000e3c:	83 ec 0c             	sub    esp,0xc
10000e3f:	68 ec 25 00 10       	push   0x100025ec	10000e40: R_386_32	.text
10000e44:	e8 fc ff ff ff       	call   10000e45 <Floppy::select(int, bool)+0x193>	10000e45: R_386_PC32	Dbg::kprintf(char const*, ...)
10000e49:	83 c4 10             	add    esp,0x10
10000e4c:	83 ec 0c             	sub    esp,0xc
10000e4f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000e52:	e8 fc ff ff ff       	call   10000e53 <Floppy::select(int, bool)+0x1a1>	10000e53: R_386_PC32	Floppy::reset()
10000e57:	83 c4 10             	add    esp,0x10
10000e5a:	b0 00                	mov    al,0x0
10000e5c:	e9 d1 00 00 00       	jmp    10000f32 <Floppy::select(int, bool)+0x280>
10000e61:	83 ec 0c             	sub    esp,0xc
10000e64:	68 fd 25 00 10       	push   0x100025fd	10000e65: R_386_32	.text
10000e69:	e8 fc ff ff ff       	call   10000e6a <Floppy::select(int, bool)+0x1b8>	10000e6a: R_386_PC32	Dbg::kprintf(char const*, ...)
10000e6e:	83 c4 10             	add    esp,0x10
10000e71:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000e74:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10000e77:	83 c2 68             	add    edx,0x68
10000e7a:	8b 04 90             	mov    eax,DWORD PTR [eax+edx*4]
10000e7d:	83 ec 0c             	sub    esp,0xc
10000e80:	50                   	push   eax
10000e81:	e8 fc ff ff ff       	call   10000e82 <Floppy::select(int, bool)+0x1d0>	10000e82: R_386_PC32	FloppyDrive::calibrate()
10000e86:	83 c4 10             	add    esp,0x10
10000e89:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
10000e8c:	83 ec 0c             	sub    esp,0xc
10000e8f:	68 0a 26 00 10       	push   0x1000260a	10000e90: R_386_32	.text
10000e94:	e8 fc ff ff ff       	call   10000e95 <Floppy::select(int, bool)+0x1e3>	10000e95: R_386_PC32	Dbg::kprintf(char const*, ...)
10000e99:	83 c4 10             	add    esp,0x10
10000e9c:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
10000e9f:	83 f0 01             	xor    eax,0x1
10000ea2:	84 c0                	test   al,al
10000ea4:	74 22                	je     10000ec8 <Floppy::select(int, bool)+0x216>
10000ea6:	83 ec 0c             	sub    esp,0xc
10000ea9:	68 18 26 00 10       	push   0x10002618	10000eaa: R_386_32	.text
10000eae:	e8 fc ff ff ff       	call   10000eaf <Floppy::select(int, bool)+0x1fd>	10000eaf: R_386_PC32	Dbg::kprintf(char const*, ...)
10000eb3:	83 c4 10             	add    esp,0x10
10000eb6:	83 ec 0c             	sub    esp,0xc
10000eb9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000ebc:	e8 fc ff ff ff       	call   10000ebd <Floppy::select(int, bool)+0x20b>	10000ebd: R_386_PC32	Floppy::reset()
10000ec1:	83 c4 10             	add    esp,0x10
10000ec4:	b0 00                	mov    al,0x0
10000ec6:	eb 6a                	jmp    10000f32 <Floppy::select(int, bool)+0x280>
10000ec8:	83 ec 0c             	sub    esp,0xc
10000ecb:	68 2a 26 00 10       	push   0x1000262a	10000ecc: R_386_32	.text
10000ed0:	e8 fc ff ff ff       	call   10000ed1 <Floppy::select(int, bool)+0x21f>	10000ed1: R_386_PC32	Dbg::kprintf(char const*, ...)
10000ed5:	83 c4 10             	add    esp,0x10
10000ed8:	83 ec 0c             	sub    esp,0xc
10000edb:	68 37 26 00 10       	push   0x10002637	10000edc: R_386_32	.text
10000ee0:	e8 fc ff ff ff       	call   10000ee1 <Floppy::select(int, bool)+0x22f>	10000ee1: R_386_PC32	Dbg::kprintf(char const*, ...)
10000ee5:	83 c4 10             	add    esp,0x10
10000ee8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000eeb:	8a 55 e4             	mov    dl,BYTE PTR [ebp-0x1c]
10000eee:	88 90 8a 01 00 00    	mov    BYTE PTR [eax+0x18a],dl
10000ef4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000ef7:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10000efa:	89 90 8c 01 00 00    	mov    DWORD PTR [eax+0x18c],edx
10000f00:	83 ec 0c             	sub    esp,0xc
10000f03:	68 44 26 00 10       	push   0x10002644	10000f04: R_386_32	.text
10000f08:	e8 fc ff ff ff       	call   10000f09 <Floppy::select(int, bool)+0x257>	10000f09: R_386_PC32	Dbg::kprintf(char const*, ...)
10000f0d:	83 c4 10             	add    esp,0x10
10000f10:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000f13:	8a 80 8a 01 00 00    	mov    al,BYTE PTR [eax+0x18a]
10000f19:	84 c0                	test   al,al
10000f1b:	74 12                	je     10000f2f <Floppy::select(int, bool)+0x27d>
10000f1d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000f20:	8b 80 8c 01 00 00    	mov    eax,DWORD PTR [eax+0x18c]
10000f26:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
10000f29:	75 04                	jne    10000f2f <Floppy::select(int, bool)+0x27d>
10000f2b:	b0 01                	mov    al,0x1
10000f2d:	eb 02                	jmp    10000f31 <Floppy::select(int, bool)+0x27f>
10000f2f:	b0 00                	mov    al,0x0
10000f31:	90                   	nop
10000f32:	c9                   	leave  
10000f33:	c3                   	ret    

10000f34 <Floppy::motor(int, bool)>:
10000f34:	55                   	push   ebp
10000f35:	89 e5                	mov    ebp,esp
10000f37:	53                   	push   ebx
10000f38:	83 ec 24             	sub    esp,0x24
10000f3b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
10000f3e:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
10000f41:	83 ec 0c             	sub    esp,0xc
10000f44:	68 51 26 00 10       	push   0x10002651	10000f45: R_386_32	.text
10000f49:	e8 fc ff ff ff       	call   10000f4a <Floppy::motor(int, bool)+0x16>	10000f4a: R_386_PC32	Dbg::kprintf(char const*, ...)
10000f4e:	83 c4 10             	add    esp,0x10
10000f51:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
10000f55:	83 ec 04             	sub    esp,0x4
10000f58:	50                   	push   eax
10000f59:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10000f5c:	68 60 26 00 10       	push   0x10002660	10000f5d: R_386_32	.text
10000f61:	e8 fc ff ff ff       	call   10000f62 <Floppy::motor(int, bool)+0x2e>	10000f62: R_386_PC32	Dbg::kprintf(char const*, ...)
10000f66:	83 c4 10             	add    esp,0x10
10000f69:	80 7d e4 00          	cmp    BYTE PTR [ebp-0x1c],0x0
10000f6d:	0f 84 67 01 00 00    	je     100010da <Floppy::motor(int, bool)+0x1a6>
10000f73:	83 ec 0c             	sub    esp,0xc
10000f76:	68 76 26 00 10       	push   0x10002676	10000f77: R_386_32	.text
10000f7b:	e8 fc ff ff ff       	call   10000f7c <Floppy::motor(int, bool)+0x48>	10000f7c: R_386_PC32	Dbg::kprintf(char const*, ...)
10000f80:	83 c4 10             	add    esp,0x10
10000f83:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000f86:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10000f89:	83 c2 58             	add    edx,0x58
10000f8c:	8b 44 90 04          	mov    eax,DWORD PTR [eax+edx*4+0x4]
10000f90:	85 c0                	test   eax,eax
10000f92:	0f 85 0d 01 00 00    	jne    100010a5 <Floppy::motor(int, bool)+0x171>
10000f98:	83 ec 0c             	sub    esp,0xc
10000f9b:	68 7e 26 00 10       	push   0x1000267e	10000f9c: R_386_32	.text
10000fa0:	e8 fc ff ff ff       	call   10000fa1 <Floppy::motor(int, bool)+0x6d>	10000fa1: R_386_PC32	Dbg::kprintf(char const*, ...)
10000fa5:	83 c4 10             	add    esp,0x10
10000fa8:	e8 fc ff ff ff       	call   10000fa9 <Floppy::motor(int, bool)+0x75>	10000fa9: R_386_PC32	lockScheduler()
10000fad:	83 ec 08             	sub    esp,0x8
10000fb0:	6a 02                	push   0x2
10000fb2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000fb5:	e8 fc ff ff ff       	call   10000fb6 <Floppy::motor(int, bool)+0x82>	10000fb6: R_386_PC32	Floppy::readPort(FloppyReg)
10000fba:	83 c4 10             	add    esp,0x10
10000fbd:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
10000fc0:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
10000fc4:	83 ec 08             	sub    esp,0x8
10000fc7:	50                   	push   eax
10000fc8:	68 93 26 00 10       	push   0x10002693	10000fc9: R_386_32	.text
10000fcd:	e8 fc ff ff ff       	call   10000fce <Floppy::motor(int, bool)+0x9a>	10000fce: R_386_PC32	Dbg::kprintf(char const*, ...)
10000fd2:	83 c4 10             	add    esp,0x10
10000fd5:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
10000fd9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000fdc:	bb 10 00 00 00       	mov    ebx,0x10
10000fe1:	88 c1                	mov    cl,al
10000fe3:	d3 e3                	shl    ebx,cl
10000fe5:	89 d8                	mov    eax,ebx
10000fe7:	09 d0                	or     eax,edx
10000fe9:	83 ec 08             	sub    esp,0x8
10000fec:	50                   	push   eax
10000fed:	68 a1 26 00 10       	push   0x100026a1	10000fee: R_386_32	.text
10000ff2:	e8 fc ff ff ff       	call   10000ff3 <Floppy::motor(int, bool)+0xbf>	10000ff3: R_386_PC32	Dbg::kprintf(char const*, ...)
10000ff7:	83 c4 10             	add    esp,0x10
10000ffa:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000ffd:	ba 10 00 00 00       	mov    edx,0x10
10001002:	88 c1                	mov    cl,al
10001004:	d3 e2                	shl    edx,cl
10001006:	89 d0                	mov    eax,edx
10001008:	88 c2                	mov    dl,al
1000100a:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
1000100d:	09 d0                	or     eax,edx
1000100f:	0f b6 c0             	movzx  eax,al
10001012:	83 ec 04             	sub    esp,0x4
10001015:	50                   	push   eax
10001016:	6a 02                	push   0x2
10001018:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000101b:	e8 fc ff ff ff       	call   1000101c <Floppy::motor(int, bool)+0xe8>	1000101c: R_386_PC32	Floppy::writePort(FloppyReg, unsigned char)
10001020:	83 c4 10             	add    esp,0x10
10001023:	e8 fc ff ff ff       	call   10001024 <Floppy::motor(int, bool)+0xf0>	10001024: R_386_PC32	unlockScheduler()
10001028:	83 ec 0c             	sub    esp,0xc
1000102b:	68 af 26 00 10       	push   0x100026af	1000102c: R_386_32	.text
10001030:	e8 fc ff ff ff       	call   10001031 <Floppy::motor(int, bool)+0xfd>	10001031: R_386_PC32	Dbg::kprintf(char const*, ...)
10001035:	83 c4 10             	add    esp,0x10
10001038:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000103b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
1000103e:	83 c2 64             	add    edx,0x64
10001041:	8b 04 90             	mov    eax,DWORD PTR [eax+edx*4]
10001044:	83 f8 04             	cmp    eax,0x4
10001047:	75 14                	jne    1000105d <Floppy::motor(int, bool)+0x129>
10001049:	83 ec 08             	sub    esp,0x8
1000104c:	6a 00                	push   0x0
1000104e:	68 00 a3 e1 11       	push   0x11e1a300
10001053:	e8 fc ff ff ff       	call   10001054 <Floppy::motor(int, bool)+0x120>	10001054: R_386_PC32	nanoSleep(unsigned long long)
10001058:	83 c4 10             	add    esp,0x10
1000105b:	eb 12                	jmp    1000106f <Floppy::motor(int, bool)+0x13b>
1000105d:	83 ec 08             	sub    esp,0x8
10001060:	6a 00                	push   0x0
10001062:	68 00 65 cd 1d       	push   0x1dcd6500
10001067:	e8 fc ff ff ff       	call   10001068 <Floppy::motor(int, bool)+0x134>	10001068: R_386_PC32	nanoSleep(unsigned long long)
1000106c:	83 c4 10             	add    esp,0x10
1000106f:	83 ec 0c             	sub    esp,0xc
10001072:	68 bd 26 00 10       	push   0x100026bd	10001073: R_386_32	.text
10001077:	e8 fc ff ff ff       	call   10001078 <Floppy::motor(int, bool)+0x144>	10001078: R_386_PC32	Dbg::kprintf(char const*, ...)
1000107c:	83 c4 10             	add    esp,0x10
1000107f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001082:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10001085:	83 c2 58             	add    edx,0x58
10001088:	c7 44 90 04 01 00 00 00 	mov    DWORD PTR [eax+edx*4+0x4],0x1
10001090:	83 ec 0c             	sub    esp,0xc
10001093:	68 cd 26 00 10       	push   0x100026cd	10001094: R_386_32	.text
10001098:	e8 fc ff ff ff       	call   10001099 <Floppy::motor(int, bool)+0x165>	10001099: R_386_PC32	Dbg::kprintf(char const*, ...)
1000109d:	83 c4 10             	add    esp,0x10
100010a0:	e9 89 00 00 00       	jmp    1000112e <Floppy::motor(int, bool)+0x1fa>
100010a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100010a8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
100010ab:	83 c2 58             	add    edx,0x58
100010ae:	8b 44 90 04          	mov    eax,DWORD PTR [eax+edx*4+0x4]
100010b2:	83 f8 02             	cmp    eax,0x2
100010b5:	75 77                	jne    1000112e <Floppy::motor(int, bool)+0x1fa>
100010b7:	83 ec 0c             	sub    esp,0xc
100010ba:	68 dd 26 00 10       	push   0x100026dd	100010bb: R_386_32	.text
100010bf:	e8 fc ff ff ff       	call   100010c0 <Floppy::motor(int, bool)+0x18c>	100010c0: R_386_PC32	Dbg::kprintf(char const*, ...)
100010c4:	83 c4 10             	add    esp,0x10
100010c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100010ca:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
100010cd:	83 c2 58             	add    edx,0x58
100010d0:	c7 44 90 04 01 00 00 00 	mov    DWORD PTR [eax+edx*4+0x4],0x1
100010d8:	eb 54                	jmp    1000112e <Floppy::motor(int, bool)+0x1fa>
100010da:	83 ec 0c             	sub    esp,0xc
100010dd:	68 ed 26 00 10       	push   0x100026ed	100010de: R_386_32	.text
100010e2:	e8 fc ff ff ff       	call   100010e3 <Floppy::motor(int, bool)+0x1af>	100010e3: R_386_PC32	Dbg::kprintf(char const*, ...)
100010e7:	83 c4 10             	add    esp,0x10
100010ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100010ed:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
100010f0:	83 c2 58             	add    edx,0x58
100010f3:	8b 44 90 04          	mov    eax,DWORD PTR [eax+edx*4+0x4]
100010f7:	83 f8 01             	cmp    eax,0x1
100010fa:	75 32                	jne    1000112e <Floppy::motor(int, bool)+0x1fa>
100010fc:	83 ec 0c             	sub    esp,0xc
100010ff:	68 fd 26 00 10       	push   0x100026fd	10001100: R_386_32	.text
10001104:	e8 fc ff ff ff       	call   10001105 <Floppy::motor(int, bool)+0x1d1>	10001105: R_386_PC32	Dbg::kprintf(char const*, ...)
10001109:	83 c4 10             	add    esp,0x10
1000110c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000110f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10001112:	83 c2 58             	add    edx,0x58
10001115:	c7 44 90 04 02 00 00 00 	mov    DWORD PTR [eax+edx*4+0x4],0x2
1000111d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001120:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10001123:	83 c2 5c             	add    edx,0x5c
10001126:	c7 44 90 04 c4 09 00 00 	mov    DWORD PTR [eax+edx*4+0x4],0x9c4
1000112e:	83 ec 0c             	sub    esp,0xc
10001131:	68 0d 27 00 10       	push   0x1000270d	10001132: R_386_32	.text
10001136:	e8 fc ff ff ff       	call   10001137 <Floppy::motor(int, bool)+0x203>	10001137: R_386_PC32	Dbg::kprintf(char const*, ...)
1000113b:	83 c4 10             	add    esp,0x10
1000113e:	90                   	nop
1000113f:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
10001142:	c9                   	leave  
10001143:	c3                   	ret    

10001144 <FloppyDrive::FloppyDrive()>:
10001144:	55                   	push   ebp
10001145:	89 e5                	mov    ebp,esp
10001147:	83 ec 08             	sub    esp,0x8
1000114a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000114d:	83 ec 04             	sub    esp,0x4
10001150:	68 00 02 00 00       	push   0x200
10001155:	68 22 27 00 10       	push   0x10002722	10001156: R_386_32	.text
1000115a:	50                   	push   eax
1000115b:	e8 fc ff ff ff       	call   1000115c <FloppyDrive::FloppyDrive()+0x18>	1000115c: R_386_PC32	PhysicalDisk::PhysicalDisk(char const*, int)
10001160:	83 c4 10             	add    esp,0x10
10001163:	ba 08 00 00 00       	mov    edx,0x8	10001164: R_386_32	vtable for FloppyDrive
10001168:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000116b:	89 10                	mov    DWORD PTR [eax],edx
1000116d:	90                   	nop
1000116e:	c9                   	leave  
1000116f:	c3                   	ret    

10001170 <FloppyDrive::motorOn()>:
10001170:	55                   	push   ebp
10001171:	89 e5                	mov    ebp,esp
10001173:	83 ec 08             	sub    esp,0x8
10001176:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001179:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
1000117f:	83 ec 08             	sub    esp,0x8
10001182:	50                   	push   eax
10001183:	68 34 27 00 10       	push   0x10002734	10001184: R_386_32	.text
10001188:	e8 fc ff ff ff       	call   10001189 <FloppyDrive::motorOn()+0x19>	10001189: R_386_PC32	Dbg::kprintf(char const*, ...)
1000118d:	83 c4 10             	add    esp,0x10
10001190:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001193:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001199:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
1000119c:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
100011a2:	83 ec 04             	sub    esp,0x4
100011a5:	6a 01                	push   0x1
100011a7:	52                   	push   edx
100011a8:	50                   	push   eax
100011a9:	e8 fc ff ff ff       	call   100011aa <FloppyDrive::motorOn()+0x3a>	100011aa: R_386_PC32	Floppy::motor(int, bool)
100011ae:	83 c4 10             	add    esp,0x10
100011b1:	90                   	nop
100011b2:	c9                   	leave  
100011b3:	c3                   	ret    

100011b4 <FloppyDrive::motorOff()>:
100011b4:	55                   	push   ebp
100011b5:	89 e5                	mov    ebp,esp
100011b7:	83 ec 08             	sub    esp,0x8
100011ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100011bd:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100011c3:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
100011c6:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
100011cc:	83 ec 04             	sub    esp,0x4
100011cf:	6a 00                	push   0x0
100011d1:	52                   	push   edx
100011d2:	50                   	push   eax
100011d3:	e8 fc ff ff ff       	call   100011d4 <FloppyDrive::motorOff()+0x20>	100011d4: R_386_PC32	Floppy::motor(int, bool)
100011d8:	83 c4 10             	add    esp,0x10
100011db:	90                   	nop
100011dc:	c9                   	leave  
100011dd:	c3                   	ret    

100011de <FloppyDrive::floppyConfigure()>:
100011de:	55                   	push   ebp
100011df:	89 e5                	mov    ebp,esp
100011e1:	83 ec 18             	sub    esp,0x18
100011e4:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
100011e8:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
100011ec:	c6 45 f5 01          	mov    BYTE PTR [ebp-0xb],0x1
100011f0:	c7 45 f0 08 00 00 00 	mov    DWORD PTR [ebp-0x10],0x8
100011f7:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
100011fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001201:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001207:	83 ec 08             	sub    esp,0x8
1000120a:	6a 13                	push   0x13
1000120c:	50                   	push   eax
1000120d:	e8 fc ff ff ff       	call   1000120e <FloppyDrive::floppyConfigure()+0x30>	1000120e: R_386_PC32	Floppy::writeCommand(unsigned char)
10001212:	83 c4 10             	add    esp,0x10
10001215:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001218:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
1000121e:	83 ec 0c             	sub    esp,0xc
10001221:	50                   	push   eax
10001222:	e8 fc ff ff ff       	call   10001223 <FloppyDrive::floppyConfigure()+0x45>	10001223: R_386_PC32	Floppy::wasFailure()
10001227:	83 c4 10             	add    esp,0x10
1000122a:	84 c0                	test   al,al
1000122c:	74 07                	je     10001235 <FloppyDrive::floppyConfigure()+0x57>
1000122e:	b0 00                	mov    al,0x0
10001230:	e9 de 00 00 00       	jmp    10001313 <FloppyDrive::floppyConfigure()+0x135>
10001235:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001238:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
1000123e:	83 ec 08             	sub    esp,0x8
10001241:	6a 00                	push   0x0
10001243:	50                   	push   eax
10001244:	e8 fc ff ff ff       	call   10001245 <FloppyDrive::floppyConfigure()+0x67>	10001245: R_386_PC32	Floppy::writeCommand(unsigned char)
10001249:	83 c4 10             	add    esp,0x10
1000124c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000124f:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001255:	83 ec 0c             	sub    esp,0xc
10001258:	50                   	push   eax
10001259:	e8 fc ff ff ff       	call   1000125a <FloppyDrive::floppyConfigure()+0x7c>	1000125a: R_386_PC32	Floppy::wasFailure()
1000125e:	83 c4 10             	add    esp,0x10
10001261:	84 c0                	test   al,al
10001263:	74 07                	je     1000126c <FloppyDrive::floppyConfigure()+0x8e>
10001265:	b0 00                	mov    al,0x0
10001267:	e9 a7 00 00 00       	jmp    10001313 <FloppyDrive::floppyConfigure()+0x135>
1000126c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000126f:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001275:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
10001279:	c1 e2 06             	shl    edx,0x6
1000127c:	88 d1                	mov    cl,dl
1000127e:	0f b6 55 f6          	movzx  edx,BYTE PTR [ebp-0xa]
10001282:	c1 e2 05             	shl    edx,0x5
10001285:	09 d1                	or     ecx,edx
10001287:	0f b6 55 f5          	movzx  edx,BYTE PTR [ebp-0xb]
1000128b:	c1 e2 04             	shl    edx,0x4
1000128e:	09 d1                	or     ecx,edx
10001290:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
10001293:	4a                   	dec    edx
10001294:	09 ca                	or     edx,ecx
10001296:	0f b6 d2             	movzx  edx,dl
10001299:	83 ec 08             	sub    esp,0x8
1000129c:	52                   	push   edx
1000129d:	50                   	push   eax
1000129e:	e8 fc ff ff ff       	call   1000129f <FloppyDrive::floppyConfigure()+0xc1>	1000129f: R_386_PC32	Floppy::writeCommand(unsigned char)
100012a3:	83 c4 10             	add    esp,0x10
100012a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100012a9:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100012af:	83 ec 0c             	sub    esp,0xc
100012b2:	50                   	push   eax
100012b3:	e8 fc ff ff ff       	call   100012b4 <FloppyDrive::floppyConfigure()+0xd6>	100012b4: R_386_PC32	Floppy::wasFailure()
100012b8:	83 c4 10             	add    esp,0x10
100012bb:	84 c0                	test   al,al
100012bd:	74 04                	je     100012c3 <FloppyDrive::floppyConfigure()+0xe5>
100012bf:	b0 00                	mov    al,0x0
100012c1:	eb 50                	jmp    10001313 <FloppyDrive::floppyConfigure()+0x135>
100012c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100012c6:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100012cc:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
100012cf:	0f b6 d2             	movzx  edx,dl
100012d2:	83 ec 08             	sub    esp,0x8
100012d5:	52                   	push   edx
100012d6:	50                   	push   eax
100012d7:	e8 fc ff ff ff       	call   100012d8 <FloppyDrive::floppyConfigure()+0xfa>	100012d8: R_386_PC32	Floppy::writeCommand(unsigned char)
100012dc:	83 c4 10             	add    esp,0x10
100012df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100012e2:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100012e8:	83 ec 0c             	sub    esp,0xc
100012eb:	50                   	push   eax
100012ec:	e8 fc ff ff ff       	call   100012ed <FloppyDrive::floppyConfigure()+0x10f>	100012ed: R_386_PC32	Floppy::wasFailure()
100012f1:	83 c4 10             	add    esp,0x10
100012f4:	84 c0                	test   al,al
100012f6:	74 04                	je     100012fc <FloppyDrive::floppyConfigure()+0x11e>
100012f8:	b0 00                	mov    al,0x0
100012fa:	eb 17                	jmp    10001313 <FloppyDrive::floppyConfigure()+0x135>
100012fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100012ff:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001305:	8a 55 f5             	mov    dl,BYTE PTR [ebp-0xb]
10001308:	83 f2 01             	xor    edx,0x1
1000130b:	88 90 89 01 00 00    	mov    BYTE PTR [eax+0x189],dl
10001311:	b0 01                	mov    al,0x1
10001313:	c9                   	leave  
10001314:	c3                   	ret    
10001315:	90                   	nop

10001316 <FloppyDrive::open(int, int, void*)>:
10001316:	b8 00 00 00 00       	mov    eax,0x0
1000131b:	c3                   	ret    

1000131c <FloppyDrive::_open(int, int, void*)>:
1000131c:	55                   	push   ebp
1000131d:	89 e5                	mov    ebp,esp
1000131f:	83 ec 08             	sub    esp,0x8
10001322:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001325:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
10001328:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
1000132e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001331:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10001334:	89 90 70 01 00 00    	mov    DWORD PTR [eax+0x170],edx
1000133a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000133d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
10001343:	83 ec 08             	sub    esp,0x8
10001346:	50                   	push   eax
10001347:	68 53 27 00 10       	push   0x10002753	10001348: R_386_32	.text
1000134c:	e8 fc ff ff ff       	call   1000134d <FloppyDrive::_open(int, int, void*)+0x31>	1000134d: R_386_PC32	Dbg::kprintf(char const*, ...)
10001351:	83 c4 10             	add    esp,0x10
10001354:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001357:	c7 80 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [eax+0x15c],0x200
10001361:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001364:	c6 80 68 01 00 00 01 	mov    BYTE PTR [eax+0x168],0x1
1000136b:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
1000136e:	89 d0                	mov    eax,edx
10001370:	c1 e0 02             	shl    eax,0x2
10001373:	01 d0                	add    eax,edx
10001375:	c1 e0 02             	shl    eax,0x2
10001378:	01 d0                	add    eax,edx
1000137a:	05 11 00 00 00       	add    eax,0x11	1000137b: R_386_32	floppyTable
1000137f:	8a 00                	mov    al,BYTE PTR [eax]
10001381:	0f b6 c8             	movzx  ecx,al
10001384:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
10001387:	89 d0                	mov    eax,edx
10001389:	c1 e0 02             	shl    eax,0x2
1000138c:	01 d0                	add    eax,edx
1000138e:	c1 e0 02             	shl    eax,0x2
10001391:	01 d0                	add    eax,edx
10001393:	05 13 00 00 00       	add    eax,0x13	10001394: R_386_32	floppyTable
10001398:	8a 00                	mov    al,BYTE PTR [eax]
1000139a:	0f b6 c0             	movzx  eax,al
1000139d:	0f af c8             	imul   ecx,eax
100013a0:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
100013a3:	89 d0                	mov    eax,edx
100013a5:	c1 e0 02             	shl    eax,0x2
100013a8:	01 d0                	add    eax,edx
100013aa:	c1 e0 02             	shl    eax,0x2
100013ad:	01 d0                	add    eax,edx
100013af:	05 12 00 00 00       	add    eax,0x12	100013b0: R_386_32	floppyTable
100013b4:	8a 00                	mov    al,BYTE PTR [eax]
100013b6:	0f b6 c0             	movzx  eax,al
100013b9:	0f af c1             	imul   eax,ecx
100013bc:	89 c2                	mov    edx,eax
100013be:	c1 ea 1f             	shr    edx,0x1f
100013c1:	01 d0                	add    eax,edx
100013c3:	d1 f8                	sar    eax,1
100013c5:	99                   	cdq    
100013c6:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
100013c9:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
100013cf:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
100013d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100013d8:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
100013de:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
100013e4:	83 ec 04             	sub    esp,0x4
100013e7:	52                   	push   edx
100013e8:	50                   	push   eax
100013e9:	68 5d 27 00 10       	push   0x1000275d	100013ea: R_386_32	.text
100013ee:	e8 fc ff ff ff       	call   100013ef <FloppyDrive::_open(int, int, void*)+0xd3>	100013ef: R_386_PC32	Dbg::kprintf(char const*, ...)
100013f3:	83 c4 10             	add    esp,0x10
100013f6:	83 ec 0c             	sub    esp,0xc
100013f9:	68 6f 27 00 10       	push   0x1000276f	100013fa: R_386_32	.text
100013fe:	e8 fc ff ff ff       	call   100013ff <FloppyDrive::_open(int, int, void*)+0xe3>	100013ff: R_386_PC32	Dbg::kprintf(char const*, ...)
10001403:	83 c4 10             	add    esp,0x10
10001406:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001409:	83 ec 0c             	sub    esp,0xc
1000140c:	50                   	push   eax
1000140d:	e8 fc ff ff ff       	call   1000140e <FloppyDrive::_open(int, int, void*)+0xf2>	1000140e: R_386_PC32	PhysicalDisk::startCache()
10001412:	83 c4 10             	add    esp,0x10
10001415:	83 ec 0c             	sub    esp,0xc
10001418:	68 85 27 00 10       	push   0x10002785	10001419: R_386_32	.text
1000141d:	e8 fc ff ff ff       	call   1000141e <FloppyDrive::_open(int, int, void*)+0x102>	1000141e: R_386_PC32	Dbg::kprintf(char const*, ...)
10001422:	83 c4 10             	add    esp,0x10
10001425:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001428:	83 ec 0c             	sub    esp,0xc
1000142b:	50                   	push   eax
1000142c:	e8 fc ff ff ff       	call   1000142d <FloppyDrive::_open(int, int, void*)+0x111>	1000142d: R_386_PC32	createPartitionsForDisk(PhysicalDisk*)
10001431:	83 c4 10             	add    esp,0x10
10001434:	83 ec 0c             	sub    esp,0xc
10001437:	68 9b 27 00 10       	push   0x1000279b	10001438: R_386_32	.text
1000143c:	e8 fc ff ff ff       	call   1000143d <FloppyDrive::_open(int, int, void*)+0x121>	1000143d: R_386_PC32	Dbg::kprintf(char const*, ...)
10001441:	83 c4 10             	add    esp,0x10
10001444:	b8 00 00 00 00       	mov    eax,0x0
10001449:	c9                   	leave  
1000144a:	c3                   	ret    
1000144b:	90                   	nop

1000144c <FloppyDrive::close(int, int, void*)>:
1000144c:	b8 00 00 00 00       	mov    eax,0x0
10001451:	c3                   	ret    

10001452 <FloppyDrive::unselect()>:
10001452:	55                   	push   ebp
10001453:	89 e5                	mov    ebp,esp
10001455:	83 ec 08             	sub    esp,0x8
10001458:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000145b:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001461:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10001464:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
1000146a:	83 ec 04             	sub    esp,0x4
1000146d:	6a 00                	push   0x0
1000146f:	52                   	push   edx
10001470:	50                   	push   eax
10001471:	e8 fc ff ff ff       	call   10001472 <FloppyDrive::unselect()+0x20>	10001472: R_386_PC32	Floppy::select(int, bool)
10001476:	83 c4 10             	add    esp,0x10
10001479:	90                   	nop
1000147a:	c9                   	leave  
1000147b:	c3                   	ret    

1000147c <FloppyDrive::select()>:
1000147c:	55                   	push   ebp
1000147d:	89 e5                	mov    ebp,esp
1000147f:	83 ec 18             	sub    esp,0x18
10001482:	83 ec 0c             	sub    esp,0xc
10001485:	68 b1 27 00 10       	push   0x100027b1	10001486: R_386_32	.text
1000148a:	e8 fc ff ff ff       	call   1000148b <FloppyDrive::select()+0xf>	1000148b: R_386_PC32	Dbg::kprintf(char const*, ...)
1000148f:	83 c4 10             	add    esp,0x10
10001492:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001495:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
1000149b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
1000149e:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
100014a4:	83 ec 04             	sub    esp,0x4
100014a7:	6a 01                	push   0x1
100014a9:	52                   	push   edx
100014aa:	50                   	push   eax
100014ab:	e8 fc ff ff ff       	call   100014ac <FloppyDrive::select()+0x30>	100014ac: R_386_PC32	Floppy::select(int, bool)
100014b0:	83 c4 10             	add    esp,0x10
100014b3:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
100014b6:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
100014ba:	75 24                	jne    100014e0 <FloppyDrive::select()+0x64>
100014bc:	83 ec 0c             	sub    esp,0xc
100014bf:	68 c8 27 00 10       	push   0x100027c8	100014c0: R_386_32	.text
100014c4:	e8 fc ff ff ff       	call   100014c5 <FloppyDrive::select()+0x49>	100014c5: R_386_PC32	Dbg::kprintf(char const*, ...)
100014c9:	83 c4 10             	add    esp,0x10
100014cc:	83 ec 08             	sub    esp,0x8
100014cf:	6a 00                	push   0x0
100014d1:	68 80 d1 f0 08       	push   0x8f0d180
100014d6:	e8 fc ff ff ff       	call   100014d7 <FloppyDrive::select()+0x5b>	100014d7: R_386_PC32	nanoSleep(unsigned long long)
100014db:	83 c4 10             	add    esp,0x10
100014de:	eb a2                	jmp    10001482 <FloppyDrive::select()+0x6>
100014e0:	90                   	nop
100014e1:	c9                   	leave  
100014e2:	c3                   	ret    
100014e3:	90                   	nop

100014e4 <FloppyDrive::seek(int, int)>:
100014e4:	55                   	push   ebp
100014e5:	89 e5                	mov    ebp,esp
100014e7:	83 ec 18             	sub    esp,0x18
100014ea:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
100014f1:	83 7d f4 04          	cmp    DWORD PTR [ebp-0xc],0x4
100014f5:	7e 33                	jle    1000152a <FloppyDrive::seek(int, int)+0x46>
100014f7:	83 ec 0c             	sub    esp,0xc
100014fa:	68 e8 27 00 10       	push   0x100027e8	100014fb: R_386_32	.text
100014ff:	e8 fc ff ff ff       	call   10001500 <FloppyDrive::seek(int, int)+0x1c>	10001500: R_386_PC32	Dbg::kprintf(char const*, ...)
10001504:	83 c4 10             	add    esp,0x10
10001507:	83 ec 0c             	sub    esp,0xc
1000150a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000150d:	e8 fc ff ff ff       	call   1000150e <FloppyDrive::seek(int, int)+0x2a>	1000150e: R_386_PC32	FloppyDrive::motorOff()
10001512:	83 c4 10             	add    esp,0x10
10001515:	83 ec 0c             	sub    esp,0xc
10001518:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000151b:	e8 fc ff ff ff       	call   1000151c <FloppyDrive::seek(int, int)+0x38>	1000151c: R_386_PC32	FloppyDrive::unselect()
10001520:	83 c4 10             	add    esp,0x10
10001523:	b0 00                	mov    al,0x0
10001525:	e9 da 02 00 00       	jmp    10001804 <FloppyDrive::seek(int, int)+0x320>
1000152a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000152d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
10001533:	83 ec 08             	sub    esp,0x8
10001536:	50                   	push   eax
10001537:	68 0f 28 00 10       	push   0x1000280f	10001538: R_386_32	.text
1000153c:	e8 fc ff ff ff       	call   1000153d <FloppyDrive::seek(int, int)+0x59>	1000153d: R_386_PC32	Dbg::kprintf(char const*, ...)
10001541:	83 c4 10             	add    esp,0x10
10001544:	83 ec 0c             	sub    esp,0xc
10001547:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000154a:	e8 fc ff ff ff       	call   1000154b <FloppyDrive::seek(int, int)+0x67>	1000154b: R_386_PC32	FloppyDrive::select()
1000154f:	83 c4 10             	add    esp,0x10
10001552:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001555:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
1000155b:	83 ec 08             	sub    esp,0x8
1000155e:	50                   	push   eax
1000155f:	68 1f 28 00 10       	push   0x1000281f	10001560: R_386_32	.text
10001564:	e8 fc ff ff ff       	call   10001565 <FloppyDrive::seek(int, int)+0x81>	10001565: R_386_PC32	Dbg::kprintf(char const*, ...)
10001569:	83 c4 10             	add    esp,0x10
1000156c:	83 ec 0c             	sub    esp,0xc
1000156f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001572:	e8 fc ff ff ff       	call   10001573 <FloppyDrive::seek(int, int)+0x8f>	10001573: R_386_PC32	FloppyDrive::motorOn()
10001577:	83 c4 10             	add    esp,0x10
1000157a:	83 ec 0c             	sub    esp,0xc
1000157d:	68 2e 28 00 10       	push   0x1000282e	1000157e: R_386_32	.text
10001582:	e8 fc ff ff ff       	call   10001583 <FloppyDrive::seek(int, int)+0x9f>	10001583: R_386_PC32	Dbg::kprintf(char const*, ...)
10001587:	83 c4 10             	add    esp,0x10
1000158a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000158d:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001593:	83 ec 08             	sub    esp,0x8
10001596:	6a 0f                	push   0xf
10001598:	50                   	push   eax
10001599:	e8 fc ff ff ff       	call   1000159a <FloppyDrive::seek(int, int)+0xb6>	1000159a: R_386_PC32	Floppy::writeCommand(unsigned char)
1000159e:	83 c4 10             	add    esp,0x10
100015a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100015a4:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100015aa:	83 ec 0c             	sub    esp,0xc
100015ad:	50                   	push   eax
100015ae:	e8 fc ff ff ff       	call   100015af <FloppyDrive::seek(int, int)+0xcb>	100015af: R_386_PC32	Floppy::wasFailure()
100015b3:	83 c4 10             	add    esp,0x10
100015b6:	84 c0                	test   al,al
100015b8:	74 3d                	je     100015f7 <FloppyDrive::seek(int, int)+0x113>
100015ba:	83 ec 0c             	sub    esp,0xc
100015bd:	68 39 28 00 10       	push   0x10002839	100015be: R_386_32	.text
100015c2:	e8 fc ff ff ff       	call   100015c3 <FloppyDrive::seek(int, int)+0xdf>	100015c3: R_386_PC32	Dbg::kprintf(char const*, ...)
100015c7:	83 c4 10             	add    esp,0x10
100015ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100015cd:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100015d3:	83 ec 0c             	sub    esp,0xc
100015d6:	50                   	push   eax
100015d7:	e8 fc ff ff ff       	call   100015d8 <FloppyDrive::seek(int, int)+0xf4>	100015d8: R_386_PC32	Floppy::reset()
100015dc:	83 c4 10             	add    esp,0x10
100015df:	83 ec 0c             	sub    esp,0xc
100015e2:	68 45 28 00 10       	push   0x10002845	100015e3: R_386_32	.text
100015e7:	e8 fc ff ff ff       	call   100015e8 <FloppyDrive::seek(int, int)+0x104>	100015e8: R_386_PC32	Dbg::kprintf(char const*, ...)
100015ec:	83 c4 10             	add    esp,0x10
100015ef:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
100015f2:	e9 fa fe ff ff       	jmp    100014f1 <FloppyDrive::seek(int, int)+0xd>
100015f7:	83 ec 0c             	sub    esp,0xc
100015fa:	68 51 28 00 10       	push   0x10002851	100015fb: R_386_32	.text
100015ff:	e8 fc ff ff ff       	call   10001600 <FloppyDrive::seek(int, int)+0x11c>	10001600: R_386_PC32	Dbg::kprintf(char const*, ...)
10001604:	83 c4 10             	add    esp,0x10
10001607:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000160a:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001610:	c6 80 60 01 00 00 00 	mov    BYTE PTR [eax+0x160],0x0
10001617:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000161a:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001620:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10001623:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
10001629:	88 d1                	mov    cl,dl
1000162b:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
1000162e:	c1 e2 02             	shl    edx,0x2
10001631:	09 ca                	or     edx,ecx
10001633:	0f b6 d2             	movzx  edx,dl
10001636:	83 ec 08             	sub    esp,0x8
10001639:	52                   	push   edx
1000163a:	50                   	push   eax
1000163b:	e8 fc ff ff ff       	call   1000163c <FloppyDrive::seek(int, int)+0x158>	1000163c: R_386_PC32	Floppy::writeCommand(unsigned char)
10001640:	83 c4 10             	add    esp,0x10
10001643:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001646:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
1000164c:	83 ec 0c             	sub    esp,0xc
1000164f:	50                   	push   eax
10001650:	e8 fc ff ff ff       	call   10001651 <FloppyDrive::seek(int, int)+0x16d>	10001651: R_386_PC32	Floppy::wasFailure()
10001655:	83 c4 10             	add    esp,0x10
10001658:	84 c0                	test   al,al
1000165a:	74 1d                	je     10001679 <FloppyDrive::seek(int, int)+0x195>
1000165c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000165f:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001665:	83 ec 0c             	sub    esp,0xc
10001668:	50                   	push   eax
10001669:	e8 fc ff ff ff       	call   1000166a <FloppyDrive::seek(int, int)+0x186>	1000166a: R_386_PC32	Floppy::reset()
1000166e:	83 c4 10             	add    esp,0x10
10001671:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10001674:	e9 78 fe ff ff       	jmp    100014f1 <FloppyDrive::seek(int, int)+0xd>
10001679:	83 ec 0c             	sub    esp,0xc
1000167c:	68 5c 28 00 10       	push   0x1000285c	1000167d: R_386_32	.text
10001681:	e8 fc ff ff ff       	call   10001682 <FloppyDrive::seek(int, int)+0x19e>	10001682: R_386_PC32	Dbg::kprintf(char const*, ...)
10001686:	83 c4 10             	add    esp,0x10
10001689:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000168c:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001692:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10001695:	0f b6 d2             	movzx  edx,dl
10001698:	83 ec 08             	sub    esp,0x8
1000169b:	52                   	push   edx
1000169c:	50                   	push   eax
1000169d:	e8 fc ff ff ff       	call   1000169e <FloppyDrive::seek(int, int)+0x1ba>	1000169e: R_386_PC32	Floppy::writeCommand(unsigned char)
100016a2:	83 c4 10             	add    esp,0x10
100016a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100016a8:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100016ae:	83 ec 0c             	sub    esp,0xc
100016b1:	50                   	push   eax
100016b2:	e8 fc ff ff ff       	call   100016b3 <FloppyDrive::seek(int, int)+0x1cf>	100016b3: R_386_PC32	Floppy::wasFailure()
100016b7:	83 c4 10             	add    esp,0x10
100016ba:	84 c0                	test   al,al
100016bc:	74 1d                	je     100016db <FloppyDrive::seek(int, int)+0x1f7>
100016be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100016c1:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100016c7:	83 ec 0c             	sub    esp,0xc
100016ca:	50                   	push   eax
100016cb:	e8 fc ff ff ff       	call   100016cc <FloppyDrive::seek(int, int)+0x1e8>	100016cc: R_386_PC32	Floppy::reset()
100016d0:	83 c4 10             	add    esp,0x10
100016d3:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
100016d6:	e9 16 fe ff ff       	jmp    100014f1 <FloppyDrive::seek(int, int)+0xd>
100016db:	83 ec 0c             	sub    esp,0xc
100016de:	68 67 28 00 10       	push   0x10002867	100016df: R_386_32	.text
100016e3:	e8 fc ff ff ff       	call   100016e4 <FloppyDrive::seek(int, int)+0x200>	100016e4: R_386_PC32	Dbg::kprintf(char const*, ...)
100016e8:	83 c4 10             	add    esp,0x10
100016eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100016ee:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100016f4:	83 ec 08             	sub    esp,0x8
100016f7:	68 dc 05 00 00       	push   0x5dc
100016fc:	50                   	push   eax
100016fd:	e8 fc ff ff ff       	call   100016fe <FloppyDrive::seek(int, int)+0x21a>	100016fe: R_386_PC32	Floppy::waitIRQ(int)
10001702:	83 c4 10             	add    esp,0x10
10001705:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
10001708:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
1000170b:	83 f0 01             	xor    eax,0x1
1000170e:	84 c0                	test   al,al
10001710:	74 2d                	je     1000173f <FloppyDrive::seek(int, int)+0x25b>
10001712:	83 ec 0c             	sub    esp,0xc
10001715:	68 72 28 00 10       	push   0x10002872	10001716: R_386_32	.text
1000171a:	e8 fc ff ff ff       	call   1000171b <FloppyDrive::seek(int, int)+0x237>	1000171b: R_386_PC32	Dbg::kprintf(char const*, ...)
1000171f:	83 c4 10             	add    esp,0x10
10001722:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001725:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
1000172b:	83 ec 0c             	sub    esp,0xc
1000172e:	50                   	push   eax
1000172f:	e8 fc ff ff ff       	call   10001730 <FloppyDrive::seek(int, int)+0x24c>	10001730: R_386_PC32	Floppy::reset()
10001734:	83 c4 10             	add    esp,0x10
10001737:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
1000173a:	e9 b2 fd ff ff       	jmp    100014f1 <FloppyDrive::seek(int, int)+0xd>
1000173f:	83 ec 0c             	sub    esp,0xc
10001742:	68 80 28 00 10       	push   0x10002880	10001743: R_386_32	.text
10001747:	e8 fc ff ff ff       	call   10001748 <FloppyDrive::seek(int, int)+0x264>	10001748: R_386_PC32	Dbg::kprintf(char const*, ...)
1000174c:	83 c4 10             	add    esp,0x10
1000174f:	c7 45 ec c0 00 00 00 	mov    DWORD PTR [ebp-0x14],0xc0
10001756:	c7 45 e8 ff ff ff ff 	mov    DWORD PTR [ebp-0x18],0xffffffff
1000175d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001760:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001766:	83 ec 04             	sub    esp,0x4
10001769:	8d 55 e8             	lea    edx,[ebp-0x18]
1000176c:	52                   	push   edx
1000176d:	8d 55 ec             	lea    edx,[ebp-0x14]
10001770:	52                   	push   edx
10001771:	50                   	push   eax
10001772:	e8 fc ff ff ff       	call   10001773 <FloppyDrive::seek(int, int)+0x28f>	10001773: R_386_PC32	Floppy::senseInterrupt(int*, int*)
10001777:	83 c4 10             	add    esp,0x10
1000177a:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
1000177d:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
10001780:	83 f0 01             	xor    eax,0x1
10001783:	84 c0                	test   al,al
10001785:	74 15                	je     1000179c <FloppyDrive::seek(int, int)+0x2b8>
10001787:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000178a:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001790:	83 ec 0c             	sub    esp,0xc
10001793:	50                   	push   eax
10001794:	e8 fc ff ff ff       	call   10001795 <FloppyDrive::seek(int, int)+0x2b1>	10001795: R_386_PC32	Floppy::reset()
10001799:	83 c4 10             	add    esp,0x10
1000179c:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
1000179f:	83 f0 01             	xor    eax,0x1
100017a2:	84 c0                	test   al,al
100017a4:	75 08                	jne    100017ae <FloppyDrive::seek(int, int)+0x2ca>
100017a6:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
100017a9:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
100017ac:	74 08                	je     100017b6 <FloppyDrive::seek(int, int)+0x2d2>
100017ae:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
100017b1:	e9 3b fd ff ff       	jmp    100014f1 <FloppyDrive::seek(int, int)+0xd>
100017b6:	83 ec 0c             	sub    esp,0xc
100017b9:	68 8b 28 00 10       	push   0x1000288b	100017ba: R_386_32	.text
100017be:	e8 fc ff ff ff       	call   100017bf <FloppyDrive::seek(int, int)+0x2db>	100017bf: R_386_PC32	Dbg::kprintf(char const*, ...)
100017c3:	83 c4 10             	add    esp,0x10
100017c6:	83 ec 0c             	sub    esp,0xc
100017c9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100017cc:	e8 fc ff ff ff       	call   100017cd <FloppyDrive::seek(int, int)+0x2e9>	100017cd: R_386_PC32	FloppyDrive::motorOff()
100017d1:	83 c4 10             	add    esp,0x10
100017d4:	83 ec 0c             	sub    esp,0xc
100017d7:	68 98 28 00 10       	push   0x10002898	100017d8: R_386_32	.text
100017dc:	e8 fc ff ff ff       	call   100017dd <FloppyDrive::seek(int, int)+0x2f9>	100017dd: R_386_PC32	Dbg::kprintf(char const*, ...)
100017e1:	83 c4 10             	add    esp,0x10
100017e4:	83 ec 0c             	sub    esp,0xc
100017e7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100017ea:	e8 fc ff ff ff       	call   100017eb <FloppyDrive::seek(int, int)+0x307>	100017eb: R_386_PC32	FloppyDrive::unselect()
100017ef:	83 c4 10             	add    esp,0x10
100017f2:	83 ec 0c             	sub    esp,0xc
100017f5:	68 a5 28 00 10       	push   0x100028a5	100017f6: R_386_32	.text
100017fa:	e8 fc ff ff ff       	call   100017fb <FloppyDrive::seek(int, int)+0x317>	100017fb: R_386_PC32	Dbg::kprintf(char const*, ...)
100017ff:	83 c4 10             	add    esp,0x10
10001802:	b0 01                	mov    al,0x1
10001804:	c9                   	leave  
10001805:	c3                   	ret    

10001806 <FloppyDrive::calibrate()>:
10001806:	55                   	push   ebp
10001807:	89 e5                	mov    ebp,esp
10001809:	83 ec 18             	sub    esp,0x18
1000180c:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
10001813:	83 7d f4 04          	cmp    DWORD PTR [ebp-0xc],0x4
10001817:	7e 25                	jle    1000183e <FloppyDrive::calibrate()+0x38>
10001819:	83 ec 0c             	sub    esp,0xc
1000181c:	68 b4 28 00 10       	push   0x100028b4	1000181d: R_386_32	.text
10001821:	e8 fc ff ff ff       	call   10001822 <FloppyDrive::calibrate()+0x1c>	10001822: R_386_PC32	Dbg::kprintf(char const*, ...)
10001826:	83 c4 10             	add    esp,0x10
10001829:	83 ec 0c             	sub    esp,0xc
1000182c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000182f:	e8 fc ff ff ff       	call   10001830 <FloppyDrive::calibrate()+0x2a>	10001830: R_386_PC32	FloppyDrive::motorOff()
10001834:	83 c4 10             	add    esp,0x10
10001837:	b0 00                	mov    al,0x0
10001839:	e9 01 02 00 00       	jmp    10001a3f <FloppyDrive::calibrate()+0x239>
1000183e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001841:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
10001847:	83 ec 08             	sub    esp,0x8
1000184a:	50                   	push   eax
1000184b:	68 e0 28 00 10       	push   0x100028e0	1000184c: R_386_32	.text
10001850:	e8 fc ff ff ff       	call   10001851 <FloppyDrive::calibrate()+0x4b>	10001851: R_386_PC32	Dbg::kprintf(char const*, ...)
10001855:	83 c4 10             	add    esp,0x10
10001858:	83 ec 0c             	sub    esp,0xc
1000185b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000185e:	e8 fc ff ff ff       	call   1000185f <FloppyDrive::calibrate()+0x59>	1000185f: R_386_PC32	FloppyDrive::motorOn()
10001863:	83 c4 10             	add    esp,0x10
10001866:	83 ec 0c             	sub    esp,0xc
10001869:	68 ee 28 00 10       	push   0x100028ee	1000186a: R_386_32	.text
1000186e:	e8 fc ff ff ff       	call   1000186f <FloppyDrive::calibrate()+0x69>	1000186f: R_386_PC32	Dbg::kprintf(char const*, ...)
10001873:	83 c4 10             	add    esp,0x10
10001876:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001879:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
1000187f:	83 ec 08             	sub    esp,0x8
10001882:	6a 07                	push   0x7
10001884:	50                   	push   eax
10001885:	e8 fc ff ff ff       	call   10001886 <FloppyDrive::calibrate()+0x80>	10001886: R_386_PC32	Floppy::writeCommand(unsigned char)
1000188a:	83 c4 10             	add    esp,0x10
1000188d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001890:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001896:	83 ec 0c             	sub    esp,0xc
10001899:	50                   	push   eax
1000189a:	e8 fc ff ff ff       	call   1000189b <FloppyDrive::calibrate()+0x95>	1000189b: R_386_PC32	Floppy::wasFailure()
1000189f:	83 c4 10             	add    esp,0x10
100018a2:	84 c0                	test   al,al
100018a4:	74 1d                	je     100018c3 <FloppyDrive::calibrate()+0xbd>
100018a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100018a9:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100018af:	83 ec 0c             	sub    esp,0xc
100018b2:	50                   	push   eax
100018b3:	e8 fc ff ff ff       	call   100018b4 <FloppyDrive::calibrate()+0xae>	100018b4: R_386_PC32	Floppy::reset()
100018b8:	83 c4 10             	add    esp,0x10
100018bb:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
100018be:	e9 50 ff ff ff       	jmp    10001813 <FloppyDrive::calibrate()+0xd>
100018c3:	83 ec 0c             	sub    esp,0xc
100018c6:	68 f7 28 00 10       	push   0x100028f7	100018c7: R_386_32	.text
100018cb:	e8 fc ff ff ff       	call   100018cc <FloppyDrive::calibrate()+0xc6>	100018cc: R_386_PC32	Dbg::kprintf(char const*, ...)
100018d0:	83 c4 10             	add    esp,0x10
100018d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100018d6:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100018dc:	c6 80 60 01 00 00 00 	mov    BYTE PTR [eax+0x160],0x0
100018e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100018e6:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100018ec:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
100018ef:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
100018f5:	0f b6 d2             	movzx  edx,dl
100018f8:	83 ec 08             	sub    esp,0x8
100018fb:	52                   	push   edx
100018fc:	50                   	push   eax
100018fd:	e8 fc ff ff ff       	call   100018fe <FloppyDrive::calibrate()+0xf8>	100018fe: R_386_PC32	Floppy::writeCommand(unsigned char)
10001902:	83 c4 10             	add    esp,0x10
10001905:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001908:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
1000190e:	83 ec 0c             	sub    esp,0xc
10001911:	50                   	push   eax
10001912:	e8 fc ff ff ff       	call   10001913 <FloppyDrive::calibrate()+0x10d>	10001913: R_386_PC32	Floppy::wasFailure()
10001917:	83 c4 10             	add    esp,0x10
1000191a:	84 c0                	test   al,al
1000191c:	74 1d                	je     1000193b <FloppyDrive::calibrate()+0x135>
1000191e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001921:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001927:	83 ec 0c             	sub    esp,0xc
1000192a:	50                   	push   eax
1000192b:	e8 fc ff ff ff       	call   1000192c <FloppyDrive::calibrate()+0x126>	1000192c: R_386_PC32	Floppy::reset()
10001930:	83 c4 10             	add    esp,0x10
10001933:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10001936:	e9 d8 fe ff ff       	jmp    10001813 <FloppyDrive::calibrate()+0xd>
1000193b:	83 ec 0c             	sub    esp,0xc
1000193e:	68 00 29 00 10       	push   0x10002900	1000193f: R_386_32	.text
10001943:	e8 fc ff ff ff       	call   10001944 <FloppyDrive::calibrate()+0x13e>	10001944: R_386_PC32	Dbg::kprintf(char const*, ...)
10001948:	83 c4 10             	add    esp,0x10
1000194b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000194e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001954:	83 ec 08             	sub    esp,0x8
10001957:	68 dc 05 00 00       	push   0x5dc
1000195c:	50                   	push   eax
1000195d:	e8 fc ff ff ff       	call   1000195e <FloppyDrive::calibrate()+0x158>	1000195e: R_386_PC32	Floppy::waitIRQ(int)
10001962:	83 c4 10             	add    esp,0x10
10001965:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
10001968:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
1000196b:	83 f0 01             	xor    eax,0x1
1000196e:	84 c0                	test   al,al
10001970:	74 1d                	je     1000198f <FloppyDrive::calibrate()+0x189>
10001972:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001975:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
1000197b:	83 ec 0c             	sub    esp,0xc
1000197e:	50                   	push   eax
1000197f:	e8 fc ff ff ff       	call   10001980 <FloppyDrive::calibrate()+0x17a>	10001980: R_386_PC32	Floppy::reset()
10001984:	83 c4 10             	add    esp,0x10
10001987:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
1000198a:	e9 84 fe ff ff       	jmp    10001813 <FloppyDrive::calibrate()+0xd>
1000198f:	83 ec 0c             	sub    esp,0xc
10001992:	68 09 29 00 10       	push   0x10002909	10001993: R_386_32	.text
10001997:	e8 fc ff ff ff       	call   10001998 <FloppyDrive::calibrate()+0x192>	10001998: R_386_PC32	Dbg::kprintf(char const*, ...)
1000199c:	83 c4 10             	add    esp,0x10
1000199f:	c7 45 ec c0 00 00 00 	mov    DWORD PTR [ebp-0x14],0xc0
100019a6:	c7 45 e8 ff ff ff ff 	mov    DWORD PTR [ebp-0x18],0xffffffff
100019ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100019b0:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100019b6:	83 ec 04             	sub    esp,0x4
100019b9:	8d 55 e8             	lea    edx,[ebp-0x18]
100019bc:	52                   	push   edx
100019bd:	8d 55 ec             	lea    edx,[ebp-0x14]
100019c0:	52                   	push   edx
100019c1:	50                   	push   eax
100019c2:	e8 fc ff ff ff       	call   100019c3 <FloppyDrive::calibrate()+0x1bd>	100019c3: R_386_PC32	Floppy::senseInterrupt(int*, int*)
100019c7:	83 c4 10             	add    esp,0x10
100019ca:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
100019cd:	83 ec 0c             	sub    esp,0xc
100019d0:	68 12 29 00 10       	push   0x10002912	100019d1: R_386_32	.text
100019d5:	e8 fc ff ff ff       	call   100019d6 <FloppyDrive::calibrate()+0x1d0>	100019d6: R_386_PC32	Dbg::kprintf(char const*, ...)
100019da:	83 c4 10             	add    esp,0x10
100019dd:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
100019e0:	83 f0 01             	xor    eax,0x1
100019e3:	84 c0                	test   al,al
100019e5:	74 15                	je     100019fc <FloppyDrive::calibrate()+0x1f6>
100019e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100019ea:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100019f0:	83 ec 0c             	sub    esp,0xc
100019f3:	50                   	push   eax
100019f4:	e8 fc ff ff ff       	call   100019f5 <FloppyDrive::calibrate()+0x1ef>	100019f5: R_386_PC32	Floppy::reset()
100019f9:	83 c4 10             	add    esp,0x10
100019fc:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
100019ff:	83 f0 01             	xor    eax,0x1
10001a02:	84 c0                	test   al,al
10001a04:	75 11                	jne    10001a17 <FloppyDrive::calibrate()+0x211>
10001a06:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
10001a09:	85 c0                	test   eax,eax
10001a0b:	75 0a                	jne    10001a17 <FloppyDrive::calibrate()+0x211>
10001a0d:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
10001a10:	83 e0 20             	and    eax,0x20
10001a13:	85 c0                	test   eax,eax
10001a15:	75 08                	jne    10001a1f <FloppyDrive::calibrate()+0x219>
10001a17:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10001a1a:	e9 f4 fd ff ff       	jmp    10001813 <FloppyDrive::calibrate()+0xd>
10001a1f:	83 ec 0c             	sub    esp,0xc
10001a22:	68 1b 29 00 10       	push   0x1000291b	10001a23: R_386_32	.text
10001a27:	e8 fc ff ff ff       	call   10001a28 <FloppyDrive::calibrate()+0x222>	10001a28: R_386_PC32	Dbg::kprintf(char const*, ...)
10001a2c:	83 c4 10             	add    esp,0x10
10001a2f:	83 ec 0c             	sub    esp,0xc
10001a32:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001a35:	e8 fc ff ff ff       	call   10001a36 <FloppyDrive::calibrate()+0x230>	10001a36: R_386_PC32	FloppyDrive::motorOff()
10001a3a:	83 c4 10             	add    esp,0x10
10001a3d:	b0 01                	mov    al,0x1
10001a3f:	c9                   	leave  
10001a40:	c3                   	ret    
10001a41:	90                   	nop

10001a42 <FloppyDrive::doTrack(int, bool, unsigned char*)>:
10001a42:	55                   	push   ebp
10001a43:	89 e5                	mov    ebp,esp
10001a45:	83 ec 28             	sub    esp,0x28
10001a48:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
10001a4b:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
10001a4e:	80 7d e4 00          	cmp    BYTE PTR [ebp-0x1c],0x0
10001a52:	74 10                	je     10001a64 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x22>
10001a54:	83 ec 0c             	sub    esp,0xc
10001a57:	68 24 29 00 10       	push   0x10002924	10001a58: R_386_32	.text
10001a5c:	e8 fc ff ff ff       	call   10001a5d <FloppyDrive::doTrack(int, bool, unsigned char*)+0x1b>	10001a5d: R_386_PC32	Krnl::panic(char const*)
10001a61:	83 c4 10             	add    esp,0x10
10001a64:	80 7d e4 00          	cmp    BYTE PTR [ebp-0x1c],0x0
10001a68:	74 07                	je     10001a71 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x2f>
10001a6a:	b8 c5 00 00 00       	mov    eax,0xc5
10001a6f:	eb 05                	jmp    10001a76 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x34>
10001a71:	b8 c6 00 00 00       	mov    eax,0xc6
10001a76:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10001a79:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
10001a80:	83 ec 0c             	sub    esp,0xc
10001a83:	68 4b 29 00 10       	push   0x1000294b	10001a84: R_386_32	.text
10001a88:	e8 fc ff ff ff       	call   10001a89 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x47>	10001a89: R_386_PC32	Dbg::kprintf(char const*, ...)
10001a8d:	83 c4 10             	add    esp,0x10
10001a90:	83 7d f4 14          	cmp    DWORD PTR [ebp-0xc],0x14
10001a94:	75 26                	jne    10001abc <FloppyDrive::doTrack(int, bool, unsigned char*)+0x7a>
10001a96:	83 ec 0c             	sub    esp,0xc
10001a99:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001a9c:	e8 fc ff ff ff       	call   10001a9d <FloppyDrive::doTrack(int, bool, unsigned char*)+0x5b>	10001a9d: R_386_PC32	FloppyDrive::motorOff()
10001aa1:	83 c4 10             	add    esp,0x10
10001aa4:	83 ec 0c             	sub    esp,0xc
10001aa7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001aaa:	e8 fc ff ff ff       	call   10001aab <FloppyDrive::doTrack(int, bool, unsigned char*)+0x69>	10001aab: R_386_PC32	FloppyDrive::unselect()
10001aaf:	83 c4 10             	add    esp,0x10
10001ab2:	b8 fe ff ff ff       	mov    eax,0xfffffffe
10001ab7:	e9 67 07 00 00       	jmp    10002223 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x7e1>
10001abc:	83 ec 0c             	sub    esp,0xc
10001abf:	68 55 29 00 10       	push   0x10002955	10001ac0: R_386_32	.text
10001ac4:	e8 fc ff ff ff       	call   10001ac5 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x83>	10001ac5: R_386_PC32	Dbg::kprintf(char const*, ...)
10001ac9:	83 c4 10             	add    esp,0x10
10001acc:	83 ec 04             	sub    esp,0x4
10001acf:	6a 00                	push   0x0
10001ad1:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10001ad4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001ad7:	e8 fc ff ff ff       	call   10001ad8 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x96>	10001ad8: R_386_PC32	FloppyDrive::seek(int, int)
10001adc:	83 c4 10             	add    esp,0x10
10001adf:	83 f0 01             	xor    eax,0x1
10001ae2:	84 c0                	test   al,al
10001ae4:	74 0a                	je     10001af0 <FloppyDrive::doTrack(int, bool, unsigned char*)+0xae>
10001ae6:	b8 ff ff ff ff       	mov    eax,0xffffffff
10001aeb:	e9 33 07 00 00       	jmp    10002223 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x7e1>
10001af0:	83 ec 04             	sub    esp,0x4
10001af3:	6a 01                	push   0x1
10001af5:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10001af8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001afb:	e8 fc ff ff ff       	call   10001afc <FloppyDrive::doTrack(int, bool, unsigned char*)+0xba>	10001afc: R_386_PC32	FloppyDrive::seek(int, int)
10001b00:	83 c4 10             	add    esp,0x10
10001b03:	83 f0 01             	xor    eax,0x1
10001b06:	84 c0                	test   al,al
10001b08:	74 0a                	je     10001b14 <FloppyDrive::doTrack(int, bool, unsigned char*)+0xd2>
10001b0a:	b8 ff ff ff ff       	mov    eax,0xffffffff
10001b0f:	e9 0f 07 00 00       	jmp    10002223 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x7e1>
10001b14:	83 ec 0c             	sub    esp,0xc
10001b17:	68 65 29 00 10       	push   0x10002965	10001b18: R_386_32	.text
10001b1c:	e8 fc ff ff ff       	call   10001b1d <FloppyDrive::doTrack(int, bool, unsigned char*)+0xdb>	10001b1d: R_386_PC32	Dbg::kprintf(char const*, ...)
10001b21:	83 c4 10             	add    esp,0x10
10001b24:	83 ec 0c             	sub    esp,0xc
10001b27:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001b2a:	e8 fc ff ff ff       	call   10001b2b <FloppyDrive::doTrack(int, bool, unsigned char*)+0xe9>	10001b2b: R_386_PC32	FloppyDrive::motorOn()
10001b2f:	83 c4 10             	add    esp,0x10
10001b32:	83 ec 0c             	sub    esp,0xc
10001b35:	68 71 29 00 10       	push   0x10002971	10001b36: R_386_32	.text
10001b3a:	e8 fc ff ff ff       	call   10001b3b <FloppyDrive::doTrack(int, bool, unsigned char*)+0xf9>	10001b3b: R_386_PC32	Dbg::kprintf(char const*, ...)
10001b3f:	83 c4 10             	add    esp,0x10
10001b42:	83 ec 0c             	sub    esp,0xc
10001b45:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001b48:	e8 fc ff ff ff       	call   10001b49 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x107>	10001b49: R_386_PC32	FloppyDrive::select()
10001b4d:	83 c4 10             	add    esp,0x10
10001b50:	83 ec 0c             	sub    esp,0xc
10001b53:	68 7c 29 00 10       	push   0x1000297c	10001b54: R_386_32	.text
10001b58:	e8 fc ff ff ff       	call   10001b59 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x117>	10001b59: R_386_PC32	Dbg::kprintf(char const*, ...)
10001b5d:	83 c4 10             	add    esp,0x10
10001b60:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001b63:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001b69:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
10001b6d:	83 ec 08             	sub    esp,0x8
10001b70:	52                   	push   edx
10001b71:	50                   	push   eax
10001b72:	e8 fc ff ff ff       	call   10001b73 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x131>	10001b73: R_386_PC32	Floppy::dmaInit(bool)
10001b77:	83 c4 10             	add    esp,0x10
10001b7a:	83 ec 0c             	sub    esp,0xc
10001b7d:	68 87 29 00 10       	push   0x10002987	10001b7e: R_386_32	.text
10001b82:	e8 fc ff ff ff       	call   10001b83 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x141>	10001b83: R_386_PC32	Dbg::kprintf(char const*, ...)
10001b87:	83 c4 10             	add    esp,0x10
10001b8a:	83 ec 08             	sub    esp,0x8
10001b8d:	6a 00                	push   0x0
10001b8f:	68 00 e1 f5 05       	push   0x5f5e100
10001b94:	e8 fc ff ff ff       	call   10001b95 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x153>	10001b95: R_386_PC32	nanoSleep(unsigned long long)
10001b99:	83 c4 10             	add    esp,0x10
10001b9c:	83 ec 0c             	sub    esp,0xc
10001b9f:	68 94 29 00 10       	push   0x10002994	10001ba0: R_386_32	.text
10001ba4:	e8 fc ff ff ff       	call   10001ba5 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x163>	10001ba5: R_386_PC32	Dbg::kprintf(char const*, ...)
10001ba9:	83 c4 10             	add    esp,0x10
10001bac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001baf:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001bb5:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
10001bb8:	0f b6 d2             	movzx  edx,dl
10001bbb:	83 ec 08             	sub    esp,0x8
10001bbe:	52                   	push   edx
10001bbf:	50                   	push   eax
10001bc0:	e8 fc ff ff ff       	call   10001bc1 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x17f>	10001bc1: R_386_PC32	Floppy::writeCommand(unsigned char)
10001bc5:	83 c4 10             	add    esp,0x10
10001bc8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001bcb:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001bd1:	83 ec 0c             	sub    esp,0xc
10001bd4:	50                   	push   eax
10001bd5:	e8 fc ff ff ff       	call   10001bd6 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x194>	10001bd6: R_386_PC32	Floppy::wasFailure()
10001bda:	83 c4 10             	add    esp,0x10
10001bdd:	84 c0                	test   al,al
10001bdf:	74 1d                	je     10001bfe <FloppyDrive::doTrack(int, bool, unsigned char*)+0x1bc>
10001be1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001be4:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001bea:	83 ec 0c             	sub    esp,0xc
10001bed:	50                   	push   eax
10001bee:	e8 fc ff ff ff       	call   10001bef <FloppyDrive::doTrack(int, bool, unsigned char*)+0x1ad>	10001bef: R_386_PC32	Floppy::reset()
10001bf3:	83 c4 10             	add    esp,0x10
10001bf6:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10001bf9:	e9 82 fe ff ff       	jmp    10001a80 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x3e>
10001bfe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001c01:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001c07:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10001c0a:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
10001c10:	0f b6 d2             	movzx  edx,dl
10001c13:	83 ec 08             	sub    esp,0x8
10001c16:	52                   	push   edx
10001c17:	50                   	push   eax
10001c18:	e8 fc ff ff ff       	call   10001c19 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x1d7>	10001c19: R_386_PC32	Floppy::writeCommand(unsigned char)
10001c1d:	83 c4 10             	add    esp,0x10
10001c20:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001c23:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001c29:	83 ec 0c             	sub    esp,0xc
10001c2c:	50                   	push   eax
10001c2d:	e8 fc ff ff ff       	call   10001c2e <FloppyDrive::doTrack(int, bool, unsigned char*)+0x1ec>	10001c2e: R_386_PC32	Floppy::wasFailure()
10001c32:	83 c4 10             	add    esp,0x10
10001c35:	84 c0                	test   al,al
10001c37:	74 1d                	je     10001c56 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x214>
10001c39:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001c3c:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001c42:	83 ec 0c             	sub    esp,0xc
10001c45:	50                   	push   eax
10001c46:	e8 fc ff ff ff       	call   10001c47 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x205>	10001c47: R_386_PC32	Floppy::reset()
10001c4b:	83 c4 10             	add    esp,0x10
10001c4e:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10001c51:	e9 2a fe ff ff       	jmp    10001a80 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x3e>
10001c56:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001c59:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001c5f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10001c62:	0f b6 d2             	movzx  edx,dl
10001c65:	83 ec 08             	sub    esp,0x8
10001c68:	52                   	push   edx
10001c69:	50                   	push   eax
10001c6a:	e8 fc ff ff ff       	call   10001c6b <FloppyDrive::doTrack(int, bool, unsigned char*)+0x229>	10001c6b: R_386_PC32	Floppy::writeCommand(unsigned char)
10001c6f:	83 c4 10             	add    esp,0x10
10001c72:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001c75:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001c7b:	83 ec 0c             	sub    esp,0xc
10001c7e:	50                   	push   eax
10001c7f:	e8 fc ff ff ff       	call   10001c80 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x23e>	10001c80: R_386_PC32	Floppy::wasFailure()
10001c84:	83 c4 10             	add    esp,0x10
10001c87:	84 c0                	test   al,al
10001c89:	74 1d                	je     10001ca8 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x266>
10001c8b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001c8e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001c94:	83 ec 0c             	sub    esp,0xc
10001c97:	50                   	push   eax
10001c98:	e8 fc ff ff ff       	call   10001c99 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x257>	10001c99: R_386_PC32	Floppy::reset()
10001c9d:	83 c4 10             	add    esp,0x10
10001ca0:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10001ca3:	e9 d8 fd ff ff       	jmp    10001a80 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x3e>
10001ca8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001cab:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001cb1:	83 ec 08             	sub    esp,0x8
10001cb4:	6a 00                	push   0x0
10001cb6:	50                   	push   eax
10001cb7:	e8 fc ff ff ff       	call   10001cb8 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x276>	10001cb8: R_386_PC32	Floppy::writeCommand(unsigned char)
10001cbc:	83 c4 10             	add    esp,0x10
10001cbf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001cc2:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001cc8:	83 ec 0c             	sub    esp,0xc
10001ccb:	50                   	push   eax
10001ccc:	e8 fc ff ff ff       	call   10001ccd <FloppyDrive::doTrack(int, bool, unsigned char*)+0x28b>	10001ccd: R_386_PC32	Floppy::wasFailure()
10001cd1:	83 c4 10             	add    esp,0x10
10001cd4:	84 c0                	test   al,al
10001cd6:	74 1d                	je     10001cf5 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x2b3>
10001cd8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001cdb:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001ce1:	83 ec 0c             	sub    esp,0xc
10001ce4:	50                   	push   eax
10001ce5:	e8 fc ff ff ff       	call   10001ce6 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x2a4>	10001ce6: R_386_PC32	Floppy::reset()
10001cea:	83 c4 10             	add    esp,0x10
10001ced:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10001cf0:	e9 8b fd ff ff       	jmp    10001a80 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x3e>
10001cf5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001cf8:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001cfe:	83 ec 08             	sub    esp,0x8
10001d01:	6a 01                	push   0x1
10001d03:	50                   	push   eax
10001d04:	e8 fc ff ff ff       	call   10001d05 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x2c3>	10001d05: R_386_PC32	Floppy::writeCommand(unsigned char)
10001d09:	83 c4 10             	add    esp,0x10
10001d0c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001d0f:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001d15:	83 ec 0c             	sub    esp,0xc
10001d18:	50                   	push   eax
10001d19:	e8 fc ff ff ff       	call   10001d1a <FloppyDrive::doTrack(int, bool, unsigned char*)+0x2d8>	10001d1a: R_386_PC32	Floppy::wasFailure()
10001d1e:	83 c4 10             	add    esp,0x10
10001d21:	84 c0                	test   al,al
10001d23:	74 1d                	je     10001d42 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x300>
10001d25:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001d28:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001d2e:	83 ec 0c             	sub    esp,0xc
10001d31:	50                   	push   eax
10001d32:	e8 fc ff ff ff       	call   10001d33 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x2f1>	10001d33: R_386_PC32	Floppy::reset()
10001d37:	83 c4 10             	add    esp,0x10
10001d3a:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10001d3d:	e9 3e fd ff ff       	jmp    10001a80 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x3e>
10001d42:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001d45:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001d4b:	83 ec 08             	sub    esp,0x8
10001d4e:	6a 02                	push   0x2
10001d50:	50                   	push   eax
10001d51:	e8 fc ff ff ff       	call   10001d52 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x310>	10001d52: R_386_PC32	Floppy::writeCommand(unsigned char)
10001d56:	83 c4 10             	add    esp,0x10
10001d59:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001d5c:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001d62:	83 ec 0c             	sub    esp,0xc
10001d65:	50                   	push   eax
10001d66:	e8 fc ff ff ff       	call   10001d67 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x325>	10001d67: R_386_PC32	Floppy::wasFailure()
10001d6b:	83 c4 10             	add    esp,0x10
10001d6e:	84 c0                	test   al,al
10001d70:	74 1d                	je     10001d8f <FloppyDrive::doTrack(int, bool, unsigned char*)+0x34d>
10001d72:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001d75:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001d7b:	83 ec 0c             	sub    esp,0xc
10001d7e:	50                   	push   eax
10001d7f:	e8 fc ff ff ff       	call   10001d80 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x33e>	10001d80: R_386_PC32	Floppy::reset()
10001d84:	83 c4 10             	add    esp,0x10
10001d87:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10001d8a:	e9 f1 fc ff ff       	jmp    10001a80 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x3e>
10001d8f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001d92:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001d98:	83 ec 08             	sub    esp,0x8
10001d9b:	6a 12                	push   0x12
10001d9d:	50                   	push   eax
10001d9e:	e8 fc ff ff ff       	call   10001d9f <FloppyDrive::doTrack(int, bool, unsigned char*)+0x35d>	10001d9f: R_386_PC32	Floppy::writeCommand(unsigned char)
10001da3:	83 c4 10             	add    esp,0x10
10001da6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001da9:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001daf:	83 ec 0c             	sub    esp,0xc
10001db2:	50                   	push   eax
10001db3:	e8 fc ff ff ff       	call   10001db4 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x372>	10001db4: R_386_PC32	Floppy::wasFailure()
10001db8:	83 c4 10             	add    esp,0x10
10001dbb:	84 c0                	test   al,al
10001dbd:	74 1d                	je     10001ddc <FloppyDrive::doTrack(int, bool, unsigned char*)+0x39a>
10001dbf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001dc2:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001dc8:	83 ec 0c             	sub    esp,0xc
10001dcb:	50                   	push   eax
10001dcc:	e8 fc ff ff ff       	call   10001dcd <FloppyDrive::doTrack(int, bool, unsigned char*)+0x38b>	10001dcd: R_386_PC32	Floppy::reset()
10001dd1:	83 c4 10             	add    esp,0x10
10001dd4:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10001dd7:	e9 a4 fc ff ff       	jmp    10001a80 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x3e>
10001ddc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001ddf:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001de5:	83 ec 08             	sub    esp,0x8
10001de8:	6a 1b                	push   0x1b
10001dea:	50                   	push   eax
10001deb:	e8 fc ff ff ff       	call   10001dec <FloppyDrive::doTrack(int, bool, unsigned char*)+0x3aa>	10001dec: R_386_PC32	Floppy::writeCommand(unsigned char)
10001df0:	83 c4 10             	add    esp,0x10
10001df3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001df6:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001dfc:	83 ec 0c             	sub    esp,0xc
10001dff:	50                   	push   eax
10001e00:	e8 fc ff ff ff       	call   10001e01 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x3bf>	10001e01: R_386_PC32	Floppy::wasFailure()
10001e05:	83 c4 10             	add    esp,0x10
10001e08:	84 c0                	test   al,al
10001e0a:	74 1d                	je     10001e29 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x3e7>
10001e0c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001e0f:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001e15:	83 ec 0c             	sub    esp,0xc
10001e18:	50                   	push   eax
10001e19:	e8 fc ff ff ff       	call   10001e1a <FloppyDrive::doTrack(int, bool, unsigned char*)+0x3d8>	10001e1a: R_386_PC32	Floppy::reset()
10001e1e:	83 c4 10             	add    esp,0x10
10001e21:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10001e24:	e9 57 fc ff ff       	jmp    10001a80 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x3e>
10001e29:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001e2c:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001e32:	c6 80 60 01 00 00 00 	mov    BYTE PTR [eax+0x160],0x0
10001e39:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001e3c:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001e42:	83 ec 08             	sub    esp,0x8
10001e45:	68 ff 00 00 00       	push   0xff
10001e4a:	50                   	push   eax
10001e4b:	e8 fc ff ff ff       	call   10001e4c <FloppyDrive::doTrack(int, bool, unsigned char*)+0x40a>	10001e4c: R_386_PC32	Floppy::writeCommand(unsigned char)
10001e50:	83 c4 10             	add    esp,0x10
10001e53:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001e56:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001e5c:	83 ec 0c             	sub    esp,0xc
10001e5f:	50                   	push   eax
10001e60:	e8 fc ff ff ff       	call   10001e61 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x41f>	10001e61: R_386_PC32	Floppy::wasFailure()
10001e65:	83 c4 10             	add    esp,0x10
10001e68:	84 c0                	test   al,al
10001e6a:	74 1d                	je     10001e89 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x447>
10001e6c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001e6f:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001e75:	83 ec 0c             	sub    esp,0xc
10001e78:	50                   	push   eax
10001e79:	e8 fc ff ff ff       	call   10001e7a <FloppyDrive::doTrack(int, bool, unsigned char*)+0x438>	10001e7a: R_386_PC32	Floppy::reset()
10001e7e:	83 c4 10             	add    esp,0x10
10001e81:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10001e84:	e9 f7 fb ff ff       	jmp    10001a80 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x3e>
10001e89:	83 ec 0c             	sub    esp,0xc
10001e8c:	68 a0 29 00 10       	push   0x100029a0	10001e8d: R_386_32	.text
10001e91:	e8 fc ff ff ff       	call   10001e92 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x450>	10001e92: R_386_PC32	Dbg::kprintf(char const*, ...)
10001e96:	83 c4 10             	add    esp,0x10
10001e99:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001e9c:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001ea2:	83 ec 08             	sub    esp,0x8
10001ea5:	68 e8 03 00 00       	push   0x3e8
10001eaa:	50                   	push   eax
10001eab:	e8 fc ff ff ff       	call   10001eac <FloppyDrive::doTrack(int, bool, unsigned char*)+0x46a>	10001eac: R_386_PC32	Floppy::waitIRQ(int)
10001eb0:	83 c4 10             	add    esp,0x10
10001eb3:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
10001eb6:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
10001eb9:	83 f0 01             	xor    eax,0x1
10001ebc:	84 c0                	test   al,al
10001ebe:	74 2d                	je     10001eed <FloppyDrive::doTrack(int, bool, unsigned char*)+0x4ab>
10001ec0:	83 ec 0c             	sub    esp,0xc
10001ec3:	68 b3 29 00 10       	push   0x100029b3	10001ec4: R_386_32	.text
10001ec8:	e8 fc ff ff ff       	call   10001ec9 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x487>	10001ec9: R_386_PC32	Dbg::kprintf(char const*, ...)
10001ecd:	83 c4 10             	add    esp,0x10
10001ed0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001ed3:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001ed9:	83 ec 0c             	sub    esp,0xc
10001edc:	50                   	push   eax
10001edd:	e8 fc ff ff ff       	call   10001ede <FloppyDrive::doTrack(int, bool, unsigned char*)+0x49c>	10001ede: R_386_PC32	Floppy::reset()
10001ee2:	83 c4 10             	add    esp,0x10
10001ee5:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10001ee8:	e9 93 fb ff ff       	jmp    10001a80 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x3e>
10001eed:	83 ec 0c             	sub    esp,0xc
10001ef0:	68 bc 29 00 10       	push   0x100029bc	10001ef1: R_386_32	.text
10001ef5:	e8 fc ff ff ff       	call   10001ef6 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x4b4>	10001ef6: R_386_PC32	Dbg::kprintf(char const*, ...)
10001efa:	83 c4 10             	add    esp,0x10
10001efd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001f00:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001f06:	83 ec 0c             	sub    esp,0xc
10001f09:	50                   	push   eax
10001f0a:	e8 fc ff ff ff       	call   10001f0b <FloppyDrive::doTrack(int, bool, unsigned char*)+0x4c9>	10001f0b: R_386_PC32	Floppy::readData()
10001f0f:	83 c4 10             	add    esp,0x10
10001f12:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
10001f15:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001f18:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001f1e:	83 ec 0c             	sub    esp,0xc
10001f21:	50                   	push   eax
10001f22:	e8 fc ff ff ff       	call   10001f23 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x4e1>	10001f23: R_386_PC32	Floppy::wasFailure()
10001f27:	83 c4 10             	add    esp,0x10
10001f2a:	84 c0                	test   al,al
10001f2c:	74 2d                	je     10001f5b <FloppyDrive::doTrack(int, bool, unsigned char*)+0x519>
10001f2e:	83 ec 0c             	sub    esp,0xc
10001f31:	68 c6 29 00 10       	push   0x100029c6	10001f32: R_386_32	.text
10001f36:	e8 fc ff ff ff       	call   10001f37 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x4f5>	10001f37: R_386_PC32	Dbg::kprintf(char const*, ...)
10001f3b:	83 c4 10             	add    esp,0x10
10001f3e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001f41:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001f47:	83 ec 0c             	sub    esp,0xc
10001f4a:	50                   	push   eax
10001f4b:	e8 fc ff ff ff       	call   10001f4c <FloppyDrive::doTrack(int, bool, unsigned char*)+0x50a>	10001f4c: R_386_PC32	Floppy::reset()
10001f50:	83 c4 10             	add    esp,0x10
10001f53:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10001f56:	e9 25 fb ff ff       	jmp    10001a80 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x3e>
10001f5b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001f5e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001f64:	83 ec 0c             	sub    esp,0xc
10001f67:	50                   	push   eax
10001f68:	e8 fc ff ff ff       	call   10001f69 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x527>	10001f69: R_386_PC32	Floppy::readData()
10001f6d:	83 c4 10             	add    esp,0x10
10001f70:	88 45 ed             	mov    BYTE PTR [ebp-0x13],al
10001f73:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001f76:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001f7c:	83 ec 0c             	sub    esp,0xc
10001f7f:	50                   	push   eax
10001f80:	e8 fc ff ff ff       	call   10001f81 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x53f>	10001f81: R_386_PC32	Floppy::wasFailure()
10001f85:	83 c4 10             	add    esp,0x10
10001f88:	84 c0                	test   al,al
10001f8a:	74 2d                	je     10001fb9 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x577>
10001f8c:	83 ec 0c             	sub    esp,0xc
10001f8f:	68 c6 29 00 10       	push   0x100029c6	10001f90: R_386_32	.text
10001f94:	e8 fc ff ff ff       	call   10001f95 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x553>	10001f95: R_386_PC32	Dbg::kprintf(char const*, ...)
10001f99:	83 c4 10             	add    esp,0x10
10001f9c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001f9f:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001fa5:	83 ec 0c             	sub    esp,0xc
10001fa8:	50                   	push   eax
10001fa9:	e8 fc ff ff ff       	call   10001faa <FloppyDrive::doTrack(int, bool, unsigned char*)+0x568>	10001faa: R_386_PC32	Floppy::reset()
10001fae:	83 c4 10             	add    esp,0x10
10001fb1:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10001fb4:	e9 c7 fa ff ff       	jmp    10001a80 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x3e>
10001fb9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001fbc:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001fc2:	83 ec 0c             	sub    esp,0xc
10001fc5:	50                   	push   eax
10001fc6:	e8 fc ff ff ff       	call   10001fc7 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x585>	10001fc7: R_386_PC32	Floppy::readData()
10001fcb:	83 c4 10             	add    esp,0x10
10001fce:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
10001fd1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001fd4:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001fda:	83 ec 0c             	sub    esp,0xc
10001fdd:	50                   	push   eax
10001fde:	e8 fc ff ff ff       	call   10001fdf <FloppyDrive::doTrack(int, bool, unsigned char*)+0x59d>	10001fdf: R_386_PC32	Floppy::wasFailure()
10001fe3:	83 c4 10             	add    esp,0x10
10001fe6:	84 c0                	test   al,al
10001fe8:	74 2d                	je     10002017 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x5d5>
10001fea:	83 ec 0c             	sub    esp,0xc
10001fed:	68 c6 29 00 10       	push   0x100029c6	10001fee: R_386_32	.text
10001ff2:	e8 fc ff ff ff       	call   10001ff3 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x5b1>	10001ff3: R_386_PC32	Dbg::kprintf(char const*, ...)
10001ff7:	83 c4 10             	add    esp,0x10
10001ffa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001ffd:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10002003:	83 ec 0c             	sub    esp,0xc
10002006:	50                   	push   eax
10002007:	e8 fc ff ff ff       	call   10002008 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x5c6>	10002008: R_386_PC32	Floppy::reset()
1000200c:	83 c4 10             	add    esp,0x10
1000200f:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10002012:	e9 69 fa ff ff       	jmp    10001a80 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x3e>
10002017:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000201a:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10002020:	83 ec 0c             	sub    esp,0xc
10002023:	50                   	push   eax
10002024:	e8 fc ff ff ff       	call   10002025 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x5e3>	10002025: R_386_PC32	Floppy::readData()
10002029:	83 c4 10             	add    esp,0x10
1000202c:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
1000202f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002032:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10002038:	83 ec 0c             	sub    esp,0xc
1000203b:	50                   	push   eax
1000203c:	e8 fc ff ff ff       	call   1000203d <FloppyDrive::doTrack(int, bool, unsigned char*)+0x5fb>	1000203d: R_386_PC32	Floppy::wasFailure()
10002041:	83 c4 10             	add    esp,0x10
10002044:	84 c0                	test   al,al
10002046:	74 2d                	je     10002075 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x633>
10002048:	83 ec 0c             	sub    esp,0xc
1000204b:	68 c6 29 00 10       	push   0x100029c6	1000204c: R_386_32	.text
10002050:	e8 fc ff ff ff       	call   10002051 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x60f>	10002051: R_386_PC32	Dbg::kprintf(char const*, ...)
10002055:	83 c4 10             	add    esp,0x10
10002058:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000205b:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10002061:	83 ec 0c             	sub    esp,0xc
10002064:	50                   	push   eax
10002065:	e8 fc ff ff ff       	call   10002066 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x624>	10002066: R_386_PC32	Floppy::reset()
1000206a:	83 c4 10             	add    esp,0x10
1000206d:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10002070:	e9 0b fa ff ff       	jmp    10001a80 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x3e>
10002075:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002078:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
1000207e:	83 ec 0c             	sub    esp,0xc
10002081:	50                   	push   eax
10002082:	e8 fc ff ff ff       	call   10002083 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x641>	10002083: R_386_PC32	Floppy::readData()
10002087:	83 c4 10             	add    esp,0x10
1000208a:	88 45 ea             	mov    BYTE PTR [ebp-0x16],al
1000208d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002090:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10002096:	83 ec 0c             	sub    esp,0xc
10002099:	50                   	push   eax
1000209a:	e8 fc ff ff ff       	call   1000209b <FloppyDrive::doTrack(int, bool, unsigned char*)+0x659>	1000209b: R_386_PC32	Floppy::wasFailure()
1000209f:	83 c4 10             	add    esp,0x10
100020a2:	84 c0                	test   al,al
100020a4:	74 2d                	je     100020d3 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x691>
100020a6:	83 ec 0c             	sub    esp,0xc
100020a9:	68 c6 29 00 10       	push   0x100029c6	100020aa: R_386_32	.text
100020ae:	e8 fc ff ff ff       	call   100020af <FloppyDrive::doTrack(int, bool, unsigned char*)+0x66d>	100020af: R_386_PC32	Dbg::kprintf(char const*, ...)
100020b3:	83 c4 10             	add    esp,0x10
100020b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100020b9:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100020bf:	83 ec 0c             	sub    esp,0xc
100020c2:	50                   	push   eax
100020c3:	e8 fc ff ff ff       	call   100020c4 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x682>	100020c4: R_386_PC32	Floppy::reset()
100020c8:	83 c4 10             	add    esp,0x10
100020cb:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
100020ce:	e9 ad f9 ff ff       	jmp    10001a80 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x3e>
100020d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100020d6:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100020dc:	83 ec 0c             	sub    esp,0xc
100020df:	50                   	push   eax
100020e0:	e8 fc ff ff ff       	call   100020e1 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x69f>	100020e1: R_386_PC32	Floppy::readData()
100020e5:	83 c4 10             	add    esp,0x10
100020e8:	88 45 e9             	mov    BYTE PTR [ebp-0x17],al
100020eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100020ee:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100020f4:	83 ec 0c             	sub    esp,0xc
100020f7:	50                   	push   eax
100020f8:	e8 fc ff ff ff       	call   100020f9 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x6b7>	100020f9: R_386_PC32	Floppy::wasFailure()
100020fd:	83 c4 10             	add    esp,0x10
10002100:	84 c0                	test   al,al
10002102:	74 2d                	je     10002131 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x6ef>
10002104:	83 ec 0c             	sub    esp,0xc
10002107:	68 c6 29 00 10       	push   0x100029c6	10002108: R_386_32	.text
1000210c:	e8 fc ff ff ff       	call   1000210d <FloppyDrive::doTrack(int, bool, unsigned char*)+0x6cb>	1000210d: R_386_PC32	Dbg::kprintf(char const*, ...)
10002111:	83 c4 10             	add    esp,0x10
10002114:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002117:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
1000211d:	83 ec 0c             	sub    esp,0xc
10002120:	50                   	push   eax
10002121:	e8 fc ff ff ff       	call   10002122 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x6e0>	10002122: R_386_PC32	Floppy::reset()
10002126:	83 c4 10             	add    esp,0x10
10002129:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
1000212c:	e9 4f f9 ff ff       	jmp    10001a80 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x3e>
10002131:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002134:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
1000213a:	83 ec 0c             	sub    esp,0xc
1000213d:	50                   	push   eax
1000213e:	e8 fc ff ff ff       	call   1000213f <FloppyDrive::doTrack(int, bool, unsigned char*)+0x6fd>	1000213f: R_386_PC32	Floppy::readData()
10002143:	83 c4 10             	add    esp,0x10
10002146:	88 45 e8             	mov    BYTE PTR [ebp-0x18],al
10002149:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000214c:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10002152:	83 ec 0c             	sub    esp,0xc
10002155:	50                   	push   eax
10002156:	e8 fc ff ff ff       	call   10002157 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x715>	10002157: R_386_PC32	Floppy::wasFailure()
1000215b:	83 c4 10             	add    esp,0x10
1000215e:	84 c0                	test   al,al
10002160:	74 2d                	je     1000218f <FloppyDrive::doTrack(int, bool, unsigned char*)+0x74d>
10002162:	83 ec 0c             	sub    esp,0xc
10002165:	68 c6 29 00 10       	push   0x100029c6	10002166: R_386_32	.text
1000216a:	e8 fc ff ff ff       	call   1000216b <FloppyDrive::doTrack(int, bool, unsigned char*)+0x729>	1000216b: R_386_PC32	Dbg::kprintf(char const*, ...)
1000216f:	83 c4 10             	add    esp,0x10
10002172:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002175:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
1000217b:	83 ec 0c             	sub    esp,0xc
1000217e:	50                   	push   eax
1000217f:	e8 fc ff ff ff       	call   10002180 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x73e>	10002180: R_386_PC32	Floppy::reset()
10002184:	83 c4 10             	add    esp,0x10
10002187:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
1000218a:	e9 f1 f8 ff ff       	jmp    10001a80 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x3e>
1000218f:	83 ec 0c             	sub    esp,0xc
10002192:	68 df 29 00 10       	push   0x100029df	10002193: R_386_32	.text
10002197:	e8 fc ff ff ff       	call   10002198 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x756>	10002198: R_386_PC32	Dbg::kprintf(char const*, ...)
1000219c:	83 c4 10             	add    esp,0x10
1000219f:	83 ec 0c             	sub    esp,0xc
100021a2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100021a5:	e8 fc ff ff ff       	call   100021a6 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x764>	100021a6: R_386_PC32	FloppyDrive::motorOff()
100021aa:	83 c4 10             	add    esp,0x10
100021ad:	83 ec 0c             	sub    esp,0xc
100021b0:	68 f3 29 00 10       	push   0x100029f3	100021b1: R_386_32	.text
100021b5:	e8 fc ff ff ff       	call   100021b6 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x774>	100021b6: R_386_PC32	Dbg::kprintf(char const*, ...)
100021ba:	83 c4 10             	add    esp,0x10
100021bd:	83 ec 0c             	sub    esp,0xc
100021c0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100021c3:	e8 fc ff ff ff       	call   100021c4 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x782>	100021c4: R_386_PC32	FloppyDrive::unselect()
100021c8:	83 c4 10             	add    esp,0x10
100021cb:	83 ec 0c             	sub    esp,0xc
100021ce:	68 fe 29 00 10       	push   0x100029fe	100021cf: R_386_32	.text
100021d3:	e8 fc ff ff ff       	call   100021d4 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x792>	100021d4: R_386_PC32	Dbg::kprintf(char const*, ...)
100021d8:	83 c4 10             	add    esp,0x10
100021db:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
100021de:	83 f0 01             	xor    eax,0x1
100021e1:	84 c0                	test   al,al
100021e3:	74 39                	je     1000221e <FloppyDrive::doTrack(int, bool, unsigned char*)+0x7dc>
100021e5:	83 ec 0c             	sub    esp,0xc
100021e8:	68 09 2a 00 10       	push   0x10002a09	100021e9: R_386_32	.text
100021ed:	e8 fc ff ff ff       	call   100021ee <FloppyDrive::doTrack(int, bool, unsigned char*)+0x7ac>	100021ee: R_386_PC32	Dbg::kprintf(char const*, ...)
100021f2:	83 c4 10             	add    esp,0x10
100021f5:	a1 00 00 00 00       	mov    eax,ds:0x0	100021f6: R_386_32	_TEMP_dma
100021fa:	83 ec 04             	sub    esp,0x4
100021fd:	68 00 48 00 00       	push   0x4800
10002202:	50                   	push   eax
10002203:	ff 75 14             	push   DWORD PTR [ebp+0x14]
10002206:	e8 fc ff ff ff       	call   10002207 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x7c5>	10002207: R_386_PC32	memcpy
1000220b:	83 c4 10             	add    esp,0x10
1000220e:	83 ec 0c             	sub    esp,0xc
10002211:	68 1b 2a 00 10       	push   0x10002a1b	10002212: R_386_32	.text
10002216:	e8 fc ff ff ff       	call   10002217 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x7d5>	10002217: R_386_PC32	Dbg::kprintf(char const*, ...)
1000221b:	83 c4 10             	add    esp,0x10
1000221e:	b8 00 00 00 00       	mov    eax,0x0
10002223:	c9                   	leave  
10002224:	c3                   	ret    
10002225:	90                   	nop

10002226 <FloppyDrive::lbaToCHS(unsigned int, int*, int*, int*)>:
10002226:	55                   	push   ebp
10002227:	89 e5                	mov    ebp,esp
10002229:	83 ec 10             	sub    esp,0x10
1000222c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000222f:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10002235:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10002238:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
1000223e:	83 c2 64             	add    edx,0x64
10002241:	8b 14 90             	mov    edx,DWORD PTR [eax+edx*4]
10002244:	89 d0                	mov    eax,edx
10002246:	c1 e0 02             	shl    eax,0x2
10002249:	01 d0                	add    eax,edx
1000224b:	c1 e0 02             	shl    eax,0x2
1000224e:	01 d0                	add    eax,edx
10002250:	05 13 00 00 00       	add    eax,0x13	10002251: R_386_32	floppyTable
10002255:	8a 00                	mov    al,BYTE PTR [eax]
10002257:	0f b6 c0             	movzx  eax,al
1000225a:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
1000225d:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10002260:	01 c0                	add    eax,eax
10002262:	89 c1                	mov    ecx,eax
10002264:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10002267:	ba 00 00 00 00       	mov    edx,0x0
1000226c:	f7 f1                	div    ecx
1000226e:	89 c2                	mov    edx,eax
10002270:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
10002273:	89 10                	mov    DWORD PTR [eax],edx
10002275:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10002278:	01 c0                	add    eax,eax
1000227a:	89 c1                	mov    ecx,eax
1000227c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
1000227f:	ba 00 00 00 00       	mov    edx,0x0
10002284:	f7 f1                	div    ecx
10002286:	89 d0                	mov    eax,edx
10002288:	8b 4d fc             	mov    ecx,DWORD PTR [ebp-0x4]
1000228b:	ba 00 00 00 00       	mov    edx,0x0
10002290:	f7 f1                	div    ecx
10002292:	89 c2                	mov    edx,eax
10002294:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
10002297:	89 10                	mov    DWORD PTR [eax],edx
10002299:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000229c:	01 c0                	add    eax,eax
1000229e:	89 c1                	mov    ecx,eax
100022a0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100022a3:	ba 00 00 00 00       	mov    edx,0x0
100022a8:	f7 f1                	div    ecx
100022aa:	89 d0                	mov    eax,edx
100022ac:	8b 4d fc             	mov    ecx,DWORD PTR [ebp-0x4]
100022af:	ba 00 00 00 00       	mov    edx,0x0
100022b4:	f7 f1                	div    ecx
100022b6:	89 d0                	mov    eax,edx
100022b8:	40                   	inc    eax
100022b9:	89 c2                	mov    edx,eax
100022bb:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
100022be:	89 10                	mov    DWORD PTR [eax],edx
100022c0:	90                   	nop
100022c1:	c9                   	leave  
100022c2:	c3                   	ret    
100022c3:	90                   	nop

100022c4 <FloppyDrive::read(unsigned long long, int, void*)>:
100022c4:	55                   	push   ebp
100022c5:	89 e5                	mov    ebp,esp
100022c7:	83 ec 28             	sub    esp,0x28
100022ca:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100022cd:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
100022d0:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
100022d3:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
100022d6:	83 7d 14 01          	cmp    DWORD PTR [ebp+0x14],0x1
100022da:	74 10                	je     100022ec <FloppyDrive::read(unsigned long long, int, void*)+0x28>
100022dc:	83 ec 0c             	sub    esp,0xc
100022df:	68 29 2a 00 10       	push   0x10002a29	100022e0: R_386_32	.text
100022e4:	e8 fc ff ff ff       	call   100022e5 <FloppyDrive::read(unsigned long long, int, void*)+0x21>	100022e5: R_386_PC32	Krnl::panic(char const*)
100022e9:	83 c4 10             	add    esp,0x10
100022ec:	83 ec 0c             	sub    esp,0xc
100022ef:	68 3c 2a 00 10       	push   0x10002a3c	100022f0: R_386_32	.text
100022f4:	e8 fc ff ff ff       	call   100022f5 <FloppyDrive::read(unsigned long long, int, void*)+0x31>	100022f5: R_386_PC32	Dbg::kprintf(char const*, ...)
100022f9:	83 c4 10             	add    esp,0x10
100022fc:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
100022ff:	83 ec 0c             	sub    esp,0xc
10002302:	8d 55 ec             	lea    edx,[ebp-0x14]
10002305:	52                   	push   edx
10002306:	8d 55 f0             	lea    edx,[ebp-0x10]
10002309:	52                   	push   edx
1000230a:	8d 55 f4             	lea    edx,[ebp-0xc]
1000230d:	52                   	push   edx
1000230e:	50                   	push   eax
1000230f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002312:	e8 fc ff ff ff       	call   10002313 <FloppyDrive::read(unsigned long long, int, void*)+0x4f>	10002313: R_386_PC32	FloppyDrive::lbaToCHS(unsigned int, int*, int*, int*)
10002317:	83 c4 20             	add    esp,0x20
1000231a:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
1000231d:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
10002320:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10002323:	51                   	push   ecx
10002324:	52                   	push   edx
10002325:	50                   	push   eax
10002326:	68 57 2a 00 10       	push   0x10002a57	10002327: R_386_32	.text
1000232b:	e8 fc ff ff ff       	call   1000232c <FloppyDrive::read(unsigned long long, int, void*)+0x68>	1000232c: R_386_PC32	Dbg::kprintf(char const*, ...)
10002330:	83 c4 10             	add    esp,0x10
10002333:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10002336:	68 00 00 00 00       	push   0x0	10002337: R_386_32	_TEMP_trackBuffer
1000233b:	6a 00                	push   0x0
1000233d:	50                   	push   eax
1000233e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002341:	e8 fc ff ff ff       	call   10002342 <FloppyDrive::read(unsigned long long, int, void*)+0x7e>	10002342: R_386_PC32	FloppyDrive::doTrack(int, bool, unsigned char*)
10002346:	83 c4 10             	add    esp,0x10
10002349:	83 ec 08             	sub    esp,0x8
1000234c:	68 00 00 00 00       	push   0x0	1000234d: R_386_32	_TEMP_trackBuffer
10002351:	68 6f 2a 00 10       	push   0x10002a6f	10002352: R_386_32	.text
10002356:	e8 fc ff ff ff       	call   10002357 <FloppyDrive::read(unsigned long long, int, void*)+0x93>	10002357: R_386_PC32	Dbg::kprintf(char const*, ...)
1000235b:	83 c4 10             	add    esp,0x10
1000235e:	83 ec 0c             	sub    esp,0xc
10002361:	68 87 2a 00 10       	push   0x10002a87	10002362: R_386_32	.text
10002366:	e8 fc ff ff ff       	call   10002367 <FloppyDrive::read(unsigned long long, int, void*)+0xa3>	10002367: R_386_PC32	Dbg::kprintf(char const*, ...)
1000236b:	83 c4 10             	add    esp,0x10
1000236e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
10002371:	48                   	dec    eax
10002372:	c1 e0 09             	shl    eax,0x9
10002375:	05 00 00 00 00       	add    eax,0x0	10002376: R_386_32	_TEMP_trackBuffer
1000237a:	83 ec 04             	sub    esp,0x4
1000237d:	68 00 02 00 00       	push   0x200
10002382:	50                   	push   eax
10002383:	ff 75 18             	push   DWORD PTR [ebp+0x18]
10002386:	e8 fc ff ff ff       	call   10002387 <FloppyDrive::read(unsigned long long, int, void*)+0xc3>	10002387: R_386_PC32	memcpy
1000238b:	83 c4 10             	add    esp,0x10
1000238e:	83 ec 0c             	sub    esp,0xc
10002391:	68 93 2a 00 10       	push   0x10002a93	10002392: R_386_32	.text
10002396:	e8 fc ff ff ff       	call   10002397 <FloppyDrive::read(unsigned long long, int, void*)+0xd3>	10002397: R_386_PC32	Dbg::kprintf(char const*, ...)
1000239b:	83 c4 10             	add    esp,0x10
1000239e:	83 ec 08             	sub    esp,0x8
100023a1:	ff 75 18             	push   DWORD PTR [ebp+0x18]
100023a4:	68 a0 2a 00 10       	push   0x10002aa0	100023a5: R_386_32	.text
100023a9:	e8 fc ff ff ff       	call   100023aa <FloppyDrive::read(unsigned long long, int, void*)+0xe6>	100023aa: R_386_PC32	Dbg::kprintf(char const*, ...)
100023ae:	83 c4 10             	add    esp,0x10
100023b1:	83 ec 0c             	sub    esp,0xc
100023b4:	68 ad 2a 00 10       	push   0x10002aad	100023b5: R_386_32	.text
100023b9:	e8 fc ff ff ff       	call   100023ba <FloppyDrive::read(unsigned long long, int, void*)+0xf6>	100023ba: R_386_PC32	Krnl::panic(char const*)
100023be:	83 c4 10             	add    esp,0x10
100023c1:	b8 00 00 00 00       	mov    eax,0x0
100023c6:	c9                   	leave  
100023c7:	c3                   	ret    

100023c8 <FloppyDrive::write(unsigned long long, int, void*)>:
100023c8:	55                   	push   ebp
100023c9:	89 e5                	mov    ebp,esp
100023cb:	83 ec 08             	sub    esp,0x8
100023ce:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100023d1:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
100023d4:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
100023d7:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
100023da:	b8 fd ff ff ff       	mov    eax,0xfffffffd
100023df:	c9                   	leave  
100023e0:	c3                   	ret    
100023e1:	90                   	nop

100023e2 <FloppyDrive::~FloppyDrive()>:
100023e2:	55                   	push   ebp
100023e3:	89 e5                	mov    ebp,esp
100023e5:	83 ec 08             	sub    esp,0x8
100023e8:	ba 08 00 00 00       	mov    edx,0x8	100023e9: R_386_32	vtable for FloppyDrive
100023ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100023f0:	89 10                	mov    DWORD PTR [eax],edx
100023f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100023f5:	83 ec 0c             	sub    esp,0xc
100023f8:	50                   	push   eax
100023f9:	e8 fc ff ff ff       	call   100023fa <FloppyDrive::~FloppyDrive()+0x18>	100023fa: R_386_PC32	PhysicalDisk::~PhysicalDisk()
100023fe:	83 c4 10             	add    esp,0x10
10002401:	90                   	nop
10002402:	c9                   	leave  
10002403:	c3                   	ret    

10002404 <FloppyDrive::~FloppyDrive()>:
10002404:	55                   	push   ebp
10002405:	89 e5                	mov    ebp,esp
10002407:	83 ec 08             	sub    esp,0x8
1000240a:	83 ec 0c             	sub    esp,0xc
1000240d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002410:	e8 fc ff ff ff       	call   10002411 <FloppyDrive::~FloppyDrive()+0xd>	10002411: R_386_PC32	FloppyDrive::~FloppyDrive()
10002415:	83 c4 10             	add    esp,0x10
10002418:	83 ec 08             	sub    esp,0x8
1000241b:	68 74 01 00 00       	push   0x174
10002420:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002423:	e8 fc ff ff ff       	call   10002424 <FloppyDrive::~FloppyDrive()+0x20>	10002424: R_386_PC32	operator delete(void*, unsigned long)
10002428:	83 c4 10             	add    esp,0x10
1000242b:	c9                   	leave  
1000242c:	c3                   	ret    
1000242d:	90                   	nop

1000242e <Floppy::~Floppy()>:
1000242e:	55                   	push   ebp
1000242f:	89 e5                	mov    ebp,esp
10002431:	83 ec 08             	sub    esp,0x8
10002434:	ba 08 00 00 00       	mov    edx,0x8	10002435: R_386_32	vtable for Floppy
10002439:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000243c:	89 10                	mov    DWORD PTR [eax],edx
1000243e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002441:	83 ec 0c             	sub    esp,0xc
10002444:	50                   	push   eax
10002445:	e8 fc ff ff ff       	call   10002446 <Floppy::~Floppy()+0x18>	10002446: R_386_PC32	HardDiskController::~HardDiskController()
1000244a:	83 c4 10             	add    esp,0x10
1000244d:	90                   	nop
1000244e:	c9                   	leave  
1000244f:	c3                   	ret    

10002450 <Floppy::~Floppy()>:
10002450:	55                   	push   ebp
10002451:	89 e5                	mov    ebp,esp
10002453:	83 ec 08             	sub    esp,0x8
10002456:	83 ec 0c             	sub    esp,0xc
10002459:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000245c:	e8 fc ff ff ff       	call   1000245d <Floppy::~Floppy()+0xd>	1000245d: R_386_PC32	Floppy::~Floppy()
10002461:	83 c4 10             	add    esp,0x10
10002464:	83 ec 08             	sub    esp,0x8
10002467:	68 b0 01 00 00       	push   0x1b0
1000246c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000246f:	e8 fc ff ff ff       	call   10002470 <Floppy::~Floppy()+0x20>	10002470: R_386_PC32	operator delete(void*, unsigned long)
10002474:	83 c4 10             	add    esp,0x10
10002477:	c9                   	leave  
10002478:	c3                   	ret    
10002479:	66 90                	xchg   ax,ax
1000247b:	90                   	nop
1000247c:	96                   	xchg   esi,eax
1000247d:	00 00                	add    BYTE PTR [eax],al
1000247f:	00 2c 01             	add    BYTE PTR [ecx+eax*1],ch
10002482:	00 00                	add    BYTE PTR [eax],al
10002484:	46                   	inc    esi
10002485:	6c                   	ins    BYTE PTR es:[edi],dx
10002486:	6f                   	outs   dx,DWORD PTR ds:[esi]
10002487:	70 70                	jo     100024f9 <Floppy::~Floppy()+0xa9>
10002489:	79 20                	jns    100024ab <Floppy::~Floppy()+0x5b>
1000248b:	44                   	inc    esp
1000248c:	69 73 6b 20 43 6f 6e 	imul   esi,DWORD PTR [ebx+0x6b],0x6e6f4320
10002493:	74 72                	je     10002507 <Floppy::~Floppy()+0xb7>
10002495:	6f                   	outs   dx,DWORD PTR ds:[esi]
10002496:	6c                   	ins    BYTE PTR es:[edi],dx
10002497:	6c                   	ins    BYTE PTR es:[edi],dx
10002498:	65 72 00             	gs jb  1000249b <Floppy::~Floppy()+0x4b>
1000249b:	00 50 52             	add    BYTE PTR [eax+0x52],dl
1000249e:	45                   	inc    ebp
1000249f:	56                   	push   esi
100024a0:	49                   	dec    ecx
100024a1:	4f                   	dec    edi
100024a2:	55                   	push   ebp
100024a3:	53                   	push   ebx
100024a4:	20 43 4f             	and    BYTE PTR [ebx+0x4f],al
100024a7:	4d                   	dec    ebp
100024a8:	4d                   	dec    ebp
100024a9:	41                   	inc    ecx
100024aa:	4e                   	dec    esi
100024ab:	44                   	inc    esp
100024ac:	20 46 41             	and    BYTE PTR [esi+0x41],al
100024af:	49                   	dec    ecx
100024b0:	4c                   	dec    esp
100024b1:	45                   	inc    ebp
100024b2:	44                   	inc    esp
100024b3:	2c 20                	sub    al,0x20
100024b5:	43                   	inc    ebx
100024b6:	41                   	inc    ecx
100024b7:	55                   	push   ebp
100024b8:	47                   	inc    edi
100024b9:	48                   	dec    eax
100024ba:	54                   	push   esp
100024bb:	20 42 59             	and    BYTE PTR [edx+0x59],al
100024be:	20 77 72             	and    BYTE PTR [edi+0x72],dh
100024c1:	69 74 65 43 6f 6d 6d 61 	imul   esi,DWORD PTR [ebp+eiz*2+0x43],0x616d6d6f
100024c9:	6e                   	outs   dx,BYTE PTR ds:[esi]
100024ca:	64 00 44 49 44       	add    BYTE PTR fs:[ecx+ecx*2+0x44],al
100024cf:	20 4e 4f             	and    BYTE PTR [esi+0x4f],cl
100024d2:	54                   	push   esp
100024d3:	20 43 48             	and    BYTE PTR [ebx+0x48],al
100024d6:	45                   	inc    ebp
100024d7:	43                   	inc    ebx
100024d8:	4b                   	dec    ebx
100024d9:	20 46 4f             	and    BYTE PTR [esi+0x4f],al
100024dc:	52                   	push   edx
100024dd:	20 46 41             	and    BYTE PTR [esi+0x41],al
100024e0:	49                   	dec    ecx
100024e1:	4c                   	dec    esp
100024e2:	55                   	push   ebp
100024e3:	52                   	push   edx
100024e4:	45                   	inc    ebp
100024e5:	20 42 45             	and    BYTE PTR [edx+0x45],al
100024e8:	46                   	inc    esi
100024e9:	4f                   	dec    edi
100024ea:	52                   	push   edx
100024eb:	45                   	inc    ebp
100024ec:	20 77 72             	and    BYTE PTR [edi+0x72],dh
100024ef:	69 74 65 43 6f 6d 6d 61 	imul   esi,DWORD PTR [ebp+eiz*2+0x43],0x616d6d6f
100024f7:	6e                   	outs   dx,BYTE PTR ds:[esi]
100024f8:	64 00 46 6c          	add    BYTE PTR fs:[esi+0x6c],al
100024fc:	6f                   	outs   dx,DWORD PTR ds:[esi]
100024fd:	70 70                	jo     1000256f <Floppy::~Floppy()+0x11f>
100024ff:	79 3a                	jns    1000253b <Floppy::~Floppy()+0xeb>
10002501:	3a 64 72 69          	cmp    ah,BYTE PTR [edx+esi*2+0x69]
10002505:	76 65                	jbe    1000256c <Floppy::~Floppy()+0x11c>
10002507:	44                   	inc    esp
10002508:	65 74 65             	gs je  10002570 <Floppy::~Floppy()+0x120>
1000250b:	63 74 69 6f          	arpl   WORD PTR [ecx+ebp*2+0x6f],si
1000250f:	6e                   	outs   dx,BYTE PTR ds:[esi]
10002510:	28 29                	sub    BYTE PTR [ecx],ch
10002512:	0a 00                	or     al,BYTE PTR [eax]
10002514:	44                   	inc    esp
10002515:	72 69                	jb     10002580 <Floppy::~Floppy()+0x130>
10002517:	76 65                	jbe    1000257e <Floppy::~Floppy()+0x12e>
10002519:	20 74 79 70          	and    BYTE PTR [ecx+edi*2+0x70],dh
1000251d:	65 20 30             	and    BYTE PTR gs:[eax],dh
10002520:	3a 20                	cmp    ah,BYTE PTR [eax]
10002522:	30 78 25             	xor    BYTE PTR [eax+0x25],bh
10002525:	58                   	pop    eax
10002526:	0a 00                	or     al,BYTE PTR [eax]
10002528:	44                   	inc    esp
10002529:	72 69                	jb     10002594 <Floppy::~Floppy()+0x144>
1000252b:	76 65                	jbe    10002592 <Floppy::~Floppy()+0x142>
1000252d:	20 74 79 70          	and    BYTE PTR [ecx+edi*2+0x70],dh
10002531:	65 20 31             	and    BYTE PTR gs:[ecx],dh
10002534:	3a 20                	cmp    ah,BYTE PTR [eax]
10002536:	30 78 25             	xor    BYTE PTR [eax+0x25],bh
10002539:	58                   	pop    eax
1000253a:	0a 00                	or     al,BYTE PTR [eax]
1000253c:	76 6f                	jbe    100025ad <Floppy::~Floppy()+0x15d>
1000253e:	69 64 20 46 6c 6f 70 70 	imul   esp,DWORD PTR [eax+eiz*1+0x46],0x70706f6c
10002546:	79 3a                	jns    10002582 <Floppy::~Floppy()+0x132>
10002548:	3a 72 65             	cmp    dh,BYTE PTR [edx+0x65]
1000254b:	73 65                	jae    100025b2 <Floppy::~Floppy()+0x162>
1000254d:	74 28                	je     10002577 <Floppy::~Floppy()+0x127>
1000254f:	29 0a                	sub    DWORD PTR [edx],ecx
10002551:	00 53 50             	add    BYTE PTR [ebx+0x50],dl
10002554:	45                   	inc    ebp
10002555:	43                   	inc    ebx
10002556:	49                   	dec    ecx
10002557:	46                   	inc    esi
10002558:	59                   	pop    ecx
10002559:	20 42 41             	and    BYTE PTR [edx+0x41],al
1000255c:	44                   	inc    esp
1000255d:	20 44 41 54          	and    BYTE PTR [ecx+eax*2+0x54],al
10002561:	41                   	inc    ecx
10002562:	52                   	push   edx
10002563:	41                   	inc    ecx
10002564:	54                   	push   esp
10002565:	45                   	inc    ebp
10002566:	00 00                	add    BYTE PTR [eax],al
10002568:	20 a1 07 00 e0 93    	and    BYTE PTR [ecx-0x6c1ffff9],ah
1000256e:	04 00                	add    al,0x0
10002570:	90                   	nop
10002571:	d0 03                	rol    BYTE PTR [ebx],1
10002573:	00 40 42             	add    BYTE PTR [eax+0x42],al
10002576:	0f 00                	(bad)  
10002578:	73 65                	jae    100025df <Floppy::~Floppy()+0x18f>
1000257a:	6c                   	ins    BYTE PTR es:[edi],dx
1000257b:	65 63 74 20 28       	arpl   WORD PTR gs:[eax+eiz*1+0x28],si
10002580:	41                   	inc    ecx
10002581:	29 2e                	sub    DWORD PTR [esi],ebp
10002583:	20 25 64 0a 00 73    	and    BYTE PTR ds:0x73000a64,ah
10002589:	65 6c                	gs ins BYTE PTR es:[edi],dx
1000258b:	65 63 74 20 28       	arpl   WORD PTR gs:[eax+eiz*1+0x28],si
10002590:	42                   	inc    edx
10002591:	29 2e                	sub    DWORD PTR [esi],ebp
10002593:	0a 00                	or     al,BYTE PTR [eax]
10002595:	73 65                	jae    100025fc <Floppy::~Floppy()+0x1ac>
10002597:	6c                   	ins    BYTE PTR es:[edi],dx
10002598:	65 63 74 20 28       	arpl   WORD PTR gs:[eax+eiz*1+0x28],si
1000259d:	43                   	inc    ebx
1000259e:	29 2e                	sub    DWORD PTR [esi],ebp
100025a0:	0a 00                	or     al,BYTE PTR [eax]
100025a2:	73 65                	jae    10002609 <Floppy::~Floppy()+0x1b9>
100025a4:	6c                   	ins    BYTE PTR es:[edi],dx
100025a5:	65 63 74 20 28       	arpl   WORD PTR gs:[eax+eiz*1+0x28],si
100025aa:	44                   	inc    esp
100025ab:	29 2e                	sub    DWORD PTR [esi],ebp
100025ad:	0a 00                	or     al,BYTE PTR [eax]
100025af:	00 55 4e             	add    BYTE PTR [ebp+0x4e],dl
100025b2:	53                   	push   ebx
100025b3:	55                   	push   ebp
100025b4:	50                   	push   eax
100025b5:	50                   	push   eax
100025b6:	4f                   	dec    edi
100025b7:	52                   	push   edx
100025b8:	54                   	push   esp
100025b9:	45                   	inc    ebp
100025ba:	44                   	inc    esp
100025bb:	20 46 4c             	and    BYTE PTR [esi+0x4c],al
100025be:	4f                   	dec    edi
100025bf:	50                   	push   eax
100025c0:	50                   	push   eax
100025c1:	59                   	pop    ecx
100025c2:	20 46 4f             	and    BYTE PTR [esi+0x4f],al
100025c5:	52                   	push   edx
100025c6:	4d                   	dec    ebp
100025c7:	41                   	inc    ecx
100025c8:	54                   	push   esp
100025c9:	20 28                	and    BYTE PTR [eax],ch
100025cb:	44                   	inc    esp
100025cc:	41                   	inc    ecx
100025cd:	54                   	push   esp
100025ce:	41                   	inc    ecx
100025cf:	52                   	push   edx
100025d0:	41                   	inc    ecx
100025d1:	54                   	push   esp
100025d2:	45                   	inc    ebp
100025d3:	20 4e 4f             	and    BYTE PTR [esi+0x4f],cl
100025d6:	54                   	push   esp
100025d7:	20 4b 4e             	and    BYTE PTR [ebx+0x4e],cl
100025da:	4f                   	dec    edi
100025db:	57                   	push   edi
100025dc:	4e                   	dec    esi
100025dd:	29 00                	sub    DWORD PTR [eax],eax
100025df:	73 65                	jae    10002646 <Floppy::~Floppy()+0x1f6>
100025e1:	6c                   	ins    BYTE PTR es:[edi],dx
100025e2:	65 63 74 20 28       	arpl   WORD PTR gs:[eax+eiz*1+0x28],si
100025e7:	45                   	inc    ebp
100025e8:	29 2e                	sub    DWORD PTR [esi],ebp
100025ea:	0a 00                	or     al,BYTE PTR [eax]
100025ec:	73 70                	jae    1000265e <Floppy::~Floppy()+0x20e>
100025ee:	65 63 69 66          	arpl   WORD PTR gs:[ecx+0x66],bp
100025f2:	69 79 20 72 65 73 65 	imul   edi,DWORD PTR [ecx+0x20],0x65736572
100025f9:	74 2e                	je     10002629 <Floppy::~Floppy()+0x1d9>
100025fb:	0a 00                	or     al,BYTE PTR [eax]
100025fd:	73 65                	jae    10002664 <Floppy::~Floppy()+0x214>
100025ff:	6c                   	ins    BYTE PTR es:[edi],dx
10002600:	65 63 74 20 28       	arpl   WORD PTR gs:[eax+eiz*1+0x28],si
10002605:	46                   	inc    esi
10002606:	29 2e                	sub    DWORD PTR [esi],ebp
10002608:	0a 00                	or     al,BYTE PTR [eax]
1000260a:	73 65                	jae    10002671 <Floppy::~Floppy()+0x221>
1000260c:	6c                   	ins    BYTE PTR es:[edi],dx
1000260d:	65 63 74 20 28       	arpl   WORD PTR gs:[eax+eiz*1+0x28],si
10002612:	46                   	inc    esi
10002613:	32 29                	xor    ch,BYTE PTR [ecx]
10002615:	2e 0a 00             	or     al,BYTE PTR cs:[eax]
10002618:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
1000261b:	69 62 72 61 74 65 20 	imul   esp,DWORD PTR [edx+0x72],0x20657461
10002622:	72 65                	jb     10002689 <Floppy::~Floppy()+0x239>
10002624:	73 65                	jae    1000268b <Floppy::~Floppy()+0x23b>
10002626:	74 2e                	je     10002656 <Floppy::~Floppy()+0x206>
10002628:	0a 00                	or     al,BYTE PTR [eax]
1000262a:	73 65                	jae    10002691 <Floppy::~Floppy()+0x241>
1000262c:	6c                   	ins    BYTE PTR es:[edi],dx
1000262d:	65 63 74 20 28       	arpl   WORD PTR gs:[eax+eiz*1+0x28],si
10002632:	47                   	inc    edi
10002633:	29 2e                	sub    DWORD PTR [esi],ebp
10002635:	0a 00                	or     al,BYTE PTR [eax]
10002637:	73 65                	jae    1000269e <Floppy::~Floppy()+0x24e>
10002639:	6c                   	ins    BYTE PTR es:[edi],dx
1000263a:	65 63 74 20 28       	arpl   WORD PTR gs:[eax+eiz*1+0x28],si
1000263f:	48                   	dec    eax
10002640:	29 2e                	sub    DWORD PTR [esi],ebp
10002642:	0a 00                	or     al,BYTE PTR [eax]
10002644:	73 65                	jae    100026ab <Floppy::~Floppy()+0x25b>
10002646:	6c                   	ins    BYTE PTR es:[edi],dx
10002647:	65 63 74 20 28       	arpl   WORD PTR gs:[eax+eiz*1+0x28],si
1000264c:	49                   	dec    ecx
1000264d:	29 2e                	sub    DWORD PTR [esi],ebp
1000264f:	0a 00                	or     al,BYTE PTR [eax]
10002651:	46                   	inc    esi
10002652:	6c                   	ins    BYTE PTR es:[edi],dx
10002653:	6f                   	outs   dx,DWORD PTR ds:[esi]
10002654:	70 70                	jo     100026c6 <Floppy::~Floppy()+0x276>
10002656:	79 3a                	jns    10002692 <Floppy::~Floppy()+0x242>
10002658:	3a 6d 6f             	cmp    ch,BYTE PTR [ebp+0x6f]
1000265b:	74 6f                	je     100026cc <Floppy::~Floppy()+0x27c>
1000265d:	72 0a                	jb     10002669 <Floppy::~Floppy()+0x219>
1000265f:	00 6e 75             	add    BYTE PTR [esi+0x75],ch
10002662:	6d                   	ins    DWORD PTR es:[edi],dx
10002663:	20 3d 20 25 64 2c    	and    BYTE PTR ds:0x2c642520,bh
10002669:	20 73 74             	and    BYTE PTR [ebx+0x74],dh
1000266c:	61                   	popa   
1000266d:	74 65                	je     100026d4 <Floppy::~Floppy()+0x284>
1000266f:	20 3d 20 25 64 0a    	and    BYTE PTR ds:0xa642520,bh
10002675:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
10002678:	61                   	popa   
10002679:	74 65                	je     100026e0 <Floppy::~Floppy()+0x290>
1000267b:	2e 0a 00             	or     al,BYTE PTR cs:[eax]
1000267e:	73 74                	jae    100026f4 <Floppy::~Floppy()+0x2a4>
10002680:	61                   	popa   
10002681:	72 74                	jb     100026f7 <Floppy::~Floppy()+0x2a7>
10002683:	69 6e 67 20 74 68 65 	imul   ebp,DWORD PTR [esi+0x67],0x65687420
1000268a:	20 6d 6f             	and    BYTE PTR [ebp+0x6f],ch
1000268d:	74 6f                	je     100026fe <Floppy::~Floppy()+0x2ae>
1000268f:	72 2e                	jb     100026bf <Floppy::~Floppy()+0x26f>
10002691:	0a 00                	or     al,BYTE PTR [eax]
10002693:	64 6f                	outs   dx,DWORD PTR fs:[esi]
10002695:	72 20                	jb     100026b7 <Floppy::~Floppy()+0x267>
10002697:	31 20                	xor    DWORD PTR [eax],esp
10002699:	3d 20 30 78 25       	cmp    eax,0x25783020
1000269e:	58                   	pop    eax
1000269f:	0a 00                	or     al,BYTE PTR [eax]
100026a1:	64 6f                	outs   dx,DWORD PTR fs:[esi]
100026a3:	72 20                	jb     100026c5 <Floppy::~Floppy()+0x275>
100026a5:	32 20                	xor    ah,BYTE PTR [eax]
100026a7:	3d 20 30 78 25       	cmp    eax,0x25783020
100026ac:	58                   	pop    eax
100026ad:	0a 00                	or     al,BYTE PTR [eax]
100026af:	6d                   	ins    DWORD PTR es:[edi],dx
100026b0:	6f                   	outs   dx,DWORD PTR ds:[esi]
100026b1:	74 6f                	je     10002722 <Floppy::~Floppy()+0x2d2>
100026b3:	72 20                	jb     100026d5 <Floppy::~Floppy()+0x285>
100026b5:	61                   	popa   
100026b6:	67 61                	addr16 popa 
100026b8:	69 6e 2e 0a 00 6d 6f 	imul   ebp,DWORD PTR [esi+0x2e],0x6f6d000a
100026bf:	74 6f                	je     10002730 <Floppy::~Floppy()+0x2e0>
100026c1:	72 20                	jb     100026e3 <Floppy::~Floppy()+0x293>
100026c3:	61                   	popa   
100026c4:	67 61                	addr16 popa 
100026c6:	69 6e 20 32 2e 0a 00 	imul   ebp,DWORD PTR [esi+0x20],0xa2e32
100026cd:	6d                   	ins    DWORD PTR es:[edi],dx
100026ce:	6f                   	outs   dx,DWORD PTR ds:[esi]
100026cf:	74 6f                	je     10002740 <Floppy::~Floppy()+0x2f0>
100026d1:	72 20                	jb     100026f3 <Floppy::~Floppy()+0x2a3>
100026d3:	61                   	popa   
100026d4:	67 61                	addr16 popa 
100026d6:	69 6e 20 33 2e 0a 00 	imul   ebp,DWORD PTR [esi+0x20],0xa2e33
100026dd:	6d                   	ins    DWORD PTR es:[edi],dx
100026de:	6f                   	outs   dx,DWORD PTR ds:[esi]
100026df:	74 6f                	je     10002750 <Floppy::~Floppy()+0x300>
100026e1:	72 20                	jb     10002703 <Floppy::~Floppy()+0x2b3>
100026e3:	61                   	popa   
100026e4:	67 61                	addr16 popa 
100026e6:	69 6e 20 34 2e 0a 00 	imul   ebp,DWORD PTR [esi+0x20],0xa2e34
100026ed:	6d                   	ins    DWORD PTR es:[edi],dx
100026ee:	6f                   	outs   dx,DWORD PTR ds:[esi]
100026ef:	74 6f                	je     10002760 <Floppy::~Floppy()+0x310>
100026f1:	72 20                	jb     10002713 <Floppy::~Floppy()+0x2c3>
100026f3:	61                   	popa   
100026f4:	67 61                	addr16 popa 
100026f6:	69 6e 20 35 2e 0a 00 	imul   ebp,DWORD PTR [esi+0x20],0xa2e35
100026fd:	6d                   	ins    DWORD PTR es:[edi],dx
100026fe:	6f                   	outs   dx,DWORD PTR ds:[esi]
100026ff:	74 6f                	je     10002770 <Floppy::~Floppy()+0x320>
10002701:	72 20                	jb     10002723 <Floppy::~Floppy()+0x2d3>
10002703:	61                   	popa   
10002704:	67 61                	addr16 popa 
10002706:	69 6e 20 36 2e 0a 00 	imul   ebp,DWORD PTR [esi+0x20],0xa2e36
1000270d:	46                   	inc    esi
1000270e:	6c                   	ins    BYTE PTR es:[edi],dx
1000270f:	6f                   	outs   dx,DWORD PTR ds:[esi]
10002710:	70 70                	jo     10002782 <Floppy::~Floppy()+0x332>
10002712:	79 3a                	jns    1000274e <Floppy::~Floppy()+0x2fe>
10002714:	3a 6d 6f             	cmp    ch,BYTE PTR [ebp+0x6f]
10002717:	74 6f                	je     10002788 <Floppy::~Floppy()+0x338>
10002719:	72 20                	jb     1000273b <Floppy::~Floppy()+0x2eb>
1000271b:	64 6f                	outs   dx,DWORD PTR fs:[esi]
1000271d:	6e                   	outs   dx,BYTE PTR ds:[esi]
1000271e:	65 2e 0a 00          	gs or  al,BYTE PTR cs:[eax]
10002722:	46                   	inc    esi
10002723:	6c                   	ins    BYTE PTR es:[edi],dx
10002724:	6f                   	outs   dx,DWORD PTR ds:[esi]
10002725:	70 70                	jo     10002797 <Floppy::~Floppy()+0x347>
10002727:	79 20                	jns    10002749 <Floppy::~Floppy()+0x2f9>
10002729:	44                   	inc    esp
1000272a:	69 73 6b 20 44 72 69 	imul   esi,DWORD PTR [ebx+0x6b],0x69724420
10002731:	76 65                	jbe    10002798 <Floppy::~Floppy()+0x348>
10002733:	00 46 6c             	add    BYTE PTR [esi+0x6c],al
10002736:	6f                   	outs   dx,DWORD PTR ds:[esi]
10002737:	70 70                	jo     100027a9 <Floppy::~Floppy()+0x359>
10002739:	79 44                	jns    1000277f <Floppy::~Floppy()+0x32f>
1000273b:	72 69                	jb     100027a6 <Floppy::~Floppy()+0x356>
1000273d:	76 65                	jbe    100027a4 <Floppy::~Floppy()+0x354>
1000273f:	3a 3a                	cmp    bh,BYTE PTR [edx]
10002741:	6d                   	ins    DWORD PTR es:[edi],dx
10002742:	6f                   	outs   dx,DWORD PTR ds:[esi]
10002743:	74 6f                	je     100027b4 <Floppy::~Floppy()+0x364>
10002745:	72 4f                	jb     10002796 <Floppy::~Floppy()+0x346>
10002747:	6e                   	outs   dx,BYTE PTR ds:[esi]
10002748:	20 6e 75             	and    BYTE PTR [esi+0x75],ch
1000274b:	6d                   	ins    DWORD PTR es:[edi],dx
1000274c:	20 3d 20 25 64 0a    	and    BYTE PTR ds:0xa642520,bh
10002752:	00 6e 75             	add    BYTE PTR [esi+0x75],ch
10002755:	6d                   	ins    DWORD PTR es:[edi],dx
10002756:	20 3d 20 25 64 0a    	and    BYTE PTR ds:0xa642520,bh
1000275c:	00 73 69             	add    BYTE PTR [ebx+0x69],dh
1000275f:	7a 65                	jp     100027c6 <Floppy::~Floppy()+0x376>
10002761:	20 69 6e             	and    BYTE PTR [ecx+0x6e],ch
10002764:	20 4b 42             	and    BYTE PTR [ebx+0x42],cl
10002767:	73 20                	jae    10002789 <Floppy::~Floppy()+0x339>
10002769:	3d 20 25 64 0a       	cmp    eax,0xa642520
1000276e:	00 46 6c             	add    BYTE PTR [esi+0x6c],al
10002771:	6f                   	outs   dx,DWORD PTR ds:[esi]
10002772:	70 70                	jo     100027e4 <Floppy::~Floppy()+0x394>
10002774:	79 44                	jns    100027ba <Floppy::~Floppy()+0x36a>
10002776:	72 69                	jb     100027e1 <Floppy::~Floppy()+0x391>
10002778:	76 65                	jbe    100027df <Floppy::~Floppy()+0x38f>
1000277a:	3a 3a                	cmp    bh,BYTE PTR [edx]
1000277c:	5f                   	pop    edi
1000277d:	6f                   	outs   dx,DWORD PTR ds:[esi]
1000277e:	70 65                	jo     100027e5 <Floppy::~Floppy()+0x395>
10002780:	6e                   	outs   dx,BYTE PTR ds:[esi]
10002781:	20 31                	and    BYTE PTR [ecx],dh
10002783:	0a 00                	or     al,BYTE PTR [eax]
10002785:	46                   	inc    esi
10002786:	6c                   	ins    BYTE PTR es:[edi],dx
10002787:	6f                   	outs   dx,DWORD PTR ds:[esi]
10002788:	70 70                	jo     100027fa <Floppy::~Floppy()+0x3aa>
1000278a:	79 44                	jns    100027d0 <Floppy::~Floppy()+0x380>
1000278c:	72 69                	jb     100027f7 <Floppy::~Floppy()+0x3a7>
1000278e:	76 65                	jbe    100027f5 <Floppy::~Floppy()+0x3a5>
10002790:	3a 3a                	cmp    bh,BYTE PTR [edx]
10002792:	5f                   	pop    edi
10002793:	6f                   	outs   dx,DWORD PTR ds:[esi]
10002794:	70 65                	jo     100027fb <Floppy::~Floppy()+0x3ab>
10002796:	6e                   	outs   dx,BYTE PTR ds:[esi]
10002797:	20 32                	and    BYTE PTR [edx],dh
10002799:	0a 00                	or     al,BYTE PTR [eax]
1000279b:	46                   	inc    esi
1000279c:	6c                   	ins    BYTE PTR es:[edi],dx
1000279d:	6f                   	outs   dx,DWORD PTR ds:[esi]
1000279e:	70 70                	jo     10002810 <Floppy::~Floppy()+0x3c0>
100027a0:	79 44                	jns    100027e6 <Floppy::~Floppy()+0x396>
100027a2:	72 69                	jb     1000280d <Floppy::~Floppy()+0x3bd>
100027a4:	76 65                	jbe    1000280b <Floppy::~Floppy()+0x3bb>
100027a6:	3a 3a                	cmp    bh,BYTE PTR [edx]
100027a8:	5f                   	pop    edi
100027a9:	6f                   	outs   dx,DWORD PTR ds:[esi]
100027aa:	70 65                	jo     10002811 <Floppy::~Floppy()+0x3c1>
100027ac:	6e                   	outs   dx,BYTE PTR ds:[esi]
100027ad:	20 33                	and    BYTE PTR [ebx],dh
100027af:	0a 00                	or     al,BYTE PTR [eax]
100027b1:	46                   	inc    esi
100027b2:	6c                   	ins    BYTE PTR es:[edi],dx
100027b3:	6f                   	outs   dx,DWORD PTR ds:[esi]
100027b4:	70 70                	jo     10002826 <Floppy::~Floppy()+0x3d6>
100027b6:	79 44                	jns    100027fc <Floppy::~Floppy()+0x3ac>
100027b8:	72 69                	jb     10002823 <Floppy::~Floppy()+0x3d3>
100027ba:	76 65                	jbe    10002821 <Floppy::~Floppy()+0x3d1>
100027bc:	3a 3a                	cmp    bh,BYTE PTR [edx]
100027be:	73 65                	jae    10002825 <Floppy::~Floppy()+0x3d5>
100027c0:	6c                   	ins    BYTE PTR es:[edi],dx
100027c1:	65 63 74 0a 00       	arpl   WORD PTR gs:[edx+ecx*1+0x0],si
100027c6:	00 00                	add    BYTE PTR [eax],al
100027c8:	73 65                	jae    1000282f <Floppy::~Floppy()+0x3df>
100027ca:	6c                   	ins    BYTE PTR es:[edi],dx
100027cb:	65 63 74 69 6f       	arpl   WORD PTR gs:[ecx+ebp*2+0x6f],si
100027d0:	6e                   	outs   dx,BYTE PTR ds:[esi]
100027d1:	20 6c 6f 63          	and    BYTE PTR [edi+ebp*2+0x63],ch
100027d5:	6b 65 64 20          	imul   esp,DWORD PTR [ebp+0x64],0x20
100027d9:	6f                   	outs   dx,DWORD PTR ds:[esi]
100027da:	72 20                	jb     100027fc <Floppy::~Floppy()+0x3ac>
100027dc:	66 61                	popaw  
100027de:	69 6c 65 64 2e 2e 2e 0a 	imul   ebp,DWORD PTR [ebp+eiz*2+0x64],0xa2e2e2e
100027e6:	00 00                	add    BYTE PTR [eax],al
100027e8:	73 65                	jae    1000284f <Floppy::~Floppy()+0x3ff>
100027ea:	65 6b 3a 20          	imul   edi,DWORD PTR gs:[edx],0x20
100027ee:	35 20 72 65 74       	xor    eax,0x74657220
100027f3:	72 69                	jb     1000285e <Floppy::~Floppy()+0x40e>
100027f5:	65 73 2c             	gs jae 10002824 <Floppy::~Floppy()+0x3d4>
100027f8:	20 63 6f             	and    BYTE PTR [ebx+0x6f],ah
100027fb:	75 6c                	jne    10002869 <Floppy::~Floppy()+0x419>
100027fd:	64 20 6e 6f          	and    BYTE PTR fs:[esi+0x6f],ch
10002801:	74 20                	je     10002823 <Floppy::~Floppy()+0x3d3>
10002803:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
10002806:	69 62 72 61 74 65 2e 	imul   esp,DWORD PTR [edx+0x72],0x2e657461
1000280d:	0a 00                	or     al,BYTE PTR [eax]
1000280f:	73 65                	jae    10002876 <Floppy::~Floppy()+0x426>
10002811:	65 6b 20 28          	imul   esp,DWORD PTR gs:[eax],0x28
10002815:	73 65                	jae    1000287c <Floppy::~Floppy()+0x42c>
10002817:	6c                   	ins    BYTE PTR es:[edi],dx
10002818:	29 20                	sub    DWORD PTR [eax],esp
1000281a:	25 64 2e 0a 00       	and    eax,0xa2e64
1000281f:	73 65                	jae    10002886 <Floppy::~Floppy()+0x436>
10002821:	65 6b 20 28          	imul   esp,DWORD PTR gs:[eax],0x28
10002825:	6f                   	outs   dx,DWORD PTR ds:[esi]
10002826:	6e                   	outs   dx,BYTE PTR ds:[esi]
10002827:	29 20                	sub    DWORD PTR [eax],esp
10002829:	25 64 2e 0a 00       	and    eax,0xa2e64
1000282e:	73 65                	jae    10002895 <Floppy::~Floppy()+0x445>
10002830:	65 6b 20 28          	imul   esp,DWORD PTR gs:[eax],0x28
10002834:	31 29                	xor    DWORD PTR [ecx],ebp
10002836:	2e 0a 00             	or     al,BYTE PTR cs:[eax]
10002839:	73 65                	jae    100028a0 <Floppy::~Floppy()+0x450>
1000283b:	65 6b 20 28          	imul   esp,DWORD PTR gs:[eax],0x28
1000283f:	61                   	popa   
10002840:	61                   	popa   
10002841:	29 2e                	sub    DWORD PTR [esi],ebp
10002843:	0a 00                	or     al,BYTE PTR [eax]
10002845:	73 65                	jae    100028ac <Floppy::~Floppy()+0x45c>
10002847:	65 6b 20 28          	imul   esp,DWORD PTR gs:[eax],0x28
1000284b:	62 62 29             	bound  esp,QWORD PTR [edx+0x29]
1000284e:	2e 0a 00             	or     al,BYTE PTR cs:[eax]
10002851:	73 65                	jae    100028b8 <Floppy::~Floppy()+0x468>
10002853:	65 6b 20 28          	imul   esp,DWORD PTR gs:[eax],0x28
10002857:	32 29                	xor    ch,BYTE PTR [ecx]
10002859:	2e 0a 00             	or     al,BYTE PTR cs:[eax]
1000285c:	73 65                	jae    100028c3 <Floppy::~Floppy()+0x473>
1000285e:	65 6b 20 28          	imul   esp,DWORD PTR gs:[eax],0x28
10002862:	33 29                	xor    ebp,DWORD PTR [ecx]
10002864:	2e 0a 00             	or     al,BYTE PTR cs:[eax]
10002867:	73 65                	jae    100028ce <Floppy::~Floppy()+0x47e>
10002869:	65 6b 20 28          	imul   esp,DWORD PTR gs:[eax],0x28
1000286d:	34 29                	xor    al,0x29
1000286f:	2e 0a 00             	or     al,BYTE PTR cs:[eax]
10002872:	73 65                	jae    100028d9 <Floppy::~Floppy()+0x489>
10002874:	65 6b 20 28          	imul   esp,DWORD PTR gs:[eax],0x28
10002878:	6e                   	outs   dx,BYTE PTR ds:[esi]
10002879:	69 72 71 29 2e 0a 00 	imul   esi,DWORD PTR [edx+0x71],0xa2e29
10002880:	73 65                	jae    100028e7 <Floppy::~Floppy()+0x497>
10002882:	65 6b 20 28          	imul   esp,DWORD PTR gs:[eax],0x28
10002886:	35 29 2e 0a 00       	xor    eax,0xa2e29
1000288b:	73 65                	jae    100028f2 <Floppy::~Floppy()+0x4a2>
1000288d:	65 6b 20 28          	imul   esp,DWORD PTR gs:[eax],0x28
10002891:	73 69                	jae    100028fc <Floppy::~Floppy()+0x4ac>
10002893:	64 29 2e             	sub    DWORD PTR fs:[esi],ebp
10002896:	0a 00                	or     al,BYTE PTR [eax]
10002898:	73 65                	jae    100028ff <Floppy::~Floppy()+0x4af>
1000289a:	65 6b 20 28          	imul   esp,DWORD PTR gs:[eax],0x28
1000289e:	6f                   	outs   dx,DWORD PTR ds:[esi]
1000289f:	66 66 29 2e          	data16 sub WORD PTR [esi],bp
100028a3:	0a 00                	or     al,BYTE PTR [eax]
100028a5:	73 65                	jae    1000290c <Floppy::~Floppy()+0x4bc>
100028a7:	65 6b 20 28          	imul   esp,DWORD PTR gs:[eax],0x28
100028ab:	75 6e                	jne    1000291b <Floppy::~Floppy()+0x4cb>
100028ad:	29 2e                	sub    DWORD PTR [esi],ebp
100028af:	0a 00                	or     al,BYTE PTR [eax]
100028b1:	00 00                	add    BYTE PTR [eax],al
100028b3:	00 63 61             	add    BYTE PTR [ebx+0x61],ah
100028b6:	6c                   	ins    BYTE PTR es:[edi],dx
100028b7:	69 62 72 61 74 65 3a 	imul   esp,DWORD PTR [edx+0x72],0x3a657461
100028be:	20 35 20 72 65 74    	and    BYTE PTR ds:0x74657220,dh
100028c4:	72 69                	jb     1000292f <Floppy::~Floppy()+0x4df>
100028c6:	65 73 2c             	gs jae 100028f5 <Floppy::~Floppy()+0x4a5>
100028c9:	20 63 6f             	and    BYTE PTR [ebx+0x6f],ah
100028cc:	75 6c                	jne    1000293a <Floppy::~Floppy()+0x4ea>
100028ce:	64 20 6e 6f          	and    BYTE PTR fs:[esi+0x6f],ch
100028d2:	74 20                	je     100028f4 <Floppy::~Floppy()+0x4a4>
100028d4:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
100028d7:	69 62 72 61 74 65 2e 	imul   esp,DWORD PTR [edx+0x72],0x2e657461
100028de:	0a 00                	or     al,BYTE PTR [eax]
100028e0:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
100028e3:	20 28                	and    BYTE PTR [eax],ch
100028e5:	6f                   	outs   dx,DWORD PTR ds:[esi]
100028e6:	6e                   	outs   dx,BYTE PTR ds:[esi]
100028e7:	29 2c 20             	sub    DWORD PTR [eax+eiz*1],ebp
100028ea:	25 64 0a 00 63       	and    eax,0x63000a64
100028ef:	61                   	popa   
100028f0:	6c                   	ins    BYTE PTR es:[edi],dx
100028f1:	20 28                	and    BYTE PTR [eax],ch
100028f3:	30 29                	xor    BYTE PTR [ecx],ch
100028f5:	0a 00                	or     al,BYTE PTR [eax]
100028f7:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
100028fa:	20 28                	and    BYTE PTR [eax],ch
100028fc:	31 29                	xor    DWORD PTR [ecx],ebp
100028fe:	0a 00                	or     al,BYTE PTR [eax]
10002900:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
10002903:	20 28                	and    BYTE PTR [eax],ch
10002905:	32 29                	xor    ch,BYTE PTR [ecx]
10002907:	0a 00                	or     al,BYTE PTR [eax]
10002909:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
1000290c:	20 28                	and    BYTE PTR [eax],ch
1000290e:	33 29                	xor    ebp,DWORD PTR [ecx]
10002910:	0a 00                	or     al,BYTE PTR [eax]
10002912:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
10002915:	20 28                	and    BYTE PTR [eax],ch
10002917:	34 29                	xor    al,0x29
10002919:	0a 00                	or     al,BYTE PTR [eax]
1000291b:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
1000291e:	20 28                	and    BYTE PTR [eax],ch
10002920:	35 29 0a 00 57       	xor    eax,0x57000a29
10002925:	52                   	push   edx
10002926:	49                   	dec    ecx
10002927:	54                   	push   esp
10002928:	45                   	inc    ebp
10002929:	3a 20                	cmp    ah,BYTE PTR [eax]
1000292b:	4e                   	dec    esi
1000292c:	45                   	inc    ebp
1000292d:	45                   	inc    ebp
1000292e:	44                   	inc    esp
1000292f:	20 54 4f 20          	and    BYTE PTR [edi+ecx*2+0x20],dl
10002933:	43                   	inc    ebx
10002934:	4f                   	dec    edi
10002935:	50                   	push   eax
10002936:	59                   	pop    ecx
10002937:	20 44 41 54          	and    BYTE PTR [ecx+eax*2+0x54],al
1000293b:	41                   	inc    ecx
1000293c:	20 54 4f 20          	and    BYTE PTR [edi+ecx*2+0x20],dl
10002940:	44                   	inc    esp
10002941:	4d                   	dec    ebp
10002942:	41                   	inc    ecx
10002943:	20 42 55             	and    BYTE PTR [edx+0x55],al
10002946:	46                   	inc    esi
10002947:	46                   	inc    esi
10002948:	45                   	inc    ebp
10002949:	52                   	push   edx
1000294a:	00 20                	add    BYTE PTR [eax],ah
1000294c:	72 65                	jb     100029b3 <Floppy::~Floppy()+0x563>
1000294e:	74 72                	je     100029c2 <Floppy::~Floppy()+0x572>
10002950:	79 3a                	jns    1000298c <Floppy::~Floppy()+0x53c>
10002952:	20 0a                	and    BYTE PTR [edx],cl
10002954:	00 41 62             	add    BYTE PTR [ecx+0x62],al
10002957:	6f                   	outs   dx,DWORD PTR ds:[esi]
10002958:	75 74                	jne    100029ce <Floppy::~Floppy()+0x57e>
1000295a:	20 74 6f 20          	and    BYTE PTR [edi+ebp*2+0x20],dh
1000295e:	73 65                	jae    100029c5 <Floppy::~Floppy()+0x575>
10002960:	65 6b 2e 0a          	imul   ebp,DWORD PTR gs:[esi],0xa
10002964:	00 53 65             	add    BYTE PTR [ebx+0x65],dl
10002967:	65 6b 20 64          	imul   esp,DWORD PTR gs:[eax],0x64
1000296b:	6f                   	outs   dx,DWORD PTR ds:[esi]
1000296c:	6e                   	outs   dx,BYTE PTR ds:[esi]
1000296d:	65 2e 0a 00          	gs or  al,BYTE PTR cs:[eax]
10002971:	4d                   	dec    ebp
10002972:	6f                   	outs   dx,DWORD PTR ds:[esi]
10002973:	74 6f                	je     100029e4 <Floppy::~Floppy()+0x594>
10002975:	72 20                	jb     10002997 <Floppy::~Floppy()+0x547>
10002977:	6f                   	outs   dx,DWORD PTR ds:[esi]
10002978:	6e                   	outs   dx,BYTE PTR ds:[esi]
10002979:	2e 0a 00             	or     al,BYTE PTR cs:[eax]
1000297c:	53                   	push   ebx
1000297d:	65 6c                	gs ins BYTE PTR es:[edi],dx
1000297f:	65 63 74 65 64       	arpl   WORD PTR gs:[ebp+eiz*2+0x64],si
10002984:	2e 0a 00             	or     al,BYTE PTR cs:[eax]
10002987:	44                   	inc    esp
10002988:	4d                   	dec    ebp
10002989:	41                   	inc    ecx
1000298a:	20 69 6e             	and    BYTE PTR [ecx+0x6e],ch
1000298d:	69 74 27 64 2e 0a 00 73 	imul   esi,DWORD PTR [edi+eiz*1+0x64],0x73000a2e
10002995:	6c                   	ins    BYTE PTR es:[edi],dx
10002996:	65 65 70 20          	gs gs jo 100029ba <Floppy::~Floppy()+0x56a>
1000299a:	64 6f                	outs   dx,DWORD PTR fs:[esi]
1000299c:	6e                   	outs   dx,BYTE PTR ds:[esi]
1000299d:	65 0a 00             	or     al,BYTE PTR gs:[eax]
100029a0:	61                   	popa   
100029a1:	62 6f 75             	bound  ebp,QWORD PTR [edi+0x75]
100029a4:	74 20                	je     100029c6 <Floppy::~Floppy()+0x576>
100029a6:	74 6f                	je     10002a17 <Floppy::~Floppy()+0x5c7>
100029a8:	20 77 61             	and    BYTE PTR [edi+0x61],dh
100029ab:	69 74 49 52 51 2e 0a 00 	imul   esi,DWORD PTR [ecx+ecx*2+0x52],0xa2e51
100029b3:	6e                   	outs   dx,BYTE PTR ds:[esi]
100029b4:	6f                   	outs   dx,DWORD PTR ds:[esi]
100029b5:	20 49 52             	and    BYTE PTR [ecx+0x52],cl
100029b8:	51                   	push   ecx
100029b9:	2e 0a 00             	or     al,BYTE PTR cs:[eax]
100029bc:	67 6f                	outs   dx,DWORD PTR ds:[si]
100029be:	74 20                	je     100029e0 <Floppy::~Floppy()+0x590>
100029c0:	49                   	dec    ecx
100029c1:	52                   	push   edx
100029c2:	51                   	push   ecx
100029c3:	2e 0a 00             	or     al,BYTE PTR cs:[eax]
100029c6:	66 61                	popaw  
100029c8:	69 6c 75 72 65 20 72 65 	imul   ebp,DWORD PTR [ebp+esi*2+0x72],0x65722065
100029d0:	61                   	popa   
100029d1:	64 69 6e 67 20 73 74 61 	imul   ebp,DWORD PTR fs:[esi+0x67],0x61747320
100029d9:	74 75                	je     10002a50 <Floppy::~Floppy()+0x600>
100029db:	73 2e                	jae    10002a0b <Floppy::~Floppy()+0x5bb>
100029dd:	0a 00                	or     al,BYTE PTR [eax]
100029df:	72 65                	jb     10002a46 <Floppy::~Floppy()+0x5f6>
100029e1:	61                   	popa   
100029e2:	64 20 72 65          	and    BYTE PTR fs:[edx+0x65],dh
100029e6:	73 75                	jae    10002a5d <Floppy::~Floppy()+0x60d>
100029e8:	6c                   	ins    BYTE PTR es:[edi],dx
100029e9:	74 20                	je     10002a0b <Floppy::~Floppy()+0x5bb>
100029eb:	62 79 74             	bound  edi,QWORD PTR [ecx+0x74]
100029ee:	65 73 2e             	gs jae 10002a1f <Floppy::~Floppy()+0x5cf>
100029f1:	0a 00                	or     al,BYTE PTR [eax]
100029f3:	6d                   	ins    DWORD PTR es:[edi],dx
100029f4:	6f                   	outs   dx,DWORD PTR ds:[esi]
100029f5:	74 6f                	je     10002a66 <Floppy::~Floppy()+0x616>
100029f7:	72 20                	jb     10002a19 <Floppy::~Floppy()+0x5c9>
100029f9:	6f                   	outs   dx,DWORD PTR ds:[esi]
100029fa:	66 66 0a 00          	data16 data16 or al,BYTE PTR [eax]
100029fe:	75 6e                	jne    10002a6e <Floppy::~Floppy()+0x61e>
10002a00:	73 65                	jae    10002a67 <Floppy::~Floppy()+0x617>
10002a02:	6c                   	ins    BYTE PTR es:[edi],dx
10002a03:	65 63 74 2e 0a       	arpl   WORD PTR gs:[esi+ebp*1+0xa],si
10002a08:	00 61 62             	add    BYTE PTR [ecx+0x62],ah
10002a0b:	6f                   	outs   dx,DWORD PTR ds:[esi]
10002a0c:	75 74                	jne    10002a82 <Floppy::~Floppy()+0x632>
10002a0e:	20 74 6f 20          	and    BYTE PTR [edi+ebp*2+0x20],dh
10002a12:	6d                   	ins    DWORD PTR es:[edi],dx
10002a13:	65 6d                	gs ins DWORD PTR es:[edi],dx
10002a15:	63 70 79             	arpl   WORD PTR [eax+0x79],si
10002a18:	2e 0a 00             	or     al,BYTE PTR cs:[eax]
10002a1b:	64 6f                	outs   dx,DWORD PTR fs:[esi]
10002a1d:	6e                   	outs   dx,BYTE PTR ds:[esi]
10002a1e:	65 20 6d 65          	and    BYTE PTR gs:[ebp+0x65],ch
10002a22:	6d                   	ins    DWORD PTR es:[edi],dx
10002a23:	63 70 79             	arpl   WORD PTR [eax+0x79],si
10002a26:	2e 0a 00             	or     al,BYTE PTR cs:[eax]
10002a29:	66 6c                	data16 ins BYTE PTR es:[edi],dx
10002a2b:	6f                   	outs   dx,DWORD PTR ds:[esi]
10002a2c:	70 70                	jo     10002a9e <Floppy::~Floppy()+0x64e>
10002a2e:	79 20                	jns    10002a50 <Floppy::~Floppy()+0x600>
10002a30:	63 6f 75             	arpl   WORD PTR [edi+0x75],bp
10002a33:	6e                   	outs   dx,BYTE PTR ds:[esi]
10002a34:	74 20                	je     10002a56 <Floppy::~Floppy()+0x606>
10002a36:	6e                   	outs   dx,BYTE PTR ds:[esi]
10002a37:	6f                   	outs   dx,DWORD PTR ds:[esi]
10002a38:	74 20                	je     10002a5a <Floppy::~Floppy()+0x60a>
10002a3a:	31 00                	xor    DWORD PTR [eax],eax
10002a3c:	46                   	inc    esi
10002a3d:	6c                   	ins    BYTE PTR es:[edi],dx
10002a3e:	6f                   	outs   dx,DWORD PTR ds:[esi]
10002a3f:	70 70                	jo     10002ab1 <Floppy::~Floppy()+0x661>
10002a41:	79 44                	jns    10002a87 <Floppy::~Floppy()+0x637>
10002a43:	72 69                	jb     10002aae <Floppy::~Floppy()+0x65e>
10002a45:	76 65                	jbe    10002aac <Floppy::~Floppy()+0x65c>
10002a47:	3a 3a                	cmp    bh,BYTE PTR [edx]
10002a49:	72 65                	jb     10002ab0 <Floppy::~Floppy()+0x660>
10002a4b:	61                   	popa   
10002a4c:	64 20 63 61          	and    BYTE PTR fs:[ebx+0x61],ah
10002a50:	6c                   	ins    BYTE PTR es:[edi],dx
10002a51:	6c                   	ins    BYTE PTR es:[edi],dx
10002a52:	65 64 2e 0a 00       	gs fs or al,BYTE PTR cs:[eax]
10002a57:	43                   	inc    ebx
10002a58:	20 30                	and    BYTE PTR [eax],dh
10002a5a:	78 25                	js     10002a81 <Floppy::~Floppy()+0x631>
10002a5c:	58                   	pop    eax
10002a5d:	2c 20                	sub    al,0x20
10002a5f:	48                   	dec    eax
10002a60:	20 30                	and    BYTE PTR [eax],dh
10002a62:	78 25                	js     10002a89 <Floppy::~Floppy()+0x639>
10002a64:	58                   	pop    eax
10002a65:	2c 20                	sub    al,0x20
10002a67:	53                   	push   ebx
10002a68:	20 30                	and    BYTE PTR [eax],dh
10002a6a:	78 25                	js     10002a91 <Floppy::~Floppy()+0x641>
10002a6c:	58                   	pop    eax
10002a6d:	0a 00                	or     al,BYTE PTR [eax]
10002a6f:	72 65                	jb     10002ad6 <vtable for FloppyDrive+0x1a>
10002a71:	61                   	popa   
10002a72:	64 20 62 75          	and    BYTE PTR fs:[edx+0x75],ah
10002a76:	66 66 65 72 20       	data16 data16 gs jb 10002a9b <Floppy::~Floppy()+0x64b>
10002a7b:	68 65 72 65 3a       	push   0x3a657265
10002a80:	20 30                	and    BYTE PTR [eax],dh
10002a82:	78 25                	js     10002aa9 <Floppy::~Floppy()+0x659>
10002a84:	58                   	pop    eax
10002a85:	0a 00                	or     al,BYTE PTR [eax]
10002a87:	64 69 64 20 74 72 61 63 6b 	imul   esp,DWORD PTR fs:[eax+eiz*1+0x74],0x6b636172
10002a90:	2e 0a 00             	or     al,BYTE PTR cs:[eax]
10002a93:	64 69 64 20 6d 65 6d 63 70 	imul   esp,DWORD PTR fs:[eax+eiz*1+0x6d],0x70636d65
10002a9c:	79 2e                	jns    10002acc <vtable for FloppyDrive+0x10>
10002a9e:	0a 00                	or     al,BYTE PTR [eax]
10002aa0:	70 74                	jo     10002b16 <vtable for Floppy+0x22>
10002aa2:	72 20                	jb     10002ac4 <vtable for FloppyDrive+0x8>
10002aa4:	3d 20 30 78 25       	cmp    eax,0x25783020
10002aa9:	58                   	pop    eax
10002aaa:	2e 0a 00             	or     al,BYTE PTR cs:[eax]
10002aad:	52                   	push   edx
10002aae:	45                   	inc    ebp
10002aaf:	41                   	inc    ecx
10002ab0:	44                   	inc    esp
10002ab1:	20 42 55             	and    BYTE PTR [edx+0x55],al
10002ab4:	46                   	inc    esi
10002ab5:	46                   	inc    esi
10002ab6:	45                   	inc    ebp
10002ab7:	52                   	push   edx
10002ab8:	53                   	push   ebx
10002ab9:	2e 0a 00             	or     al,BYTE PTR cs:[eax]

10002abc <vtable for FloppyDrive>:
	...
	10002ac4: R_386_32	FloppyDrive::~FloppyDrive()
	10002ac8: R_386_32	FloppyDrive::~FloppyDrive()
	10002acc: R_386_32	FloppyDrive::open(int, int, void*)
	10002ad0: R_386_32	FloppyDrive::close(int, int, void*)
	10002ad4: R_386_32	Device::hibernate()
	10002ad8: R_386_32	Device::wake()
	10002adc: R_386_32	Device::detect()
	10002ae0: R_386_32	Device::disableLegacy()
	10002ae4: R_386_32	Device::powerSaving(PowerSavingLevel)
	10002ae8: R_386_32	PhysicalDisk::eject()
	10002aec: R_386_32	FloppyDrive::read(unsigned long long, int, void*)
	10002af0: R_386_32	FloppyDrive::write(unsigned long long, int, void*)

10002af4 <vtable for Floppy>:
	...
	10002afc: R_386_32	Floppy::~Floppy()
	10002b00: R_386_32	Floppy::~Floppy()
	10002b04: R_386_32	Floppy::open(int, int, void*)
	10002b08: R_386_32	Floppy::close(int, int, void*)
	10002b0c: R_386_32	Device::hibernate()
	10002b10: R_386_32	Device::wake()
	10002b14: R_386_32	Device::detect()
	10002b18: R_386_32	Device::disableLegacy()
	10002b1c: R_386_32	Device::powerSaving(PowerSavingLevel)
