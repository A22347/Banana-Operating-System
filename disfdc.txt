
packages/system/32/0002/floppy.sys:     file format elf32-i386


Disassembly of section .text:

10000000 <start(void*)-0x17>:
10000000:	55                   	push   ebp
10000001:	89 e5                	mov    ebp,esp
10000003:	83 ec 08             	sub    esp,0x8
10000006:	83 ec 0c             	sub    esp,0xc
10000009:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000000c:	e8 fc ff ff ff       	call   1000000d <start(void*)-0xa>	1000000d: R_386_PC32	start(void*)
10000011:	83 c4 10             	add    esp,0x10
10000014:	90                   	nop
10000015:	c9                   	leave  
10000016:	c3                   	ret    

10000017 <start(void*)>:
10000017:	55                   	push   ebp
10000018:	89 e5                	mov    ebp,esp
1000001a:	53                   	push   ebx
1000001b:	83 ec 14             	sub    esp,0x14
1000001e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000021:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
10000024:	83 ec 0c             	sub    esp,0xc
10000027:	68 a8 01 00 00       	push   0x1a8
1000002c:	e8 fc ff ff ff       	call   1000002d <start(void*)+0x16>	1000002d: R_386_PC32	operator new(unsigned long)
10000031:	83 c4 10             	add    esp,0x10
10000034:	89 c3                	mov    ebx,eax
10000036:	83 ec 0c             	sub    esp,0xc
10000039:	53                   	push   ebx
1000003a:	e8 fc ff ff ff       	call   1000003b <start(void*)+0x24>	1000003b: R_386_PC32	Floppy::Floppy()
1000003f:	83 c4 10             	add    esp,0x10
10000042:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
10000045:	83 ec 0c             	sub    esp,0xc
10000048:	68 20 0d 00 10       	push   0x10000d20	10000049: R_386_32	.text
1000004d:	e8 fc ff ff ff       	call   1000004e <start(void*)+0x37>	1000004e: R_386_PC32	Dbg::kprintf(char const*, ...)
10000052:	83 c4 10             	add    esp,0x10
10000055:	83 ec 08             	sub    esp,0x8
10000058:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
1000005b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
1000005e:	e8 fc ff ff ff       	call   1000005f <start(void*)+0x48>	1000005f: R_386_PC32	Device::addChild(Device*)
10000063:	83 c4 10             	add    esp,0x10
10000066:	83 ec 0c             	sub    esp,0xc
10000069:	68 28 0d 00 10       	push   0x10000d28	1000006a: R_386_32	.text
1000006e:	e8 fc ff ff ff       	call   1000006f <start(void*)+0x58>	1000006f: R_386_PC32	Dbg::kprintf(char const*, ...)
10000073:	83 c4 10             	add    esp,0x10
10000076:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10000079:	8b 00                	mov    eax,DWORD PTR [eax]
1000007b:	83 c0 28             	add    eax,0x28
1000007e:	8b 00                	mov    eax,DWORD PTR [eax]
10000080:	83 ec 0c             	sub    esp,0xc
10000083:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000086:	ff d0                	call   eax
10000088:	83 c4 10             	add    esp,0x10
1000008b:	83 ec 0c             	sub    esp,0xc
1000008e:	68 30 0d 00 10       	push   0x10000d30	1000008f: R_386_32	.text
10000093:	e8 fc ff ff ff       	call   10000094 <start(void*)+0x7d>	10000094: R_386_PC32	Dbg::kprintf(char const*, ...)
10000098:	83 c4 10             	add    esp,0x10
1000009b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
1000009e:	8b 00                	mov    eax,DWORD PTR [eax]
100000a0:	83 c0 08             	add    eax,0x8
100000a3:	8b 00                	mov    eax,DWORD PTR [eax]
100000a5:	6a 00                	push   0x0
100000a7:	6a 00                	push   0x0
100000a9:	68 f0 03 00 00       	push   0x3f0
100000ae:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
100000b1:	ff d0                	call   eax
100000b3:	83 c4 10             	add    esp,0x10
100000b6:	83 ec 0c             	sub    esp,0xc
100000b9:	68 38 0d 00 10       	push   0x10000d38	100000ba: R_386_32	.text
100000be:	e8 fc ff ff ff       	call   100000bf <start(void*)+0xa8>	100000bf: R_386_PC32	Dbg::kprintf(char const*, ...)
100000c3:	83 c4 10             	add    esp,0x10
100000c6:	90                   	nop
100000c7:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
100000ca:	c9                   	leave  
100000cb:	c3                   	ret    

100000cc <floppyMotorFunction(void*)>:
100000cc:	55                   	push   ebp
100000cd:	89 e5                	mov    ebp,esp
100000cf:	83 ec 18             	sub    esp,0x18
100000d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100000d5:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
100000d8:	e8 fc ff ff ff       	call   100000d9 <floppyMotorFunction(void*)+0xd>	100000d9: R_386_PC32	unlockScheduler()
100000dd:	83 ec 08             	sub    esp,0x8
100000e0:	6a 00                	push   0x0
100000e2:	68 00 84 d7 17       	push   0x17d78400
100000e7:	e8 fc ff ff ff       	call   100000e8 <floppyMotorFunction(void*)+0x1c>	100000e8: R_386_PC32	nanoSleep(unsigned long long)
100000ec:	83 c4 10             	add    esp,0x10
100000ef:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
100000f6:	83 7d f4 03          	cmp    DWORD PTR [ebp-0xc],0x3
100000fa:	7f e1                	jg     100000dd <floppyMotorFunction(void*)+0x11>
100000fc:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100000ff:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10000102:	83 c2 58             	add    edx,0x58
10000105:	8b 04 90             	mov    eax,DWORD PTR [eax+edx*4]
10000108:	83 f8 02             	cmp    eax,0x2
1000010b:	0f 85 86 00 00 00    	jne    10000197 <floppyMotorFunction(void*)+0xcb>
10000111:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10000114:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10000117:	83 c2 5c             	add    edx,0x5c
1000011a:	8b 04 90             	mov    eax,DWORD PTR [eax+edx*4]
1000011d:	8d 88 70 fe ff ff    	lea    ecx,[eax-0x190]
10000123:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10000126:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10000129:	83 c2 5c             	add    edx,0x5c
1000012c:	89 0c 90             	mov    DWORD PTR [eax+edx*4],ecx
1000012f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10000132:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10000135:	83 c2 5c             	add    edx,0x5c
10000138:	8b 04 90             	mov    eax,DWORD PTR [eax+edx*4]
1000013b:	85 c0                	test   eax,eax
1000013d:	7f 58                	jg     10000197 <floppyMotorFunction(void*)+0xcb>
1000013f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10000142:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10000145:	83 c2 58             	add    edx,0x58
10000148:	c7 04 90 00 00 00 00 	mov    DWORD PTR [eax+edx*4],0x0
1000014f:	e8 fc ff ff ff       	call   10000150 <floppyMotorFunction(void*)+0x84>	10000150: R_386_PC32	lockScheduler()
10000154:	83 ec 08             	sub    esp,0x8
10000157:	6a 02                	push   0x2
10000159:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
1000015c:	e8 fc ff ff ff       	call   1000015d <floppyMotorFunction(void*)+0x91>	1000015d: R_386_PC32	Floppy::readPort(FloppyReg)
10000161:	83 c4 10             	add    esp,0x10
10000164:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
10000167:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
1000016a:	ba 10 00 00 00       	mov    edx,0x10
1000016f:	88 c1                	mov    cl,al
10000171:	d3 e2                	shl    edx,cl
10000173:	89 d0                	mov    eax,edx
10000175:	f7 d0                	not    eax
10000177:	88 c2                	mov    dl,al
10000179:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
1000017c:	21 d0                	and    eax,edx
1000017e:	0f b6 c0             	movzx  eax,al
10000181:	83 ec 04             	sub    esp,0x4
10000184:	50                   	push   eax
10000185:	6a 02                	push   0x2
10000187:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
1000018a:	e8 fc ff ff ff       	call   1000018b <floppyMotorFunction(void*)+0xbf>	1000018b: R_386_PC32	Floppy::writePort(FloppyReg, unsigned char)
1000018f:	83 c4 10             	add    esp,0x10
10000192:	e8 fc ff ff ff       	call   10000193 <floppyMotorFunction(void*)+0xc7>	10000193: R_386_PC32	unlockScheduler()
10000197:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
1000019a:	e9 57 ff ff ff       	jmp    100000f6 <floppyMotorFunction(void*)+0x2a>
1000019f:	90                   	nop

100001a0 <Floppy::Floppy()>:
100001a0:	55                   	push   ebp
100001a1:	89 e5                	mov    ebp,esp
100001a3:	83 ec 08             	sub    esp,0x8
100001a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100001a9:	83 ec 08             	sub    esp,0x8
100001ac:	68 40 0d 00 10       	push   0x10000d40	100001ad: R_386_32	.text
100001b1:	50                   	push   eax
100001b2:	e8 fc ff ff ff       	call   100001b3 <Floppy::Floppy()+0x13>	100001b3: R_386_PC32	HardDiskController::HardDiskController(char const*)
100001b7:	83 c4 10             	add    esp,0x10
100001ba:	ba 08 00 00 00       	mov    edx,0x8	100001bb: R_386_32	vtable for Floppy
100001bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100001c2:	89 10                	mov    DWORD PTR [eax],edx
100001c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100001c7:	66 c7 80 58 01 00 00 f0 03 	mov    WORD PTR [eax+0x158],0x3f0
100001d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100001d3:	c6 80 80 01 00 00 01 	mov    BYTE PTR [eax+0x180],0x1
100001da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100001dd:	c6 80 81 01 00 00 00 	mov    BYTE PTR [eax+0x181],0x0
100001e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100001e7:	c6 80 82 01 00 00 00 	mov    BYTE PTR [eax+0x182],0x0
100001ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100001f1:	c6 80 83 01 00 00 00 	mov    BYTE PTR [eax+0x183],0x0
100001f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100001fb:	c6 80 84 01 00 00 01 	mov    BYTE PTR [eax+0x184],0x1
10000202:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000205:	c6 80 85 01 00 00 01 	mov    BYTE PTR [eax+0x185],0x1
1000020c:	83 ec 0c             	sub    esp,0xc
1000020f:	68 57 0d 00 10       	push   0x10000d57	10000210: R_386_32	.text
10000214:	e8 fc ff ff ff       	call   10000215 <Floppy::Floppy()+0x75>	10000215: R_386_PC32	Dbg::kprintf(char const*, ...)
10000219:	83 c4 10             	add    esp,0x10
1000021c:	a1 00 00 00 00       	mov    eax,ds:0x0	1000021d: R_386_32	kernelProcess
10000221:	68 d2 00 00 00       	push   0xd2
10000226:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000229:	68 00 00 00 00       	push   0x0	1000022a: R_386_32	floppyMotorFunction(void*)
1000022e:	50                   	push   eax
1000022f:	e8 fc ff ff ff       	call   10000230 <Floppy::Floppy()+0x90>	10000230: R_386_PC32	Process::createThread(void (*)(void*), void*, int)
10000234:	83 c4 10             	add    esp,0x10
10000237:	89 c2                	mov    edx,eax
10000239:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000023c:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
10000242:	90                   	nop
10000243:	c9                   	leave  
10000244:	c3                   	ret    
10000245:	90                   	nop

10000246 <Floppy::wasFailure()>:
10000246:	55                   	push   ebp
10000247:	89 e5                	mov    ebp,esp
10000249:	83 ec 10             	sub    esp,0x10
1000024c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000024f:	c6 80 83 01 00 00 01 	mov    BYTE PTR [eax+0x183],0x1
10000256:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000259:	8a 80 82 01 00 00    	mov    al,BYTE PTR [eax+0x182]
1000025f:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
10000262:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000265:	c6 80 82 01 00 00 00 	mov    BYTE PTR [eax+0x182],0x0
1000026c:	8a 45 ff             	mov    al,BYTE PTR [ebp-0x1]
1000026f:	c9                   	leave  
10000270:	c3                   	ret    
10000271:	90                   	nop

10000272 <Floppy::writeCommand(unsigned char)>:
10000272:	55                   	push   ebp
10000273:	89 e5                	mov    ebp,esp
10000275:	83 ec 28             	sub    esp,0x28
10000278:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
1000027b:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
1000027e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000281:	8a 80 82 01 00 00    	mov    al,BYTE PTR [eax+0x182]
10000287:	84 c0                	test   al,al
10000289:	74 10                	je     1000029b <Floppy::writeCommand(unsigned char)+0x29>
1000028b:	83 ec 0c             	sub    esp,0xc
1000028e:	68 6c 0d 00 10       	push   0x10000d6c	1000028f: R_386_32	.text
10000293:	e8 fc ff ff ff       	call   10000294 <Floppy::writeCommand(unsigned char)+0x22>	10000294: R_386_PC32	Krnl::panic(char const*)
10000298:	83 c4 10             	add    esp,0x10
1000029b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000029e:	8a 80 83 01 00 00    	mov    al,BYTE PTR [eax+0x183]
100002a4:	83 f0 01             	xor    eax,0x1
100002a7:	84 c0                	test   al,al
100002a9:	74 10                	je     100002bb <Floppy::writeCommand(unsigned char)+0x49>
100002ab:	83 ec 0c             	sub    esp,0xc
100002ae:	68 9c 0d 00 10       	push   0x10000d9c	100002af: R_386_32	.text
100002b3:	e8 fc ff ff ff       	call   100002b4 <Floppy::writeCommand(unsigned char)+0x42>	100002b4: R_386_PC32	Krnl::panic(char const*)
100002b8:	83 c4 10             	add    esp,0x10
100002bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002be:	c6 80 83 01 00 00 00 	mov    BYTE PTR [eax+0x183],0x0
100002c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002c8:	c6 80 82 01 00 00 00 	mov    BYTE PTR [eax+0x182],0x0
100002cf:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
100002d6:	83 7d f4 31          	cmp    DWORD PTR [ebp-0xc],0x31
100002da:	7f 53                	jg     1000032f <Floppy::writeCommand(unsigned char)+0xbd>
100002dc:	83 ec 08             	sub    esp,0x8
100002df:	6a 00                	push   0x0
100002e1:	68 80 96 98 00       	push   0x989680
100002e6:	e8 fc ff ff ff       	call   100002e7 <Floppy::writeCommand(unsigned char)+0x75>	100002e7: R_386_PC32	nanoSleep(unsigned long long)
100002eb:	83 c4 10             	add    esp,0x10
100002ee:	83 ec 08             	sub    esp,0x8
100002f1:	6a 04                	push   0x4
100002f3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100002f6:	e8 fc ff ff ff       	call   100002f7 <Floppy::writeCommand(unsigned char)+0x85>	100002f7: R_386_PC32	Floppy::readPort(FloppyReg)
100002fb:	83 c4 10             	add    esp,0x10
100002fe:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
10000301:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
10000304:	84 c0                	test   al,al
10000306:	79 22                	jns    1000032a <Floppy::writeCommand(unsigned char)+0xb8>
10000308:	0f b6 45 f3          	movzx  eax,BYTE PTR [ebp-0xd]
1000030c:	83 e0 40             	and    eax,0x40
1000030f:	85 c0                	test   eax,eax
10000311:	75 17                	jne    1000032a <Floppy::writeCommand(unsigned char)+0xb8>
10000313:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
10000317:	83 ec 04             	sub    esp,0x4
1000031a:	50                   	push   eax
1000031b:	6a 05                	push   0x5
1000031d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000320:	e8 fc ff ff ff       	call   10000321 <Floppy::writeCommand(unsigned char)+0xaf>	10000321: R_386_PC32	Floppy::writePort(FloppyReg, unsigned char)
10000325:	83 c4 10             	add    esp,0x10
10000328:	eb 0f                	jmp    10000339 <Floppy::writeCommand(unsigned char)+0xc7>
1000032a:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
1000032d:	eb a7                	jmp    100002d6 <Floppy::writeCommand(unsigned char)+0x64>
1000032f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000332:	c6 80 82 01 00 00 01 	mov    BYTE PTR [eax+0x182],0x1
10000339:	c9                   	leave  
1000033a:	c3                   	ret    
1000033b:	90                   	nop

1000033c <Floppy::readData()>:
1000033c:	55                   	push   ebp
1000033d:	89 e5                	mov    ebp,esp
1000033f:	83 ec 18             	sub    esp,0x18
10000342:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000345:	8a 80 82 01 00 00    	mov    al,BYTE PTR [eax+0x182]
1000034b:	84 c0                	test   al,al
1000034d:	74 10                	je     1000035f <Floppy::readData()+0x23>
1000034f:	83 ec 0c             	sub    esp,0xc
10000352:	68 6c 0d 00 10       	push   0x10000d6c	10000353: R_386_32	.text
10000357:	e8 fc ff ff ff       	call   10000358 <Floppy::readData()+0x1c>	10000358: R_386_PC32	Krnl::panic(char const*)
1000035c:	83 c4 10             	add    esp,0x10
1000035f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000362:	8a 80 83 01 00 00    	mov    al,BYTE PTR [eax+0x183]
10000368:	83 f0 01             	xor    eax,0x1
1000036b:	84 c0                	test   al,al
1000036d:	74 10                	je     1000037f <Floppy::readData()+0x43>
1000036f:	83 ec 0c             	sub    esp,0xc
10000372:	68 9c 0d 00 10       	push   0x10000d9c	10000373: R_386_32	.text
10000377:	e8 fc ff ff ff       	call   10000378 <Floppy::readData()+0x3c>	10000378: R_386_PC32	Krnl::panic(char const*)
1000037c:	83 c4 10             	add    esp,0x10
1000037f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000382:	c6 80 83 01 00 00 00 	mov    BYTE PTR [eax+0x183],0x0
10000389:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000038c:	c6 80 82 01 00 00 00 	mov    BYTE PTR [eax+0x182],0x0
10000393:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
1000039a:	83 7d f4 31          	cmp    DWORD PTR [ebp-0xc],0x31
1000039e:	7f 4e                	jg     100003ee <Floppy::readData()+0xb2>
100003a0:	83 ec 08             	sub    esp,0x8
100003a3:	6a 00                	push   0x0
100003a5:	68 80 96 98 00       	push   0x989680
100003aa:	e8 fc ff ff ff       	call   100003ab <Floppy::readData()+0x6f>	100003ab: R_386_PC32	nanoSleep(unsigned long long)
100003af:	83 c4 10             	add    esp,0x10
100003b2:	83 ec 08             	sub    esp,0x8
100003b5:	6a 04                	push   0x4
100003b7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100003ba:	e8 fc ff ff ff       	call   100003bb <Floppy::readData()+0x7f>	100003bb: R_386_PC32	Floppy::readPort(FloppyReg)
100003bf:	83 c4 10             	add    esp,0x10
100003c2:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
100003c5:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
100003c8:	84 c0                	test   al,al
100003ca:	79 1d                	jns    100003e9 <Floppy::readData()+0xad>
100003cc:	0f b6 45 f3          	movzx  eax,BYTE PTR [ebp-0xd]
100003d0:	83 e0 40             	and    eax,0x40
100003d3:	85 c0                	test   eax,eax
100003d5:	74 12                	je     100003e9 <Floppy::readData()+0xad>
100003d7:	83 ec 08             	sub    esp,0x8
100003da:	6a 05                	push   0x5
100003dc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100003df:	e8 fc ff ff ff       	call   100003e0 <Floppy::readData()+0xa4>	100003e0: R_386_PC32	Floppy::readPort(FloppyReg)
100003e4:	83 c4 10             	add    esp,0x10
100003e7:	eb 11                	jmp    100003fa <Floppy::readData()+0xbe>
100003e9:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
100003ec:	eb ac                	jmp    1000039a <Floppy::readData()+0x5e>
100003ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100003f1:	c6 80 82 01 00 00 01 	mov    BYTE PTR [eax+0x182],0x1
100003f8:	b0 00                	mov    al,0x0
100003fa:	c9                   	leave  
100003fb:	c3                   	ret    

100003fc <Floppy::readPort(FloppyReg)>:
100003fc:	55                   	push   ebp
100003fd:	89 e5                	mov    ebp,esp
100003ff:	83 ec 10             	sub    esp,0x10
10000402:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000405:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
1000040b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
1000040e:	01 d0                	add    eax,edx
10000410:	0f b7 c0             	movzx  eax,ax
10000413:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
10000417:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
1000041b:	89 c2                	mov    edx,eax
1000041d:	ec                   	in     al,dx
1000041e:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
10000421:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
10000424:	90                   	nop
10000425:	c9                   	leave  
10000426:	c3                   	ret    
10000427:	90                   	nop

10000428 <Floppy::writePort(FloppyReg, unsigned char)>:
10000428:	55                   	push   ebp
10000429:	89 e5                	mov    ebp,esp
1000042b:	83 ec 14             	sub    esp,0x14
1000042e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
10000431:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
10000434:	0f b6 4d ec          	movzx  ecx,BYTE PTR [ebp-0x14]
10000438:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000043b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
10000441:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10000444:	01 d0                	add    eax,edx
10000446:	0f b7 c0             	movzx  eax,ax
10000449:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
1000044d:	88 4d fd             	mov    BYTE PTR [ebp-0x3],cl
10000450:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
10000453:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
10000457:	ee                   	out    dx,al
10000458:	90                   	nop
10000459:	c9                   	leave  
1000045a:	c3                   	ret    
1000045b:	90                   	nop

1000045c <Floppy::configure()>:
1000045c:	90                   	nop
1000045d:	c3                   	ret    

1000045e <Floppy::driveDetection()>:
1000045e:	55                   	push   ebp
1000045f:	89 e5                	mov    ebp,esp
10000461:	57                   	push   edi
10000462:	56                   	push   esi
10000463:	53                   	push   ebx
10000464:	83 ec 1c             	sub    esp,0x1c
10000467:	83 ec 0c             	sub    esp,0xc
1000046a:	68 ca 0d 00 10       	push   0x10000dca	1000046b: R_386_32	.text
1000046f:	e8 fc ff ff ff       	call   10000470 <Floppy::driveDetection()+0x12>	10000470: R_386_PC32	Dbg::kprintf(char const*, ...)
10000474:	83 c4 10             	add    esp,0x10
10000477:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000047a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
10000480:	66 3d f0 03          	cmp    ax,0x3f0
10000484:	0f 85 92 00 00 00    	jne    1000051c <Floppy::driveDetection()+0xbe>
1000048a:	a1 00 00 00 00       	mov    eax,ds:0x0	1000048b: R_386_32	Krnl::computer
1000048f:	83 ec 08             	sub    esp,0x8
10000492:	6a 10                	push   0x10
10000494:	50                   	push   eax
10000495:	e8 fc ff ff ff       	call   10000496 <Floppy::driveDetection()+0x38>	10000496: R_386_PC32	Computer::readCMOS(unsigned char)
1000049a:	83 c4 10             	add    esp,0x10
1000049d:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
100004a0:	0f b6 45 e7          	movzx  eax,BYTE PTR [ebp-0x19]
100004a4:	c1 f8 04             	sar    eax,0x4
100004a7:	89 c2                	mov    edx,eax
100004a9:	83 ec 04             	sub    esp,0x4
100004ac:	89 d0                	mov    eax,edx
100004ae:	c1 e0 02             	shl    eax,0x2
100004b1:	01 d0                	add    eax,edx
100004b3:	c1 e0 02             	shl    eax,0x2
100004b6:	01 d0                	add    eax,edx
100004b8:	05 00 00 00 00       	add    eax,0x0	100004b9: R_386_32	floppyTable
100004bd:	83 ec 18             	sub    esp,0x18
100004c0:	89 e2                	mov    edx,esp
100004c2:	89 c3                	mov    ebx,eax
100004c4:	b8 15 00 00 00       	mov    eax,0x15
100004c9:	89 d7                	mov    edi,edx
100004cb:	89 de                	mov    esi,ebx
100004cd:	89 c1                	mov    ecx,eax
100004cf:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
100004d1:	68 e4 0d 00 10       	push   0x10000de4	100004d2: R_386_32	.text
100004d6:	e8 fc ff ff ff       	call   100004d7 <Floppy::driveDetection()+0x79>	100004d7: R_386_PC32	Dbg::kprintf(char const*, ...)
100004db:	83 c4 20             	add    esp,0x20
100004de:	0f b6 45 e7          	movzx  eax,BYTE PTR [ebp-0x19]
100004e2:	83 e0 0f             	and    eax,0xf
100004e5:	89 c2                	mov    edx,eax
100004e7:	83 ec 04             	sub    esp,0x4
100004ea:	89 d0                	mov    eax,edx
100004ec:	c1 e0 02             	shl    eax,0x2
100004ef:	01 d0                	add    eax,edx
100004f1:	c1 e0 02             	shl    eax,0x2
100004f4:	01 d0                	add    eax,edx
100004f6:	05 00 00 00 00       	add    eax,0x0	100004f7: R_386_32	floppyTable
100004fb:	83 ec 18             	sub    esp,0x18
100004fe:	89 e2                	mov    edx,esp
10000500:	89 c3                	mov    ebx,eax
10000502:	b8 15 00 00 00       	mov    eax,0x15
10000507:	89 d7                	mov    edi,edx
10000509:	89 de                	mov    esi,ebx
1000050b:	89 c1                	mov    ecx,eax
1000050d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
1000050f:	68 f6 0d 00 10       	push   0x10000df6	10000510: R_386_32	.text
10000514:	e8 fc ff ff ff       	call   10000515 <Floppy::driveDetection()+0xb7>	10000515: R_386_PC32	Dbg::kprintf(char const*, ...)
10000519:	83 c4 20             	add    esp,0x20
1000051c:	90                   	nop
1000051d:	8d 65 f4             	lea    esp,[ebp-0xc]
10000520:	5b                   	pop    ebx
10000521:	5e                   	pop    esi
10000522:	5f                   	pop    edi
10000523:	5d                   	pop    ebp
10000524:	c3                   	ret    
10000525:	90                   	nop

10000526 <Floppy::open(int, int, void*)>:
10000526:	55                   	push   ebp
10000527:	89 e5                	mov    ebp,esp
10000529:	83 ec 18             	sub    esp,0x18
1000052c:	83 ec 0c             	sub    esp,0xc
1000052f:	68 08 0e 00 10       	push   0x10000e08	10000530: R_386_32	.text
10000534:	e8 fc ff ff ff       	call   10000535 <Floppy::open(int, int, void*)+0xf>	10000535: R_386_PC32	Dbg::kprintf(char const*, ...)
10000539:	83 c4 10             	add    esp,0x10
1000053c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
1000053f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10000542:	66 89 82 58 01 00 00 	mov    WORD PTR [edx+0x158],ax
10000549:	83 ec 0c             	sub    esp,0xc
1000054c:	68 18 0e 00 10       	push   0x10000e18	1000054d: R_386_32	.text
10000551:	e8 fc ff ff ff       	call   10000552 <Floppy::open(int, int, void*)+0x2c>	10000552: R_386_PC32	Dbg::kprintf(char const*, ...)
10000556:	83 c4 10             	add    esp,0x10
10000559:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000055c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10000562:	0f b6 c8             	movzx  ecx,al
10000565:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000568:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
1000056e:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10000571:	66 89 44 8a 04       	mov    WORD PTR [edx+ecx*4+0x4],ax
10000576:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000579:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
1000057f:	0f b6 d0             	movzx  edx,al
10000582:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000585:	c6 44 90 06 06       	mov    BYTE PTR [eax+edx*4+0x6],0x6
1000058a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000058d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10000593:	8d 50 01             	lea    edx,[eax+0x1]
10000596:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
10000599:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
1000059f:	0f b6 d0             	movzx  edx,al
100005a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100005a5:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
100005a9:	83 e1 3f             	and    ecx,0x3f
100005ac:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
100005b0:	83 ec 0c             	sub    esp,0xc
100005b3:	68 28 0e 00 10       	push   0x10000e28	100005b4: R_386_32	.text
100005b8:	e8 fc ff ff ff       	call   100005b9 <Floppy::open(int, int, void*)+0x93>	100005b9: R_386_PC32	Dbg::kprintf(char const*, ...)
100005bd:	83 c4 10             	add    esp,0x10
100005c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100005c3:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
100005c9:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
100005cc:	8a 92 c4 00 00 00    	mov    dl,BYTE PTR [edx+0xc4]
100005d2:	0f b6 ca             	movzx  ecx,dl
100005d5:	83 c0 07             	add    eax,0x7
100005d8:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
100005db:	66 89 44 8a 04       	mov    WORD PTR [edx+ecx*4+0x4],ax
100005e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100005e3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
100005e9:	0f b6 d0             	movzx  edx,al
100005ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100005ef:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
100005f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100005f7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
100005fd:	8d 50 01             	lea    edx,[eax+0x1]
10000600:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
10000603:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
10000609:	0f b6 d0             	movzx  edx,al
1000060c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000060f:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
10000613:	83 e1 3f             	and    ecx,0x3f
10000616:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
1000061a:	83 ec 0c             	sub    esp,0xc
1000061d:	68 38 0e 00 10       	push   0x10000e38	1000061e: R_386_32	.text
10000622:	e8 fc ff ff ff       	call   10000623 <Floppy::open(int, int, void*)+0xfd>	10000623: R_386_PC32	Dbg::kprintf(char const*, ...)
10000627:	83 c4 10             	add    esp,0x10
1000062a:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
10000631:	83 7d f4 03          	cmp    DWORD PTR [ebp-0xc],0x3
10000635:	7f 26                	jg     1000065d <Floppy::open(int, int, void*)+0x137>
10000637:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000063a:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
1000063d:	83 c2 64             	add    edx,0x64
10000640:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
10000648:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000064b:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
1000064e:	83 c2 58             	add    edx,0x58
10000651:	c7 04 90 00 00 00 00 	mov    DWORD PTR [eax+edx*4],0x0
10000658:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
1000065b:	eb d4                	jmp    10000631 <Floppy::open(int, int, void*)+0x10b>
1000065d:	83 ec 0c             	sub    esp,0xc
10000660:	68 48 0e 00 10       	push   0x10000e48	10000661: R_386_32	.text
10000665:	e8 fc ff ff ff       	call   10000666 <Floppy::open(int, int, void*)+0x140>	10000666: R_386_PC32	Dbg::kprintf(char const*, ...)
1000066a:	83 c4 10             	add    esp,0x10
1000066d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000670:	8b 00                	mov    eax,DWORD PTR [eax]
10000672:	83 c0 24             	add    eax,0x24
10000675:	8b 00                	mov    eax,DWORD PTR [eax]
10000677:	83 ec 0c             	sub    esp,0xc
1000067a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000067d:	ff d0                	call   eax
1000067f:	83 c4 10             	add    esp,0x10
10000682:	83 ec 0c             	sub    esp,0xc
10000685:	68 58 0e 00 10       	push   0x10000e58	10000686: R_386_32	.text
1000068a:	e8 fc ff ff ff       	call   1000068b <Floppy::open(int, int, void*)+0x165>	1000068b: R_386_PC32	Dbg::kprintf(char const*, ...)
1000068f:	83 c4 10             	add    esp,0x10
10000692:	83 ec 0c             	sub    esp,0xc
10000695:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000698:	e8 fc ff ff ff       	call   10000699 <Floppy::open(int, int, void*)+0x173>	10000699: R_386_PC32	Floppy::reset()
1000069d:	83 c4 10             	add    esp,0x10
100006a0:	83 ec 0c             	sub    esp,0xc
100006a3:	68 68 0e 00 10       	push   0x10000e68	100006a4: R_386_32	.text
100006a8:	e8 fc ff ff ff       	call   100006a9 <Floppy::open(int, int, void*)+0x183>	100006a9: R_386_PC32	Dbg::kprintf(char const*, ...)
100006ad:	83 c4 10             	add    esp,0x10
100006b0:	83 ec 0c             	sub    esp,0xc
100006b3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100006b6:	e8 fc ff ff ff       	call   100006b7 <Floppy::open(int, int, void*)+0x191>	100006b7: R_386_PC32	Floppy::driveDetection()
100006bb:	83 c4 10             	add    esp,0x10
100006be:	83 ec 0c             	sub    esp,0xc
100006c1:	68 78 0e 00 10       	push   0x10000e78	100006c2: R_386_32	.text
100006c6:	e8 fc ff ff ff       	call   100006c7 <Floppy::open(int, int, void*)+0x1a1>	100006c7: R_386_PC32	Dbg::kprintf(char const*, ...)
100006cb:	83 c4 10             	add    esp,0x10
100006ce:	b8 00 00 00 00       	mov    eax,0x0
100006d3:	c9                   	leave  
100006d4:	c3                   	ret    
100006d5:	90                   	nop

100006d6 <Floppy::close(int, int, void*)>:
100006d6:	b8 00 00 00 00       	mov    eax,0x0
100006db:	c3                   	ret    

100006dc <Floppy::senseInterrupt(int*, int*)>:
100006dc:	55                   	push   ebp
100006dd:	89 e5                	mov    ebp,esp
100006df:	83 ec 08             	sub    esp,0x8
100006e2:	83 ec 08             	sub    esp,0x8
100006e5:	6a 08                	push   0x8
100006e7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100006ea:	e8 fc ff ff ff       	call   100006eb <Floppy::senseInterrupt(int*, int*)+0xf>	100006eb: R_386_PC32	Floppy::writeCommand(unsigned char)
100006ef:	83 c4 10             	add    esp,0x10
100006f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100006f5:	8b 00                	mov    eax,DWORD PTR [eax]
100006f7:	83 c0 24             	add    eax,0x24
100006fa:	8b 00                	mov    eax,DWORD PTR [eax]
100006fc:	83 ec 0c             	sub    esp,0xc
100006ff:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000702:	ff d0                	call   eax
10000704:	83 c4 10             	add    esp,0x10
10000707:	84 c0                	test   al,al
10000709:	74 04                	je     1000070f <Floppy::senseInterrupt(int*, int*)+0x33>
1000070b:	b0 00                	mov    al,0x0
1000070d:	eb 68                	jmp    10000777 <Floppy::senseInterrupt(int*, int*)+0x9b>
1000070f:	83 ec 0c             	sub    esp,0xc
10000712:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000715:	e8 fc ff ff ff       	call   10000716 <Floppy::senseInterrupt(int*, int*)+0x3a>	10000716: R_386_PC32	Floppy::readData()
1000071a:	83 c4 10             	add    esp,0x10
1000071d:	0f b6 d0             	movzx  edx,al
10000720:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000723:	89 10                	mov    DWORD PTR [eax],edx
10000725:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000728:	8b 00                	mov    eax,DWORD PTR [eax]
1000072a:	83 c0 24             	add    eax,0x24
1000072d:	8b 00                	mov    eax,DWORD PTR [eax]
1000072f:	83 ec 0c             	sub    esp,0xc
10000732:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000735:	ff d0                	call   eax
10000737:	83 c4 10             	add    esp,0x10
1000073a:	84 c0                	test   al,al
1000073c:	74 04                	je     10000742 <Floppy::senseInterrupt(int*, int*)+0x66>
1000073e:	b0 00                	mov    al,0x0
10000740:	eb 35                	jmp    10000777 <Floppy::senseInterrupt(int*, int*)+0x9b>
10000742:	83 ec 0c             	sub    esp,0xc
10000745:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000748:	e8 fc ff ff ff       	call   10000749 <Floppy::senseInterrupt(int*, int*)+0x6d>	10000749: R_386_PC32	Floppy::readData()
1000074d:	83 c4 10             	add    esp,0x10
10000750:	0f b6 d0             	movzx  edx,al
10000753:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
10000756:	89 10                	mov    DWORD PTR [eax],edx
10000758:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000075b:	8b 00                	mov    eax,DWORD PTR [eax]
1000075d:	83 c0 24             	add    eax,0x24
10000760:	8b 00                	mov    eax,DWORD PTR [eax]
10000762:	83 ec 0c             	sub    esp,0xc
10000765:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000768:	ff d0                	call   eax
1000076a:	83 c4 10             	add    esp,0x10
1000076d:	84 c0                	test   al,al
1000076f:	74 04                	je     10000775 <Floppy::senseInterrupt(int*, int*)+0x99>
10000771:	b0 00                	mov    al,0x0
10000773:	eb 02                	jmp    10000777 <Floppy::senseInterrupt(int*, int*)+0x9b>
10000775:	b0 01                	mov    al,0x1
10000777:	c9                   	leave  
10000778:	c3                   	ret    
10000779:	90                   	nop

1000077a <Floppy::lock()>:
1000077a:	55                   	push   ebp
1000077b:	89 e5                	mov    ebp,esp
1000077d:	83 ec 08             	sub    esp,0x8
10000780:	83 ec 08             	sub    esp,0x8
10000783:	6a 14                	push   0x14
10000785:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000788:	e8 fc ff ff ff       	call   10000789 <Floppy::lock()+0xf>	10000789: R_386_PC32	Floppy::writeCommand(unsigned char)
1000078d:	83 c4 10             	add    esp,0x10
10000790:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000793:	8b 00                	mov    eax,DWORD PTR [eax]
10000795:	83 c0 24             	add    eax,0x24
10000798:	8b 00                	mov    eax,DWORD PTR [eax]
1000079a:	83 ec 0c             	sub    esp,0xc
1000079d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100007a0:	ff d0                	call   eax
100007a2:	83 c4 10             	add    esp,0x10
100007a5:	84 c0                	test   al,al
100007a7:	74 04                	je     100007ad <Floppy::lock()+0x33>
100007a9:	b0 00                	mov    al,0x0
100007ab:	eb 2d                	jmp    100007da <Floppy::lock()+0x60>
100007ad:	83 ec 0c             	sub    esp,0xc
100007b0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100007b3:	e8 fc ff ff ff       	call   100007b4 <Floppy::lock()+0x3a>	100007b4: R_386_PC32	Floppy::readData()
100007b8:	83 c4 10             	add    esp,0x10
100007bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100007be:	8b 00                	mov    eax,DWORD PTR [eax]
100007c0:	83 c0 24             	add    eax,0x24
100007c3:	8b 00                	mov    eax,DWORD PTR [eax]
100007c5:	83 ec 0c             	sub    esp,0xc
100007c8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100007cb:	ff d0                	call   eax
100007cd:	83 c4 10             	add    esp,0x10
100007d0:	84 c0                	test   al,al
100007d2:	74 04                	je     100007d8 <Floppy::lock()+0x5e>
100007d4:	b0 00                	mov    al,0x0
100007d6:	eb 02                	jmp    100007da <Floppy::lock()+0x60>
100007d8:	b0 01                	mov    al,0x1
100007da:	c9                   	leave  
100007db:	c3                   	ret    

100007dc <Floppy::reset()>:
100007dc:	55                   	push   ebp
100007dd:	89 e5                	mov    ebp,esp
100007df:	83 ec 28             	sub    esp,0x28
100007e2:	6a 02                	push   0x2
100007e4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100007e7:	e8 fc ff ff ff       	call   100007e8 <Floppy::reset()+0xc>	100007e8: R_386_PC32	Floppy::readPort(FloppyReg)
100007ec:	83 c4 08             	add    esp,0x8
100007ef:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
100007f2:	6a 00                	push   0x0
100007f4:	6a 02                	push   0x2
100007f6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100007f9:	e8 fc ff ff ff       	call   100007fa <Floppy::reset()+0x1e>	100007fa: R_386_PC32	Floppy::writePort(FloppyReg, unsigned char)
100007fe:	83 c4 0c             	add    esp,0xc
10000801:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
10000804:	83 c8 04             	or     eax,0x4
10000807:	0f b6 c0             	movzx  eax,al
1000080a:	50                   	push   eax
1000080b:	6a 02                	push   0x2
1000080d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000810:	e8 fc ff ff ff       	call   10000811 <Floppy::reset()+0x35>	10000811: R_386_PC32	Floppy::writePort(FloppyReg, unsigned char)
10000815:	83 c4 0c             	add    esp,0xc
10000818:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
1000081c:	83 e0 08             	and    eax,0x8
1000081f:	85 c0                	test   eax,eax
10000821:	74 12                	je     10000835 <Floppy::reset()+0x59>
10000823:	83 ec 0c             	sub    esp,0xc
10000826:	68 88 0e 00 10       	push   0x10000e88	10000827: R_386_32	.text
1000082b:	e8 fc ff ff ff       	call   1000082c <Floppy::reset()+0x50>	1000082c: R_386_PC32	Krnl::panic(char const*)
10000830:	83 c4 10             	add    esp,0x10
10000833:	eb 1a                	jmp    1000084f <Floppy::reset()+0x73>
10000835:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
10000838:	83 c8 0c             	or     eax,0xc
1000083b:	0f b6 c0             	movzx  eax,al
1000083e:	83 ec 04             	sub    esp,0x4
10000841:	50                   	push   eax
10000842:	6a 02                	push   0x2
10000844:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000847:	e8 fc ff ff ff       	call   10000848 <Floppy::reset()+0x6c>	10000848: R_386_PC32	Floppy::writePort(FloppyReg, unsigned char)
1000084c:	83 c4 10             	add    esp,0x10
1000084f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000852:	8a 80 85 01 00 00    	mov    al,BYTE PTR [eax+0x185]
10000858:	84 c0                	test   al,al
1000085a:	0f 84 8f 00 00 00    	je     100008ef <Floppy::reset()+0x113>
10000860:	83 ec 04             	sub    esp,0x4
10000863:	8d 45 e4             	lea    eax,[ebp-0x1c]
10000866:	50                   	push   eax
10000867:	8d 45 e8             	lea    eax,[ebp-0x18]
1000086a:	50                   	push   eax
1000086b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000086e:	e8 fc ff ff ff       	call   1000086f <Floppy::reset()+0x93>	1000086f: R_386_PC32	Floppy::senseInterrupt(int*, int*)
10000873:	83 c4 10             	add    esp,0x10
10000876:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
10000879:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
1000087d:	74 19                	je     10000898 <Floppy::reset()+0xbc>
1000087f:	83 ec 04             	sub    esp,0x4
10000882:	8d 45 e4             	lea    eax,[ebp-0x1c]
10000885:	50                   	push   eax
10000886:	8d 45 e8             	lea    eax,[ebp-0x18]
10000889:	50                   	push   eax
1000088a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000088d:	e8 fc ff ff ff       	call   1000088e <Floppy::reset()+0xb2>	1000088e: R_386_PC32	Floppy::senseInterrupt(int*, int*)
10000892:	83 c4 10             	add    esp,0x10
10000895:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
10000898:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
1000089c:	74 19                	je     100008b7 <Floppy::reset()+0xdb>
1000089e:	83 ec 04             	sub    esp,0x4
100008a1:	8d 45 e4             	lea    eax,[ebp-0x1c]
100008a4:	50                   	push   eax
100008a5:	8d 45 e8             	lea    eax,[ebp-0x18]
100008a8:	50                   	push   eax
100008a9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100008ac:	e8 fc ff ff ff       	call   100008ad <Floppy::reset()+0xd1>	100008ad: R_386_PC32	Floppy::senseInterrupt(int*, int*)
100008b1:	83 c4 10             	add    esp,0x10
100008b4:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
100008b7:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
100008bb:	74 19                	je     100008d6 <Floppy::reset()+0xfa>
100008bd:	83 ec 04             	sub    esp,0x4
100008c0:	8d 45 e4             	lea    eax,[ebp-0x1c]
100008c3:	50                   	push   eax
100008c4:	8d 45 e8             	lea    eax,[ebp-0x18]
100008c7:	50                   	push   eax
100008c8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100008cb:	e8 fc ff ff ff       	call   100008cc <Floppy::reset()+0xf0>	100008cc: R_386_PC32	Floppy::senseInterrupt(int*, int*)
100008d0:	83 c4 10             	add    esp,0x10
100008d3:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
100008d6:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
100008d9:	83 f0 01             	xor    eax,0x1
100008dc:	84 c0                	test   al,al
100008de:	74 0f                	je     100008ef <Floppy::reset()+0x113>
100008e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100008e3:	c6 80 85 01 00 00 00 	mov    BYTE PTR [eax+0x185],0x0
100008ea:	e9 f3 fe ff ff       	jmp    100007e2 <Floppy::reset()+0x6>
100008ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100008f2:	8a 80 80 01 00 00    	mov    al,BYTE PTR [eax+0x180]
100008f8:	84 c0                	test   al,al
100008fa:	75 14                	jne    10000910 <Floppy::reset()+0x134>
100008fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100008ff:	8a 80 81 01 00 00    	mov    al,BYTE PTR [eax+0x181]
10000905:	83 f0 01             	xor    eax,0x1
10000908:	84 c0                	test   al,al
1000090a:	0f 84 91 00 00 00    	je     100009a1 <Floppy::reset()+0x1c5>
10000910:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000913:	8a 80 84 01 00 00    	mov    al,BYTE PTR [eax+0x184]
10000919:	84 c0                	test   al,al
1000091b:	74 3c                	je     10000959 <Floppy::reset()+0x17d>
1000091d:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
10000924:	83 7d f0 03          	cmp    DWORD PTR [ebp-0x10],0x3
10000928:	7f 2f                	jg     10000959 <Floppy::reset()+0x17d>
1000092a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000092d:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
10000930:	83 c2 64             	add    edx,0x64
10000933:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
10000937:	85 c0                	test   eax,eax
10000939:	74 19                	je     10000954 <Floppy::reset()+0x178>
1000093b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000093e:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
10000941:	83 c2 64             	add    edx,0x64
10000944:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
10000948:	83 ec 0c             	sub    esp,0xc
1000094b:	50                   	push   eax
1000094c:	e8 fc ff ff ff       	call   1000094d <Floppy::reset()+0x171>	1000094d: R_386_PC32	FloppyDrive::floppyConfigure()
10000951:	83 c4 10             	add    esp,0x10
10000954:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
10000957:	eb cb                	jmp    10000924 <Floppy::reset()+0x148>
10000959:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000095c:	8a 80 81 01 00 00    	mov    al,BYTE PTR [eax+0x181]
10000962:	83 f0 01             	xor    eax,0x1
10000965:	84 c0                	test   al,al
10000967:	74 38                	je     100009a1 <Floppy::reset()+0x1c5>
10000969:	83 ec 0c             	sub    esp,0xc
1000096c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000096f:	e8 fc ff ff ff       	call   10000970 <Floppy::reset()+0x194>	10000970: R_386_PC32	Floppy::lock()
10000974:	83 c4 10             	add    esp,0x10
10000977:	83 f0 01             	xor    eax,0x1
1000097a:	88 c2                	mov    dl,al
1000097c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000097f:	88 90 80 01 00 00    	mov    BYTE PTR [eax+0x180],dl
10000985:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000988:	c6 80 81 01 00 00 01 	mov    BYTE PTR [eax+0x181],0x1
1000098f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000992:	8a 80 80 01 00 00    	mov    al,BYTE PTR [eax+0x180]
10000998:	84 c0                	test   al,al
1000099a:	74 05                	je     100009a1 <Floppy::reset()+0x1c5>
1000099c:	e9 41 fe ff ff       	jmp    100007e2 <Floppy::reset()+0x6>
100009a1:	90                   	nop
100009a2:	c9                   	leave  
100009a3:	c3                   	ret    

100009a4 <Floppy::motor(int, bool)>:
100009a4:	55                   	push   ebp
100009a5:	89 e5                	mov    ebp,esp
100009a7:	83 ec 28             	sub    esp,0x28
100009aa:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
100009ad:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
100009b0:	80 7d e4 00          	cmp    BYTE PTR [ebp-0x1c],0x0
100009b4:	0f 84 c7 00 00 00    	je     10000a81 <Floppy::motor(int, bool)+0xdd>
100009ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100009bd:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
100009c0:	83 c2 58             	add    edx,0x58
100009c3:	8b 04 90             	mov    eax,DWORD PTR [eax+edx*4]
100009c6:	85 c0                	test   eax,eax
100009c8:	0f 85 90 00 00 00    	jne    10000a5e <Floppy::motor(int, bool)+0xba>
100009ce:	e8 fc ff ff ff       	call   100009cf <Floppy::motor(int, bool)+0x2b>	100009cf: R_386_PC32	lockScheduler()
100009d3:	83 ec 08             	sub    esp,0x8
100009d6:	6a 02                	push   0x2
100009d8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100009db:	e8 fc ff ff ff       	call   100009dc <Floppy::motor(int, bool)+0x38>	100009dc: R_386_PC32	Floppy::readPort(FloppyReg)
100009e0:	83 c4 10             	add    esp,0x10
100009e3:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
100009e6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100009e9:	ba 10 00 00 00       	mov    edx,0x10
100009ee:	88 c1                	mov    cl,al
100009f0:	d3 e2                	shl    edx,cl
100009f2:	89 d0                	mov    eax,edx
100009f4:	88 c2                	mov    dl,al
100009f6:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
100009f9:	09 d0                	or     eax,edx
100009fb:	0f b6 c0             	movzx  eax,al
100009fe:	83 ec 04             	sub    esp,0x4
10000a01:	50                   	push   eax
10000a02:	6a 02                	push   0x2
10000a04:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000a07:	e8 fc ff ff ff       	call   10000a08 <Floppy::motor(int, bool)+0x64>	10000a08: R_386_PC32	Floppy::writePort(FloppyReg, unsigned char)
10000a0c:	83 c4 10             	add    esp,0x10
10000a0f:	e8 fc ff ff ff       	call   10000a10 <Floppy::motor(int, bool)+0x6c>	10000a10: R_386_PC32	unlockScheduler()
10000a14:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000a17:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10000a1a:	83 c2 60             	add    edx,0x60
10000a1d:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
10000a21:	83 f8 04             	cmp    eax,0x4
10000a24:	75 14                	jne    10000a3a <Floppy::motor(int, bool)+0x96>
10000a26:	83 ec 08             	sub    esp,0x8
10000a29:	6a 00                	push   0x0
10000a2b:	68 00 a3 e1 11       	push   0x11e1a300
10000a30:	e8 fc ff ff ff       	call   10000a31 <Floppy::motor(int, bool)+0x8d>	10000a31: R_386_PC32	nanoSleep(unsigned long long)
10000a35:	83 c4 10             	add    esp,0x10
10000a38:	eb 12                	jmp    10000a4c <Floppy::motor(int, bool)+0xa8>
10000a3a:	83 ec 08             	sub    esp,0x8
10000a3d:	6a 00                	push   0x0
10000a3f:	68 00 65 cd 1d       	push   0x1dcd6500
10000a44:	e8 fc ff ff ff       	call   10000a45 <Floppy::motor(int, bool)+0xa1>	10000a45: R_386_PC32	nanoSleep(unsigned long long)
10000a49:	83 c4 10             	add    esp,0x10
10000a4c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000a4f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10000a52:	83 c2 58             	add    edx,0x58
10000a55:	c7 04 90 01 00 00 00 	mov    DWORD PTR [eax+edx*4],0x1
10000a5c:	eb 54                	jmp    10000ab2 <Floppy::motor(int, bool)+0x10e>
10000a5e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000a61:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10000a64:	83 c2 58             	add    edx,0x58
10000a67:	8b 04 90             	mov    eax,DWORD PTR [eax+edx*4]
10000a6a:	83 f8 02             	cmp    eax,0x2
10000a6d:	75 43                	jne    10000ab2 <Floppy::motor(int, bool)+0x10e>
10000a6f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000a72:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10000a75:	83 c2 58             	add    edx,0x58
10000a78:	c7 04 90 01 00 00 00 	mov    DWORD PTR [eax+edx*4],0x1
10000a7f:	eb 31                	jmp    10000ab2 <Floppy::motor(int, bool)+0x10e>
10000a81:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000a84:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10000a87:	83 c2 58             	add    edx,0x58
10000a8a:	8b 04 90             	mov    eax,DWORD PTR [eax+edx*4]
10000a8d:	83 f8 01             	cmp    eax,0x1
10000a90:	75 20                	jne    10000ab2 <Floppy::motor(int, bool)+0x10e>
10000a92:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000a95:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10000a98:	83 c2 58             	add    edx,0x58
10000a9b:	c7 04 90 02 00 00 00 	mov    DWORD PTR [eax+edx*4],0x2
10000aa2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000aa5:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10000aa8:	83 c2 5c             	add    edx,0x5c
10000aab:	c7 04 90 c4 09 00 00 	mov    DWORD PTR [eax+edx*4],0x9c4
10000ab2:	90                   	nop
10000ab3:	c9                   	leave  
10000ab4:	c3                   	ret    
10000ab5:	90                   	nop
10000ab6:	55                   	push   ebp
10000ab7:	89 e5                	mov    ebp,esp
10000ab9:	83 ec 08             	sub    esp,0x8
10000abc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000abf:	83 ec 04             	sub    esp,0x4
10000ac2:	68 00 02 00 00       	push   0x200
10000ac7:	68 90 0e 00 10       	push   0x10000e90	10000ac8: R_386_32	.text
10000acc:	50                   	push   eax
10000acd:	e8 fc ff ff ff       	call   10000ace <Floppy::motor(int, bool)+0x12a>	10000ace: R_386_PC32	PhysicalDisk::PhysicalDisk(char const*, int)
10000ad2:	83 c4 10             	add    esp,0x10
10000ad5:	ba 08 00 00 00       	mov    edx,0x8	10000ad6: R_386_32	vtable for FloppyDrive
10000ada:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000add:	89 10                	mov    DWORD PTR [eax],edx
10000adf:	90                   	nop
10000ae0:	c9                   	leave  
10000ae1:	c3                   	ret    

10000ae2 <FloppyDrive::configure()>:
10000ae2:	90                   	nop
10000ae3:	c3                   	ret    
10000ae4:	55                   	push   ebp
10000ae5:	89 e5                	mov    ebp,esp
10000ae7:	83 ec 08             	sub    esp,0x8
10000aea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000aed:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10000af3:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10000af6:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
10000afc:	83 ec 04             	sub    esp,0x4
10000aff:	6a 01                	push   0x1
10000b01:	52                   	push   edx
10000b02:	50                   	push   eax
10000b03:	e8 fc ff ff ff       	call   10000b04 <FloppyDrive::configure()+0x22>	10000b04: R_386_PC32	Floppy::motor(int, bool)
10000b08:	83 c4 10             	add    esp,0x10
10000b0b:	90                   	nop
10000b0c:	c9                   	leave  
10000b0d:	c3                   	ret    
10000b0e:	55                   	push   ebp
10000b0f:	89 e5                	mov    ebp,esp
10000b11:	83 ec 08             	sub    esp,0x8
10000b14:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000b17:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10000b1d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10000b20:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
10000b26:	83 ec 04             	sub    esp,0x4
10000b29:	6a 00                	push   0x0
10000b2b:	52                   	push   edx
10000b2c:	50                   	push   eax
10000b2d:	e8 fc ff ff ff       	call   10000b2e <FloppyDrive::configure()+0x4c>	10000b2e: R_386_PC32	Floppy::motor(int, bool)
10000b32:	83 c4 10             	add    esp,0x10
10000b35:	90                   	nop
10000b36:	c9                   	leave  
10000b37:	c3                   	ret    

10000b38 <FloppyDrive::floppyConfigure()>:
10000b38:	55                   	push   ebp
10000b39:	89 e5                	mov    ebp,esp
10000b3b:	83 ec 18             	sub    esp,0x18
10000b3e:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
10000b42:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
10000b46:	c6 45 f5 01          	mov    BYTE PTR [ebp-0xb],0x1
10000b4a:	c7 45 f0 08 00 00 00 	mov    DWORD PTR [ebp-0x10],0x8
10000b51:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
10000b58:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000b5b:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10000b61:	83 ec 08             	sub    esp,0x8
10000b64:	6a 13                	push   0x13
10000b66:	50                   	push   eax
10000b67:	e8 fc ff ff ff       	call   10000b68 <FloppyDrive::floppyConfigure()+0x30>	10000b68: R_386_PC32	Floppy::writeCommand(unsigned char)
10000b6c:	83 c4 10             	add    esp,0x10
10000b6f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000b72:	8b 90 6c 01 00 00    	mov    edx,DWORD PTR [eax+0x16c]
10000b78:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000b7b:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10000b81:	8b 00                	mov    eax,DWORD PTR [eax]
10000b83:	83 c0 24             	add    eax,0x24
10000b86:	8b 00                	mov    eax,DWORD PTR [eax]
10000b88:	83 ec 0c             	sub    esp,0xc
10000b8b:	52                   	push   edx
10000b8c:	ff d0                	call   eax
10000b8e:	83 c4 10             	add    esp,0x10
10000b91:	84 c0                	test   al,al
10000b93:	74 07                	je     10000b9c <FloppyDrive::floppyConfigure()+0x64>
10000b95:	b0 00                	mov    al,0x0
10000b97:	e9 05 01 00 00       	jmp    10000ca1 <FloppyDrive::floppyConfigure()+0x169>
10000b9c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000b9f:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10000ba5:	83 ec 08             	sub    esp,0x8
10000ba8:	6a 00                	push   0x0
10000baa:	50                   	push   eax
10000bab:	e8 fc ff ff ff       	call   10000bac <FloppyDrive::floppyConfigure()+0x74>	10000bac: R_386_PC32	Floppy::writeCommand(unsigned char)
10000bb0:	83 c4 10             	add    esp,0x10
10000bb3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000bb6:	8b 90 6c 01 00 00    	mov    edx,DWORD PTR [eax+0x16c]
10000bbc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000bbf:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10000bc5:	8b 00                	mov    eax,DWORD PTR [eax]
10000bc7:	83 c0 24             	add    eax,0x24
10000bca:	8b 00                	mov    eax,DWORD PTR [eax]
10000bcc:	83 ec 0c             	sub    esp,0xc
10000bcf:	52                   	push   edx
10000bd0:	ff d0                	call   eax
10000bd2:	83 c4 10             	add    esp,0x10
10000bd5:	84 c0                	test   al,al
10000bd7:	74 07                	je     10000be0 <FloppyDrive::floppyConfigure()+0xa8>
10000bd9:	b0 00                	mov    al,0x0
10000bdb:	e9 c1 00 00 00       	jmp    10000ca1 <FloppyDrive::floppyConfigure()+0x169>
10000be0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000be3:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10000be9:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
10000bed:	c1 e2 06             	shl    edx,0x6
10000bf0:	88 d1                	mov    cl,dl
10000bf2:	0f b6 55 f6          	movzx  edx,BYTE PTR [ebp-0xa]
10000bf6:	c1 e2 05             	shl    edx,0x5
10000bf9:	09 d1                	or     ecx,edx
10000bfb:	0f b6 55 f5          	movzx  edx,BYTE PTR [ebp-0xb]
10000bff:	c1 e2 04             	shl    edx,0x4
10000c02:	09 d1                	or     ecx,edx
10000c04:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
10000c07:	4a                   	dec    edx
10000c08:	09 ca                	or     edx,ecx
10000c0a:	0f b6 d2             	movzx  edx,dl
10000c0d:	83 ec 08             	sub    esp,0x8
10000c10:	52                   	push   edx
10000c11:	50                   	push   eax
10000c12:	e8 fc ff ff ff       	call   10000c13 <FloppyDrive::floppyConfigure()+0xdb>	10000c13: R_386_PC32	Floppy::writeCommand(unsigned char)
10000c17:	83 c4 10             	add    esp,0x10
10000c1a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000c1d:	8b 90 6c 01 00 00    	mov    edx,DWORD PTR [eax+0x16c]
10000c23:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000c26:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10000c2c:	8b 00                	mov    eax,DWORD PTR [eax]
10000c2e:	83 c0 24             	add    eax,0x24
10000c31:	8b 00                	mov    eax,DWORD PTR [eax]
10000c33:	83 ec 0c             	sub    esp,0xc
10000c36:	52                   	push   edx
10000c37:	ff d0                	call   eax
10000c39:	83 c4 10             	add    esp,0x10
10000c3c:	84 c0                	test   al,al
10000c3e:	74 04                	je     10000c44 <FloppyDrive::floppyConfigure()+0x10c>
10000c40:	b0 00                	mov    al,0x0
10000c42:	eb 5d                	jmp    10000ca1 <FloppyDrive::floppyConfigure()+0x169>
10000c44:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000c47:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10000c4d:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
10000c50:	0f b6 d2             	movzx  edx,dl
10000c53:	83 ec 08             	sub    esp,0x8
10000c56:	52                   	push   edx
10000c57:	50                   	push   eax
10000c58:	e8 fc ff ff ff       	call   10000c59 <FloppyDrive::floppyConfigure()+0x121>	10000c59: R_386_PC32	Floppy::writeCommand(unsigned char)
10000c5d:	83 c4 10             	add    esp,0x10
10000c60:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000c63:	8b 90 6c 01 00 00    	mov    edx,DWORD PTR [eax+0x16c]
10000c69:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000c6c:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10000c72:	8b 00                	mov    eax,DWORD PTR [eax]
10000c74:	83 c0 24             	add    eax,0x24
10000c77:	8b 00                	mov    eax,DWORD PTR [eax]
10000c79:	83 ec 0c             	sub    esp,0xc
10000c7c:	52                   	push   edx
10000c7d:	ff d0                	call   eax
10000c7f:	83 c4 10             	add    esp,0x10
10000c82:	84 c0                	test   al,al
10000c84:	74 04                	je     10000c8a <FloppyDrive::floppyConfigure()+0x152>
10000c86:	b0 00                	mov    al,0x0
10000c88:	eb 17                	jmp    10000ca1 <FloppyDrive::floppyConfigure()+0x169>
10000c8a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000c8d:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10000c93:	8a 55 f5             	mov    dl,BYTE PTR [ebp-0xb]
10000c96:	83 f2 01             	xor    edx,0x1
10000c99:	88 90 85 01 00 00    	mov    BYTE PTR [eax+0x185],dl
10000c9f:	b0 01                	mov    al,0x1
10000ca1:	c9                   	leave  
10000ca2:	c3                   	ret    
10000ca3:	90                   	nop

10000ca4 <FloppyDrive::open(int, int, void*)>:
10000ca4:	55                   	push   ebp
10000ca5:	89 e5                	mov    ebp,esp
10000ca7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000caa:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
10000cad:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
10000cb3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000cb6:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10000cb9:	89 90 70 01 00 00    	mov    DWORD PTR [eax+0x170],edx
10000cbf:	b8 00 00 00 00       	mov    eax,0x0
10000cc4:	5d                   	pop    ebp
10000cc5:	c3                   	ret    

10000cc6 <FloppyDrive::close(int, int, void*)>:
10000cc6:	b8 00 00 00 00       	mov    eax,0x0
10000ccb:	c3                   	ret    

10000ccc <Floppy::~Floppy()>:
10000ccc:	55                   	push   ebp
10000ccd:	89 e5                	mov    ebp,esp
10000ccf:	83 ec 08             	sub    esp,0x8
10000cd2:	ba 08 00 00 00       	mov    edx,0x8	10000cd3: R_386_32	vtable for Floppy
10000cd7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000cda:	89 10                	mov    DWORD PTR [eax],edx
10000cdc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000cdf:	83 ec 0c             	sub    esp,0xc
10000ce2:	50                   	push   eax
10000ce3:	e8 fc ff ff ff       	call   10000ce4 <Floppy::~Floppy()+0x18>	10000ce4: R_386_PC32	HardDiskController::~HardDiskController()
10000ce8:	83 c4 10             	add    esp,0x10
10000ceb:	90                   	nop
10000cec:	c9                   	leave  
10000ced:	c3                   	ret    

10000cee <Floppy::~Floppy()>:
10000cee:	55                   	push   ebp
10000cef:	89 e5                	mov    ebp,esp
10000cf1:	83 ec 08             	sub    esp,0x8
10000cf4:	83 ec 0c             	sub    esp,0xc
10000cf7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000cfa:	e8 fc ff ff ff       	call   10000cfb <Floppy::~Floppy()+0xd>	10000cfb: R_386_PC32	Floppy::~Floppy()
10000cff:	83 c4 10             	add    esp,0x10
10000d02:	83 ec 08             	sub    esp,0x8
10000d05:	68 a8 01 00 00       	push   0x1a8
10000d0a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000d0d:	e8 fc ff ff ff       	call   10000d0e <Floppy::~Floppy()+0x20>	10000d0e: R_386_PC32	operator delete(void*, unsigned long)
10000d12:	83 c4 10             	add    esp,0x10
10000d15:	c9                   	leave  
10000d16:	c3                   	ret    
10000d17:	90                   	nop
10000d18:	96                   	xchg   esi,eax
10000d19:	00 00                	add    BYTE PTR [eax],al
10000d1b:	00 2c 01             	add    BYTE PTR [ecx+eax*1],ch
10000d1e:	00 00                	add    BYTE PTR [eax],al
10000d20:	41                   	inc    ecx
10000d21:	42                   	inc    edx
10000d22:	43                   	inc    ebx
10000d23:	20 31                	and    BYTE PTR [ecx],dh
10000d25:	2e 0a 00             	or     al,BYTE PTR cs:[eax]
10000d28:	41                   	inc    ecx
10000d29:	42                   	inc    edx
10000d2a:	43                   	inc    ebx
10000d2b:	20 32                	and    BYTE PTR [edx],dh
10000d2d:	2e 0a 00             	or     al,BYTE PTR cs:[eax]
10000d30:	41                   	inc    ecx
10000d31:	42                   	inc    edx
10000d32:	43                   	inc    ebx
10000d33:	20 33                	and    BYTE PTR [ebx],dh
10000d35:	2e 0a 00             	or     al,BYTE PTR cs:[eax]
10000d38:	41                   	inc    ecx
10000d39:	42                   	inc    edx
10000d3a:	43                   	inc    ebx
10000d3b:	20 34 2e             	and    BYTE PTR [esi+ebp*1],dh
10000d3e:	0a 00                	or     al,BYTE PTR [eax]
10000d40:	46                   	inc    esi
10000d41:	6c                   	ins    BYTE PTR es:[edi],dx
10000d42:	6f                   	outs   dx,DWORD PTR ds:[esi]
10000d43:	70 70                	jo     10000db5 <Floppy::~Floppy()+0xc7>
10000d45:	79 20                	jns    10000d67 <Floppy::~Floppy()+0x79>
10000d47:	44                   	inc    esp
10000d48:	69 73 6b 20 43 6f 6e 	imul   esi,DWORD PTR [ebx+0x6b],0x6e6f4320
10000d4f:	74 72                	je     10000dc3 <Floppy::~Floppy()+0xd5>
10000d51:	6f                   	outs   dx,DWORD PTR ds:[esi]
10000d52:	6c                   	ins    BYTE PTR es:[edi],dx
10000d53:	6c                   	ins    BYTE PTR es:[edi],dx
10000d54:	65 72 00             	gs jb  10000d57 <Floppy::~Floppy()+0x69>
10000d57:	46                   	inc    esi
10000d58:	6c                   	ins    BYTE PTR es:[edi],dx
10000d59:	6f                   	outs   dx,DWORD PTR ds:[esi]
10000d5a:	70 70                	jo     10000dcc <Floppy::~Floppy()+0xde>
10000d5c:	79 3a                	jns    10000d98 <Floppy::~Floppy()+0xaa>
10000d5e:	3a 46 6c             	cmp    al,BYTE PTR [esi+0x6c]
10000d61:	6f                   	outs   dx,DWORD PTR ds:[esi]
10000d62:	70 70                	jo     10000dd4 <Floppy::~Floppy()+0xe6>
10000d64:	79 28                	jns    10000d8e <Floppy::~Floppy()+0xa0>
10000d66:	29 0a                	sub    DWORD PTR [edx],ecx
10000d68:	00 00                	add    BYTE PTR [eax],al
10000d6a:	00 00                	add    BYTE PTR [eax],al
10000d6c:	50                   	push   eax
10000d6d:	52                   	push   edx
10000d6e:	45                   	inc    ebp
10000d6f:	56                   	push   esi
10000d70:	49                   	dec    ecx
10000d71:	4f                   	dec    edi
10000d72:	55                   	push   ebp
10000d73:	53                   	push   ebx
10000d74:	20 43 4f             	and    BYTE PTR [ebx+0x4f],al
10000d77:	4d                   	dec    ebp
10000d78:	4d                   	dec    ebp
10000d79:	41                   	inc    ecx
10000d7a:	4e                   	dec    esi
10000d7b:	44                   	inc    esp
10000d7c:	20 46 41             	and    BYTE PTR [esi+0x41],al
10000d7f:	49                   	dec    ecx
10000d80:	4c                   	dec    esp
10000d81:	45                   	inc    ebp
10000d82:	44                   	inc    esp
10000d83:	2c 20                	sub    al,0x20
10000d85:	43                   	inc    ebx
10000d86:	41                   	inc    ecx
10000d87:	55                   	push   ebp
10000d88:	47                   	inc    edi
10000d89:	48                   	dec    eax
10000d8a:	54                   	push   esp
10000d8b:	20 42 59             	and    BYTE PTR [edx+0x59],al
10000d8e:	20 77 72             	and    BYTE PTR [edi+0x72],dh
10000d91:	69 74 65 43 6f 6d 6d 61 	imul   esi,DWORD PTR [ebp+eiz*2+0x43],0x616d6d6f
10000d99:	6e                   	outs   dx,BYTE PTR ds:[esi]
10000d9a:	64 00 44 49 44       	add    BYTE PTR fs:[ecx+ecx*2+0x44],al
10000d9f:	20 4e 4f             	and    BYTE PTR [esi+0x4f],cl
10000da2:	54                   	push   esp
10000da3:	20 43 48             	and    BYTE PTR [ebx+0x48],al
10000da6:	45                   	inc    ebp
10000da7:	43                   	inc    ebx
10000da8:	4b                   	dec    ebx
10000da9:	20 46 4f             	and    BYTE PTR [esi+0x4f],al
10000dac:	52                   	push   edx
10000dad:	20 46 41             	and    BYTE PTR [esi+0x41],al
10000db0:	49                   	dec    ecx
10000db1:	4c                   	dec    esp
10000db2:	55                   	push   ebp
10000db3:	52                   	push   edx
10000db4:	45                   	inc    ebp
10000db5:	20 42 45             	and    BYTE PTR [edx+0x45],al
10000db8:	46                   	inc    esi
10000db9:	4f                   	dec    edi
10000dba:	52                   	push   edx
10000dbb:	45                   	inc    ebp
10000dbc:	20 77 72             	and    BYTE PTR [edi+0x72],dh
10000dbf:	69 74 65 43 6f 6d 6d 61 	imul   esi,DWORD PTR [ebp+eiz*2+0x43],0x616d6d6f
10000dc7:	6e                   	outs   dx,BYTE PTR ds:[esi]
10000dc8:	64 00 46 6c          	add    BYTE PTR fs:[esi+0x6c],al
10000dcc:	6f                   	outs   dx,DWORD PTR ds:[esi]
10000dcd:	70 70                	jo     10000e3f <Floppy::~Floppy()+0x151>
10000dcf:	79 3a                	jns    10000e0b <Floppy::~Floppy()+0x11d>
10000dd1:	3a 64 72 69          	cmp    ah,BYTE PTR [edx+esi*2+0x69]
10000dd5:	76 65                	jbe    10000e3c <Floppy::~Floppy()+0x14e>
10000dd7:	44                   	inc    esp
10000dd8:	65 74 65             	gs je  10000e40 <Floppy::~Floppy()+0x152>
10000ddb:	63 74 69 6f          	arpl   WORD PTR [ecx+ebp*2+0x6f],si
10000ddf:	6e                   	outs   dx,BYTE PTR ds:[esi]
10000de0:	28 29                	sub    BYTE PTR [ecx],ch
10000de2:	0a 00                	or     al,BYTE PTR [eax]
10000de4:	44                   	inc    esp
10000de5:	72 69                	jb     10000e50 <Floppy::~Floppy()+0x162>
10000de7:	76 65                	jbe    10000e4e <Floppy::~Floppy()+0x160>
10000de9:	20 74 79 70          	and    BYTE PTR [ecx+edi*2+0x70],dh
10000ded:	65 20 30             	and    BYTE PTR gs:[eax],dh
10000df0:	3a 20                	cmp    ah,BYTE PTR [eax]
10000df2:	25 73 0a 00 44       	and    eax,0x44000a73
10000df7:	72 69                	jb     10000e62 <Floppy::~Floppy()+0x174>
10000df9:	76 65                	jbe    10000e60 <Floppy::~Floppy()+0x172>
10000dfb:	20 74 79 70          	and    BYTE PTR [ecx+edi*2+0x70],dh
10000dff:	65 20 31             	and    BYTE PTR gs:[ecx],dh
10000e02:	3a 20                	cmp    ah,BYTE PTR [eax]
10000e04:	25 73 0a 00 46       	and    eax,0x46000a73
10000e09:	6c                   	ins    BYTE PTR es:[edi],dx
10000e0a:	6f                   	outs   dx,DWORD PTR ds:[esi]
10000e0b:	70 70                	jo     10000e7d <Floppy::~Floppy()+0x18f>
10000e0d:	79 3a                	jns    10000e49 <Floppy::~Floppy()+0x15b>
10000e0f:	3a 6f 70             	cmp    ch,BYTE PTR [edi+0x70]
10000e12:	65 6e                	outs   dx,BYTE PTR gs:[esi]
10000e14:	20 31                	and    BYTE PTR [ecx],dh
10000e16:	0a 00                	or     al,BYTE PTR [eax]
10000e18:	46                   	inc    esi
10000e19:	6c                   	ins    BYTE PTR es:[edi],dx
10000e1a:	6f                   	outs   dx,DWORD PTR ds:[esi]
10000e1b:	70 70                	jo     10000e8d <Floppy::~Floppy()+0x19f>
10000e1d:	79 3a                	jns    10000e59 <Floppy::~Floppy()+0x16b>
10000e1f:	3a 6f 70             	cmp    ch,BYTE PTR [edi+0x70]
10000e22:	65 6e                	outs   dx,BYTE PTR gs:[esi]
10000e24:	20 32                	and    BYTE PTR [edx],dh
10000e26:	0a 00                	or     al,BYTE PTR [eax]
10000e28:	46                   	inc    esi
10000e29:	6c                   	ins    BYTE PTR es:[edi],dx
10000e2a:	6f                   	outs   dx,DWORD PTR ds:[esi]
10000e2b:	70 70                	jo     10000e9d <Floppy::~Floppy()+0x1af>
10000e2d:	79 3a                	jns    10000e69 <Floppy::~Floppy()+0x17b>
10000e2f:	3a 6f 70             	cmp    ch,BYTE PTR [edi+0x70]
10000e32:	65 6e                	outs   dx,BYTE PTR gs:[esi]
10000e34:	20 33                	and    BYTE PTR [ebx],dh
10000e36:	0a 00                	or     al,BYTE PTR [eax]
10000e38:	46                   	inc    esi
10000e39:	6c                   	ins    BYTE PTR es:[edi],dx
10000e3a:	6f                   	outs   dx,DWORD PTR ds:[esi]
10000e3b:	70 70                	jo     10000ead <vtable for FloppyDrive+0x9>
10000e3d:	79 3a                	jns    10000e79 <Floppy::~Floppy()+0x18b>
10000e3f:	3a 6f 70             	cmp    ch,BYTE PTR [edi+0x70]
10000e42:	65 6e                	outs   dx,BYTE PTR gs:[esi]
10000e44:	20 34 0a             	and    BYTE PTR [edx+ecx*1],dh
10000e47:	00 46 6c             	add    BYTE PTR [esi+0x6c],al
10000e4a:	6f                   	outs   dx,DWORD PTR ds:[esi]
10000e4b:	70 70                	jo     10000ebd <vtable for FloppyDrive+0x19>
10000e4d:	79 3a                	jns    10000e89 <Floppy::~Floppy()+0x19b>
10000e4f:	3a 6f 70             	cmp    ch,BYTE PTR [edi+0x70]
10000e52:	65 6e                	outs   dx,BYTE PTR gs:[esi]
10000e54:	20 35 0a 00 46 6c    	and    BYTE PTR ds:0x6c46000a,dh
10000e5a:	6f                   	outs   dx,DWORD PTR ds:[esi]
10000e5b:	70 70                	jo     10000ecd <vtable for FloppyDrive+0x29>
10000e5d:	79 3a                	jns    10000e99 <Floppy::~Floppy()+0x1ab>
10000e5f:	3a 6f 70             	cmp    ch,BYTE PTR [edi+0x70]
10000e62:	65 6e                	outs   dx,BYTE PTR gs:[esi]
10000e64:	20 36                	and    BYTE PTR [esi],dh
10000e66:	0a 00                	or     al,BYTE PTR [eax]
10000e68:	46                   	inc    esi
10000e69:	6c                   	ins    BYTE PTR es:[edi],dx
10000e6a:	6f                   	outs   dx,DWORD PTR ds:[esi]
10000e6b:	70 70                	jo     10000edd <vtable for FloppyDrive+0x39>
10000e6d:	79 3a                	jns    10000ea9 <vtable for FloppyDrive+0x5>
10000e6f:	3a 6f 70             	cmp    ch,BYTE PTR [edi+0x70]
10000e72:	65 6e                	outs   dx,BYTE PTR gs:[esi]
10000e74:	20 37                	and    BYTE PTR [edi],dh
10000e76:	0a 00                	or     al,BYTE PTR [eax]
10000e78:	46                   	inc    esi
10000e79:	6c                   	ins    BYTE PTR es:[edi],dx
10000e7a:	6f                   	outs   dx,DWORD PTR ds:[esi]
10000e7b:	70 70                	jo     10000eed <vtable for Floppy+0xd>
10000e7d:	79 3a                	jns    10000eb9 <vtable for FloppyDrive+0x15>
10000e7f:	3a 6f 70             	cmp    ch,BYTE PTR [edi+0x70]
10000e82:	65 6e                	outs   dx,BYTE PTR gs:[esi]
10000e84:	20 38                	and    BYTE PTR [eax],bh
10000e86:	0a 00                	or     al,BYTE PTR [eax]
10000e88:	55                   	push   ebp
10000e89:	4e                   	dec    esi
10000e8a:	49                   	dec    ecx
10000e8b:	4d                   	dec    ebp
10000e8c:	50                   	push   eax
10000e8d:	4c                   	dec    esp
10000e8e:	2e 00 46 6c          	add    BYTE PTR cs:[esi+0x6c],al
10000e92:	6f                   	outs   dx,DWORD PTR ds:[esi]
10000e93:	70 70                	jo     10000f05 <vtable for Floppy+0x25>
10000e95:	79 20                	jns    10000eb7 <vtable for FloppyDrive+0x13>
10000e97:	44                   	inc    esp
10000e98:	69 73 6b 20 44 72 69 	imul   esi,DWORD PTR [ebx+0x6b],0x69724420
10000e9f:	76 65                	jbe    10000f06 <vtable for Floppy+0x26>
10000ea1:	00 66 90             	add    BYTE PTR [esi-0x70],ah

10000ea4 <vtable for FloppyDrive>:
	...
	10000eb4: R_386_32	FloppyDrive::open(int, int, void*)
	10000eb8: R_386_32	FloppyDrive::close(int, int, void*)
	10000ebc: R_386_32	Device::hibernate()
	10000ec0: R_386_32	Device::wake()
	10000ec4: R_386_32	Device::detect()
	10000ec8: R_386_32	Device::disableLegacy()
	10000ecc: R_386_32	Device::powerSaving(PowerSavingLevel)
	10000ed0: R_386_32	PhysicalDisk::eject()
	10000ed4: R_386_32	__cxa_pure_virtual
	10000ed8: R_386_32	__cxa_pure_virtual
	10000edc: R_386_32	FloppyDrive::configure()

10000ee0 <vtable for Floppy>:
	...
	10000ee8: R_386_32	Floppy::~Floppy()
	10000eec: R_386_32	Floppy::~Floppy()
	10000ef0: R_386_32	Floppy::open(int, int, void*)
	10000ef4: R_386_32	Floppy::close(int, int, void*)
	10000ef8: R_386_32	Device::hibernate()
	10000efc: R_386_32	Device::wake()
	10000f00: R_386_32	Device::detect()
	10000f04: R_386_32	Device::disableLegacy()
	10000f08: R_386_32	Device::powerSaving(PowerSavingLevel)
	10000f0c: R_386_32	Floppy::wasFailure()
	10000f10: R_386_32	Floppy::configure()
