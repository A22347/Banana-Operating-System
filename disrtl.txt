
packages/banana/32/0002/rtl8139.sys:     file format elf32-i386


Disassembly of section .text:

10000000 <RTL8139::RTL8139()-0x60>:
10000000:	57                   	push   edi
10000001:	56                   	push   esi
10000002:	53                   	push   ebx
10000003:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
10000007:	83 ec 0c             	sub    esp,0xc
1000000a:	56                   	push   esi
1000000b:	81 c6 18 01 00 00    	add    esi,0x118
10000011:	e8 fc ff ff ff       	call   10000012 <RTL8139::RTL8139()-0x4e>	10000012: R_386_PC32	Device::getParent()
10000016:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
1000001d:	89 c7                	mov    edi,eax
1000001f:	e8 fc ff ff ff       	call   10000020 <RTL8139::RTL8139()-0x40>	10000020: R_386_PC32	operator new(unsigned long)
10000024:	89 04 24             	mov    DWORD PTR [esp],eax
10000027:	89 c3                	mov    ebx,eax
10000029:	e8 fc ff ff ff       	call   1000002a <RTL8139::RTL8139()-0x36>	1000002a: R_386_PC32	RTL8139::RTL8139()
1000002e:	58                   	pop    eax
1000002f:	5a                   	pop    edx
10000030:	53                   	push   ebx
10000031:	57                   	push   edi
10000032:	e8 fc ff ff ff       	call   10000033 <RTL8139::RTL8139()-0x2d>	10000033: R_386_PC32	Device::addChild(Device*)
10000037:	83 ec 1c             	sub    esp,0x1c
1000003a:	b9 09 00 00 00       	mov    ecx,0x9
1000003f:	89 e7                	mov    edi,esp
10000041:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000043:	53                   	push   ebx
10000044:	e8 fc ff ff ff       	call   10000045 <RTL8139::RTL8139()-0x1b>	10000045: R_386_PC32	Device::preOpenPCI(PCIDeviceInfo)
10000049:	83 c4 30             	add    esp,0x30
1000004c:	6a 00                	push   0x0
1000004e:	6a 00                	push   0x0
10000050:	6a 00                	push   0x0
10000052:	53                   	push   ebx
10000053:	e8 fc ff ff ff       	call   10000054 <RTL8139::RTL8139()-0xc>	10000054: R_386_PC32	RTL8139::open_(int, int, void*)
10000058:	83 c4 10             	add    esp,0x10
1000005b:	5b                   	pop    ebx
1000005c:	5e                   	pop    esi
1000005d:	5f                   	pop    edi
1000005e:	c3                   	ret    
1000005f:	90                   	nop

10000060 <RTL8139::RTL8139()>:
10000060:	55                   	push   ebp
10000061:	89 e5                	mov    ebp,esp
10000063:	83 ec 08             	sub    esp,0x8
10000066:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000069:	83 ec 08             	sub    esp,0x8
1000006c:	68 b0 04 00 10       	push   0x100004b0	1000006d: R_386_32	.text
10000071:	50                   	push   eax
10000072:	e8 fc ff ff ff       	call   10000073 <RTL8139::RTL8139()+0x13>	10000073: R_386_PC32	NIC::NIC(char const*)
10000077:	83 c4 10             	add    esp,0x10
1000007a:	ba 08 00 00 00       	mov    edx,0x8	1000007b: R_386_32	vtable for RTL8139
1000007f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000082:	89 10                	mov    DWORD PTR [eax],edx
10000084:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000087:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
10000091:	83 ec 0c             	sub    esp,0xc
10000094:	68 cc 04 00 10       	push   0x100004cc	10000095: R_386_32	.text
10000099:	e8 fc ff ff ff       	call   1000009a <RTL8139::RTL8139()+0x3a>	1000009a: R_386_PC32	Dbg::kprintf(char const*, ...)
1000009e:	83 c4 10             	add    esp,0x10
100000a1:	90                   	nop
100000a2:	c9                   	leave  
100000a3:	c3                   	ret    

100000a4 <RTL8139::reset()>:
100000a4:	56                   	push   esi
100000a5:	53                   	push   ebx
100000a6:	be 81 38 01 00       	mov    esi,0x13881
100000ab:	51                   	push   ecx
100000ac:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
100000b0:	6a 37                	push   0x37
100000b2:	6a 10                	push   0x10
100000b4:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
100000ba:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	100000bc: R_386_32	thePCI
100000c0:	e8 fc ff ff ff       	call   100000c1 <RTL8139::reset()+0x1d>	100000c1: R_386_PC32	PCI::writeBAR8(unsigned int, unsigned char, int)
100000c5:	83 c4 10             	add    esp,0x10
100000c8:	52                   	push   edx
100000c9:	6a 37                	push   0x37
100000cb:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
100000d1:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	100000d3: R_386_32	thePCI
100000d7:	e8 fc ff ff ff       	call   100000d8 <RTL8139::reset()+0x34>	100000d8: R_386_PC32	PCI::readBAR8(unsigned int, int)
100000dc:	83 c4 10             	add    esp,0x10
100000df:	a8 10                	test   al,0x10
100000e1:	74 13                	je     100000f6 <RTL8139::reset()+0x52>
100000e3:	4e                   	dec    esi
100000e4:	75 e2                	jne    100000c8 <RTL8139::reset()+0x24>
100000e6:	83 ec 0c             	sub    esp,0xc
100000e9:	68 d7 04 00 10       	push   0x100004d7	100000ea: R_386_32	.text
100000ee:	e8 fc ff ff ff       	call   100000ef <RTL8139::reset()+0x4b>	100000ef: R_386_PC32	KePanic(char const*)
100000f3:	83 c4 10             	add    esp,0x10
100000f6:	c7 83 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x16c],0x0
10000100:	58                   	pop    eax
10000101:	5b                   	pop    ebx
10000102:	5e                   	pop    esi
10000103:	c3                   	ret    

10000104 <rtl8139IRQHandler(regs*, void*)>:
10000104:	53                   	push   ebx
10000105:	83 ec 0c             	sub    esp,0xc
10000108:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
1000010c:	6a 3e                	push   0x3e
1000010e:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
10000114:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000116: R_386_32	thePCI
1000011a:	e8 fc ff ff ff       	call   1000011b <rtl8139IRQHandler(regs*, void*)+0x17>	1000011b: R_386_PC32	PCI::readBAR16(unsigned int, int)
1000011f:	83 c4 10             	add    esp,0x10
10000122:	a8 01                	test   al,0x1
10000124:	74 0a                	je     10000130 <rtl8139IRQHandler(regs*, void*)+0x2c>
10000126:	83 ec 0c             	sub    esp,0xc
10000129:	68 e8 04 00 10       	push   0x100004e8	1000012a: R_386_32	.text
1000012e:	eb 28                	jmp    10000158 <rtl8139IRQHandler(regs*, void*)+0x54>
10000130:	a8 04                	test   al,0x4
10000132:	74 0a                	je     1000013e <rtl8139IRQHandler(regs*, void*)+0x3a>
10000134:	83 ec 0c             	sub    esp,0xc
10000137:	68 fc 04 00 10       	push   0x100004fc	10000138: R_386_32	.text
1000013c:	eb 1a                	jmp    10000158 <rtl8139IRQHandler(regs*, void*)+0x54>
1000013e:	a8 02                	test   al,0x2
10000140:	74 0a                	je     1000014c <rtl8139IRQHandler(regs*, void*)+0x48>
10000142:	83 ec 0c             	sub    esp,0xc
10000145:	68 0c 05 00 10       	push   0x1000050c	10000146: R_386_32	.text
1000014a:	eb 0c                	jmp    10000158 <rtl8139IRQHandler(regs*, void*)+0x54>
1000014c:	a8 08                	test   al,0x8
1000014e:	74 10                	je     10000160 <rtl8139IRQHandler(regs*, void*)+0x5c>
10000150:	83 ec 0c             	sub    esp,0xc
10000153:	68 29 05 00 10       	push   0x10000529	10000154: R_386_32	.text
10000158:	e8 fc ff ff ff       	call   10000159 <rtl8139IRQHandler(regs*, void*)+0x55>	10000159: R_386_PC32	Dbg::kprintf(char const*, ...)
1000015d:	83 c4 10             	add    esp,0x10
10000160:	6a 3e                	push   0x3e
10000162:	6a 01                	push   0x1
10000164:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
1000016a:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	1000016c: R_386_32	thePCI
10000170:	e8 fc ff ff ff       	call   10000171 <rtl8139IRQHandler(regs*, void*)+0x6d>	10000171: R_386_PC32	PCI::writeBAR16(unsigned int, unsigned short, int)
10000175:	83 c4 18             	add    esp,0x18
10000178:	5b                   	pop    ebx
10000179:	c3                   	ret    

1000017a <RTL8139::open(int, int, void*)>:
1000017a:	31 c0                	xor    eax,eax
1000017c:	c3                   	ret    
1000017d:	90                   	nop

1000017e <RTL8139::open_(int, int, void*)>:
1000017e:	57                   	push   edi
1000017f:	31 ff                	xor    edi,edi
10000181:	56                   	push   esi
10000182:	53                   	push   ebx
10000183:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
10000187:	83 ec 0c             	sub    esp,0xc
1000018a:	6a 04                	push   0x4
1000018c:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
10000193:	50                   	push   eax
10000194:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
1000019b:	50                   	push   eax
1000019c:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
100001a3:	50                   	push   eax
100001a4:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	100001a6: R_386_32	thePCI
100001aa:	e8 fc ff ff ff       	call   100001ab <RTL8139::open_(int, int, void*)+0x2d>	100001ab: R_386_PC32	PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)
100001af:	83 c4 18             	add    esp,0x18
100001b2:	83 c8 04             	or     eax,0x4
100001b5:	0f b7 c0             	movzx  eax,ax
100001b8:	50                   	push   eax
100001b9:	6a 04                	push   0x4
100001bb:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
100001c2:	50                   	push   eax
100001c3:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
100001ca:	50                   	push   eax
100001cb:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
100001d2:	50                   	push   eax
100001d3:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	100001d5: R_386_32	thePCI
100001d9:	e8 fc ff ff ff       	call   100001da <RTL8139::open_(int, int, void*)+0x5c>	100001da: R_386_PC32	PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)
100001de:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
100001e4:	83 c4 20             	add    esp,0x20
100001e7:	89 83 58 01 00 00    	mov    DWORD PTR [ebx+0x158],eax
100001ed:	6a 52                	push   0x52
100001ef:	6a 00                	push   0x0
100001f1:	50                   	push   eax
100001f2:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	100001f4: R_386_32	thePCI
100001f8:	e8 fc ff ff ff       	call   100001f9 <RTL8139::open_(int, int, void*)+0x7b>	100001f9: R_386_PC32	PCI::writeBAR8(unsigned int, unsigned char, int)
100001fd:	89 1c 24             	mov    DWORD PTR [esp],ebx
10000200:	e8 fc ff ff ff       	call   10000201 <RTL8139::open_(int, int, void*)+0x83>	10000201: R_386_PC32	RTL8139::reset()
10000205:	83 c4 0c             	add    esp,0xc
10000208:	6a 00                	push   0x0
1000020a:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
10000210:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000212: R_386_32	thePCI
10000216:	e8 fc ff ff ff       	call   10000217 <RTL8139::open_(int, int, void*)+0x99>	10000217: R_386_PC32	PCI::readBAR8(unsigned int, int)
1000021b:	83 c4 0c             	add    esp,0xc
1000021e:	0f b6 c0             	movzx  eax,al
10000221:	89 fa                	mov    edx,edi
10000223:	0f a4 c2 08          	shld   edx,eax,0x8
10000227:	c1 e0 08             	shl    eax,0x8
1000022a:	89 93 68 01 00 00    	mov    DWORD PTR [ebx+0x168],edx
10000230:	89 83 64 01 00 00    	mov    DWORD PTR [ebx+0x164],eax
10000236:	6a 01                	push   0x1
10000238:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
1000023e:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000240: R_386_32	thePCI
10000244:	e8 fc ff ff ff       	call   10000245 <RTL8139::open_(int, int, void*)+0xc7>	10000245: R_386_PC32	PCI::readBAR8(unsigned int, int)
10000249:	8b 8b 68 01 00 00    	mov    ecx,DWORD PTR [ebx+0x168]
1000024f:	83 c4 0c             	add    esp,0xc
10000252:	0f b6 c0             	movzx  eax,al
10000255:	0b 83 64 01 00 00    	or     eax,DWORD PTR [ebx+0x164]
1000025b:	89 c2                	mov    edx,eax
1000025d:	0f a4 d1 08          	shld   ecx,edx,0x8
10000261:	c1 e2 08             	shl    edx,0x8
10000264:	89 8b 68 01 00 00    	mov    DWORD PTR [ebx+0x168],ecx
1000026a:	89 93 64 01 00 00    	mov    DWORD PTR [ebx+0x164],edx
10000270:	6a 02                	push   0x2
10000272:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
10000278:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	1000027a: R_386_32	thePCI
1000027e:	e8 fc ff ff ff       	call   1000027f <RTL8139::open_(int, int, void*)+0x101>	1000027f: R_386_PC32	PCI::readBAR8(unsigned int, int)
10000283:	8b 8b 68 01 00 00    	mov    ecx,DWORD PTR [ebx+0x168]
10000289:	83 c4 0c             	add    esp,0xc
1000028c:	89 cf                	mov    edi,ecx
1000028e:	0f b6 c0             	movzx  eax,al
10000291:	0b 83 64 01 00 00    	or     eax,DWORD PTR [ebx+0x164]
10000297:	89 c6                	mov    esi,eax
10000299:	0f a4 f7 08          	shld   edi,esi,0x8
1000029d:	c1 e6 08             	shl    esi,0x8
100002a0:	89 bb 68 01 00 00    	mov    DWORD PTR [ebx+0x168],edi
100002a6:	89 b3 64 01 00 00    	mov    DWORD PTR [ebx+0x164],esi
100002ac:	6a 03                	push   0x3
100002ae:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
100002b4:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	100002b6: R_386_32	thePCI
100002ba:	e8 fc ff ff ff       	call   100002bb <RTL8139::open_(int, int, void*)+0x13d>	100002bb: R_386_PC32	PCI::readBAR8(unsigned int, int)
100002bf:	8b 8b 68 01 00 00    	mov    ecx,DWORD PTR [ebx+0x168]
100002c5:	83 c4 0c             	add    esp,0xc
100002c8:	0f b6 c0             	movzx  eax,al
100002cb:	0b 83 64 01 00 00    	or     eax,DWORD PTR [ebx+0x164]
100002d1:	89 c2                	mov    edx,eax
100002d3:	0f a4 d1 08          	shld   ecx,edx,0x8
100002d7:	c1 e2 08             	shl    edx,0x8
100002da:	89 8b 68 01 00 00    	mov    DWORD PTR [ebx+0x168],ecx
100002e0:	89 93 64 01 00 00    	mov    DWORD PTR [ebx+0x164],edx
100002e6:	6a 04                	push   0x4
100002e8:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
100002ee:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	100002f0: R_386_32	thePCI
100002f4:	e8 fc ff ff ff       	call   100002f5 <RTL8139::open_(int, int, void*)+0x177>	100002f5: R_386_PC32	PCI::readBAR8(unsigned int, int)
100002f9:	8b 8b 68 01 00 00    	mov    ecx,DWORD PTR [ebx+0x168]
100002ff:	0f b6 c0             	movzx  eax,al
10000302:	89 cf                	mov    edi,ecx
10000304:	0b 83 64 01 00 00    	or     eax,DWORD PTR [ebx+0x164]
1000030a:	89 c6                	mov    esi,eax
1000030c:	0f a4 f7 08          	shld   edi,esi,0x8
10000310:	c1 e6 08             	shl    esi,0x8
10000313:	89 bb 68 01 00 00    	mov    DWORD PTR [ebx+0x168],edi
10000319:	89 b3 64 01 00 00    	mov    DWORD PTR [ebx+0x164],esi
1000031f:	83 c4 0c             	add    esp,0xc
10000322:	6a 05                	push   0x5
10000324:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
1000032a:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	1000032c: R_386_32	thePCI
10000330:	e8 fc ff ff ff       	call   10000331 <RTL8139::open_(int, int, void*)+0x1b3>	10000331: R_386_PC32	PCI::readBAR8(unsigned int, int)
10000335:	83 c4 0c             	add    esp,0xc
10000338:	8b bb 68 01 00 00    	mov    edi,DWORD PTR [ebx+0x168]
1000033e:	0f b6 c0             	movzx  eax,al
10000341:	89 bb 68 01 00 00    	mov    DWORD PTR [ebx+0x168],edi
10000347:	0b 83 64 01 00 00    	or     eax,DWORD PTR [ebx+0x164]
1000034d:	89 83 64 01 00 00    	mov    DWORD PTR [ebx+0x164],eax
10000353:	57                   	push   edi
10000354:	50                   	push   eax
10000355:	68 43 05 00 10       	push   0x10000543	10000356: R_386_32	.text
1000035a:	e8 fc ff ff ff       	call   1000035b <RTL8139::open_(int, int, void*)+0x1dd>	1000035b: R_386_PC32	Dbg::kprintf(char const*, ...)
1000035f:	c7 83 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x15c],0x0
10000369:	c7 83 60 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x160],0x0
10000373:	6a 30                	push   0x30
10000375:	6a 00                	push   0x0
10000377:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
1000037d:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	1000037f: R_386_32	thePCI
10000383:	e8 fc ff ff ff       	call   10000384 <RTL8139::open_(int, int, void*)+0x206>	10000384: R_386_PC32	PCI::writeBAR32(unsigned int, unsigned int, int)
10000388:	83 c4 20             	add    esp,0x20
1000038b:	6a 3c                	push   0x3c
1000038d:	6a 05                	push   0x5
1000038f:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
10000395:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000397: R_386_32	thePCI
1000039b:	e8 fc ff ff ff       	call   1000039c <RTL8139::open_(int, int, void*)+0x21e>	1000039c: R_386_PC32	PCI::writeBAR16(unsigned int, unsigned short, int)
100003a0:	6a 44                	push   0x44
100003a2:	68 8f 00 00 00       	push   0x8f
100003a7:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
100003ad:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	100003af: R_386_32	thePCI
100003b3:	e8 fc ff ff ff       	call   100003b4 <RTL8139::open_(int, int, void*)+0x236>	100003b4: R_386_PC32	PCI::writeBAR32(unsigned int, unsigned int, int)
100003b8:	83 c4 20             	add    esp,0x20
100003bb:	6a 37                	push   0x37
100003bd:	6a 0c                	push   0xc
100003bf:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
100003c5:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	100003c7: R_386_32	thePCI
100003cb:	e8 fc ff ff ff       	call   100003cc <RTL8139::open_(int, int, void*)+0x24e>	100003cc: R_386_PC32	PCI::writeBAR8(unsigned int, unsigned char, int)
100003d0:	53                   	push   ebx
100003d1:	6a 00                	push   0x0
100003d3:	68 00 00 00 00       	push   0x0	100003d4: R_386_32	rtl8139IRQHandler(regs*, void*)
100003d8:	0f b6 83 38 01 00 00 	movzx  eax,BYTE PTR [ebx+0x138]
100003df:	50                   	push   eax
100003e0:	e8 fc ff ff ff       	call   100003e1 <RTL8139::open_(int, int, void*)+0x263>	100003e1: R_386_PC32	installIRQHandler(int, void (*)(regs*, void*), bool, void*)
100003e5:	83 c4 20             	add    esp,0x20
100003e8:	31 c0                	xor    eax,eax
100003ea:	5b                   	pop    ebx
100003eb:	5e                   	pop    esi
100003ec:	5f                   	pop    edi
100003ed:	c3                   	ret    

100003ee <RTL8139::close(int, int, void*)>:
100003ee:	31 c0                	xor    eax,eax
100003f0:	c3                   	ret    
100003f1:	90                   	nop

100003f2 <RTL8139::getMAC()>:
100003f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
100003f6:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
100003fc:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
10000402:	c3                   	ret    
10000403:	90                   	nop

10000404 <RTL8139::write(int, unsigned char*, int*)>:
10000404:	56                   	push   esi
10000405:	be a0 86 01 00       	mov    esi,0x186a0
1000040a:	53                   	push   ebx
1000040b:	53                   	push   ebx
1000040c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
10000410:	51                   	push   ecx
10000411:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
10000417:	8d 04 85 10 00 00 00 	lea    eax,[eax*4+0x10]
1000041e:	50                   	push   eax
1000041f:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
10000425:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000427: R_386_32	thePCI
1000042b:	e8 fc ff ff ff       	call   1000042c <RTL8139::write(int, unsigned char*, int*)+0x28>	1000042c: R_386_PC32	PCI::readBAR32(unsigned int, int)
10000430:	83 c4 10             	add    esp,0x10
10000433:	0f ba e0 0d          	bt     eax,0xd
10000437:	72 0a                	jb     10000443 <RTL8139::write(int, unsigned char*, int*)+0x3f>
10000439:	4e                   	dec    esi
1000043a:	75 d4                	jne    10000410 <RTL8139::write(int, unsigned char*, int*)+0xc>
1000043c:	b8 04 00 00 00       	mov    eax,0x4
10000441:	eb 5f                	jmp    100004a2 <RTL8139::write(int, unsigned char*, int*)+0x9e>
10000443:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
10000449:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
10000450:	50                   	push   eax
10000451:	6a 00                	push   0x0
10000453:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
10000459:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	1000045b: R_386_32	thePCI
1000045f:	e8 fc ff ff ff       	call   10000460 <RTL8139::write(int, unsigned char*, int*)+0x5c>	10000460: R_386_PC32	PCI::writeBAR32(unsigned int, unsigned int, int)
10000464:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
1000046a:	8d 04 85 10 00 00 00 	lea    eax,[eax*4+0x10]
10000471:	50                   	push   eax
10000472:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
10000476:	25 ff 1f 00 00       	and    eax,0x1fff
1000047b:	50                   	push   eax
1000047c:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
10000482:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000484: R_386_32	thePCI
10000488:	e8 fc ff ff ff       	call   10000489 <RTL8139::write(int, unsigned char*, int*)+0x85>	10000489: R_386_PC32	PCI::writeBAR32(unsigned int, unsigned int, int)
1000048d:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
10000493:	83 c4 20             	add    esp,0x20
10000496:	40                   	inc    eax
10000497:	83 e0 03             	and    eax,0x3
1000049a:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
100004a0:	31 c0                	xor    eax,eax
100004a2:	5a                   	pop    edx
100004a3:	5b                   	pop    ebx
100004a4:	5e                   	pop    esi
100004a5:	c3                   	ret    
100004a6:	66 90                	xchg   ax,ax
100004a8:	80 00 00             	add    BYTE PTR [eax],0x0
100004ab:	00 80 00 00 00 52    	add    BYTE PTR [eax+0x52000000],al
100004b1:	54                   	push   esp
100004b2:	4c                   	dec    esp
100004b3:	38 31                	cmp    BYTE PTR [ecx],dh
100004b5:	33 39                	xor    edi,DWORD PTR [ecx]
100004b7:	20 45 74             	and    BYTE PTR [ebp+0x74],al
100004ba:	68 65 72 6e 65       	push   0x656e7265
100004bf:	74 20                	je     100004e1 <RTL8139::write(int, unsigned char*, int*)+0xdd>
100004c1:	43                   	inc    ebx
100004c2:	6f                   	outs   dx,DWORD PTR ds:[esi]
100004c3:	6e                   	outs   dx,BYTE PTR ds:[esi]
100004c4:	74 72                	je     10000538 <RTL8139::write(int, unsigned char*, int*)+0x134>
100004c6:	6f                   	outs   dx,DWORD PTR ds:[esi]
100004c7:	6c                   	ins    BYTE PTR es:[edi],dx
100004c8:	6c                   	ins    BYTE PTR es:[edi],dx
100004c9:	65 72 00             	gs jb  100004cc <RTL8139::write(int, unsigned char*, int*)+0xc8>
100004cc:	52                   	push   edx
100004cd:	54                   	push   esp
100004ce:	4c                   	dec    esp
100004cf:	38 31                	cmp    BYTE PTR [ecx],dh
100004d1:	33 39                	xor    edi,DWORD PTR [ecx]
100004d3:	20 45 0a             	and    BYTE PTR [ebp+0xa],al
100004d6:	00 5b 42             	add    BYTE PTR [ebx+0x42],bl
100004d9:	52                   	push   edx
100004da:	4f                   	dec    edi
100004db:	4b                   	dec    ebx
100004dc:	45                   	inc    ebp
100004dd:	4e                   	dec    esi
100004de:	5d                   	pop    ebp
100004df:	20 52 54             	and    BYTE PTR [edx+0x54],dl
100004e2:	4c                   	dec    esp
100004e3:	38 31                	cmp    BYTE PTR [ecx],dh
100004e5:	33 39                	xor    edi,DWORD PTR [ecx]
100004e7:	00 52 65             	add    BYTE PTR [edx+0x65],dl
100004ea:	63 65 69             	arpl   WORD PTR [ebp+0x69],sp
100004ed:	76 65                	jbe    10000554 <RTL8139::write(int, unsigned char*, int*)+0x150>
100004ef:	64 20 61 20          	and    BYTE PTR fs:[ecx+0x20],ah
100004f3:	70 61                	jo     10000556 <RTL8139::write(int, unsigned char*, int*)+0x152>
100004f5:	63 6b 65             	arpl   WORD PTR [ebx+0x65],bp
100004f8:	74 21                	je     1000051b <RTL8139::write(int, unsigned char*, int*)+0x117>
100004fa:	0a 00                	or     al,BYTE PTR [eax]
100004fc:	53                   	push   ebx
100004fd:	65 6e                	outs   dx,BYTE PTR gs:[esi]
100004ff:	74 20                	je     10000521 <RTL8139::write(int, unsigned char*, int*)+0x11d>
10000501:	61                   	popa   
10000502:	20 70 61             	and    BYTE PTR [eax+0x61],dh
10000505:	63 6b 65             	arpl   WORD PTR [ebx+0x65],bp
10000508:	74 21                	je     1000052b <RTL8139::write(int, unsigned char*, int*)+0x127>
1000050a:	0a 00                	or     al,BYTE PTR [eax]
1000050c:	46                   	inc    esi
1000050d:	61                   	popa   
1000050e:	69 6c 65 64 20 74 6f 20 	imul   ebp,DWORD PTR [ebp+eiz*2+0x64],0x206f7420
10000516:	72 65                	jb     1000057d <vtable for RTL8139+0x19>
10000518:	63 65 69             	arpl   WORD PTR [ebp+0x69],sp
1000051b:	76 65                	jbe    10000582 <vtable for RTL8139+0x1e>
1000051d:	20 61 20             	and    BYTE PTR [ecx+0x20],ah
10000520:	70 61                	jo     10000583 <vtable for RTL8139+0x1f>
10000522:	63 6b 65             	arpl   WORD PTR [ebx+0x65],bp
10000525:	74 21                	je     10000548 <RTL8139::write(int, unsigned char*, int*)+0x144>
10000527:	0a 00                	or     al,BYTE PTR [eax]
10000529:	46                   	inc    esi
1000052a:	61                   	popa   
1000052b:	69 6c 65 64 20 74 6f 20 	imul   ebp,DWORD PTR [ebp+eiz*2+0x64],0x206f7420
10000533:	73 65                	jae    1000059a <RTL8139::~RTL8139()+0x2>
10000535:	6e                   	outs   dx,BYTE PTR ds:[esi]
10000536:	64 20 61 20          	and    BYTE PTR fs:[ecx+0x20],ah
1000053a:	70 61                	jo     1000059d <RTL8139::~RTL8139()+0x5>
1000053c:	63 6b 65             	arpl   WORD PTR [ebx+0x65],bp
1000053f:	74 21                	je     10000562 <RTL8139::write(int, unsigned char*, int*)+0x15e>
10000541:	0a 00                	or     al,BYTE PTR [eax]
10000543:	4d                   	dec    ebp
10000544:	41                   	inc    ecx
10000545:	43                   	inc    ebx
10000546:	20 41 44             	and    BYTE PTR [ecx+0x44],al
10000549:	44                   	inc    esp
1000054a:	52                   	push   edx
1000054b:	45                   	inc    ebp
1000054c:	53                   	push   ebx
1000054d:	53                   	push   ebx
1000054e:	20 28                	and    BYTE PTR [eax],ch
10000550:	42                   	inc    edx
10000551:	49                   	dec    ecx
10000552:	47                   	inc    edi
10000553:	20 45 4e             	and    BYTE PTR [ebp+0x4e],al
10000556:	44                   	inc    esp
10000557:	49                   	dec    ecx
10000558:	41                   	inc    ecx
10000559:	4e                   	dec    esi
1000055a:	29 20                	sub    DWORD PTR [eax],esp
1000055c:	3d 20 30 78 25       	cmp    eax,0x25783020
10000561:	58                   	pop    eax
10000562:	0a 00                	or     al,BYTE PTR [eax]

10000564 <vtable for RTL8139>:
	...
	1000056c: R_386_32	RTL8139::~RTL8139()
	10000570: R_386_32	RTL8139::~RTL8139()
	10000574: R_386_32	RTL8139::open(int, int, void*)
	10000578: R_386_32	RTL8139::close(int, int, void*)
	1000057c: R_386_32	Device::hibernate()
	10000580: R_386_32	Device::wake()
	10000584: R_386_32	Device::detect()
	10000588: R_386_32	Device::disableLegacy()
	1000058c: R_386_32	Device::powerSaving(PowerSavingLevel)
	10000590: R_386_32	RTL8139::getMAC()
	10000594: R_386_32	RTL8139::write(int, unsigned char*, int*)

Disassembly of section .text._ZN7RTL8139D2Ev:

10000598 <RTL8139::~RTL8139()>:
10000598:	55                   	push   ebp
10000599:	89 e5                	mov    ebp,esp
1000059b:	83 ec 08             	sub    esp,0x8
1000059e:	ba 08 00 00 00       	mov    edx,0x8	1000059f: R_386_32	vtable for RTL8139
100005a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100005a6:	89 10                	mov    DWORD PTR [eax],edx
100005a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100005ab:	83 ec 0c             	sub    esp,0xc
100005ae:	50                   	push   eax
100005af:	e8 fc ff ff ff       	call   100005b0 <RTL8139::~RTL8139()+0x18>	100005b0: R_386_PC32	NIC::~NIC()
100005b4:	83 c4 10             	add    esp,0x10
100005b7:	90                   	nop
100005b8:	c9                   	leave  
100005b9:	c3                   	ret    

Disassembly of section .text._ZN7RTL8139D0Ev:

100005ba <RTL8139::~RTL8139()>:
100005ba:	55                   	push   ebp
100005bb:	89 e5                	mov    ebp,esp
100005bd:	83 ec 08             	sub    esp,0x8
100005c0:	83 ec 0c             	sub    esp,0xc
100005c3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100005c6:	e8 fc ff ff ff       	call   100005c7 <RTL8139::~RTL8139()+0xd>	100005c7: R_386_PC32	RTL8139::~RTL8139()
100005cb:	83 c4 10             	add    esp,0x10
100005ce:	83 ec 08             	sub    esp,0x8
100005d1:	68 70 01 00 00       	push   0x170
100005d6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100005d9:	e8 fc ff ff ff       	call   100005da <RTL8139::~RTL8139()+0x20>	100005da: R_386_PC32	operator delete(void*, unsigned long)
100005de:	83 c4 10             	add    esp,0x10
100005e1:	c9                   	leave  
100005e2:	c3                   	ret    
