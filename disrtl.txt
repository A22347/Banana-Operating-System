
packages/banana/32/0002/rtl8139.sys:     file format elf32-i386


Disassembly of section .text:

10000000 <RTL8139::RTL8139()-0x60>:
10000000:	57                   	push   edi
10000001:	56                   	push   esi
10000002:	53                   	push   ebx
10000003:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
10000007:	83 ec 0c             	sub    esp,0xc
1000000a:	56                   	push   esi
1000000b:	81 c6 18 01 00 00    	add    esi,0x118
10000011:	e8 fc ff ff ff       	call   10000012 <RTL8139::RTL8139()-0x4e>	10000012: R_386_PC32	Device::getParent()
10000016:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
1000001d:	89 c7                	mov    edi,eax
1000001f:	e8 fc ff ff ff       	call   10000020 <RTL8139::RTL8139()-0x40>	10000020: R_386_PC32	operator new(unsigned long)
10000024:	89 04 24             	mov    DWORD PTR [esp],eax
10000027:	89 c3                	mov    ebx,eax
10000029:	e8 fc ff ff ff       	call   1000002a <RTL8139::RTL8139()-0x36>	1000002a: R_386_PC32	RTL8139::RTL8139()
1000002e:	58                   	pop    eax
1000002f:	5a                   	pop    edx
10000030:	53                   	push   ebx
10000031:	57                   	push   edi
10000032:	e8 fc ff ff ff       	call   10000033 <RTL8139::RTL8139()-0x2d>	10000033: R_386_PC32	Device::addChild(Device*)
10000037:	83 ec 1c             	sub    esp,0x1c
1000003a:	b9 09 00 00 00       	mov    ecx,0x9
1000003f:	89 e7                	mov    edi,esp
10000041:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000043:	53                   	push   ebx
10000044:	e8 fc ff ff ff       	call   10000045 <RTL8139::RTL8139()-0x1b>	10000045: R_386_PC32	Device::preOpenPCI(PCIDeviceInfo)
10000049:	83 c4 30             	add    esp,0x30
1000004c:	6a 00                	push   0x0
1000004e:	6a 00                	push   0x0
10000050:	6a 00                	push   0x0
10000052:	53                   	push   ebx
10000053:	e8 fc ff ff ff       	call   10000054 <RTL8139::RTL8139()-0xc>	10000054: R_386_PC32	RTL8139::open_(int, int, void*)
10000058:	83 c4 10             	add    esp,0x10
1000005b:	5b                   	pop    ebx
1000005c:	5e                   	pop    esi
1000005d:	5f                   	pop    edi
1000005e:	c3                   	ret    
1000005f:	90                   	nop

10000060 <RTL8139::RTL8139()>:
10000060:	55                   	push   ebp
10000061:	89 e5                	mov    ebp,esp
10000063:	83 ec 08             	sub    esp,0x8
10000066:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000069:	83 ec 08             	sub    esp,0x8
1000006c:	68 18 05 00 10       	push   0x10000518	1000006d: R_386_32	.text
10000071:	50                   	push   eax
10000072:	e8 fc ff ff ff       	call   10000073 <RTL8139::RTL8139()+0x13>	10000073: R_386_PC32	NIC::NIC(char const*)
10000077:	83 c4 10             	add    esp,0x10
1000007a:	ba 08 00 00 00       	mov    edx,0x8	1000007b: R_386_32	vtable for RTL8139
1000007f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000082:	89 10                	mov    DWORD PTR [eax],edx
10000084:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000087:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
10000091:	83 ec 0c             	sub    esp,0xc
10000094:	68 34 05 00 10       	push   0x10000534	10000095: R_386_32	.text
10000099:	e8 fc ff ff ff       	call   1000009a <RTL8139::RTL8139()+0x3a>	1000009a: R_386_PC32	Dbg::kprintf(char const*, ...)
1000009e:	83 c4 10             	add    esp,0x10
100000a1:	90                   	nop
100000a2:	c9                   	leave  
100000a3:	c3                   	ret    

100000a4 <RTL8139::reset()>:
100000a4:	56                   	push   esi
100000a5:	53                   	push   ebx
100000a6:	be 81 38 01 00       	mov    esi,0x13881
100000ab:	51                   	push   ecx
100000ac:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
100000b0:	6a 37                	push   0x37
100000b2:	6a 10                	push   0x10
100000b4:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
100000ba:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	100000bc: R_386_32	thePCI
100000c0:	e8 fc ff ff ff       	call   100000c1 <RTL8139::reset()+0x1d>	100000c1: R_386_PC32	PCI::writeBAR8(unsigned int, unsigned char, int)
100000c5:	83 c4 10             	add    esp,0x10
100000c8:	52                   	push   edx
100000c9:	6a 37                	push   0x37
100000cb:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
100000d1:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	100000d3: R_386_32	thePCI
100000d7:	e8 fc ff ff ff       	call   100000d8 <RTL8139::reset()+0x34>	100000d8: R_386_PC32	PCI::readBAR8(unsigned int, int)
100000dc:	83 c4 10             	add    esp,0x10
100000df:	a8 10                	test   al,0x10
100000e1:	74 13                	je     100000f6 <RTL8139::reset()+0x52>
100000e3:	4e                   	dec    esi
100000e4:	75 e2                	jne    100000c8 <RTL8139::reset()+0x24>
100000e6:	83 ec 0c             	sub    esp,0xc
100000e9:	68 3f 05 00 10       	push   0x1000053f	100000ea: R_386_32	.text
100000ee:	e8 fc ff ff ff       	call   100000ef <RTL8139::reset()+0x4b>	100000ef: R_386_PC32	KePanic(char const*)
100000f3:	83 c4 10             	add    esp,0x10
100000f6:	c7 83 70 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x170],0x0
10000100:	58                   	pop    eax
10000101:	5b                   	pop    ebx
10000102:	5e                   	pop    esi
10000103:	c3                   	ret    

10000104 <rtl8139IRQHandler(regs*, void*)>:
10000104:	53                   	push   ebx
10000105:	83 ec 0c             	sub    esp,0xc
10000108:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
1000010c:	6a 3e                	push   0x3e
1000010e:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
10000114:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000116: R_386_32	thePCI
1000011a:	e8 fc ff ff ff       	call   1000011b <rtl8139IRQHandler(regs*, void*)+0x17>	1000011b: R_386_PC32	PCI::readBAR16(unsigned int, int)
1000011f:	83 c4 10             	add    esp,0x10
10000122:	a8 01                	test   al,0x1
10000124:	74 0a                	je     10000130 <rtl8139IRQHandler(regs*, void*)+0x2c>
10000126:	83 ec 0c             	sub    esp,0xc
10000129:	68 50 05 00 10       	push   0x10000550	1000012a: R_386_32	.text
1000012e:	eb 28                	jmp    10000158 <rtl8139IRQHandler(regs*, void*)+0x54>
10000130:	a8 04                	test   al,0x4
10000132:	74 0a                	je     1000013e <rtl8139IRQHandler(regs*, void*)+0x3a>
10000134:	83 ec 0c             	sub    esp,0xc
10000137:	68 64 05 00 10       	push   0x10000564	10000138: R_386_32	.text
1000013c:	eb 1a                	jmp    10000158 <rtl8139IRQHandler(regs*, void*)+0x54>
1000013e:	a8 02                	test   al,0x2
10000140:	74 0a                	je     1000014c <rtl8139IRQHandler(regs*, void*)+0x48>
10000142:	83 ec 0c             	sub    esp,0xc
10000145:	68 74 05 00 10       	push   0x10000574	10000146: R_386_32	.text
1000014a:	eb 0c                	jmp    10000158 <rtl8139IRQHandler(regs*, void*)+0x54>
1000014c:	a8 08                	test   al,0x8
1000014e:	74 10                	je     10000160 <rtl8139IRQHandler(regs*, void*)+0x5c>
10000150:	83 ec 0c             	sub    esp,0xc
10000153:	68 91 05 00 10       	push   0x10000591	10000154: R_386_32	.text
10000158:	e8 fc ff ff ff       	call   10000159 <rtl8139IRQHandler(regs*, void*)+0x55>	10000159: R_386_PC32	Dbg::kprintf(char const*, ...)
1000015d:	83 c4 10             	add    esp,0x10
10000160:	6a 3e                	push   0x3e
10000162:	6a 01                	push   0x1
10000164:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
1000016a:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	1000016c: R_386_32	thePCI
10000170:	e8 fc ff ff ff       	call   10000171 <rtl8139IRQHandler(regs*, void*)+0x6d>	10000171: R_386_PC32	PCI::writeBAR16(unsigned int, unsigned short, int)
10000175:	83 c4 18             	add    esp,0x18
10000178:	5b                   	pop    ebx
10000179:	c3                   	ret    

1000017a <RTL8139::open(int, int, void*)>:
1000017a:	31 c0                	xor    eax,eax
1000017c:	c3                   	ret    
1000017d:	90                   	nop

1000017e <RTL8139::open_(int, int, void*)>:
1000017e:	57                   	push   edi
1000017f:	31 ff                	xor    edi,edi
10000181:	56                   	push   esi
10000182:	53                   	push   ebx
10000183:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
10000187:	83 ec 0c             	sub    esp,0xc
1000018a:	6a 04                	push   0x4
1000018c:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
10000193:	50                   	push   eax
10000194:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
1000019b:	50                   	push   eax
1000019c:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
100001a3:	50                   	push   eax
100001a4:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	100001a6: R_386_32	thePCI
100001aa:	e8 fc ff ff ff       	call   100001ab <RTL8139::open_(int, int, void*)+0x2d>	100001ab: R_386_PC32	PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)
100001af:	83 c4 18             	add    esp,0x18
100001b2:	83 c8 04             	or     eax,0x4
100001b5:	0f b7 c0             	movzx  eax,ax
100001b8:	50                   	push   eax
100001b9:	6a 04                	push   0x4
100001bb:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
100001c2:	50                   	push   eax
100001c3:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
100001ca:	50                   	push   eax
100001cb:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
100001d2:	50                   	push   eax
100001d3:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	100001d5: R_386_32	thePCI
100001d9:	e8 fc ff ff ff       	call   100001da <RTL8139::open_(int, int, void*)+0x5c>	100001da: R_386_PC32	PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)
100001de:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
100001e4:	83 c4 20             	add    esp,0x20
100001e7:	89 83 58 01 00 00    	mov    DWORD PTR [ebx+0x158],eax
100001ed:	c7 83 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x16c],0x0
100001f7:	6a 52                	push   0x52
100001f9:	6a 00                	push   0x0
100001fb:	50                   	push   eax
100001fc:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	100001fe: R_386_32	thePCI
10000202:	e8 fc ff ff ff       	call   10000203 <RTL8139::open_(int, int, void*)+0x85>	10000203: R_386_PC32	PCI::writeBAR8(unsigned int, unsigned char, int)
10000207:	89 1c 24             	mov    DWORD PTR [esp],ebx
1000020a:	e8 fc ff ff ff       	call   1000020b <RTL8139::open_(int, int, void*)+0x8d>	1000020b: R_386_PC32	RTL8139::reset()
1000020f:	83 c4 0c             	add    esp,0xc
10000212:	6a 00                	push   0x0
10000214:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
1000021a:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	1000021c: R_386_32	thePCI
10000220:	e8 fc ff ff ff       	call   10000221 <RTL8139::open_(int, int, void*)+0xa3>	10000221: R_386_PC32	PCI::readBAR8(unsigned int, int)
10000225:	83 c4 0c             	add    esp,0xc
10000228:	0f b6 c0             	movzx  eax,al
1000022b:	89 fa                	mov    edx,edi
1000022d:	0f a4 c2 08          	shld   edx,eax,0x8
10000231:	c1 e0 08             	shl    eax,0x8
10000234:	89 93 68 01 00 00    	mov    DWORD PTR [ebx+0x168],edx
1000023a:	89 83 64 01 00 00    	mov    DWORD PTR [ebx+0x164],eax
10000240:	6a 01                	push   0x1
10000242:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
10000248:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	1000024a: R_386_32	thePCI
1000024e:	e8 fc ff ff ff       	call   1000024f <RTL8139::open_(int, int, void*)+0xd1>	1000024f: R_386_PC32	PCI::readBAR8(unsigned int, int)
10000253:	8b 8b 68 01 00 00    	mov    ecx,DWORD PTR [ebx+0x168]
10000259:	83 c4 0c             	add    esp,0xc
1000025c:	0f b6 c0             	movzx  eax,al
1000025f:	0b 83 64 01 00 00    	or     eax,DWORD PTR [ebx+0x164]
10000265:	89 c2                	mov    edx,eax
10000267:	0f a4 d1 08          	shld   ecx,edx,0x8
1000026b:	c1 e2 08             	shl    edx,0x8
1000026e:	89 8b 68 01 00 00    	mov    DWORD PTR [ebx+0x168],ecx
10000274:	89 93 64 01 00 00    	mov    DWORD PTR [ebx+0x164],edx
1000027a:	6a 02                	push   0x2
1000027c:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
10000282:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000284: R_386_32	thePCI
10000288:	e8 fc ff ff ff       	call   10000289 <RTL8139::open_(int, int, void*)+0x10b>	10000289: R_386_PC32	PCI::readBAR8(unsigned int, int)
1000028d:	8b 8b 68 01 00 00    	mov    ecx,DWORD PTR [ebx+0x168]
10000293:	83 c4 0c             	add    esp,0xc
10000296:	89 cf                	mov    edi,ecx
10000298:	0f b6 c0             	movzx  eax,al
1000029b:	0b 83 64 01 00 00    	or     eax,DWORD PTR [ebx+0x164]
100002a1:	89 c6                	mov    esi,eax
100002a3:	0f a4 f7 08          	shld   edi,esi,0x8
100002a7:	c1 e6 08             	shl    esi,0x8
100002aa:	89 bb 68 01 00 00    	mov    DWORD PTR [ebx+0x168],edi
100002b0:	89 b3 64 01 00 00    	mov    DWORD PTR [ebx+0x164],esi
100002b6:	6a 03                	push   0x3
100002b8:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
100002be:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	100002c0: R_386_32	thePCI
100002c4:	e8 fc ff ff ff       	call   100002c5 <RTL8139::open_(int, int, void*)+0x147>	100002c5: R_386_PC32	PCI::readBAR8(unsigned int, int)
100002c9:	8b 8b 68 01 00 00    	mov    ecx,DWORD PTR [ebx+0x168]
100002cf:	83 c4 0c             	add    esp,0xc
100002d2:	0f b6 c0             	movzx  eax,al
100002d5:	0b 83 64 01 00 00    	or     eax,DWORD PTR [ebx+0x164]
100002db:	89 c2                	mov    edx,eax
100002dd:	0f a4 d1 08          	shld   ecx,edx,0x8
100002e1:	c1 e2 08             	shl    edx,0x8
100002e4:	89 8b 68 01 00 00    	mov    DWORD PTR [ebx+0x168],ecx
100002ea:	89 93 64 01 00 00    	mov    DWORD PTR [ebx+0x164],edx
100002f0:	6a 04                	push   0x4
100002f2:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
100002f8:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	100002fa: R_386_32	thePCI
100002fe:	e8 fc ff ff ff       	call   100002ff <RTL8139::open_(int, int, void*)+0x181>	100002ff: R_386_PC32	PCI::readBAR8(unsigned int, int)
10000303:	8b 8b 68 01 00 00    	mov    ecx,DWORD PTR [ebx+0x168]
10000309:	0f b6 c0             	movzx  eax,al
1000030c:	89 cf                	mov    edi,ecx
1000030e:	0b 83 64 01 00 00    	or     eax,DWORD PTR [ebx+0x164]
10000314:	89 c6                	mov    esi,eax
10000316:	0f a4 f7 08          	shld   edi,esi,0x8
1000031a:	c1 e6 08             	shl    esi,0x8
1000031d:	89 bb 68 01 00 00    	mov    DWORD PTR [ebx+0x168],edi
10000323:	89 b3 64 01 00 00    	mov    DWORD PTR [ebx+0x164],esi
10000329:	83 c4 0c             	add    esp,0xc
1000032c:	6a 05                	push   0x5
1000032e:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
10000334:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000336: R_386_32	thePCI
1000033a:	e8 fc ff ff ff       	call   1000033b <RTL8139::open_(int, int, void*)+0x1bd>	1000033b: R_386_PC32	PCI::readBAR8(unsigned int, int)
1000033f:	83 c4 0c             	add    esp,0xc
10000342:	8b bb 68 01 00 00    	mov    edi,DWORD PTR [ebx+0x168]
10000348:	0f b6 c0             	movzx  eax,al
1000034b:	89 bb 68 01 00 00    	mov    DWORD PTR [ebx+0x168],edi
10000351:	0b 83 64 01 00 00    	or     eax,DWORD PTR [ebx+0x164]
10000357:	89 83 64 01 00 00    	mov    DWORD PTR [ebx+0x164],eax
1000035d:	57                   	push   edi
1000035e:	50                   	push   eax
1000035f:	68 ab 05 00 10       	push   0x100005ab	10000360: R_386_32	.text
10000364:	e8 fc ff ff ff       	call   10000365 <RTL8139::open_(int, int, void*)+0x1e7>	10000365: R_386_PC32	Dbg::kprintf(char const*, ...)
10000369:	c7 83 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x15c],0x0
10000373:	c7 83 60 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x160],0x0
1000037d:	6a 30                	push   0x30
1000037f:	6a 00                	push   0x0
10000381:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
10000387:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000389: R_386_32	thePCI
1000038d:	e8 fc ff ff ff       	call   1000038e <RTL8139::open_(int, int, void*)+0x210>	1000038e: R_386_PC32	PCI::writeBAR32(unsigned int, unsigned int, int)
10000392:	83 c4 20             	add    esp,0x20
10000395:	6a 3c                	push   0x3c
10000397:	6a 05                	push   0x5
10000399:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
1000039f:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	100003a1: R_386_32	thePCI
100003a5:	e8 fc ff ff ff       	call   100003a6 <RTL8139::open_(int, int, void*)+0x228>	100003a6: R_386_PC32	PCI::writeBAR16(unsigned int, unsigned short, int)
100003aa:	6a 44                	push   0x44
100003ac:	68 8f 00 00 00       	push   0x8f
100003b1:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
100003b7:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	100003b9: R_386_32	thePCI
100003bd:	e8 fc ff ff ff       	call   100003be <RTL8139::open_(int, int, void*)+0x240>	100003be: R_386_PC32	PCI::writeBAR32(unsigned int, unsigned int, int)
100003c2:	83 c4 20             	add    esp,0x20
100003c5:	6a 37                	push   0x37
100003c7:	6a 0c                	push   0xc
100003c9:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
100003cf:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	100003d1: R_386_32	thePCI
100003d5:	e8 fc ff ff ff       	call   100003d6 <RTL8139::open_(int, int, void*)+0x258>	100003d6: R_386_PC32	PCI::writeBAR8(unsigned int, unsigned char, int)
100003da:	53                   	push   ebx
100003db:	6a 00                	push   0x0
100003dd:	68 00 00 00 00       	push   0x0	100003de: R_386_32	rtl8139IRQHandler(regs*, void*)
100003e2:	0f b6 83 38 01 00 00 	movzx  eax,BYTE PTR [ebx+0x138]
100003e9:	50                   	push   eax
100003ea:	e8 fc ff ff ff       	call   100003eb <RTL8139::open_(int, int, void*)+0x26d>	100003eb: R_386_PC32	installIRQHandler(int, void (*)(regs*, void*), bool, void*)
100003ef:	83 c4 20             	add    esp,0x20
100003f2:	31 c0                	xor    eax,eax
100003f4:	5b                   	pop    ebx
100003f5:	5e                   	pop    esi
100003f6:	5f                   	pop    edi
100003f7:	c3                   	ret    

100003f8 <RTL8139::close(int, int, void*)>:
100003f8:	31 c0                	xor    eax,eax
100003fa:	c3                   	ret    
100003fb:	90                   	nop

100003fc <RTL8139::getMAC()>:
100003fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
10000400:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
10000406:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
1000040c:	c3                   	ret    
1000040d:	90                   	nop

1000040e <RTL8139::havePackets()>:
1000040e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
10000412:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10000418:	c3                   	ret    
10000419:	90                   	nop

1000041a <RTL8139::write(int, unsigned char*, int*)>:
1000041a:	56                   	push   esi
1000041b:	be a0 86 01 00       	mov    esi,0x186a0
10000420:	53                   	push   ebx
10000421:	53                   	push   ebx
10000422:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
10000426:	51                   	push   ecx
10000427:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
1000042d:	8d 04 85 10 00 00 00 	lea    eax,[eax*4+0x10]
10000434:	50                   	push   eax
10000435:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
1000043b:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	1000043d: R_386_32	thePCI
10000441:	e8 fc ff ff ff       	call   10000442 <RTL8139::write(int, unsigned char*, int*)+0x28>	10000442: R_386_PC32	PCI::readBAR32(unsigned int, int)
10000446:	83 c4 10             	add    esp,0x10
10000449:	0f ba e0 0d          	bt     eax,0xd
1000044d:	72 0a                	jb     10000459 <RTL8139::write(int, unsigned char*, int*)+0x3f>
1000044f:	4e                   	dec    esi
10000450:	75 d4                	jne    10000426 <RTL8139::write(int, unsigned char*, int*)+0xc>
10000452:	b8 04 00 00 00       	mov    eax,0x4
10000457:	eb 5f                	jmp    100004b8 <RTL8139::write(int, unsigned char*, int*)+0x9e>
10000459:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
1000045f:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
10000466:	50                   	push   eax
10000467:	6a 00                	push   0x0
10000469:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
1000046f:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000471: R_386_32	thePCI
10000475:	e8 fc ff ff ff       	call   10000476 <RTL8139::write(int, unsigned char*, int*)+0x5c>	10000476: R_386_PC32	PCI::writeBAR32(unsigned int, unsigned int, int)
1000047a:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
10000480:	8d 04 85 10 00 00 00 	lea    eax,[eax*4+0x10]
10000487:	50                   	push   eax
10000488:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
1000048c:	25 ff 1f 00 00       	and    eax,0x1fff
10000491:	50                   	push   eax
10000492:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
10000498:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	1000049a: R_386_32	thePCI
1000049e:	e8 fc ff ff ff       	call   1000049f <RTL8139::write(int, unsigned char*, int*)+0x85>	1000049f: R_386_PC32	PCI::writeBAR32(unsigned int, unsigned int, int)
100004a3:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
100004a9:	83 c4 20             	add    esp,0x20
100004ac:	40                   	inc    eax
100004ad:	83 e0 03             	and    eax,0x3
100004b0:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
100004b6:	31 c0                	xor    eax,eax
100004b8:	5a                   	pop    edx
100004b9:	5b                   	pop    ebx
100004ba:	5e                   	pop    esi
100004bb:	c3                   	ret    

100004bc <RTL8139::waitWrite()>:
100004bc:	56                   	push   esi
100004bd:	53                   	push   ebx
100004be:	53                   	push   ebx
100004bf:	bb a0 86 01 00       	mov    ebx,0x186a0
100004c4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
100004c8:	51                   	push   ecx
100004c9:	8b 86 70 01 00 00    	mov    eax,DWORD PTR [esi+0x170]
100004cf:	83 c0 03             	add    eax,0x3
100004d2:	83 e0 03             	and    eax,0x3
100004d5:	8d 04 85 10 00 00 00 	lea    eax,[eax*4+0x10]
100004dc:	50                   	push   eax
100004dd:	ff b6 58 01 00 00    	push   DWORD PTR [esi+0x158]
100004e3:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	100004e5: R_386_32	thePCI
100004e9:	e8 fc ff ff ff       	call   100004ea <RTL8139::waitWrite()+0x2e>	100004ea: R_386_PC32	PCI::readBAR32(unsigned int, int)
100004ee:	83 c4 10             	add    esp,0x10
100004f1:	0f ba e0 0f          	bt     eax,0xf
100004f5:	72 0a                	jb     10000501 <RTL8139::waitWrite()+0x45>
100004f7:	4b                   	dec    ebx
100004f8:	75 ce                	jne    100004c8 <RTL8139::waitWrite()+0xc>
100004fa:	b8 04 00 00 00       	mov    eax,0x4
100004ff:	eb 02                	jmp    10000503 <RTL8139::waitWrite()+0x47>
10000501:	31 c0                	xor    eax,eax
10000503:	5a                   	pop    edx
10000504:	5b                   	pop    ebx
10000505:	5e                   	pop    esi
10000506:	c3                   	ret    
10000507:	90                   	nop

10000508 <RTL8139::read(int, unsigned char*, int*)>:
10000508:	b8 01 00 00 00       	mov    eax,0x1
1000050d:	c3                   	ret    
1000050e:	66 90                	xchg   ax,ax
10000510:	80 00 00             	add    BYTE PTR [eax],0x0
10000513:	00 80 00 00 00 52    	add    BYTE PTR [eax+0x52000000],al
10000519:	54                   	push   esp
1000051a:	4c                   	dec    esp
1000051b:	38 31                	cmp    BYTE PTR [ecx],dh
1000051d:	33 39                	xor    edi,DWORD PTR [ecx]
1000051f:	20 45 74             	and    BYTE PTR [ebp+0x74],al
10000522:	68 65 72 6e 65       	push   0x656e7265
10000527:	74 20                	je     10000549 <RTL8139::read(int, unsigned char*, int*)+0x41>
10000529:	43                   	inc    ebx
1000052a:	6f                   	outs   dx,DWORD PTR ds:[esi]
1000052b:	6e                   	outs   dx,BYTE PTR ds:[esi]
1000052c:	74 72                	je     100005a0 <RTL8139::read(int, unsigned char*, int*)+0x98>
1000052e:	6f                   	outs   dx,DWORD PTR ds:[esi]
1000052f:	6c                   	ins    BYTE PTR es:[edi],dx
10000530:	6c                   	ins    BYTE PTR es:[edi],dx
10000531:	65 72 00             	gs jb  10000534 <RTL8139::read(int, unsigned char*, int*)+0x2c>
10000534:	52                   	push   edx
10000535:	54                   	push   esp
10000536:	4c                   	dec    esp
10000537:	38 31                	cmp    BYTE PTR [ecx],dh
10000539:	33 39                	xor    edi,DWORD PTR [ecx]
1000053b:	20 45 0a             	and    BYTE PTR [ebp+0xa],al
1000053e:	00 5b 42             	add    BYTE PTR [ebx+0x42],bl
10000541:	52                   	push   edx
10000542:	4f                   	dec    edi
10000543:	4b                   	dec    ebx
10000544:	45                   	inc    ebp
10000545:	4e                   	dec    esi
10000546:	5d                   	pop    ebp
10000547:	20 52 54             	and    BYTE PTR [edx+0x54],dl
1000054a:	4c                   	dec    esp
1000054b:	38 31                	cmp    BYTE PTR [ecx],dh
1000054d:	33 39                	xor    edi,DWORD PTR [ecx]
1000054f:	00 52 65             	add    BYTE PTR [edx+0x65],dl
10000552:	63 65 69             	arpl   WORD PTR [ebp+0x69],sp
10000555:	76 65                	jbe    100005bc <RTL8139::read(int, unsigned char*, int*)+0xb4>
10000557:	64 20 61 20          	and    BYTE PTR fs:[ecx+0x20],ah
1000055b:	70 61                	jo     100005be <RTL8139::read(int, unsigned char*, int*)+0xb6>
1000055d:	63 6b 65             	arpl   WORD PTR [ebx+0x65],bp
10000560:	74 21                	je     10000583 <RTL8139::read(int, unsigned char*, int*)+0x7b>
10000562:	0a 00                	or     al,BYTE PTR [eax]
10000564:	53                   	push   ebx
10000565:	65 6e                	outs   dx,BYTE PTR gs:[esi]
10000567:	74 20                	je     10000589 <RTL8139::read(int, unsigned char*, int*)+0x81>
10000569:	61                   	popa   
1000056a:	20 70 61             	and    BYTE PTR [eax+0x61],dh
1000056d:	63 6b 65             	arpl   WORD PTR [ebx+0x65],bp
10000570:	74 21                	je     10000593 <RTL8139::read(int, unsigned char*, int*)+0x8b>
10000572:	0a 00                	or     al,BYTE PTR [eax]
10000574:	46                   	inc    esi
10000575:	61                   	popa   
10000576:	69 6c 65 64 20 74 6f 20 	imul   ebp,DWORD PTR [ebp+eiz*2+0x64],0x206f7420
1000057e:	72 65                	jb     100005e5 <vtable for RTL8139+0x19>
10000580:	63 65 69             	arpl   WORD PTR [ebp+0x69],sp
10000583:	76 65                	jbe    100005ea <vtable for RTL8139+0x1e>
10000585:	20 61 20             	and    BYTE PTR [ecx+0x20],ah
10000588:	70 61                	jo     100005eb <vtable for RTL8139+0x1f>
1000058a:	63 6b 65             	arpl   WORD PTR [ebx+0x65],bp
1000058d:	74 21                	je     100005b0 <RTL8139::read(int, unsigned char*, int*)+0xa8>
1000058f:	0a 00                	or     al,BYTE PTR [eax]
10000591:	46                   	inc    esi
10000592:	61                   	popa   
10000593:	69 6c 65 64 20 74 6f 20 	imul   ebp,DWORD PTR [ebp+eiz*2+0x64],0x206f7420
1000059b:	73 65                	jae    10000602 <vtable for RTL8139+0x36>
1000059d:	6e                   	outs   dx,BYTE PTR ds:[esi]
1000059e:	64 20 61 20          	and    BYTE PTR fs:[ecx+0x20],ah
100005a2:	70 61                	jo     10000605 <vtable for RTL8139+0x39>
100005a4:	63 6b 65             	arpl   WORD PTR [ebx+0x65],bp
100005a7:	74 21                	je     100005ca <RTL8139::read(int, unsigned char*, int*)+0xc2>
100005a9:	0a 00                	or     al,BYTE PTR [eax]
100005ab:	4d                   	dec    ebp
100005ac:	41                   	inc    ecx
100005ad:	43                   	inc    ebx
100005ae:	20 41 44             	and    BYTE PTR [ecx+0x44],al
100005b1:	44                   	inc    esp
100005b2:	52                   	push   edx
100005b3:	45                   	inc    ebp
100005b4:	53                   	push   ebx
100005b5:	53                   	push   ebx
100005b6:	20 28                	and    BYTE PTR [eax],ch
100005b8:	42                   	inc    edx
100005b9:	49                   	dec    ecx
100005ba:	47                   	inc    edi
100005bb:	20 45 4e             	and    BYTE PTR [ebp+0x4e],al
100005be:	44                   	inc    esp
100005bf:	49                   	dec    ecx
100005c0:	41                   	inc    ecx
100005c1:	4e                   	dec    esi
100005c2:	29 20                	sub    DWORD PTR [eax],esp
100005c4:	3d 20 30 78 25       	cmp    eax,0x25783020
100005c9:	58                   	pop    eax
100005ca:	0a 00                	or     al,BYTE PTR [eax]

100005cc <vtable for RTL8139>:
	...
	100005d4: R_386_32	RTL8139::~RTL8139()
	100005d8: R_386_32	RTL8139::~RTL8139()
	100005dc: R_386_32	RTL8139::open(int, int, void*)
	100005e0: R_386_32	RTL8139::close(int, int, void*)
	100005e4: R_386_32	Device::hibernate()
	100005e8: R_386_32	Device::wake()
	100005ec: R_386_32	Device::detect()
	100005f0: R_386_32	Device::disableLegacy()
	100005f4: R_386_32	Device::powerSaving(PowerSavingLevel)
	100005f8: R_386_32	RTL8139::getMAC()
	100005fc: R_386_32	RTL8139::havePackets()
	10000600: R_386_32	RTL8139::write(int, unsigned char*, int*)
	10000604: R_386_32	RTL8139::waitWrite()
	10000608: R_386_32	RTL8139::read(int, unsigned char*, int*)

Disassembly of section .text._ZN7RTL8139D2Ev:

1000060c <RTL8139::~RTL8139()>:
1000060c:	55                   	push   ebp
1000060d:	89 e5                	mov    ebp,esp
1000060f:	83 ec 08             	sub    esp,0x8
10000612:	ba 08 00 00 00       	mov    edx,0x8	10000613: R_386_32	vtable for RTL8139
10000617:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000061a:	89 10                	mov    DWORD PTR [eax],edx
1000061c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000061f:	83 ec 0c             	sub    esp,0xc
10000622:	50                   	push   eax
10000623:	e8 fc ff ff ff       	call   10000624 <RTL8139::~RTL8139()+0x18>	10000624: R_386_PC32	NIC::~NIC()
10000628:	83 c4 10             	add    esp,0x10
1000062b:	90                   	nop
1000062c:	c9                   	leave  
1000062d:	c3                   	ret    

Disassembly of section .text._ZN7RTL8139D0Ev:

1000062e <RTL8139::~RTL8139()>:
1000062e:	55                   	push   ebp
1000062f:	89 e5                	mov    ebp,esp
10000631:	83 ec 08             	sub    esp,0x8
10000634:	83 ec 0c             	sub    esp,0xc
10000637:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000063a:	e8 fc ff ff ff       	call   1000063b <RTL8139::~RTL8139()+0xd>	1000063b: R_386_PC32	RTL8139::~RTL8139()
1000063f:	83 c4 10             	add    esp,0x10
10000642:	83 ec 08             	sub    esp,0x8
10000645:	68 74 01 00 00       	push   0x174
1000064a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000064d:	e8 fc ff ff ff       	call   1000064e <RTL8139::~RTL8139()+0x20>	1000064e: R_386_PC32	operator delete(void*, unsigned long)
10000652:	83 c4 10             	add    esp,0x10
10000655:	c9                   	leave  
10000656:	c3                   	ret    
